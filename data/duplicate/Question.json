[
    {
        "issue_id": 1294636994,
        "title": "Bug: can't use `react-dom/server` from `graaljs` script engine. ",
        "label": [
            "Type: Question",
            "Status: Unconfirmed",
            "Component: Server Rendering"
        ],
        "date": "2022-07-05T18:36:10Z",
        "status": "open",
        "description": "# Context:\r\n`graaljs` is a javascript engine, like `v8`, that runs on JVM. \r\nI'm trying to use `graaljs` to run `react-dom` and generate server-side rendered pages.\r\n# Problem\r\nThe package `react-dom/server` uses `TextEncoder`, that is not present in the `graaljs` engine.\r\nhttps://github.com/facebook/react/blob/v18.2.0/packages/react-server/src/ReactServerStreamConfigBrowser.js#L107\r\n`TextEncoder` is a `web` standard, not a `ECMAScript/Javascript` standard. \r\n\r\nI can't use `ReactServerStreamConfigNode`, because `graaljs` as a generic javascript engine, do not include packages like `util` or `stream`.\r\n\r\nI would like to know if is possible to implement a `ReactServerStreamConfigEngine`, that uses only `ECMAScript` standard features.\r\n\r\n\r\nReact version: 18.2.0\r\n",
        "remove_template_description": "# Context:  `graaljs` is a javascript engine, like `v8`, that runs on JVM.   I'm trying to use `graaljs` to run `react-dom` and generate server-side rendered pages.  # Problem  The package `react-dom/server` uses `TextEncoder`, that is not present in the `graaljs` engine.  https://github.com/facebook/react/blob/v18.2.0/packages/react-server/src/ReactServerStreamConfigBrowser.js#L107  `TextEncoder` is a `web` standard, not a `ECMAScript/Javascript` standard.     I can't use `ReactServerStreamConfigNode`, because `graaljs` as a generic javascript engine, do not include packages like `util` or `stream`.    I would like to know if is possible to implement a `ReactServerStreamConfigEngine`, that uses only `ECMAScript` standard features.      React version: 18.2.0",
        "human_words": "# Context:  `graaljs` is a javascript engine, like `v8`, that runs on JVM.   I'm trying to use `graaljs` to run `react-dom` and generate server-side rendered pages.  # Problem  The package `react-dom/server` uses `TextEncoder`, that is not present in the `graaljs` engine.  https://github.com/facebook/react/blob/v18.2.0/packages/react-server/src/ReactServerStreamConfigBrowser.js#L107  `TextEncoder` is a `web` standard, not a `ECMAScript/Javascript` standard.     I can't use `ReactServerStreamConfigNode`, because `graaljs` as a generic javascript engine, do not include packages like `util` or `stream`.    I would like to know if is possible to implement a `ReactServerStreamConfigEngine`, that uses only `ECMAScript` standard features.      React version: 18.2.0",
        "human_words_regrex": "# Context: `graaljs` is a javascript engine, like `v8`, that runs on JVM. I'm trying to use `graaljs` to run `react-dom` and generate server-side rendered pages. # Problem The package `react-dom/server` uses `TextEncoder`, that is not present in the `graaljs` engine.  `TextEncoder` is a `web` standard, not a `ECMAScript/Javascript` standard. I can't use `ReactServerStreamConfigNode`, because `graaljs` as a generic javascript engine, do not include packages like `util` or `stream`. I would like to know if is possible to implement a `ReactServerStreamConfigEngine`, that uses only `ECMAScript` standard features. React version: 18.2.0",
        "human_words_stopwords_removal_lemmatization": "# context : ` graaljs ` javascript engine , like ` v8 ` , run jvm . 'm trying use ` graaljs ` run ` react-dom ` generate server-side rendered page . # problem package ` react-dom/server ` us ` textencoder ` , present ` graaljs ` engine . ` textencoder ` ` web ` standard , ` ecmascript/javascript ` standard . ca n't use ` reactserverstreamconfignode ` , ` graaljs ` generic javascript engine , include package like ` util ` ` stream ` . would like know possible implement ` reactserverstreamconfigengine ` , us ` ecmascript ` standard feature . react version : 18.2.0",
        "title_stopwords_removal_lemmatization": "bug : ca n't use ` react-dom/server ` ` graaljs ` script engine ."
    },
    {
        "issue_id": 1294523389,
        "title": "Possible problem with the code",
        "label": [
            "Type: Question",
            "Status: Unconfirmed"
        ],
        "date": "2022-07-05T16:35:56Z",
        "status": "open",
        "description": "Hey there.\r\nI was looking at the code of Fiber (ReactFiberCommitWork.new.js is the file) and I realized that the IntelliSense wasn't working in some parts of the code, like:\r\n\r\n![Screen Shot 2022-07-05 at 13 34 39](https://user-images.githubusercontent.com/29440533/177375099-89e7ef63-15b9-4e56-a228-825a7e22c0e3.png)\r\n\r\nIs it the expected behavior? I think that the next cases won't be achieved. \r\n",
        "remove_template_description": "Hey there.  I was looking at the code of Fiber (ReactFiberCommitWork.new.js is the file) and I realized that the IntelliSense wasn't working in some parts of the code, like:    ![Screen Shot 2022-07-05 at 13 34 39](https://user-images.githubusercontent.com/29440533/177375099-89e7ef63-15b9-4e56-a228-825a7e22c0e3.png)    Is it the expected behavior? I think that the next cases won't be achieved.",
        "human_words": "Hey there.  I was looking at the code of Fiber (ReactFiberCommitWork.new.js is the file) and I realized that the IntelliSense wasn't working in some parts of the code, like:    ![Screen Shot 2022-07-05 at 13 34 39](https://user-images.githubusercontent.com/29440533/177375099-89e7ef63-15b9-4e56-a228-825a7e22c0e3.png)    Is it the expected behavior? I think that the next cases won't be achieved.",
        "human_words_regrex": "Hey there. I was looking at the code of Fiber (ReactFiberCommitWork.new.js is the file) and I realized that the IntelliSense wasn't working in some parts of the code, like: ! Is it the expected behavior? I think that the next cases won't be achieved.",
        "human_words_stopwords_removal_lemmatization": "hey . looking code fiber ( reactfibercommitwork.new.js file ) realized intellisense n't working part code , like : ! expected behavior ? think next case wo n't achieved .",
        "title_stopwords_removal_lemmatization": "possible problem code"
    },
    {
        "issue_id": 1211922388,
        "title": "Question about React.Fragment and dangerouslySetInnerHTML",
        "label": [
            "Type: Question"
        ],
        "date": "2022-04-22T07:15:07Z",
        "status": "closed",
        "description": "\r\nReact version: 17.0.0\r\n\r\nReact.Fragment Why not  dangerouslySetInnerHTML property\r\n",
        "remove_template_description": "React version: 17.0.0    React.Fragment Why not  dangerouslySetInnerHTML property",
        "human_words": "React version: 17.0.0    React.Fragment Why not  dangerouslySetInnerHTML property",
        "human_words_regrex": "React version: 17.0.0 React.Fragment Why not dangerouslySetInnerHTML property",
        "human_words_stopwords_removal_lemmatization": "react version : 17.0.0 react.fragment dangerouslysetinnerhtml property",
        "title_stopwords_removal_lemmatization": "question react.fragment dangerouslysetinnerhtml"
    },
    {
        "issue_id": 1179253537,
        "title": "Bug: infinite function component rendering with lazy loading",
        "label": [
            "Type: Question",
            "Status: Unconfirmed"
        ],
        "date": "2022-03-24T09:40:53Z",
        "status": "closed",
        "description": "Unexpected behavior (infinite function component rendering) when lazy loading component with string interpolation (reactive variable state)\r\n\r\nReact version: 18.0.0 rc3\r\n\r\n## Steps To Reproduce\r\n\r\n1. Not working:\r\n```javascript\r\nimport { lazy } from 'react';\r\n\r\nexport default ({ langauge }) => {\r\n  const Privacy = lazy(() => import(`./Privacy-${langauge}.jsx`));\r\n  return <Privacy />;\r\n};\r\n```\r\n\r\n2. working:\r\n```javascript\r\nimport { lazy } from 'react';\r\n\r\nconst PrivacyPT = lazy(() => import(`./Privacy-pt.jsx`));\r\nconst PrivacyES = lazy(() => import(`./Privacy-es.jsx`));\r\nconst PrivacyEN = lazy(() => import(`./Privacy-en.jsx`));\r\n\r\nexport default ({ language }) => {\r\n  \r\n  return (\r\n    <>\r\n      {language === 'pt' && (\r\n        <PrivacyPT />\r\n      )}\r\n      {language === 'es' && (\r\n        <PrivacyES />\r\n      )}\r\n      {language === 'en' && (\r\n        <PrivacyEN />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\n```\r\n\r\nLink to code example: https://codesandbox.io/s/spring-haze-ppyzky?file=/src/App.jsx\r\n\r\n![Screenshot from 2022-03-24 09-35-58](https://user-images.githubusercontent.com/61196637/159887181-86a62ff3-b3c2-42f1-aa0a-b113d0cd52b6.png)\r\n## The current behavior\r\n\r\n\r\n## The expected behavior\r\n",
        "remove_template_description": "Unexpected behavior (infinite function component rendering) when lazy loading component with string interpolation (reactive variable state)    React version: 18.0.0 rc3        1. Not working:  ```javascript  import { lazy } from 'react';    export default ({ langauge }) => {    const Privacy = lazy(() => import(`./Privacy-${langauge}.jsx`));    return <Privacy />;  };  ```    2. working:  ```javascript  import { lazy } from 'react';    const PrivacyPT = lazy(() => import(`./Privacy-pt.jsx`));  const PrivacyES = lazy(() => import(`./Privacy-es.jsx`));  const PrivacyEN = lazy(() => import(`./Privacy-en.jsx`));    export default ({ language }) => {        return (      <>        {language === 'pt' && (          <PrivacyPT />        )}        {language === 'es' && (          <PrivacyES />        )}        {language === 'en' && (          <PrivacyEN />        )}      </>    );  };    ```    Link to code example: https://codesandbox.io/s/spring-haze-ppyzky?file=/src/App.jsx    ![Screenshot from 2022-03-24 09-35-58](https://user-images.githubusercontent.com/61196637/159887181-86a62ff3-b3c2-42f1-aa0a-b113d0cd52b6.png)",
        "human_words": "Unexpected behavior (infinite function component rendering) when lazy loading component with string interpolation (reactive variable state)    React version: 18.0.0 rc3        1. Not working:      2. working:      Link to code example: https://codesandbox.io/s/spring-haze-ppyzky?file=/src/App.jsx    ![Screenshot from 2022-03-24 09-35-58](https://user-images.githubusercontent.com/61196637/159887181-86a62ff3-b3c2-42f1-aa0a-b113d0cd52b6.png)",
        "human_words_regrex": "Unexpected behavior (infinite function component rendering) when lazy loading component with string interpolation (reactive variable state) React version: 18.0.0 rc3 1. Not working: 2. working: Link to code example:  !",
        "human_words_stopwords_removal_lemmatization": "unexpected behavior ( infinite function component rendering ) lazy loading component string interpolation ( reactive variable state ) react version : 18.0.0 rc3 1. working : 2. working : link code example : !",
        "title_stopwords_removal_lemmatization": "bug : infinite function component rendering lazy loading"
    },
    {
        "issue_id": 1162769075,
        "title": "Bug: Data is losing during page refresh in Reactjs-Redux; Tried using 'redux-persist' and localstorage , but not working.",
        "label": [
            "Type: Question",
            "Status: Unconfirmed"
        ],
        "date": "2022-03-08T15:06:47Z",
        "status": "closed",
        "description": "In our project,forms(login,signup,logout,etc..) were built in django and through this we are getting the authorization details and this was stored as redux-data and was used in the rest of the application which is built in react.There was no refresh issue during that time.evenif the store was getting disapper but we are getting it back.Now,we shifted all that we done in Django into react and used the same redux storage method in login,but we are facing the data losage during refresh,store is not getting restore and we are having 403 status for 2 apis for getting the user details.This was not happening in former case.\r\nWe used redux-persist package to avoid this data losage.. And also tried using localstorage persisting method(loadState(),saveState()).But,still facing the issue.\r\n\r\nstore.js\r\n```\r\nimport { createStore, applyMiddleware, compose } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport rootReducer from './reducers'\r\nimport { persistStore, persistReducer } from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage';\r\n \r\nconst persistConfig = {\r\nkey: \"root\",\r\nstorage,\r\n}\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\nconst persistedReducer = persistReducer(persistConfig,rootReducer)\r\nconst store = createStore(persistedReducer,composeEnhancers(applyMiddleware(thunk)))\r\nconst Persistor = persistStore(store);\r\n \r\nexport default (store)\r\nexport { Persistor }\r\n```\r\n\r\naction.js:\r\n```\r\nimport axios from 'axios'\r\nimport { SET_PROFILE, SET_FEATURE_TOGGLES } from './actionTypes'\r\nimport { client_request_data } from '../config';\r\n\r\nconst redirectToLogin = () => {\r\n  delete axios.defaults.headers.common.Authorization\r\n  if (window.location.href.indexOf('/accounts/') !== -1) {\r\n    window.location.href = '/accounts/login'\r\n  }\r\n}\r\n\r\nexport const fetchUserProfile = () => dispatch => {\r\n  axios\r\n    .post(`/accounts/user_profile/`,{\r\n      client_request_data: client_request_data\r\n    })\r\n    .then(resp =>\r\n      dispatch({\r\n        type: SET_PROFILE,\r\n        payload: resp.data,\r\n      }),\r\n    )\r\n    .catch(e => {\r\n      // TODO figure out what do do here\r\n      if (e.response?.status === 403) {\r\n        redirectToLogin()\r\n      }\r\n    })\r\n}\r\n\r\nexport const fetchFeatureToggles = () => dispatch => {\r\n  axios\r\n    .post(`/api/study/v1/feature_toggle/`,{\r\n      client_request_data: client_request_data\r\n    })\r\n    .then(resp =>\r\n      dispatch({\r\n        type: SET_FEATURE_TOGGLES,\r\n        payload: resp.data,\r\n      }),\r\n    )\r\n    .catch(e => {\r\n      // TODO figure out what do do here\r\n      if (e.response?.status === 403) {\r\n        redirectToLogin()\r\n      }\r\n    })\r\n}\r\n```\r\nReducers:1.featureToggle.js\r\n```\r\nimport { SET_FEATURE_TOGGLES } from '../actionTypes'\r\n\r\nconst intialstate = {}\r\n\r\nexport default (state = intialstate, action) => {\r\n  switch (action.type) {\r\n    case SET_FEATURE_TOGGLES:\r\n      return action.payload\r\n    default:\r\n      return state\r\n  }\r\n}\r\n```\r\n2.userprofile.js\r\n```\r\nimport { SET_PROFILE } from '../actionTypes'\r\n\r\nconst intialstate = {}\r\n\r\nexport default (state = {}, action) => {\r\n  switch (action.type) {\r\n    case SET_PROFILE:\r\n      return action.payload\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n```\r\nApp.js:\r\n```\r\nimport React, { useEffect, Suspense } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport CssBaseline from '@material-ui/core/CssBaseline'\r\nimport { ThemeProvider } from '@material-ui/styles'\r\nimport MuiThemeProvider from '@material-ui/core/styles/MuiThemeProvider'\r\nimport { Provider } from 'react-redux'\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\r\nimport theme from './theme/muiTheme'\r\nimport './i18n'\r\nimport Home from './screens/Home'\r\nimport * as actions from './redux/actions'\r\nimport Userservice from './services/UserService'\r\nimport { BASE_URL} from './config'\r\nimport Login from './Login'\r\nimport Signup from './Signup'\r\nimport Logout from './Logout'\r\nimport ResetPassword from './ResetPassword'\r\nimport ResetSuccess from './ResetSuccess'\r\nimport store from './redux/store'\r\n\r\nconst App = props => {\r\n  const {\r\n    userProfile,\r\n    featureToggles,\r\n    fetchUserProfile,\r\n    fetchFeatureToggles,\r\n  } = props\r\n  useEffect(() => {\r\n    fetchUserProfile()\r\n    fetchFeatureToggles()\r\n  })\r\n  return (\r\n        <Suspense fallback={<span></span>}>\r\n          <BrowserRouter>\r\n            <Switch>\r\n            <Route\r\n                exact\r\n                path=\"/\"\r\n                render={() => {\r\n                    return (\r\n                      userProfile === null || featureToggles === null ? <Login/> : <Home /> \r\n                    )\r\n                }}\r\n              />\r\n             \r\n            </Switch>\r\n          </BrowserRouter>\r\n        </Suspense>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  userProfile: state.userProfile,\r\n  featureToggles: state.featureToggles,\r\n})\r\n\r\nexport default connect(mapStateToProps, actions)(App)\r\n```\r\nindex.js:\r\n```\r\nimport promiseFinally from 'promise.prototype.finally'\r\nimport React, {Suspense} from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport CssBaseline from '@material-ui/core/CssBaseline'\r\nimport { ThemeProvider } from '@material-ui/styles'\r\nimport MuiThemeProvider from '@material-ui/core/styles/MuiThemeProvider'\r\nimport { Provider } from 'react-redux'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport App from './App'\r\nimport theme from './theme/muiTheme'\r\nimport store,{Persistor} from './redux/store'\r\nimport './i18n';\r\nimport Home from './screens/Home'\r\nimport Login from './Login'\r\nimport Signup from './Signup'\r\nimport Logout from './Logout'\r\nimport { PersistGate } from 'redux-persist/integration/react'\r\npromiseFinally.shim()\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <PersistGate Loading={null} persistor={Persistor}>\r\n    <MuiThemeProvider theme={theme}>\r\n      <ThemeProvider theme={theme}>\r\n        <CssBaseline />\r\n        <Suspense>\r\n        <App />\r\n        </Suspense>\r\n      </ThemeProvider>\r\n    </MuiThemeProvider>\r\n    </PersistGate>\r\n  </Provider>,\r\n  document.getElementById('root'),\r\n)\r\nserviceWorker.unregister()\r\n\r\n```\r\n\r\nAlso tried with localstorage: localstorage.js(in redux)\r\n\r\n```\r\nexport const loadState = () => {\r\n    try {\r\n      const serializedState = localStorage.getItem(\"state\");\r\n      if (serializedState === null) {\r\n        return undefined;\r\n      }\r\n      return JSON.parse(serializedState);\r\n    } catch (err) {\r\n      return undefined;\r\n    }\r\n  };\r\n  \r\n  export const saveState = (state) => {\r\n    try {\r\n      const serializesState = JSON.stringify(state);\r\n      localStorage.setItem(\"state\", serializesState);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n```\r\nCorresponding store.js:\r\n```\r\nimport { createStore, applyMiddleware, compose } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport rootReducer from './reducers'\r\nimport { persistStore,persistReducer} from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage';\r\nimport { fetchFeatureToggles } from './actions';\r\nimport { loadState,saveState } from './localStorage';\r\nimport { throttle } from 'lodash';\r\n\r\nconst persistConfig = {\r\nkey: \"root\",\r\nstorage,\r\n}\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\nconst persistedState = loadState();\r\nconst persistedReducer = persistReducer(persistConfig,rootReducer)\r\nconst store = createStore(persistedReducer,persistedState,composeEnhancers(applyMiddleware(thunk)))\r\n\r\nstore.subscribe(throttle(() => {\r\n    saveState(store.getState());\r\n  },1000));\r\n  \r\n  const Persistor = persistStore(store);\r\n  export default store\r\n\r\nexport {Persistor} \r\n\r\n```",
        "remove_template_description": "In our project,forms(login,signup,logout,etc..) were built in django and through this we are getting the authorization details and this was stored as redux-data and was used in the rest of the application which is built in react.There was no refresh issue during that time.evenif the store was getting disapper but we are getting it back.Now,we shifted all that we done in Django into react and used the same redux storage method in login,but we are facing the data losage during refresh,store is not getting restore and we are having 403 status for 2 apis for getting the user details.This was not happening in former case.  We used redux-persist package to avoid this data losage.. And also tried using localstorage persisting method(loadState(),saveState()).But,still facing the issue.    store.js  ```  import { createStore, applyMiddleware, compose } from 'redux'  import thunk from 'redux-thunk'  import rootReducer from './reducers'  import { persistStore, persistReducer } from 'redux-persist'  import storage from 'redux-persist/lib/storage';     const persistConfig = {  key: \"root\",  storage,  }  const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose  const persistedReducer = persistReducer(persistConfig,rootReducer)  const store = createStore(persistedReducer,composeEnhancers(applyMiddleware(thunk)))  const Persistor = persistStore(store);     export default (store)  export { Persistor }  ```    action.js:  ```  import axios from 'axios'  import { SET_PROFILE, SET_FEATURE_TOGGLES } from './actionTypes'  import { client_request_data } from '../config';    const redirectToLogin = () => {    delete axios.defaults.headers.common.Authorization    if (window.location.href.indexOf('/accounts/') !== -1) {      window.location.href = '/accounts/login'    }  }    export const fetchUserProfile = () => dispatch => {    axios      .post(`/accounts/user_profile/`,{        client_request_data: client_request_data      })      .then(resp =>        dispatch({          type: SET_PROFILE,          payload: resp.data,        }),      )      .catch(e => {        // TODO figure out what do do here        if (e.response?.status === 403) {          redirectToLogin()        }      })  }    export const fetchFeatureToggles = () => dispatch => {    axios      .post(`/api/study/v1/feature_toggle/`,{        client_request_data: client_request_data      })      .then(resp =>        dispatch({          type: SET_FEATURE_TOGGLES,          payload: resp.data,        }),      )      .catch(e => {        // TODO figure out what do do here        if (e.response?.status === 403) {          redirectToLogin()        }      })  }  ```  Reducers:1.featureToggle.js  ```  import { SET_FEATURE_TOGGLES } from '../actionTypes'    const intialstate = {}    export default (state = intialstate, action) => {    switch (action.type) {      case SET_FEATURE_TOGGLES:        return action.payload      default:        return state    }  }  ```  2.userprofile.js  ```  import { SET_PROFILE } from '../actionTypes'    const intialstate = {}    export default (state = {}, action) => {    switch (action.type) {      case SET_PROFILE:        return action.payload      default:        return state    }  }    ```  App.js:  ```  import React, { useEffect, Suspense } from 'react'  import { connect } from 'react-redux'  import CssBaseline from '@material-ui/core/CssBaseline'  import { ThemeProvider } from '@material-ui/styles'  import MuiThemeProvider from '@material-ui/core/styles/MuiThemeProvider'  import { Provider } from 'react-redux'  import { BrowserRouter, Switch, Route } from 'react-router-dom'  import theme from './theme/muiTheme'  import './i18n'  import Home from './screens/Home'  import * as actions from './redux/actions'  import Userservice from './services/UserService'  import { BASE_URL} from './config'  import Login from './Login'  import Signup from './Signup'  import Logout from './Logout'  import ResetPassword from './ResetPassword'  import ResetSuccess from './ResetSuccess'  import store from './redux/store'    const App = props => {    const {      userProfile,      featureToggles,      fetchUserProfile,      fetchFeatureToggles,    } = props    useEffect(() => {      fetchUserProfile()      fetchFeatureToggles()    })    return (          <Suspense fallback={<span></span>}>            <BrowserRouter>              <Switch>              <Route                  exact                  path=\"/\"                  render={() => {                      return (                        userProfile === null || featureToggles === null ? <Login/> : <Home />                       )                  }}                />                             </Switch>            </BrowserRouter>          </Suspense>    )  }    const mapStateToProps = state => ({    userProfile: state.userProfile,    featureToggles: state.featureToggles,  })    export default connect(mapStateToProps, actions)(App)  ```  index.js:  ```  import promiseFinally from 'promise.prototype.finally'  import React, {Suspense} from 'react'  import ReactDOM from 'react-dom'  import './index.css'  import CssBaseline from '@material-ui/core/CssBaseline'  import { ThemeProvider } from '@material-ui/styles'  import MuiThemeProvider from '@material-ui/core/styles/MuiThemeProvider'  import { Provider } from 'react-redux'  import * as serviceWorker from './serviceWorker'  import App from './App'  import theme from './theme/muiTheme'  import store,{Persistor} from './redux/store'  import './i18n';  import Home from './screens/Home'  import Login from './Login'  import Signup from './Signup'  import Logout from './Logout'  import { PersistGate } from 'redux-persist/integration/react'  promiseFinally.shim()    ReactDOM.render(    <Provider store={store}>      <PersistGate Loading={null} persistor={Persistor}>      <MuiThemeProvider theme={theme}>        <ThemeProvider theme={theme}>          <CssBaseline />          <Suspense>          <App />          </Suspense>        </ThemeProvider>      </MuiThemeProvider>      </PersistGate>    </Provider>,    document.getElementById('root'),  )  serviceWorker.unregister()    ```    Also tried with localstorage: localstorage.js(in redux)    ```  export const loadState = () => {      try {        const serializedState = localStorage.getItem(\"state\");        if (serializedState === null) {          return undefined;        }        return JSON.parse(serializedState);      } catch (err) {        return undefined;      }    };        export const saveState = (state) => {      try {        const serializesState = JSON.stringify(state);        localStorage.setItem(\"state\", serializesState);      } catch (err) {        console.log(err);      }    };  ```  Corresponding store.js:  ```  import { createStore, applyMiddleware, compose } from 'redux'  import thunk from 'redux-thunk'  import rootReducer from './reducers'  import { persistStore,persistReducer} from 'redux-persist'  import storage from 'redux-persist/lib/storage';  import { fetchFeatureToggles } from './actions';  import { loadState,saveState } from './localStorage';  import { throttle } from 'lodash';    const persistConfig = {  key: \"root\",  storage,  }  const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose  const persistedState = loadState();  const persistedReducer = persistReducer(persistConfig,rootReducer)  const store = createStore(persistedReducer,persistedState,composeEnhancers(applyMiddleware(thunk)))    store.subscribe(throttle(() => {      saveState(store.getState());    },1000));        const Persistor = persistStore(store);    export default store    export {Persistor}     ```",
        "human_words": "In our project,forms(login,signup,logout,etc..) were built in django and through this we are getting the authorization details and this was stored as redux-data and was used in the rest of the application which is built in react.There was no refresh issue during that time.evenif the store was getting disapper but we are getting it back.Now,we shifted all that we done in Django into react and used the same redux storage method in login,but we are facing the data losage during refresh,store is not getting restore and we are having 403 status for 2 apis for getting the user details.This was not happening in former case.  We used redux-persist package to avoid this data losage.. And also tried using localstorage persisting method(loadState(),saveState()).But,still facing the issue.    store.js      action.js:    Reducers:1.featureToggle.js    2.userprofile.js    App.js:    index.js:      Also tried with localstorage: localstorage.js(in redux)      Corresponding store.js:  ",
        "human_words_regrex": "In our project,forms(login,signup,logout,etc..) were built in django and through this we are getting the authorization details and this was stored as redux-data and was used in the rest of the application which is built in react.There was no refresh issue during that time.evenif the store was getting disapper but we are getting it back.Now,we shifted all that we done in Django into react and used the same redux storage method in login,but we are facing the data losage during refresh,store is not getting restore and we are having 403 status for 2 apis for getting the user details.This was not happening in former case. We used redux-persist package to avoid this data losage.. And also tried using localstorage persisting method(loadState(),saveState()).But,still facing the issue. store.js action.js: Reducers:1.featureToggle.js 2.userprofile.js App.js: index.js: Also tried with localstorage: localstorage.js(in redux) Corresponding store.js: ",
        "human_words_stopwords_removal_lemmatization": "project , form ( login , signup , logout , etc .. ) built django getting authorization detail stored redux-data used rest application built react.there refresh issue time.evenif store getting disapper getting back.now , shifted done django react used redux storage method login , facing data losage refresh , store getting restore 403 status 2 apis getting user details.this happening former case . used redux-persist package avoid data losage .. also tried using localstorage persisting method ( loadstate ( ) , savestate ( ) ) .but , still facing issue . store.js action.js : reducers:1.featuretoggle.js 2.userprofile.js app.js : index.js : also tried localstorage : localstorage.js ( redux ) corresponding store.js :",
        "title_stopwords_removal_lemmatization": "bug : data losing page refresh reactjs-redux ; tried using 'redux-persist ' localstorage , working ."
    },
    {
        "issue_id": 1139590944,
        "title": "Question on reconciliation",
        "label": [
            "Type: Question",
            "Status: Unconfirmed"
        ],
        "date": "2022-02-16T06:20:48Z",
        "status": "closed",
        "description": "Let's say on first render, first datastore as below:\r\n\r\n```json\r\n[\r\n  {id: 1, name: \"Duke\"},\r\n  {id: 1, name: \"Villanova\"},\r\n  {id: 1, name: \"Neclause\"},\r\n  {id: 2, name: \"Derk\"}, \r\n  {id: 3, name: \"Lily\"}\r\n]\r\n```\r\nwe render following:\r\n<ul>\r\n  <li key=\"1\">Duke</li>\r\n  <li key=\"1\">Villanova</li>\r\n  <li key=\"1\">Neclause</li>\r\n  <li key=\"2\">Derk</li>\r\n  <li key=\"3\">Lily</li>\r\n</ul>\r\nI changed the datasource to `[{id: 2, name: \"Derk second time\"}, {id: 3, name: \"Lily second time\"}]` after a setTimeout, What I expect on next render is:\r\n\r\n<ul>\r\n  <li key=\"2\">Derk second time</li>\r\n  <li key=\"3\">Lily second time</li>\r\n</ul>\r\n\r\nBut it render the following result,  key=\"1\" li remains in the dom tree, which I expect to be eliminated.\r\n\r\n<ul>\r\n  <li key=\"1\">Duke</li>\r\n  <li key=\"1\">Villanova</li>\r\n  <li key=\"2\">Derk second time</li>\r\n  <li key=\"3\">Lily second time</li>\r\n</ul>\r\n\r\nHower when I changed the datasource to `[]` after a setTimeout, What I expect on next render is:\r\n<ul>\r\n  <li key=\"1\">Duke</li>\r\n  <li key=\"1\">Villanova</li>\r\n  <li key=\"2\">Derk second time</li>\r\n  <li key=\"3\">Lily second time</li>\r\n</ul>\r\n\r\nOut ot my expection, I got following a empty dom tree???\r\nA online demo is accessiable on https://codesandbox.io/s/ji-chu-lie-biao-antd-4-18-7-forked-nm4sly?file=/index.js\r\n\r\nCan someone explain the reconciliation for me this case, thanks!",
        "remove_template_description": "Let's say on first render, first datastore as below:    ```json  [    {id: 1, name: \"Duke\"},    {id: 1, name: \"Villanova\"},    {id: 1, name: \"Neclause\"},    {id: 2, name: \"Derk\"},     {id: 3, name: \"Lily\"}  ]  ```  we render following:  <ul>    <li key=\"1\">Duke</li>    <li key=\"1\">Villanova</li>    <li key=\"1\">Neclause</li>    <li key=\"2\">Derk</li>    <li key=\"3\">Lily</li>  </ul>  I changed the datasource to `[{id: 2, name: \"Derk second time\"}, {id: 3, name: \"Lily second time\"}]` after a setTimeout, What I expect on next render is:    <ul>    <li key=\"2\">Derk second time</li>    <li key=\"3\">Lily second time</li>  </ul>    But it render the following result,  key=\"1\" li remains in the dom tree, which I expect to be eliminated.    <ul>    <li key=\"1\">Duke</li>    <li key=\"1\">Villanova</li>    <li key=\"2\">Derk second time</li>    <li key=\"3\">Lily second time</li>  </ul>    Hower when I changed the datasource to `[]` after a setTimeout, What I expect on next render is:  <ul>    <li key=\"1\">Duke</li>    <li key=\"1\">Villanova</li>    <li key=\"2\">Derk second time</li>    <li key=\"3\">Lily second time</li>  </ul>    Out ot my expection, I got following a empty dom tree???  A online demo is accessiable on https://codesandbox.io/s/ji-chu-lie-biao-antd-4-18-7-forked-nm4sly?file=/index.js    Can someone explain the reconciliation for me this case, thanks!",
        "human_words": "Let's say on first render, first datastore as below:      we render following:  <ul>    <li key=\"1\">Duke</li>    <li key=\"1\">Villanova</li>    <li key=\"1\">Neclause</li>    <li key=\"2\">Derk</li>    <li key=\"3\">Lily</li>  </ul>  I changed the datasource to `[{id: 2, name: \"Derk second time\"}, {id: 3, name: \"Lily second time\"}]` after a setTimeout, What I expect on next render is:    <ul>    <li key=\"2\">Derk second time</li>    <li key=\"3\">Lily second time</li>  </ul>    But it render the following result,  key=\"1\" li remains in the dom tree, which I expect to be eliminated.    <ul>    <li key=\"1\">Duke</li>    <li key=\"1\">Villanova</li>    <li key=\"2\">Derk second time</li>    <li key=\"3\">Lily second time</li>  </ul>    Hower when I changed the datasource to `[]` after a setTimeout, What I expect on next render is:  <ul>    <li key=\"1\">Duke</li>    <li key=\"1\">Villanova</li>    <li key=\"2\">Derk second time</li>    <li key=\"3\">Lily second time</li>  </ul>    Out ot my expection, I got following a empty dom tree???  A online demo is accessiable on https://codesandbox.io/s/ji-chu-lie-biao-antd-4-18-7-forked-nm4sly?file=/index.js    Can someone explain the reconciliation for me this case, thanks!",
        "human_words_regrex": "Let's say on first render, first datastore as below: we render following:  Duke Villanova Neclause Derk Lily  I changed the datasource to `[{id: 2, name: \"Derk second time\"}, {id: 3, name: \"Lily second time\"}]` after a setTimeout, What I expect on next render is:  Derk second time Lily second time  But it render the following result, key=\"1\" li remains in the dom tree, which I expect to be eliminated.  Duke Villanova Derk second time Lily second time  Hower when I changed the datasource to `[]` after a setTimeout, What I expect on next render is:  Duke Villanova Derk second time Lily second time  Out ot my expection, I got following a empty dom tree??? A online demo is accessiable on  Can someone explain the reconciliation for me this case, thanks!",
        "human_words_stopwords_removal_lemmatization": "let 's say first render , first datastore : render following : duke villanova neclause derk lily changed datasource ` [ { id : 2 , name : `` derk second time '' } , { id : 3 , name : `` lily second time '' } ] ` settimeout , expect next render : derk second time lily second time render following result , key= '' 1 '' li remains dom tree , expect eliminated . duke villanova derk second time lily second time hower changed datasource ` [ ] ` settimeout , expect next render : duke villanova derk second time lily second time ot expection , got following empty dom tree ? ? ? online demo accessiable someone explain reconciliation case , thanks !",
        "title_stopwords_removal_lemmatization": "question reconciliation"
    },
    {
        "issue_id": 1089439448,
        "title": "React Fiber for the profiler dev tool",
        "label": [
            "Type: Question",
            "Status: Unconfirmed",
            "Component: Developer Tools"
        ],
        "date": "2021-12-27T19:45:48Z",
        "status": "open",
        "description": "<!--\r\nI'm curious on the reason why using a react fiber is necessary for the react dev tool's profiler!\r\n-->\r\nI'm curious on the reason why using a react fiber is necessary for the react dev tool's profiler!\r\n",
        "remove_template_description": "<!--  I'm curious on the reason why using a react fiber is necessary for the react dev tool's profiler!  -->  I'm curious on the reason why using a react fiber is necessary for the react dev tool's profiler!",
        "human_words": "<!--  I'm curious on the reason why using a react fiber is necessary for the react dev tool's profiler!  -->  I'm curious on the reason why using a react fiber is necessary for the react dev tool's profiler!",
        "human_words_regrex": " I'm curious on the reason why using a react fiber is necessary for the react dev tool's profiler!",
        "human_words_stopwords_removal_lemmatization": "'m curious reason using react fiber necessary react dev tool 's profiler !",
        "title_stopwords_removal_lemmatization": "react fiber profiler dev tool"
    },
    {
        "issue_id": 987983283,
        "title": "Is there any action/license should be taken/granted for conducting a React conference",
        "label": [
            "Type: Question"
        ],
        "date": "2021-09-03T17:43:09Z",
        "status": "open",
        "description": "Hello there,\nI'm thinking of conducting a conference related to React in my country such as the conferences listed in the following page in react docs: https://reactjs.org/community/conferences.html\n\nIs there any license I should receive from React's side or it is totally free to do that with no permissions/license?",
        "remove_template_description": "Hello there, I'm thinking of conducting a conference related to React in my country such as the conferences listed in the following page in react docs: https://reactjs.org/community/conferences.html  Is there any license I should receive from React's side or it is totally free to do that with no permissions/license?",
        "human_words": "Hello there, I'm thinking of conducting a conference related to React in my country such as the conferences listed in the following page in react docs: https://reactjs.org/community/conferences.html  Is there any license I should receive from React's side or it is totally free to do that with no permissions/license?",
        "human_words_regrex": "Hello there, I'm thinking of conducting a conference related to React in my country such as the conferences listed in the following page in react docs:  Is there any license I should receive from React's side or it is totally free to do that with no permissions/license?",
        "human_words_stopwords_removal_lemmatization": "hello , 'm thinking conducting conference related react country conference listed following page react doc : license receive react 's side totally free permissions/license ?",
        "title_stopwords_removal_lemmatization": "action/license taken/granted conducting react conference"
    },
    {
        "issue_id": 954947954,
        "title": "Question: React supports performance answers\u3002",
        "label": [
            "Type: Question",
            "Resolution: Stale"
        ],
        "date": "2021-07-28T14:53:35Z",
        "status": "open",
        "description": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version:\r\n15.7\r\n## Steps To Reproduce\r\nDoes React have a performance bottleneck on the CPU 2G GPU 70M virtual machine for building large and complex WEB applications?\r\nAnd the models of GPU and CPU are before 2010.\r\nIf you use React to develop large and complex applications, it is recommended to run it on what machine configuration.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\n\r\n## The expected behavior\r\n",
        "remove_template_description": "<!--    Please provide a clear and concise description of what the bug is. Include    screenshots if needed. Please test using the latest version of the relevant    React packages to make sure your issue has not already been fixed.  -->    React version:  15.7    Does React have a performance bottleneck on the CPU 2G GPU 70M virtual machine for building large and complex WEB applications?  And the models of GPU and CPU are before 2010.  If you use React to develop large and complex applications, it is recommended to run it on what machine configuration.    <!--    Your bug will get fixed much faster if we can run your code and it doesn't    have dependencies other than React. Issues without reproduction steps or    code examples may be immediately closed as not actionable.  -->    Link to code example:    <!--    Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a    repository on GitHub, or provide a minimal code example that reproduces the    problem. You may provide a screenshot of the application if you think it is    relevant to your bug report. Here are some tips for providing a minimal    example: https://stackoverflow.com/help/mcve.  -->",
        "human_words": "<!--    Please provide a clear and concise description of what the bug is. Include    screenshots if needed. Please test using the latest version of the relevant    React packages to make sure your issue has not already been fixed.  -->    React version:  15.7    Does React have a performance bottleneck on the CPU 2G GPU 70M virtual machine for building large and complex WEB applications?  And the models of GPU and CPU are before 2010.  If you use React to develop large and complex applications, it is recommended to run it on what machine configuration.    <!--    Your bug will get fixed much faster if we can run your code and it doesn't    have dependencies other than React. Issues without reproduction steps or    code examples may be immediately closed as not actionable.  -->    Link to code example:    <!--    Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a    repository on GitHub, or provide a minimal code example that reproduces the    problem. You may provide a screenshot of the application if you think it is    relevant to your bug report. Here are some tips for providing a minimal    example: https://stackoverflow.com/help/mcve.  -->",
        "human_words_regrex": " React version: 15.7 Does React have a performance bottleneck on the CPU 2G GPU 70M virtual machine for building large and complex WEB applications? And the models of GPU and CPU are before 2010. If you use React to develop large and complex applications, it is recommended to run it on what machine configuration.  Link to code example: ",
        "human_words_stopwords_removal_lemmatization": "react version : 15.7 react performance bottleneck cpu 2g gpu 70m virtual machine building large complex web application ? model gpu cpu 2010. use react develop large complex application , recommended run machine configuration . link code example :",
        "title_stopwords_removal_lemmatization": "question : react support performance answers\u3002"
    },
    {
        "issue_id": 945932583,
        "title": "react developer tools ",
        "label": [
            "Type: Question",
            "Component: Developer Tools"
        ],
        "date": "2021-07-16T04:26:13Z",
        "status": "closed",
        "description": "I successfully installed the extensions but i am not able to see the the news tabs ( components and react",
        "remove_template_description": "I successfully installed the extensions but i am not able to see the the news tabs ( components and react",
        "human_words": "I successfully installed the extensions but i am not able to see the the news tabs ( components and react",
        "human_words_regrex": "I successfully installed the extensions but i am not able to see the the news tabs ( components and react",
        "human_words_stopwords_removal_lemmatization": "successfully installed extension able see news tab ( component react",
        "title_stopwords_removal_lemmatization": "react developer tool"
    },
    {
        "issue_id": 942094283,
        "title": "React 18 : useState 'sharing' state value between components of the same type",
        "label": [
            "Type: Question"
        ],
        "date": "2021-07-12T13:59:15Z",
        "status": "closed",
        "description": "<!--\r\n  Ask a question or share feedback about the React 18 release here.\r\n-->\r\n\r\nI created a custom table component that has pagination, search bar and export to excel button. The main usage of the component is as follows:\r\n\r\n```jsx\r\n<ClientsTable\r\n   dataset={sellsInfo}\r\n   Headers={sellsInfoHeaders}\r\n   downloadFileName={`OrdenesCliente-${clientId}`}\r\n   pageSize={2}\r\n   identifier={'id'}\r\n/>  \r\n```\r\n\r\nTo enable pagination, global filter and dataset download, I used state variables using `useState` hook, as follows. \r\n\r\n```jsx\r\nconst ClientsTable = (props) => {\r\n   let { dataset, Headers, pageSize, actions, identifier, downloadFileName } = props;\r\n                          \r\n   const [ displayDataset, setDisplayDataset ] = useState(dataset);\r\n   const [ pageIndex, setPageIndex ] = useState(0);\r\n   const numPages = Math.ceil(displayDataset.length / pageSize);\r\n   const [ canNextPage, setCanNextPage ] = useState(true);\r\n   const [ canPrevPage, setCanPrevPage ] = useState(false);\r\n   const [ sortSmallToLarge, setSortSmallToLarge ] = useState(true);\r\n   const [ sortingField, setSortingField ] = useState(null);\r\n\r\n   // some logic for filtering, pagination and rendering\r\n}\r\n```\r\n\r\nRendering only one table component in an app view works just fine. However, rendering two or more implies that React uses the same state variables for all table components in the view. This is unintended behavior for me. In particular, I created a custom tab component that renders two different tables on tab selection. The two tables have the same state variables, different pros though, which causes conflicts in the view.\r\n\r\nHow can I render multiple table components in my app without having this behavior?\r\n\r\nThanks in advance. \r\n ",
        "remove_template_description": "<!--    Ask a question or share feedback about the React 18 release here.  -->    I created a custom table component that has pagination, search bar and export to excel button. The main usage of the component is as follows:    ```jsx  <ClientsTable     dataset={sellsInfo}     Headers={sellsInfoHeaders}     downloadFileName={`OrdenesCliente-${clientId}`}     pageSize={2}     identifier={'id'}  />    ```    To enable pagination, global filter and dataset download, I used state variables using `useState` hook, as follows.     ```jsx  const ClientsTable = (props) => {     let { dataset, Headers, pageSize, actions, identifier, downloadFileName } = props;                                 const [ displayDataset, setDisplayDataset ] = useState(dataset);     const [ pageIndex, setPageIndex ] = useState(0);     const numPages = Math.ceil(displayDataset.length / pageSize);     const [ canNextPage, setCanNextPage ] = useState(true);     const [ canPrevPage, setCanPrevPage ] = useState(false);     const [ sortSmallToLarge, setSortSmallToLarge ] = useState(true);     const [ sortingField, setSortingField ] = useState(null);       // some logic for filtering, pagination and rendering  }  ```    Rendering only one table component in an app view works just fine. However, rendering two or more implies that React uses the same state variables for all table components in the view. This is unintended behavior for me. In particular, I created a custom tab component that renders two different tables on tab selection. The two tables have the same state variables, different pros though, which causes conflicts in the view.    How can I render multiple table components in my app without having this behavior?    Thanks in advance.",
        "human_words": "<!--    Ask a question or share feedback about the React 18 release here.  -->    I created a custom table component that has pagination, search bar and export to excel button. The main usage of the component is as follows:        To enable pagination, global filter and dataset download, I used state variables using `useState` hook, as follows.         Rendering only one table component in an app view works just fine. However, rendering two or more implies that React uses the same state variables for all table components in the view. This is unintended behavior for me. In particular, I created a custom tab component that renders two different tables on tab selection. The two tables have the same state variables, different pros though, which causes conflicts in the view.    How can I render multiple table components in my app without having this behavior?    Thanks in advance.",
        "human_words_regrex": " I created a custom table component that has pagination, search bar and export to excel button. The main usage of the component is as follows: To enable pagination, global filter and dataset download, I used state variables using `useState` hook, as follows. Rendering only one table component in an app view works just fine. However, rendering two or more implies that React uses the same state variables for all table components in the view. This is unintended behavior for me. In particular, I created a custom tab component that renders two different tables on tab selection. The two tables have the same state variables, different pros though, which causes conflicts in the view. How can I render multiple table components in my app without having this behavior? Thanks in advance.",
        "human_words_stopwords_removal_lemmatization": "created custom table component pagination , search bar export excel button . main usage component follows : enable pagination , global filter dataset download , used state variable using ` usestate ` hook , follows . rendering one table component app view work fine . however , rendering two implies react us state variable table component view . unintended behavior . particular , created custom tab component render two different table tab selection . two table state variable , different pro though , cause conflict view . render multiple table component app without behavior ? thanks advance .",
        "title_stopwords_removal_lemmatization": "react 18 : usestate 'sharing ' state value component type"
    },
    {
        "issue_id": 915406615,
        "title": "Question: startTransition behavior",
        "label": [
            "Type: Question",
            "Component: Concurrent Features"
        ],
        "date": "2021-06-08T19:41:48Z",
        "status": "closed",
        "description": "I'm very sorry that I'm using the issue tracker to ask this question, but I think others might ask the same question after reading https://github.com/reactwg/react-18/discussions/41 (I don't have commenting rights).\r\n\r\n```js\r\nfunction handleInputChange(e) {\r\n  const input = e.target.value\r\n\r\n  setInputValue(input)\r\n\r\n  startTransition(() => {\r\n    setSearchQuery(input)\r\n  });\r\n}\r\n```\r\n\r\nWhat happens if the user types \"ab\"? i.e.:\r\n\r\n```js\r\n// pseudocode representing the first event handler triggered by keystroke \"a\"\r\nsetInputValue(\"a\")\r\nstartTransition(() => setSearchQuery(\"a\"))\r\n\r\n// pseudocode representing the second event handler triggered by keystroke \"b\"\r\nsetInputValue(\"ab\")\r\nstartTransition(() => setSearchQuery(\"ab\"))\r\n```\r\n\r\nFrom my understanding `setInputValue(\"a\")` and `setInputValue(\"ab\")` will batch generating a single rerender, the callback `() => setSearchQuery(\"a\")` passed to the first `startTransition` will be cancelled, and only the second callback `() => setSearchQuery(\"ab\")` passed to the second `startTransition` will be executed. i.e.:\r\n\r\n```js\r\n// pseudocode representing the final logic after keystrokes \"a\" and \"b\"\r\n\r\nsetInputValue(\"a\") // will batch with `setInputValue(\"ab\")`\r\nstartTransition(() => setSearchQuery(\"a\")) // noop, this callback will be cancelled\r\n\r\nsetInputValue(\"ab\")\r\nstartTransition(() => setSearchQuery(\"ab\"))\r\n```\r\n\r\nAm I correct?\r\n\r\nI think this question is important because if the first callback passed to `startTransition` really gets cancelled and I try to do more work inside it, I should have in mind that the additional work will not happen.\r\n\r\ncc @gaearon @acdlite ",
        "remove_template_description": "I'm very sorry that I'm using the issue tracker to ask this question, but I think others might ask the same question after reading https://github.com/reactwg/react-18/discussions/41 (I don't have commenting rights).    ```js  function handleInputChange(e) {    const input = e.target.value      setInputValue(input)      startTransition(() => {      setSearchQuery(input)    });  }  ```    What happens if the user types \"ab\"? i.e.:    ```js  // pseudocode representing the first event handler triggered by keystroke \"a\"  setInputValue(\"a\")  startTransition(() => setSearchQuery(\"a\"))    // pseudocode representing the second event handler triggered by keystroke \"b\"  setInputValue(\"ab\")  startTransition(() => setSearchQuery(\"ab\"))  ```    From my understanding `setInputValue(\"a\")` and `setInputValue(\"ab\")` will batch generating a single rerender, the callback `() => setSearchQuery(\"a\")` passed to the first `startTransition` will be cancelled, and only the second callback `() => setSearchQuery(\"ab\")` passed to the second `startTransition` will be executed. i.e.:    ```js  // pseudocode representing the final logic after keystrokes \"a\" and \"b\"    setInputValue(\"a\") // will batch with `setInputValue(\"ab\")`  startTransition(() => setSearchQuery(\"a\")) // noop, this callback will be cancelled    setInputValue(\"ab\")  startTransition(() => setSearchQuery(\"ab\"))  ```    Am I correct?    I think this question is important because if the first callback passed to `startTransition` really gets cancelled and I try to do more work inside it, I should have in mind that the additional work will not happen.    cc @gaearon @acdlite",
        "human_words": "I'm very sorry that I'm using the issue tracker to ask this question, but I think others might ask the same question after reading https://github.com/reactwg/react-18/discussions/41 (I don't have commenting rights).        What happens if the user types \"ab\"? i.e.:        From my understanding `setInputValue(\"a\")` and `setInputValue(\"ab\")` will batch generating a single rerender, the callback `() => setSearchQuery(\"a\")` passed to the first `startTransition` will be cancelled, and only the second callback `() => setSearchQuery(\"ab\")` passed to the second `startTransition` will be executed. i.e.:        Am I correct?    I think this question is important because if the first callback passed to `startTransition` really gets cancelled and I try to do more work inside it, I should have in mind that the additional work will not happen.    cc @gaearon @acdlite",
        "human_words_regrex": "I'm very sorry that I'm using the issue tracker to ask this question, but I think others might ask the same question after reading  (I don't have commenting rights). What happens if the user types \"ab\"? i.e.: From my understanding `setInputValue(\"a\")` and `setInputValue(\"ab\")` will batch generating a single rerender, the callback `() => setSearchQuery(\"a\")` passed to the first `startTransition` will be cancelled, and only the second callback `() => setSearchQuery(\"ab\")` passed to the second `startTransition` will be executed. i.e.: Am I correct? I think this question is important because if the first callback passed to `startTransition` really gets cancelled and I try to do more work inside it, I should have in mind that the additional work will not happen. cc @gaearon @acdlite",
        "human_words_stopwords_removal_lemmatization": "'m sorry 'm using issue tracker ask question , think others might ask question reading ( n't commenting right ) . happens user type `` ab '' ? i.e . : understanding ` setinputvalue ( `` '' ) ` ` setinputvalue ( `` ab '' ) ` batch generating single rerender , callback ` ( ) = > setsearchquery ( `` '' ) ` passed first ` starttransition ` cancelled , second callback ` ( ) = > setsearchquery ( `` ab '' ) ` passed second ` starttransition ` executed . i.e . : correct ? think question important first callback passed ` starttransition ` really get cancelled try work inside , mind additional work happen . cc @ gaearon @ acdlite",
        "title_stopwords_removal_lemmatization": "question : starttransition behavior"
    },
    {
        "issue_id": 911827938,
        "title": "Bug: setState run twice  with own hooks",
        "label": [
            "Type: Question"
        ],
        "date": "2021-06-04T20:51:28Z",
        "status": "closed",
        "description": "React version: 17.0.2\r\n\r\n## Steps To Reproduce\r\n\r\n1. click .App\r\n2. \r\n\r\nLink to code example:\r\n```js\r\nconst useL = (service) => {\r\n  const [l, setL] = useState([])\r\n  const [ab, setAB] = useState({});\r\n  const load = async () => {\r\n    const res =  await service()\r\n\r\n    setAB((t) => {\r\n      // LOG twice\r\n      console.log(\"22222\");\r\n      setL([...l, ...res.l]);\r\n      return t;\r\n    });\r\n  }\r\n  useEffect(() => {\r\n    load()\r\n  }, [])\r\n\r\n  return {\r\n    list: l,\r\n    load\r\n  }\r\n}\r\n\r\nexport default function App() {\r\n  const [a, setA] = useState([]);\r\n  const {load} = useL(() => {\r\n    return new Promise(res => {\r\n      setTimeout(() => {\r\n        setA(1)\r\n        res({\r\n          l: [1, 2]\r\n        })\r\n      }, 2000)\r\n    })\r\n  })  \r\n\r\n  const handle = () => {\r\n    load();\r\n  };\r\n  return (\r\n    <div className=\"App\" onClick={() => handle()}>\r\n      <h1>Hello CodeSandbox</h1>\r\n      <h2>Start editing to see some magic happen!</h2>\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\nWhy  log twice\r\n\r\n**Edited** by @bvaughn to fix formatting.",
        "remove_template_description": "React version: 17.0.2        1. click .App  2.     Link to code example:  ```js  const useL = (service) => {    const [l, setL] = useState([])    const [ab, setAB] = useState({});    const load = async () => {      const res =  await service()        setAB((t) => {        // LOG twice        console.log(\"22222\");        setL([...l, ...res.l]);        return t;      });    }    useEffect(() => {      load()    }, [])      return {      list: l,      load    }  }    export default function App() {    const [a, setA] = useState([]);    const {load} = useL(() => {      return new Promise(res => {        setTimeout(() => {          setA(1)          res({            l: [1, 2]          })        }, 2000)      })    })        const handle = () => {      load();    };    return (      <div className=\"App\" onClick={() => handle()}>        <h1>Hello CodeSandbox</h1>        <h2>Start editing to see some magic happen!</h2>      </div>    );  }  ```    Why  log twice    **Edited** by @bvaughn to fix formatting.",
        "human_words": "React version: 17.0.2        1. click .App  2.     Link to code example:      Why  log twice    **Edited** by @bvaughn to fix formatting.",
        "human_words_regrex": "React version: 17.0.2 1. click .App 2. Link to code example: Why log twice **Edited** by @bvaughn to fix formatting.",
        "human_words_stopwords_removal_lemmatization": "react version : 17.0.2 1. click .app 2. link code example : log twice * * edited * * @ bvaughn fix formatting .",
        "title_stopwords_removal_lemmatization": "bug : setstate run twice hook"
    },
    {
        "issue_id": 894959816,
        "title": "Experimental createRoot method not available in React 17",
        "label": [
            "Type: Question"
        ],
        "date": "2021-05-19T03:45:49Z",
        "status": "closed",
        "description": "I am using react and react-dom v17.0.2 and I was trying to use the unstable_createRoot method to render my app but looks like that method is not even present in react v17.0.2. \r\n\r\nCan someone comment if this is expected or not.\r\n\r\nThanks,\r\nArpit",
        "remove_template_description": "I am using react and react-dom v17.0.2 and I was trying to use the unstable_createRoot method to render my app but looks like that method is not even present in react v17.0.2.     Can someone comment if this is expected or not.    Thanks,  Arpit",
        "human_words": "I am using react and react-dom v17.0.2 and I was trying to use the unstable_createRoot method to render my app but looks like that method is not even present in react v17.0.2.     Can someone comment if this is expected or not.    Thanks,  Arpit",
        "human_words_regrex": "I am using react and react-dom v17.0.2 and I was trying to use the unstable_createRoot method to render my app but looks like that method is not even present in react v17.0.2. Can someone comment if this is expected or not. Thanks, Arpit",
        "human_words_stopwords_removal_lemmatization": "using react react-dom v17.0.2 trying use unstable_createroot method render app look like method even present react v17.0.2 . someone comment expected . thanks , arpit",
        "title_stopwords_removal_lemmatization": "experimental createroot method available react 17"
    },
    {
        "issue_id": 873303780,
        "title": "Bug: useEffect happens synchronously when useLayoutEffect was called",
        "label": [
            "Type: Question",
            "Status: Unconfirmed"
        ],
        "date": "2021-04-30T20:54:22Z",
        "status": "closed",
        "description": "\r\n\r\nReact version: 17.0.2 (also tested on 16.9.0, same result)\r\n\r\n## Steps To Reproduce\r\n\r\n1. Open this codesandbox: https://0gobm.csb.app/ ([Source](https://codesandbox.io/s/smoosh-sun-0gobm?file=/src/index.js))\r\n2. Try to click on the \"Works\" button\r\n3. Dropdown opens\r\n4. Try to click on the \"Broken\" button\r\n5. Dropdown does not open\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n\r\nhttps://0gobm.csb.app/\r\n\r\n\r\nThe issue is related to how `useEffect` calls are scheduled. We have this effect:\r\n\r\n\r\n```js\r\n  useEffect(() => {\r\n    if (!open) {\r\n      return;\r\n    }\r\n    const clickListener = (event) => {\r\n      if (!dropdownRef.current.contains(event.target)) {\r\n        onDropdownClose();\r\n      }\r\n    };\r\n\r\n    window.addEventListener(\"click\", clickListener);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"click\", clickListener);\r\n    };\r\n  }, [open, onDropdownClose]);\r\n```\r\n\r\nNormally, this effect happens asynchronously. However, sometimes, it is synchronous and we add listener to the `window` before the event fully bubbles and the dropdown gets closed by the same event.\r\n\r\nThis only happens if any underlying component contains `useLayoutEffect` with `setState` call (as shown on codesandbox). Looks like this causes forced render and this chain of events.\r\n\r\nP.S. The report looks very similar to another one: https://github.com/facebook/react/issues/20074. However, I decided to open a new issue, because the circumstances are different (no portals in this case)",
        "remove_template_description": "React version: 17.0.2 (also tested on 16.9.0, same result)        1. Open this codesandbox: https://0gobm.csb.app/ ([Source](https://codesandbox.io/s/smoosh-sun-0gobm?file=/src/index.js))  2. Try to click on the \"Works\" button  3. Dropdown opens  4. Try to click on the \"Broken\" button  5. Dropdown does not open    <!--    Your bug will get fixed much faster if we can run your code and it doesn't    have dependencies other than React. Issues without reproduction steps or    code examples may be immediately closed as not actionable.  -->    Link to code example:    https://0gobm.csb.app/      The issue is related to how `useEffect` calls are scheduled. We have this effect:      ```js    useEffect(() => {      if (!open) {        return;      }      const clickListener = (event) => {        if (!dropdownRef.current.contains(event.target)) {          onDropdownClose();        }      };        window.addEventListener(\"click\", clickListener);        return () => {        window.removeEventListener(\"click\", clickListener);      };    }, [open, onDropdownClose]);  ```    Normally, this effect happens asynchronously. However, sometimes, it is synchronous and we add listener to the `window` before the event fully bubbles and the dropdown gets closed by the same event.    This only happens if any underlying component contains `useLayoutEffect` with `setState` call (as shown on codesandbox). Looks like this causes forced render and this chain of events.    P.S. The report looks very similar to another one: https://github.com/facebook/react/issues/20074. However, I decided to open a new issue, because the circumstances are different (no portals in this case)",
        "human_words": "React version: 17.0.2 (also tested on 16.9.0, same result)        1. Open this codesandbox: https://0gobm.csb.app/ ([Source](https://codesandbox.io/s/smoosh-sun-0gobm?file=/src/index.js))  2. Try to click on the \"Works\" button  3. Dropdown opens  4. Try to click on the \"Broken\" button  5. Dropdown does not open    <!--    Your bug will get fixed much faster if we can run your code and it doesn't    have dependencies other than React. Issues without reproduction steps or    code examples may be immediately closed as not actionable.  -->    Link to code example:    https://0gobm.csb.app/      The issue is related to how `useEffect` calls are scheduled. We have this effect:          Normally, this effect happens asynchronously. However, sometimes, it is synchronous and we add listener to the `window` before the event fully bubbles and the dropdown gets closed by the same event.    This only happens if any underlying component contains `useLayoutEffect` with `setState` call (as shown on codesandbox). Looks like this causes forced render and this chain of events.    P.S. The report looks very similar to another one: https://github.com/facebook/react/issues/20074. However, I decided to open a new issue, because the circumstances are different (no portals in this case)",
        "human_words_regrex": "React version: 17.0.2 (also tested on 16.9.0, same result) 1. Open this codesandbox:  () 2. Try to click on the \"Works\" button 3. Dropdown opens 4. Try to click on the \"Broken\" button 5. Dropdown does not open  Link to code example:  The issue is related to how `useEffect` calls are scheduled. We have this effect: Normally, this effect happens asynchronously. However, sometimes, it is synchronous and we add listener to the `window` before the event fully bubbles and the dropdown gets closed by the same event. This only happens if any underlying component contains `useLayoutEffect` with `setState` call (as shown on codesandbox). Looks like this causes forced render and this chain of events. P.S. The report looks very similar to another one:  However, I decided to open a new issue, because the circumstances are different (no portals in this case)",
        "human_words_stopwords_removal_lemmatization": "react version : 17.0.2 ( also tested 16.9.0 , result ) 1. open codesandbox : ( ) 2. try click `` work '' button 3. dropdown open 4. try click `` broken '' button 5. dropdown open link code example : issue related ` useeffect ` call scheduled . effect : normally , effect happens asynchronously . however , sometimes , synchronous add listener ` window ` event fully bubble dropdown get closed event . happens underlying component contains ` uselayouteffect ` ` setstate ` call ( shown codesandbox ) . look like cause forced render chain event . p.s . report look similar another one : however , decided open new issue , circumstance different ( portal case )",
        "title_stopwords_removal_lemmatization": "bug : useeffect happens synchronously uselayouteffect called"
    },
    {
        "issue_id": 850373766,
        "title": "Bug: strict mode, initial state changes, and useMemo (with dependency) doesn't seem to be recomputed",
        "label": [
            "Type: Question",
            "Status: Unconfirmed"
        ],
        "date": "2021-04-05T13:39:08Z",
        "status": "closed",
        "description": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 17.0.2\r\n\r\nI ran in to this interesting dynamic that I cannot explain today.\r\n\r\n1) The code sets some initial state, which is a random number, and logs this initial value. \r\n2) It converts the number to a string using `useMemo`, which logs the number it is converting, and is dependant on that number (not the string). And \r\n3) when the component is mounted, I force a re-render by changing a boolean state once.\r\n\r\nThe result is that the initial value of the number is changed (and the log is output) so you see the number being set twice to two different values - this only happens in `StrictMode`. It is surprising. Is it expected?\r\n\r\nYou also see the `useMemo` being computed ONCE - only the first time. So seemingly it does not recompute a new string value.\r\n\r\nBUT, the output in the HTML is the correct and shows the stringified value of the _second_ number. \r\n\r\nSo what is happening here? Is the console log swallowed? Is `useMemo` behaving correctly, and more importantly, is the `initialValue` of `useState` supposed to change like that?\r\n\r\n## Steps To Reproduce\r\n\r\n```typescript\r\nexport default function App() {\r\n  const [rand] = useState(Math.random());\r\n  const [, setState] = useState(false);\r\n\r\n  console.log(`Number: ${rand}`);\r\n\r\n  useEffect(() => {\r\n    setState(true);\r\n  }, []);\r\n\r\n  const text = useMemo(() => {\r\n    console.log(`Computing text from ${rand}`);\r\n    return rand.toString();\r\n  }, [rand]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Rand: {rand}</h1>\r\n      <h1>Text: {text}</h1>\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\nAnd wrap your app in `StrictMode`\r\n\r\n## Link to code example:\r\n\r\nhttps://codesandbox.io/s/strict-mode-random-bug-ml3gv\r\n\r\n## The current behavior\r\n\r\ninitial state computed twice.\r\nusememo seemingly not run twice\r\n\r\n## The expected behavior\r\n\r\nInitial state computed once?\r\nOr usememo runs twice?\r\n",
        "remove_template_description": "<!--    Please provide a clear and concise description of what the bug is. Include    screenshots if needed. Please test using the latest version of the relevant    React packages to make sure your issue has not already been fixed.  -->    React version: 17.0.2    I ran in to this interesting dynamic that I cannot explain today.    1) The code sets some initial state, which is a random number, and logs this initial value.   2) It converts the number to a string using `useMemo`, which logs the number it is converting, and is dependant on that number (not the string). And   3) when the component is mounted, I force a re-render by changing a boolean state once.    The result is that the initial value of the number is changed (and the log is output) so you see the number being set twice to two different values - this only happens in `StrictMode`. It is surprising. Is it expected?    You also see the `useMemo` being computed ONCE - only the first time. So seemingly it does not recompute a new string value.    BUT, the output in the HTML is the correct and shows the stringified value of the _second_ number.     So what is happening here? Is the console log swallowed? Is `useMemo` behaving correctly, and more importantly, is the `initialValue` of `useState` supposed to change like that?        ```typescript  export default function App() {    const [rand] = useState(Math.random());    const [, setState] = useState(false);      console.log(`Number: ${rand}`);      useEffect(() => {      setState(true);    }, []);      const text = useMemo(() => {      console.log(`Computing text from ${rand}`);      return rand.toString();    }, [rand]);      return (      <div className=\"App\">        <h1>Rand: {rand}</h1>        <h1>Text: {text}</h1>      </div>    );  }  ```    And wrap your app in `StrictMode`    ## Link to code example:    https://codesandbox.io/s/strict-mode-random-bug-ml3gv        initial state computed twice.  usememo seemingly not run twice        Initial state computed once?  Or usememo runs twice?",
        "human_words": "<!--    Please provide a clear and concise description of what the bug is. Include    screenshots if needed. Please test using the latest version of the relevant    React packages to make sure your issue has not already been fixed.  -->    React version: 17.0.2    I ran in to this interesting dynamic that I cannot explain today.    1) The code sets some initial state, which is a random number, and logs this initial value.   2) It converts the number to a string using `useMemo`, which logs the number it is converting, and is dependant on that number (not the string). And   3) when the component is mounted, I force a re-render by changing a boolean state once.    The result is that the initial value of the number is changed (and the log is output) so you see the number being set twice to two different values - this only happens in `StrictMode`. It is surprising. Is it expected?    You also see the `useMemo` being computed ONCE - only the first time. So seemingly it does not recompute a new string value.    BUT, the output in the HTML is the correct and shows the stringified value of the _second_ number.     So what is happening here? Is the console log swallowed? Is `useMemo` behaving correctly, and more importantly, is the `initialValue` of `useState` supposed to change like that?            And wrap your app in `StrictMode`    ## Link to code example:    https://codesandbox.io/s/strict-mode-random-bug-ml3gv        initial state computed twice.  usememo seemingly not run twice        Initial state computed once?  Or usememo runs twice?",
        "human_words_regrex": " React version: 17.0.2 I ran in to this interesting dynamic that I cannot explain today. 1) The code sets some initial state, which is a random number, and logs this initial value. 2) It converts the number to a string using `useMemo`, which logs the number it is converting, and is dependant on that number (not the string). And 3) when the component is mounted, I force a re-render by changing a boolean state once. The result is that the initial value of the number is changed (and the log is output) so you see the number being set twice to two different values - this only happens in `StrictMode`. It is surprising. Is it expected? You also see the `useMemo` being computed ONCE - only the first time. So seemingly it does not recompute a new string value. BUT, the output in the HTML is the correct and shows the stringified value of the _second_ number. So what is happening here? Is the console log swallowed? Is `useMemo` behaving correctly, and more importantly, is the `initialValue` of `useState` supposed to change like that? And wrap your app in `StrictMode` ## Link to code example:  initial state computed twice. usememo seemingly not run twice Initial state computed once? Or usememo runs twice?",
        "human_words_stopwords_removal_lemmatization": "react version : 17.0.2 ran interesting dynamic explain today . 1 ) code set initial state , random number , log initial value . 2 ) convert number string using ` usememo ` , log number converting , dependant number ( string ) . 3 ) component mounted , force re-render changing boolean state . result initial value number changed ( log output ) see number set twice two different value - happens ` strictmode ` . surprising . expected ? also see ` usememo ` computed - first time . seemingly recompute new string value . , output html correct show stringified value _second_ number . happening ? console log swallowed ? ` usememo ` behaving correctly , importantly , ` initialvalue ` ` usestate ` supposed change like ? wrap app ` strictmode ` # # link code example : initial state computed twice . usememo seemingly run twice initial state computed ? usememo run twice ?",
        "title_stopwords_removal_lemmatization": "bug : strict mode , initial state change , usememo ( dependency ) n't seem recomputed"
    },
    {
        "issue_id": 846914354,
        "title": "State not getting updated properly while using useReducer with Context API",
        "label": [
            "Type: Question"
        ],
        "date": "2021-03-31T16:09:52Z",
        "status": "closed",
        "description": "Due to proprietary code issue, can't share the code but will explain the issue elaborately. I have two functions, **function 1** and **function 2** . Inside **function 1**, I am updating my state twice by calling dispatch with two different action.type each time. After updating my state, I want to call **function 2** (from **function 1**), and read state's value. But my state is not getting updated properly. \r\n\r\nCan you please help me with this issue.\r\n\r\nI am using useReducer with context api, for state management. ",
        "remove_template_description": "Due to proprietary code issue, can't share the code but will explain the issue elaborately. I have two functions, **function 1** and **function 2** . Inside **function 1**, I am updating my state twice by calling dispatch with two different action.type each time. After updating my state, I want to call **function 2** (from **function 1**), and read state's value. But my state is not getting updated properly.     Can you please help me with this issue.    I am using useReducer with context api, for state management.",
        "human_words": "Due to proprietary code issue, can't share the code but will explain the issue elaborately. I have two functions, **function 1** and **function 2** . Inside **function 1**, I am updating my state twice by calling dispatch with two different action.type each time. After updating my state, I want to call **function 2** (from **function 1**), and read state's value. But my state is not getting updated properly.     Can you please help me with this issue.    I am using useReducer with context api, for state management.",
        "human_words_regrex": "Due to proprietary code issue, can't share the code but will explain the issue elaborately. I have two functions, **function 1** and **function 2** . Inside **function 1**, I am updating my state twice by calling dispatch with two different action.type each time. After updating my state, I want to call **function 2** (from **function 1**), and read state's value. But my state is not getting updated properly. Can you please help me with this issue. I am using useReducer with context api, for state management.",
        "human_words_stopwords_removal_lemmatization": "due proprietary code issue , ca n't share code explain issue elaborately . two function , * * function 1 * * * * function 2 * * . inside * * function 1 * * , updating state twice calling dispatch two different action.type time . updating state , want call * * function 2 * * ( * * function 1 * * ) , read state 's value . state getting updated properly . please help issue . using usereducer context api , state management .",
        "title_stopwords_removal_lemmatization": "state getting updated properly using usereducer context api"
    },
    {
        "issue_id": 843031105,
        "title": "Question:  is there any way to retrieve React Devtool performance data?",
        "label": [
            "Type: Question",
            "Status: Unconfirmed",
            "Component: Developer Tools"
        ],
        "date": "2021-03-29T06:44:29Z",
        "status": "closed",
        "description": "Hi guys, I want to get react devtool performance/profiler results, probably a JSON data and send to our local server, I read through the react-devtools-core but unfortunately do to get any clue how to do this ?",
        "remove_template_description": "Hi guys, I want to get react devtool performance/profiler results, probably a JSON data and send to our local server, I read through the react-devtools-core but unfortunately do to get any clue how to do this ?",
        "human_words": "Hi guys, I want to get react devtool performance/profiler results, probably a JSON data and send to our local server, I read through the react-devtools-core but unfortunately do to get any clue how to do this ?",
        "human_words_regrex": "Hi guys, I want to get react devtool performance/profiler results, probably a JSON data and send to our local server, I read through the react-devtools-core but unfortunately do to get any clue how to do this ?",
        "human_words_stopwords_removal_lemmatization": "hi guy , want get react devtool performance/profiler result , probably json data send local server , read react-devtools-core unfortunately get clue ?",
        "title_stopwords_removal_lemmatization": "question : way retrieve react devtool performance data ?"
    },
    {
        "issue_id": 823139192,
        "title": "Bug: Inconsistent behavior between development and production builds",
        "label": [
            "Type: Question",
            "Status: Unconfirmed"
        ],
        "date": "2021-03-05T14:25:14Z",
        "status": "closed",
        "description": "I was trying to implement `useOn`, a hook lets you write the following code:\r\n\r\n```js\r\nuseOn()\r\n  .who(window)\r\n  .when('resize')\r\n  .what(() => {\r\n    console.log('resize!');\r\n  });\r\n```\r\n\r\nMy approach worked in production, but not in development. I discovered some pretty unexpected behavior by React.\r\n\r\nWhen running `useOn` in development, it seemed like the resize event listener isn't being removed when the ResizeComponent gets unmounted (turned out it was actually being added twice).\r\n\r\nSo I added a `console.log`, just above the call to `addEventListener`, but only one log appeared.\r\n\r\nI then added a `debugger` statement just above the call to `console.log` and noticed that it is indeed being called twice, but in the second time it's called, `console.log` is overwritten by React's `disabledLog()`.\r\n\r\nReact version: 17.0.1\r\n\r\n## Steps To Reproduce\r\n\r\n(tip: you can skip checking out the repo (steps 1 to 3), as it can be reproduced in [the repo's CodeSandbox](https://codesandbox.io/s/github/dutzi/use-on))\r\n\r\n1. Check out https://github.com/dutzi/use-on\r\n2. `yarn` then `yarn start`\r\n3. (Chrome will start up)\r\n4. Open the DevTools' Console\r\n5. Click on \"Mount Resize Component\"\r\n6. Resize window\r\n7. (You should see \"resize!\" printed in the console)\r\n8. Click on \"Unmount Resize Component\"\r\n9. \"resize!\" messages should stop showing up in the console, but they don't.\r\n\r\nI did make some un-orthodox stuff in that hook. But I believe this is a bug since when trying this hook in a production build, it worked fine.\r\n\r\nTo test out a production build:\r\n\r\n(tip: you can skip checking out the repo (steps 1 to 2), as it can be reproduced in [the repo's deployed version](https://use-on.vercel.app/))\r\n\r\n1. Check out https://github.com/dutzi/use-on\r\n2. `yarn` then `yarn start:prod`\r\n3. Complete steps 4-9 from above\r\n\r\n\u2764\ufe0f",
        "remove_template_description": "I was trying to implement `useOn`, a hook lets you write the following code:    ```js  useOn()    .who(window)    .when('resize')    .what(() => {      console.log('resize!');    });  ```    My approach worked in production, but not in development. I discovered some pretty unexpected behavior by React.    When running `useOn` in development, it seemed like the resize event listener isn't being removed when the ResizeComponent gets unmounted (turned out it was actually being added twice).    So I added a `console.log`, just above the call to `addEventListener`, but only one log appeared.    I then added a `debugger` statement just above the call to `console.log` and noticed that it is indeed being called twice, but in the second time it's called, `console.log` is overwritten by React's `disabledLog()`.    React version: 17.0.1        (tip: you can skip checking out the repo (steps 1 to 3), as it can be reproduced in [the repo's CodeSandbox](https://codesandbox.io/s/github/dutzi/use-on))    1. Check out https://github.com/dutzi/use-on  2. `yarn` then `yarn start`  3. (Chrome will start up)  4. Open the DevTools' Console  5. Click on \"Mount Resize Component\"  6. Resize window  7. (You should see \"resize!\" printed in the console)  8. Click on \"Unmount Resize Component\"  9. \"resize!\" messages should stop showing up in the console, but they don't.    I did make some un-orthodox stuff in that hook. But I believe this is a bug since when trying this hook in a production build, it worked fine.    To test out a production build:    (tip: you can skip checking out the repo (steps 1 to 2), as it can be reproduced in [the repo's deployed version](https://use-on.vercel.app/))    1. Check out https://github.com/dutzi/use-on  2. `yarn` then `yarn start:prod`  3. Complete steps 4-9 from above    \u2764\ufe0f",
        "human_words": "I was trying to implement `useOn`, a hook lets you write the following code:        My approach worked in production, but not in development. I discovered some pretty unexpected behavior by React.    When running `useOn` in development, it seemed like the resize event listener isn't being removed when the ResizeComponent gets unmounted (turned out it was actually being added twice).    So I added a `console.log`, just above the call to `addEventListener`, but only one log appeared.    I then added a `debugger` statement just above the call to `console.log` and noticed that it is indeed being called twice, but in the second time it's called, `console.log` is overwritten by React's `disabledLog()`.    React version: 17.0.1        (tip: you can skip checking out the repo (steps 1 to 3), as it can be reproduced in [the repo's CodeSandbox](https://codesandbox.io/s/github/dutzi/use-on))    1. Check out https://github.com/dutzi/use-on  2. `yarn` then `yarn start`  3. (Chrome will start up)  4. Open the DevTools' Console  5. Click on \"Mount Resize Component\"  6. Resize window  7. (You should see \"resize!\" printed in the console)  8. Click on \"Unmount Resize Component\"  9. \"resize!\" messages should stop showing up in the console, but they don't.    I did make some un-orthodox stuff in that hook. But I believe this is a bug since when trying this hook in a production build, it worked fine.    To test out a production build:    (tip: you can skip checking out the repo (steps 1 to 2), as it can be reproduced in [the repo's deployed version](https://use-on.vercel.app/))    1. Check out https://github.com/dutzi/use-on  2. `yarn` then `yarn start:prod`  3. Complete steps 4-9 from above    \u2764\ufe0f",
        "human_words_regrex": "I was trying to implement `useOn`, a hook lets you write the following code: My approach worked in production, but not in development. I discovered some pretty unexpected behavior by React. When running `useOn` in development, it seemed like the resize event listener isn't being removed when the ResizeComponent gets unmounted (turned out it was actually being added twice). So I added a `console.log`, just above the call to `addEventListener`, but only one log appeared. I then added a `debugger` statement just above the call to `console.log` and noticed that it is indeed being called twice, but in the second time it's called, `console.log` is overwritten by React's `disabledLog()`. React version: 17.0.1 (tip: you can skip checking out the repo (steps 1 to 3), as it can be reproduced in ) 1. Check out  2. `yarn` then `yarn start` 3. (Chrome will start up) 4. Open the DevTools' Console 5. Click on \"Mount Resize Component\" 6. Resize window 7. (You should see \"resize!\" printed in the console) 8. Click on \"Unmount Resize Component\" 9. \"resize!\" messages should stop showing up in the console, but they don't. I did make some un-orthodox stuff in that hook. But I believe this is a bug since when trying this hook in a production build, it worked fine. To test out a production build: (tip: you can skip checking out the repo (steps 1 to 2), as it can be reproduced in ) 1. Check out  2. `yarn` then `yarn start:prod` 3. Complete steps 4-9 from above \u2764\ufe0f",
        "human_words_stopwords_removal_lemmatization": "trying implement ` useon ` , hook let write following code : approach worked production , development . discovered pretty unexpected behavior react . running ` useon ` development , seemed like resize event listener n't removed resizecomponent get unmounted ( turned actually added twice ) . added ` console.log ` , call ` addeventlistener ` , one log appeared . added ` debugger ` statement call ` console.log ` noticed indeed called twice , second time 's called , ` console.log ` overwritten react 's ` disabledlog ( ) ` . react version : 17.0.1 ( tip : skip checking repo ( step 1 3 ) , reproduced ) 1. check 2 . ` yarn ` ` yarn start ` 3 . ( chrome start ) 4. open devtools ' console 5. click `` mount resize component '' 6. resize window 7 . ( see `` resize ! '' printed console ) 8. click `` unmount resize component '' 9 . `` resize ! '' message stop showing console , n't . make un-orthodox stuff hook . believe bug since trying hook production build , worked fine . test production build : ( tip : skip checking repo ( step 1 2 ) , reproduced ) 1. check 2 . ` yarn ` ` yarn start : prod ` 3. complete step 4-9 \u2764\ufe0f",
        "title_stopwords_removal_lemmatization": "bug : inconsistent behavior development production build"
    },
    {
        "issue_id": 821213600,
        "title": "Question about getting the latest state value in the concurrent mode",
        "label": [
            "Type: Question"
        ],
        "date": "2021-03-03T15:25:10Z",
        "status": "closed",
        "description": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 17.0.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. Enable strict mode for checking for possible issues in the future concurrent mode\r\n2. create the below component and run the code\r\n```\r\nimport { useCallback, useState } from \"react\";\r\n\r\nconst Example = ({ onIncrement }) => {\r\n  const [count, setCount] = useState(0);\r\n\r\n  const incrementHandler = useCallback(() => {\r\n    onIncrement(count, count + 1);  // Is count guaranteed to be the latest state here due to including count in the useCallback dependency array?\r\n    setCount((count) => count + 1);\r\n  }, [count, onIncrement]);\r\n\r\n  return (\r\n    <>\r\n      <span>{count}</span>\r\n      <button onClick={incrementHandler}>increment</button>\r\n    </>\r\n  );\r\n};\r\n\r\nconst Parent = () => (\r\n  <Example\r\n    onIncrement={(currentCount, incrementedCount) =>\r\n      alert(\r\n        `count before incrementing: ${currentCount}, after increment: ${incrementedCount}`\r\n      )\r\n    }\r\n  />\r\n);\r\n\r\nexport default Parent;\r\n```\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\n<!-- Link to code example: -->\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nIn this simple example everything seems to be fine but in a more complicated situation full of event handlers that change the count or async callbacks that may change the count( like data fetching callbacks) the count value is not guaranteed to be the latest state and if I change the `incrementHandler` function like below:\r\n```\r\nconst incrementHandler = useCallback(() => {\r\n    setCount((count) => {\r\n      onIncrement(count, count + 1);  \r\n      return count + 1\r\n    });\r\n  }, [count, onIncrement]);\r\n```\r\nthen the `onIncrement` will run twice in development while in strict mode and may run twice in production in concurrent mode according to documentation.\r\nand If you suggest running the `onIncrement` in `useEffect` callback with `count` and `onIncrement` in effect's dependencies array how can I know that the `onClick` event of the increment button has caused the effect and not another event for example decrement or anything else.\r\n\r\nyou may say by setting another state that shows what is responsible for the effect, then I may need the previous state which unlike this example may be impossible to recalculate.\r\n\r\nyou may suggest using a ref for storing the previous state (count) then I will end up with **one extra state or ref for storing what is responsible for the effect to run**, **one extra ref for storing the previous state**, and **a useEffect hook to run the onIncrement click event handler**\r\n\r\n## The expected behavior\r\nProviding a second callback argument to `setState`  like in class Components that will run after this state update so we can save the current and next state and use it in the callback like below:\r\n```\r\nconst incrementHandler = useCallback(() => {\r\n    let prevCount, nextCount;\r\n    setCount(\r\n      (count) => {\r\n        prevCount = count;\r\n        nextCount = count + 1;\r\n        return nextCount;\r\n      },\r\n      () => onIncrement(prevCount, nextCount)\r\n    );\r\n  }, [onIncrement]);\r\n``` \r\nIn my humble opinion, this doesn't collide with the async nature of `setCount` and can be implemented. \r\n\r\nunlike below`getState` proposals that if it will be asynchronous it may not return the desired state. and if it will be synchronous it will not return the latest state too because `setState` is not executed yet.\r\n\r\n**wrong solution:**\r\n```\r\nconst [count, setCount, getCount] = useState(0);\r\n\r\n  const incrementHandler = useCallback(() => {\r\n    setCount((count) => count + 1);\r\n    const currentCount = getCount();\r\n    const nextCount = currentCount + 1;\r\n    onIncrement(currentCount, nextCount)\r\n  }, [onIncrement]);\r\n```\r\nor providing a third array to `useCallback` for accessing the latest state can not be implemented due to the same problem with `getState` and async nature of setState.\r\n\r\nPlease tell me if I'm missing something or I've misunderstood things.\r\n\r\nIf not, please tell me if there is a simple solution for this scenario or similar ones, or tell me the best practices for running a callback or event handler with the latest state.\r\n\r\nThank you!",
        "remove_template_description": "<!--    Please provide a clear and concise description of what the bug is. Include    screenshots if needed. Please test using the latest version of the relevant    React packages to make sure your issue has not already been fixed.  -->    React version: 17.0.1        1. Enable strict mode for checking for possible issues in the future concurrent mode  2. create the below component and run the code  ```  import { useCallback, useState } from \"react\";    const Example = ({ onIncrement }) => {    const [count, setCount] = useState(0);      const incrementHandler = useCallback(() => {      onIncrement(count, count + 1);  // Is count guaranteed to be the latest state here due to including count in the useCallback dependency array?      setCount((count) => count + 1);    }, [count, onIncrement]);      return (      <>        <span>{count}</span>        <button onClick={incrementHandler}>increment</button>      </>    );  };    const Parent = () => (    <Example      onIncrement={(currentCount, incrementedCount) =>        alert(          `count before incrementing: ${currentCount}, after increment: ${incrementedCount}`        )      }    />  );    export default Parent;  ```    <!--    Your bug will get fixed much faster if we can run your code and it doesn't    have dependencies other than React. Issues without reproduction steps or    code examples may be immediately closed as not actionable.  -->    <!-- Link to code example: -->    <!--    Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a    repository on GitHub, or provide a minimal code example that reproduces the    problem. You may provide a screenshot of the application if you think it is    relevant to your bug report. Here are some tips for providing a minimal    example: https://stackoverflow.com/help/mcve.  -->      In this simple example everything seems to be fine but in a more complicated situation full of event handlers that change the count or async callbacks that may change the count( like data fetching callbacks) the count value is not guaranteed to be the latest state and if I change the `incrementHandler` function like below:  ```  const incrementHandler = useCallback(() => {      setCount((count) => {        onIncrement(count, count + 1);          return count + 1      });    }, [count, onIncrement]);  ```  then the `onIncrement` will run twice in development while in strict mode and may run twice in production in concurrent mode according to documentation.  and If you suggest running the `onIncrement` in `useEffect` callback with `count` and `onIncrement` in effect's dependencies array how can I know that the `onClick` event of the increment button has caused the effect and not another event for example decrement or anything else.    you may say by setting another state that shows what is responsible for the effect, then I may need the previous state which unlike this example may be impossible to recalculate.    you may suggest using a ref for storing the previous state (count) then I will end up with **one extra state or ref for storing what is responsible for the effect to run**, **one extra ref for storing the previous state**, and **a useEffect hook to run the onIncrement click event handler**      Providing a second callback argument to `setState`  like in class Components that will run after this state update so we can save the current and next state and use it in the callback like below:  ```  const incrementHandler = useCallback(() => {      let prevCount, nextCount;      setCount(        (count) => {          prevCount = count;          nextCount = count + 1;          return nextCount;        },        () => onIncrement(prevCount, nextCount)      );    }, [onIncrement]);  ```   In my humble opinion, this doesn't collide with the async nature of `setCount` and can be implemented.     unlike below`getState` proposals that if it will be asynchronous it may not return the desired state. and if it will be synchronous it will not return the latest state too because `setState` is not executed yet.    **wrong solution:**  ```  const [count, setCount, getCount] = useState(0);      const incrementHandler = useCallback(() => {      setCount((count) => count + 1);      const currentCount = getCount();      const nextCount = currentCount + 1;      onIncrement(currentCount, nextCount)    }, [onIncrement]);  ```  or providing a third array to `useCallback` for accessing the latest state can not be implemented due to the same problem with `getState` and async nature of setState.    Please tell me if I'm missing something or I've misunderstood things.    If not, please tell me if there is a simple solution for this scenario or similar ones, or tell me the best practices for running a callback or event handler with the latest state.    Thank you!",
        "human_words": "<!--    Please provide a clear and concise description of what the bug is. Include    screenshots if needed. Please test using the latest version of the relevant    React packages to make sure your issue has not already been fixed.  -->    React version: 17.0.1        1. Enable strict mode for checking for possible issues in the future concurrent mode  2. create the below component and run the code      <!--    Your bug will get fixed much faster if we can run your code and it doesn't    have dependencies other than React. Issues without reproduction steps or    code examples may be immediately closed as not actionable.  -->    <!-- Link to code example: -->    <!--    Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a    repository on GitHub, or provide a minimal code example that reproduces the    problem. You may provide a screenshot of the application if you think it is    relevant to your bug report. Here are some tips for providing a minimal    example: https://stackoverflow.com/help/mcve.  -->      In this simple example everything seems to be fine but in a more complicated situation full of event handlers that change the count or async callbacks that may change the count( like data fetching callbacks) the count value is not guaranteed to be the latest state and if I change the `incrementHandler` function like below:    then the `onIncrement` will run twice in development while in strict mode and may run twice in production in concurrent mode according to documentation.  and If you suggest running the `onIncrement` in `useEffect` callback with `count` and `onIncrement` in effect's dependencies array how can I know that the `onClick` event of the increment button has caused the effect and not another event for example decrement or anything else.    you may say by setting another state that shows what is responsible for the effect, then I may need the previous state which unlike this example may be impossible to recalculate.    you may suggest using a ref for storing the previous state (count) then I will end up with **one extra state or ref for storing what is responsible for the effect to run**, **one extra ref for storing the previous state**, and **a useEffect hook to run the onIncrement click event handler**      Providing a second callback argument to `setState`  like in class Components that will run after this state update so we can save the current and next state and use it in the callback like below:     In my humble opinion, this doesn't collide with the async nature of `setCount` and can be implemented.     unlike below`getState` proposals that if it will be asynchronous it may not return the desired state. and if it will be synchronous it will not return the latest state too because `setState` is not executed yet.    **wrong solution:**    or providing a third array to `useCallback` for accessing the latest state can not be implemented due to the same problem with `getState` and async nature of setState.    Please tell me if I'm missing something or I've misunderstood things.    If not, please tell me if there is a simple solution for this scenario or similar ones, or tell me the best practices for running a callback or event handler with the latest state.    Thank you!",
        "human_words_regrex": " React version: 17.0.1 1. Enable strict mode for checking for possible issues in the future concurrent mode 2. create the below component and run the code    In this simple example everything seems to be fine but in a more complicated situation full of event handlers that change the count or async callbacks that may change the count( like data fetching callbacks) the count value is not guaranteed to be the latest state and if I change the `incrementHandler` function like below: then the `onIncrement` will run twice in development while in strict mode and may run twice in production in concurrent mode according to documentation. and If you suggest running the `onIncrement` in `useEffect` callback with `count` and `onIncrement` in effect's dependencies array how can I know that the `onClick` event of the increment button has caused the effect and not another event for example decrement or anything else. you may say by setting another state that shows what is responsible for the effect, then I may need the previous state which unlike this example may be impossible to recalculate. you may suggest using a ref for storing the previous state (count) then I will end up with **one extra state or ref for storing what is responsible for the effect to run**, **one extra ref for storing the previous state**, and **a useEffect hook to run the onIncrement click event handler** Providing a second callback argument to `setState` like in class Components that will run after this state update so we can save the current and next state and use it in the callback like below: In my humble opinion, this doesn't collide with the async nature of `setCount` and can be implemented. unlike below`getState` proposals that if it will be asynchronous it may not return the desired state. and if it will be synchronous it will not return the latest state too because `setState` is not executed yet. **wrong solution:** or providing a third array to `useCallback` for accessing the latest state can not be implemented due to the same problem with `getState` and async nature of setState. Please tell me if I'm missing something or I've misunderstood things. If not, please tell me if there is a simple solution for this scenario or similar ones, or tell me the best practices for running a callback or event handler with the latest state. Thank you!",
        "human_words_stopwords_removal_lemmatization": "react version : 17.0.1 1. enable strict mode checking possible issue future concurrent mode 2. create component run code simple example everything seems fine complicated situation full event handler change count async callback may change count ( like data fetching callback ) count value guaranteed latest state change ` incrementhandler ` function like : ` onincrement ` run twice development strict mode may run twice production concurrent mode according documentation . suggest running ` onincrement ` ` useeffect ` callback ` count ` ` onincrement ` effect 's dependency array know ` onclick ` event increment button caused effect another event example decrement anything else . may say setting another state show responsible effect , may need previous state unlike example may impossible recalculate . may suggest using ref storing previous state ( count ) end * * one extra state ref storing responsible effect run * * , * * one extra ref storing previous state * * , * * useeffect hook run onincrement click event handler * * providing second callback argument ` setstate ` like class component run state update save current next state use callback like : humble opinion , n't collide async nature ` setcount ` implemented . unlike ` getstate ` proposal asynchronous may return desired state . synchronous return latest state ` setstate ` executed yet . * * wrong solution : * * providing third array ` usecallback ` accessing latest state implemented due problem ` getstate ` async nature setstate . please tell 'm missing something 've misunderstood thing . , please tell simple solution scenario similar one , tell best practice running callback event handler latest state . thank !",
        "title_stopwords_removal_lemmatization": "question getting latest state value concurrent mode"
    },
    {
        "issue_id": 819889365,
        "title": "Bug: 17.0.1 npm packages were not built from 17.0.1 source code?",
        "label": [
            "Type: Question",
            "Status: Unconfirmed"
        ],
        "date": "2021-03-02T10:42:18Z",
        "status": "closed",
        "description": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 17.0.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. Go at https://codesandbox.io/s/warning-issue-formik-v2-tutorial-start-forked-lwtxx?file=/src/index.js\r\n2. Then reproduce the famous \"warning\" (**the issue is not about this warning**)\r\n![image](https://user-images.githubusercontent.com/9853656/109627307-298f8500-7b4a-11eb-9330-5ef9d8840094.png)\r\n(type something in the Tool ID)\r\n(the codesandboxe may freeze a little bit, try to reload the page)\r\n3. Open the browser console (chrome in my case) and you will see\r\n![image](https://user-images.githubusercontent.com/9853656/109634512-ff41c580-7b51-11eb-847c-f7cb7ca3754a.png)\r\nThen go to the code (red arrow on the image above)\r\n4. Make a breakpoint here\r\n![image](https://user-images.githubusercontent.com/9853656/109635453-0e754300-7b53-11eb-945b-f1848ac07a53.png)\r\nreload the page and initiate the \"warning\" again (see 2)\r\n4.  Go down the callstack and you can see the \"warning\" is written by this code\r\n![image](https://user-images.githubusercontent.com/9853656/109627844-b6d2d980-7b4a-11eb-9812-440d8d3aa7c3.png)\r\n5.  Now the question.. I'm using the 17.0.1 version and this code shouldn't exist there. Check this out https://github.com/facebook/react/releases/tag/v17.0.1 and you can find only this:\r\n![image](https://user-images.githubusercontent.com/9853656/109628307-45475b00-7b4b-11eb-8a25-61dad589fa8b.png)\r\nAs you can see instead of  `error('A component is changing...` we have `console.error(\r\n        'A component is changing...`.\r\nThe changes were made by this https://github.com/facebook/react/commit/0cf22a56a18790ef34c71bef14f64695c0498619#diff-e94b1d695a508a3bacbab157bbc3035d75e53174bdb82181077d1b374046f9a6 long time ago.\r\n6. Does it mean that 17.0.1 version of react and react-dom packeges were not built from this source code https://github.com/facebook/react/releases/tag/v17.0.1 ? Seems like a big issue then.\r\n7. It happens without Codesandbox as well.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\nLink to code example:\r\nhttps://codesandbox.io/s/warning-issue-formik-v2-tutorial-start-forked-lwtxx?file=/src/index.js\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nWe keep seeing the word \"Warning\" (which is produced by `warning` function, though it's not a warning but an error)\r\n![image](https://user-images.githubusercontent.com/9853656/109633773-2cda3f00-7b51-11eb-9ab8-93b33316e50b.png)\r\n\r\n## The expected behavior\r\nWe shouldn't see the word \"Warning\" if the packages v.17.0.1 were bilt from https://github.com/facebook/react/releases/tag/v17.0.1 sourcecode (because it calls  `console.error(\r\n        'A component is changing... `  instead of `error('A component is changing... `)\r\n![image](https://user-images.githubusercontent.com/9853656/109636757-a45d9d80-7b54-11eb-8a35-b745b0fa168f.png)\r\n\r\n\r\n",
        "remove_template_description": "<!--    Please provide a clear and concise description of what the bug is. Include    screenshots if needed. Please test using the latest version of the relevant    React packages to make sure your issue has not already been fixed.  -->    React version: 17.0.1        1. Go at https://codesandbox.io/s/warning-issue-formik-v2-tutorial-start-forked-lwtxx?file=/src/index.js  2. Then reproduce the famous \"warning\" (**the issue is not about this warning**)  ![image](https://user-images.githubusercontent.com/9853656/109627307-298f8500-7b4a-11eb-9330-5ef9d8840094.png)  (type something in the Tool ID)  (the codesandboxe may freeze a little bit, try to reload the page)  3. Open the browser console (chrome in my case) and you will see  ![image](https://user-images.githubusercontent.com/9853656/109634512-ff41c580-7b51-11eb-847c-f7cb7ca3754a.png)  Then go to the code (red arrow on the image above)  4. Make a breakpoint here  ![image](https://user-images.githubusercontent.com/9853656/109635453-0e754300-7b53-11eb-945b-f1848ac07a53.png)  reload the page and initiate the \"warning\" again (see 2)  4.  Go down the callstack and you can see the \"warning\" is written by this code  ![image](https://user-images.githubusercontent.com/9853656/109627844-b6d2d980-7b4a-11eb-9812-440d8d3aa7c3.png)  5.  Now the question.. I'm using the 17.0.1 version and this code shouldn't exist there. Check this out https://github.com/facebook/react/releases/tag/v17.0.1 and you can find only this:  ![image](https://user-images.githubusercontent.com/9853656/109628307-45475b00-7b4b-11eb-8a25-61dad589fa8b.png)  As you can see instead of  `error('A component is changing...` we have `console.error(          'A component is changing...`.  The changes were made by this https://github.com/facebook/react/commit/0cf22a56a18790ef34c71bef14f64695c0498619#diff-e94b1d695a508a3bacbab157bbc3035d75e53174bdb82181077d1b374046f9a6 long time ago.  6. Does it mean that 17.0.1 version of react and react-dom packeges were not built from this source code https://github.com/facebook/react/releases/tag/v17.0.1 ? Seems like a big issue then.  7. It happens without Codesandbox as well.    <!--    Your bug will get fixed much faster if we can run your code and it doesn't    have dependencies other than React. Issues without reproduction steps or    code examples may be immediately closed as not actionable.  -->  Link to code example:  https://codesandbox.io/s/warning-issue-formik-v2-tutorial-start-forked-lwtxx?file=/src/index.js  <!--    Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a    repository on GitHub, or provide a minimal code example that reproduces the    problem. You may provide a screenshot of the application if you think it is    relevant to your bug report. Here are some tips for providing a minimal    example: https://stackoverflow.com/help/mcve.  -->      We keep seeing the word \"Warning\" (which is produced by `warning` function, though it's not a warning but an error)  ![image](https://user-images.githubusercontent.com/9853656/109633773-2cda3f00-7b51-11eb-9ab8-93b33316e50b.png)      We shouldn't see the word \"Warning\" if the packages v.17.0.1 were bilt from https://github.com/facebook/react/releases/tag/v17.0.1 sourcecode (because it calls  `console.error(          'A component is changing... `  instead of `error('A component is changing... `)  ![image](https://user-images.githubusercontent.com/9853656/109636757-a45d9d80-7b54-11eb-8a35-b745b0fa168f.png)",
        "human_words": "<!--    Please provide a clear and concise description of what the bug is. Include    screenshots if needed. Please test using the latest version of the relevant    React packages to make sure your issue has not already been fixed.  -->    React version: 17.0.1        1. Go at https://codesandbox.io/s/warning-issue-formik-v2-tutorial-start-forked-lwtxx?file=/src/index.js  2. Then reproduce the famous \"warning\" (**the issue is not about this warning**)  ![image](https://user-images.githubusercontent.com/9853656/109627307-298f8500-7b4a-11eb-9330-5ef9d8840094.png)  (type something in the Tool ID)  (the codesandboxe may freeze a little bit, try to reload the page)  3. Open the browser console (chrome in my case) and you will see  ![image](https://user-images.githubusercontent.com/9853656/109634512-ff41c580-7b51-11eb-847c-f7cb7ca3754a.png)  Then go to the code (red arrow on the image above)  4. Make a breakpoint here  ![image](https://user-images.githubusercontent.com/9853656/109635453-0e754300-7b53-11eb-945b-f1848ac07a53.png)  reload the page and initiate the \"warning\" again (see 2)  4.  Go down the callstack and you can see the \"warning\" is written by this code  ![image](https://user-images.githubusercontent.com/9853656/109627844-b6d2d980-7b4a-11eb-9812-440d8d3aa7c3.png)  5.  Now the question.. I'm using the 17.0.1 version and this code shouldn't exist there. Check this out https://github.com/facebook/react/releases/tag/v17.0.1 and you can find only this:  ![image](https://user-images.githubusercontent.com/9853656/109628307-45475b00-7b4b-11eb-8a25-61dad589fa8b.png)  As you can see instead of  `error('A component is changing...` we have `console.error(          'A component is changing...`.  The changes were made by this https://github.com/facebook/react/commit/0cf22a56a18790ef34c71bef14f64695c0498619#diff-e94b1d695a508a3bacbab157bbc3035d75e53174bdb82181077d1b374046f9a6 long time ago.  6. Does it mean that 17.0.1 version of react and react-dom packeges were not built from this source code https://github.com/facebook/react/releases/tag/v17.0.1 ? Seems like a big issue then.  7. It happens without Codesandbox as well.    <!--    Your bug will get fixed much faster if we can run your code and it doesn't    have dependencies other than React. Issues without reproduction steps or    code examples may be immediately closed as not actionable.  -->  Link to code example:  https://codesandbox.io/s/warning-issue-formik-v2-tutorial-start-forked-lwtxx?file=/src/index.js  <!--    Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a    repository on GitHub, or provide a minimal code example that reproduces the    problem. You may provide a screenshot of the application if you think it is    relevant to your bug report. Here are some tips for providing a minimal    example: https://stackoverflow.com/help/mcve.  -->      We keep seeing the word \"Warning\" (which is produced by `warning` function, though it's not a warning but an error)  ![image](https://user-images.githubusercontent.com/9853656/109633773-2cda3f00-7b51-11eb-9ab8-93b33316e50b.png)      We shouldn't see the word \"Warning\" if the packages v.17.0.1 were bilt from https://github.com/facebook/react/releases/tag/v17.0.1 sourcecode (because it calls  `console.error(          'A component is changing... `  instead of `error('A component is changing... `)  ![image](https://user-images.githubusercontent.com/9853656/109636757-a45d9d80-7b54-11eb-8a35-b745b0fa168f.png)",
        "human_words_regrex": " React version: 17.0.1 1. Go at  2. Then reproduce the famous \"warning\" (**the issue is not about this warning**) ! (type something in the Tool ID) (the codesandboxe may freeze a little bit, try to reload the page) 3. Open the browser console (chrome in my case) and you will see ! Then go to the code (red arrow on the image above) 4. Make a breakpoint here ! reload the page and initiate the \"warning\" again (see 2) 4. Go down the callstack and you can see the \"warning\" is written by this code ! 5. Now the question.. I'm using the 17.0.1 version and this code shouldn't exist there. Check this out  and you can find only this: ! As you can see instead of `error('A component is changing...` we have `console.error( 'A component is changing...`. The changes were made by this  long time ago. 6. Does it mean that 17.0.1 version of react and react-dom packeges were not built from this source code  ? Seems like a big issue then. 7. It happens without Codesandbox as well.  Link to code example:   We keep seeing the word \"Warning\" (which is produced by `warning` function, though it's not a warning but an error) ! We shouldn't see the word \"Warning\" if the packages v.17.0.1 were bilt from  sourcecode (because it calls `console.error( 'A component is changing... ` instead of `error('A component is changing... `) !",
        "human_words_stopwords_removal_lemmatization": "react version : 17.0.1 1. go 2. reproduce famous `` warning '' ( * * issue warning * * ) ! ( type something tool id ) ( codesandboxe may freeze little bit , try reload page ) 3. open browser console ( chrome case ) see ! go code ( red arrow image ) 4. make breakpoint ! reload page initiate `` warning '' ( see 2 ) 4. go callstack see `` warning '' written code ! 5. question .. 'm using 17.0.1 version code n't exist . check find : ! see instead ` error ( ' component changing ... ` ` console.error ( ' component changing ... ` . change made long time ago . 6. mean 17.0.1 version react react-dom packeges built source code ? seems like big issue . 7. happens without codesandbox well . link code example : keep seeing word `` warning '' ( produced ` warning ` function , though 's warning error ) ! n't see word `` warning '' package v.17.0.1 bilt sourcecode ( call ` console.error ( ' component changing ... ` instead ` error ( ' component changing ... ` ) !",
        "title_stopwords_removal_lemmatization": "bug : 17.0.1 npm package built 17.0.1 source code ?"
    },
    {
        "issue_id": 812466225,
        "title": "Bug: It seems that the default value in functional React component gets updated after render.",
        "label": [
            "Type: Question",
            "Status: Unconfirmed"
        ],
        "date": "2021-02-20T01:05:40Z",
        "status": "closed",
        "description": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nIt seems that the default value in functional React component gets updated after render.\r\n\r\nReact version: 17.0.1\r\n\r\n## Steps To Reproduce\r\n\r\nI created a question on StackOverflow: https://stackoverflow.com/questions/66286856/why-default-value-in-functional-react-component-gets-updated-after-render, but also repeat it here:\r\n\r\n\r\n```\r\nconst MyComponent = () => {\r\n\r\n  // Initialise data with a random value:\r\n  const [data, setData] = React.useState(\r\n    () => {\r\n      const data = _.sampleSize(_.range(5), 3)\r\n      // Print data on initialisation:\r\n      console.log('init data in default:', data)\r\n      return data\r\n    }\r\n  )\r\n\r\n  React.useEffect(() => {\r\n    // Print data after the component is rendered:\r\n    console.log('init data after render:', data)\r\n  })\r\n\r\n  return (\r\n    <div>{data}</div>\r\n  );\r\n};\r\n```\r\n\r\nThe output in console is:\r\n\r\n```\r\n[Log] init data in default: \u2013 [0, 3, 1] (3)\r\n[Log] init data after render: \u2013 [2, 1, 3] (3)\r\n```\r\n\r\nMy understanding is that before the component is rendered, the function under `useState` is called. The value returned by the function is assigned to `data`, and the `data` values is used to render the component on the screen. The function under `useState` is called only once and we never call `setData`, so the value should be the same. Maybe I miss something?\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\nhttps://codesandbox.io/s/jovial-glade-9jm75?file=/src/App.js\r\n\r\n## The current behavior\r\n\r\nThe output in console before and after render is different.\r\n\r\n## The expected behavior\r\n\r\nThe output in console before and after render should be the same.",
        "remove_template_description": "<!--    Please provide a clear and concise description of what the bug is. Include    screenshots if needed. Please test using the latest version of the relevant    React packages to make sure your issue has not already been fixed.  -->    It seems that the default value in functional React component gets updated after render.    React version: 17.0.1        I created a question on StackOverflow: https://stackoverflow.com/questions/66286856/why-default-value-in-functional-react-component-gets-updated-after-render, but also repeat it here:      ```  const MyComponent = () => {      // Initialise data with a random value:    const [data, setData] = React.useState(      () => {        const data = _.sampleSize(_.range(5), 3)        // Print data on initialisation:        console.log('init data in default:', data)        return data      }    )      React.useEffect(() => {      // Print data after the component is rendered:      console.log('init data after render:', data)    })      return (      <div>{data}</div>    );  };  ```    The output in console is:    ```  [Log] init data in default: \u2013 [0, 3, 1] (3)  [Log] init data after render: \u2013 [2, 1, 3] (3)  ```    My understanding is that before the component is rendered, the function under `useState` is called. The value returned by the function is assigned to `data`, and the `data` values is used to render the component on the screen. The function under `useState` is called only once and we never call `setData`, so the value should be the same. Maybe I miss something?    <!--    Your bug will get fixed much faster if we can run your code and it doesn't    have dependencies other than React. Issues without reproduction steps or    code examples may be immediately closed as not actionable.  -->    Link to code example:    <!--    Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a    repository on GitHub, or provide a minimal code example that reproduces the    problem. You may provide a screenshot of the application if you think it is    relevant to your bug report. Here are some tips for providing a minimal    example: https://stackoverflow.com/help/mcve.  -->    https://codesandbox.io/s/jovial-glade-9jm75?file=/src/App.js        The output in console before and after render is different.        The output in console before and after render should be the same.",
        "human_words": "<!--    Please provide a clear and concise description of what the bug is. Include    screenshots if needed. Please test using the latest version of the relevant    React packages to make sure your issue has not already been fixed.  -->    It seems that the default value in functional React component gets updated after render.    React version: 17.0.1        I created a question on StackOverflow: https://stackoverflow.com/questions/66286856/why-default-value-in-functional-react-component-gets-updated-after-render, but also repeat it here:          The output in console is:        My understanding is that before the component is rendered, the function under `useState` is called. The value returned by the function is assigned to `data`, and the `data` values is used to render the component on the screen. The function under `useState` is called only once and we never call `setData`, so the value should be the same. Maybe I miss something?    <!--    Your bug will get fixed much faster if we can run your code and it doesn't    have dependencies other than React. Issues without reproduction steps or    code examples may be immediately closed as not actionable.  -->    Link to code example:    <!--    Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a    repository on GitHub, or provide a minimal code example that reproduces the    problem. You may provide a screenshot of the application if you think it is    relevant to your bug report. Here are some tips for providing a minimal    example: https://stackoverflow.com/help/mcve.  -->    https://codesandbox.io/s/jovial-glade-9jm75?file=/src/App.js        The output in console before and after render is different.        The output in console before and after render should be the same.",
        "human_words_regrex": " It seems that the default value in functional React component gets updated after render. React version: 17.0.1 I created a question on StackOverflow:  but also repeat it here: The output in console is: My understanding is that before the component is rendered, the function under `useState` is called. The value returned by the function is assigned to `data`, and the `data` values is used to render the component on the screen. The function under `useState` is called only once and we never call `setData`, so the value should be the same. Maybe I miss something?  Link to code example:   The output in console before and after render is different. The output in console before and after render should be the same.",
        "human_words_stopwords_removal_lemmatization": "seems default value functional react component get updated render . react version : 17.0.1 created question stackoverflow : also repeat : output console : understanding component rendered , function ` usestate ` called . value returned function assigned ` data ` , ` data ` value used render component screen . function ` usestate ` called never call ` setdata ` , value . maybe miss something ? link code example : output console render different . output console render .",
        "title_stopwords_removal_lemmatization": "bug : seems default value functional react component get updated render ."
    },
    {
        "issue_id": 811254320,
        "title": "Mixin rewrite with React and Higher-order-functions",
        "label": [
            "Type: Question"
        ],
        "date": "2021-02-18T16:23:13Z",
        "status": "closed",
        "description": "@gaearon How would you re-write the following mixins?\r\n\r\nhttps://github.com/gerobit/ivis-core/blob/a51154c8937d4d392f20303caeb8b450ecf9189a/client/src/lib/decorator-\r\nhelpers.js",
        "remove_template_description": "@gaearon How would you re-write the following mixins?    https://github.com/gerobit/ivis-core/blob/a51154c8937d4d392f20303caeb8b450ecf9189a/client/src/lib/decorator-  helpers.js",
        "human_words": "@gaearon How would you re-write the following mixins?    https://github.com/gerobit/ivis-core/blob/a51154c8937d4d392f20303caeb8b450ecf9189a/client/src/lib/decorator-  helpers.js",
        "human_words_regrex": "@gaearon How would you re-write the following mixins?  helpers.js",
        "human_words_stopwords_removal_lemmatization": "@ gaearon would re-write following mixins ? helpers.js",
        "title_stopwords_removal_lemmatization": "mixin rewrite react higher-order-functions"
    },
    {
        "issue_id": 792070252,
        "title": "Dev tools Chrome Extension only works properly in Incognito window",
        "label": [
            "Type: Question",
            "Component: Developer Tools"
        ],
        "date": "2021-01-22T14:56:51Z",
        "status": "closed",
        "description": "Hi folks,\r\nAt some point w/in the last 5 months or so, the dev tools Chrome extension stopped working properly for me in **non**-incognito Chrome windows.  It's a bit hard to explain, but i'll try: when i use the extension, react components show up, but they are basically just high level wrapper components that we use in our app.  For example, I cannot inspect a button component, a container component, an input component, etc, in the UI.\r\n\r\nThis issue disappears in incognito mode, however, and i can use the extension just fine.\r\n\r\nChrome version: 87.0.4280.141\r\nExtension version: 4.10.1\r\nReact version: 16.13.1\r\n\r\nI've been unable to find anyone else with this issue.  Please let me know if there is other information I can provide you with.  Thank you.",
        "remove_template_description": "Hi folks,  At some point w/in the last 5 months or so, the dev tools Chrome extension stopped working properly for me in **non**-incognito Chrome windows.  It's a bit hard to explain, but i'll try: when i use the extension, react components show up, but they are basically just high level wrapper components that we use in our app.  For example, I cannot inspect a button component, a container component, an input component, etc, in the UI.    This issue disappears in incognito mode, however, and i can use the extension just fine.    Chrome version: 87.0.4280.141  Extension version: 4.10.1  React version: 16.13.1    I've been unable to find anyone else with this issue.  Please let me know if there is other information I can provide you with.  Thank you.",
        "human_words": "Hi folks,  At some point w/in the last 5 months or so, the dev tools Chrome extension stopped working properly for me in **non**-incognito Chrome windows.  It's a bit hard to explain, but i'll try: when i use the extension, react components show up, but they are basically just high level wrapper components that we use in our app.  For example, I cannot inspect a button component, a container component, an input component, etc, in the UI.    This issue disappears in incognito mode, however, and i can use the extension just fine.    Chrome version: 87.0.4280.141  Extension version: 4.10.1  React version: 16.13.1    I've been unable to find anyone else with this issue.  Please let me know if there is other information I can provide you with.  Thank you.",
        "human_words_regrex": "Hi folks, At some point w/in the last 5 months or so, the dev tools Chrome extension stopped working properly for me in **non**-incognito Chrome windows. It's a bit hard to explain, but i'll try: when i use the extension, react components show up, but they are basically just high level wrapper components that we use in our app. For example, I cannot inspect a button component, a container component, an input component, etc, in the UI. This issue disappears in incognito mode, however, and i can use the extension just fine. Chrome version: 87.0.4280.141 Extension version: 4.10.1 React version: 16.13.1 I've been unable to find anyone else with this issue. Please let me know if there is other information I can provide you with. Thank you.",
        "human_words_stopwords_removal_lemmatization": "hi folk , point w/in last 5 month , dev tool chrome extension stopped working properly * * non * * -incognito chrome window . 's bit hard explain , 'll try : use extension , react component show , basically high level wrapper component use app . example , inspect button component , container component , input component , etc , ui . issue disappears incognito mode , however , use extension fine . chrome version : 87.0.4280.141 extension version : 4.10.1 react version : 16.13.1 've unable find anyone else issue . please let know information provide . thank .",
        "title_stopwords_removal_lemmatization": "dev tool chrome extension work properly incognito window"
    },
    {
        "issue_id": 776009975,
        "title": "Can I help?",
        "label": [
            "Type: Question"
        ],
        "date": "2020-12-29T17:35:10Z",
        "status": "closed",
        "description": "Hi guys,\r\nI would really like to join you in order to help with the maintenance of React.\r\n\r\nMy change proposal is to apply the clean code rules to React codebase; for example:\r\n- better name to variables\r\n- single point of return\r\n- have short functions with a single purpose\r\n- ...\r\n\r\nIn order to avoid a long code review process, I would like to make 1 PR for each package that I'm going to edit.\r\n\r\nI've already signed the CLA. \r\n\r\nHope you'll be interested in this,\r\n\r\nMatteo",
        "remove_template_description": "Hi guys,  I would really like to join you in order to help with the maintenance of React.    My change proposal is to apply the clean code rules to React codebase; for example:  - better name to variables  - single point of return  - have short functions with a single purpose  - ...    In order to avoid a long code review process, I would like to make 1 PR for each package that I'm going to edit.    I've already signed the CLA.     Hope you'll be interested in this,    Matteo",
        "human_words": "Hi guys,  I would really like to join you in order to help with the maintenance of React.    My change proposal is to apply the clean code rules to React codebase; for example:  - better name to variables  - single point of return  - have short functions with a single purpose  - ...    In order to avoid a long code review process, I would like to make 1 PR for each package that I'm going to edit.    I've already signed the CLA.     Hope you'll be interested in this,    Matteo",
        "human_words_regrex": "Hi guys, I would really like to join you in order to help with the maintenance of React. My change proposal is to apply the clean code rules to React codebase; for example: - better name to variables - single point of return - have short functions with a single purpose - ... In order to avoid a long code review process, I would like to make 1 PR for each package that I'm going to edit. I've already signed the CLA. Hope you'll be interested in this, Matteo",
        "human_words_stopwords_removal_lemmatization": "hi guy , would really like join order help maintenance react . change proposal apply clean code rule react codebase ; example : - better name variable - single point return - short function single purpose - ... order avoid long code review process , would like make 1 pr package 'm going edit . 've already signed cla . hope 'll interested , matteo",
        "title_stopwords_removal_lemmatization": "help ?"
    },
    {
        "issue_id": 730950480,
        "title": "Question: CM mode and useEffect cleanups",
        "label": [
            "Type: Question"
        ],
        "date": "2020-10-27T23:40:19Z",
        "status": "closed",
        "description": "Since CM mode now runs useEffects' cleanups async. Are we still guaranteed that they'll resolve in order? By that I mean, if a component get's cleanup, re-rendered and cleaned up again. That the first cleanup will resolve, before the second?\r\n\r\nComponentA (1) -> thrown away -> ComponentA (2) -> thrown away. Will that (2) effectively \"await\" on the (1) to cleanup first.",
        "remove_template_description": "Since CM mode now runs useEffects' cleanups async. Are we still guaranteed that they'll resolve in order? By that I mean, if a component get's cleanup, re-rendered and cleaned up again. That the first cleanup will resolve, before the second?    ComponentA (1) -> thrown away -> ComponentA (2) -> thrown away. Will that (2) effectively \"await\" on the (1) to cleanup first.",
        "human_words": "Since CM mode now runs useEffects' cleanups async. Are we still guaranteed that they'll resolve in order? By that I mean, if a component get's cleanup, re-rendered and cleaned up again. That the first cleanup will resolve, before the second?    ComponentA (1) -> thrown away -> ComponentA (2) -> thrown away. Will that (2) effectively \"await\" on the (1) to cleanup first.",
        "human_words_regrex": "Since CM mode now runs useEffects' cleanups async. Are we still guaranteed that they'll resolve in order? By that I mean, if a component get's cleanup, re-rendered and cleaned up again. That the first cleanup will resolve, before the second? ComponentA (1) -> thrown away -> ComponentA (2) -> thrown away. Will that (2) effectively \"await\" on the (1) to cleanup first.",
        "human_words_stopwords_removal_lemmatization": "since cm mode run useeffects ' cleanup async . still guaranteed 'll resolve order ? mean , component get 's cleanup , re-rendered cleaned . first cleanup resolve , second ? componenta ( 1 ) - > thrown away - > componenta ( 2 ) - > thrown away . ( 2 ) effectively `` await '' ( 1 ) cleanup first .",
        "title_stopwords_removal_lemmatization": "question : cm mode useeffect cleanup"
    },
    {
        "issue_id": 704079875,
        "title": "React build files contain the version of react being used",
        "label": [
            "Type: Question"
        ],
        "date": "2020-09-18T04:46:12Z",
        "status": "closed",
        "description": "Is there any way to hide react version or is it designed to have react versions in the build files which are given in the production\r\n\r\n",
        "remove_template_description": "Is there any way to hide react version or is it designed to have react versions in the build files which are given in the production",
        "human_words": "Is there any way to hide react version or is it designed to have react versions in the build files which are given in the production",
        "human_words_regrex": "Is there any way to hide react version or is it designed to have react versions in the build files which are given in the production",
        "human_words_stopwords_removal_lemmatization": "way hide react version designed react version build file given production",
        "title_stopwords_removal_lemmatization": "react build file contain version react used"
    },
    {
        "issue_id": 697535772,
        "title": "Some questions about lanes.",
        "label": [
            "Type: Question",
            "Component: Reconciler"
        ],
        "date": "2020-09-10T07:13:00Z",
        "status": "closed",
        "description": "First of all, thank you for reading and patience.\r\n\r\nI've been studying the principle of react lanes recently, and its implementation is interesting to me, but I still don't know what the specific problems it solves.\r\n\r\n> This constraint was designed before Suspense was a thing, and it made some sense in that world. When all your work is CPU bound, there's not much reason to work on tasks in any order other than by their priority. But when you introduce tasks that are IO-bound (i.e. Suspense), you can have a scenario where a higher priority IO-bound task blocks a lower-priority CPU-bound task from completing.\r\n\r\nFrom the explanation of @acdlite , it seems to solve the blocking problem of IO operation on low priority tasks.\r\n\r\nBut I couldn't figure out what asynchronous IO blocked\uff1f\r\n\r\n```js\r\n<A/>\r\n<Suspense>\r\n  <B/>\r\n</Susepsne>\r\n<C/>\r\n```\r\nBased on the above example, before lanes, where is blocked, and where is the problem solved after lanes.\r\n\r\nOr do you have a better demo to explain?\r\n\r\nFor developers, the new technology related information is too little, binary is also very abstract, thank you again for your patience.\r\n",
        "remove_template_description": "First of all, thank you for reading and patience.    I've been studying the principle of react lanes recently, and its implementation is interesting to me, but I still don't know what the specific problems it solves.    > This constraint was designed before Suspense was a thing, and it made some sense in that world. When all your work is CPU bound, there's not much reason to work on tasks in any order other than by their priority. But when you introduce tasks that are IO-bound (i.e. Suspense), you can have a scenario where a higher priority IO-bound task blocks a lower-priority CPU-bound task from completing.    From the explanation of @acdlite , it seems to solve the blocking problem of IO operation on low priority tasks.    But I couldn't figure out what asynchronous IO blocked\uff1f    ```js  <A/>  <Suspense>    <B/>  </Susepsne>  <C/>  ```  Based on the above example, before lanes, where is blocked, and where is the problem solved after lanes.    Or do you have a better demo to explain?    For developers, the new technology related information is too little, binary is also very abstract, thank you again for your patience.",
        "human_words": "First of all, thank you for reading and patience.    I've been studying the principle of react lanes recently, and its implementation is interesting to me, but I still don't know what the specific problems it solves.    > This constraint was designed before Suspense was a thing, and it made some sense in that world. When all your work is CPU bound, there's not much reason to work on tasks in any order other than by their priority. But when you introduce tasks that are IO-bound (i.e. Suspense), you can have a scenario where a higher priority IO-bound task blocks a lower-priority CPU-bound task from completing.    From the explanation of @acdlite , it seems to solve the blocking problem of IO operation on low priority tasks.    But I couldn't figure out what asynchronous IO blocked\uff1f      Based on the above example, before lanes, where is blocked, and where is the problem solved after lanes.    Or do you have a better demo to explain?    For developers, the new technology related information is too little, binary is also very abstract, thank you again for your patience.",
        "human_words_regrex": "First of all, thank you for reading and patience. I've been studying the principle of react lanes recently, and its implementation is interesting to me, but I still don't know what the specific problems it solves. > This constraint was designed before Suspense was a thing, and it made some sense in that world. When all your work is CPU bound, there's not much reason to work on tasks in any order other than by their priority. But when you introduce tasks that are IO-bound (i.e. Suspense), you can have a scenario where a higher priority IO-bound task blocks a lower-priority CPU-bound task from completing. From the explanation of @acdlite , it seems to solve the blocking problem of IO operation on low priority tasks. But I couldn't figure out what asynchronous IO blocked\uff1f Based on the above example, before lanes, where is blocked, and where is the problem solved after lanes. Or do you have a better demo to explain? For developers, the new technology related information is too little, binary is also very abstract, thank you again for your patience.",
        "human_words_stopwords_removal_lemmatization": "first , thank reading patience . 've studying principle react lane recently , implementation interesting , still n't know specific problem solves . > constraint designed suspense thing , made sense world . work cpu bound , 's much reason work task order priority . introduce task io-bound ( i.e . suspense ) , scenario higher priority io-bound task block lower-priority cpu-bound task completing . explanation @ acdlite , seems solve blocking problem io operation low priority task . could n't figure asynchronous io blocked\uff1f based example , lane , blocked , problem solved lane . better demo explain ? developer , new technology related information little , binary also abstract , thank patience .",
        "title_stopwords_removal_lemmatization": "question lane ."
    },
    {
        "issue_id": 673635209,
        "title": "Suggestion: Add release date in the experimental (0.0.0) version",
        "label": [
            "Type: Question"
        ],
        "date": "2020-08-05T15:35:17Z",
        "status": "closed",
        "description": "https://samver.org/\r\n\r\nIt's hard to know which one is the latest experimental react version in the `yarn` or `npm`.\r\n\r\n0.0.0-experimental-ede917064\r\n0.0.0-experimental-4c8c98ab9\r\n0.0.0-experimental-7f28234f8\r\n\r\nCan you tell which one is newer without doing querying on the web?\r\n\r\nI suggest adding a release date in the version.\r\n\r\n`0.0.0-experimental-20200802-3d0895557`",
        "remove_template_description": "https://samver.org/    It's hard to know which one is the latest experimental react version in the `yarn` or `npm`.    0.0.0-experimental-ede917064  0.0.0-experimental-4c8c98ab9  0.0.0-experimental-7f28234f8    Can you tell which one is newer without doing querying on the web?    I suggest adding a release date in the version.    `0.0.0-experimental-20200802-3d0895557`",
        "human_words": "https://samver.org/    It's hard to know which one is the latest experimental react version in the `yarn` or `npm`.    0.0.0-experimental-ede917064  0.0.0-experimental-4c8c98ab9  0.0.0-experimental-7f28234f8    Can you tell which one is newer without doing querying on the web?    I suggest adding a release date in the version.    `0.0.0-experimental-20200802-3d0895557`",
        "human_words_regrex": " It's hard to know which one is the latest experimental react version in the `yarn` or `npm`. 0.0.0-experimental-ede917064 0.0.0-experimental-4c8c98ab9 0.0.0-experimental-7f28234f8 Can you tell which one is newer without doing querying on the web? I suggest adding a release date in the version. `0.0.0-experimental-20200802-3d0895557`",
        "human_words_stopwords_removal_lemmatization": "'s hard know one latest experimental react version ` yarn ` ` npm ` . 0.0.0-experimental-ede917064 0.0.0-experimental-4c8c98ab9 0.0.0-experimental-7f28234f8 tell one newer without querying web ? suggest adding release date version . ` 0.0.0-experimental-20200802-3d0895557 `",
        "title_stopwords_removal_lemmatization": "suggestion : add release date experimental ( 0.0.0 ) version"
    },
    {
        "issue_id": 672108923,
        "title": "Why does React warn about multiple renderers using the same context provider?",
        "label": [
            "Type: Question"
        ],
        "date": "2020-08-03T14:16:34Z",
        "status": "closed",
        "description": "I am currently developing a web app that uses both [react-pixi](https://github.com/inlet/react-pixi) and [react-babylonjs](https://github.com/brianzinn/react-babylonjs). Both of these libraries use `react-reconciler` and have a custom renderer. I also use redux in my project, so they share the same Context in the two libraries. \r\n\r\nIt displays a warning on Console after every redux state updating, but everything works well, both renderers can trigger an update.\r\n\r\nI want to know if there is any risk in doing this, or is this just a false warning?\r\n\r\nReact version: 16.13.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. Using multiple react renderers\r\n2. Using the same context provider between that react renderers\r\n\r\nLink to code example: https://codesandbox.io/s/multiple-reconciler-using-same-context-v8kq1?file=/src/App.js\r\n\r\n## The current behavior\r\n\r\nIt will throw a warning message after every state updating:\r\n\r\n> Warning: Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported. \r\n\r\nBut everything works well, both renderers can trigger an update.\r\n\r\n## The expected behavior\r\n\r\nDon't show any warning.",
        "remove_template_description": "I am currently developing a web app that uses both [react-pixi](https://github.com/inlet/react-pixi) and [react-babylonjs](https://github.com/brianzinn/react-babylonjs). Both of these libraries use `react-reconciler` and have a custom renderer. I also use redux in my project, so they share the same Context in the two libraries.     It displays a warning on Console after every redux state updating, but everything works well, both renderers can trigger an update.    I want to know if there is any risk in doing this, or is this just a false warning?    React version: 16.13.1        1. Using multiple react renderers  2. Using the same context provider between that react renderers    Link to code example: https://codesandbox.io/s/multiple-reconciler-using-same-context-v8kq1?file=/src/App.js        It will throw a warning message after every state updating:    > Warning: Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.     But everything works well, both renderers can trigger an update.        Don't show any warning.",
        "human_words": "I am currently developing a web app that uses both [react-pixi](https://github.com/inlet/react-pixi) and [react-babylonjs](https://github.com/brianzinn/react-babylonjs). Both of these libraries use `react-reconciler` and have a custom renderer. I also use redux in my project, so they share the same Context in the two libraries.     It displays a warning on Console after every redux state updating, but everything works well, both renderers can trigger an update.    I want to know if there is any risk in doing this, or is this just a false warning?    React version: 16.13.1        1. Using multiple react renderers  2. Using the same context provider between that react renderers    Link to code example: https://codesandbox.io/s/multiple-reconciler-using-same-context-v8kq1?file=/src/App.js        It will throw a warning message after every state updating:    > Warning: Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.     But everything works well, both renderers can trigger an update.        Don't show any warning.",
        "human_words_regrex": "I am currently developing a web app that uses both  and . Both of these libraries use `react-reconciler` and have a custom renderer. I also use redux in my project, so they share the same Context in the two libraries. It displays a warning on Console after every redux state updating, but everything works well, both renderers can trigger an update. I want to know if there is any risk in doing this, or is this just a false warning? React version: 16.13.1 1. Using multiple react renderers 2. Using the same context provider between that react renderers Link to code example:  It will throw a warning message after every state updating: > Warning: Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported. But everything works well, both renderers can trigger an update. Don't show any warning.",
        "human_words_stopwords_removal_lemmatization": "currently developing web app us . library use ` react-reconciler ` custom renderer . also use redux project , share context two library . display warning console every redux state updating , everything work well , renderers trigger update . want know risk , false warning ? react version : 16.13.1 1. using multiple react renderers 2. using context provider react renderers link code example : throw warning message every state updating : > warning : detected multiple renderers concurrently rendering context provider . currently unsupported . everything work well , renderers trigger update . n't show warning .",
        "title_stopwords_removal_lemmatization": "react warn multiple renderers using context provider ?"
    },
    {
        "issue_id": 672068280,
        "title": "Bug: can't inspect well react warnings for `componentWillReceiveProps has been renamed`",
        "label": [
            "Type: Question"
        ],
        "date": "2020-08-03T13:15:54Z",
        "status": "closed",
        "description": "Cf the screenshot bellow. I have no `componentWillReceiveProps` in my code, so the warning comes from a library.\r\nI don't know how to quickly identify which library causes this warning and make a fix pull request on the repo of this library.\r\n\r\nAny tips to also remove the warning ?\r\n\r\nThanks a lot \r\n\r\n\r\n![image](https://user-images.githubusercontent.com/25119847/89186329-ebbe8400-d59b-11ea-87f4-47d2f215be72.png)\r\n\r\n\r\n",
        "remove_template_description": "Cf the screenshot bellow. I have no `componentWillReceiveProps` in my code, so the warning comes from a library.  I don't know how to quickly identify which library causes this warning and make a fix pull request on the repo of this library.    Any tips to also remove the warning ?    Thanks a lot       ![image](https://user-images.githubusercontent.com/25119847/89186329-ebbe8400-d59b-11ea-87f4-47d2f215be72.png)",
        "human_words": "Cf the screenshot bellow. I have no `componentWillReceiveProps` in my code, so the warning comes from a library.  I don't know how to quickly identify which library causes this warning and make a fix pull request on the repo of this library.    Any tips to also remove the warning ?    Thanks a lot       ![image](https://user-images.githubusercontent.com/25119847/89186329-ebbe8400-d59b-11ea-87f4-47d2f215be72.png)",
        "human_words_regrex": "Cf the screenshot bellow. I have no `componentWillReceiveProps` in my code, so the warning comes from a library. I don't know how to quickly identify which library causes this warning and make a fix pull request on the repo of this library. Any tips to also remove the warning ? Thanks a lot !",
        "human_words_stopwords_removal_lemmatization": "cf screenshot bellow . ` componentwillreceiveprops ` code , warning come library . n't know quickly identify library cause warning make fix pull request repo library . tip also remove warning ? thanks lot !",
        "title_stopwords_removal_lemmatization": "bug : ca n't inspect well react warning ` componentwillreceiveprops renamed `"
    },
    {
        "issue_id": 659536441,
        "title": "Showing an Array in string Format in UI",
        "label": [
            "Type: Question",
            "Status: Unconfirmed"
        ],
        "date": "2020-07-17T19:00:22Z",
        "status": "closed",
        "description": "In JS, Array rendered with ',' in between each element\r\n e.g. ['Piyush', 'Sinha'] \r\n// Piyush,Sinha//\r\nbut in react Array rendered without ',' in between each element\r\n e.g. [ 'Piyush', 'Sinha'] \r\n//PiyushSinha//",
        "remove_template_description": "In JS, Array rendered with ',' in between each element   e.g. ['Piyush', 'Sinha']   // Piyush,Sinha//  but in react Array rendered without ',' in between each element   e.g. [ 'Piyush', 'Sinha']   //PiyushSinha//",
        "human_words": "In JS, Array rendered with ',' in between each element   e.g. ['Piyush', 'Sinha']   // Piyush,Sinha//  but in react Array rendered without ',' in between each element   e.g. [ 'Piyush', 'Sinha']   //PiyushSinha//",
        "human_words_regrex": "In JS, Array rendered with ',' in between each element e.g. ['Piyush', 'Sinha'] // Piyush,Sinha// but in react Array rendered without ',' in between each element e.g. [ 'Piyush', 'Sinha'] //PiyushSinha//",
        "human_words_stopwords_removal_lemmatization": "j , array rendered ' , ' element e.g . [ 'piyush ' , 'sinha ' ] // piyush , sinha// react array rendered without ' , ' element e.g . [ 'piyush ' , 'sinha ' ] //piyushsinha//",
        "title_stopwords_removal_lemmatization": "showing array string format ui"
    },
    {
        "issue_id": 654166435,
        "title": "Which approach is better for getting data from state ?",
        "label": [
            "Type: Question"
        ],
        "date": "2020-07-09T15:48:17Z",
        "status": "closed",
        "description": "\r\nLet's say our state is as follows:\r\n```\r\nstate: {\r\n    user: {\r\n        name: 'Dave',\r\n        email: 'Dave@gmail.com'\r\n    }\r\n}\r\n```\r\n\r\nso while getting the user property from the state which one of the following should I do?\r\n\r\n**Case 1:**\r\n\r\n```\r\nconst user = this.state.user\r\n\r\nthis way following is valid\r\nuser == this.state.user //true\r\nuser.name = 'Manny';\r\nconsole.log(this.state.user.name) //Manny\r\n```\r\nthough it won't cause re-render until we use setState() but basically the value of the state variable has changed.\r\n\r\n**Case 2:**\r\n\r\n```\r\nconst user = { ...this.state.user};\r\n\r\nthis way\r\nuser == this.state.user //false\r\nuser.name = 'Manny';\r\nconsole.log(this.state.user.name) //Dave\r\n```\r\n\r\nWhich approach is better or are there any side effects of any of them?",
        "remove_template_description": "Let's say our state is as follows:  ```  state: {      user: {          name: 'Dave',          email: 'Dave@gmail.com'      }  }  ```    so while getting the user property from the state which one of the following should I do?    **Case 1:**    ```  const user = this.state.user    this way following is valid  user == this.state.user //true  user.name = 'Manny';  console.log(this.state.user.name) //Manny  ```  though it won't cause re-render until we use setState() but basically the value of the state variable has changed.    **Case 2:**    ```  const user = { ...this.state.user};    this way  user == this.state.user //false  user.name = 'Manny';  console.log(this.state.user.name) //Dave  ```    Which approach is better or are there any side effects of any of them?",
        "human_words": "Let's say our state is as follows:      so while getting the user property from the state which one of the following should I do?    **Case 1:**      though it won't cause re-render until we use setState() but basically the value of the state variable has changed.    **Case 2:**        Which approach is better or are there any side effects of any of them?",
        "human_words_regrex": "Let's say our state is as follows: so while getting the user property from the state which one of the following should I do? **Case 1:** though it won't cause re-render until we use setState() but basically the value of the state variable has changed. **Case 2:** Which approach is better or are there any side effects of any of them?",
        "human_words_stopwords_removal_lemmatization": "let 's say state follows : getting user property state one following ? * * case 1 : * * though wo n't cause re-render use setstate ( ) basically value state variable changed . * * case 2 : * * approach better side effect ?",
        "title_stopwords_removal_lemmatization": "approach better getting data state ?"
    },
    {
        "issue_id": 653076941,
        "title": "[Micro React Apps] - Need to render another React App into existing React App",
        "label": [
            "Type: Question"
        ],
        "date": "2020-07-08T07:55:22Z",
        "status": "closed",
        "description": "Hi,\r\n\r\nI need to render another React App (i.e. App2) into existing React App (i.e. App1) on run time. I have hosted my \"App2\" on a remote server. I read \"asset-manifest.json\" file from it and on runtime I append those .js chunks in our head tag, this overall code I call from my \"App1\" to load my \"App2\" on runtime. \r\n\r\nBut I am not able to trigger \"App2\". How should I triggered App2 component inside App1 component?\r\n\r\nMy application have lot of other internal dependencies, such redux, redux-thunk etc.\r\n\r\n ",
        "remove_template_description": "Hi,    I need to render another React App (i.e. App2) into existing React App (i.e. App1) on run time. I have hosted my \"App2\" on a remote server. I read \"asset-manifest.json\" file from it and on runtime I append those .js chunks in our head tag, this overall code I call from my \"App1\" to load my \"App2\" on runtime.     But I am not able to trigger \"App2\". How should I triggered App2 component inside App1 component?    My application have lot of other internal dependencies, such redux, redux-thunk etc.",
        "human_words": "Hi,    I need to render another React App (i.e. App2) into existing React App (i.e. App1) on run time. I have hosted my \"App2\" on a remote server. I read \"asset-manifest.json\" file from it and on runtime I append those .js chunks in our head tag, this overall code I call from my \"App1\" to load my \"App2\" on runtime.     But I am not able to trigger \"App2\". How should I triggered App2 component inside App1 component?    My application have lot of other internal dependencies, such redux, redux-thunk etc.",
        "human_words_regrex": "Hi, I need to render another React App (i.e. App2) into existing React App (i.e. App1) on run time. I have hosted my \"App2\" on a remote server. I read \"asset-manifest.json\" file from it and on runtime I append those .js chunks in our head tag, this overall code I call from my \"App1\" to load my \"App2\" on runtime. But I am not able to trigger \"App2\". How should I triggered App2 component inside App1 component? My application have lot of other internal dependencies, such redux, redux-thunk etc.",
        "human_words_stopwords_removal_lemmatization": "hi , need render another react app ( i.e . app2 ) existing react app ( i.e . app1 ) run time . hosted `` app2 '' remote server . read `` asset-manifest.json '' file runtime append .js chunk head tag , overall code call `` app1 '' load `` app2 '' runtime . able trigger `` app2 '' . triggered app2 component inside app1 component ? application lot internal dependency , redux , redux-thunk etc .",
        "title_stopwords_removal_lemmatization": "[ micro react apps ] - need render another react app existing react app"
    },
    {
        "issue_id": 652096958,
        "title": "When waiting for an async action to end, and in the meantime the state changes, there is no way to know about the change",
        "label": [
            "Type: Question"
        ],
        "date": "2020-07-07T08:00:30Z",
        "status": "closed",
        "description": "<!--\r\nIn a functional component, when waiting for an async action to complete and meanwhile changing any state - at the end of the async action the component stays in the previous lifecycle, thus doesn't know about the state change.\r\n\r\n-->\r\n\r\nReact version:\r\n16.13\r\n## Steps To Reproduce\r\n\r\n1. create a functional component with 2 elements\r\n2. the component will have an Integer - counter prop and is initialised with 0 value.\r\n3. the first element has an \"onClick\" action, which increases the counter. \r\n4. the second element has an \"onClick\" action, which is asynced and waits for a timeout promise and only then increases the counter.\r\n5. press the second element, and while waiting for the async action to complete press the firs element as well.\r\n\r\n```\r\nimport React, { useState } from \"react\";\r\n\r\nexport default function App() {\r\n  const [counter, setCounter] = useState(0);\r\n  return (\r\n    <div className=\"App\">\r\n      <div>\r\n        <button\r\n          onClick={async () => {\r\n            await new Promise(resolve => {\r\n              setTimeout(() => {\r\n                resolve();\r\n              }, 4000);\r\n            });\r\n             setCounter(counter + 1);\r\n          }}\r\n        >\r\n          Async\r\n        </button>\r\n        <label>{counter}</label>\r\n      </div>\r\n      <div>\r\n        <button\r\n          onClick={() => {\r\n            //increases the counter state\r\n            setCounter(counter + 1);\r\n          }}\r\n        >\r\n          Add 1\r\n        </button>\r\n        <label>{counter}</label>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n```\r\n\r\nLink to code example:\r\nhttps://codesandbox.io/s/red-bush-7w8yk?file=/src/App.js\r\n\r\n-- A different version of the same issue\r\nhttps://stackoverflow.com/questions/62424530/how-to-get-the-changed-state-after-an-async-action-using-react-functional-hooks\r\n\r\n## The current behavior\r\ncurrent behaviour: the counter value at the end of the async action will equal to 1\r\n\r\n## The expected behavior\r\nexpected behaviour: the counter value at the end of the async action will equal to 2",
        "remove_template_description": "<!--  In a functional component, when waiting for an async action to complete and meanwhile changing any state - at the end of the async action the component stays in the previous lifecycle, thus doesn't know about the state change.    -->    React version:  16.13      1. create a functional component with 2 elements  2. the component will have an Integer - counter prop and is initialised with 0 value.  3. the first element has an \"onClick\" action, which increases the counter.   4. the second element has an \"onClick\" action, which is asynced and waits for a timeout promise and only then increases the counter.  5. press the second element, and while waiting for the async action to complete press the firs element as well.    ```  import React, { useState } from \"react\";    export default function App() {    const [counter, setCounter] = useState(0);    return (      <div className=\"App\">        <div>          <button            onClick={async () => {              await new Promise(resolve => {                setTimeout(() => {                  resolve();                }, 4000);              });               setCounter(counter + 1);            }}          >            Async          </button>          <label>{counter}</label>        </div>        <div>          <button            onClick={() => {              //increases the counter state              setCounter(counter + 1);            }}          >            Add 1          </button>          <label>{counter}</label>        </div>      </div>    );  }    ```    Link to code example:  https://codesandbox.io/s/red-bush-7w8yk?file=/src/App.js    -- A different version of the same issue  https://stackoverflow.com/questions/62424530/how-to-get-the-changed-state-after-an-async-action-using-react-functional-hooks      current behaviour: the counter value at the end of the async action will equal to 1      expected behaviour: the counter value at the end of the async action will equal to 2",
        "human_words": "<!--  In a functional component, when waiting for an async action to complete and meanwhile changing any state - at the end of the async action the component stays in the previous lifecycle, thus doesn't know about the state change.    -->    React version:  16.13      1. create a functional component with 2 elements  2. the component will have an Integer - counter prop and is initialised with 0 value.  3. the first element has an \"onClick\" action, which increases the counter.   4. the second element has an \"onClick\" action, which is asynced and waits for a timeout promise and only then increases the counter.  5. press the second element, and while waiting for the async action to complete press the firs element as well.        Link to code example:  https://codesandbox.io/s/red-bush-7w8yk?file=/src/App.js    -- A different version of the same issue  https://stackoverflow.com/questions/62424530/how-to-get-the-changed-state-after-an-async-action-using-react-functional-hooks      current behaviour: the counter value at the end of the async action will equal to 1      expected behaviour: the counter value at the end of the async action will equal to 2",
        "human_words_regrex": " React version: 16.13 1. create a functional component with 2 elements 2. the component will have an Integer - counter prop and is initialised with 0 value. 3. the first element has an \"onClick\" action, which increases the counter. 4. the second element has an \"onClick\" action, which is asynced and waits for a timeout promise and only then increases the counter. 5. press the second element, and while waiting for the async action to complete press the firs element as well. Link to code example:  -- A different version of the same issue  current behaviour: the counter value at the end of the async action will equal to 1 expected behaviour: the counter value at the end of the async action will equal to 2",
        "human_words_stopwords_removal_lemmatization": "react version : 16.13 1. create functional component 2 element 2. component integer - counter prop initialised 0 value . 3. first element `` onclick '' action , increase counter . 4. second element `` onclick '' action , asynced wait timeout promise increase counter . 5. press second element , waiting async action complete press fir element well . link code example : -- different version issue current behaviour : counter value end async action equal 1 expected behaviour : counter value end async action equal 2",
        "title_stopwords_removal_lemmatization": "waiting async action end , meantime state change , way know change"
    },
    {
        "issue_id": 642365322,
        "title": "devtool Api request : add api for customize renderer inspect element",
        "label": [
            "Type: Question",
            "Component: Developer Tools"
        ],
        "date": "2020-06-20T12:13:21Z",
        "status": "closed",
        "description": "I'm wirte a custimse renderer for render element in canvas(like react-pixi), I want intergrate with react dev tool;\r\nI can hightlight element when click element in react dev tool compoent panel use code:\r\n```ts\r\n__REACT_DEVTOOLS_GLOBAL_HOOK__?.reactDevtoolsAgent?._bridge.addListener('highlightNativeElement', (eleInfo: EleInfo) => {\r\n        const { id, rendererID } = eleInfo;\r\n        const renderer = __REACT_DEVTOOLS_GLOBAL_HOOK__?.rendererInterfaces.get(\r\n            rendererID,\r\n        );\r\n\r\n        const node_list =\r\n            (renderer.findNativeNodesForFiberID(id) as Sprite[]) || [];\r\n\r\n        //... customise render engin hightlight code\r\n    });\r\n```\r\n\r\nI want hightlight ele when mouse move in canvas, I can use `__REACT_DEVTOOLS_GLOBAL_HOOK__.rendererInterfaces.get(1).getFiberIDForNative(node)` find node fiber id, I can use `_bridge` send hightlint msg to backend just like the code\r\nhttps://github.com/facebook/react/blob/6ba25b96df5d4179bf8aba3c3fe1ace3dce28234/packages/react-devtools-shared/src/devtools/views/hooks.js#L311\r\nbut I can't get store object and get enugh infomation send to backend.\r\nmaybe dev tool can expose proper api for this function",
        "remove_template_description": "I'm wirte a custimse renderer for render element in canvas(like react-pixi), I want intergrate with react dev tool;  I can hightlight element when click element in react dev tool compoent panel use code:  ```ts  __REACT_DEVTOOLS_GLOBAL_HOOK__?.reactDevtoolsAgent?._bridge.addListener('highlightNativeElement', (eleInfo: EleInfo) => {          const { id, rendererID } = eleInfo;          const renderer = __REACT_DEVTOOLS_GLOBAL_HOOK__?.rendererInterfaces.get(              rendererID,          );            const node_list =              (renderer.findNativeNodesForFiberID(id) as Sprite[]) || [];            //... customise render engin hightlight code      });  ```    I want hightlight ele when mouse move in canvas, I can use `__REACT_DEVTOOLS_GLOBAL_HOOK__.rendererInterfaces.get(1).getFiberIDForNative(node)` find node fiber id, I can use `_bridge` send hightlint msg to backend just like the code  https://github.com/facebook/react/blob/6ba25b96df5d4179bf8aba3c3fe1ace3dce28234/packages/react-devtools-shared/src/devtools/views/hooks.js#L311  but I can't get store object and get enugh infomation send to backend.  maybe dev tool can expose proper api for this function",
        "human_words": "I'm wirte a custimse renderer for render element in canvas(like react-pixi), I want intergrate with react dev tool;  I can hightlight element when click element in react dev tool compoent panel use code:      I want hightlight ele when mouse move in canvas, I can use `__REACT_DEVTOOLS_GLOBAL_HOOK__.rendererInterfaces.get(1).getFiberIDForNative(node)` find node fiber id, I can use `_bridge` send hightlint msg to backend just like the code  https://github.com/facebook/react/blob/6ba25b96df5d4179bf8aba3c3fe1ace3dce28234/packages/react-devtools-shared/src/devtools/views/hooks.js#L311  but I can't get store object and get enugh infomation send to backend.  maybe dev tool can expose proper api for this function",
        "human_words_regrex": "I'm wirte a custimse renderer for render element in canvas(like react-pixi), I want intergrate with react dev tool; I can hightlight element when click element in react dev tool compoent panel use code: I want hightlight ele when mouse move in canvas, I can use `__REACT_DEVTOOLS_GLOBAL_HOOK__.rendererInterfaces.get(1).getFiberIDForNative(node)` find node fiber id, I can use `_bridge` send hightlint msg to backend just like the code  but I can't get store object and get enugh infomation send to backend. maybe dev tool can expose proper api for this function",
        "human_words_stopwords_removal_lemmatization": "'m wirte custimse renderer render element canvas ( like react-pixi ) , want intergrate react dev tool ; hightlight element click element react dev tool compoent panel use code : want hightlight ele mouse move canvas , use ` __react_devtools_global_hook__.rendererinterfaces.get ( 1 ) .getfiberidfornative ( node ) ` find node fiber id , use ` _bridge ` send hightlint msg backend like code ca n't get store object get enugh infomation send backend . maybe dev tool expose proper api function",
        "title_stopwords_removal_lemmatization": "devtool api request : add api customize renderer inspect element"
    },
    {
        "issue_id": 629048138,
        "title": "Bug: React Function getting called for no Reason",
        "label": [
            "Type: Question",
            "Status: Unconfirmed"
        ],
        "date": "2020-06-02T09:26:57Z",
        "status": "closed",
        "description": "<!--\r\n The problem is that a random function is getting called up, for no reason, I tried to trace it and looked like there is a problem with react-development. react-development is calling a long ago used function\r\n-->\r\n\r\nReact version: ^16.13.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. Click on Task 1\r\n2. Check the dsdfdsf tab,and check it\r\n3. Click on Create a new Task \r\n4. create a new task\r\n\r\n\r\n\r\nLink to code example:\r\n\r\n<!--\r\n code --> https://github.com/aman-singal/Recact_todoList\r\n-->\r\n\r\n## The current behavior\r\nWhen adding a new task, The last used function of a different component gets called for no reason. The milestone of the list gets cleared when adding a new Task\r\n\r\n\r\n##  The expected behavior\r\nThe Function shouldn't be called, the already existing List shouldn't be cleared\r\n",
        "remove_template_description": "<!--   The problem is that a random function is getting called up, for no reason, I tried to trace it and looked like there is a problem with react-development. react-development is calling a long ago used function  -->    React version: ^16.13.1        1. Click on Task 1  2. Check the dsdfdsf tab,and check it  3. Click on Create a new Task   4. create a new task        Link to code example:    <!--   code --> https://github.com/aman-singal/Recact_todoList  -->      When adding a new task, The last used function of a different component gets called for no reason. The milestone of the list gets cleared when adding a new Task      ##  The expected behavior  The Function shouldn't be called, the already existing List shouldn't be cleared",
        "human_words": "<!--   The problem is that a random function is getting called up, for no reason, I tried to trace it and looked like there is a problem with react-development. react-development is calling a long ago used function  -->    React version: ^16.13.1        1. Click on Task 1  2. Check the dsdfdsf tab,and check it  3. Click on Create a new Task   4. create a new task        Link to code example:    <!--   code --> https://github.com/aman-singal/Recact_todoList  -->      When adding a new task, The last used function of a different component gets called for no reason. The milestone of the list gets cleared when adding a new Task      ##  The expected behavior  The Function shouldn't be called, the already existing List shouldn't be cleared",
        "human_words_regrex": " React version: ^16.13.1 1. Click on Task 1 2. Check the dsdfdsf tab,and check it 3. Click on Create a new Task 4. create a new task Link to code example:   --> When adding a new task, The last used function of a different component gets called for no reason. The milestone of the list gets cleared when adding a new Task ## The expected behavior The Function shouldn't be called, the already existing List shouldn't be cleared",
        "human_words_stopwords_removal_lemmatization": "react version : ^16.13.1 1. click task 1 2. check dsdfdsf tab , check 3. click create new task 4. create new task link code example : -- > adding new task , last used function different component get called reason . milestone list get cleared adding new task # # expected behavior function n't called , already existing list n't cleared",
        "title_stopwords_removal_lemmatization": "bug : react function getting called reason"
    },
    {
        "issue_id": 626758070,
        "title": "Selenium integration",
        "label": [
            "Type: Question"
        ],
        "date": "2020-05-28T19:31:30Z",
        "status": "closed",
        "description": "Hello. I'm not sure if this is an issue, but I would like to know a little more about how react developer tools work. \r\n\r\nI want to get reacts props with selenium in order to make easier the debugging of a website. \r\n\r\nI'd be thankful with any kind of help you can give me.\r\n\r\nBest regards",
        "remove_template_description": "Hello. I'm not sure if this is an issue, but I would like to know a little more about how react developer tools work.     I want to get reacts props with selenium in order to make easier the debugging of a website.     I'd be thankful with any kind of help you can give me.    Best regards",
        "human_words": "Hello. I'm not sure if this is an issue, but I would like to know a little more about how react developer tools work.     I want to get reacts props with selenium in order to make easier the debugging of a website.     I'd be thankful with any kind of help you can give me.    Best regards",
        "human_words_regrex": "Hello. I'm not sure if this is an issue, but I would like to know a little more about how react developer tools work. I want to get reacts props with selenium in order to make easier the debugging of a website. I'd be thankful with any kind of help you can give me. Best regards",
        "human_words_stopwords_removal_lemmatization": "hello . 'm sure issue , would like know little react developer tool work . want get reacts prop selenium order make easier debugging website . 'd thankful kind help give . best regard",
        "title_stopwords_removal_lemmatization": "selenium integration"
    },
    {
        "issue_id": 625378442,
        "title": "Click event and setTimeout update state, different times of rendering",
        "label": [
            "Type: Question"
        ],
        "date": "2020-05-27T05:01:13Z",
        "status": "closed",
        "description": "When I try to batch update all the states with click events, the final render is once. When the state is updated in batch with setTimeout, the result is multiple times. May I ask what is the useStateHook running mechanism inside react? Is the same asynchronous function, but The Times of rendering is not the same?\r\n\r\nReact version: 16.12.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Bind a single click event to the DOM and handle multiple state updates in batches\r\n2. After the component is mounted, create a setTimeout timer, which is also a batch update of state\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: [https://codesandbox.io/s/charming-fermat-syi5g?file=/src/App.js](url)\r\n\r\n## The current behavior\r\nClick event batch update and timer batch update rendering times are different\r\n\r\n\r\n## The expected behavior\r\nAlso triggers an update\r\n\r\nWhat is the operation mechanism of useState hook? Why not the same number of asynchronous renderings?\r\n",
        "remove_template_description": "When I try to batch update all the states with click events, the final render is once. When the state is updated in batch with setTimeout, the result is multiple times. May I ask what is the useStateHook running mechanism inside react? Is the same asynchronous function, but The Times of rendering is not the same?    React version: 16.12.0        1. Bind a single click event to the DOM and handle multiple state updates in batches  2. After the component is mounted, create a setTimeout timer, which is also a batch update of state    <!--    Your bug will get fixed much faster if we can run your code and it doesn't    have dependencies other than React. Issues without reproduction steps or    code examples may be immediately closed as not actionable.  -->    Link to code example: [https://codesandbox.io/s/charming-fermat-syi5g?file=/src/App.js](url)      Click event batch update and timer batch update rendering times are different        Also triggers an update    What is the operation mechanism of useState hook? Why not the same number of asynchronous renderings?",
        "human_words": "When I try to batch update all the states with click events, the final render is once. When the state is updated in batch with setTimeout, the result is multiple times. May I ask what is the useStateHook running mechanism inside react? Is the same asynchronous function, but The Times of rendering is not the same?    React version: 16.12.0        1. Bind a single click event to the DOM and handle multiple state updates in batches  2. After the component is mounted, create a setTimeout timer, which is also a batch update of state    <!--    Your bug will get fixed much faster if we can run your code and it doesn't    have dependencies other than React. Issues without reproduction steps or    code examples may be immediately closed as not actionable.  -->    Link to code example: [https://codesandbox.io/s/charming-fermat-syi5g?file=/src/App.js](url)      Click event batch update and timer batch update rendering times are different        Also triggers an update    What is the operation mechanism of useState hook? Why not the same number of asynchronous renderings?",
        "human_words_regrex": "When I try to batch update all the states with click events, the final render is once. When the state is updated in batch with setTimeout, the result is multiple times. May I ask what is the useStateHook running mechanism inside react? Is the same asynchronous function, but The Times of rendering is not the same? React version: 16.12.0 1. Bind a single click event to the DOM and handle multiple state updates in batches 2. After the component is mounted, create a setTimeout timer, which is also a batch update of state  Link to code example:  Click event batch update and timer batch update rendering times are different Also triggers an update What is the operation mechanism of useState hook? Why not the same number of asynchronous renderings?",
        "human_words_stopwords_removal_lemmatization": "try batch update state click event , final render . state updated batch settimeout , result multiple time . may ask usestatehook running mechanism inside react ? asynchronous function , time rendering ? react version : 16.12.0 1. bind single click event dom handle multiple state update batch 2. component mounted , create settimeout timer , also batch update state link code example : click event batch update timer batch update rendering time different also trigger update operation mechanism usestate hook ? number asynchronous rendering ?",
        "title_stopwords_removal_lemmatization": "click event settimeout update state , different time rendering"
    },
    {
        "issue_id": 606036707,
        "title": "React Hooks will render multiple times after await",
        "label": [
            "Type: Question",
            "Status: Unconfirmed"
        ],
        "date": "2020-04-24T04:45:53Z",
        "status": "closed",
        "description": "```\r\nconst [ html, setHTML ] = useState('');\r\nconst [ script, setScript ] = useState('');\r\n\r\nconst update = (script, html) => {\r\n  setScript(script);\r\n  setHTML(html);\r\n};\r\n\r\nupdate('a', 'b');\r\n```\r\n\r\nThe above code works fine, React Hooks will render ONCE and combine setScript & setHTML;\r\n\r\n\r\n```\r\nconst [ html, setHTML ] = useState('');\r\nconst [ script, setScript ] = useState('');\r\n\r\nconst update = async (script, html) => {\r\n  await new Promise(resolve => setTimeout(resolve, 10));\r\n  setScript(script);\r\n  setHTML(html);\r\n};\r\n\r\nupdate('a', 'b');\r\n```\r\n\r\nThe above code doesn't work anymore, React Hooks will render TWICE and it doesn't combine setScript & setHTML.\r\n\r\nI can change to the code to:\r\n\r\n```\r\nconst [ state, setState ] = useState({\r\n  html: '',\r\n  script: ''\r\n});\r\n\r\nconst update = async (script, html) => {\r\n  await new Promise(resolve => setTimeout(resolve, 10));\r\n  setState({\r\n    script,\r\n    html\r\n  });\r\n};\r\n\r\nupdate('a', 'b');\r\n```\r\n\r\nThe above code only renders ONCE but it has a new bug: the cursor in the textArea (where script and html go) will move to the end of the textArea instead of staying at where it is.",
        "remove_template_description": "```  const [ html, setHTML ] = useState('');  const [ script, setScript ] = useState('');    const update = (script, html) => {    setScript(script);    setHTML(html);  };    update('a', 'b');  ```    The above code works fine, React Hooks will render ONCE and combine setScript & setHTML;      ```  const [ html, setHTML ] = useState('');  const [ script, setScript ] = useState('');    const update = async (script, html) => {    await new Promise(resolve => setTimeout(resolve, 10));    setScript(script);    setHTML(html);  };    update('a', 'b');  ```    The above code doesn't work anymore, React Hooks will render TWICE and it doesn't combine setScript & setHTML.    I can change to the code to:    ```  const [ state, setState ] = useState({    html: '',    script: ''  });    const update = async (script, html) => {    await new Promise(resolve => setTimeout(resolve, 10));    setState({      script,      html    });  };    update('a', 'b');  ```    The above code only renders ONCE but it has a new bug: the cursor in the textArea (where script and html go) will move to the end of the textArea instead of staying at where it is.",
        "human_words": "    The above code works fine, React Hooks will render ONCE and combine setScript & setHTML;          The above code doesn't work anymore, React Hooks will render TWICE and it doesn't combine setScript & setHTML.    I can change to the code to:        The above code only renders ONCE but it has a new bug: the cursor in the textArea (where script and html go) will move to the end of the textArea instead of staying at where it is.",
        "human_words_regrex": " The above code works fine, React Hooks will render ONCE and combine setScript & setHTML; The above code doesn't work anymore, React Hooks will render TWICE and it doesn't combine setScript & setHTML. I can change to the code to: The above code only renders ONCE but it has a new bug: the cursor in the textArea (where script and html go) will move to the end of the textArea instead of staying at where it is.",
        "human_words_stopwords_removal_lemmatization": "code work fine , react hook render combine setscript & sethtml ; code n't work anymore , react hook render twice n't combine setscript & sethtml . change code : code render new bug : cursor textarea ( script html go ) move end textarea instead staying .",
        "title_stopwords_removal_lemmatization": "react hook render multiple time await"
    },
    {
        "issue_id": 604311470,
        "title": "Bug: function component cannot have ref property",
        "label": [
            "Type: Question"
        ],
        "date": "2020-04-21T21:57:06Z",
        "status": "closed",
        "description": "When passing ref property to a function component, validateFunctionComponentInDev shows a warning about it being a bad thing.\r\n\r\nReact version: HEAD\r\n\r\nWhile this might have been true for stateless function components (as many places refer to func components), probably since the introduction of hooks, they can have state, and I had the impression that one could rewrite any class component into a function based one.\r\n\r\n```\r\nfunction TestComponent({ref}) {\r\n  const [state] = React.useState({\r\n    stateField1: 42,\r\n  });\r\n  assignRef(ref, state);\r\n  return (\r\n    <div>\r\n      { state.stateField1 }\r\n    </div>\r\n  );\r\n}\r\n\r\nThis code wont work, caller would never be able to get The Answer. Caller is sad.\r\n```\r\n\r\n## The current behavior\r\nReact giving a warning and making the ref prop defunct.\r\n\r\n## The expected behavior\r\nRemove limitation and let ref on my function component live happily ever after.",
        "remove_template_description": "When passing ref property to a function component, validateFunctionComponentInDev shows a warning about it being a bad thing.    React version: HEAD    While this might have been true for stateless function components (as many places refer to func components), probably since the introduction of hooks, they can have state, and I had the impression that one could rewrite any class component into a function based one.    ```  function TestComponent({ref}) {    const [state] = React.useState({      stateField1: 42,    });    assignRef(ref, state);    return (      <div>        { state.stateField1 }      </div>    );  }    This code wont work, caller would never be able to get The Answer. Caller is sad.  ```      React giving a warning and making the ref prop defunct.      Remove limitation and let ref on my function component live happily ever after.",
        "human_words": "When passing ref property to a function component, validateFunctionComponentInDev shows a warning about it being a bad thing.    React version: HEAD    While this might have been true for stateless function components (as many places refer to func components), probably since the introduction of hooks, they can have state, and I had the impression that one could rewrite any class component into a function based one.          React giving a warning and making the ref prop defunct.      Remove limitation and let ref on my function component live happily ever after.",
        "human_words_regrex": "When passing ref property to a function component, validateFunctionComponentInDev shows a warning about it being a bad thing. React version: HEAD While this might have been true for stateless function components (as many places refer to func components), probably since the introduction of hooks, they can have state, and I had the impression that one could rewrite any class component into a function based one. React giving a warning and making the ref prop defunct. Remove limitation and let ref on my function component live happily ever after.",
        "human_words_stopwords_removal_lemmatization": "passing ref property function component , validatefunctioncomponentindev show warning bad thing . react version : head might true stateless function component ( many place refer func component ) , probably since introduction hook , state , impression one could rewrite class component function based one . react giving warning making ref prop defunct . remove limitation let ref function component live happily ever .",
        "title_stopwords_removal_lemmatization": "bug : function component ref property"
    },
    {
        "issue_id": 593401484,
        "title": "Extention React non d\u00e9finie sur chrome",
        "label": [
            "Type: Question"
        ],
        "date": "2020-04-03T13:56:48Z",
        "status": "closed",
        "description": "\r\nreact Developer Tools 4.6.0\r\nGoogle chrome Version 80.0.3987.149\r\nL'outil de d\u00e9veloppement react est inactif sur la console google chrome",
        "remove_template_description": "react Developer Tools 4.6.0  Google chrome Version 80.0.3987.149  L'outil de d\u00e9veloppement react est inactif sur la console google chrome",
        "human_words": "react Developer Tools 4.6.0  Google chrome Version 80.0.3987.149  L'outil de d\u00e9veloppement react est inactif sur la console google chrome",
        "human_words_regrex": "react Developer Tools 4.6.0 Google chrome Version 80.0.3987.149 L'outil de d\u00e9veloppement react est inactif sur la console google chrome",
        "human_words_stopwords_removal_lemmatization": "react developer tool 4.6.0 google chrome version 80.0.3987.149 l'outil de d\u00e9veloppement react est inactif sur la console google chrome",
        "title_stopwords_removal_lemmatization": "extention react non d\u00e9finie sur chrome"
    },
    {
        "issue_id": 592424745,
        "title": "{[styles.box, {           transform: [{ scale:this.state.scaleNum}]      }]}>\u5f53\u8fd9\u6837\u7ed9scale\u8d4b\u503c\u65f6\uff0c\u521d\u59cb\u5316\u751f\u6548\uff0c\u4f46\u662f\u5728\u4e00\u4e2a\u4e8b\u4ef6\u4e2d\u6539\u53d8scaleNum\u7684\u503c\uff0cscaleNum\u7684\u503c\u6539\u53d8\u4e86\uff0c\u9875\u9762\u8c8c\u4f3c\u6ca1\u6709\u91cd\u65b0\u6e32\u67d3\uff1f",
        "label": [
            "Type: Question",
            "Status: Unconfirmed"
        ],
        "date": "2020-04-02T07:42:30Z",
        "status": "closed",
        "description": " <View style={[styles.box, {\r\n         transform: [{ scale:this.state.scaleNum}]}>\u5f53\u8fd9\u6837\u7ed9scale\u8d4b\u503c\u65f6\uff0c\u521d\u59cb\u5316\u751f\u6548\uff0c\u4f46\u662f\u5728\u4e00\u4e2a\u4e8b\u4ef6\u4e2d\u6539\u53d8scaleNum\u7684\u503c\uff0cscaleNum\u7684\u503c\u6539\u53d8\u4e86\uff0c\u9875\u9762\u8c8c\u4f3c\u6ca1\u6709\u91cd\u65b0\u6e32\u67d3\uff1f",
        "remove_template_description": "<View style={[styles.box, {           transform: [{ scale:this.state.scaleNum}]}>\u5f53\u8fd9\u6837\u7ed9scale\u8d4b\u503c\u65f6\uff0c\u521d\u59cb\u5316\u751f\u6548\uff0c\u4f46\u662f\u5728\u4e00\u4e2a\u4e8b\u4ef6\u4e2d\u6539\u53d8scaleNum\u7684\u503c\uff0cscaleNum\u7684\u503c\u6539\u53d8\u4e86\uff0c\u9875\u9762\u8c8c\u4f3c\u6ca1\u6709\u91cd\u65b0\u6e32\u67d3\uff1f",
        "human_words": "<View style={[styles.box, {           transform: [{ scale:this.state.scaleNum}]}>\u5f53\u8fd9\u6837\u7ed9scale\u8d4b\u503c\u65f6\uff0c\u521d\u59cb\u5316\u751f\u6548\uff0c\u4f46\u662f\u5728\u4e00\u4e2a\u4e8b\u4ef6\u4e2d\u6539\u53d8scaleNum\u7684\u503c\uff0cscaleNum\u7684\u503c\u6539\u53d8\u4e86\uff0c\u9875\u9762\u8c8c\u4f3c\u6ca1\u6709\u91cd\u65b0\u6e32\u67d3\uff1f",
        "human_words_regrex": "\u5f53\u8fd9\u6837\u7ed9scale\u8d4b\u503c\u65f6\uff0c\u521d\u59cb\u5316\u751f\u6548\uff0c\u4f46\u662f\u5728\u4e00\u4e2a\u4e8b\u4ef6\u4e2d\u6539\u53d8scaleNum\u7684\u503c\uff0cscaleNum\u7684\u503c\u6539\u53d8\u4e86\uff0c\u9875\u9762\u8c8c\u4f3c\u6ca1\u6709\u91cd\u65b0\u6e32\u67d3\uff1f",
        "human_words_stopwords_removal_lemmatization": "\u5f53\u8fd9\u6837\u7ed9scale\u8d4b\u503c\u65f6\uff0c\u521d\u59cb\u5316\u751f\u6548\uff0c\u4f46\u662f\u5728\u4e00\u4e2a\u4e8b\u4ef6\u4e2d\u6539\u53d8scalenum\u7684\u503c\uff0cscalenum\u7684\u503c\u6539\u53d8\u4e86\uff0c\u9875\u9762\u8c8c\u4f3c\u6ca1\u6709\u91cd\u65b0\u6e32\u67d3\uff1f",
        "title_stopwords_removal_lemmatization": "{ [ styles.box , { transform : [ { scale : this.state.scalenum } ] } ] } > \u5f53\u8fd9\u6837\u7ed9scale\u8d4b\u503c\u65f6\uff0c\u521d\u59cb\u5316\u751f\u6548\uff0c\u4f46\u662f\u5728\u4e00\u4e2a\u4e8b\u4ef6\u4e2d\u6539\u53d8scalenum\u7684\u503c\uff0cscalenum\u7684\u503c\u6539\u53d8\u4e86\uff0c\u9875\u9762\u8c8c\u4f3c\u6ca1\u6709\u91cd\u65b0\u6e32\u67d3\uff1f"
    },
    {
        "issue_id": 566995061,
        "title": "Question: Why not useCallback always return static value without deps?",
        "label": [
            "Resolution: Invalid",
            "Type: Question"
        ],
        "date": "2020-02-18T16:04:52Z",
        "status": "closed",
        "description": "```tsx\r\nfunction useRefCallback<T extends (...args: any) => void>(callback: T) {\r\n  const ref = useRef<T>(callback);\r\n  ref.current = callback;\r\n  return useCallback(function(this: any, ...args: Parameters<T>) {\r\n    return ref.current.apply(this, args);\r\n  } as T, []);\r\n}\r\n```\r\nI think useRefCallback is safe to replace useCallback in any code, and it's better than useCallback because it will never cause recalculation.",
        "remove_template_description": "```tsx  function useRefCallback<T extends (...args: any) => void>(callback: T) {    const ref = useRef<T>(callback);    ref.current = callback;    return useCallback(function(this: any, ...args: Parameters<T>) {      return ref.current.apply(this, args);    } as T, []);  }  ```  I think useRefCallback is safe to replace useCallback in any code, and it's better than useCallback because it will never cause recalculation.",
        "human_words": "  I think useRefCallback is safe to replace useCallback in any code, and it's better than useCallback because it will never cause recalculation.",
        "human_words_regrex": " I think useRefCallback is safe to replace useCallback in any code, and it's better than useCallback because it will never cause recalculation.",
        "human_words_stopwords_removal_lemmatization": "think userefcallback safe replace usecallback code , 's better usecallback never cause recalculation .",
        "title_stopwords_removal_lemmatization": "question : usecallback always return static value without deps ?"
    },
    {
        "issue_id": 566302105,
        "title": "Question: It's not problem just question in my mind",
        "label": [
            "Resolution: Invalid",
            "Type: Question"
        ],
        "date": "2020-02-17T13:33:08Z",
        "status": "closed",
        "description": "Why all implements of hooks in `react-dom` and we have to import from `react`?\r\nJust I want to know about it",
        "remove_template_description": "Why all implements of hooks in `react-dom` and we have to import from `react`?  Just I want to know about it",
        "human_words": "Why all implements of hooks in `react-dom` and we have to import from `react`?  Just I want to know about it",
        "human_words_regrex": "Why all implements of hooks in `react-dom` and we have to import from `react`? Just I want to know about it",
        "human_words_stopwords_removal_lemmatization": "implement hook ` react-dom ` import ` react ` ? want know",
        "title_stopwords_removal_lemmatization": "question : 's problem question mind"
    },
    {
        "issue_id": 566019027,
        "title": "Question: How to remove dynamic children from Parent State?",
        "label": [
            "Resolution: Invalid",
            "Type: Question",
            "Resolution: Needs More Information"
        ],
        "date": "2020-02-17T02:21:03Z",
        "status": "closed",
        "description": "I'm using react hook `useContext`. I have two identical components (siblings), each that use the same context that is a list.\r\n\r\n**Scenario**\r\n1. The first sibling is created, calls `useContext`, and then pushes something into the list. \r\n2. The second sibling is then created, using the same `useContext`, and then pushes something into the list. \r\n\r\n**Issue**\r\nThe second sibling has the current state of list, which has two items, _but the first sibling state is not updated with the second item that was pushed in by the second sibling_\r\n\r\n**Expected**\r\nThat each component that is using the same `useContext` will be updated amongst all components that use the same context.\r\n\r\nIs this a bug or am I misusing this? Any help or guidance is appreciated \ud83d\ude47 ",
        "remove_template_description": "I'm using react hook `useContext`. I have two identical components (siblings), each that use the same context that is a list.    **Scenario**  1. The first sibling is created, calls `useContext`, and then pushes something into the list.   2. The second sibling is then created, using the same `useContext`, and then pushes something into the list.     **Issue**  The second sibling has the current state of list, which has two items, _but the first sibling state is not updated with the second item that was pushed in by the second sibling_    **Expected**  That each component that is using the same `useContext` will be updated amongst all components that use the same context.    Is this a bug or am I misusing this? Any help or guidance is appreciated \ud83d\ude47",
        "human_words": "I'm using react hook `useContext`. I have two identical components (siblings), each that use the same context that is a list.    **Scenario**  1. The first sibling is created, calls `useContext`, and then pushes something into the list.   2. The second sibling is then created, using the same `useContext`, and then pushes something into the list.     **Issue**  The second sibling has the current state of list, which has two items, _but the first sibling state is not updated with the second item that was pushed in by the second sibling_    **Expected**  That each component that is using the same `useContext` will be updated amongst all components that use the same context.    Is this a bug or am I misusing this? Any help or guidance is appreciated \ud83d\ude47",
        "human_words_regrex": "I'm using react hook `useContext`. I have two identical components (siblings), each that use the same context that is a list. **Scenario** 1. The first sibling is created, calls `useContext`, and then pushes something into the list. 2. The second sibling is then created, using the same `useContext`, and then pushes something into the list. **Issue** The second sibling has the current state of list, which has two items, _but the first sibling state is not updated with the second item that was pushed in by the second sibling_ **Expected** That each component that is using the same `useContext` will be updated amongst all components that use the same context. Is this a bug or am I misusing this? Any help or guidance is appreciated \ud83d\ude47",
        "human_words_stopwords_removal_lemmatization": "'m using react hook ` usecontext ` . two identical component ( sibling ) , use context list . * * scenario * * 1. first sibling created , call ` usecontext ` , push something list . 2. second sibling created , using ` usecontext ` , push something list . * * issue * * second sibling current state list , two item , _but first sibling state updated second item pushed second sibling_ * * expected * * component using ` usecontext ` updated amongst component use context . bug misusing ? help guidance appreciated \ud83d\ude47",
        "title_stopwords_removal_lemmatization": "question : remove dynamic child parent state ?"
    },
    {
        "issue_id": 564635146,
        "title": "Question: How to use \"useRef\" when it is passed through Portal?",
        "label": [
            "Resolution: Invalid",
            "Type: Question"
        ],
        "date": "2020-02-13T11:57:53Z",
        "status": "closed",
        "description": "Hi. I create `ref` in root component in my app. When i bind `ref` to element, which is a child of another element that is render in the portal, ref \"current\" property is always  `undefined`.\r\n\r\nSandbox with example here:\r\nhttps://codesandbox.io/s/refs-through-portals-test-o5lqr\r\n\r\nHow can i use refs with portals with expected behaviour?",
        "remove_template_description": "Hi. I create `ref` in root component in my app. When i bind `ref` to element, which is a child of another element that is render in the portal, ref \"current\" property is always  `undefined`.    Sandbox with example here:  https://codesandbox.io/s/refs-through-portals-test-o5lqr    How can i use refs with portals with expected behaviour?",
        "human_words": "Hi. I create `ref` in root component in my app. When i bind `ref` to element, which is a child of another element that is render in the portal, ref \"current\" property is always  `undefined`.    Sandbox with example here:  https://codesandbox.io/s/refs-through-portals-test-o5lqr    How can i use refs with portals with expected behaviour?",
        "human_words_regrex": "Hi. I create `ref` in root component in my app. When i bind `ref` to element, which is a child of another element that is render in the portal, ref \"current\" property is always `undefined`. Sandbox with example here:  How can i use refs with portals with expected behaviour?",
        "human_words_stopwords_removal_lemmatization": "hi . create ` ref ` root component app . bind ` ref ` element , child another element render portal , ref `` current '' property always ` undefined ` . sandbox example : use ref portal expected behaviour ?",
        "title_stopwords_removal_lemmatization": "question : use `` useref '' passed portal ?"
    },
    {
        "issue_id": 561306043,
        "title": "Webpack can't find ReactDOM.createRoot",
        "label": [
            "Resolution: Invalid",
            "Type: Question"
        ],
        "date": "2020-02-06T22:24:40Z",
        "status": "closed",
        "description": "Hi,\r\n\r\nI'm kinda in doubt if this is an error or is just me doing something wrong.\r\n\r\nI am trying the new react experimental in a very simple existing app I have. Although I had installed the react experimental versions in my package.json, it seems it doesn't recognize ReactDOM.createRoot.\r\n\r\nWhen I try to run my project I receive the error message from the console:\r\n```\r\nUncaught TypeError: react_dom__WEBPACK_IMPORTED_MODULE_1___default.a.createRoot is not a function\r\n    at Module../src/client/index.js (main.chunk.js:2437)\r\n    at __webpack_require__ (runtime.bundle.js:786)\r\n    at fn (runtime.bundle.js:151)\r\n    at Object.0 (main.chunk.js:4324)\r\n    at __webpack_require__ (runtime.bundle.js:786)\r\n    at checkDeferredModules (runtime.bundle.js:46)\r\n    at Array.webpackJsonpCallback [as push] (runtime.bundle.js:33)\r\n    at main.chunk.js:1\r\n``` \r\nThis only happens when I try using ``ReactDOM.createRoot``. Using ``ReactDOM.render`` everything works perfectly.\r\n\r\nAny idea why this is happening?\r\n```\r\n\"dependencies\": {\r\n    \"chalk\": \"^3.0.0\",\r\n    \"compression\": \"^1.7.4\",\r\n    \"express\": \"^4.17.1\",\r\n    \"morgan\": \"^1.9.1\",\r\n    \"uuid\": \"^3.4.0\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@babel/cli\": \"^7.8.4\",\r\n    \"@babel/core\": \"^7.8.4\",\r\n    \"@babel/node\": \"^7.8.4\",\r\n    \"@babel/plugin-proposal-class-properties\": \"^7.7.4\",\r\n    \"@babel/plugin-proposal-decorators\": \"^7.7.4\",\r\n    \"@babel/plugin-proposal-export-namespace-from\": \"^7.7.4\",\r\n    \"@babel/plugin-proposal-function-bind\": \"^7.7.4\",\r\n    \"@babel/plugin-proposal-nullish-coalescing-operator\": \"^7.7.4\",\r\n    \"@babel/plugin-proposal-optional-chaining\": \"^7.7.5\",\r\n    \"@babel/plugin-proposal-pipeline-operator\": \"^7.7.7\",\r\n    \"@babel/plugin-proposal-private-methods\": \"^7.7.4\",\r\n    \"@babel/plugin-proposal-throw-expressions\": \"^7.7.4\",\r\n    \"@babel/plugin-syntax-dynamic-import\": \"^7.7.4\",\r\n    \"@babel/preset-env\": \"^7.8.4\",\r\n    \"@babel/preset-react\": \"^7.7.4\",\r\n    \"@babel/preset-typescript\": \"^7.8.3\",\r\n    \"@hot-loader/react-dom\": \"^16.11.0\",\r\n    \"@testing-library/jest-dom\": \"^5.1.1\",\r\n    \"@testing-library/react\": \"^9.4.0\",\r\n    \"autoprefixer\": \"^9.7.4\",\r\n    \"babel-eslint\": \"^11.0.0-beta.2\",\r\n    \"babel-jest\": \"^25.1.0\",\r\n    \"babel-loader\": \"^8.0.6\",\r\n    \"babel-plugin-dynamic-import-node\": \"^2.3.0\",\r\n    \"babel-plugin-styled-components\": \"^1.10.7\",\r\n    \"case-sensitive-paths-webpack-plugin\": \"^2.3.0\",\r\n    \"circular-dependency-plugin\": \"^5.2.0\",\r\n    \"clean-webpack-plugin\": \"^3.0.0\",\r\n    \"connected-react-router\": \"^6.6.1\",\r\n    \"copy-webpack-plugin\": \"^5.1.1\",\r\n    \"core-js\": \"^3.6.2\",\r\n    \"css-hot-loader\": \"^1.4.4\",\r\n    \"css-loader\": \"^3.4.1\",\r\n    \"deep-freeze\": \"^0.0.1\",\r\n    \"eslint\": \"^6.8.0\",\r\n    \"eslint-loader\": \"^3.0.3\",\r\n    \"eslint-plugin-babel\": \"^5.3.0\",\r\n    \"eslint-plugin-import\": \"^2.20.1\",\r\n    \"eslint-plugin-jsx-a11y\": \"^6.2.3\",\r\n    \"eslint-plugin-ramda\": \"^2.5.1\",\r\n    \"eslint-plugin-react\": \"^7.18.3\",\r\n    \"eslint-plugin-react-hooks\": \"^2.3.0\",\r\n    \"eslint-plugin-redux-saga\": \"^1.1.3\",\r\n    \"eslint-watch\": \"^6.0.1\",\r\n    \"file-loader\": \"^5.0.2\",\r\n    \"hard-source-webpack-plugin\": \"^0.13.1\",\r\n    \"history\": \"^4.10.1\",\r\n    \"html-webpack-plugin\": \"^3.2.0\",\r\n    \"immer\": \"^5.3.4\",\r\n    \"jest\": \"^25.1.0\",\r\n    \"jest-styled-components\": \"^7.0.0\",\r\n    \"lodash\": \"^4.17.15\",\r\n    \"mini-css-extract-plugin\": \"^0.9.0\",\r\n    \"moment\": \"^2.24.0\",\r\n    \"nock\": \"^11.7.1\",\r\n    \"normalizr\": \"^3.5.0\",\r\n    \"npm-run-all\": \"^4.1.5\",\r\n    \"open\": \"^7.0.2\",\r\n    \"optimize-css-assets-webpack-plugin\": \"^5.0.3\",\r\n    \"pm2\": \"^4.2.3\",\r\n    \"postcss-flexbugs-fixes\": \"^4.2.0\",\r\n    \"postcss-loader\": \"^3.0.0\",\r\n    \"prop-types\": \"^15.7.2\",\r\n    \"ramda\": \"^0.27.0\",\r\n    \"react\": \"^0.0.0-experimental-241c4467e\",\r\n    \"react-dom\": \"^0.0.0-experimental-241c4467e\",\r\n    \"react-hooks-testing-library\": \"^0.6.0\",\r\n    \"react-hot-loader\": \"^4.12.19\",\r\n    \"react-is\": \"^16.12.0\",\r\n    \"react-redux\": \"^7.1.3\",\r\n    \"react-router\": \"^5.1.2\",\r\n    \"react-router-dom\": \"^5.1.2\",\r\n    \"react-test-renderer\": \"^16.12.0\",\r\n    \"redux\": \"^4.0.5\",\r\n    \"redux-actions\": \"^2.6.5\",\r\n    \"redux-devtools-extension\": \"^2.13.8\",\r\n    \"redux-logger\": \"^3.0.6\",\r\n    \"redux-saga\": \"^1.1.3\",\r\n    \"redux-saga-test-plan\": \"^4.0.0-rc.3\",\r\n    \"regenerator-runtime\": \"^0.13.3\",\r\n    \"reselect\": \"^4.0.0\",\r\n    \"source-map-loader\": \"^0.2.4\",\r\n    \"style-loader\": \"^1.1.3\",\r\n    \"styled-components\": \"^5.0.1\",\r\n    \"stylelint\": \"^13.0.0\",\r\n    \"stylelint-bare-webpack-plugin\": \"^2.0.0\",\r\n    \"stylelint-config-recommended\": \"^3.0.0\",\r\n    \"stylelint-config-standard\": \"^19.0.0\",\r\n    \"stylelint-config-styled-components\": \"^0.1.1\",\r\n    \"stylelint-custom-processor-loader\": \"^0.6.0\",\r\n    \"stylelint-order\": \"^4.0.0\",\r\n    \"stylelint-processor-styled-components\": \"^1.9.0\",\r\n    \"stylelint-selector-bem-pattern\": \"^2.1.0\",\r\n    \"thread-loader\": \"^2.1.3\",\r\n    \"typescript\": \"^3.7.5\",\r\n    \"url-loader\": \"^3.0.0\",\r\n    \"webpack\": \"^4.41.4\",\r\n    \"webpack-dev-middleware\": \"^3.7.2\",\r\n    \"webpack-hot-middleware\": \"^2.25.0\",\r\n    \"webpack-manifest-plugin\": \"^2.2.0\",\r\n    \"webpack-merge\": \"^4.2.2\",\r\n    \"webpack-pwa-manifest\": \"^4.1.1\",\r\n    \"workbox-webpack-plugin\": \"^5.0.0\"\r\n  }\r\n```",
        "remove_template_description": "Hi,    I'm kinda in doubt if this is an error or is just me doing something wrong.    I am trying the new react experimental in a very simple existing app I have. Although I had installed the react experimental versions in my package.json, it seems it doesn't recognize ReactDOM.createRoot.    When I try to run my project I receive the error message from the console:  ```  Uncaught TypeError: react_dom__WEBPACK_IMPORTED_MODULE_1___default.a.createRoot is not a function      at Module../src/client/index.js (main.chunk.js:2437)      at __webpack_require__ (runtime.bundle.js:786)      at fn (runtime.bundle.js:151)      at Object.0 (main.chunk.js:4324)      at __webpack_require__ (runtime.bundle.js:786)      at checkDeferredModules (runtime.bundle.js:46)      at Array.webpackJsonpCallback [as push] (runtime.bundle.js:33)      at main.chunk.js:1  ```   This only happens when I try using ``ReactDOM.createRoot``. Using ``ReactDOM.render`` everything works perfectly.    Any idea why this is happening?  ```  \"dependencies\": {      \"chalk\": \"^3.0.0\",      \"compression\": \"^1.7.4\",      \"express\": \"^4.17.1\",      \"morgan\": \"^1.9.1\",      \"uuid\": \"^3.4.0\"    },    \"devDependencies\": {      \"@babel/cli\": \"^7.8.4\",      \"@babel/core\": \"^7.8.4\",      \"@babel/node\": \"^7.8.4\",      \"@babel/plugin-proposal-class-properties\": \"^7.7.4\",      \"@babel/plugin-proposal-decorators\": \"^7.7.4\",      \"@babel/plugin-proposal-export-namespace-from\": \"^7.7.4\",      \"@babel/plugin-proposal-function-bind\": \"^7.7.4\",      \"@babel/plugin-proposal-nullish-coalescing-operator\": \"^7.7.4\",      \"@babel/plugin-proposal-optional-chaining\": \"^7.7.5\",      \"@babel/plugin-proposal-pipeline-operator\": \"^7.7.7\",      \"@babel/plugin-proposal-private-methods\": \"^7.7.4\",      \"@babel/plugin-proposal-throw-expressions\": \"^7.7.4\",      \"@babel/plugin-syntax-dynamic-import\": \"^7.7.4\",      \"@babel/preset-env\": \"^7.8.4\",      \"@babel/preset-react\": \"^7.7.4\",      \"@babel/preset-typescript\": \"^7.8.3\",      \"@hot-loader/react-dom\": \"^16.11.0\",      \"@testing-library/jest-dom\": \"^5.1.1\",      \"@testing-library/react\": \"^9.4.0\",      \"autoprefixer\": \"^9.7.4\",      \"babel-eslint\": \"^11.0.0-beta.2\",      \"babel-jest\": \"^25.1.0\",      \"babel-loader\": \"^8.0.6\",      \"babel-plugin-dynamic-import-node\": \"^2.3.0\",      \"babel-plugin-styled-components\": \"^1.10.7\",      \"case-sensitive-paths-webpack-plugin\": \"^2.3.0\",      \"circular-dependency-plugin\": \"^5.2.0\",      \"clean-webpack-plugin\": \"^3.0.0\",      \"connected-react-router\": \"^6.6.1\",      \"copy-webpack-plugin\": \"^5.1.1\",      \"core-js\": \"^3.6.2\",      \"css-hot-loader\": \"^1.4.4\",      \"css-loader\": \"^3.4.1\",      \"deep-freeze\": \"^0.0.1\",      \"eslint\": \"^6.8.0\",      \"eslint-loader\": \"^3.0.3\",      \"eslint-plugin-babel\": \"^5.3.0\",      \"eslint-plugin-import\": \"^2.20.1\",      \"eslint-plugin-jsx-a11y\": \"^6.2.3\",      \"eslint-plugin-ramda\": \"^2.5.1\",      \"eslint-plugin-react\": \"^7.18.3\",      \"eslint-plugin-react-hooks\": \"^2.3.0\",      \"eslint-plugin-redux-saga\": \"^1.1.3\",      \"eslint-watch\": \"^6.0.1\",      \"file-loader\": \"^5.0.2\",      \"hard-source-webpack-plugin\": \"^0.13.1\",      \"history\": \"^4.10.1\",      \"html-webpack-plugin\": \"^3.2.0\",      \"immer\": \"^5.3.4\",      \"jest\": \"^25.1.0\",      \"jest-styled-components\": \"^7.0.0\",      \"lodash\": \"^4.17.15\",      \"mini-css-extract-plugin\": \"^0.9.0\",      \"moment\": \"^2.24.0\",      \"nock\": \"^11.7.1\",      \"normalizr\": \"^3.5.0\",      \"npm-run-all\": \"^4.1.5\",      \"open\": \"^7.0.2\",      \"optimize-css-assets-webpack-plugin\": \"^5.0.3\",      \"pm2\": \"^4.2.3\",      \"postcss-flexbugs-fixes\": \"^4.2.0\",      \"postcss-loader\": \"^3.0.0\",      \"prop-types\": \"^15.7.2\",      \"ramda\": \"^0.27.0\",      \"react\": \"^0.0.0-experimental-241c4467e\",      \"react-dom\": \"^0.0.0-experimental-241c4467e\",      \"react-hooks-testing-library\": \"^0.6.0\",      \"react-hot-loader\": \"^4.12.19\",      \"react-is\": \"^16.12.0\",      \"react-redux\": \"^7.1.3\",      \"react-router\": \"^5.1.2\",      \"react-router-dom\": \"^5.1.2\",      \"react-test-renderer\": \"^16.12.0\",      \"redux\": \"^4.0.5\",      \"redux-actions\": \"^2.6.5\",      \"redux-devtools-extension\": \"^2.13.8\",      \"redux-logger\": \"^3.0.6\",      \"redux-saga\": \"^1.1.3\",      \"redux-saga-test-plan\": \"^4.0.0-rc.3\",      \"regenerator-runtime\": \"^0.13.3\",      \"reselect\": \"^4.0.0\",      \"source-map-loader\": \"^0.2.4\",      \"style-loader\": \"^1.1.3\",      \"styled-components\": \"^5.0.1\",      \"stylelint\": \"^13.0.0\",      \"stylelint-bare-webpack-plugin\": \"^2.0.0\",      \"stylelint-config-recommended\": \"^3.0.0\",      \"stylelint-config-standard\": \"^19.0.0\",      \"stylelint-config-styled-components\": \"^0.1.1\",      \"stylelint-custom-processor-loader\": \"^0.6.0\",      \"stylelint-order\": \"^4.0.0\",      \"stylelint-processor-styled-components\": \"^1.9.0\",      \"stylelint-selector-bem-pattern\": \"^2.1.0\",      \"thread-loader\": \"^2.1.3\",      \"typescript\": \"^3.7.5\",      \"url-loader\": \"^3.0.0\",      \"webpack\": \"^4.41.4\",      \"webpack-dev-middleware\": \"^3.7.2\",      \"webpack-hot-middleware\": \"^2.25.0\",      \"webpack-manifest-plugin\": \"^2.2.0\",      \"webpack-merge\": \"^4.2.2\",      \"webpack-pwa-manifest\": \"^4.1.1\",      \"workbox-webpack-plugin\": \"^5.0.0\"    }  ```",
        "human_words": "Hi,    I'm kinda in doubt if this is an error or is just me doing something wrong.    I am trying the new react experimental in a very simple existing app I have. Although I had installed the react experimental versions in my package.json, it seems it doesn't recognize ReactDOM.createRoot.    When I try to run my project I receive the error message from the console:     This only happens when I try using ``ReactDOM.createRoot``. Using ``ReactDOM.render`` everything works perfectly.    Any idea why this is happening?  ",
        "human_words_regrex": "Hi, I'm kinda in doubt if this is an error or is just me doing something wrong. I am trying the new react experimental in a very simple existing app I have. Although I had installed the react experimental versions in my package.json, it seems it doesn't recognize ReactDOM.createRoot. When I try to run my project I receive the error message from the console: This only happens when I try using ``ReactDOM.createRoot``. Using ``ReactDOM.render`` everything works perfectly. Any idea why this is happening? ",
        "human_words_stopwords_removal_lemmatization": "hi , 'm kinda doubt error something wrong . trying new react experimental simple existing app . although installed react experimental version package.json , seems n't recognize reactdom.createroot . try run project receive error message console : happens try using `` reactdom.createroot `` . using `` reactdom.render `` everything work perfectly . idea happening ?",
        "title_stopwords_removal_lemmatization": "webpack ca n't find reactdom.createroot"
    },
    {
        "issue_id": 560970056,
        "title": "Question: can I lie to useEffect about its dependencies in this case?",
        "label": [
            "Resolution: Invalid",
            "Type: Question"
        ],
        "date": "2020-02-06T12:06:08Z",
        "status": "closed",
        "description": "You [frequently][1] [see][2] warnings that you shouldn't lie to `useEffect` and `useMemo` about their dependencies.\r\n\r\n\r\nI'm wondering about this special case, which I see throughout the codebase at work:\r\n```\r\nuseEffect(() => {\r\n  // We want effect to run when a changes, but not b\r\n  doStuff(a, b)\r\n, [a])\r\n```\r\n\r\nLet's say `a` changes every 10 seconds, and `b` changes every second, and we want to `doStuff` whenever `a` changes.\r\n\r\nThis works, is simple and elegant. Yet all guides discourage this, suggesting to do this instead:\r\n```\r\nlet bRef = useRef()\r\nuseEffect(() => {\r\n  bRef.current = b\r\n})\r\n\r\nuseEffect(() => {\r\n  doStuff(a, bRef.current)\r\n}, [a])\r\n```\r\nWhy? Aren't those equivalent?\r\n\r\nI could see a potential issue with `useMemo(() => compute(a, b), [a])`. It can be accessed in the entire component, and sometimes it will be stale, which contradicts the meaning of memoization.\r\n\r\nBut what about that useEffect case?\r\n\r\n  [1]: https://overreacted.io/a-complete-guide-to-useeffect/#dont-lie-to-react-about-dependencies\r\n  [2]: https://reactjs.org/docs/hooks-faq.html#is-it-safe-to-omit-functions-from-the-list-of-dependencies",
        "remove_template_description": "You [frequently][1] [see][2] warnings that you shouldn't lie to `useEffect` and `useMemo` about their dependencies.      I'm wondering about this special case, which I see throughout the codebase at work:  ```  useEffect(() => {    // We want effect to run when a changes, but not b    doStuff(a, b)  , [a])  ```    Let's say `a` changes every 10 seconds, and `b` changes every second, and we want to `doStuff` whenever `a` changes.    This works, is simple and elegant. Yet all guides discourage this, suggesting to do this instead:  ```  let bRef = useRef()  useEffect(() => {    bRef.current = b  })    useEffect(() => {    doStuff(a, bRef.current)  }, [a])  ```  Why? Aren't those equivalent?    I could see a potential issue with `useMemo(() => compute(a, b), [a])`. It can be accessed in the entire component, and sometimes it will be stale, which contradicts the meaning of memoization.    But what about that useEffect case?      [1]: https://overreacted.io/a-complete-guide-to-useeffect/#dont-lie-to-react-about-dependencies    [2]: https://reactjs.org/docs/hooks-faq.html#is-it-safe-to-omit-functions-from-the-list-of-dependencies",
        "human_words": "You [frequently][1] [see][2] warnings that you shouldn't lie to `useEffect` and `useMemo` about their dependencies.      I'm wondering about this special case, which I see throughout the codebase at work:      Let's say `a` changes every 10 seconds, and `b` changes every second, and we want to `doStuff` whenever `a` changes.    This works, is simple and elegant. Yet all guides discourage this, suggesting to do this instead:    Why? Aren't those equivalent?    I could see a potential issue with `useMemo(() => compute(a, b), [a])`. It can be accessed in the entire component, and sometimes it will be stale, which contradicts the meaning of memoization.    But what about that useEffect case?      [1]: https://overreacted.io/a-complete-guide-to-useeffect/#dont-lie-to-react-about-dependencies    [2]: https://reactjs.org/docs/hooks-faq.html#is-it-safe-to-omit-functions-from-the-list-of-dependencies",
        "human_words_regrex": "You [frequently][1] [see][2] warnings that you shouldn't lie to `useEffect` and `useMemo` about their dependencies. I'm wondering about this special case, which I see throughout the codebase at work: Let's say `a` changes every 10 seconds, and `b` changes every second, and we want to `doStuff` whenever `a` changes. This works, is simple and elegant. Yet all guides discourage this, suggesting to do this instead: Why? Aren't those equivalent? I could see a potential issue with `useMemo(() => compute(a, b), [a])`. It can be accessed in the entire component, and sometimes it will be stale, which contradicts the meaning of memoization. But what about that useEffect case? [1]:  [2]: ",
        "human_words_stopwords_removal_lemmatization": "[ frequently ] [ 1 ] [ see ] [ 2 ] warning n't lie ` useeffect ` ` usememo ` dependency . 'm wondering special case , see throughout codebase work : let 's say ` ` change every 10 second , ` b ` change every second , want ` dostuff ` whenever ` ` change . work , simple elegant . yet guide discourage , suggesting instead : ? n't equivalent ? could see potential issue ` usememo ( ( ) = > compute ( , b ) , [ ] ) ` . accessed entire component , sometimes stale , contradicts meaning memoization . useeffect case ? [ 1 ] : [ 2 ] :",
        "title_stopwords_removal_lemmatization": "question : lie useeffect dependency case ?"
    },
    {
        "issue_id": 559806129,
        "title": "Bug: Nested setState and unstable_batchedUpdates (are they ignored?)",
        "label": [
            "Type: Question"
        ],
        "date": "2020-02-04T15:46:04Z",
        "status": "closed",
        "description": "Nested setState and unstable_batchedUpdates (are them ignored?)\r\n\r\nReact version: 16.12\r\n\r\n## Steps To Reproduce\r\nhttps://codesandbox.io/s/batchedupdates-uselayouteffect-evj8s\r\n\r\nopen profile after click, you will see 3 commit.\r\n\r\nit seems that even if we use unstable_batchedUpdates, nested setStates called on\r\ndidUpdate/layouteffect do not get batched.\r\n",
        "remove_template_description": "Nested setState and unstable_batchedUpdates (are them ignored?)    React version: 16.12      https://codesandbox.io/s/batchedupdates-uselayouteffect-evj8s    open profile after click, you will see 3 commit.    it seems that even if we use unstable_batchedUpdates, nested setStates called on  didUpdate/layouteffect do not get batched.",
        "human_words": "Nested setState and unstable_batchedUpdates (are them ignored?)    React version: 16.12      https://codesandbox.io/s/batchedupdates-uselayouteffect-evj8s    open profile after click, you will see 3 commit.    it seems that even if we use unstable_batchedUpdates, nested setStates called on  didUpdate/layouteffect do not get batched.",
        "human_words_regrex": "Nested setState and unstable_batchedUpdates (are them ignored?) React version: 16.12  open profile after click, you will see 3 commit. it seems that even if we use unstable_batchedUpdates, nested setStates called on didUpdate/layouteffect do not get batched.",
        "human_words_stopwords_removal_lemmatization": "nested setstate unstable_batchedupdates ( ignored ? ) react version : 16.12 open profile click , see 3 commit . seems even use unstable_batchedupdates , nested setstates called didupdate/layouteffect get batched .",
        "title_stopwords_removal_lemmatization": "bug : nested setstate unstable_batchedupdates ( ignored ? )"
    },
    {
        "issue_id": 559127802,
        "title": "Question: Can useMemo be used instead of useRef?",
        "label": [
            "Resolution: Invalid",
            "Type: Question"
        ],
        "date": "2020-02-03T14:42:12Z",
        "status": "closed",
        "description": "Hi, just out of curiosity can `useMemo` be used instead of `useRef` when doing it as following:\r\n\r\nExample:\r\n\r\n```javascript\r\nconst ref = useRef(null);\r\nconst ref2 = useMemo(() => { current: null }, []);\r\n```\r\n\r\nIt looks to me that both refs will be working just fine as DOM ref and as mutable value similar to instance fields in classes. Why then `useRef` is implemented differently comparing to `useMemo` considering [ReactFiberHooks.js](https://github.com/facebook/react/blob/master/packages/react-reconciler/src/ReactFiberHooks.js) code for `useRef` and `useMemo`?\r\n\r\nThanks!",
        "remove_template_description": "Hi, just out of curiosity can `useMemo` be used instead of `useRef` when doing it as following:    Example:    ```javascript  const ref = useRef(null);  const ref2 = useMemo(() => { current: null }, []);  ```    It looks to me that both refs will be working just fine as DOM ref and as mutable value similar to instance fields in classes. Why then `useRef` is implemented differently comparing to `useMemo` considering [ReactFiberHooks.js](https://github.com/facebook/react/blob/master/packages/react-reconciler/src/ReactFiberHooks.js) code for `useRef` and `useMemo`?    Thanks!",
        "human_words": "Hi, just out of curiosity can `useMemo` be used instead of `useRef` when doing it as following:    Example:        It looks to me that both refs will be working just fine as DOM ref and as mutable value similar to instance fields in classes. Why then `useRef` is implemented differently comparing to `useMemo` considering [ReactFiberHooks.js](https://github.com/facebook/react/blob/master/packages/react-reconciler/src/ReactFiberHooks.js) code for `useRef` and `useMemo`?    Thanks!",
        "human_words_regrex": "Hi, just out of curiosity can `useMemo` be used instead of `useRef` when doing it as following: Example: It looks to me that both refs will be working just fine as DOM ref and as mutable value similar to instance fields in classes. Why then `useRef` is implemented differently comparing to `useMemo` considering  code for `useRef` and `useMemo`? Thanks!",
        "human_words_stopwords_removal_lemmatization": "hi , curiosity ` usememo ` used instead ` useref ` following : example : look ref working fine dom ref mutable value similar instance field class . ` useref ` implemented differently comparing ` usememo ` considering code ` useref ` ` usememo ` ? thanks !",
        "title_stopwords_removal_lemmatization": "question : usememo used instead useref ?"
    },
    {
        "issue_id": 559120282,
        "title": "While using useRef , some data has been updated by context value from reducers, when the context value was updated from some other user event, variable used with useRef also updated, then how to use instance variables in hooks?",
        "label": [
            "Resolution: Invalid",
            "Type: Question",
            "Resolution: Stale"
        ],
        "date": "2020-02-03T14:29:36Z",
        "status": "closed",
        "description": "const CreateNotificationBase = (props) => {\r\nconst [state, dispatch] = useContext(Store);\r\n const draftData = useRef({});\r\nuseEffect(() => {\r\n        if (state.notificationDetails.draftId) {\r\n            draftData.current = state.notificationDetails;\r\n        }\r\n    }, []);\r\nuseEffect(() => {\r\ndebugger\r\n},[draftData.current])\r\n}\r\n\r\nwhen value in store context changes useEffect of draftData.current also called. Please suggest hwo to resolve.",
        "remove_template_description": "const CreateNotificationBase = (props) => {  const [state, dispatch] = useContext(Store);   const draftData = useRef({});  useEffect(() => {          if (state.notificationDetails.draftId) {              draftData.current = state.notificationDetails;          }      }, []);  useEffect(() => {  debugger  },[draftData.current])  }    when value in store context changes useEffect of draftData.current also called. Please suggest hwo to resolve.",
        "human_words": "const CreateNotificationBase = (props) => {  const [state, dispatch] = useContext(Store);   const draftData = useRef({});  useEffect(() => {          if (state.notificationDetails.draftId) {              draftData.current = state.notificationDetails;          }      }, []);  useEffect(() => {  debugger  },[draftData.current])  }    when value in store context changes useEffect of draftData.current also called. Please suggest hwo to resolve.",
        "human_words_regrex": "const CreateNotificationBase = (props) => { const [state, dispatch] = useContext(Store); const draftData = useRef({}); useEffect(() => { if (state.notificationDetails.draftId) { draftData.current = state.notificationDetails; } }, []); useEffect(() => { debugger },[draftData.current]) } when value in store context changes useEffect of draftData.current also called. Please suggest hwo to resolve.",
        "human_words_stopwords_removal_lemmatization": "const createnotificationbase = ( prop ) = > { const [ state , dispatch ] = usecontext ( store ) ; const draftdata = useref ( { } ) ; useeffect ( ( ) = > { ( state.notificationdetails.draftid ) { draftdata.current = state.notificationdetails ; } } , [ ] ) ; useeffect ( ( ) = > { debugger } , [ draftdata.current ] ) } value store context change useeffect draftdata.current also called . please suggest hwo resolve .",
        "title_stopwords_removal_lemmatization": "using useref , data updated context value reducer , context value updated user event , variable used useref also updated , use instance variable hook ?"
    },
    {
        "issue_id": 559099504,
        "title": "Bug: react-devtools profiler doesn't show props",
        "label": [
            "Type: Question",
            "Component: Developer Tools"
        ],
        "date": "2020-02-03T13:54:42Z",
        "status": "closed",
        "description": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nAccording to docs, it's possible to see props and state of a component at each commit.\r\nhttps://reactjs.org/blog/2018/09/10/introducing-the-react-profiler.html#browsing-commits\r\n\r\nYet, in every project I've tried all I see is the names of changed props, but not their values, like the gif from docs claims.\r\n\r\n\r\nReact version: 16.12.0\r\nextension: 4.4.0 (1/3/2020) ... Created from revision f749045a5 on 1/3/2020\r\n\r\n## Steps To Reproduce\r\n\r\n1. create counter app with CRA or another method\r\n2. open profiler and change state\r\n3. observe how only the name of the prop is visible, but not its value\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\n```\r\nfunction App() {\r\n  let [a, setA] = useState(0);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <button onClick={() => setA(v => v + 1)}>inc</button>\r\n      <Kid a={a} />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Kid() {\r\n  return null;\r\n}\r\n```\r\n\r\n## The current behavior\r\n[current behavior](https://i.imgur.com/9I6rAIf.png)\r\n\r\n## The expected behavior\r\n[expected behavior](https://i.imgur.com/yVf36Ff.png)\r\n\r\nAm I doing something wrong or has this feature been removed? I know you can see props in the inspector, but there it's only the most recent ones.",
        "remove_template_description": "<!--    Please provide a clear and concise description of what the bug is. Include    screenshots if needed. Please test using the latest version of the relevant    React packages to make sure your issue has not already been fixed.  -->    According to docs, it's possible to see props and state of a component at each commit.  https://reactjs.org/blog/2018/09/10/introducing-the-react-profiler.html#browsing-commits    Yet, in every project I've tried all I see is the names of changed props, but not their values, like the gif from docs claims.      React version: 16.12.0  extension: 4.4.0 (1/3/2020) ... Created from revision f749045a5 on 1/3/2020        1. create counter app with CRA or another method  2. open profiler and change state  3. observe how only the name of the prop is visible, but not its value    <!--    Your bug will get fixed much faster if we can run your code and it doesn't    have dependencies other than React. Issues without reproduction steps or    code examples may be immediately closed as not actionable.  -->    ```  function App() {    let [a, setA] = useState(0);      return (      <div className=\"App\">        <button onClick={() => setA(v => v + 1)}>inc</button>        <Kid a={a} />      </div>    );  }    function Kid() {    return null;  }  ```      [current behavior](https://i.imgur.com/9I6rAIf.png)      [expected behavior](https://i.imgur.com/yVf36Ff.png)    Am I doing something wrong or has this feature been removed? I know you can see props in the inspector, but there it's only the most recent ones.",
        "human_words": "<!--    Please provide a clear and concise description of what the bug is. Include    screenshots if needed. Please test using the latest version of the relevant    React packages to make sure your issue has not already been fixed.  -->    According to docs, it's possible to see props and state of a component at each commit.  https://reactjs.org/blog/2018/09/10/introducing-the-react-profiler.html#browsing-commits    Yet, in every project I've tried all I see is the names of changed props, but not their values, like the gif from docs claims.      React version: 16.12.0  extension: 4.4.0 (1/3/2020) ... Created from revision f749045a5 on 1/3/2020        1. create counter app with CRA or another method  2. open profiler and change state  3. observe how only the name of the prop is visible, but not its value    <!--    Your bug will get fixed much faster if we can run your code and it doesn't    have dependencies other than React. Issues without reproduction steps or    code examples may be immediately closed as not actionable.  -->          [current behavior](https://i.imgur.com/9I6rAIf.png)      [expected behavior](https://i.imgur.com/yVf36Ff.png)    Am I doing something wrong or has this feature been removed? I know you can see props in the inspector, but there it's only the most recent ones.",
        "human_words_regrex": " According to docs, it's possible to see props and state of a component at each commit.  Yet, in every project I've tried all I see is the names of changed props, but not their values, like the gif from docs claims. React version: 16.12.0 extension: 4.4.0 (1/3/2020) ... Created from revision f749045a5 on 1/3/2020 1. create counter app with CRA or another method 2. open profiler and change state 3. observe how only the name of the prop is visible, but not its value    Am I doing something wrong or has this feature been removed? I know you can see props in the inspector, but there it's only the most recent ones.",
        "human_words_stopwords_removal_lemmatization": "according doc , 's possible see prop state component commit . yet , every project 've tried see name changed prop , value , like gif doc claim . react version : 16.12.0 extension : 4.4.0 ( 1/3/2020 ) ... created revision f749045a5 1/3/2020 1. create counter app cra another method 2. open profiler change state 3. observe name prop visible , value something wrong feature removed ? know see prop inspector , 's recent one .",
        "title_stopwords_removal_lemmatization": "bug : react-devtools profiler n't show prop"
    },
    {
        "issue_id": 557232515,
        "title": "Question:  Just for my app test. Thanks.",
        "label": [
            "Resolution: Invalid",
            "Type: Question"
        ],
        "date": "2020-01-30T02:37:25Z",
        "status": "closed",
        "description": "\ud83d\udea8 This issue tracker is not for questions. \ud83d\udea8\r\n\r\nAs it happens, support requests that are created as issues are likely to be closed. We want to make sure you are able to find the help you seek. Please take a look at the following resources.\r\n\r\n## Coding Questions\r\n\r\nIf you have a coding question related to React and React DOM, it might be better suited for Stack Overflow. It's a great place to browse through frequent questions about using React, as well as ask for help with specific questions.\r\n\r\nhttps://stackoverflow.com/questions/tagged/react\r\n\r\n## Talk to other React developers\r\n\r\nThere are many online forums which are a great place for discussion about best practices and application architecture as well as the future of React.\r\n\r\nhttps://reactjs.org/community/support.html#popular-discussion-forums\r\n\r\n## Proposals\r\n\r\nIf you'd like to discuss topics related to the future of React, or would like to propose a new feature or change before sending a pull request, please check out the discussions and proposals repository.\r\n\r\nhttps://github.com/reactjs/rfcs\r\n",
        "remove_template_description": "\ud83d\udea8 This issue tracker is not for questions. \ud83d\udea8    As it happens, support requests that are created as issues are likely to be closed. We want to make sure you are able to find the help you seek. Please take a look at the following resources.    ## Coding Questions    If you have a coding question related to React and React DOM, it might be better suited for Stack Overflow. It's a great place to browse through frequent questions about using React, as well as ask for help with specific questions.    https://stackoverflow.com/questions/tagged/react    ## Talk to other React developers    There are many online forums which are a great place for discussion about best practices and application architecture as well as the future of React.    https://reactjs.org/community/support.html#popular-discussion-forums    ## Proposals    If you'd like to discuss topics related to the future of React, or would like to propose a new feature or change before sending a pull request, please check out the discussions and proposals repository.    https://github.com/reactjs/rfcs",
        "human_words": "\ud83d\udea8 This issue tracker is not for questions. \ud83d\udea8    As it happens, support requests that are created as issues are likely to be closed. We want to make sure you are able to find the help you seek. Please take a look at the following resources.    ## Coding Questions    If you have a coding question related to React and React DOM, it might be better suited for Stack Overflow. It's a great place to browse through frequent questions about using React, as well as ask for help with specific questions.    https://stackoverflow.com/questions/tagged/react    ## Talk to other React developers    There are many online forums which are a great place for discussion about best practices and application architecture as well as the future of React.    https://reactjs.org/community/support.html#popular-discussion-forums    ## Proposals    If you'd like to discuss topics related to the future of React, or would like to propose a new feature or change before sending a pull request, please check out the discussions and proposals repository.    https://github.com/reactjs/rfcs",
        "human_words_regrex": "\ud83d\udea8 This issue tracker is not for questions. \ud83d\udea8 As it happens, support requests that are created as issues are likely to be closed. We want to make sure you are able to find the help you seek. Please take a look at the following resources. ## Coding Questions If you have a coding question related to React and React DOM, it might be better suited for Stack Overflow. It's a great place to browse through frequent questions about using React, as well as ask for help with specific questions.  ## Talk to other React developers There are many online forums which are a great place for discussion about best practices and application architecture as well as the future of React.  ## Proposals If you'd like to discuss topics related to the future of React, or would like to propose a new feature or change before sending a pull request, please check out the discussions and proposals repository. ",
        "human_words_stopwords_removal_lemmatization": "\ud83d\udea8 issue tracker question . \ud83d\udea8 happens , support request created issue likely closed . want make sure able find help seek . please take look following resource . # # coding question coding question related react react dom , might better suited stack overflow . 's great place browse frequent question using react , well ask help specific question . # # talk react developer many online forum great place discussion best practice application architecture well future react . # # proposal 'd like discus topic related future react , would like propose new feature change sending pull request , please check discussion proposal repository .",
        "title_stopwords_removal_lemmatization": "question : app test . thanks ."
    },
    {
        "issue_id": 555221620,
        "title": "Question: Can the useContext hook be used without a provider?",
        "label": [
            "Resolution: Invalid",
            "Type: Question"
        ],
        "date": "2020-01-26T12:30:09Z",
        "status": "closed",
        "description": "Is it a correct form to use the useContext hook without the enclosing provider?\r\n\r\nSee this simple [sandbox](https://codesandbox.io/s/3q2x15l4rm) which uses  the JediContext.Provider.\r\n\r\nIn this modified [sandbox](https://codesandbox.io/s/react-hooks-usecontext-z2ryh) I removed the provider and the useContext hook still works.\r\n\r\nWhat are the consequences of using the useContext hook without a provider?",
        "remove_template_description": "Is it a correct form to use the useContext hook without the enclosing provider?    See this simple [sandbox](https://codesandbox.io/s/3q2x15l4rm) which uses  the JediContext.Provider.    In this modified [sandbox](https://codesandbox.io/s/react-hooks-usecontext-z2ryh) I removed the provider and the useContext hook still works.    What are the consequences of using the useContext hook without a provider?",
        "human_words": "Is it a correct form to use the useContext hook without the enclosing provider?    See this simple [sandbox](https://codesandbox.io/s/3q2x15l4rm) which uses  the JediContext.Provider.    In this modified [sandbox](https://codesandbox.io/s/react-hooks-usecontext-z2ryh) I removed the provider and the useContext hook still works.    What are the consequences of using the useContext hook without a provider?",
        "human_words_regrex": "Is it a correct form to use the useContext hook without the enclosing provider? See this simple  which uses the JediContext.Provider. In this modified  I removed the provider and the useContext hook still works. What are the consequences of using the useContext hook without a provider?",
        "human_words_stopwords_removal_lemmatization": "correct form use usecontext hook without enclosing provider ? see simple us jedicontext.provider . modified removed provider usecontext hook still work . consequence using usecontext hook without provider ?",
        "title_stopwords_removal_lemmatization": "question : usecontext hook used without provider ?"
    },
    {
        "issue_id": 551851106,
        "title": "Question: React apollo hooks fails after adding react-native to monorepo",
        "label": [
            "Resolution: Invalid",
            "Type: Question"
        ],
        "date": "2020-01-19T01:43:43Z",
        "status": "closed",
        "description": "I am trying to create a React web app and React-native app with monorepo by using yarn workspaces. So I created web and controllers and it works fine. I was able to make graphql queries to my apollo-express server. But, after adding react-native application I see this:\r\n[![enter image description here][1]][1]\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/KbvYG.png\r\n\r\nI am 100% that I am not breaking any react hooks rules because before adding react-native application it was work fine.\r\n\r\nIs there any way how can I solve it?\r\n\r\nApollo controller\r\n\r\n    import { useQuery } from \"@apollo/react-hooks\";\r\n    import gql from \"graphql-tag\";\r\n    \r\n    export const useHelloQuery = () => useQuery(\r\n         gql`\r\n             {\r\n                 hello\r\n             }\r\n         `\r\n    )\r\n\r\n\r\nReact component:\r\n\r\n    function Test() {\r\n         const data = useHelloQuery();\r\n    \r\n         return (\r\n              <Text>awesoe</Text>\r\n         );\r\n    }\r\n    \r\n\r\nbefore adding react-native it was exactly same",
        "remove_template_description": "I am trying to create a React web app and React-native app with monorepo by using yarn workspaces. So I created web and controllers and it works fine. I was able to make graphql queries to my apollo-express server. But, after adding react-native application I see this:  [![enter image description here][1]][1]        [1]: https://i.stack.imgur.com/KbvYG.png    I am 100% that I am not breaking any react hooks rules because before adding react-native application it was work fine.    Is there any way how can I solve it?    Apollo controller        import { useQuery } from \"@apollo/react-hooks\";      import gql from \"graphql-tag\";            export const useHelloQuery = () => useQuery(           gql`               {                   hello               }           `      )      React component:        function Test() {           const data = useHelloQuery();                 return (                <Text>awesoe</Text>           );      }          before adding react-native it was exactly same",
        "human_words": "I am trying to create a React web app and React-native app with monorepo by using yarn workspaces. So I created web and controllers and it works fine. I was able to make graphql queries to my apollo-express server. But, after adding react-native application I see this:  [![enter image description here][1]][1]        [1]: https://i.stack.imgur.com/KbvYG.png    I am 100% that I am not breaking any react hooks rules because before adding react-native application it was work fine.    Is there any way how can I solve it?    Apollo controller        import { useQuery } from \"@apollo/react-hooks\";      import gql from \"graphql-tag\";            export const useHelloQuery = () => useQuery(           gql`               {                   hello               }           `      )      React component:        function Test() {           const data = useHelloQuery();                 return (                <Text>awesoe</Text>           );      }          before adding react-native it was exactly same",
        "human_words_regrex": "I am trying to create a React web app and React-native app with monorepo by using yarn workspaces. So I created web and controllers and it works fine. I was able to make graphql queries to my apollo-express server. But, after adding react-native application I see this: [![enter image description here][1]][1] [1]:  I am 100% that I am not breaking any react hooks rules because before adding react-native application it was work fine. Is there any way how can I solve it? Apollo controller import { useQuery } from \"@apollo/react-hooks\"; import gql from \"graphql-tag\"; export const useHelloQuery = () => useQuery( gql` { hello } ` ) React component: function Test() { const data = useHelloQuery(); return ( awesoe ); } before adding react-native it was exactly same",
        "human_words_stopwords_removal_lemmatization": "trying create react web app react-native app monorepo using yarn workspace . created web controller work fine . able make graphql query apollo-express server . , adding react-native application see : [ ! [ enter image description ] [ 1 ] ] [ 1 ] [ 1 ] : 100 % breaking react hook rule adding react-native application work fine . way solve ? apollo controller import { usequery } `` @ apollo/react-hooks '' ; import gql `` graphql-tag '' ; export const usehelloquery = ( ) = > usequery ( gql ` { hello } ` ) react component : function test ( ) { const data = usehelloquery ( ) ; return ( awesoe ) ; } adding react-native exactly",
        "title_stopwords_removal_lemmatization": "question : react apollo hook fails adding react-native monorepo"
    },
    {
        "issue_id": 551383294,
        "title": "Question: I have a lot of very nice and smart vuejs components. is there a way to use it in an react project? ",
        "label": [
            "Resolution: Invalid",
            "Type: Question"
        ],
        "date": "2020-01-17T12:17:34Z",
        "status": "closed",
        "description": "\ud83d\udea8 This issue tracker is not for questions. \ud83d\udea8\r\n\r\nAs it happens, support requests that are created as issues are likely to be closed. We want to make sure you are able to find the help you seek. Please take a look at the following resources.\r\n\r\n## Coding Questions\r\n\r\nIf you have a coding question related to CLOSE THIS PAGE - NOW and CLOSE THIS PAGE - NOW DOM, it might be better suited for Stack Overflow. It's a great place to browse through frequent questions about using CLOSE THIS PAGE - NOW, as well as ask for help with specific questions.\r\n\r\nhttps://stackoverflow.com/questions/tagged/CLOSE THIS PAGE - NOW\r\n\r\n## Talk to other CLOSE THIS PAGE - NOW developers\r\n\r\nThere are many online forums which are a great place for discussion about best practices and application architecture as well as the future of CLOSE THIS PAGE - NOW.\r\n\r\nhttps://CLOSE THIS PAGE - NOWjs.org/community/support.html#popular-discussion-forums\r\n\r\n## Proposals\r\n\r\nIf you'd like to discuss topics related to the future of CLOSE THIS PAGE - NOW, or would like to propose a new feature or change before sending a pull request, please check out the discussions and proposals repository.\r\n\r\nhttps://github.com/CLOSE THIS PAGE - NOWjs/rfcs\r\n",
        "remove_template_description": "\ud83d\udea8 This issue tracker is not for questions. \ud83d\udea8    As it happens, support requests that are created as issues are likely to be closed. We want to make sure you are able to find the help you seek. Please take a look at the following resources.    ## Coding Questions    If you have a coding question related to CLOSE THIS PAGE - NOW and CLOSE THIS PAGE - NOW DOM, it might be better suited for Stack Overflow. It's a great place to browse through frequent questions about using CLOSE THIS PAGE - NOW, as well as ask for help with specific questions.    https://stackoverflow.com/questions/tagged/CLOSE THIS PAGE - NOW    ## Talk to other CLOSE THIS PAGE - NOW developers    There are many online forums which are a great place for discussion about best practices and application architecture as well as the future of CLOSE THIS PAGE - NOW.    https://CLOSE THIS PAGE - NOWjs.org/community/support.html#popular-discussion-forums    ## Proposals    If you'd like to discuss topics related to the future of CLOSE THIS PAGE - NOW, or would like to propose a new feature or change before sending a pull request, please check out the discussions and proposals repository.    https://github.com/CLOSE THIS PAGE - NOWjs/rfcs",
        "human_words": "\ud83d\udea8 This issue tracker is not for questions. \ud83d\udea8    As it happens, support requests that are created as issues are likely to be closed. We want to make sure you are able to find the help you seek. Please take a look at the following resources.    ## Coding Questions    If you have a coding question related to CLOSE THIS PAGE - NOW and CLOSE THIS PAGE - NOW DOM, it might be better suited for Stack Overflow. It's a great place to browse through frequent questions about using CLOSE THIS PAGE - NOW, as well as ask for help with specific questions.    https://stackoverflow.com/questions/tagged/CLOSE THIS PAGE - NOW    ## Talk to other CLOSE THIS PAGE - NOW developers    There are many online forums which are a great place for discussion about best practices and application architecture as well as the future of CLOSE THIS PAGE - NOW.    https://CLOSE THIS PAGE - NOWjs.org/community/support.html#popular-discussion-forums    ## Proposals    If you'd like to discuss topics related to the future of CLOSE THIS PAGE - NOW, or would like to propose a new feature or change before sending a pull request, please check out the discussions and proposals repository.    https://github.com/CLOSE THIS PAGE - NOWjs/rfcs",
        "human_words_regrex": "\ud83d\udea8 This issue tracker is not for questions. \ud83d\udea8 As it happens, support requests that are created as issues are likely to be closed. We want to make sure you are able to find the help you seek. Please take a look at the following resources. ## Coding Questions If you have a coding question related to CLOSE THIS PAGE - NOW and CLOSE THIS PAGE - NOW DOM, it might be better suited for Stack Overflow. It's a great place to browse through frequent questions about using CLOSE THIS PAGE - NOW, as well as ask for help with specific questions.  THIS PAGE - NOW ## Talk to other CLOSE THIS PAGE - NOW developers There are many online forums which are a great place for discussion about best practices and application architecture as well as the future of CLOSE THIS PAGE - NOW.  THIS PAGE - NOWjs.org/community/support.html#popular-discussion-forums ## Proposals If you'd like to discuss topics related to the future of CLOSE THIS PAGE - NOW, or would like to propose a new feature or change before sending a pull request, please check out the discussions and proposals repository.  THIS PAGE - NOWjs/rfcs",
        "human_words_stopwords_removal_lemmatization": "\ud83d\udea8 issue tracker question . \ud83d\udea8 happens , support request created issue likely closed . want make sure able find help seek . please take look following resource . # # coding question coding question related close page - close page - dom , might better suited stack overflow . 's great place browse frequent question using close page - , well ask help specific question . page - # # talk close page - developer many online forum great place discussion best practice application architecture well future close page - . page - nowjs.org/community/support.html # popular-discussion-forums # # proposal 'd like discus topic related future close page - , would like propose new feature change sending pull request , please check discussion proposal repository . page - nowjs/rfcs",
        "title_stopwords_removal_lemmatization": "question : lot nice smart vuejs component . way use react project ?"
    },
    {
        "issue_id": 550717611,
        "title": "Question: react lib context overrides app context",
        "label": [
            "Resolution: Invalid",
            "Type: Question"
        ],
        "date": "2020-01-16T10:33:57Z",
        "status": "closed",
        "description": "Hi, I believe that this can potentially be an issue, though I'm not sure.\r\n\r\nI was wondering about good patterns concerning the react context.\r\n\r\nLet's get a public library, for example `react-intl` that exposes a Provider (IntlProvider).\r\nLet's create a library `barLib` that uses `react-intl` to manage translations internally and that also exposes a `Provider`.\r\nNow let's imagine I create a web app and use both `barLib` and `react-intl`.\r\n\r\nI don't expect the `barLib` to ever override my react-intl context, because i'm not aware it uses internally the `react-intl` lib.\r\nBut the `barLib` can accidentally override the react-intl context => https://codesandbox.io/s/embedded-contexts-test-z8e7b\r\n\r\nThis kinda breaks the isolation of libs IMO.\r\n\r\nI see several solutions :\r\n- Don't use an other lib context in the `barLib` (pretty extreme)\r\n- Check that there is not already an intl context in the `barLib`, if so merge the context values ?\r\n\r\nI'm not convinced with either solutions, what do you guys think about it ?",
        "remove_template_description": "Hi, I believe that this can potentially be an issue, though I'm not sure.    I was wondering about good patterns concerning the react context.    Let's get a public library, for example `react-intl` that exposes a Provider (IntlProvider).  Let's create a library `barLib` that uses `react-intl` to manage translations internally and that also exposes a `Provider`.  Now let's imagine I create a web app and use both `barLib` and `react-intl`.    I don't expect the `barLib` to ever override my react-intl context, because i'm not aware it uses internally the `react-intl` lib.  But the `barLib` can accidentally override the react-intl context => https://codesandbox.io/s/embedded-contexts-test-z8e7b    This kinda breaks the isolation of libs IMO.    I see several solutions :  - Don't use an other lib context in the `barLib` (pretty extreme)  - Check that there is not already an intl context in the `barLib`, if so merge the context values ?    I'm not convinced with either solutions, what do you guys think about it ?",
        "human_words": "Hi, I believe that this can potentially be an issue, though I'm not sure.    I was wondering about good patterns concerning the react context.    Let's get a public library, for example `react-intl` that exposes a Provider (IntlProvider).  Let's create a library `barLib` that uses `react-intl` to manage translations internally and that also exposes a `Provider`.  Now let's imagine I create a web app and use both `barLib` and `react-intl`.    I don't expect the `barLib` to ever override my react-intl context, because i'm not aware it uses internally the `react-intl` lib.  But the `barLib` can accidentally override the react-intl context => https://codesandbox.io/s/embedded-contexts-test-z8e7b    This kinda breaks the isolation of libs IMO.    I see several solutions :  - Don't use an other lib context in the `barLib` (pretty extreme)  - Check that there is not already an intl context in the `barLib`, if so merge the context values ?    I'm not convinced with either solutions, what do you guys think about it ?",
        "human_words_regrex": "Hi, I believe that this can potentially be an issue, though I'm not sure. I was wondering about good patterns concerning the react context. Let's get a public library, for example `react-intl` that exposes a Provider (IntlProvider). Let's create a library `barLib` that uses `react-intl` to manage translations internally and that also exposes a `Provider`. Now let's imagine I create a web app and use both `barLib` and `react-intl`. I don't expect the `barLib` to ever override my react-intl context, because i'm not aware it uses internally the `react-intl` lib. But the `barLib` can accidentally override the react-intl context =>  This kinda breaks the isolation of libs IMO. I see several solutions : - Don't use an other lib context in the `barLib` (pretty extreme) - Check that there is not already an intl context in the `barLib`, if so merge the context values ? I'm not convinced with either solutions, what do you guys think about it ?",
        "human_words_stopwords_removal_lemmatization": "hi , believe potentially issue , though 'm sure . wondering good pattern concerning react context . let 's get public library , example ` react-intl ` expose provider ( intlprovider ) . let 's create library ` barlib ` us ` react-intl ` manage translation internally also expose ` provider ` . let 's imagine create web app use ` barlib ` ` react-intl ` . n't expect ` barlib ` ever override react-intl context , 'm aware us internally ` react-intl ` lib . ` barlib ` accidentally override react-intl context = > kinda break isolation libs imo . see several solution : - n't use lib context ` barlib ` ( pretty extreme ) - check already intl context ` barlib ` , merge context value ? 'm convinced either solution , guy think ?",
        "title_stopwords_removal_lemmatization": "question : react lib context override app context"
    },
    {
        "issue_id": 550699542,
        "title": "Bug: useRef can not return a persist ref object",
        "label": [
            "Type: Question"
        ],
        "date": "2020-01-16T10:02:14Z",
        "status": "closed",
        "description": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version:\r\n\r\n16.12.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Click Button\uff0cView print data\r\n2. Click Button\uff0cView print data\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\nhttps://codesandbox.io/s/kind-fog-mce7w\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nEvery time you click the button, the printed data will change\r\n\r\n## The expected behavior\r\nEvery time I click the button, the printed data should be an empty object",
        "remove_template_description": "<!--    Please provide a clear and concise description of what the bug is. Include    screenshots if needed. Please test using the latest version of the relevant    React packages to make sure your issue has not already been fixed.  -->    React version:    16.12.0        1. Click Button\uff0cView print data  2. Click Button\uff0cView print data    <!--    Your bug will get fixed much faster if we can run your code and it doesn't    have dependencies other than React. Issues without reproduction steps or    code examples may be immediately closed as not actionable.  -->    Link to code example:  https://codesandbox.io/s/kind-fog-mce7w    <!--    Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a    repository on GitHub, or provide a minimal code example that reproduces the    problem. You may provide a screenshot of the application if you think it is    relevant to your bug report. Here are some tips for providing a minimal    example: https://stackoverflow.com/help/mcve.  -->      Every time you click the button, the printed data will change      Every time I click the button, the printed data should be an empty object",
        "human_words": "<!--    Please provide a clear and concise description of what the bug is. Include    screenshots if needed. Please test using the latest version of the relevant    React packages to make sure your issue has not already been fixed.  -->    React version:    16.12.0        1. Click Button\uff0cView print data  2. Click Button\uff0cView print data    <!--    Your bug will get fixed much faster if we can run your code and it doesn't    have dependencies other than React. Issues without reproduction steps or    code examples may be immediately closed as not actionable.  -->    Link to code example:  https://codesandbox.io/s/kind-fog-mce7w    <!--    Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a    repository on GitHub, or provide a minimal code example that reproduces the    problem. You may provide a screenshot of the application if you think it is    relevant to your bug report. Here are some tips for providing a minimal    example: https://stackoverflow.com/help/mcve.  -->      Every time you click the button, the printed data will change      Every time I click the button, the printed data should be an empty object",
        "human_words_regrex": " React version: 16.12.0 1. Click Button\uff0cView print data 2. Click Button\uff0cView print data  Link to code example:   Every time you click the button, the printed data will change Every time I click the button, the printed data should be an empty object",
        "human_words_stopwords_removal_lemmatization": "react version : 16.12.0 1. click button\uff0cview print data 2. click button\uff0cview print data link code example : every time click button , printed data change every time click button , printed data empty object",
        "title_stopwords_removal_lemmatization": "bug : useref return persist ref object"
    },
    {
        "issue_id": 549942112,
        "title": "Question: why cann't I set echarts instance using useState?",
        "label": [
            "Resolution: Invalid",
            "Type: Question"
        ],
        "date": "2020-01-15T03:23:40Z",
        "status": "closed",
        "description": "\r\n\r\n## Coding Questions\r\ni try to store the echart instance using useState, but after `setInstance`, `instance` is always undefined\r\n```\r\nconst [instance, setInstance] = useState<ECharts | undefined>(undefined);\r\n\r\nconst chartInstance = echarts.init(root.current);\r\n    setInstance(prev => {\r\n        console.log('prev instance', prev); // first time: undefined, then Echarts instance\r\n        return prev || chartInstance;\r\n    });\r\n    console.log('instance: ', instance, chartInstance); // instance is always undefined\r\n```\r\n\r\n\r\n",
        "remove_template_description": "## Coding Questions  i try to store the echart instance using useState, but after `setInstance`, `instance` is always undefined  ```  const [instance, setInstance] = useState<ECharts | undefined>(undefined);    const chartInstance = echarts.init(root.current);      setInstance(prev => {          console.log('prev instance', prev); // first time: undefined, then Echarts instance          return prev || chartInstance;      });      console.log('instance: ', instance, chartInstance); // instance is always undefined  ```",
        "human_words": "## Coding Questions  i try to store the echart instance using useState, but after `setInstance`, `instance` is always undefined  ",
        "human_words_regrex": "## Coding Questions i try to store the echart instance using useState, but after `setInstance`, `instance` is always undefined ",
        "human_words_stopwords_removal_lemmatization": "# # coding question try store echart instance using usestate , ` setinstance ` , ` instance ` always undefined",
        "title_stopwords_removal_lemmatization": "question : n't set echarts instance using usestate ?"
    },
    {
        "issue_id": 549897088,
        "title": "the worst arabic translation ",
        "label": [
            "Resolution: Invalid",
            "Type: Question"
        ],
        "date": "2020-01-15T00:31:27Z",
        "status": "closed",
        "description": "language and translation\r\ni'm sure that you translated your react site by google \r\nthe worst result at all \r\ni hope you correct it \r\n\r\nhttps://github.com/reactjs/rfcs\r\n",
        "remove_template_description": "language and translation  i'm sure that you translated your react site by google   the worst result at all   i hope you correct it     https://github.com/reactjs/rfcs",
        "human_words": "language and translation  i'm sure that you translated your react site by google   the worst result at all   i hope you correct it     https://github.com/reactjs/rfcs",
        "human_words_regrex": "language and translation i'm sure that you translated your react site by google the worst result at all i hope you correct it ",
        "human_words_stopwords_removal_lemmatization": "language translation 'm sure translated react site google worst result hope correct",
        "title_stopwords_removal_lemmatization": "worst arabic translation"
    },
    {
        "issue_id": 548737939,
        "title": "help~When I use React.createElement directly and How to pack the component?",
        "label": [
            "Resolution: Invalid",
            "Type: Question"
        ],
        "date": "2020-01-13T06:51:35Z",
        "status": "closed",
        "description": "hello all.\r\n\r\nI was met a problem when I published a react component, I need to help and discuss with you all \r\nI am going to write a component to load `React Component from CDN` and make it like a wrapper component.\r\n\r\n```jsx\r\nimport React, { Component } from 'react';\r\nimport scriptjs from 'scriptjs';\r\n\r\nconst DEV_SCRIPT =\r\n  'https://dev/cdn/resource/phoenix-header.js';\r\nconst PROD_SCRIPT =\r\n  'https://cdn/resource/phoenix-header.js';\r\n\r\nclass PhoenixHeaderWrapper extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.type = null;\r\n    this.scriptUrl =\r\n      props.scriptUrl || (props.env !== 'PROD' ? DEV_SCRIPT : PROD_SCRIPT);\r\n    this.state = {\r\n      cmp: null,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    scriptjs(this.scriptUrl, () => {\r\n      this.type = window.PhoenixHeader;\r\n      this.createOrUpdateComponent();\r\n    });\r\n  }\r\n\r\n  createOrUpdateComponent() {\r\n    const { scriptUrl, ...otherProps } = this.props;\r\n    if (!this.type) {\r\n      console.error('load component failed');\r\n      return;\r\n    }\r\n    const cmp = React.createElement(this.type, otherProps || {});  // this is point\r\n    this.setState({ cmp });\r\n  }\r\n\r\n  render() {\r\n    const { cmp } = this.state;\r\n    return cmp;\r\n  }\r\n}\r\n\r\nPhoenixHeaderWrapper.defaultProps = {\r\n  scriptUrl: '',\r\n  env: 'PROD',\r\n};\r\n\r\nexport default PhoenixHeaderWrapper;\r\n\r\n```\r\n\r\nand then, I do it just like do a normal react component that I was set the webpack config like below:\r\n\r\n```js\r\n// PhoenixHeader\r\n  output: {\r\n    publicPath: './',\r\n    filename: 'phoenix-header.js',\r\n    path: paths.appBuild,\r\n    library: 'PhoenixHeader',\r\n    libraryTarget: 'commonjs2',\r\n    libraryExport: 'default',\r\n  },\r\n  mode: 'production',\r\n  externals: {\r\n    react: {\r\n      commonjs: 'react',\r\n      commonjs2: 'react',\r\n      amd: 'react',\r\n      root: 'React',\r\n    },\r\n    ['react-dom']: {\r\n      commonjs: 'react-dom',\r\n      commonjs2: 'react-dom',\r\n      amd: 'react-dom',\r\n      root: 'ReactDom',\r\n    },\r\n  },\r\n```\r\n\r\nand then, I run the `npm run build && npm publish` to publish it.\r\n\r\nIn my own object which use the PhoenixHeader component as a npm package. \r\n\r\n```jsx\r\n// app.jsx\r\nimport React from 'react';\r\nimport PhoenixHeader from 'phoenix-header';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <PhoenixHeader />\r\n      <header className=\"App-header\">\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n```\r\nafter `npm start`, it show me a error:\r\n![image](https://user-images.githubusercontent.com/12051024/72236068-4d270180-3610-11ea-9e62-7a69a2972e15.png)\r\n\r\n**That it is my confusion is, why `createElement` not in this scope.**\r\n\r\nso I try to make react set into global:\r\n```js\r\nwindow.React = React;\r\n```\r\n\r\nYes, it's work for me.\r\n\r\n**But someone would like to tell me why need to make React set into global?**\r\n\r\n**And am I need to build this wrapper component which do not external the react when I was build?**\r\n\r\nlet's discuss or give me more suggest about this wrapper component please  \ud83d\ude4f",
        "remove_template_description": "hello all.    I was met a problem when I published a react component, I need to help and discuss with you all   I am going to write a component to load `React Component from CDN` and make it like a wrapper component.    ```jsx  import React, { Component } from 'react';  import scriptjs from 'scriptjs';    const DEV_SCRIPT =    'https://dev/cdn/resource/phoenix-header.js';  const PROD_SCRIPT =    'https://cdn/resource/phoenix-header.js';    class PhoenixHeaderWrapper extends Component {    constructor(props) {      super(props);      this.type = null;      this.scriptUrl =        props.scriptUrl || (props.env !== 'PROD' ? DEV_SCRIPT : PROD_SCRIPT);      this.state = {        cmp: null,      };    }      componentDidMount() {      scriptjs(this.scriptUrl, () => {        this.type = window.PhoenixHeader;        this.createOrUpdateComponent();      });    }      createOrUpdateComponent() {      const { scriptUrl, ...otherProps } = this.props;      if (!this.type) {        console.error('load component failed');        return;      }      const cmp = React.createElement(this.type, otherProps || {});  // this is point      this.setState({ cmp });    }      render() {      const { cmp } = this.state;      return cmp;    }  }    PhoenixHeaderWrapper.defaultProps = {    scriptUrl: '',    env: 'PROD',  };    export default PhoenixHeaderWrapper;    ```    and then, I do it just like do a normal react component that I was set the webpack config like below:    ```js  // PhoenixHeader    output: {      publicPath: './',      filename: 'phoenix-header.js',      path: paths.appBuild,      library: 'PhoenixHeader',      libraryTarget: 'commonjs2',      libraryExport: 'default',    },    mode: 'production',    externals: {      react: {        commonjs: 'react',        commonjs2: 'react',        amd: 'react',        root: 'React',      },      ['react-dom']: {        commonjs: 'react-dom',        commonjs2: 'react-dom',        amd: 'react-dom',        root: 'ReactDom',      },    },  ```    and then, I run the `npm run build && npm publish` to publish it.    In my own object which use the PhoenixHeader component as a npm package.     ```jsx  // app.jsx  import React from 'react';  import PhoenixHeader from 'phoenix-header';  import './App.css';    function App() {    return (      <div className=\"App\">        <PhoenixHeader />        <header className=\"App-header\">          <p>            Edit <code>src/App.js</code> and save to reload.          </p>          <a            className=\"App-link\"            href=\"https://reactjs.org\"            target=\"_blank\"            rel=\"noopener noreferrer\"          >            Learn React          </a>        </header>      </div>    );  }    export default App;    ```  after `npm start`, it show me a error:  ![image](https://user-images.githubusercontent.com/12051024/72236068-4d270180-3610-11ea-9e62-7a69a2972e15.png)    **That it is my confusion is, why `createElement` not in this scope.**    so I try to make react set into global:  ```js  window.React = React;  ```    Yes, it's work for me.    **But someone would like to tell me why need to make React set into global?**    **And am I need to build this wrapper component which do not external the react when I was build?**    let's discuss or give me more suggest about this wrapper component please  \ud83d\ude4f",
        "human_words": "hello all.    I was met a problem when I published a react component, I need to help and discuss with you all   I am going to write a component to load `React Component from CDN` and make it like a wrapper component.        and then, I do it just like do a normal react component that I was set the webpack config like below:        and then, I run the `npm run build && npm publish` to publish it.    In my own object which use the PhoenixHeader component as a npm package.       after `npm start`, it show me a error:  ![image](https://user-images.githubusercontent.com/12051024/72236068-4d270180-3610-11ea-9e62-7a69a2972e15.png)    **That it is my confusion is, why `createElement` not in this scope.**    so I try to make react set into global:      Yes, it's work for me.    **But someone would like to tell me why need to make React set into global?**    **And am I need to build this wrapper component which do not external the react when I was build?**    let's discuss or give me more suggest about this wrapper component please  \ud83d\ude4f",
        "human_words_regrex": "hello all. I was met a problem when I published a react component, I need to help and discuss with you all I am going to write a component to load `React Component from CDN` and make it like a wrapper component. and then, I do it just like do a normal react component that I was set the webpack config like below: and then, I run the `npm run build && npm publish` to publish it. In my own object which use the PhoenixHeader component as a npm package. after `npm start`, it show me a error: ! **That it is my confusion is, why `createElement` not in this scope.** so I try to make react set into global: Yes, it's work for me. **But someone would like to tell me why need to make React set into global?** **And am I need to build this wrapper component which do not external the react when I was build?** let's discuss or give me more suggest about this wrapper component please \ud83d\ude4f",
        "human_words_stopwords_removal_lemmatization": "hello . met problem published react component , need help discus going write component load ` react component cdn ` make like wrapper component . , like normal react component set webpack config like : , run ` npm run build & & npm publish ` publish . object use phoenixheader component npm package . ` npm start ` , show error : ! * * confusion , ` createelement ` scope . * * try make react set global : yes , 's work . * * someone would like tell need make react set global ? * * * * need build wrapper component external react build ? * * let 's discus give suggest wrapper component please \ud83d\ude4f",
        "title_stopwords_removal_lemmatization": "help~when use react.createelement directly pack component ?"
    },
    {
        "issue_id": 547473102,
        "title": "In React and react-dom 16 Upgrade, getting error: Uncaught TypeError: Cannot read property 'input' of undefined",
        "label": [
            "Type: Question"
        ],
        "date": "2020-01-09T13:19:55Z",
        "status": "closed",
        "description": "I am trying to upgrade my Reactjs and react-dom versions from v15.6.2 to ^v16.0.0 and am getting the above error.\r\n\r\nClicking through the error in the console, I see that the _React$DOM is undefined. I have followed all the migration instructions on the React.org site and looked extensively, but cannot seem to get rid of this error on versions of react and react-dom of v16 and above.\r\n\r\nAny ideas on what that issue is and how I can resolve it?\r\n\r\nBelow are my package.json and webpack.config. They are pre-upgrade to v16, but I have tried adding core-js per Reactjs.org.\r\n\r\n```\r\nvar _React$DOM = _react2.default.DOM,\r\n    input = _React$DOM.input, <<< Here is the highlighted error\r\n    select = _React$DOM.select,\r\n    textarea = _React$DOM.textarea;\r\nMy dependencies in package.json:\r\n```\r\n\r\n\r\n ```\r\n \"devDependencies\": {\r\n    \"babel-loader\": \"^7.1.5\",\r\n    \"babel-preset-es2015\": \"^6.1.18\",\r\n    \"babel-preset-react\": \"^6.1.18\",\r\n    \"babel-preset-stage-0\": \"^6.24.1\",\r\n    \"chai\": \"^4.1.2\",\r\n    \"chai-jquery\": \"^2.0.0\",\r\n    \"css-loader\": \"^1.0.0\",\r\n    \"eslint-config-rallycoding\": \"^3.2.0\",\r\n    \"mocha\": \"^5.2.0\",\r\n    \"react-addons-test-utils\": \"^15.0.1\",\r\n    \"style-loader\": \"^0.21.0\",\r\n    \"webpack-cli\": \"^3.1.0\",\r\n    \"webpack-dev-server\": \"^3.1.8\"\r\n  },\r\n  \"dependencies\": {\r\n    \"actioncable\": \"^5.2.4\",\r\n    \"axios\": \"^0.18.0\",\r\n    \"babel-core\": \"^6.2.1\",\r\n    \"babel-polyfill\": \"^6.26.0\",\r\n    \"babel-preset-stage-1\": \"^6.1.18\",\r\n    \"cloudinary-core\": \"^2.5.0\",\r\n    \"cloudinary-react\": \"^1.0.6\",\r\n    \"dotenv-webpack\": \"^1.5.5\",\r\n    \"file-loader\": \"^2.0.0\",\r\n    \"jquery\": \"^3.3.1\",\r\n    \"jsdom\": \"^12.0.0\",\r\n    \"lodash\": \"^4.1.0\",\r\n    \"prop-types\": \"^15.6.1\",\r\n    \"react\": \"^15.6.2\",\r\n    \"react-bootstrap\": \"^0.32.1\",\r\n    \"react-day-picker\": \"^7.1.6\",\r\n    \"react-dom\": \"^15.6.2\",\r\n    \"react-dropzone\": \"^5.0.1\",\r\n    \"react-helmet\": \"^5.2.0\",\r\n    \"react-redux\": \"^5.0.7\",\r\n    \"react-router-dom\": \"^4.3.1\",\r\n    \"react-stripe-elements\": \"^2.0.1\",\r\n    \"redux\": \"^4.0.0\",\r\n    \"redux-form\": \"^7.4.2\",\r\n    \"redux-thunk\": \"^2.2.0\",\r\n    \"sha1\": \"^1.1.1\",\r\n    \"webpack\": \"^4.17.2\"\r\n  }\r\n```\r\nMy webpack.config:\r\n\r\n```\r\nconst webpack = require('webpack');\r\nconst Dotenv = require('dotenv-webpack');\r\nconst raf = require('raf')\r\n\r\nconst path = require('path');\r\n\r\n\r\nmodule.exports = {\r\n  mode: 'none',\r\n  watch: false,\r\n  entry: [\r\n    'babel-polyfill', './src/index.js'\r\n  ],\r\n  output: {\r\n    path: __dirname,\r\n    publicPath: '/',\r\n    filename: 'bundle.js'\r\n  },\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.(jpg|png|svg)$/,\r\n        use: [\r\n          {\r\n            loader: 'file-loader',\r\n            options: {\r\n              name: '[path][name].[hash].[ext]'\r\n            }\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        test: /\\.js?$/,\r\n        exclude: /node_modules/,\r\n        use:\r\n          { loader: 'babel-loader',\r\n        options: {\r\n         presets: ['react', 'es2015', 'stage-0']\r\n       }\r\n      }\r\n    }\r\n\r\n    ] // end of loaders\r\n\r\n  devServer: {\r\n    historyApiFallback: true,\r\n    contentBase: './'\r\n  },\r\n  plugins: [\r\n    new webpack.DefinePlugin({\r\n      'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV)\r\n    }),\r\n    new Dotenv()\r\n  ]\r\n};\r\n```",
        "remove_template_description": "I am trying to upgrade my Reactjs and react-dom versions from v15.6.2 to ^v16.0.0 and am getting the above error.    Clicking through the error in the console, I see that the _React$DOM is undefined. I have followed all the migration instructions on the React.org site and looked extensively, but cannot seem to get rid of this error on versions of react and react-dom of v16 and above.    Any ideas on what that issue is and how I can resolve it?    Below are my package.json and webpack.config. They are pre-upgrade to v16, but I have tried adding core-js per Reactjs.org.    ```  var _React$DOM = _react2.default.DOM,      input = _React$DOM.input, <<< Here is the highlighted error      select = _React$DOM.select,      textarea = _React$DOM.textarea;  My dependencies in package.json:  ```       ```   \"devDependencies\": {      \"babel-loader\": \"^7.1.5\",      \"babel-preset-es2015\": \"^6.1.18\",      \"babel-preset-react\": \"^6.1.18\",      \"babel-preset-stage-0\": \"^6.24.1\",      \"chai\": \"^4.1.2\",      \"chai-jquery\": \"^2.0.0\",      \"css-loader\": \"^1.0.0\",      \"eslint-config-rallycoding\": \"^3.2.0\",      \"mocha\": \"^5.2.0\",      \"react-addons-test-utils\": \"^15.0.1\",      \"style-loader\": \"^0.21.0\",      \"webpack-cli\": \"^3.1.0\",      \"webpack-dev-server\": \"^3.1.8\"    },    \"dependencies\": {      \"actioncable\": \"^5.2.4\",      \"axios\": \"^0.18.0\",      \"babel-core\": \"^6.2.1\",      \"babel-polyfill\": \"^6.26.0\",      \"babel-preset-stage-1\": \"^6.1.18\",      \"cloudinary-core\": \"^2.5.0\",      \"cloudinary-react\": \"^1.0.6\",      \"dotenv-webpack\": \"^1.5.5\",      \"file-loader\": \"^2.0.0\",      \"jquery\": \"^3.3.1\",      \"jsdom\": \"^12.0.0\",      \"lodash\": \"^4.1.0\",      \"prop-types\": \"^15.6.1\",      \"react\": \"^15.6.2\",      \"react-bootstrap\": \"^0.32.1\",      \"react-day-picker\": \"^7.1.6\",      \"react-dom\": \"^15.6.2\",      \"react-dropzone\": \"^5.0.1\",      \"react-helmet\": \"^5.2.0\",      \"react-redux\": \"^5.0.7\",      \"react-router-dom\": \"^4.3.1\",      \"react-stripe-elements\": \"^2.0.1\",      \"redux\": \"^4.0.0\",      \"redux-form\": \"^7.4.2\",      \"redux-thunk\": \"^2.2.0\",      \"sha1\": \"^1.1.1\",      \"webpack\": \"^4.17.2\"    }  ```  My webpack.config:    ```  const webpack = require('webpack');  const Dotenv = require('dotenv-webpack');  const raf = require('raf')    const path = require('path');      module.exports = {    mode: 'none',    watch: false,    entry: [      'babel-polyfill', './src/index.js'    ],    output: {      path: __dirname,      publicPath: '/',      filename: 'bundle.js'    },    module: {      rules: [        {          test: /\\.(jpg|png|svg)$/,          use: [            {              loader: 'file-loader',              options: {                name: '[path][name].[hash].[ext]'              }            }          ]        },        {          test: /\\.js?$/,          exclude: /node_modules/,          use:            { loader: 'babel-loader',          options: {           presets: ['react', 'es2015', 'stage-0']         }        }      }        ] // end of loaders      devServer: {      historyApiFallback: true,      contentBase: './'    },    plugins: [      new webpack.DefinePlugin({        'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV)      }),      new Dotenv()    ]  };  ```",
        "human_words": "I am trying to upgrade my Reactjs and react-dom versions from v15.6.2 to ^v16.0.0 and am getting the above error.    Clicking through the error in the console, I see that the _React$DOM is undefined. I have followed all the migration instructions on the React.org site and looked extensively, but cannot seem to get rid of this error on versions of react and react-dom of v16 and above.    Any ideas on what that issue is and how I can resolve it?    Below are my package.json and webpack.config. They are pre-upgrade to v16, but I have tried adding core-js per Reactjs.org.             My webpack.config:    ",
        "human_words_regrex": "I am trying to upgrade my Reactjs and react-dom versions from v15.6.2 to ^v16.0.0 and am getting the above error. Clicking through the error in the console, I see that the _React$DOM is undefined. I have followed all the migration instructions on the React.org site and looked extensively, but cannot seem to get rid of this error on versions of react and react-dom of v16 and above. Any ideas on what that issue is and how I can resolve it? Below are my package.json and webpack.config. They are pre-upgrade to v16, but I have tried adding core-js per Reactjs.org. My webpack.config: ",
        "human_words_stopwords_removal_lemmatization": "trying upgrade reactjs react-dom version v15.6.2 ^v16.0.0 getting error . clicking error console , see _react $ dom undefined . followed migration instruction react.org site looked extensively , seem get rid error version react react-dom v16 . idea issue resolve ? package.json webpack.config . pre-upgrade v16 , tried adding core-js per reactjs.org . webpack.config :",
        "title_stopwords_removal_lemmatization": "react react-dom 16 upgrade , getting error : uncaught typeerror : read property 'input ' undefined"
    },
    {
        "issue_id": 545168838,
        "title": "Rendering React component on server to take a screenshot of it",
        "label": [
            "Type: Question"
        ],
        "date": "2020-01-03T21:21:32Z",
        "status": "closed",
        "description": "My React application has a list of to do lists like this:\r\n\r\n<img width=\"1082\" alt=\"figma_canvases\" src=\"https://user-images.githubusercontent.com/12554095/71749785-47206c00-2e2b-11ea-8d0c-5a82ceba1b05.png\">\r\n\r\n> Replace the Figma canvas preview images with todo lists above.\r\n\r\nIn the list of todo lists, I'd like to include a preview of each list as well as its name.\r\n\r\nHere's what I thought of to achieve this:\r\n- Whenever a todo list is updated, run a AWS Lambda (Node.js environment) job which generates HTML for the todo list server-side (using `ReactDOMServer.renderStaticMarkup`.\r\n- Then, serve that HTML locally, visit the page using puppeteer, and take a screenshot of the page\r\n\r\nHowever, this seems like a lot of work. Is there an easier way of achieving this? Is there anything in the steps above that won't work?\r\n\r\nI've looked at `repng` [1] so far but it hasn't worked for the components I tested it with.\r\n\r\n[1] https://github.com/jxnblk/repng",
        "remove_template_description": "My React application has a list of to do lists like this:    <img width=\"1082\" alt=\"figma_canvases\" src=\"https://user-images.githubusercontent.com/12554095/71749785-47206c00-2e2b-11ea-8d0c-5a82ceba1b05.png\">    > Replace the Figma canvas preview images with todo lists above.    In the list of todo lists, I'd like to include a preview of each list as well as its name.    Here's what I thought of to achieve this:  - Whenever a todo list is updated, run a AWS Lambda (Node.js environment) job which generates HTML for the todo list server-side (using `ReactDOMServer.renderStaticMarkup`.  - Then, serve that HTML locally, visit the page using puppeteer, and take a screenshot of the page    However, this seems like a lot of work. Is there an easier way of achieving this? Is there anything in the steps above that won't work?    I've looked at `repng` [1] so far but it hasn't worked for the components I tested it with.    [1] https://github.com/jxnblk/repng",
        "human_words": "My React application has a list of to do lists like this:    <img width=\"1082\" alt=\"figma_canvases\" src=\"https://user-images.githubusercontent.com/12554095/71749785-47206c00-2e2b-11ea-8d0c-5a82ceba1b05.png\">    > Replace the Figma canvas preview images with todo lists above.    In the list of todo lists, I'd like to include a preview of each list as well as its name.    Here's what I thought of to achieve this:  - Whenever a todo list is updated, run a AWS Lambda (Node.js environment) job which generates HTML for the todo list server-side (using `ReactDOMServer.renderStaticMarkup`.  - Then, serve that HTML locally, visit the page using puppeteer, and take a screenshot of the page    However, this seems like a lot of work. Is there an easier way of achieving this? Is there anything in the steps above that won't work?    I've looked at `repng` [1] so far but it hasn't worked for the components I tested it with.    [1] https://github.com/jxnblk/repng",
        "human_words_regrex": "My React application has a list of to do lists like this:  Replace the Figma canvas preview images with todo lists above. In the list of todo lists, I'd like to include a preview of each list as well as its name. Here's what I thought of to achieve this: - Whenever a todo list is updated, run a AWS Lambda (Node.js environment) job which generates HTML for the todo list server-side (using `ReactDOMServer.renderStaticMarkup`. - Then, serve that HTML locally, visit the page using puppeteer, and take a screenshot of the page However, this seems like a lot of work. Is there an easier way of achieving this? Is there anything in the steps above that won't work? I've looked at `repng` [1] so far but it hasn't worked for the components I tested it with. [1] ",
        "human_words_stopwords_removal_lemmatization": "react application list list like : replace figma canvas preview image todo list . list todo list , 'd like include preview list well name . 's thought achieve : - whenever todo list updated , run aws lambda ( node.js environment ) job generates html todo list server-side ( using ` reactdomserver.renderstaticmarkup ` . - , serve html locally , visit page using puppeteer , take screenshot page however , seems like lot work . easier way achieving ? anything step wo n't work ? 've looked ` repng ` [ 1 ] far n't worked component tested . [ 1 ]",
        "title_stopwords_removal_lemmatization": "rendering react component server take screenshot"
    },
    {
        "issue_id": 544406242,
        "title": "My Navbar work fine until next day",
        "label": [
            "Type: Question"
        ],
        "date": "2020-01-01T22:36:31Z",
        "status": "closed",
        "description": "Hi, I'm Newbie for Web Dev. I'm starting learning React and next.js and i got issue now i have to do a Navbar so I use Navbar from reactstrap to my next.js project it work fine but nextday I open my project and then my project kaboom.\r\n\r\n==\r\n\r\nError: Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\r\n1. You might have mismatching versions of React and the renderer (such as React DOM)\r\n2. You might be breaking the Rules of Hooks\r\n3. You might have more than one copy of React in the same app\r\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.\r\n\u25b6 2 stack frames were collapsed.\r\nExample\r\n./components/MainNav.js:19\r\n  16 | import 'bootstrap/dist/css/bootstrap.min.css'\r\n  17 | \r\n  18 | const Example = (props) => {\r\n> 19 |   const [isOpen, setIsOpen] = useState(false);\r\n  20 | \r\n  21 |   const toggle = () => setIsOpen(!isOpen);\r\n  22 | \r\nView compiled\r\n\u25b6 11 stack frames were collapsed.\r\n\r\n==\r\n\r\nThis is my Navbar Code\r\n\r\n==\r\n```\r\nimport React, { useState } from 'react';\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  NavbarText\r\n} from 'reactstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\n\r\nconst Example = (props) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const toggle = () => setIsOpen(!isOpen);\r\n\r\n  return (\r\n    <div>\r\n      <Navbar color=\"light\" light expand=\"md\">\r\n        <NavbarBrand href=\"/\">reactstrap</NavbarBrand>\r\n        <NavbarToggler onClick={toggle} />\r\n        <Collapse isOpen={isOpen} navbar>\r\n          <Nav className=\"mr-auto\" navbar>\r\n            <NavItem>\r\n              <NavLink href=\"/\">HOME</NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink href=\"/\">WHAT</NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink href =\"/\">WHO</NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink href =\"/\">BRANCH</NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink href =\"/\">WHERE</NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink href =\"/\">WHEN</NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink href =\"/\">FAQS</NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink href =\"/\">GAME</NavLink>\r\n            </NavItem>\r\n          </Nav>\r\n          <NavbarText>Simple Text</NavbarText>\r\n        </Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Example;\r\n```\r\n==\r\n\r\nWhat wrong is it and what should i do to resolve this. Thank.\r\n",
        "remove_template_description": "Hi, I'm Newbie for Web Dev. I'm starting learning React and next.js and i got issue now i have to do a Navbar so I use Navbar from reactstrap to my next.js project it work fine but nextday I open my project and then my project kaboom.    ==    Error: Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:  1. You might have mismatching versions of React and the renderer (such as React DOM)  2. You might be breaking the Rules of Hooks  3. You might have more than one copy of React in the same app  See https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.  \u25b6 2 stack frames were collapsed.  Example  ./components/MainNav.js:19    16 | import 'bootstrap/dist/css/bootstrap.min.css'    17 |     18 | const Example = (props) => {  > 19 |   const [isOpen, setIsOpen] = useState(false);    20 |     21 |   const toggle = () => setIsOpen(!isOpen);    22 |   View compiled  \u25b6 11 stack frames were collapsed.    ==    This is my Navbar Code    ==  ```  import React, { useState } from 'react';  import {    Collapse,    Navbar,    NavbarToggler,    NavbarBrand,    Nav,    NavItem,    NavLink,    UncontrolledDropdown,    DropdownToggle,    DropdownMenu,    DropdownItem,    NavbarText  } from 'reactstrap';  import 'bootstrap/dist/css/bootstrap.min.css'    const Example = (props) => {    const [isOpen, setIsOpen] = useState(false);      const toggle = () => setIsOpen(!isOpen);      return (      <div>        <Navbar color=\"light\" light expand=\"md\">          <NavbarBrand href=\"/\">reactstrap</NavbarBrand>          <NavbarToggler onClick={toggle} />          <Collapse isOpen={isOpen} navbar>            <Nav className=\"mr-auto\" navbar>              <NavItem>                <NavLink href=\"/\">HOME</NavLink>              </NavItem>              <NavItem>                <NavLink href=\"/\">WHAT</NavLink>              </NavItem>              <NavItem>                <NavLink href =\"/\">WHO</NavLink>              </NavItem>              <NavItem>                <NavLink href =\"/\">BRANCH</NavLink>              </NavItem>              <NavItem>                <NavLink href =\"/\">WHERE</NavLink>              </NavItem>              <NavItem>                <NavLink href =\"/\">WHEN</NavLink>              </NavItem>              <NavItem>                <NavLink href =\"/\">FAQS</NavLink>              </NavItem>              <NavItem>                <NavLink href =\"/\">GAME</NavLink>              </NavItem>            </Nav>            <NavbarText>Simple Text</NavbarText>          </Collapse>        </Navbar>      </div>    );  }    export default Example;  ```  ==    What wrong is it and what should i do to resolve this. Thank.",
        "human_words": "Hi, I'm Newbie for Web Dev. I'm starting learning React and next.js and i got issue now i have to do a Navbar so I use Navbar from reactstrap to my next.js project it work fine but nextday I open my project and then my project kaboom.    ==    Error: Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:  1. You might have mismatching versions of React and the renderer (such as React DOM)  2. You might be breaking the Rules of Hooks  3. You might have more than one copy of React in the same app  See https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.  \u25b6 2 stack frames were collapsed.  Example  ./components/MainNav.js:19    16 | import 'bootstrap/dist/css/bootstrap.min.css'    17 |     18 | const Example = (props) => {  > 19 |   const [isOpen, setIsOpen] = useState(false);    20 |     21 |   const toggle = () => setIsOpen(!isOpen);    22 |   View compiled  \u25b6 11 stack frames were collapsed.    ==    This is my Navbar Code    ==    ==    What wrong is it and what should i do to resolve this. Thank.",
        "human_words_regrex": "Hi, I'm Newbie for Web Dev. I'm starting learning React and next.js and i got issue now i have to do a Navbar so I use Navbar from reactstrap to my next.js project it work fine but nextday I open my project and then my project kaboom. == Error: Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons: 1. You might have mismatching versions of React and the renderer (such as React DOM) 2. You might be breaking the Rules of Hooks 3. You might have more than one copy of React in the same app See  for tips about how to debug and fix this problem. \u25b6 2 stack frames were collapsed. Example ./components/MainNav.js:19 16 | import 'bootstrap/dist/css/bootstrap.min.css' 17 | 18 | const Example = (props) => { > 19 | const [isOpen, setIsOpen] = useState(false); 20 | 21 | const toggle = () => setIsOpen(!isOpen); 22 | View compiled \u25b6 11 stack frames were collapsed. == This is my Navbar Code == == What wrong is it and what should i do to resolve this. Thank.",
        "human_words_stopwords_removal_lemmatization": "hi , 'm newbie web dev . 'm starting learning react next.js got issue navbar use navbar reactstrap next.js project work fine nextday open project project kaboom . == error : invalid hook call . hook called inside body function component . could happen one following reason : 1. might mismatching version react renderer ( react dom ) 2. might breaking rule hook 3. might one copy react app see tip debug fix problem . \u25b6 2 stack frame collapsed . example ./components/mainnav.js:19 16 | import 'bootstrap/dist/css/bootstrap.min.css ' 17 | 18 | const example = ( prop ) = > { > 19 | const [ isopen , setisopen ] = usestate ( false ) ; 20 | 21 | const toggle = ( ) = > setisopen ( ! isopen ) ; 22 | view compiled \u25b6 11 stack frame collapsed . == navbar code == == wrong resolve . thank .",
        "title_stopwords_removal_lemmatization": "navbar work fine next day"
    },
    {
        "issue_id": 544065210,
        "title": "I can't get the latest status value in the initialization method",
        "label": [
            "Type: Question"
        ],
        "date": "2019-12-31T02:08:08Z",
        "status": "closed",
        "description": "I try to get the latest state value in the initialization method, but the result is not satisfactory\u3002\r\nAll this happens in function components\u3002\r\n\r\n1.react version is 16.12.0\uff1b\r\n2.react-dom version is 16.12.0\uff1b\r\n\r\nthis is my demo code :\r\n\r\n```\r\nimport React,{useState,useEffect} from 'react';\r\n\r\nconst App=()=>{\r\n\t/*button click*/\r\n\tconst btnClick = ()=>{\r\n\t\tconsole.log(\"initButton getting state is====>\",nowState); //can't get now state ,all is init value\r\n\t}\r\n\t/*init a button*/ \r\n\tconst initTitle = ()=>{\r\n\t\treturn (\r\n\t\t\t<button onClick={btnClick}>click</button>\r\n\t\t)\r\n\t}\r\n\tconst [title, settitle] = useState();\r\n\r\n\t/*now state*/\r\n\tconst [nowState, setNowState] = useState(0);\r\n\tconsole.log(\"now state is====>\",nowState);\r\n\r\n\tuseEffect(()=>{\r\n\t\tsettitle(initTitle());\r\n\t},[])\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{title}\r\n\t\t\t<button onClick={()=>setNowState(nowState + 1)}>change now state</button>\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n```\r\n",
        "remove_template_description": "I try to get the latest state value in the initialization method, but the result is not satisfactory\u3002  All this happens in function components\u3002    1.react version is 16.12.0\uff1b  2.react-dom version is 16.12.0\uff1b    this is my demo code :    ```  import React,{useState,useEffect} from 'react';    const App=()=>{  \t/*button click*/  \tconst btnClick = ()=>{  \t\tconsole.log(\"initButton getting state is====>\",nowState); //can't get now state ,all is init value  \t}  \t/*init a button*/   \tconst initTitle = ()=>{  \t\treturn (  \t\t\t<button onClick={btnClick}>click</button>  \t\t)  \t}  \tconst [title, settitle] = useState();    \t/*now state*/  \tconst [nowState, setNowState] = useState(0);  \tconsole.log(\"now state is====>\",nowState);    \tuseEffect(()=>{  \t\tsettitle(initTitle());  \t},[])    \treturn (  \t\t<>  \t\t\t{title}  \t\t\t<button onClick={()=>setNowState(nowState + 1)}>change now state</button>  \t\t</>  \t);  }    export default App;  ```",
        "human_words": "I try to get the latest state value in the initialization method, but the result is not satisfactory\u3002  All this happens in function components\u3002    1.react version is 16.12.0\uff1b  2.react-dom version is 16.12.0\uff1b    this is my demo code :    ",
        "human_words_regrex": "I try to get the latest state value in the initialization method, but the result is not satisfactory\u3002 All this happens in function components\u3002 1.react version is 16.12.0\uff1b 2.react-dom version is 16.12.0\uff1b this is my demo code : ",
        "human_words_stopwords_removal_lemmatization": "try get latest state value initialization method , result satisfactory\u3002 happens function components\u3002 1.react version 16.12.0\uff1b 2.react-dom version 16.12.0\uff1b demo code :",
        "title_stopwords_removal_lemmatization": "ca n't get latest status value initialization method"
    },
    {
        "issue_id": 542804579,
        "title": "Function passed as parameter and saved in Context API store takes old store from Context API",
        "label": [
            "Type: Question"
        ],
        "date": "2019-12-27T09:06:55Z",
        "status": "closed",
        "description": "When I get 401 status code from backend I run refreshToken method with passing the function where expired token occurred. In refreshToken method I get new token and set in refreshTokenLastFunc property function from parameter.\r\n\r\nThen I watch when refreshTokenLastFunc was updated using React useEffect and run once again the function where expired token occurred.\r\n\r\nThe problem is while I run store.refreshTokenLastFunc() in useEffect, the function in refreshTokenLastFunc property uses old Context API store(so it uses old token not the new one). You can read my comment in useEffect for store.refreshTokenLastFunc.\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nI don't actually know if it is a React bug or I don't understand JS properly\r\n\r\n**What is the current behavior?**\r\nIf I ran **store.refreshTokenLastFunc**  function in useEffect it takes old store, not the new one\r\n\r\n**What is the expected behavior?**\r\nI want **store.refreshTokenLastFunc**  function to run with new store, because store was modified before this function run\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact verison: 16.12.0\r\nBrowser: Google Chrome: 79\r\n\r\nMy code:\r\n```js\r\nexport const StoreProvider = props => {\r\n  const getToken = () => localStorage.getItem(\"token\");\r\n\r\n  const initState = () => ({\r\n    token: getToken(),\r\n    isAuth: false,\r\n    userRole: \"old role\",\r\n    mainUrl: MainUrl,\r\n    apiUrl: ApiUrl,\r\n    refreshTokenLastFunc: () => {}\r\n  });\r\n\r\n  const [store, setStore] = useState(initState());\r\n\r\n  const getUserInfo = async () => {\r\n    if (getToken()) {\r\n      try {\r\n        const apiConfig = {\r\n          method: \"GET\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${store.token}`\r\n          }\r\n        };\r\n\r\n        const response = await fetch(`${store.apiUrl}get-me`, apiConfig);\r\n        const responseJson = await response.json();\r\n\r\n        if (response.ok) {\r\n          // Update Context API\r\n          setStore({\r\n            ...store,\r\n            userRole: responseJson.role,\r\n            userName: responseJson.name,\r\n            userGroupId: responseJson.group_id,\r\n            isAuth: true\r\n          });\r\n        } else if (response.status === 401) {\r\n          refreshToken(getUserInfo);\r\n        } else {\r\n          throw new Error(`Some error occurred`);\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const refreshToken = async func => {\r\n    try {\r\n      const apiConfig = {\r\n        method: \"GET\",\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          Authorization: `Bearer ${store.token}`\r\n        }\r\n      };\r\n\r\n      const response = await fetch(`${store.mainUrl}refresh-token`, apiConfig);\r\n      const responseJson = await response.json();\r\n\r\n      if (response.ok) {\r\n        // Update token in local storage\r\n        localStorage.setItem(\"token\", responseJson.token);\r\n        // Update Context API\r\n        setStore({\r\n          ...store,\r\n          userRole: \"new role\",\r\n          token: responseJson.token,\r\n          refreshTokenLastFunc: func\r\n        });\r\n      } else {\r\n        throw new Error(`Some error...`);\r\n      }\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getUserInfo();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // If I console log my store before calling function, store is correctly updated, but the function uses old store.\r\n    console.log(\"store from useEffect: \", store); // store.userRole = 'new role' which is correct\r\n    store.refreshTokenLastFunc(); // store.userRole = 'old role' which should be 'new role'\r\n  }, [store.refreshTokenLastFunc]);\r\n\r\n  return (\r\n    <StoreContext.Provider value={[store, setStore, logout, getUserInfo]}>\r\n      {props.children}\r\n    </StoreContext.Provider>\r\n  );\r\n};\r\n```",
        "remove_template_description": "When I get 401 status code from backend I run refreshToken method with passing the function where expired token occurred. In refreshToken method I get new token and set in refreshTokenLastFunc property function from parameter.    Then I watch when refreshTokenLastFunc was updated using React useEffect and run once again the function where expired token occurred.    The problem is while I run store.refreshTokenLastFunc() in useEffect, the function in refreshTokenLastFunc property uses old Context API store(so it uses old token not the new one). You can read my comment in useEffect for store.refreshTokenLastFunc.    **Do you want to request a *feature* or report a *bug*?**  I don't actually know if it is a React bug or I don't understand JS properly    **What is the current behavior?**  If I ran **store.refreshTokenLastFunc**  function in useEffect it takes old store, not the new one    **What is the expected behavior?**  I want **store.refreshTokenLastFunc**  function to run with new store, because store was modified before this function run    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  React verison: 16.12.0  Browser: Google Chrome: 79    My code:  ```js  export const StoreProvider = props => {    const getToken = () => localStorage.getItem(\"token\");      const initState = () => ({      token: getToken(),      isAuth: false,      userRole: \"old role\",      mainUrl: MainUrl,      apiUrl: ApiUrl,      refreshTokenLastFunc: () => {}    });      const [store, setStore] = useState(initState());      const getUserInfo = async () => {      if (getToken()) {        try {          const apiConfig = {            method: \"GET\",            headers: {              \"Content-Type\": \"application/json\",              Authorization: `Bearer ${store.token}`            }          };            const response = await fetch(`${store.apiUrl}get-me`, apiConfig);          const responseJson = await response.json();            if (response.ok) {            // Update Context API            setStore({              ...store,              userRole: responseJson.role,              userName: responseJson.name,              userGroupId: responseJson.group_id,              isAuth: true            });          } else if (response.status === 401) {            refreshToken(getUserInfo);          } else {            throw new Error(`Some error occurred`);          }        } catch (error) {          console.log(error);        }      }    };      const refreshToken = async func => {      try {        const apiConfig = {          method: \"GET\",          headers: {            Accept: \"application/json\",            Authorization: `Bearer ${store.token}`          }        };          const response = await fetch(`${store.mainUrl}refresh-token`, apiConfig);        const responseJson = await response.json();          if (response.ok) {          // Update token in local storage          localStorage.setItem(\"token\", responseJson.token);          // Update Context API          setStore({            ...store,            userRole: \"new role\",            token: responseJson.token,            refreshTokenLastFunc: func          });        } else {          throw new Error(`Some error...`);        }      } catch (error) {        throw error;      }    };      useEffect(() => {      getUserInfo();    }, []);      useEffect(() => {      // If I console log my store before calling function, store is correctly updated, but the function uses old store.      console.log(\"store from useEffect: \", store); // store.userRole = 'new role' which is correct      store.refreshTokenLastFunc(); // store.userRole = 'old role' which should be 'new role'    }, [store.refreshTokenLastFunc]);      return (      <StoreContext.Provider value={[store, setStore, logout, getUserInfo]}>        {props.children}      </StoreContext.Provider>    );  };  ```",
        "human_words": "When I get 401 status code from backend I run refreshToken method with passing the function where expired token occurred. In refreshToken method I get new token and set in refreshTokenLastFunc property function from parameter.    Then I watch when refreshTokenLastFunc was updated using React useEffect and run once again the function where expired token occurred.    The problem is while I run store.refreshTokenLastFunc() in useEffect, the function in refreshTokenLastFunc property uses old Context API store(so it uses old token not the new one). You can read my comment in useEffect for store.refreshTokenLastFunc.    **Do you want to request a *feature* or report a *bug*?**  I don't actually know if it is a React bug or I don't understand JS properly    **What is the current behavior?**  If I ran **store.refreshTokenLastFunc**  function in useEffect it takes old store, not the new one    **What is the expected behavior?**  I want **store.refreshTokenLastFunc**  function to run with new store, because store was modified before this function run    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  React verison: 16.12.0  Browser: Google Chrome: 79    My code:  ",
        "human_words_regrex": "When I get 401 status code from backend I run refreshToken method with passing the function where expired token occurred. In refreshToken method I get new token and set in refreshTokenLastFunc property function from parameter. Then I watch when refreshTokenLastFunc was updated using React useEffect and run once again the function where expired token occurred. The problem is while I run store.refreshTokenLastFunc() in useEffect, the function in refreshTokenLastFunc property uses old Context API store(so it uses old token not the new one). You can read my comment in useEffect for store.refreshTokenLastFunc. **Do you want to request a *feature* or report a *bug*?** I don't actually know if it is a React bug or I don't understand JS properly **What is the current behavior?** If I ran **store.refreshTokenLastFunc** function in useEffect it takes old store, not the new one **What is the expected behavior?** I want **store.refreshTokenLastFunc** function to run with new store, because store was modified before this function run **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** React verison: 16.12.0 Browser: Google Chrome: 79 My code: ",
        "human_words_stopwords_removal_lemmatization": "get 401 status code backend run refreshtoken method passing function expired token occurred . refreshtoken method get new token set refreshtokenlastfunc property function parameter . watch refreshtokenlastfunc updated using react useeffect run function expired token occurred . problem run store.refreshtokenlastfunc ( ) useeffect , function refreshtokenlastfunc property us old context api store ( us old token new one ) . read comment useeffect store.refreshtokenlastfunc . * * want request * feature * report * bug * ? * * n't actually know react bug n't understand j properly * * current behavior ? * * ran * * store.refreshtokenlastfunc * * function useeffect take old store , new one * * expected behavior ? * * want * * store.refreshtokenlastfunc * * function run new store , store modified function run * * version react , browser / o affected issue ? work previous version react ? * * react verison : 16.12.0 browser : google chrome : 79 code :",
        "title_stopwords_removal_lemmatization": "function passed parameter saved context api store take old store context api"
    },
    {
        "issue_id": 542580844,
        "title": "[TypeScript]Is there any way to define the state variables when using functional component? ",
        "label": [
            "Type: Question"
        ],
        "date": "2019-12-26T15:11:03Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\nIf there is a lot of state variables, I guess it is hard to get a whole picture the state variables verse class components\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\n**What is the current behavior?**\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n**What is the expected behavior?**\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    If there is a lot of state variables, I guess it is hard to get a whole picture the state variables verse class components    **Do you want to request a *feature* or report a *bug*?**    **What is the current behavior?**    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**    **What is the expected behavior?**    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**",
        "human_words": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    If there is a lot of state variables, I guess it is hard to get a whole picture the state variables verse class components    **Do you want to request a *feature* or report a *bug*?**    **What is the current behavior?**    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**    **What is the expected behavior?**    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**",
        "human_words_regrex": " If there is a lot of state variables, I guess it is hard to get a whole picture the state variables verse class components **Do you want to request a *feature* or report a *bug*?** **What is the current behavior?** **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle ( or CodeSandbox ( example below:** **What is the expected behavior?** **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**",
        "human_words_stopwords_removal_lemmatization": "lot state variable , guess hard get whole picture state variable verse class component * * want request * feature * report * bug * ? * * * * current behavior ? * * * * current behavior bug , please provide step reproduce possible minimal demo problem . bug get fixed much faster run code n't dependency react . paste link jsfiddle ( codesandbox ( example : * * * * expected behavior ? * * * * version react , browser / o affected issue ? work previous version react ? * *",
        "title_stopwords_removal_lemmatization": "[ typescript ] way define state variable using functional component ?"
    },
    {
        "issue_id": 542234508,
        "title": "How can i change react umd version  in node_modules? ",
        "label": [
            "Type: Question"
        ],
        "date": "2019-12-25T02:09:17Z",
        "status": "closed",
        "description": "i saw react package have `cjs` and `umd` folder\r\nand `index.js` in react output `cjs` version \r\n\r\nso if i want to use `umd` how can i change?\r\n\r\n![image](https://user-images.githubusercontent.com/20965813/71428891-b0eb9800-26fe-11ea-8887-691e69203855.png)\r\n",
        "remove_template_description": "i saw react package have `cjs` and `umd` folder  and `index.js` in react output `cjs` version     so if i want to use `umd` how can i change?    ![image](https://user-images.githubusercontent.com/20965813/71428891-b0eb9800-26fe-11ea-8887-691e69203855.png)",
        "human_words": "i saw react package have `cjs` and `umd` folder  and `index.js` in react output `cjs` version     so if i want to use `umd` how can i change?    ![image](https://user-images.githubusercontent.com/20965813/71428891-b0eb9800-26fe-11ea-8887-691e69203855.png)",
        "human_words_regrex": "i saw react package have `cjs` and `umd` folder and `index.js` in react output `cjs` version so if i want to use `umd` how can i change? !",
        "human_words_stopwords_removal_lemmatization": "saw react package ` cjs ` ` umd ` folder ` index.js ` react output ` cjs ` version want use ` umd ` change ? !",
        "title_stopwords_removal_lemmatization": "change react umd version node_modules ?"
    },
    {
        "issue_id": 542033652,
        "title": "getDerivedStateFromProps is executed after setState #13015",
        "label": [
            "Type: Question"
        ],
        "date": "2019-12-24T07:54:38Z",
        "status": "closed",
        "description": "Ideally getDerivedStateFromProps  should not be called due to current component's setState. But it is behaving so. Can someone explain?\r\n\r\nCouldn't find solution in [#13015](https://github.com/facebook/react/issues/13015)",
        "remove_template_description": "Ideally getDerivedStateFromProps  should not be called due to current component's setState. But it is behaving so. Can someone explain?    Couldn't find solution in [#13015](https://github.com/facebook/react/issues/13015)",
        "human_words": "Ideally getDerivedStateFromProps  should not be called due to current component's setState. But it is behaving so. Can someone explain?    Couldn't find solution in [#13015](https://github.com/facebook/react/issues/13015)",
        "human_words_regrex": "Ideally getDerivedStateFromProps should not be called due to current component's setState. But it is behaving so. Can someone explain? Couldn't find solution in ",
        "human_words_stopwords_removal_lemmatization": "ideally getderivedstatefromprops called due current component 's setstate . behaving . someone explain ? could n't find solution",
        "title_stopwords_removal_lemmatization": "getderivedstatefromprops executed setstate # 13015"
    },
    {
        "issue_id": 541845121,
        "title": "Opinions on Ionic Reac",
        "label": [
            "Type: Question"
        ],
        "date": "2019-12-23T17:38:13Z",
        "status": "closed",
        "description": "Hello, \r\n\r\nFeasibility of making a project in ionic reaction.\r\n\r\nI am interested in knowing more about Ionic react.\r\n\r\nAnd I would like to know if it is advisable to do a project with Ionic React.\r\n\r\nHow scalable the project would be.\r\n\r\nAnd you can use all the tools that have both ionic and rea, example: camera, maps, notifications, routes, among others.\r\n\r\nI appreciate if you can advise me.\r\n\r\nThank you",
        "remove_template_description": "Hello,     Feasibility of making a project in ionic reaction.    I am interested in knowing more about Ionic react.    And I would like to know if it is advisable to do a project with Ionic React.    How scalable the project would be.    And you can use all the tools that have both ionic and rea, example: camera, maps, notifications, routes, among others.    I appreciate if you can advise me.    Thank you",
        "human_words": "Hello,     Feasibility of making a project in ionic reaction.    I am interested in knowing more about Ionic react.    And I would like to know if it is advisable to do a project with Ionic React.    How scalable the project would be.    And you can use all the tools that have both ionic and rea, example: camera, maps, notifications, routes, among others.    I appreciate if you can advise me.    Thank you",
        "human_words_regrex": "Hello, Feasibility of making a project in ionic reaction. I am interested in knowing more about Ionic react. And I would like to know if it is advisable to do a project with Ionic React. How scalable the project would be. And you can use all the tools that have both ionic and rea, example: camera, maps, notifications, routes, among others. I appreciate if you can advise me. Thank you",
        "human_words_stopwords_removal_lemmatization": "hello , feasibility making project ionic reaction . interested knowing ionic react . would like know advisable project ionic react . scalable project would . use tool ionic rea , example : camera , map , notification , route , among others . appreciate advise . thank",
        "title_stopwords_removal_lemmatization": "opinion ionic reac"
    },
    {
        "issue_id": 541646860,
        "title": "Why only one component can be render at root div?",
        "label": [
            "Type: Question"
        ],
        "date": "2019-12-23T08:43:04Z",
        "status": "closed",
        "description": "  I called two render methods to same root div .\r\n```\r\nRenderDOM.render( < Navigation /> ,document.getElementById(' root ')); \r\nRenderDOM.render( < App /> ,document.getElementById(' root '));\r\n```\r\nAnd what i get rendered on my screen is only a  App component.\r\nJust want to know that the one render method override the previous  render method?\r\n\r\n\r\n",
        "remove_template_description": "I called two render methods to same root div .  ```  RenderDOM.render( < Navigation /> ,document.getElementById(' root '));   RenderDOM.render( < App /> ,document.getElementById(' root '));  ```  And what i get rendered on my screen is only a  App component.  Just want to know that the one render method override the previous  render method?",
        "human_words": "I called two render methods to same root div .    And what i get rendered on my screen is only a  App component.  Just want to know that the one render method override the previous  render method?",
        "human_words_regrex": "I called two render methods to same root div . And what i get rendered on my screen is only a App component. Just want to know that the one render method override the previous render method?",
        "human_words_stopwords_removal_lemmatization": "called two render method root div . get rendered screen app component . want know one render method override previous render method ?",
        "title_stopwords_removal_lemmatization": "one component render root div ?"
    },
    {
        "issue_id": 540721939,
        "title": "Unexpected function component call using useState",
        "label": [
            "Type: Question"
        ],
        "date": "2019-12-20T03:11:53Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\n*question*\r\n\r\n**What is the current behavior?**\r\n\r\n``` typescript\r\nimport React, { useState, useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport \"./styles.css\";\r\n\r\nfunction Child() {\r\n  console.log(\"Child render\");\r\n  return null;\r\n}\r\n\r\nfunction App() {\r\n  const [count, setCount] = useState(0);\r\n\r\n  console.log(\"Render\");\r\n\r\n  useEffect(() => {\r\n    console.log(\"count changed\", count);\r\n  }, [count]);\r\n\r\n  return (\r\n    <div>\r\n      <h2>UseState</h2>\r\n      <p>clicked: {count}</p>\r\n      <button\r\n        onClick={() => {\r\n          setCount(count + 1);\r\n        }}\r\n      >\r\n        +1\r\n      </button>\r\n      <button\r\n        onClick={() => {\r\n          setCount(count);\r\n        }}\r\n      >\r\n        +0\r\n      </button>\r\n      <Child />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\n\r\n```\r\n\r\nThere are two button in this count example. Clicking one makes count +1\uff0canother makes count no change. If clicking the no change button first, \"Render\" will not be logged. But if clicking the +1 button first and then clicking anthor\uff0c\"Render\" will show twice, but \"\"Child render\" will only show once.\r\n\r\nI found the explain in document.\r\n\r\n> If you update a State Hook to the same value as the current state, React will bail out without rendering the children or firing effects. (React uses the Object.is comparison algorithm.)\r\n\r\nDoes React only promise that Children component will not be rendered in this situation? The current component may still be rendered?\r\n\r\nThis is an example in sandbox.\r\n\r\nhttps://codesandbox.io/s/long-firefly-nz5px?fontsize=14&hidenavigation=1&theme=dark\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n\"react\": \"^16.12.0\",\r\n\"react-dom\": \"^16.12.0\",\r\n\r\n\r\n\r\n\r\n",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**    *question*    **What is the current behavior?**    ``` typescript  import React, { useState, useEffect } from \"react\";  import ReactDOM from \"react-dom\";    import \"./styles.css\";    function Child() {    console.log(\"Child render\");    return null;  }    function App() {    const [count, setCount] = useState(0);      console.log(\"Render\");      useEffect(() => {      console.log(\"count changed\", count);    }, [count]);      return (      <div>        <h2>UseState</h2>        <p>clicked: {count}</p>        <button          onClick={() => {            setCount(count + 1);          }}        >          +1        </button>        <button          onClick={() => {            setCount(count);          }}        >          +0        </button>        <Child />      </div>    );  }    const rootElement = document.getElementById(\"root\");  ReactDOM.render(<App />, rootElement);    ```    There are two button in this count example. Clicking one makes count +1\uff0canother makes count no change. If clicking the no change button first, \"Render\" will not be logged. But if clicking the +1 button first and then clicking anthor\uff0c\"Render\" will show twice, but \"\"Child render\" will only show once.    I found the explain in document.    > If you update a State Hook to the same value as the current state, React will bail out without rendering the children or firing effects. (React uses the Object.is comparison algorithm.)    Does React only promise that Children component will not be rendered in this situation? The current component may still be rendered?    This is an example in sandbox.    https://codesandbox.io/s/long-firefly-nz5px?fontsize=14&hidenavigation=1&theme=dark    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    \"react\": \"^16.12.0\",  \"react-dom\": \"^16.12.0\",",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**    *question*    **What is the current behavior?**        There are two button in this count example. Clicking one makes count +1\uff0canother makes count no change. If clicking the no change button first, \"Render\" will not be logged. But if clicking the +1 button first and then clicking anthor\uff0c\"Render\" will show twice, but \"\"Child render\" will only show once.    I found the explain in document.    > If you update a State Hook to the same value as the current state, React will bail out without rendering the children or firing effects. (React uses the Object.is comparison algorithm.)    Does React only promise that Children component will not be rendered in this situation? The current component may still be rendered?    This is an example in sandbox.    https://codesandbox.io/s/long-firefly-nz5px?fontsize=14&hidenavigation=1&theme=dark    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    \"react\": \"^16.12.0\",  \"react-dom\": \"^16.12.0\",",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** *question* **What is the current behavior?** There are two button in this count example. Clicking one makes count +1\uff0canother makes count no change. If clicking the no change button first, \"Render\" will not be logged. But if clicking the +1 button first and then clicking anthor\uff0c\"Render\" will show twice, but \"\"Child render\" will only show once. I found the explain in document. > If you update a State Hook to the same value as the current state, React will bail out without rendering the children or firing effects. (React uses the Object.is comparison algorithm.) Does React only promise that Children component will not be rendered in this situation? The current component may still be rendered? This is an example in sandbox.  **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** \"react\": \"^16.12.0\", \"react-dom\": \"^16.12.0\",",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * * question * * * current behavior ? * * two button count example . clicking one make count +1\uff0canother make count change . clicking change button first , `` render '' logged . clicking +1 button first clicking anthor\uff0c '' render '' show twice , `` '' child render '' show . found explain document . > update state hook value current state , react bail without rendering child firing effect . ( react us object.is comparison algorithm . ) react promise child component rendered situation ? current component may still rendered ? example sandbox . * * version react , browser / o affected issue ? work previous version react ? * * `` react '' : `` ^16.12.0 '' , `` react-dom '' : `` ^16.12.0 '' ,",
        "title_stopwords_removal_lemmatization": "unexpected function component call using usestate"
    },
    {
        "issue_id": 536858977,
        "title": "Bug: React table - Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: undefined.",
        "label": [
            "Type: Question"
        ],
        "date": "2019-12-12T09:34:37Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n**What is the current behavior?**\r\nHello,\r\nI am new in React and I am trying to create a simple react table to display data from db with login for user authentication. \r\nUntil I added the login, it worked. Momentally, it still throws the same mistake, no matter what. None of the existing solutions helped me, I tried to repair imports and exports, I reinstalled nodejs, reinstalled node_moduls. \r\n\r\nFirst, I verify the user by logging in to redirect me to the records page after verification. Verification is ok, but then it crashes.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nEdit: login, password: admin, admin\r\n\r\nhttps://codesandbox.io/s/black-voice-2z6y5?fontsize=14&hidenavigation=1&theme=dark\r\nhttps://codesandbox.io/embed/black-voice-2z6y5?fontsize=14&hidenavigation=1&theme=dark\r\n[![Edit black-voice-2z6y5](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/black-voice-2z6y5?fontsize=14&hidenavigation=1&theme=dark)\r\n![error_message](https://user-images.githubusercontent.com/26010477/70700296-cf976b00-1cca-11ea-9c65-e2ba84d25d51.png)\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nnodejs version v8.10.0\r\nnpm version 6.13.3\r\nubuntu/chrome\r\n\r\nPlease give me any advice. Thank you in advance :) \r\n",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**  bug    **What is the current behavior?**  Hello,  I am new in React and I am trying to create a simple react table to display data from db with login for user authentication.   Until I added the login, it worked. Momentally, it still throws the same mistake, no matter what. None of the existing solutions helped me, I tried to repair imports and exports, I reinstalled nodejs, reinstalled node_moduls.     First, I verify the user by logging in to redirect me to the records page after verification. Verification is ok, but then it crashes.    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**    Edit: login, password: admin, admin    https://codesandbox.io/s/black-voice-2z6y5?fontsize=14&hidenavigation=1&theme=dark  https://codesandbox.io/embed/black-voice-2z6y5?fontsize=14&hidenavigation=1&theme=dark  [![Edit black-voice-2z6y5](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/black-voice-2z6y5?fontsize=14&hidenavigation=1&theme=dark)  ![error_message](https://user-images.githubusercontent.com/26010477/70700296-cf976b00-1cca-11ea-9c65-e2ba84d25d51.png)    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    nodejs version v8.10.0  npm version 6.13.3  ubuntu/chrome    Please give me any advice. Thank you in advance :)",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**  bug    **What is the current behavior?**  Hello,  I am new in React and I am trying to create a simple react table to display data from db with login for user authentication.   Until I added the login, it worked. Momentally, it still throws the same mistake, no matter what. None of the existing solutions helped me, I tried to repair imports and exports, I reinstalled nodejs, reinstalled node_moduls.     First, I verify the user by logging in to redirect me to the records page after verification. Verification is ok, but then it crashes.    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**    Edit: login, password: admin, admin    https://codesandbox.io/s/black-voice-2z6y5?fontsize=14&hidenavigation=1&theme=dark  https://codesandbox.io/embed/black-voice-2z6y5?fontsize=14&hidenavigation=1&theme=dark  [![Edit black-voice-2z6y5](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/black-voice-2z6y5?fontsize=14&hidenavigation=1&theme=dark)  ![error_message](https://user-images.githubusercontent.com/26010477/70700296-cf976b00-1cca-11ea-9c65-e2ba84d25d51.png)    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    nodejs version v8.10.0  npm version 6.13.3  ubuntu/chrome    Please give me any advice. Thank you in advance :)",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** bug **What is the current behavior?** Hello, I am new in React and I am trying to create a simple react table to display data from db with login for user authentication. Until I added the login, it worked. Momentally, it still throws the same mistake, no matter what. None of the existing solutions helped me, I tried to repair imports and exports, I reinstalled nodejs, reinstalled node_moduls. First, I verify the user by logging in to redirect me to the records page after verification. Verification is ok, but then it crashes. **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle ( or CodeSandbox ( example below:** Edit: login, password: admin, admin   ]( ! **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** nodejs version v8.10.0 npm version 6.13.3 ubuntu/chrome Please give me any advice. Thank you in advance :)",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * bug * * current behavior ? * * hello , new react trying create simple react table display data db login user authentication . added login , worked . momentally , still throw mistake , matter . none existing solution helped , tried repair import export , reinstalled nodejs , reinstalled node_moduls . first , verify user logging redirect record page verification . verification ok , crash . * * current behavior bug , please provide step reproduce possible minimal demo problem . bug get fixed much faster run code n't dependency react . paste link jsfiddle ( codesandbox ( example : * * edit : login , password : admin , admin ] ( ! * * version react , browser / o affected issue ? work previous version react ? * * nodejs version v8.10.0 npm version 6.13.3 ubuntu/chrome please give advice . thank advance : )",
        "title_stopwords_removal_lemmatization": "bug : react table - element type invalid : expected string ( built-in component ) class/function ( composite component ) got : undefined ."
    },
    {
        "issue_id": 530926545,
        "title": "question about this.state and this.setState",
        "label": [
            "Type: Question"
        ],
        "date": "2019-12-02T06:48:29Z",
        "status": "closed",
        "description": "Here is my question:\r\nThere is a multiselect child component, the  value is maintained in its parent component [this.state.values] like this:\r\n\r\nParent {\r\n state={\r\n  values:[]\r\n }\r\n  render(){\r\n    return(\r\n     Multiselect value={this.state.values}\r\n    )\r\n  }\r\n}\r\n\r\nin the multiselect 's [onChange] function I control the multiselect value in two ways and two different render results:\r\n\r\nFirst:\r\n  onChange= ()=>{\r\n    this.setState({ values:this.handleValue(this.state.values)});\r\n  }\r\n\r\n  handleValues = (values)=>{\r\n    //here to add or splice, eg:\r\n    values.push('treeNode1');\r\n    return values\r\n  }\r\n\r\n  when I print this.state.values in the render() function, the 'treeNode1' is added, however ths multiselect component's 'treeNode1' option wasn,t selected;\r\n\r\nbut if change the onChange() function like this, it works right:\r\n  onChange= ()=>{\r\n    this.setState({ values:this.handleValue(Object.assign([],this.state.values))});\r\n  }\r\n\r\nI pass the copy of the [this.state.values] rather than [this.state.values].\r\n\r\nI,m confused.\r\n\r\nI know that we can,t change varibles in the state directly, however in the first way, [this.state.values] in the render() function is added by 'treeNode1', it looks correctly .\r\n\r\nHere is my guess :  React maintains a real state.  When React renders it can get the 'real' state of [this.state.values] which works actually rather than the [this.state.values] that I changed directly in the onChange function by adding 'treeNode1'. The state value[this.state.values] printed in the render() function looks correct ,because the directly change in the handleValues () function rather than changed by this.setState().\r\n\r\nI wonder how and why this happens and is my guess right? :)\r\n",
        "remove_template_description": "Here is my question:  There is a multiselect child component, the  value is maintained in its parent component [this.state.values] like this:    Parent {   state={    values:[]   }    render(){      return(       Multiselect value={this.state.values}      )    }  }    in the multiselect 's [onChange] function I control the multiselect value in two ways and two different render results:    First:    onChange= ()=>{      this.setState({ values:this.handleValue(this.state.values)});    }      handleValues = (values)=>{      //here to add or splice, eg:      values.push('treeNode1');      return values    }      when I print this.state.values in the render() function, the 'treeNode1' is added, however ths multiselect component's 'treeNode1' option wasn,t selected;    but if change the onChange() function like this, it works right:    onChange= ()=>{      this.setState({ values:this.handleValue(Object.assign([],this.state.values))});    }    I pass the copy of the [this.state.values] rather than [this.state.values].    I,m confused.    I know that we can,t change varibles in the state directly, however in the first way, [this.state.values] in the render() function is added by 'treeNode1', it looks correctly .    Here is my guess :  React maintains a real state.  When React renders it can get the 'real' state of [this.state.values] which works actually rather than the [this.state.values] that I changed directly in the onChange function by adding 'treeNode1'. The state value[this.state.values] printed in the render() function looks correct ,because the directly change in the handleValues () function rather than changed by this.setState().    I wonder how and why this happens and is my guess right? :)",
        "human_words": "Here is my question:  There is a multiselect child component, the  value is maintained in its parent component [this.state.values] like this:    Parent {   state={    values:[]   }    render(){      return(       Multiselect value={this.state.values}      )    }  }    in the multiselect 's [onChange] function I control the multiselect value in two ways and two different render results:    First:    onChange= ()=>{      this.setState({ values:this.handleValue(this.state.values)});    }      handleValues = (values)=>{      //here to add or splice, eg:      values.push('treeNode1');      return values    }      when I print this.state.values in the render() function, the 'treeNode1' is added, however ths multiselect component's 'treeNode1' option wasn,t selected;    but if change the onChange() function like this, it works right:    onChange= ()=>{      this.setState({ values:this.handleValue(Object.assign([],this.state.values))});    }    I pass the copy of the [this.state.values] rather than [this.state.values].    I,m confused.    I know that we can,t change varibles in the state directly, however in the first way, [this.state.values] in the render() function is added by 'treeNode1', it looks correctly .    Here is my guess :  React maintains a real state.  When React renders it can get the 'real' state of [this.state.values] which works actually rather than the [this.state.values] that I changed directly in the onChange function by adding 'treeNode1'. The state value[this.state.values] printed in the render() function looks correct ,because the directly change in the handleValues () function rather than changed by this.setState().    I wonder how and why this happens and is my guess right? :)",
        "human_words_regrex": "Here is my question: There is a multiselect child component, the value is maintained in its parent component [this.state.values] like this: Parent { state={ values:[] } render(){ return( Multiselect value={this.state.values} ) } } in the multiselect 's [onChange] function I control the multiselect value in two ways and two different render results: First: onChange= ()=>{ this.setState({ values:this.handleValue(this.state.values)}); } handleValues = (values)=>{ //here to add or splice, eg: values.push('treeNode1'); return values } when I print this.state.values in the render() function, the 'treeNode1' is added, however ths multiselect component's 'treeNode1' option wasn,t selected; but if change the onChange() function like this, it works right: onChange= ()=>{ this.setState({ values:this.handleValue(Object.assign([],this.state.values))}); } I pass the copy of the [this.state.values] rather than [this.state.values]. I,m confused. I know that we can,t change varibles in the state directly, however in the first way, [this.state.values] in the render() function is added by 'treeNode1', it looks correctly . Here is my guess : React maintains a real state. When React renders it can get the 'real' state of [this.state.values] which works actually rather than the [this.state.values] that I changed directly in the onChange function by adding 'treeNode1'. The state value[this.state.values] printed in the render() function looks correct ,because the directly change in the handleValues () function rather than changed by this.setState(). I wonder how and why this happens and is my guess right? :)",
        "human_words_stopwords_removal_lemmatization": "question : multiselect child component , value maintained parent component [ this.state.values ] like : parent { state= { value : [ ] } render ( ) { return ( multiselect value= { this.state.values } ) } } multiselect 's [ onchange ] function control multiselect value two way two different render result : first : onchange= ( ) = > { this.setstate ( { value : this.handlevalue ( this.state.values ) } ) ; } handlevalues = ( value ) = > { //here add splice , eg : values.push ( 'treenode1 ' ) ; return value } print this.state.values render ( ) function , 'treenode1 ' added , however th multiselect component 's 'treenode1 ' option , selected ; change onchange ( ) function like , work right : onchange= ( ) = > { this.setstate ( { value : this.handlevalue ( object.assign ( [ ] , this.state.values ) ) } ) ; } pas copy [ this.state.values ] rather [ this.state.values ] . , confused . know , change varibles state directly , however first way , [ this.state.values ] render ( ) function added 'treenode1 ' , look correctly . guess : react maintains real state . react render get 'real ' state [ this.state.values ] work actually rather [ this.state.values ] changed directly onchange function adding 'treenode1 ' . state value [ this.state.values ] printed render ( ) function look correct , directly change handlevalues ( ) function rather changed this.setstate ( ) . wonder happens guess right ? : )",
        "title_stopwords_removal_lemmatization": "question this.state this.setstate"
    },
    {
        "issue_id": 528921330,
        "title": "How do suspense and subscriptions interact?",
        "label": [
            "Type: Question",
            "Resolution: Stale"
        ],
        "date": "2019-11-26T19:15:10Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\nAsk a question\r\n\r\n**What is the current behavior?**\r\nWith `Suspense`, a component throws a `Promise` when it encounters something that's not ready. However, our company's data fetching is subscription-oriented: At a very high level, the following happens:\r\n\r\n1. Component renders, and calls `useFoo(id, 'name', 'amount', 'discounts');`\r\n2. Internally, the hook adds a callback to the `FooLoader` which is responsible for batching and sending async requests. The callback will invoke the setter for a `useState` inside the hook to force a rerender of the consuming component. \r\n3. The hook returns a [`RemoteData<Pick<Foo, 'name' | 'amount' | 'discounts'>>`](https://github.com/ExtraHop/ts-remote-data) which could contain the data if it was locally available, or is just a constant that says, \"I haven't asked for this data yet\"\r\n4. When the data becomes available, or the request for the data fails, the `FooLoader` invokes the hook-passed-in callback method, which triggers the rerender, which presents the new component state.\r\n\r\nAt no point in there does the component have a `Promise`. As a result, I'm not sure it's possible for it to throw anything; it's depending on the `useState` inside `useFoo` to trigger rerender when data is available, but if we throw then that never happens and we wouldn't ever complete.\r\n\r\nThrowing a `Promise` from inside the hook doesn't seem right, as it would be very difficult to combine multiple data dependencies in a single component.\r\n\r\nThe only alternative seems to be a pretty sizable plumbing change to return a `Promise` instead of the loading state constant, but that seems to force a lot of allocations and boilerplate code to handle the \"maybe not ready the first time\" case.\r\n\r\nNote: Posting in response to [this tweet](https://twitter.com/dan_abramov/status/1194434908984414208) by @gaearon ",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**  Ask a question    **What is the current behavior?**  With `Suspense`, a component throws a `Promise` when it encounters something that's not ready. However, our company's data fetching is subscription-oriented: At a very high level, the following happens:    1. Component renders, and calls `useFoo(id, 'name', 'amount', 'discounts');`  2. Internally, the hook adds a callback to the `FooLoader` which is responsible for batching and sending async requests. The callback will invoke the setter for a `useState` inside the hook to force a rerender of the consuming component.   3. The hook returns a [`RemoteData<Pick<Foo, 'name' | 'amount' | 'discounts'>>`](https://github.com/ExtraHop/ts-remote-data) which could contain the data if it was locally available, or is just a constant that says, \"I haven't asked for this data yet\"  4. When the data becomes available, or the request for the data fails, the `FooLoader` invokes the hook-passed-in callback method, which triggers the rerender, which presents the new component state.    At no point in there does the component have a `Promise`. As a result, I'm not sure it's possible for it to throw anything; it's depending on the `useState` inside `useFoo` to trigger rerender when data is available, but if we throw then that never happens and we wouldn't ever complete.    Throwing a `Promise` from inside the hook doesn't seem right, as it would be very difficult to combine multiple data dependencies in a single component.    The only alternative seems to be a pretty sizable plumbing change to return a `Promise` instead of the loading state constant, but that seems to force a lot of allocations and boilerplate code to handle the \"maybe not ready the first time\" case.    Note: Posting in response to [this tweet](https://twitter.com/dan_abramov/status/1194434908984414208) by @gaearon",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**  Ask a question    **What is the current behavior?**  With `Suspense`, a component throws a `Promise` when it encounters something that's not ready. However, our company's data fetching is subscription-oriented: At a very high level, the following happens:    1. Component renders, and calls `useFoo(id, 'name', 'amount', 'discounts');`  2. Internally, the hook adds a callback to the `FooLoader` which is responsible for batching and sending async requests. The callback will invoke the setter for a `useState` inside the hook to force a rerender of the consuming component.   3. The hook returns a [`RemoteData<Pick<Foo, 'name' | 'amount' | 'discounts'>>`](https://github.com/ExtraHop/ts-remote-data) which could contain the data if it was locally available, or is just a constant that says, \"I haven't asked for this data yet\"  4. When the data becomes available, or the request for the data fails, the `FooLoader` invokes the hook-passed-in callback method, which triggers the rerender, which presents the new component state.    At no point in there does the component have a `Promise`. As a result, I'm not sure it's possible for it to throw anything; it's depending on the `useState` inside `useFoo` to trigger rerender when data is available, but if we throw then that never happens and we wouldn't ever complete.    Throwing a `Promise` from inside the hook doesn't seem right, as it would be very difficult to combine multiple data dependencies in a single component.    The only alternative seems to be a pretty sizable plumbing change to return a `Promise` instead of the loading state constant, but that seems to force a lot of allocations and boilerplate code to handle the \"maybe not ready the first time\" case.    Note: Posting in response to [this tweet](https://twitter.com/dan_abramov/status/1194434908984414208) by @gaearon",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** Ask a question **What is the current behavior?** With `Suspense`, a component throws a `Promise` when it encounters something that's not ready. However, our company's data fetching is subscription-oriented: At a very high level, the following happens: 1. Component renders, and calls `useFoo(id, 'name', 'amount', 'discounts');` 2. Internally, the hook adds a callback to the `FooLoader` which is responsible for batching and sending async requests. The callback will invoke the setter for a `useState` inside the hook to force a rerender of the consuming component. 3. The hook returns a  which could contain the data if it was locally available, or is just a constant that says, \"I haven't asked for this data yet\" 4. When the data becomes available, or the request for the data fails, the `FooLoader` invokes the hook-passed-in callback method, which triggers the rerender, which presents the new component state. At no point in there does the component have a `Promise`. As a result, I'm not sure it's possible for it to throw anything; it's depending on the `useState` inside `useFoo` to trigger rerender when data is available, but if we throw then that never happens and we wouldn't ever complete. Throwing a `Promise` from inside the hook doesn't seem right, as it would be very difficult to combine multiple data dependencies in a single component. The only alternative seems to be a pretty sizable plumbing change to return a `Promise` instead of the loading state constant, but that seems to force a lot of allocations and boilerplate code to handle the \"maybe not ready the first time\" case. Note: Posting in response to  by @gaearon",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * ask question * * current behavior ? * * ` suspense ` , component throw ` promise ` encounter something 's ready . however , company 's data fetching subscription-oriented : high level , following happens : 1. component render , call ` usefoo ( id , 'name ' , 'amount ' , 'discounts ' ) ; ` 2. internally , hook add callback ` fooloader ` responsible batching sending async request . callback invoke setter ` usestate ` inside hook force rerender consuming component . 3. hook return could contain data locally available , constant say , `` n't asked data yet '' 4. data becomes available , request data fails , ` fooloader ` invokes hook-passed-in callback method , trigger rerender , present new component state . point component ` promise ` . result , 'm sure 's possible throw anything ; 's depending ` usestate ` inside ` usefoo ` trigger rerender data available , throw never happens would n't ever complete . throwing ` promise ` inside hook n't seem right , would difficult combine multiple data dependency single component . alternative seems pretty sizable plumbing change return ` promise ` instead loading state constant , seems force lot allocation boilerplate code handle `` maybe ready first time '' case . note : posting response @ gaearon",
        "title_stopwords_removal_lemmatization": "suspense subscription interact ?"
    },
    {
        "issue_id": 528399520,
        "title": "Why useEffect's default behavior is to run on every render?",
        "label": [
            "Type: Question"
        ],
        "date": "2019-11-25T23:35:19Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\nAPI design question about `useEffect`\r\n\r\n**What is the current behavior?**\r\nCurrently `useEffect` runs on every render. This default behavior can be dangerous in situations like dealing with HTTP requests when you forget to pass the second argument. This seems to be a common mistake especially for newcomers like myself. I can't think of many (any) patterns where you want to run `useEffect` on every render. What was the reasoning behind not defaulting to run once? \r\n",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**  API design question about `useEffect`    **What is the current behavior?**  Currently `useEffect` runs on every render. This default behavior can be dangerous in situations like dealing with HTTP requests when you forget to pass the second argument. This seems to be a common mistake especially for newcomers like myself. I can't think of many (any) patterns where you want to run `useEffect` on every render. What was the reasoning behind not defaulting to run once?",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**  API design question about `useEffect`    **What is the current behavior?**  Currently `useEffect` runs on every render. This default behavior can be dangerous in situations like dealing with HTTP requests when you forget to pass the second argument. This seems to be a common mistake especially for newcomers like myself. I can't think of many (any) patterns where you want to run `useEffect` on every render. What was the reasoning behind not defaulting to run once?",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** API design question about `useEffect` **What is the current behavior?** Currently `useEffect` runs on every render. This default behavior can be dangerous in situations like dealing with HTTP requests when you forget to pass the second argument. This seems to be a common mistake especially for newcomers like myself. I can't think of many (any) patterns where you want to run `useEffect` on every render. What was the reasoning behind not defaulting to run once?",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * api design question ` useeffect ` * * current behavior ? * * currently ` useeffect ` run every render . default behavior dangerous situation like dealing http request forget pas second argument . seems common mistake especially newcomer like . ca n't think many ( ) pattern want run ` useeffect ` every render . reasoning behind defaulting run ?",
        "title_stopwords_removal_lemmatization": "useeffect 's default behavior run every render ?"
    },
    {
        "issue_id": 525899958,
        "title": "Why include refs as a feature? -- seems broken and unnecessary",
        "label": [
            "Type: Question"
        ],
        "date": "2019-11-20T16:02:31Z",
        "status": "closed",
        "description": "\r\nRefs never seem to work, is this a broken feature?\r\n\r\nWhy not remove them and just let people use \r\ndocument.querySelector('#id').action like normal people.\r\n\r\nalso, what does this mean? \r\n\r\n Function components cannot have refs. Did you mean to use React.forwardRef()?",
        "remove_template_description": "Refs never seem to work, is this a broken feature?    Why not remove them and just let people use   document.querySelector('#id').action like normal people.    also, what does this mean?      Function components cannot have refs. Did you mean to use React.forwardRef()?",
        "human_words": "Refs never seem to work, is this a broken feature?    Why not remove them and just let people use   document.querySelector('#id').action like normal people.    also, what does this mean?      Function components cannot have refs. Did you mean to use React.forwardRef()?",
        "human_words_regrex": "Refs never seem to work, is this a broken feature? Why not remove them and just let people use document.querySelector('#id').action like normal people. also, what does this mean? Function components cannot have refs. Did you mean to use React.forwardRef()?",
        "human_words_stopwords_removal_lemmatization": "ref never seem work , broken feature ? remove let people use document.queryselector ( ' # id ' ) .action like normal people . also , mean ? function component ref . mean use react.forwardref ( ) ?",
        "title_stopwords_removal_lemmatization": "include ref feature ? -- seems broken unnecessary"
    },
    {
        "issue_id": 517222256,
        "title": "Static rendering strategy doesn't work on codesplitted routes",
        "label": [
            "Type: Question",
            "Resolution: Needs More Information",
            "Component: Server Rendering",
            "Resolution: Stale"
        ],
        "date": "2019-11-04T15:21:26Z",
        "status": "closed",
        "description": "I'm not really sure if it is a bug or not but I'm facing problems trying to use static rendering strategy + injecting DOM elements manually to a non hydrated react component. \r\n\r\n**What is the expected behavior?**\r\nThe thing that I expect to do is the next:\r\n1 - Render a component on server side and server it to client\r\n2 - On the head of my app having a JS that will inject some DOM elements (ads) on non hydratable components.\r\n3 - On client avoid hydratation of that component using the hacky thing of empty dangerousHTML\r\n\r\n**What is the current behavior?**\r\nThe thing that I expect to do is the next:\r\n1 - Render a component on server side and server it to client\r\n2 - On the head of my app having a JS that will inject some DOM elements (ads) on non hydratable components.\r\n3 - On client hydratation the code is throwing a ssr vs csr missmatch and is re-building everything.\r\n\r\nI've tested it on pages without code-splitting and them seem to work like a charm, only have this behavior on code splitted routes.\r\n\r\nWhat I'm doing wrong?\r\n",
        "remove_template_description": "I'm not really sure if it is a bug or not but I'm facing problems trying to use static rendering strategy + injecting DOM elements manually to a non hydrated react component.     **What is the expected behavior?**  The thing that I expect to do is the next:  1 - Render a component on server side and server it to client  2 - On the head of my app having a JS that will inject some DOM elements (ads) on non hydratable components.  3 - On client avoid hydratation of that component using the hacky thing of empty dangerousHTML    **What is the current behavior?**  The thing that I expect to do is the next:  1 - Render a component on server side and server it to client  2 - On the head of my app having a JS that will inject some DOM elements (ads) on non hydratable components.  3 - On client hydratation the code is throwing a ssr vs csr missmatch and is re-building everything.    I've tested it on pages without code-splitting and them seem to work like a charm, only have this behavior on code splitted routes.    What I'm doing wrong?",
        "human_words": "I'm not really sure if it is a bug or not but I'm facing problems trying to use static rendering strategy + injecting DOM elements manually to a non hydrated react component.     **What is the expected behavior?**  The thing that I expect to do is the next:  1 - Render a component on server side and server it to client  2 - On the head of my app having a JS that will inject some DOM elements (ads) on non hydratable components.  3 - On client avoid hydratation of that component using the hacky thing of empty dangerousHTML    **What is the current behavior?**  The thing that I expect to do is the next:  1 - Render a component on server side and server it to client  2 - On the head of my app having a JS that will inject some DOM elements (ads) on non hydratable components.  3 - On client hydratation the code is throwing a ssr vs csr missmatch and is re-building everything.    I've tested it on pages without code-splitting and them seem to work like a charm, only have this behavior on code splitted routes.    What I'm doing wrong?",
        "human_words_regrex": "I'm not really sure if it is a bug or not but I'm facing problems trying to use static rendering strategy + injecting DOM elements manually to a non hydrated react component. **What is the expected behavior?** The thing that I expect to do is the next: 1 - Render a component on server side and server it to client 2 - On the head of my app having a JS that will inject some DOM elements (ads) on non hydratable components. 3 - On client avoid hydratation of that component using the hacky thing of empty dangerousHTML **What is the current behavior?** The thing that I expect to do is the next: 1 - Render a component on server side and server it to client 2 - On the head of my app having a JS that will inject some DOM elements (ads) on non hydratable components. 3 - On client hydratation the code is throwing a ssr vs csr missmatch and is re-building everything. I've tested it on pages without code-splitting and them seem to work like a charm, only have this behavior on code splitted routes. What I'm doing wrong?",
        "human_words_stopwords_removal_lemmatization": "'m really sure bug 'm facing problem trying use static rendering strategy + injecting dom element manually non hydrated react component . * * expected behavior ? * * thing expect next : 1 - render component server side server client 2 - head app j inject dom element ( ad ) non hydratable component . 3 - client avoid hydratation component using hacky thing empty dangeroushtml * * current behavior ? * * thing expect next : 1 - render component server side server client 2 - head app j inject dom element ( ad ) non hydratable component . 3 - client hydratation code throwing ssr v csr missmatch re-building everything . 've tested page without code-splitting seem work like charm , behavior code splitted route . 'm wrong ?",
        "title_stopwords_removal_lemmatization": "static rendering strategy n't work codesplitted route"
    },
    {
        "issue_id": 516007481,
        "title": "DevTools component filter does not work with location",
        "label": [
            "Type: Question",
            "Component: Developer Tools"
        ],
        "date": "2019-11-01T09:37:27Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\nReport a bug.\r\n\r\n**What is the current behavior?**\r\nIn DevTools when a component filter is added with field set to `location` and regex set to `.*`, nothing is filtered out. (BTW, no documentation in this subject is available anywhere.)\r\n\r\n**What is the expected behavior?**\r\nAt least some components be filtered out.\r\nIt would also be awesome if the `location` was shown somewhere for the selected component, so that users can know what kind of Regex they should put together.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact DevTools 4.2.0 on Firefox 69.0.3.",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**  Report a bug.    **What is the current behavior?**  In DevTools when a component filter is added with field set to `location` and regex set to `.*`, nothing is filtered out. (BTW, no documentation in this subject is available anywhere.)    **What is the expected behavior?**  At least some components be filtered out.  It would also be awesome if the `location` was shown somewhere for the selected component, so that users can know what kind of Regex they should put together.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  React DevTools 4.2.0 on Firefox 69.0.3.",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**  Report a bug.    **What is the current behavior?**  In DevTools when a component filter is added with field set to `location` and regex set to `.*`, nothing is filtered out. (BTW, no documentation in this subject is available anywhere.)    **What is the expected behavior?**  At least some components be filtered out.  It would also be awesome if the `location` was shown somewhere for the selected component, so that users can know what kind of Regex they should put together.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  React DevTools 4.2.0 on Firefox 69.0.3.",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** Report a bug. **What is the current behavior?** In DevTools when a component filter is added with field set to `location` and regex set to `.*`, nothing is filtered out. (BTW, no documentation in this subject is available anywhere.) **What is the expected behavior?** At least some components be filtered out. It would also be awesome if the `location` was shown somewhere for the selected component, so that users can know what kind of Regex they should put together. **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** React DevTools 4.2.0 on Firefox 69.0.3.",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * report bug . * * current behavior ? * * devtools component filter added field set ` location ` regex set ` . * ` , nothing filtered . ( btw , documentation subject available anywhere . ) * * expected behavior ? * * least component filtered . would also awesome ` location ` shown somewhere selected component , user know kind regex put together . * * version react , browser / o affected issue ? work previous version react ? * * react devtools 4.2.0 firefox 69.0.3 .",
        "title_stopwords_removal_lemmatization": "devtools component filter work location"
    },
    {
        "issue_id": 515714470,
        "title": "Missing React tab in chrome dev tools",
        "label": [
            "Type: Question",
            "Component: Developer Tools"
        ],
        "date": "2019-10-31T20:13:50Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\n**What is the current behavior?**\r\n\r\nThere is no React tab in my chrome dev toolbar anymore.  I have deleted and reinstalled the react extension but the issue was not resolved.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n**What is the expected behavior?**\r\n\r\nThere use to be a React tab in the chrome dev console toolbar\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nI'm using ios on google chrome.",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**    **What is the current behavior?**    There is no React tab in my chrome dev toolbar anymore.  I have deleted and reinstalled the react extension but the issue was not resolved.    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**    **What is the expected behavior?**    There use to be a React tab in the chrome dev console toolbar    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    I'm using ios on google chrome.",
        "human_words": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**    **What is the current behavior?**    There is no React tab in my chrome dev toolbar anymore.  I have deleted and reinstalled the react extension but the issue was not resolved.    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**    **What is the expected behavior?**    There use to be a React tab in the chrome dev console toolbar    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    I'm using ios on google chrome.",
        "human_words_regrex": " **Do you want to request a *feature* or report a *bug*?** **What is the current behavior?** There is no React tab in my chrome dev toolbar anymore. I have deleted and reinstalled the react extension but the issue was not resolved. **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle ( or CodeSandbox ( example below:** **What is the expected behavior?** There use to be a React tab in the chrome dev console toolbar **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** I'm using ios on google chrome.",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * * * current behavior ? * * react tab chrome dev toolbar anymore . deleted reinstalled react extension issue resolved . * * current behavior bug , please provide step reproduce possible minimal demo problem . bug get fixed much faster run code n't dependency react . paste link jsfiddle ( codesandbox ( example : * * * * expected behavior ? * * use react tab chrome dev console toolbar * * version react , browser / o affected issue ? work previous version react ? * * 'm using io google chrome .",
        "title_stopwords_removal_lemmatization": "missing react tab chrome dev tool"
    },
    {
        "issue_id": 514511977,
        "title": "Why is useEffect hook not activating when a component is reloaded after previously throwing an error?",
        "label": [
            "Type: Question",
            "Component: Hooks"
        ],
        "date": "2019-10-30T09:25:24Z",
        "status": "closed",
        "description": "I am learning React and Redux within a Typescript environment. I have managed to implement a container that dispatches a fetch action and subscribes to corresponding fetch success and error state notifications from a redux store. The source code is listed below:\r\n\r\n**Container**\r\n``` typescript\r\nimport React, { useEffect } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { GridSpacing } from '@material-ui/core/Grid';\r\n\r\nimport Course from '../components/Course/Course';\r\n\r\nimport { courseModels } from '../redux/features/course';\r\nimport { courseSelectors } from '../redux/features/course';\r\nimport { fetchCoursesAsync } from '../redux/features/course/actions';\r\nimport { RootState } from 'ReduxTypes';\r\n\r\ntype ErrorReport = { hasError: boolean; error?: Error };\r\ntype StateProps = {\r\n  isLoading: boolean;\r\n  courses: courseModels.Course[];\r\n  error: ErrorReport;\r\n};\r\n\r\n/**\r\n * Redux dispatch and state mappings\r\n */\r\nconst dispatchProps = {\r\n  fetchCourses: fetchCoursesAsync.request,\r\n};\r\n\r\nconst mapStateToProps = (state: RootState): StateProps => ({\r\n  isLoading: state.courses.isLoadingCourses,\r\n  courses: courseSelectors.getReduxCourses(state.courses),\r\n  error: courseSelectors.getReduxCoursesError(state.courses),\r\n});\r\n\r\n/**\r\n * Component property type definitions\r\n */\r\ntype Props = ReturnType<typeof mapStateToProps> & typeof dispatchProps;\r\n\r\n/**\r\n * CourseList component\r\n */\r\nconst CourseList = ({\r\n  courses = [],\r\n  error,\r\n  fetchCourses,\r\n  isLoading,\r\n}: Propas): JSX.Element => {\r\n  // fetch course action on mount\r\n  useEffect(() => {\r\n    console.log('COURSELIST FETCHING COURSES');\r\n    fetchCourses();\r\n  }, [fetchCourses]);\r\n\r\n  if (isLoading) {\r\n    return <p>Loading...</p>;\r\n  }\r\n\r\n  if (error && error.hasError && error.error) {\r\n    throw error.error;\r\n    // if throw an error then encapsulating error boundary catches and displays.\r\n    // However when the container is loaded again via clicking on a Navbar link the useEffect\r\n    // action does not trigger. \r\n    \r\n    // Alternatively, if the error is rendered inside the container then the useEffect hook is \r\n    // still activated if the container is loaded again (e.g. via clicking on a Navbar link).\r\n    // return <p>{JSON.stringify(error.error, null, 2)}</p>;\r\n  }\r\n\r\n  return (\r\n    <div style={{ marginTop: 20, padding: 30 }}>\r\n      {\r\n        <Grid container spacing={2 as GridSpacing} justify=\"center\">\r\n          {courses.map(element => (\r\n            <Grid item key={element.courseID}>\r\n              <Course course={element} />\r\n            </Grid>\r\n          ))}\r\n        </Grid>\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\n/**\r\n * Exports\r\n */\r\nexport default connect(\r\n  mapStateToProps,\r\n  dispatchProps,\r\n)(CourseList);\r\n```\r\n\r\nIf I throw an error within the container then the encapsulating error boundary catches and displays it. However, when the container is reloaded via clicking on a Navbar link the useEffect\r\naction does not trigger. Subsequently, the fetchCourses action is not dispatched.\r\n\r\nWhy is the _useEffect_ hook not triggered on second load after it previously threw an error?\r\n\r\nMy ErrorBoundary component includes a home button for navigating to '/'. However, after clicking home, if I then click on link to display my CourseList container the ErrorBoundary is again displayed. I do not see the console log message displayed from useEffect. When navigating back to '/courses' shouldn't this recreate the CourseList container? Is this not happening because the error was thrown in render previously, so the container is being reused?\r\n\r\nWhat is best practice for resetting a component that threw an error for surrounding ErrorBoundary?",
        "remove_template_description": "I am learning React and Redux within a Typescript environment. I have managed to implement a container that dispatches a fetch action and subscribes to corresponding fetch success and error state notifications from a redux store. The source code is listed below:    **Container**  ``` typescript  import React, { useEffect } from 'react';    import { connect } from 'react-redux';  import Grid from '@material-ui/core/Grid';  import { GridSpacing } from '@material-ui/core/Grid';    import Course from '../components/Course/Course';    import { courseModels } from '../redux/features/course';  import { courseSelectors } from '../redux/features/course';  import { fetchCoursesAsync } from '../redux/features/course/actions';  import { RootState } from 'ReduxTypes';    type ErrorReport = { hasError: boolean; error?: Error };  type StateProps = {    isLoading: boolean;    courses: courseModels.Course[];    error: ErrorReport;  };    /**   * Redux dispatch and state mappings   */  const dispatchProps = {    fetchCourses: fetchCoursesAsync.request,  };    const mapStateToProps = (state: RootState): StateProps => ({    isLoading: state.courses.isLoadingCourses,    courses: courseSelectors.getReduxCourses(state.courses),    error: courseSelectors.getReduxCoursesError(state.courses),  });    /**   * Component property type definitions   */  type Props = ReturnType<typeof mapStateToProps> & typeof dispatchProps;    /**   * CourseList component   */  const CourseList = ({    courses = [],    error,    fetchCourses,    isLoading,  }: Propas): JSX.Element => {    // fetch course action on mount    useEffect(() => {      console.log('COURSELIST FETCHING COURSES');      fetchCourses();    }, [fetchCourses]);      if (isLoading) {      return <p>Loading...</p>;    }      if (error && error.hasError && error.error) {      throw error.error;      // if throw an error then encapsulating error boundary catches and displays.      // However when the container is loaded again via clicking on a Navbar link the useEffect      // action does not trigger.             // Alternatively, if the error is rendered inside the container then the useEffect hook is       // still activated if the container is loaded again (e.g. via clicking on a Navbar link).      // return <p>{JSON.stringify(error.error, null, 2)}</p>;    }      return (      <div style={{ marginTop: 20, padding: 30 }}>        {          <Grid container spacing={2 as GridSpacing} justify=\"center\">            {courses.map(element => (              <Grid item key={element.courseID}>                <Course course={element} />              </Grid>            ))}          </Grid>        }      </div>    );  };    /**   * Exports   */  export default connect(    mapStateToProps,    dispatchProps,  )(CourseList);  ```    If I throw an error within the container then the encapsulating error boundary catches and displays it. However, when the container is reloaded via clicking on a Navbar link the useEffect  action does not trigger. Subsequently, the fetchCourses action is not dispatched.    Why is the _useEffect_ hook not triggered on second load after it previously threw an error?    My ErrorBoundary component includes a home button for navigating to '/'. However, after clicking home, if I then click on link to display my CourseList container the ErrorBoundary is again displayed. I do not see the console log message displayed from useEffect. When navigating back to '/courses' shouldn't this recreate the CourseList container? Is this not happening because the error was thrown in render previously, so the container is being reused?    What is best practice for resetting a component that threw an error for surrounding ErrorBoundary?",
        "human_words": "I am learning React and Redux within a Typescript environment. I have managed to implement a container that dispatches a fetch action and subscribes to corresponding fetch success and error state notifications from a redux store. The source code is listed below:    **Container**      If I throw an error within the container then the encapsulating error boundary catches and displays it. However, when the container is reloaded via clicking on a Navbar link the useEffect  action does not trigger. Subsequently, the fetchCourses action is not dispatched.    Why is the _useEffect_ hook not triggered on second load after it previously threw an error?    My ErrorBoundary component includes a home button for navigating to '/'. However, after clicking home, if I then click on link to display my CourseList container the ErrorBoundary is again displayed. I do not see the console log message displayed from useEffect. When navigating back to '/courses' shouldn't this recreate the CourseList container? Is this not happening because the error was thrown in render previously, so the container is being reused?    What is best practice for resetting a component that threw an error for surrounding ErrorBoundary?",
        "human_words_regrex": "I am learning React and Redux within a Typescript environment. I have managed to implement a container that dispatches a fetch action and subscribes to corresponding fetch success and error state notifications from a redux store. The source code is listed below: **Container** If I throw an error within the container then the encapsulating error boundary catches and displays it. However, when the container is reloaded via clicking on a Navbar link the useEffect action does not trigger. Subsequently, the fetchCourses action is not dispatched. Why is the _useEffect_ hook not triggered on second load after it previously threw an error? My ErrorBoundary component includes a home button for navigating to '/'. However, after clicking home, if I then click on link to display my CourseList container the ErrorBoundary is again displayed. I do not see the console log message displayed from useEffect. When navigating back to '/courses' shouldn't this recreate the CourseList container? Is this not happening because the error was thrown in render previously, so the container is being reused? What is best practice for resetting a component that threw an error for surrounding ErrorBoundary?",
        "human_words_stopwords_removal_lemmatization": "learning react redux within typescript environment . managed implement container dispatch fetch action subscribes corresponding fetch success error state notification redux store . source code listed : * * container * * throw error within container encapsulating error boundary catch display . however , container reloaded via clicking navbar link useeffect action trigger . subsequently , fetchcourses action dispatched . _useeffect_ hook triggered second load previously threw error ? errorboundary component includes home button navigating '/ ' . however , clicking home , click link display courselist container errorboundary displayed . see console log message displayed useeffect . navigating back '/courses ' n't recreate courselist container ? happening error thrown render previously , container reused ? best practice resetting component threw error surrounding errorboundary ?",
        "title_stopwords_removal_lemmatization": "useeffect hook activating component reloaded previously throwing error ?"
    },
    {
        "issue_id": 514302428,
        "title": "\"DevTools v4 is incompatible with this version of React\" with React Native & latest version of React",
        "label": [
            "Type: Question",
            "Component: Developer Tools"
        ],
        "date": "2019-10-29T23:51:32Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n**What is the current behavior?**\r\nAfter starting react-devtools, I get the following error message:\r\n```\r\nDevTools v4 is incompatible with this version of React\r\nEither upgrade React or install React DevTools v3:\r\n```\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n* Use expo cli to initialize an expo app\r\n* run `yarn add react@latest` to ensure the most recent version of React is installed (currently v16.11.0)\r\n* run `yarn add react-devtools` to install react-devtools\r\n* run `yarn start` to start the app\r\n* run `npx react-devtools` to open react-devtools\r\n\r\n**What is the expected behavior?**\r\nreact-devtools should work with React Native and the latest version of React\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact 16.11.0\r\nReact Native 0.59.3\r\nFedora 30",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**  Bug  **What is the current behavior?**  After starting react-devtools, I get the following error message:  ```  DevTools v4 is incompatible with this version of React  Either upgrade React or install React DevTools v3:  ```    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**  * Use expo cli to initialize an expo app  * run `yarn add react@latest` to ensure the most recent version of React is installed (currently v16.11.0)  * run `yarn add react-devtools` to install react-devtools  * run `yarn start` to start the app  * run `npx react-devtools` to open react-devtools    **What is the expected behavior?**  react-devtools should work with React Native and the latest version of React    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  React 16.11.0  React Native 0.59.3  Fedora 30",
        "human_words": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**  Bug  **What is the current behavior?**  After starting react-devtools, I get the following error message:      **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**  * Use expo cli to initialize an expo app  * run `yarn add react@latest` to ensure the most recent version of React is installed (currently v16.11.0)  * run `yarn add react-devtools` to install react-devtools  * run `yarn start` to start the app  * run `npx react-devtools` to open react-devtools    **What is the expected behavior?**  react-devtools should work with React Native and the latest version of React    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  React 16.11.0  React Native 0.59.3  Fedora 30",
        "human_words_regrex": " **Do you want to request a *feature* or report a *bug*?** Bug **What is the current behavior?** After starting react-devtools, I get the following error message: **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle ( or CodeSandbox ( example below:** * Use expo cli to initialize an expo app * run `yarn add react@latest` to ensure the most recent version of React is installed (currently v16.11.0) * run `yarn add react-devtools` to install react-devtools * run `yarn start` to start the app * run `npx react-devtools` to open react-devtools **What is the expected behavior?** react-devtools should work with React Native and the latest version of React **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** React 16.11.0 React Native 0.59.3 Fedora 30",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * bug * * current behavior ? * * starting react-devtools , get following error message : * * current behavior bug , please provide step reproduce possible minimal demo problem . bug get fixed much faster run code n't dependency react . paste link jsfiddle ( codesandbox ( example : * * * use expo cli initialize expo app * run ` yarn add react @ latest ` ensure recent version react installed ( currently v16.11.0 ) * run ` yarn add react-devtools ` install react-devtools * run ` yarn start ` start app * run ` npx react-devtools ` open react-devtools * * expected behavior ? * * react-devtools work react native latest version react * * version react , browser / o affected issue ? work previous version react ? * * react 16.11.0 react native 0.59.3 fedora 30",
        "title_stopwords_removal_lemmatization": "`` devtools v4 incompatible version react '' react native & latest version react"
    },
    {
        "issue_id": 513252907,
        "title": "Utilize Suspense to express app init loader",
        "label": [
            "Type: Question",
            "Component: Suspense",
            "Resolution: Stale"
        ],
        "date": "2019-10-28T11:40:50Z",
        "status": "closed",
        "description": "With Concurrent mode getting finalized, I went to try to solve an old problem I have.\r\n\r\nThe app needs to run a series of init steps before it can do anything viable. Each steps depends on the previous one. This is expressed as nested components. The fairly elaborate animated logo is shown for that process, but it's being restarted for each step and the experience is not that nice.\r\n\r\nI've prepared a demo with some experiments: https://codesandbox.io/s/react-suspense-loader-experimental-0ww6i\r\n\r\nThe first one that's active initially is what we currently have. The second is what we would like to have, but with less naive coding of decreasing counter.\r\n\r\nThe last one is my attempt to use Suspense, but I definitely missing something out here, because it behaves very oddly and I cannot seem to figure out why. I wonder if the new `useTransition` should be used somehow or what's going on here.",
        "remove_template_description": "With Concurrent mode getting finalized, I went to try to solve an old problem I have.    The app needs to run a series of init steps before it can do anything viable. Each steps depends on the previous one. This is expressed as nested components. The fairly elaborate animated logo is shown for that process, but it's being restarted for each step and the experience is not that nice.    I've prepared a demo with some experiments: https://codesandbox.io/s/react-suspense-loader-experimental-0ww6i    The first one that's active initially is what we currently have. The second is what we would like to have, but with less naive coding of decreasing counter.    The last one is my attempt to use Suspense, but I definitely missing something out here, because it behaves very oddly and I cannot seem to figure out why. I wonder if the new `useTransition` should be used somehow or what's going on here.",
        "human_words": "With Concurrent mode getting finalized, I went to try to solve an old problem I have.    The app needs to run a series of init steps before it can do anything viable. Each steps depends on the previous one. This is expressed as nested components. The fairly elaborate animated logo is shown for that process, but it's being restarted for each step and the experience is not that nice.    I've prepared a demo with some experiments: https://codesandbox.io/s/react-suspense-loader-experimental-0ww6i    The first one that's active initially is what we currently have. The second is what we would like to have, but with less naive coding of decreasing counter.    The last one is my attempt to use Suspense, but I definitely missing something out here, because it behaves very oddly and I cannot seem to figure out why. I wonder if the new `useTransition` should be used somehow or what's going on here.",
        "human_words_regrex": "With Concurrent mode getting finalized, I went to try to solve an old problem I have. The app needs to run a series of init steps before it can do anything viable. Each steps depends on the previous one. This is expressed as nested components. The fairly elaborate animated logo is shown for that process, but it's being restarted for each step and the experience is not that nice. I've prepared a demo with some experiments:  The first one that's active initially is what we currently have. The second is what we would like to have, but with less naive coding of decreasing counter. The last one is my attempt to use Suspense, but I definitely missing something out here, because it behaves very oddly and I cannot seem to figure out why. I wonder if the new `useTransition` should be used somehow or what's going on here.",
        "human_words_stopwords_removal_lemmatization": "concurrent mode getting finalized , went try solve old problem . app need run series init step anything viable . step depends previous one . expressed nested component . fairly elaborate animated logo shown process , 's restarted step experience nice . 've prepared demo experiment : first one 's active initially currently . second would like , le naive coding decreasing counter . last one attempt use suspense , definitely missing something , behaves oddly seem figure . wonder new ` usetransition ` used somehow 's going .",
        "title_stopwords_removal_lemmatization": "utilize suspense express app init loader"
    },
    {
        "issue_id": 513139880,
        "title": "\"de-opting to synchronous mode\" in use-subscription README",
        "label": [
            "Type: Question",
            "Component: Hooks"
        ],
        "date": "2019-10-28T07:31:07Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nOutdated README (maybe?)\r\n\r\n**What do the docs currently say?**\r\n\r\n> use-subscription is safe to use in concurrent mode. However, [it achieves correctness by sometimes de-opting to synchronous mode](https://github.com/facebook/react/issues/13186#issuecomment-403959161), obviating the benefits of concurrent rendering.\r\n\r\nIn the linked issue, @bvaughn [explains](https://github.com/facebook/react/issues/13186#issuecomment-403959161) that this is referring to chains of synchronous updates using `componentDidUpdate`. However, the `useSubscription` hook now uses a passive `useEffect()`, as opposed to a synchronous `componentDidUpdate()`.\r\n\r\nWould this mean that it's no longer \"de-opting to sync mode\", and the warning could be removed from the README?",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**    Outdated README (maybe?)    **What do the docs currently say?**    > use-subscription is safe to use in concurrent mode. However, [it achieves correctness by sometimes de-opting to synchronous mode](https://github.com/facebook/react/issues/13186#issuecomment-403959161), obviating the benefits of concurrent rendering.    In the linked issue, @bvaughn [explains](https://github.com/facebook/react/issues/13186#issuecomment-403959161) that this is referring to chains of synchronous updates using `componentDidUpdate`. However, the `useSubscription` hook now uses a passive `useEffect()`, as opposed to a synchronous `componentDidUpdate()`.    Would this mean that it's no longer \"de-opting to sync mode\", and the warning could be removed from the README?",
        "human_words": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**    Outdated README (maybe?)    **What do the docs currently say?**    > use-subscription is safe to use in concurrent mode. However, [it achieves correctness by sometimes de-opting to synchronous mode](https://github.com/facebook/react/issues/13186#issuecomment-403959161), obviating the benefits of concurrent rendering.    In the linked issue, @bvaughn [explains](https://github.com/facebook/react/issues/13186#issuecomment-403959161) that this is referring to chains of synchronous updates using `componentDidUpdate`. However, the `useSubscription` hook now uses a passive `useEffect()`, as opposed to a synchronous `componentDidUpdate()`.    Would this mean that it's no longer \"de-opting to sync mode\", and the warning could be removed from the README?",
        "human_words_regrex": " **Do you want to request a *feature* or report a *bug*?** Outdated README (maybe?) **What do the docs currently say?** > use-subscription is safe to use in concurrent mode. However, , obviating the benefits of concurrent rendering. In the linked issue, @bvaughn  that this is referring to chains of synchronous updates using `componentDidUpdate`. However, the `useSubscription` hook now uses a passive `useEffect()`, as opposed to a synchronous `componentDidUpdate()`. Would this mean that it's no longer \"de-opting to sync mode\", and the warning could be removed from the README?",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * outdated readme ( maybe ? ) * * doc currently say ? * * > use-subscription safe use concurrent mode . however , , obviating benefit concurrent rendering . linked issue , @ bvaughn referring chain synchronous update using ` componentdidupdate ` . however , ` usesubscription ` hook us passive ` useeffect ( ) ` , opposed synchronous ` componentdidupdate ( ) ` . would mean 's longer `` de-opting sync mode '' , warning could removed readme ?",
        "title_stopwords_removal_lemmatization": "`` de-opting synchronous mode '' use-subscription readme"
    },
    {
        "issue_id": 507185955,
        "title": "Weird behavior with functional components and useState, A bug or \"Another rule!\"",
        "label": [
            "Type: Question"
        ],
        "date": "2019-10-15T11:35:15Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n```React : '16.9.0'```\r\n\r\nsample code \r\n```javascript\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nfunction OptionOne(){\r\n  return <div>Blue pill</div>\r\n}\r\n\r\nconst OptionTwo = React.memo(function OptionTwo(){\r\n  return <div>Red pill</div>\r\n});\r\n\r\n\r\nfunction App() {\r\n  const [ Option, setOption ] = React.useState(null);\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <button onClick={e=>setOption(OptionOne)}>Option one</button>\r\n        <button onClick={e=>setOption(OptionTwo)}>Option two</button>\r\n      </div>\r\n      { Option && <Option/>}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\n```\r\nWell the expected behavior was Option one wasn't suppose to throw an error;\r\nsetState in class components didn't mind if a key value was a pure functional component or a class component even, but it seams the useState hook is sensitive to the value passed using the setter. If its another functional component it throws a confusing error, worst if the pure functional component passed to setVlaue of useState hook uses hooks of its own, then you get multiple misleading hooks errors to debug.\r\nSo is the useState hook working like its suppose to \"A rule not to pass a pure functional component as a value to the setValue of the useState hook\" or a bug? \r\n",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->  ```React : '16.9.0'```    sample code   ```javascript  import React from \"react\";  import ReactDOM from \"react-dom\";    function OptionOne(){    return <div>Blue pill</div>  }    const OptionTwo = React.memo(function OptionTwo(){    return <div>Red pill</div>  });      function App() {    const [ Option, setOption ] = React.useState(null);      return (      <div>        <div>          <button onClick={e=>setOption(OptionOne)}>Option one</button>          <button onClick={e=>setOption(OptionTwo)}>Option two</button>        </div>        { Option && <Option/>}      </div>    );  }    const rootElement = document.getElementById(\"root\");  ReactDOM.render(<App />, rootElement);  ```  Well the expected behavior was Option one wasn't suppose to throw an error;  setState in class components didn't mind if a key value was a pure functional component or a class component even, but it seams the useState hook is sensitive to the value passed using the setter. If its another functional component it throws a confusing error, worst if the pure functional component passed to setVlaue of useState hook uses hooks of its own, then you get multiple misleading hooks errors to debug.  So is the useState hook working like its suppose to \"A rule not to pass a pure functional component as a value to the setValue of the useState hook\" or a bug?",
        "human_words": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->      sample code     Well the expected behavior was Option one wasn't suppose to throw an error;  setState in class components didn't mind if a key value was a pure functional component or a class component even, but it seams the useState hook is sensitive to the value passed using the setter. If its another functional component it throws a confusing error, worst if the pure functional component passed to setVlaue of useState hook uses hooks of its own, then you get multiple misleading hooks errors to debug.  So is the useState hook working like its suppose to \"A rule not to pass a pure functional component as a value to the setValue of the useState hook\" or a bug?",
        "human_words_regrex": " sample code Well the expected behavior was Option one wasn't suppose to throw an error; setState in class components didn't mind if a key value was a pure functional component or a class component even, but it seams the useState hook is sensitive to the value passed using the setter. If its another functional component it throws a confusing error, worst if the pure functional component passed to setVlaue of useState hook uses hooks of its own, then you get multiple misleading hooks errors to debug. So is the useState hook working like its suppose to \"A rule not to pass a pure functional component as a value to the setValue of the useState hook\" or a bug?",
        "human_words_stopwords_removal_lemmatization": "sample code well expected behavior option one n't suppose throw error ; setstate class component n't mind key value pure functional component class component even , seam usestate hook sensitive value passed using setter . another functional component throw confusing error , worst pure functional component passed setvlaue usestate hook us hook , get multiple misleading hook error debug . usestate hook working like suppose `` rule pas pure functional component value setvalue usestate hook '' bug ?",
        "title_stopwords_removal_lemmatization": "weird behavior functional component usestate , bug `` another rule ! ''"
    },
    {
        "issue_id": 506845531,
        "title": "Can't get the profiler screenshot feature working in the React DevTools",
        "label": [
            "Type: Question",
            "Component: Developer Tools"
        ],
        "date": "2019-10-14T19:57:20Z",
        "status": "closed",
        "description": "I've recently come across [this tweet](https://twitter.com/brian_d_vaughn/status/1113200027835310080) and saw that the new DevTools profiler apparently would be able to capture images of the DOM after each commit and display them on the right side (below the commit information). \r\n\r\nWas this feature indeed added to DevTools 4.2.0? Or is it coming out in a future version?\r\n\r\nJust asking because I didn't manage to get it working while trying with my projects.\r\n\r\n**React**: 16.10.2\r\n**Browser:** Google Chrome 77.0.3865.90\r\n**DevTools:** 4.2.0-a8b8ffb89",
        "remove_template_description": "I've recently come across [this tweet](https://twitter.com/brian_d_vaughn/status/1113200027835310080) and saw that the new DevTools profiler apparently would be able to capture images of the DOM after each commit and display them on the right side (below the commit information).     Was this feature indeed added to DevTools 4.2.0? Or is it coming out in a future version?    Just asking because I didn't manage to get it working while trying with my projects.    **React**: 16.10.2  **Browser:** Google Chrome 77.0.3865.90  **DevTools:** 4.2.0-a8b8ffb89",
        "human_words": "I've recently come across [this tweet](https://twitter.com/brian_d_vaughn/status/1113200027835310080) and saw that the new DevTools profiler apparently would be able to capture images of the DOM after each commit and display them on the right side (below the commit information).     Was this feature indeed added to DevTools 4.2.0? Or is it coming out in a future version?    Just asking because I didn't manage to get it working while trying with my projects.    **React**: 16.10.2  **Browser:** Google Chrome 77.0.3865.90  **DevTools:** 4.2.0-a8b8ffb89",
        "human_words_regrex": "I've recently come across  and saw that the new DevTools profiler apparently would be able to capture images of the DOM after each commit and display them on the right side (below the commit information). Was this feature indeed added to DevTools 4.2.0? Or is it coming out in a future version? Just asking because I didn't manage to get it working while trying with my projects. **React**: 16.10.2 **Browser:** Google Chrome 77.0.3865.90 **DevTools:** 4.2.0-a8b8ffb89",
        "human_words_stopwords_removal_lemmatization": "'ve recently come across saw new devtools profiler apparently would able capture image dom commit display right side ( commit information ) . feature indeed added devtools 4.2.0 ? coming future version ? asking n't manage get working trying project . * * react * * : 16.10.2 * * browser : * * google chrome 77.0.3865.90 * * devtools : * * 4.2.0-a8b8ffb89",
        "title_stopwords_removal_lemmatization": "ca n't get profiler screenshot feature working react devtools"
    },
    {
        "issue_id": 503892165,
        "title": "Components not correctly displayed",
        "label": [
            "Type: Question",
            "Component: Developer Tools"
        ],
        "date": "2019-10-08T08:07:27Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nbug\r\n\r\n**What is the current behavior?**\r\n\r\nelements not reconized\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nonly use components tab in console of chrome.\r\n\r\n**What is the expected behavior?**\r\n\r\nsee any elements react\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nWindow 10 64bit\r\nreact ^16.8.1\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/13313/66378070-068f8e80-e9b3-11e9-9956-cd8b98525efb.png)\r\n\r\nThis is my console component visualizzation, the same page visualizated with linux&chrome not have any issue",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**    bug    **What is the current behavior?**    elements not reconized    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**    only use components tab in console of chrome.    **What is the expected behavior?**    see any elements react    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    Window 10 64bit  react ^16.8.1      ![image](https://user-images.githubusercontent.com/13313/66378070-068f8e80-e9b3-11e9-9956-cd8b98525efb.png)    This is my console component visualizzation, the same page visualizated with linux&chrome not have any issue",
        "codes_and_errors": [],
        "human_words": "**Do you want to request a *feature* or report a *bug*?**    bug    **What is the current behavior?**    elements not reconized    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**    only use components tab in console of chrome.    **What is the expected behavior?**    see any elements react    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    Window 10 64bit  react ^16.8.1      ![image](https://user-images.githubusercontent.com/13313/66378070-068f8e80-e9b3-11e9-9956-cd8b98525efb.png)    This is my console component visualizzation, the same page visualizated with linux&chrome not have any issue",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** bug **What is the current behavior?** elements not reconized **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle ( or CodeSandbox ( example below:** only use components tab in console of chrome. **What is the expected behavior?** see any elements react **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** Window 10 64bit react ^16.8.1 ! This is my console component visualizzation, the same page visualizated with linux&chrome not have any issue"
    },
    {
        "issue_id": 498688624,
        "title": "Why does parent's componentDidMount gets called first, then child's?",
        "label": [
            "Type: Question"
        ],
        "date": "2019-09-26T06:36:13Z",
        "status": "closed",
        "description": "I thought it was always the case, that first, child's `componentDidMount` would be called, and then, parent's.\r\n\r\nHowever, in this example: https://codesandbox.io/s/tender-jones-gpkz3\r\n\r\nFirst parent's `componentDidMount` is called, then Child's (check the logs).\r\n\r\nThis happens _after_ I use this in child:\r\n\r\n```\r\nexport default compose(\r\n  withStyles(styles),\r\n  withWidth()\r\n)(Child);\r\n\r\n```\r\n\r\nDoes anyone have explanation why this happens?",
        "remove_template_description": "I thought it was always the case, that first, child's `componentDidMount` would be called, and then, parent's.    However, in this example: https://codesandbox.io/s/tender-jones-gpkz3    First parent's `componentDidMount` is called, then Child's (check the logs).    This happens _after_ I use this in child:    ```  export default compose(    withStyles(styles),    withWidth()  )(Child);    ```    Does anyone have explanation why this happens?",
        "human_words": "I thought it was always the case, that first, child's `componentDidMount` would be called, and then, parent's.    However, in this example: https://codesandbox.io/s/tender-jones-gpkz3    First parent's `componentDidMount` is called, then Child's (check the logs).    This happens _after_ I use this in child:        Does anyone have explanation why this happens?",
        "human_words_regrex": "I thought it was always the case, that first, child's `componentDidMount` would be called, and then, parent's. However, in this example:  First parent's `componentDidMount` is called, then Child's (check the logs). This happens _after_ I use this in child: Does anyone have explanation why this happens?",
        "human_words_stopwords_removal_lemmatization": "thought always case , first , child 's ` componentdidmount ` would called , , parent 's . however , example : first parent 's ` componentdidmount ` called , child 's ( check log ) . happens _after_ use child : anyone explanation happens ?",
        "title_stopwords_removal_lemmatization": "parent 's componentdidmount get called first , child 's ?"
    },
    {
        "issue_id": 495643128,
        "title": "Plans for handling `hidden` differently",
        "label": [
            "Type: Question",
            "Component: Concurrent Features"
        ],
        "date": "2019-09-19T08:14:31Z",
        "status": "closed",
        "description": "In one of talks about react Suspense [dan mentioned](https://youtu.be/6g3g0Q_XVb4?t=1650) that `<div hidden={true} />` would be deprioritized by react but still rendered if it has the time.\r\n\r\nIn his example he used it to prerender content that was seemingly part of another page. However in another talk by andrew it was used to [prerender tabs](https://youtu.be/ByBPyMBTzM0?t=1742). The second showcase is incorrect according to the [living standard for this attribute](https://html.spec.whatwg.org/multipage/interaction.html#the-hidden-attribute):\r\n\r\n> The hidden attribute must not be used to hide content that could legitimately be shown in another presentation. For example, it is incorrect to use hidden to hide panels in a tabbed dialog, because the tabbed interface is merely a kind of overflow presentation \u2014 one could equally well just show all the form controls in one big page with a scrollbar.\r\n\r\nI don't necessarily agree with the reasoning given in the spec but I'm more interested if the core team is aware of this conflict and if there are plans to resolve this somehow or simply ignore it.",
        "remove_template_description": "In one of talks about react Suspense [dan mentioned](https://youtu.be/6g3g0Q_XVb4?t=1650) that `<div hidden={true} />` would be deprioritized by react but still rendered if it has the time.    In his example he used it to prerender content that was seemingly part of another page. However in another talk by andrew it was used to [prerender tabs](https://youtu.be/ByBPyMBTzM0?t=1742). The second showcase is incorrect according to the [living standard for this attribute](https://html.spec.whatwg.org/multipage/interaction.html#the-hidden-attribute):    > The hidden attribute must not be used to hide content that could legitimately be shown in another presentation. For example, it is incorrect to use hidden to hide panels in a tabbed dialog, because the tabbed interface is merely a kind of overflow presentation \u2014 one could equally well just show all the form controls in one big page with a scrollbar.    I don't necessarily agree with the reasoning given in the spec but I'm more interested if the core team is aware of this conflict and if there are plans to resolve this somehow or simply ignore it.",
        "human_words": "In one of talks about react Suspense [dan mentioned](https://youtu.be/6g3g0Q_XVb4?t=1650) that `<div hidden={true} />` would be deprioritized by react but still rendered if it has the time.    In his example he used it to prerender content that was seemingly part of another page. However in another talk by andrew it was used to [prerender tabs](https://youtu.be/ByBPyMBTzM0?t=1742). The second showcase is incorrect according to the [living standard for this attribute](https://html.spec.whatwg.org/multipage/interaction.html#the-hidden-attribute):    > The hidden attribute must not be used to hide content that could legitimately be shown in another presentation. For example, it is incorrect to use hidden to hide panels in a tabbed dialog, because the tabbed interface is merely a kind of overflow presentation \u2014 one could equally well just show all the form controls in one big page with a scrollbar.    I don't necessarily agree with the reasoning given in the spec but I'm more interested if the core team is aware of this conflict and if there are plans to resolve this somehow or simply ignore it.",
        "human_words_regrex": "In one of talks about react Suspense  that `` would be deprioritized by react but still rendered if it has the time. In his example he used it to prerender content that was seemingly part of another page. However in another talk by andrew it was used to . The second showcase is incorrect according to the : > The hidden attribute must not be used to hide content that could legitimately be shown in another presentation. For example, it is incorrect to use hidden to hide panels in a tabbed dialog, because the tabbed interface is merely a kind of overflow presentation \u2014 one could equally well just show all the form controls in one big page with a scrollbar. I don't necessarily agree with the reasoning given in the spec but I'm more interested if the core team is aware of this conflict and if there are plans to resolve this somehow or simply ignore it.",
        "human_words_stopwords_removal_lemmatization": "one talk react suspense `` would deprioritized react still rendered time . example used prerender content seemingly part another page . however another talk andrew used . second showcase incorrect according : > hidden attribute must used hide content could legitimately shown another presentation . example , incorrect use hidden hide panel tabbed dialog , tabbed interface merely kind overflow presentation \u2014 one could equally well show form control one big page scrollbar . n't necessarily agree reasoning given spec 'm interested core team aware conflict plan resolve somehow simply ignore .",
        "title_stopwords_removal_lemmatization": "plan handling ` hidden ` differently"
    },
    {
        "issue_id": 494249661,
        "title": "Read latest state value in event handler",
        "label": [
            "Type: Question"
        ],
        "date": "2019-09-16T20:05:17Z",
        "status": "closed",
        "description": "I have this question I could have asked on Stack overflow, but I think it is more suitable for people from react team or more experienced users. So I will give it a try to ask it here.\r\n\r\nImagine I have event handler below where I **want to read latest state value and do something with it (however, not do a new `setState`)**:\r\n\r\n    onClick(){\r\n    \r\n      let data = this.state.data;\r\n      API.makeRequest(\"URL\", data);\r\n    \r\n    }\r\n\r\n[Here][1] Dan Abramov says it is safe to read state in event handler (in the sense it will be up to date).\r\nHowever he says this applies to react 16.\r\n\r\nOtherwise he suggests to use functional `setState` to get current state.\r\n\r\nI have question: what if I want to read latest state value in event handler, however such that it works also in later react versions (17+, without hooks)? One option IMHO would be to use functional `setState`, but what if like in the beginning of question I said I don't want to `setState`, just read the state value - and do something with it like network request. So using functional `setState` wouldn't be right for me, as it would force me to update state, right? Or I could return empty object from functional `setState` (to avoid updating state) and put the network request code inside it, like this:\r\n\r\n \r\n\r\n    onClick(){\r\n        \r\n       this.setState(ps=>{ \r\n            // using this form only to read current state in event handler which works for 16 and onwards versions probably\r\n            // but this breaks purity of this function\r\n            API.makeRequest(\"URL\", ps.data);\r\n            return {};\r\n       })\r\n        \r\n    }\r\n\r\nbut then I would violate that the function passed to functional `setState` must be pure.\r\n\r\nIs there a solution to the question I asked?\r\n\r\n  [1]: https://stackoverflow.com/a/43440790/3963067",
        "remove_template_description": "I have this question I could have asked on Stack overflow, but I think it is more suitable for people from react team or more experienced users. So I will give it a try to ask it here.    Imagine I have event handler below where I **want to read latest state value and do something with it (however, not do a new `setState`)**:        onClick(){              let data = this.state.data;        API.makeRequest(\"URL\", data);            }    [Here][1] Dan Abramov says it is safe to read state in event handler (in the sense it will be up to date).  However he says this applies to react 16.    Otherwise he suggests to use functional `setState` to get current state.    I have question: what if I want to read latest state value in event handler, however such that it works also in later react versions (17+, without hooks)? One option IMHO would be to use functional `setState`, but what if like in the beginning of question I said I don't want to `setState`, just read the state value - and do something with it like network request. So using functional `setState` wouldn't be right for me, as it would force me to update state, right? Or I could return empty object from functional `setState` (to avoid updating state) and put the network request code inside it, like this:             onClick(){                   this.setState(ps=>{               // using this form only to read current state in event handler which works for 16 and onwards versions probably              // but this breaks purity of this function              API.makeRequest(\"URL\", ps.data);              return {};         })                }    but then I would violate that the function passed to functional `setState` must be pure.    Is there a solution to the question I asked?      [1]: https://stackoverflow.com/a/43440790/3963067",
        "human_words": "I have this question I could have asked on Stack overflow, but I think it is more suitable for people from react team or more experienced users. So I will give it a try to ask it here.    Imagine I have event handler below where I **want to read latest state value and do something with it (however, not do a new `setState`)**:        onClick(){              let data = this.state.data;        API.makeRequest(\"URL\", data);            }    [Here][1] Dan Abramov says it is safe to read state in event handler (in the sense it will be up to date).  However he says this applies to react 16.    Otherwise he suggests to use functional `setState` to get current state.    I have question: what if I want to read latest state value in event handler, however such that it works also in later react versions (17+, without hooks)? One option IMHO would be to use functional `setState`, but what if like in the beginning of question I said I don't want to `setState`, just read the state value - and do something with it like network request. So using functional `setState` wouldn't be right for me, as it would force me to update state, right? Or I could return empty object from functional `setState` (to avoid updating state) and put the network request code inside it, like this:             onClick(){                   this.setState(ps=>{               // using this form only to read current state in event handler which works for 16 and onwards versions probably              // but this breaks purity of this function              API.makeRequest(\"URL\", ps.data);              return {};         })                }    but then I would violate that the function passed to functional `setState` must be pure.    Is there a solution to the question I asked?      [1]: https://stackoverflow.com/a/43440790/3963067",
        "human_words_regrex": "I have this question I could have asked on Stack overflow, but I think it is more suitable for people from react team or more experienced users. So I will give it a try to ask it here. Imagine I have event handler below where I **want to read latest state value and do something with it (however, not do a new `setState`)**: onClick(){ let data = this.state.data; API.makeRequest(\"URL\", data); } [Here][1] Dan Abramov says it is safe to read state in event handler (in the sense it will be up to date). However he says this applies to react 16. Otherwise he suggests to use functional `setState` to get current state. I have question: what if I want to read latest state value in event handler, however such that it works also in later react versions (17+, without hooks)? One option IMHO would be to use functional `setState`, but what if like in the beginning of question I said I don't want to `setState`, just read the state value - and do something with it like network request. So using functional `setState` wouldn't be right for me, as it would force me to update state, right? Or I could return empty object from functional `setState` (to avoid updating state) and put the network request code inside it, like this: onClick(){ this.setState(ps=>{ // using this form only to read current state in event handler which works for 16 and onwards versions probably // but this breaks purity of this function API.makeRequest(\"URL\", ps.data); return {}; }) } but then I would violate that the function passed to functional `setState` must be pure. Is there a solution to the question I asked? [1]: ",
        "human_words_stopwords_removal_lemmatization": "question could asked stack overflow , think suitable people react team experienced user . give try ask . imagine event handler * * want read latest state value something ( however , new ` setstate ` ) * * : onclick ( ) { let data = this.state.data ; api.makerequest ( `` url '' , data ) ; } [ ] [ 1 ] dan abramov say safe read state event handler ( sense date ) . however say applies react 16. otherwise suggests use functional ` setstate ` get current state . question : want read latest state value event handler , however work also later react version ( 17+ , without hook ) ? one option imho would use functional ` setstate ` , like beginning question said n't want ` setstate ` , read state value - something like network request . using functional ` setstate ` would n't right , would force update state , right ? could return empty object functional ` setstate ` ( avoid updating state ) put network request code inside , like : onclick ( ) { this.setstate ( ps= > { // using form read current state event handler work 16 onwards version probably // break purity function api.makerequest ( `` url '' , ps.data ) ; return { } ; } ) } would violate function passed functional ` setstate ` must pure . solution question asked ? [ 1 ] :",
        "title_stopwords_removal_lemmatization": "read latest state value event handler"
    },
    {
        "issue_id": 492852905,
        "title": "Add third parameter to useState to get current value",
        "label": [
            "Type: Question"
        ],
        "date": "2019-09-12T14:45:25Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature\r\n\r\n**What is the current behavior?**\r\n\r\nIf you set a callback on something, e.g. inside useEffect, your callback captures the current value of that state and can never update it. To know the most up-to-date value, you currently have to call the setter with a function containing the new value, even if you only return the value you receive from it. Cf. https://stackoverflow.com/questions/57847594/react-hooks-accessing-up-to-date-state-from-within-a-callback#comment102122412_57847594\r\n\r\n**What is the expected behavior?**\r\n\r\nThere should be a way to access the current state via a getter for these situations. Adding this as a third return value from useState would be non-intrusive and backwards compatible.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nn/a",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**    Feature    **What is the current behavior?**    If you set a callback on something, e.g. inside useEffect, your callback captures the current value of that state and can never update it. To know the most up-to-date value, you currently have to call the setter with a function containing the new value, even if you only return the value you receive from it. Cf. https://stackoverflow.com/questions/57847594/react-hooks-accessing-up-to-date-state-from-within-a-callback#comment102122412_57847594    **What is the expected behavior?**    There should be a way to access the current state via a getter for these situations. Adding this as a third return value from useState would be non-intrusive and backwards compatible.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    n/a",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**    Feature    **What is the current behavior?**    If you set a callback on something, e.g. inside useEffect, your callback captures the current value of that state and can never update it. To know the most up-to-date value, you currently have to call the setter with a function containing the new value, even if you only return the value you receive from it. Cf. https://stackoverflow.com/questions/57847594/react-hooks-accessing-up-to-date-state-from-within-a-callback#comment102122412_57847594    **What is the expected behavior?**    There should be a way to access the current state via a getter for these situations. Adding this as a third return value from useState would be non-intrusive and backwards compatible.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    n/a",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** Feature **What is the current behavior?** If you set a callback on something, e.g. inside useEffect, your callback captures the current value of that state and can never update it. To know the most up-to-date value, you currently have to call the setter with a function containing the new value, even if you only return the value you receive from it. Cf.  **What is the expected behavior?** There should be a way to access the current state via a getter for these situations. Adding this as a third return value from useState would be non-intrusive and backwards compatible. **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** n/a",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * feature * * current behavior ? * * set callback something , e.g . inside useeffect , callback capture current value state never update . know up-to-date value , currently call setter function containing new value , even return value receive . cf . * * expected behavior ? * * way access current state via getter situation . adding third return value usestate would non-intrusive backwards compatible . * * version react , browser / o affected issue ? work previous version react ? * * n/a",
        "title_stopwords_removal_lemmatization": "add third parameter usestate get current value"
    },
    {
        "issue_id": 491794610,
        "title": "DevTools: Component tree navigation",
        "label": [
            "Type: Question",
            "Component: Developer Tools"
        ],
        "date": "2019-09-10T17:06:02Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\n**What is the current behavior?**\r\nWhere is no way to collapse/expand component tree or it subtrees. \r\n\r\nIf I pick element with \"Select element\" button - I got all the tree expanded, not the only one subtree, where selected element came from(probably bug?) And I don't found way to collapse tree. So if you pick something from page your component tree is basically is always expanded on all levels. \r\n\r\nMaybe we can have selected row context menu like the one in chrome devtools with options to collapse/expand. \r\n\r\n![image](https://user-images.githubusercontent.com/848985/64634574-396f5280-d406-11e9-9cb8-1630e2edef5e.png)\r\n\r\n![image](https://user-images.githubusercontent.com/848985/64634564-307e8100-d406-11e9-8d3d-1a97c9f3b77b.png)\r\n\r\nAlso I guess it maybe good place to add https://github.com/facebook/react/issues/16463\r\n",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**  Feature    **What is the current behavior?**  Where is no way to collapse/expand component tree or it subtrees.     If I pick element with \"Select element\" button - I got all the tree expanded, not the only one subtree, where selected element came from(probably bug?) And I don't found way to collapse tree. So if you pick something from page your component tree is basically is always expanded on all levels.     Maybe we can have selected row context menu like the one in chrome devtools with options to collapse/expand.     ![image](https://user-images.githubusercontent.com/848985/64634574-396f5280-d406-11e9-9cb8-1630e2edef5e.png)    ![image](https://user-images.githubusercontent.com/848985/64634564-307e8100-d406-11e9-8d3d-1a97c9f3b77b.png)    Also I guess it maybe good place to add https://github.com/facebook/react/issues/16463",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**  Feature    **What is the current behavior?**  Where is no way to collapse/expand component tree or it subtrees.     If I pick element with \"Select element\" button - I got all the tree expanded, not the only one subtree, where selected element came from(probably bug?) And I don't found way to collapse tree. So if you pick something from page your component tree is basically is always expanded on all levels.     Maybe we can have selected row context menu like the one in chrome devtools with options to collapse/expand.     ![image](https://user-images.githubusercontent.com/848985/64634574-396f5280-d406-11e9-9cb8-1630e2edef5e.png)    ![image](https://user-images.githubusercontent.com/848985/64634564-307e8100-d406-11e9-8d3d-1a97c9f3b77b.png)    Also I guess it maybe good place to add https://github.com/facebook/react/issues/16463",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** Feature **What is the current behavior?** Where is no way to collapse/expand component tree or it subtrees. If I pick element with \"Select element\" button - I got all the tree expanded, not the only one subtree, where selected element came from(probably bug?) And I don't found way to collapse tree. So if you pick something from page your component tree is basically is always expanded on all levels. Maybe we can have selected row context menu like the one in chrome devtools with options to collapse/expand. ! ! Also I guess it maybe good place to add ",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * feature * * current behavior ? * * way collapse/expand component tree subtrees . pick element `` select element '' button - got tree expanded , one subtree , selected element came ( probably bug ? ) n't found way collapse tree . pick something page component tree basically always expanded level . maybe selected row context menu like one chrome devtools option collapse/expand . ! ! also guess maybe good place add",
        "title_stopwords_removal_lemmatization": "devtools : component tree navigation"
    },
    {
        "issue_id": 490028267,
        "title": "React DevTools downgrade not working for Chrome.",
        "label": [
            "Type: Question",
            "Component: Developer Tools"
        ],
        "date": "2019-09-05T21:54:48Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n**What is the current behavior?**\r\nThe following command fails\r\n```\r\nyarn run test:chrome \r\n```\r\nerror message:\r\n```                                                                               \ue0b2 \r\nyarn run v1.17.3\r\n$ node ./shells/chrome/test\r\ninternal/validators.js:112\r\n    throw new ERR_INVALID_ARG_TYPE(name, 'string', value);\r\n    ^\r\n\r\nTypeError [ERR_INVALID_ARG_TYPE]: The \"file\" argument must be of type string. Received type object\r\n    at validateString (internal/validators.js:112:11)\r\n    at normalizeSpawnArguments (child_process.js:398:3)\r\n    at spawn (child_process.js:534:16)\r\n    at launchChrome (/home/andrei/src/react-devtools/node_modules/chrome-launch/index.js:27:12)\r\n    at Object.<anonymous> (/home/andrei/src/react-devtools/shells/chrome/test.js:9:1)\r\n    at Module._compile (internal/modules/cjs/loader.js:936:30)\r\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:947:10)\r\n    at Module.load (internal/modules/cjs/loader.js:790:32)\r\n    at Function.Module._load (internal/modules/cjs/loader.js:703:12)\r\n    at Function.Module.runMain (internal/modules/cjs/loader.js:999:10)\r\nerror Command failed with exit code 1.\r\n```\r\n\r\n**What is the expected behavior?**\r\nLaunch a new browser window. The following command works\r\n```\r\nyarn run test:firefox \r\n```\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nUsing Version 76.0.3809.100 (Official Build) (64-bit), /usr/bin/google-chrome-stable is aliased to chrome.\r\n\r\nAny help is appreciated, we're running a old version of React at work and upgrading it would be nontrivial. Hence I need the old version of the React DevTools.",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**  Bug  **What is the current behavior?**  The following command fails  ```  yarn run test:chrome   ```  error message:  ```                                                                               \ue0b2   yarn run v1.17.3  $ node ./shells/chrome/test  internal/validators.js:112      throw new ERR_INVALID_ARG_TYPE(name, 'string', value);      ^    TypeError [ERR_INVALID_ARG_TYPE]: The \"file\" argument must be of type string. Received type object      at validateString (internal/validators.js:112:11)      at normalizeSpawnArguments (child_process.js:398:3)      at spawn (child_process.js:534:16)      at launchChrome (/home/andrei/src/react-devtools/node_modules/chrome-launch/index.js:27:12)      at Object.<anonymous> (/home/andrei/src/react-devtools/shells/chrome/test.js:9:1)      at Module._compile (internal/modules/cjs/loader.js:936:30)      at Object.Module._extensions..js (internal/modules/cjs/loader.js:947:10)      at Module.load (internal/modules/cjs/loader.js:790:32)      at Function.Module._load (internal/modules/cjs/loader.js:703:12)      at Function.Module.runMain (internal/modules/cjs/loader.js:999:10)  error Command failed with exit code 1.  ```    **What is the expected behavior?**  Launch a new browser window. The following command works  ```  yarn run test:firefox   ```    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  Using Version 76.0.3809.100 (Official Build) (64-bit), /usr/bin/google-chrome-stable is aliased to chrome.    Any help is appreciated, we're running a old version of React at work and upgrading it would be nontrivial. Hence I need the old version of the React DevTools.",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**  Bug  **What is the current behavior?**  The following command fails    error message:      **What is the expected behavior?**  Launch a new browser window. The following command works      **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  Using Version 76.0.3809.100 (Official Build) (64-bit), /usr/bin/google-chrome-stable is aliased to chrome.    Any help is appreciated, we're running a old version of React at work and upgrading it would be nontrivial. Hence I need the old version of the React DevTools.",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** Bug **What is the current behavior?** The following command fails error message: **What is the expected behavior?** Launch a new browser window. The following command works **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** Using Version 76.0.3809.100 (Official Build) (64-bit), /usr/bin/google-chrome-stable is aliased to chrome. Any help is appreciated, we're running a old version of React at work and upgrading it would be nontrivial. Hence I need the old version of the React DevTools.",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * bug * * current behavior ? * * following command fails error message : * * expected behavior ? * * launch new browser window . following command work * * version react , browser / o affected issue ? work previous version react ? * * using version 76.0.3809.100 ( official build ) ( 64-bit ) , /usr/bin/google-chrome-stable aliased chrome . help appreciated , 're running old version react work upgrading would nontrivial . hence need old version react devtools .",
        "title_stopwords_removal_lemmatization": "react devtools downgrade working chrome ."
    },
    {
        "issue_id": 489393943,
        "title": "There is no 'rendered by' section in my extension",
        "label": [
            "Type: Question",
            "Component: Developer Tools"
        ],
        "date": "2019-09-04T20:55:04Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\n**What is the current behavior?**\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n**What is the expected behavior?**\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**    **What is the current behavior?**    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**    **What is the expected behavior?**    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**",
        "human_words": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**    **What is the current behavior?**    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**    **What is the expected behavior?**    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**",
        "human_words_regrex": " **Do you want to request a *feature* or report a *bug*?** **What is the current behavior?** **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle ( or CodeSandbox ( example below:** **What is the expected behavior?** **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * * * current behavior ? * * * * current behavior bug , please provide step reproduce possible minimal demo problem . bug get fixed much faster run code n't dependency react . paste link jsfiddle ( codesandbox ( example : * * * * expected behavior ? * * * * version react , browser / o affected issue ? work previous version react ? * *",
        "title_stopwords_removal_lemmatization": "'rendered ' section extension"
    },
    {
        "issue_id": 488836954,
        "title": "[Dev Tools] Chrome component console errors get output from \"backend.js\"",
        "label": [
            "Type: Question",
            "Component: Developer Tools"
        ],
        "date": "2019-09-03T21:37:55Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nWhen I get a component stack trace, the log trace comes from the dev tools extension:\r\n\r\n![image](https://user-images.githubusercontent.com/12100/64210499-4d401500-ce58-11e9-87f5-b0c9115fe62f.png)\r\n\r\n**What is the expected behavior?**\r\n\r\nI use that trace usually to click and set a debugger so I can debug some React internals.\r\n",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**    Bug    **What is the current behavior?**    When I get a component stack trace, the log trace comes from the dev tools extension:    ![image](https://user-images.githubusercontent.com/12100/64210499-4d401500-ce58-11e9-87f5-b0c9115fe62f.png)    **What is the expected behavior?**    I use that trace usually to click and set a debugger so I can debug some React internals.",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**    Bug    **What is the current behavior?**    When I get a component stack trace, the log trace comes from the dev tools extension:    ![image](https://user-images.githubusercontent.com/12100/64210499-4d401500-ce58-11e9-87f5-b0c9115fe62f.png)    **What is the expected behavior?**    I use that trace usually to click and set a debugger so I can debug some React internals.",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** Bug **What is the current behavior?** When I get a component stack trace, the log trace comes from the dev tools extension: ! **What is the expected behavior?** I use that trace usually to click and set a debugger so I can debug some React internals.",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * bug * * current behavior ? * * get component stack trace , log trace come dev tool extension : ! * * expected behavior ? * * use trace usually click set debugger debug react internals .",
        "title_stopwords_removal_lemmatization": "[ dev tool ] chrome component console error get output `` backend.js ''"
    },
    {
        "issue_id": 488776424,
        "title": "React devtools always launches in Chrome",
        "label": [
            "Type: Question"
        ],
        "date": "2019-09-03T19:15:32Z",
        "status": "closed",
        "description": "Hi.\r\n\r\nI have the extension installed on both chrome and firefox. My default browser is firefox. Each time I try to debug a react native app remotely it launches chrome to use the debugger there.\r\n\r\nHow do I change the default browser for devtools to Firefox?",
        "remove_template_description": "Hi.    I have the extension installed on both chrome and firefox. My default browser is firefox. Each time I try to debug a react native app remotely it launches chrome to use the debugger there.    How do I change the default browser for devtools to Firefox?",
        "human_words": "Hi.    I have the extension installed on both chrome and firefox. My default browser is firefox. Each time I try to debug a react native app remotely it launches chrome to use the debugger there.    How do I change the default browser for devtools to Firefox?",
        "human_words_regrex": "Hi. I have the extension installed on both chrome and firefox. My default browser is firefox. Each time I try to debug a react native app remotely it launches chrome to use the debugger there. How do I change the default browser for devtools to Firefox?",
        "human_words_stopwords_removal_lemmatization": "hi . extension installed chrome firefox . default browser firefox . time try debug react native app remotely launch chrome use debugger . change default browser devtools firefox ?",
        "title_stopwords_removal_lemmatization": "react devtools always launch chrome"
    },
    {
        "issue_id": 488292504,
        "title": "Inline setTimeout within the render causes a random number to appear on screen.",
        "label": [
            "Type: Question"
        ],
        "date": "2019-09-02T18:49:15Z",
        "status": "closed",
        "description": "Reporting a bug:\r\n\r\nThe current behaviour is that setTimeout, inside a render method, is producing a random number, for no explained reason. The number persist after the setTimeout has gone off, and the setTimeout still produces the desired effect, for example, if it was to log something the console, it would still do that.\r\n```jsx\r\n// sample code\r\n\r\n(not the original code in which the problem occurred, but I was able to reproduce the problem in codesandbox.io):\r\n\r\n** start of code example **\r\n(styles.css = \r\n    .App {\r\n        font-family: sans-serif;\r\n        text-align: center;\r\n    }\r\n)\r\n\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport \"./styles.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Hello CodeSandbox</h1>\r\n      <h2>Start editing to see some magic happen!</h2>\r\n      {setTimeout(() => console.log(\"hello world\"), 3000)}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\n```\r\n\r\n/* (output of webpage) */\r\n\r\nHello CodeSandbox\r\nStart editing to see some magic happen!\r\n5\r\n\r\n** end of code **\r\n\r\nThe expected behaviour was that the setTimeout function would produce no trace of any text, whilst still working.\r\n\r\nIt is present in react version 16.9.0",
        "remove_template_description": "Reporting a bug:    The current behaviour is that setTimeout, inside a render method, is producing a random number, for no explained reason. The number persist after the setTimeout has gone off, and the setTimeout still produces the desired effect, for example, if it was to log something the console, it would still do that.  ```jsx  // sample code    (not the original code in which the problem occurred, but I was able to reproduce the problem in codesandbox.io):    ** start of code example **  (styles.css =       .App {          font-family: sans-serif;          text-align: center;      }  )    import React from \"react\";  import ReactDOM from \"react-dom\";    import \"./styles.css\";    function App() {    return (      <div className=\"App\">        <h1>Hello CodeSandbox</h1>        <h2>Start editing to see some magic happen!</h2>        {setTimeout(() => console.log(\"hello world\"), 3000)}      </div>    );  }    const rootElement = document.getElementById(\"root\");  ReactDOM.render(<App />, rootElement);  ```    /* (output of webpage) */    Hello CodeSandbox  Start editing to see some magic happen!  5    ** end of code **    The expected behaviour was that the setTimeout function would produce no trace of any text, whilst still working.    It is present in react version 16.9.0",
        "human_words": "Reporting a bug:    The current behaviour is that setTimeout, inside a render method, is producing a random number, for no explained reason. The number persist after the setTimeout has gone off, and the setTimeout still produces the desired effect, for example, if it was to log something the console, it would still do that.      /* (output of webpage) */    Hello CodeSandbox  Start editing to see some magic happen!  5    ** end of code **    The expected behaviour was that the setTimeout function would produce no trace of any text, whilst still working.    It is present in react version 16.9.0",
        "human_words_regrex": "Reporting a bug: The current behaviour is that setTimeout, inside a render method, is producing a random number, for no explained reason. The number persist after the setTimeout has gone off, and the setTimeout still produces the desired effect, for example, if it was to log something the console, it would still do that. /* (output of webpage) */ Hello CodeSandbox Start editing to see some magic happen! 5 ** end of code ** The expected behaviour was that the setTimeout function would produce no trace of any text, whilst still working. It is present in react version 16.9.0",
        "human_words_stopwords_removal_lemmatization": "reporting bug : current behaviour settimeout , inside render method , producing random number , explained reason . number persist settimeout gone , settimeout still produce desired effect , example , log something console , would still . / * ( output webpage ) * / hello codesandbox start editing see magic happen ! 5 * * end code * * expected behaviour settimeout function would produce trace text , whilst still working . present react version 16.9.0",
        "title_stopwords_removal_lemmatization": "inline settimeout within render cause random number appear screen ."
    },
    {
        "issue_id": 488185159,
        "title": "Limitations of context API compared to legacy implementation",
        "label": [
            "Type: Question"
        ],
        "date": "2019-09-02T13:14:47Z",
        "status": "closed",
        "description": "This isn't technically a bug, but a limitation of the new context API implementation and also a question on whether this should be fixed by React, or if I should implement a custom, in-house, solution instead.\r\n\r\nI have a fairly \"edgy\" use-case with a component library that provides several parent-child components (e.g. tabs, accordions etc.). This looks like a standard context use-case so far. However, the library has to work in a plugin-based environment, meaning the parent and child components are rendered by two completely independent apps (host app and plugins respectively).\r\n\r\nExample:\r\n```jsx\r\n<Accordion> <!-- provided by host app -->\r\n    <!-- provided by separate plugin -->\r\n    <AccordionItem label=\"item 1\">Content</AccordionItem>\r\n    //...\r\n</Accordion>\r\n```\r\n\r\nThus, two separate instances of the component library are created, one for the host app and one in the plugin scope, but they still have to communicate with each other, behind the scenes, while keeping it transparent to the user.\r\n\r\nThis worked seamlessly with the legacy context API, but now with the new one, it breaks. That is because `React.createContext` returns an object that now has to be explicitly shared between the components, by means of an import. But because of the decoupled architecture of the app, and multiple instance of the library being used, this seems impossible to do.\r\n\r\nAs stated in the docs, the legacy context API is deprecated and will be removed in future versions of React (17+?), so I'd like to avoid being stuck on React 16, when that happens.\r\n",
        "remove_template_description": "This isn't technically a bug, but a limitation of the new context API implementation and also a question on whether this should be fixed by React, or if I should implement a custom, in-house, solution instead.    I have a fairly \"edgy\" use-case with a component library that provides several parent-child components (e.g. tabs, accordions etc.). This looks like a standard context use-case so far. However, the library has to work in a plugin-based environment, meaning the parent and child components are rendered by two completely independent apps (host app and plugins respectively).    Example:  ```jsx  <Accordion> <!-- provided by host app -->      <!-- provided by separate plugin -->      <AccordionItem label=\"item 1\">Content</AccordionItem>      //...  </Accordion>  ```    Thus, two separate instances of the component library are created, one for the host app and one in the plugin scope, but they still have to communicate with each other, behind the scenes, while keeping it transparent to the user.    This worked seamlessly with the legacy context API, but now with the new one, it breaks. That is because `React.createContext` returns an object that now has to be explicitly shared between the components, by means of an import. But because of the decoupled architecture of the app, and multiple instance of the library being used, this seems impossible to do.    As stated in the docs, the legacy context API is deprecated and will be removed in future versions of React (17+?), so I'd like to avoid being stuck on React 16, when that happens.",
        "human_words": "This isn't technically a bug, but a limitation of the new context API implementation and also a question on whether this should be fixed by React, or if I should implement a custom, in-house, solution instead.    I have a fairly \"edgy\" use-case with a component library that provides several parent-child components (e.g. tabs, accordions etc.). This looks like a standard context use-case so far. However, the library has to work in a plugin-based environment, meaning the parent and child components are rendered by two completely independent apps (host app and plugins respectively).    Example:      Thus, two separate instances of the component library are created, one for the host app and one in the plugin scope, but they still have to communicate with each other, behind the scenes, while keeping it transparent to the user.    This worked seamlessly with the legacy context API, but now with the new one, it breaks. That is because `React.createContext` returns an object that now has to be explicitly shared between the components, by means of an import. But because of the decoupled architecture of the app, and multiple instance of the library being used, this seems impossible to do.    As stated in the docs, the legacy context API is deprecated and will be removed in future versions of React (17+?), so I'd like to avoid being stuck on React 16, when that happens.",
        "human_words_regrex": "This isn't technically a bug, but a limitation of the new context API implementation and also a question on whether this should be fixed by React, or if I should implement a custom, in-house, solution instead. I have a fairly \"edgy\" use-case with a component library that provides several parent-child components (e.g. tabs, accordions etc.). This looks like a standard context use-case so far. However, the library has to work in a plugin-based environment, meaning the parent and child components are rendered by two completely independent apps (host app and plugins respectively). Example: Thus, two separate instances of the component library are created, one for the host app and one in the plugin scope, but they still have to communicate with each other, behind the scenes, while keeping it transparent to the user. This worked seamlessly with the legacy context API, but now with the new one, it breaks. That is because `React.createContext` returns an object that now has to be explicitly shared between the components, by means of an import. But because of the decoupled architecture of the app, and multiple instance of the library being used, this seems impossible to do. As stated in the docs, the legacy context API is deprecated and will be removed in future versions of React (17+?), so I'd like to avoid being stuck on React 16, when that happens.",
        "human_words_stopwords_removal_lemmatization": "n't technically bug , limitation new context api implementation also question whether fixed react , implement custom , in-house , solution instead . fairly `` edgy '' use-case component library provides several parent-child component ( e.g . tab , accordion etc. ) . look like standard context use-case far . however , library work plugin-based environment , meaning parent child component rendered two completely independent apps ( host app plugins respectively ) . example : thus , two separate instance component library created , one host app one plugin scope , still communicate , behind scene , keeping transparent user . worked seamlessly legacy context api , new one , break . ` react.createcontext ` return object explicitly shared component , mean import . decoupled architecture app , multiple instance library used , seems impossible . stated doc , legacy context api deprecated removed future version react ( 17+ ? ) , 'd like avoid stuck react 16 , happens .",
        "title_stopwords_removal_lemmatization": "limitation context api compared legacy implementation"
    },
    {
        "issue_id": 487775992,
        "title": "Can't use instance values without refs",
        "label": [
            "Type: Question",
            "Component: Hooks"
        ],
        "date": "2019-08-31T14:31:51Z",
        "status": "closed",
        "description": "I am experimenting with migrating some of my class components to Hooks. My use case is explained in detail [here](https://stackoverflow.com/questions/57722818/idiomatic-react-with-heavy-dom-manipulation-mathjax), but I can quickly explain the idea.\r\n\r\nI have a class component `<MJX>` which exposes a `.ready` Promise. Since `<MJX>` produces a `<span>` element, I guess I can use the `useImperativeHandle` hook to attach `.ready` to the ref I use for the `<span>`. This is no problem.\r\n\r\nHowever, I also have a class component `<RenderGroup>` which uses `React.Children` to collect the `.ready` Promises from all its `<MJX>` descendants, and exposes `Promise.all` of that array of Promises as its own `.ready` value. Since `<RenderGroup>` does not produce any markup of its own, and you can't place refs on `<React.Fragment>`, I don't see how to use`useImperativeHandle` here: there's nowhere to attach the ref.\r\n\r\nHere is the relevant code:\r\n\r\n```tsx\r\nexport class RenderGroup extends React.Component {\r\n  private promises: Promise<void>[];\r\n\r\n  ready: Promise<void>;\r\n\r\n  componentDidMount() {\r\n    this.ready = Promise.all(this.promises).then(() => {});\r\n  }\r\n\r\n  render() {\r\n    this.promises = [];\r\n\r\n    return recursiveMap(this.props.children, node => {\r\n      if (shouldInspect(node)) {\r\n        const originalRef = node.ref;\r\n        return React.cloneElement(node, {\r\n          ref: (ref: MJX) => {\r\n            if (!ref) return;\r\n            this.promises.push(ref.ready);\r\n            if (typeof originalRef === \"function\") {\r\n              originalRef(ref);\r\n            } else if (originalRef && typeof originalRef === \"object\") {\r\n              (originalRef as React.MutableRefObject<MJX>).current = ref;\r\n            }\r\n          }\r\n        });\r\n      }\r\n\r\n      return node;\r\n    });\r\n  }\r\n}\r\n\r\nfunction shouldInspect(node: ReactNode): node is React.ReactElement & React.RefAttributes<MJX> {\r\n  return React.isValidElement(node) && typeof node.type === \"function\" && node.type.prototype instanceof MJX;\r\n}\r\n\r\nexport function recursiveMap(\r\n  children: ReactNode,\r\n  fn: (child: ReactNode) => ReactNode\r\n) {\r\n  return React.Children.map(children, (child) => {\r\n    if (!React.isValidElement(child)) {\r\n      return child;\r\n    }\r\n\r\n    if (\"children\" in child.props) {\r\n      child = React.cloneElement(child, {\r\n        children: recursiveMap(child.props.children, fn)\r\n      });\r\n    }\r\n\r\n    return fn(child);\r\n  });\r\n}\r\n```",
        "remove_template_description": "I am experimenting with migrating some of my class components to Hooks. My use case is explained in detail [here](https://stackoverflow.com/questions/57722818/idiomatic-react-with-heavy-dom-manipulation-mathjax), but I can quickly explain the idea.    I have a class component `<MJX>` which exposes a `.ready` Promise. Since `<MJX>` produces a `<span>` element, I guess I can use the `useImperativeHandle` hook to attach `.ready` to the ref I use for the `<span>`. This is no problem.    However, I also have a class component `<RenderGroup>` which uses `React.Children` to collect the `.ready` Promises from all its `<MJX>` descendants, and exposes `Promise.all` of that array of Promises as its own `.ready` value. Since `<RenderGroup>` does not produce any markup of its own, and you can't place refs on `<React.Fragment>`, I don't see how to use`useImperativeHandle` here: there's nowhere to attach the ref.    Here is the relevant code:    ```tsx  export class RenderGroup extends React.Component {    private promises: Promise<void>[];      ready: Promise<void>;      componentDidMount() {      this.ready = Promise.all(this.promises).then(() => {});    }      render() {      this.promises = [];        return recursiveMap(this.props.children, node => {        if (shouldInspect(node)) {          const originalRef = node.ref;          return React.cloneElement(node, {            ref: (ref: MJX) => {              if (!ref) return;              this.promises.push(ref.ready);              if (typeof originalRef === \"function\") {                originalRef(ref);              } else if (originalRef && typeof originalRef === \"object\") {                (originalRef as React.MutableRefObject<MJX>).current = ref;              }            }          });        }          return node;      });    }  }    function shouldInspect(node: ReactNode): node is React.ReactElement & React.RefAttributes<MJX> {    return React.isValidElement(node) && typeof node.type === \"function\" && node.type.prototype instanceof MJX;  }    export function recursiveMap(    children: ReactNode,    fn: (child: ReactNode) => ReactNode  ) {    return React.Children.map(children, (child) => {      if (!React.isValidElement(child)) {        return child;      }        if (\"children\" in child.props) {        child = React.cloneElement(child, {          children: recursiveMap(child.props.children, fn)        });      }        return fn(child);    });  }  ```",
        "human_words": "I am experimenting with migrating some of my class components to Hooks. My use case is explained in detail [here](https://stackoverflow.com/questions/57722818/idiomatic-react-with-heavy-dom-manipulation-mathjax), but I can quickly explain the idea.    I have a class component `<MJX>` which exposes a `.ready` Promise. Since `<MJX>` produces a `<span>` element, I guess I can use the `useImperativeHandle` hook to attach `.ready` to the ref I use for the `<span>`. This is no problem.    However, I also have a class component `<RenderGroup>` which uses `React.Children` to collect the `.ready` Promises from all its `<MJX>` descendants, and exposes `Promise.all` of that array of Promises as its own `.ready` value. Since `<RenderGroup>` does not produce any markup of its own, and you can't place refs on `<React.Fragment>`, I don't see how to use`useImperativeHandle` here: there's nowhere to attach the ref.    Here is the relevant code:    ",
        "human_words_regrex": "I am experimenting with migrating some of my class components to Hooks. My use case is explained in detail , but I can quickly explain the idea. I have a class component `` which exposes a `.ready` Promise. Since `` produces a `` element, I guess I can use the `useImperativeHandle` hook to attach `.ready` to the ref I use for the ``. This is no problem. However, I also have a class component `` which uses `React.Children` to collect the `.ready` Promises from all its `` descendants, and exposes `Promise.all` of that array of Promises as its own `.ready` value. Since `` does not produce any markup of its own, and you can't place refs on ``, I don't see how to use`useImperativeHandle` here: there's nowhere to attach the ref. Here is the relevant code: ",
        "human_words_stopwords_removal_lemmatization": "experimenting migrating class component hook . use case explained detail , quickly explain idea . class component `` expose ` .ready ` promise . since `` produce `` element , guess use ` useimperativehandle ` hook attach ` .ready ` ref use `` . problem . however , also class component `` us ` react.children ` collect ` .ready ` promise `` descendant , expose ` promise.all ` array promise ` .ready ` value . since `` produce markup , ca n't place ref `` , n't see use ` useimperativehandle ` : 's nowhere attach ref . relevant code :",
        "title_stopwords_removal_lemmatization": "ca n't use instance value without ref"
    },
    {
        "issue_id": 487047673,
        "title": "Error message when calling work.commit in commit phase",
        "label": [
            "Type: Question",
            "Component: Concurrent Features",
            "Resolution: Stale"
        ],
        "date": "2019-08-29T16:00:22Z",
        "status": "closed",
        "description": "This was me just toying around with unstable APIs. I don't know what these can be used for. Just tried to make sense of them from their names.\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nerror message of `batch.commit()` is confusing\r\n\r\n**What is the current behavior?**\r\n\r\nI was experimenting with the `unstable_create(Sync)Root` APIs and just tried to piece together what goes where. While looking through the source I found that the `Work` returned from `createRoot` has a parameter called `onCommit`. For me this implied it's called after the commit [which doesn't seem to be intended](https://github.com/facebook/react/blob/0ca28b526496b4c9cc523e222beffeda73af7172/packages/react-dom/src/__tests__/ReactDOMRoot-test.js#L58). However given the code below I get `Uncaught Invariant Violation: work.commit(): Cannot commit while already rendering. This likely means you attempted to commit from inside a lifecycle method.`\r\n\r\n```js\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Hello CodeSandbox</h1>\r\n      <h2>Start editing to see some magic happen!</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nconst root = ReactDOM.unstable_createRoot(rootElement);\r\n\r\nroot.render(<App />).then(() => {\r\n  const batch = root.createBatch();\r\n\r\n  batch.render(<App />);\r\n  // bad\r\n  batch.commit();\r\n  setTimeout(() => {\r\n    // good\r\n    //batch.commit()\r\n  }, 0);\r\n  batch.then(() => {\r\n    // good\r\n    //batch.commit();\r\n  });\r\n});\r\n\r\n```\r\n\r\nThree things I noticed:\r\n1. seems like I need to call batch.commit after the batch is complete. Changing it to \r\n```\r\nbatch.then(() => {\r\n  // good\r\n  batch.commit();\r\n});\r\n```\r\ngot rid of the error. But I noticed that the original code is used throughout the internal tests. In fact moving createBatch and batch.commit the batch well after (long timeout) the initial root.render call seemed to allow sync `batch.render; batch.commit`.\r\n\r\n2. \"lifecycle\" should be replaced with something different before these APIs get stable since we try to get away from this mental model. \r\n\r\nFor example [`applies setState in componentDidMount synchronously in a batch`](https://github.com/facebook/react/blob/4d307de458dfdf25e704cb2ca20b0578bba8998c/packages/react-dom/src/__tests__/ReactDOMRoot-test.js#L143) could be converted to a sync test and still pass while I would've expected [`can defer a commit by batching it`](https://github.com/facebook/react/blob/4d307de458dfdf25e704cb2ca20b0578bba8998c/packages/react-dom/src/__tests__/ReactDOMRoot-test.js#L132) to fail with the invariant violation from above.\r\n\r\n3. Not all lifecycles are \"during rendering\" as far as I know. `componentDidUpdate` is called during commit.\r\n\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://codesandbox.io/s/dreamy-wood-dvzrp\r\n\r\n**What is the expected behavior?**\r\n\r\nI'm basically asking when it's safe to call `batch.commit`: \r\n* [ ] during render phase\r\n* [ ] during commit phase \r\n* [ ] outside of these phases e.g. in some `onComplete` callback \r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n`react(-dom)@16.9.0`\r\n",
        "remove_template_description": "This was me just toying around with unstable APIs. I don't know what these can be used for. Just tried to make sense of them from their names.    **Do you want to request a *feature* or report a *bug*?**    error message of `batch.commit()` is confusing    **What is the current behavior?**    I was experimenting with the `unstable_create(Sync)Root` APIs and just tried to piece together what goes where. While looking through the source I found that the `Work` returned from `createRoot` has a parameter called `onCommit`. For me this implied it's called after the commit [which doesn't seem to be intended](https://github.com/facebook/react/blob/0ca28b526496b4c9cc523e222beffeda73af7172/packages/react-dom/src/__tests__/ReactDOMRoot-test.js#L58). However given the code below I get `Uncaught Invariant Violation: work.commit(): Cannot commit while already rendering. This likely means you attempted to commit from inside a lifecycle method.`    ```js  function App() {    return (      <div className=\"App\">        <h1>Hello CodeSandbox</h1>        <h2>Start editing to see some magic happen!</h2>      </div>    );  }    const rootElement = document.getElementById(\"root\");  const root = ReactDOM.unstable_createRoot(rootElement);    root.render(<App />).then(() => {    const batch = root.createBatch();      batch.render(<App />);    // bad    batch.commit();    setTimeout(() => {      // good      //batch.commit()    }, 0);    batch.then(() => {      // good      //batch.commit();    });  });    ```    Three things I noticed:  1. seems like I need to call batch.commit after the batch is complete. Changing it to   ```  batch.then(() => {    // good    batch.commit();  });  ```  got rid of the error. But I noticed that the original code is used throughout the internal tests. In fact moving createBatch and batch.commit the batch well after (long timeout) the initial root.render call seemed to allow sync `batch.render; batch.commit`.    2. \"lifecycle\" should be replaced with something different before these APIs get stable since we try to get away from this mental model.     For example [`applies setState in componentDidMount synchronously in a batch`](https://github.com/facebook/react/blob/4d307de458dfdf25e704cb2ca20b0578bba8998c/packages/react-dom/src/__tests__/ReactDOMRoot-test.js#L143) could be converted to a sync test and still pass while I would've expected [`can defer a commit by batching it`](https://github.com/facebook/react/blob/4d307de458dfdf25e704cb2ca20b0578bba8998c/packages/react-dom/src/__tests__/ReactDOMRoot-test.js#L132) to fail with the invariant violation from above.    3. Not all lifecycles are \"during rendering\" as far as I know. `componentDidUpdate` is called during commit.      **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**    https://codesandbox.io/s/dreamy-wood-dvzrp    **What is the expected behavior?**    I'm basically asking when it's safe to call `batch.commit`:   * [ ] during render phase  * [ ] during commit phase   * [ ] outside of these phases e.g. in some `onComplete` callback     **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    `react(-dom)@16.9.0`",
        "human_words": "This was me just toying around with unstable APIs. I don't know what these can be used for. Just tried to make sense of them from their names.    **Do you want to request a *feature* or report a *bug*?**    error message of `batch.commit()` is confusing    **What is the current behavior?**    I was experimenting with the `unstable_create(Sync)Root` APIs and just tried to piece together what goes where. While looking through the source I found that the `Work` returned from `createRoot` has a parameter called `onCommit`. For me this implied it's called after the commit [which doesn't seem to be intended](https://github.com/facebook/react/blob/0ca28b526496b4c9cc523e222beffeda73af7172/packages/react-dom/src/__tests__/ReactDOMRoot-test.js#L58). However given the code below I get `Uncaught Invariant Violation: work.commit(): Cannot commit while already rendering. This likely means you attempted to commit from inside a lifecycle method.`        Three things I noticed:  1. seems like I need to call batch.commit after the batch is complete. Changing it to     got rid of the error. But I noticed that the original code is used throughout the internal tests. In fact moving createBatch and batch.commit the batch well after (long timeout) the initial root.render call seemed to allow sync `batch.render; batch.commit`.    2. \"lifecycle\" should be replaced with something different before these APIs get stable since we try to get away from this mental model.     For example [`applies setState in componentDidMount synchronously in a batch`](https://github.com/facebook/react/blob/4d307de458dfdf25e704cb2ca20b0578bba8998c/packages/react-dom/src/__tests__/ReactDOMRoot-test.js#L143) could be converted to a sync test and still pass while I would've expected [`can defer a commit by batching it`](https://github.com/facebook/react/blob/4d307de458dfdf25e704cb2ca20b0578bba8998c/packages/react-dom/src/__tests__/ReactDOMRoot-test.js#L132) to fail with the invariant violation from above.    3. Not all lifecycles are \"during rendering\" as far as I know. `componentDidUpdate` is called during commit.      **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**    https://codesandbox.io/s/dreamy-wood-dvzrp    **What is the expected behavior?**    I'm basically asking when it's safe to call `batch.commit`:   * [ ] during render phase  * [ ] during commit phase   * [ ] outside of these phases e.g. in some `onComplete` callback     **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    `react(-dom)@16.9.0`",
        "human_words_regrex": "This was me just toying around with unstable APIs. I don't know what these can be used for. Just tried to make sense of them from their names. **Do you want to request a *feature* or report a *bug*?** error message of `batch.commit()` is confusing **What is the current behavior?** I was experimenting with the `unstable_create(Sync)Root` APIs and just tried to piece together what goes where. While looking through the source I found that the `Work` returned from `createRoot` has a parameter called `onCommit`. For me this implied it's called after the commit . However given the code below I get `Uncaught Invariant Violation: work.commit(): Cannot commit while already rendering. This likely means you attempted to commit from inside a lifecycle method.` Three things I noticed: 1. seems like I need to call batch.commit after the batch is complete. Changing it to got rid of the error. But I noticed that the original code is used throughout the internal tests. In fact moving createBatch and batch.commit the batch well after (long timeout) the initial root.render call seemed to allow sync `batch.render; batch.commit`. 2. \"lifecycle\" should be replaced with something different before these APIs get stable since we try to get away from this mental model. For example  could be converted to a sync test and still pass while I would've expected  to fail with the invariant violation from above. 3. Not all lifecycles are \"during rendering\" as far as I know. `componentDidUpdate` is called during commit. **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle ( or CodeSandbox ( example below:**  **What is the expected behavior?** I'm basically asking when it's safe to call `batch.commit`: * [ ] during render phase * [ ] during commit phase * [ ] outside of these phases e.g. in some `onComplete` callback **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** `react(-dom)@16.9.0`",
        "human_words_stopwords_removal_lemmatization": "toying around unstable apis . n't know used . tried make sense name . * * want request * feature * report * bug * ? * * error message ` batch.commit ( ) ` confusing * * current behavior ? * * experimenting ` unstable_create ( sync ) root ` apis tried piece together go . looking source found ` work ` returned ` createroot ` parameter called ` oncommit ` . implied 's called commit . however given code get ` uncaught invariant violation : work.commit ( ) : commit already rendering . likely mean attempted commit inside lifecycle method. ` three thing noticed : 1. seems like need call batch.commit batch complete . changing got rid error . noticed original code used throughout internal test . fact moving createbatch batch.commit batch well ( long timeout ) initial root.render call seemed allow sync ` batch.render ; batch.commit ` . 2 . `` lifecycle '' replaced something different apis get stable since try get away mental model . example could converted sync test still pas would 've expected fail invariant violation . 3. lifecycles `` rendering '' far know . ` componentdidupdate ` called commit . * * current behavior bug , please provide step reproduce possible minimal demo problem . bug get fixed much faster run code n't dependency react . paste link jsfiddle ( codesandbox ( example : * * * * expected behavior ? * * 'm basically asking 's safe call ` batch.commit ` : * [ ] render phase * [ ] commit phase * [ ] outside phase e.g . ` oncomplete ` callback * * version react , browser / o affected issue ? work previous version react ? * * ` react ( -dom ) @ 16.9.0 `",
        "title_stopwords_removal_lemmatization": "error message calling work.commit commit phase"
    },
    {
        "issue_id": 486657610,
        "title": "How should we set up apps for HMR now that Fast Refresh replaces react-hot-loader?",
        "label": [
            "Type: Question"
        ],
        "date": "2019-08-28T23:30:26Z",
        "status": "closed",
        "description": "Dan Abramov mentioned that Devtools v4 will be making `react-hot-loader` obsolete: https://twitter.com/dan_abramov/status/1144715740983046144?s=20\r\n\r\n> **Me:**\r\n> I have this hook:\r\n> ```require(\"react-reconciler\")(hostConfig).injectIntoDevTools(opts);```\r\n> But HMR has always worked completely without it. Is this now a new requirement?\r\n\r\n> **Dan:**\r\n> Yes, that's what the new mechanism uses. The new mechanism doesn't need \"react-hot-loader\" so by the time you update, you'd want to remove that package. (It's pretty invasive)\r\n\r\nI can't see any mention of HMR in the Devtools documentation, however; now that `react-hot-loader` has become obsolete (and with it, the `require(\"react-hot-loader/root\").hot` method), how should we set up apps for HMR in:\r\n\r\n* React DOM apps\r\n* React Native apps\r\n* React custom renderer apps\r\n\r\nI'd be particularly interested in a migration guide specifically for anyone who's already set up HMR via `react-hot-loader`.\r\n\r\nAlso, for HMR, does it matter whether we're using the standalone Devtools or the browser-extension Devtools?",
        "remove_template_description": "Dan Abramov mentioned that Devtools v4 will be making `react-hot-loader` obsolete: https://twitter.com/dan_abramov/status/1144715740983046144?s=20    > **Me:**  > I have this hook:  > ```require(\"react-reconciler\")(hostConfig).injectIntoDevTools(opts);```  > But HMR has always worked completely without it. Is this now a new requirement?    > **Dan:**  > Yes, that's what the new mechanism uses. The new mechanism doesn't need \"react-hot-loader\" so by the time you update, you'd want to remove that package. (It's pretty invasive)    I can't see any mention of HMR in the Devtools documentation, however; now that `react-hot-loader` has become obsolete (and with it, the `require(\"react-hot-loader/root\").hot` method), how should we set up apps for HMR in:    * React DOM apps  * React Native apps  * React custom renderer apps    I'd be particularly interested in a migration guide specifically for anyone who's already set up HMR via `react-hot-loader`.    Also, for HMR, does it matter whether we're using the standalone Devtools or the browser-extension Devtools?",
        "human_words": "Dan Abramov mentioned that Devtools v4 will be making `react-hot-loader` obsolete: https://twitter.com/dan_abramov/status/1144715740983046144?s=20    > **Me:**  > I have this hook:  >   > But HMR has always worked completely without it. Is this now a new requirement?    > **Dan:**  > Yes, that's what the new mechanism uses. The new mechanism doesn't need \"react-hot-loader\" so by the time you update, you'd want to remove that package. (It's pretty invasive)    I can't see any mention of HMR in the Devtools documentation, however; now that `react-hot-loader` has become obsolete (and with it, the `require(\"react-hot-loader/root\").hot` method), how should we set up apps for HMR in:    * React DOM apps  * React Native apps  * React custom renderer apps    I'd be particularly interested in a migration guide specifically for anyone who's already set up HMR via `react-hot-loader`.    Also, for HMR, does it matter whether we're using the standalone Devtools or the browser-extension Devtools?",
        "human_words_regrex": "Dan Abramov mentioned that Devtools v4 will be making `react-hot-loader` obsolete:  > **Me:** > I have this hook: > > But HMR has always worked completely without it. Is this now a new requirement? > **Dan:** > Yes, that's what the new mechanism uses. The new mechanism doesn't need \"react-hot-loader\" so by the time you update, you'd want to remove that package. (It's pretty invasive) I can't see any mention of HMR in the Devtools documentation, however; now that `react-hot-loader` has become obsolete (and with it, the `require(\"react-hot-loader/root\").hot` method), how should we set up apps for HMR in: * React DOM apps * React Native apps * React custom renderer apps I'd be particularly interested in a migration guide specifically for anyone who's already set up HMR via `react-hot-loader`. Also, for HMR, does it matter whether we're using the standalone Devtools or the browser-extension Devtools?",
        "human_words_stopwords_removal_lemmatization": "dan abramov mentioned devtools v4 making ` react-hot-loader ` obsolete : > * * : * * > hook : > > hmr always worked completely without . new requirement ? > * * dan : * * > yes , 's new mechanism us . new mechanism n't need `` react-hot-loader '' time update , 'd want remove package . ( 's pretty invasive ) ca n't see mention hmr devtools documentation , however ; ` react-hot-loader ` become obsolete ( , ` require ( `` react-hot-loader/root '' ) .hot ` method ) , set apps hmr : * react dom apps * react native apps * react custom renderer apps 'd particularly interested migration guide specifically anyone 's already set hmr via ` react-hot-loader ` . also , hmr , matter whether 're using standalone devtools browser-extension devtools ?",
        "title_stopwords_removal_lemmatization": "set apps hmr fast refresh replaces react-hot-loader ?"
    },
    {
        "issue_id": 485055860,
        "title": "Devtools V4: Breadcrumbs are removed?",
        "label": [
            "Type: Question",
            "Component: Developer Tools"
        ],
        "date": "2019-08-26T05:50:40Z",
        "status": "closed",
        "description": "**Request for feature**\r\nThe older devtools used to show a breadcrumbs/component hierarchy, at the bottom, it is really useful to navigate the parent component, I couldn't find it on the new devtool, did we remove it? any reason to remove it? Will we add it back?\r\n",
        "remove_template_description": "**Request for feature**  The older devtools used to show a breadcrumbs/component hierarchy, at the bottom, it is really useful to navigate the parent component, I couldn't find it on the new devtool, did we remove it? any reason to remove it? Will we add it back?",
        "human_words": "**Request for feature**  The older devtools used to show a breadcrumbs/component hierarchy, at the bottom, it is really useful to navigate the parent component, I couldn't find it on the new devtool, did we remove it? any reason to remove it? Will we add it back?",
        "human_words_regrex": "**Request for feature** The older devtools used to show a breadcrumbs/component hierarchy, at the bottom, it is really useful to navigate the parent component, I couldn't find it on the new devtool, did we remove it? any reason to remove it? Will we add it back?",
        "human_words_stopwords_removal_lemmatization": "* * request feature * * older devtools used show breadcrumbs/component hierarchy , bottom , really useful navigate parent component , could n't find new devtool , remove ? reason remove ? add back ?",
        "title_stopwords_removal_lemmatization": "devtools v4 : breadcrumb removed ?"
    },
    {
        "issue_id": 483164854,
        "title": "hook component can not been clicked in react-dev-tool if you want it works well.",
        "label": [
            "Type: Question",
            "Component: Developer Tools"
        ],
        "date": "2019-08-21T02:20:13Z",
        "status": "closed",
        "description": "### issue type\r\nbug\r\n\r\n### issue description\r\nlook at the code blow (it is very very very simple).\r\n```jsx\r\nimport React, { useState } from 'react';\r\n\r\nexport default function DemoCounter() {\r\n  const [fnWrapper] = useState('fn');\r\n  const [count, setCount] = useState(0);\r\n  fnWrapper.__proto__.setCount = s => {\r\n    setCount(s);\r\n  }\r\n\r\n // assign fnWrapper.__proto__.setCount to callSetCount\r\n  const callSetCount = fnWrapper.__proto__.setCount;\r\n\r\n  return (\r\n    <div style={{ border: '1px solid blue', margin: '8px' }}>\r\n      count: {count}\r\n      {/* this does not work if I open react-dev-tool and click the dom node */}\r\n      <input value={count} onChange={e => fnWrapper.__proto__.setCount(e.currentTarget.value)} />\r\n\r\n       {/* this always works not matter I open react-dev-tool and click the dom node or not */}\r\n      <input value={count} onChange={e => callSetCount(e.currentTarget.value)} />\r\n    </div>\r\n  );\r\n}\r\n\r\n```\r\n### why callSetCount always works but `fnWrapper.__proto__.setCount` not if and only if after I open the react-dev-tool and click the dom node ~~~~(>_<)~~~~\uff0c\r\n\r\n### please tell me the truth.\r\n",
        "remove_template_description": "### issue type  bug    ### issue description  look at the code blow (it is very very very simple).  ```jsx  import React, { useState } from 'react';    export default function DemoCounter() {    const [fnWrapper] = useState('fn');    const [count, setCount] = useState(0);    fnWrapper.__proto__.setCount = s => {      setCount(s);    }     // assign fnWrapper.__proto__.setCount to callSetCount    const callSetCount = fnWrapper.__proto__.setCount;      return (      <div style={{ border: '1px solid blue', margin: '8px' }}>        count: {count}        {/* this does not work if I open react-dev-tool and click the dom node */}        <input value={count} onChange={e => fnWrapper.__proto__.setCount(e.currentTarget.value)} />           {/* this always works not matter I open react-dev-tool and click the dom node or not */}        <input value={count} onChange={e => callSetCount(e.currentTarget.value)} />      </div>    );  }    ```  ### why callSetCount always works but `fnWrapper.__proto__.setCount` not if and only if after I open the react-dev-tool and click the dom node ~~~~(>_<)~~~~\uff0c    ### please tell me the truth.",
        "human_words": "### issue type  bug    ### issue description  look at the code blow (it is very very very simple).    ### why callSetCount always works but `fnWrapper.__proto__.setCount` not if and only if after I open the react-dev-tool and click the dom node ~~~~(>_<)~~~~\uff0c    ### please tell me the truth.",
        "human_words_regrex": "### issue type bug ### issue description look at the code blow (it is very very very simple). ### why callSetCount always works but `fnWrapper.__proto__.setCount` not if and only if after I open the react-dev-tool and click the dom node ~~~~(>_<)~~~~\uff0c ### please tell me the truth.",
        "human_words_stopwords_removal_lemmatization": "# # # issue type bug # # # issue description look code blow ( simple ) . # # # callsetcount always work ` fnwrapper.__proto__.setcount ` open react-dev-tool click dom node ~~~~ ( > _ < ) ~~~~\uff0c # # # please tell truth .",
        "title_stopwords_removal_lemmatization": "hook component clicked react-dev-tool want work well ."
    },
    {
        "issue_id": 481601398,
        "title": "Why does DevTool Chrome Extension need access to history?",
        "label": [
            "Type: Question",
            "Component: Developer Tools"
        ],
        "date": "2019-08-16T13:07:52Z",
        "status": "closed",
        "description": "I woke up today and the DevTool Extension for Chrome asked for additional permissions. More specifically access to history. \r\n\r\nI couldn't find any explanations or reference in the changelog, so I opened this issue.",
        "remove_template_description": "I woke up today and the DevTool Extension for Chrome asked for additional permissions. More specifically access to history.     I couldn't find any explanations or reference in the changelog, so I opened this issue.",
        "human_words": "I woke up today and the DevTool Extension for Chrome asked for additional permissions. More specifically access to history.     I couldn't find any explanations or reference in the changelog, so I opened this issue.",
        "human_words_regrex": "I woke up today and the DevTool Extension for Chrome asked for additional permissions. More specifically access to history. I couldn't find any explanations or reference in the changelog, so I opened this issue.",
        "human_words_stopwords_removal_lemmatization": "woke today devtool extension chrome asked additional permission . specifically access history . could n't find explanation reference changelog , opened issue .",
        "title_stopwords_removal_lemmatization": "devtool chrome extension need access history ?"
    },
    {
        "issue_id": 481533730,
        "title": "is that possible to get legacy version of react debugger?",
        "label": [
            "Type: Question",
            "Component: Developer Tools"
        ],
        "date": "2019-08-16T09:53:28Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\nbug: highlight element is no available in ver 4+ react debugger\r\nfeature: new version of react develop is good, bug sometimes i need legacy version of develop tool(i jest need BOTH of them), can you provide both of them?\r\n",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    bug: highlight element is no available in ver 4+ react debugger  feature: new version of react develop is good, bug sometimes i need legacy version of develop tool(i jest need BOTH of them), can you provide both of them?",
        "human_words": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    bug: highlight element is no available in ver 4+ react debugger  feature: new version of react develop is good, bug sometimes i need legacy version of develop tool(i jest need BOTH of them), can you provide both of them?",
        "human_words_regrex": " bug: highlight element is no available in ver 4+ react debugger feature: new version of react develop is good, bug sometimes i need legacy version of develop tool(i jest need BOTH of them), can you provide both of them?",
        "human_words_stopwords_removal_lemmatization": "bug : highlight element available ver 4+ react debugger feature : new version react develop good , bug sometimes need legacy version develop tool ( jest need ) , provide ?",
        "title_stopwords_removal_lemmatization": "possible get legacy version react debugger ?"
    },
    {
        "issue_id": 456634877,
        "title": "Suspense + Concurrent Mode immediately shows fallback when updated from onChange",
        "label": [
            "Type: Question",
            "Resolution: Stale"
        ],
        "date": "2019-06-16T12:13:30Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nReporting a bug, or at least trying to understand some spooky behavior \ud83d\udc7b\r\n\r\n**What is the current behavior?**\r\n\r\nI have a simple component which reads from a toy suspense-enabled cache. The dummy cache simply waits 100ms before responding to anything.  The cache key is based on some component state (managed with the useState hook). This component is wrapped with `<Suspense>` and rendered in a React root with concurrent mode enabled. \r\n\r\n```javascript\r\nfunction MyApp(){\r\n    let [text, setText] = React.useState('stuff')\r\n    return <div>\r\n        Data: {readCacheSuspense(text)}\r\n        <button onClick={e => setText('B-A-N-A-N-A-S')}>Update text from button</button>\r\n        <input type=\"text\" value={text} onChange={e => setText(e.target.value)} />\r\n    </div>\r\n}\r\n\r\nReactDOM.unstable_createRoot(document.getElementById('root')).render(<React.Suspense fallback={<div>cause i ain't no fall-a-back div</div>}>\r\n    <MyApp />\r\n</React.Suspense>)\r\n```\r\n\r\nThe component has a text field whose value is set to the current cache key (with an onChange handler that updates the useState hook when the text changes). It also has a button which updates the state to some fixed string \"asdf\" when clicked. \r\n\r\nClicking the button does what I would expect\u2014 the page doesn't respond for a fraction of a second (while the data is being \"fetched\") and then updates with a view of the loaded data. \r\n\r\n**Editing the text however (for instance, typing a single letter in the field) immediately causes the fallback UI to load and unfocuses the text input**. This happens even if the `setTimeout` is changed to 0ms, or `requestAnimationFrame`, or a `setImmediate` polyfill. \r\n\r\nRather than directly calling `setText` within the `onChange` handler\u2014\u00a0if I call it within a `setTimeout(..., 0)`, it behaves the way I would expect (i.e. without unfocusing the field and loading fallback). \r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem.**\r\n\r\nhttps://codesandbox.io/s/competent-goldwasser-yhmxo\r\n\r\n**What is the expected behavior?**\r\n\r\nI would expect that it shouldn't really matter whether I'm updating state from an `onChange` versus an `onClick`. \r\n\r\nI would expect that the fallback UI doesn't show up until its max duration is met.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nI'm using React 16.8.6. I tested it on Chrome 75 on macOS 10.14.",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**    Reporting a bug, or at least trying to understand some spooky behavior \ud83d\udc7b    **What is the current behavior?**    I have a simple component which reads from a toy suspense-enabled cache. The dummy cache simply waits 100ms before responding to anything.  The cache key is based on some component state (managed with the useState hook). This component is wrapped with `<Suspense>` and rendered in a React root with concurrent mode enabled.     ```javascript  function MyApp(){      let [text, setText] = React.useState('stuff')      return <div>          Data: {readCacheSuspense(text)}          <button onClick={e => setText('B-A-N-A-N-A-S')}>Update text from button</button>          <input type=\"text\" value={text} onChange={e => setText(e.target.value)} />      </div>  }    ReactDOM.unstable_createRoot(document.getElementById('root')).render(<React.Suspense fallback={<div>cause i ain't no fall-a-back div</div>}>      <MyApp />  </React.Suspense>)  ```    The component has a text field whose value is set to the current cache key (with an onChange handler that updates the useState hook when the text changes). It also has a button which updates the state to some fixed string \"asdf\" when clicked.     Clicking the button does what I would expect\u2014 the page doesn't respond for a fraction of a second (while the data is being \"fetched\") and then updates with a view of the loaded data.     **Editing the text however (for instance, typing a single letter in the field) immediately causes the fallback UI to load and unfocuses the text input**. This happens even if the `setTimeout` is changed to 0ms, or `requestAnimationFrame`, or a `setImmediate` polyfill.     Rather than directly calling `setText` within the `onChange` handler\u2014\u00a0if I call it within a `setTimeout(..., 0)`, it behaves the way I would expect (i.e. without unfocusing the field and loading fallback).     **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem.**    https://codesandbox.io/s/competent-goldwasser-yhmxo    **What is the expected behavior?**    I would expect that it shouldn't really matter whether I'm updating state from an `onChange` versus an `onClick`.     I would expect that the fallback UI doesn't show up until its max duration is met.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    I'm using React 16.8.6. I tested it on Chrome 75 on macOS 10.14.",
        "human_words": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**    Reporting a bug, or at least trying to understand some spooky behavior \ud83d\udc7b    **What is the current behavior?**    I have a simple component which reads from a toy suspense-enabled cache. The dummy cache simply waits 100ms before responding to anything.  The cache key is based on some component state (managed with the useState hook). This component is wrapped with `<Suspense>` and rendered in a React root with concurrent mode enabled.         The component has a text field whose value is set to the current cache key (with an onChange handler that updates the useState hook when the text changes). It also has a button which updates the state to some fixed string \"asdf\" when clicked.     Clicking the button does what I would expect\u2014 the page doesn't respond for a fraction of a second (while the data is being \"fetched\") and then updates with a view of the loaded data.     **Editing the text however (for instance, typing a single letter in the field) immediately causes the fallback UI to load and unfocuses the text input**. This happens even if the `setTimeout` is changed to 0ms, or `requestAnimationFrame`, or a `setImmediate` polyfill.     Rather than directly calling `setText` within the `onChange` handler\u2014\u00a0if I call it within a `setTimeout(..., 0)`, it behaves the way I would expect (i.e. without unfocusing the field and loading fallback).     **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem.**    https://codesandbox.io/s/competent-goldwasser-yhmxo    **What is the expected behavior?**    I would expect that it shouldn't really matter whether I'm updating state from an `onChange` versus an `onClick`.     I would expect that the fallback UI doesn't show up until its max duration is met.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    I'm using React 16.8.6. I tested it on Chrome 75 on macOS 10.14.",
        "human_words_regrex": " **Do you want to request a *feature* or report a *bug*?** Reporting a bug, or at least trying to understand some spooky behavior \ud83d\udc7b **What is the current behavior?** I have a simple component which reads from a toy suspense-enabled cache. The dummy cache simply waits 100ms before responding to anything. The cache key is based on some component state (managed with the useState hook). This component is wrapped with `` and rendered in a React root with concurrent mode enabled. The component has a text field whose value is set to the current cache key (with an onChange handler that updates the useState hook when the text changes). It also has a button which updates the state to some fixed string \"asdf\" when clicked. Clicking the button does what I would expect\u2014 the page doesn't respond for a fraction of a second (while the data is being \"fetched\") and then updates with a view of the loaded data. **Editing the text however (for instance, typing a single letter in the field) immediately causes the fallback UI to load and unfocuses the text input**. This happens even if the `setTimeout` is changed to 0ms, or `requestAnimationFrame`, or a `setImmediate` polyfill. Rather than directly calling `setText` within the `onChange` handler\u2014 if I call it within a `setTimeout(..., 0)`, it behaves the way I would expect (i.e. without unfocusing the field and loading fallback). **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem.**  **What is the expected behavior?** I would expect that it shouldn't really matter whether I'm updating state from an `onChange` versus an `onClick`. I would expect that the fallback UI doesn't show up until its max duration is met. **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** I'm using React 16.8.6. I tested it on Chrome 75 on macOS 10.14.",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * reporting bug , least trying understand spooky behavior \ud83d\udc7b * * current behavior ? * * simple component read toy suspense-enabled cache . dummy cache simply wait 100ms responding anything . cache key based component state ( managed usestate hook ) . component wrapped `` rendered react root concurrent mode enabled . component text field whose value set current cache key ( onchange handler update usestate hook text change ) . also button update state fixed string `` asdf '' clicked . clicking button would expect\u2014 page n't respond fraction second ( data `` fetched '' ) update view loaded data . * * editing text however ( instance , typing single letter field ) immediately cause fallback ui load unfocuses text input * * . happens even ` settimeout ` changed 0ms , ` requestanimationframe ` , ` setimmediate ` polyfill . rather directly calling ` settext ` within ` onchange ` handler\u2014 call within ` settimeout ( ... , 0 ) ` , behaves way would expect ( i.e . without unfocusing field loading fallback ) . * * current behavior bug , please provide step reproduce possible minimal demo problem . * * * * expected behavior ? * * would expect n't really matter whether 'm updating state ` onchange ` versus ` onclick ` . would expect fallback ui n't show max duration met . * * version react , browser / o affected issue ? work previous version react ? * * 'm using react 16.8.6. tested chrome 75 macos 10.14 .",
        "title_stopwords_removal_lemmatization": "suspense + concurrent mode immediately show fallback updated onchange"
    },
    {
        "issue_id": 443082988,
        "title": "Infinite lint error of react-hooks/exhaustive-deps",
        "label": [
            "Type: Question",
            "Component: ESLint Rules"
        ],
        "date": "2019-05-12T09:19:13Z",
        "status": "closed",
        "description": "First attempt was:\r\n```javascript\r\nconst setField = (args) => {\r\n        const newForm = Object.assign({}, form);\r\n        for (let i in args) {\r\n            if (args.hasOwnProperty(i)) {\r\n                newForm[i] = args[i];\r\n            }\r\n        }\r\n        setForm(newForm);\r\n}\r\n\r\nuseEffect(() => {\r\n        setAutoComplete(address.current, (args) => {\r\n            setField(args);\r\n        });\r\n}, []);\r\n```\r\n\r\nI have  the error:\r\n\r\n> React Hook useEffect has a missing dependency: 'setField'. Either include it or remove the dependency array\r\n\r\nIf I follow what the lint says:\r\n```javascript\r\nconst setField = (args) => {\r\n        const newForm = Object.assign({}, form);\r\n        for (let i in args) {\r\n            if (args.hasOwnProperty(i)) {\r\n                newForm[i] = args[i];\r\n            }\r\n        }\r\n        setForm(newForm);\r\n}\r\n\r\nuseEffect(() => {\r\n        setAutoComplete(address.current, (args) => {\r\n            setField(args);\r\n        });\r\n }, [setField]);\r\n```\r\n\r\nI have another error:\r\n\r\n> Line 58:  The 'setField' function makes the dependencies of useEffect Hook (at line 72) change on every render. To fix this, wrap the 'setField' definition into its own useCallback() Hook\r\n\r\nThen I follow the advise again:\r\n\r\n```javascript\r\n    const setField = (args) => {\r\n        const newForm = Object.assign({}, form);\r\n        for (let i in args) {\r\n            if (args.hasOwnProperty(i)) {\r\n                newForm[i] = args[i];\r\n            }\r\n        }\r\n        setForm(newForm);\r\n    }\r\n\r\n    const myCallback = useCallback(() => setField, []);\r\n\r\n    useEffect(() => {\r\n        setAutoComplete(address.current, (args) => {\r\n            myCallback(args);\r\n        });\r\n    }, [myCallback]);\r\n```\r\n\r\nThen the error is:\r\n\r\n> Line 68:  React Hook useCallback has a missing dependency: 'setField'. Either include it or remove the dependency array\r\n\r\nAnd then the code:\r\n\r\n```javascript\r\n    const setField = (args) => {\r\n        const newForm = Object.assign({}, form);\r\n        for (let i in args) {\r\n            if (args.hasOwnProperty(i)) {\r\n                newForm[i] = args[i];\r\n            }\r\n        }\r\n        setForm(newForm);\r\n    }\r\n\r\n    const myCallback = useCallback(() => setField, [setField]);\r\n\r\n    useEffect(() => {\r\n        setAutoComplete(address.current, (args) => {\r\n            myCallback(args);\r\n        });\r\n    }, [myCallback]);\r\n```\r\n\r\nthen the error\r\n\r\n> Line 58:  The 'setField' function makes the dependencies of useCallback Hook (at line 68) change on every render. To fix this, wrap the 'setField' definition into its own useCallback() Hook\r\n\r\nAm I doing something wrong?\r\n\r\nThanks!\r\n",
        "remove_template_description": "First attempt was:  ```javascript  const setField = (args) => {          const newForm = Object.assign({}, form);          for (let i in args) {              if (args.hasOwnProperty(i)) {                  newForm[i] = args[i];              }          }          setForm(newForm);  }    useEffect(() => {          setAutoComplete(address.current, (args) => {              setField(args);          });  }, []);  ```    I have  the error:    > React Hook useEffect has a missing dependency: 'setField'. Either include it or remove the dependency array    If I follow what the lint says:  ```javascript  const setField = (args) => {          const newForm = Object.assign({}, form);          for (let i in args) {              if (args.hasOwnProperty(i)) {                  newForm[i] = args[i];              }          }          setForm(newForm);  }    useEffect(() => {          setAutoComplete(address.current, (args) => {              setField(args);          });   }, [setField]);  ```    I have another error:    > Line 58:  The 'setField' function makes the dependencies of useEffect Hook (at line 72) change on every render. To fix this, wrap the 'setField' definition into its own useCallback() Hook    Then I follow the advise again:    ```javascript      const setField = (args) => {          const newForm = Object.assign({}, form);          for (let i in args) {              if (args.hasOwnProperty(i)) {                  newForm[i] = args[i];              }          }          setForm(newForm);      }        const myCallback = useCallback(() => setField, []);        useEffect(() => {          setAutoComplete(address.current, (args) => {              myCallback(args);          });      }, [myCallback]);  ```    Then the error is:    > Line 68:  React Hook useCallback has a missing dependency: 'setField'. Either include it or remove the dependency array    And then the code:    ```javascript      const setField = (args) => {          const newForm = Object.assign({}, form);          for (let i in args) {              if (args.hasOwnProperty(i)) {                  newForm[i] = args[i];              }          }          setForm(newForm);      }        const myCallback = useCallback(() => setField, [setField]);        useEffect(() => {          setAutoComplete(address.current, (args) => {              myCallback(args);          });      }, [myCallback]);  ```    then the error    > Line 58:  The 'setField' function makes the dependencies of useCallback Hook (at line 68) change on every render. To fix this, wrap the 'setField' definition into its own useCallback() Hook    Am I doing something wrong?    Thanks!",
        "human_words": "First attempt was:      I have  the error:    > React Hook useEffect has a missing dependency: 'setField'. Either include it or remove the dependency array    If I follow what the lint says:      I have another error:    > Line 58:  The 'setField' function makes the dependencies of useEffect Hook (at line 72) change on every render. To fix this, wrap the 'setField' definition into its own useCallback() Hook    Then I follow the advise again:        Then the error is:    > Line 68:  React Hook useCallback has a missing dependency: 'setField'. Either include it or remove the dependency array    And then the code:        then the error    > Line 58:  The 'setField' function makes the dependencies of useCallback Hook (at line 68) change on every render. To fix this, wrap the 'setField' definition into its own useCallback() Hook    Am I doing something wrong?    Thanks!",
        "human_words_regrex": "First attempt was: I have the error: > React Hook useEffect has a missing dependency: 'setField'. Either include it or remove the dependency array If I follow what the lint says: I have another error: > Line 58: The 'setField' function makes the dependencies of useEffect Hook (at line 72) change on every render. To fix this, wrap the 'setField' definition into its own useCallback() Hook Then I follow the advise again: Then the error is: > Line 68: React Hook useCallback has a missing dependency: 'setField'. Either include it or remove the dependency array And then the code: then the error > Line 58: The 'setField' function makes the dependencies of useCallback Hook (at line 68) change on every render. To fix this, wrap the 'setField' definition into its own useCallback() Hook Am I doing something wrong? Thanks!",
        "human_words_stopwords_removal_lemmatization": "first attempt : error : > react hook useeffect missing dependency : 'setfield ' . either include remove dependency array follow lint say : another error : > line 58 : 'setfield ' function make dependency useeffect hook ( line 72 ) change every render . fix , wrap 'setfield ' definition usecallback ( ) hook follow advise : error : > line 68 : react hook usecallback missing dependency : 'setfield ' . either include remove dependency array code : error > line 58 : 'setfield ' function make dependency usecallback hook ( line 68 ) change every render . fix , wrap 'setfield ' definition usecallback ( ) hook something wrong ? thanks !",
        "title_stopwords_removal_lemmatization": "infinite lint error react-hooks/exhaustive-deps"
    },
    {
        "issue_id": 442978146,
        "title": "[eslint-plugin-react-hooks]: Can't call hooks on component returned from function",
        "label": [
            "Type: Question",
            "Component: ESLint Rules"
        ],
        "date": "2019-05-11T10:23:31Z",
        "status": "closed",
        "description": "Wrapping a component in a function, returning the component.\r\n\r\n\r\ntl;dr\r\n```javascript\r\nexport function Home() {\r\n    return function() {\r\n        const [ items, setItems ] = useState([])\r\n        return <div>nothing</div>\r\n    } \r\n}\r\n\r\nconst root = document.getElementById('root')\r\nReactDOM.render(React.createElement(Home()), root)\r\n```\r\n\r\nResults in the following error:\r\n\r\n```\r\nReact Hook \"useState\" cannot be called inside a callback. React Hooks must be called in a React function component or a custom React Hook function\r\n```\r\n\r\nHowever this works:\r\n\r\n```javascript\r\nexport function Home() {\r\n        const [ items, setItems ] = useState('')\r\n        return <div>nothing</div>\r\n}\r\n\r\nconst root = document.getElementById('root')\r\nReactDOM.render(React.createElement(Home), root)\r\n```\r\n\r\n",
        "remove_template_description": "Wrapping a component in a function, returning the component.      tl;dr  ```javascript  export function Home() {      return function() {          const [ items, setItems ] = useState([])          return <div>nothing</div>      }   }    const root = document.getElementById('root')  ReactDOM.render(React.createElement(Home()), root)  ```    Results in the following error:    ```  React Hook \"useState\" cannot be called inside a callback. React Hooks must be called in a React function component or a custom React Hook function  ```    However this works:    ```javascript  export function Home() {          const [ items, setItems ] = useState('')          return <div>nothing</div>  }    const root = document.getElementById('root')  ReactDOM.render(React.createElement(Home), root)  ```",
        "human_words": "Wrapping a component in a function, returning the component.      tl;dr      Results in the following error:        However this works:    ",
        "human_words_regrex": "Wrapping a component in a function, returning the component. tl;dr Results in the following error: However this works: ",
        "human_words_stopwords_removal_lemmatization": "wrapping component function , returning component . tl ; dr result following error : however work :",
        "title_stopwords_removal_lemmatization": "[ eslint-plugin-react-hooks ] : ca n't call hook component returned function"
    },
    {
        "issue_id": 438812645,
        "title": "Understanding `act` behaviour",
        "label": [
            "Type: Question",
            "Component: Test Utils"
        ],
        "date": "2019-04-30T14:36:46Z",
        "status": "closed",
        "description": " I have been trying to use `act` for the first time, and having some issues, and so I'm wondering if my expectations are wrong about what it is supposed to do, or if I am \"doing it wrong\".\r\n\r\n**What is the current behavior?**\r\n\r\nThe only way I can observe the results of state changes I initiate is by using a timeout.\r\n\r\n**Paste the link to your JSFiddle or CodeSandbox example below:**\r\n\r\nhttps://codesandbox.io/s/k5zmln6w83?expanddevtools=1&fontsize=14&hidenavigation=1\r\n\r\n**What is the expected behavior?**\r\n\r\nWhat I expect is that by wrapping a state change or render operation in `act`, all of the resulting state changes / side-effects / re-renders will be complete by the time `act` returns, so that the operation appears (or is coerced to be) synchronous. \r\n\r\nI created an example (https://codesandbox.io/s/k5zmln6w83?expanddevtools=1&fontsize=14&hidenavigation=1) wherein I render a view via `unstable_ConcurrentMode`. In the view, I create a `useState` hook with a value of `0`. After the view is rendered, I use that hook's setter to change its state to `1`.\r\n\r\nBelow is a log of the [steps I take](https://codesandbox.io/s/k5zmln6w83?expanddevtools=1&fontsize=14&hidenavigation=1), showing three values at each time: `seenByRender`, the last state-value that appeared within the render body; `calculated`, the last value returned from my state-update function; and `seenByEffect`, the last value observed from a `useEffect` I create in the view. \r\n\r\n```\r\n1. before act/render:   seenByRender: null, calculated: null, seenByEffect: null\r\n2. after act/render:    seenByRender: 0,    calculated: null, seenByEffect: 0\r\n3. ---incrementing with act/setState---\r\n4. after act/increment: seenByRender: 0,    calculated: 1,    seenByEffect: 0\r\n5. after timeout:       seenByRender: 1,    calculated: 1,    seenByEffect: 1\r\n```\r\n\r\nWhat I am wanting/expecting is for step 4 to look like step 5, ie, I can somehow test the full consequences of my setState call.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.8.6, using unstable_ConcurrentMode\r\n",
        "remove_template_description": "I have been trying to use `act` for the first time, and having some issues, and so I'm wondering if my expectations are wrong about what it is supposed to do, or if I am \"doing it wrong\".    **What is the current behavior?**    The only way I can observe the results of state changes I initiate is by using a timeout.    **Paste the link to your JSFiddle or CodeSandbox example below:**    https://codesandbox.io/s/k5zmln6w83?expanddevtools=1&fontsize=14&hidenavigation=1    **What is the expected behavior?**    What I expect is that by wrapping a state change or render operation in `act`, all of the resulting state changes / side-effects / re-renders will be complete by the time `act` returns, so that the operation appears (or is coerced to be) synchronous.     I created an example (https://codesandbox.io/s/k5zmln6w83?expanddevtools=1&fontsize=14&hidenavigation=1) wherein I render a view via `unstable_ConcurrentMode`. In the view, I create a `useState` hook with a value of `0`. After the view is rendered, I use that hook's setter to change its state to `1`.    Below is a log of the [steps I take](https://codesandbox.io/s/k5zmln6w83?expanddevtools=1&fontsize=14&hidenavigation=1), showing three values at each time: `seenByRender`, the last state-value that appeared within the render body; `calculated`, the last value returned from my state-update function; and `seenByEffect`, the last value observed from a `useEffect` I create in the view.     ```  1. before act/render:   seenByRender: null, calculated: null, seenByEffect: null  2. after act/render:    seenByRender: 0,    calculated: null, seenByEffect: 0  3. ---incrementing with act/setState---  4. after act/increment: seenByRender: 0,    calculated: 1,    seenByEffect: 0  5. after timeout:       seenByRender: 1,    calculated: 1,    seenByEffect: 1  ```    What I am wanting/expecting is for step 4 to look like step 5, ie, I can somehow test the full consequences of my setState call.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    16.8.6, using unstable_ConcurrentMode",
        "human_words": "I have been trying to use `act` for the first time, and having some issues, and so I'm wondering if my expectations are wrong about what it is supposed to do, or if I am \"doing it wrong\".    **What is the current behavior?**    The only way I can observe the results of state changes I initiate is by using a timeout.    **Paste the link to your JSFiddle or CodeSandbox example below:**    https://codesandbox.io/s/k5zmln6w83?expanddevtools=1&fontsize=14&hidenavigation=1    **What is the expected behavior?**    What I expect is that by wrapping a state change or render operation in `act`, all of the resulting state changes / side-effects / re-renders will be complete by the time `act` returns, so that the operation appears (or is coerced to be) synchronous.     I created an example (https://codesandbox.io/s/k5zmln6w83?expanddevtools=1&fontsize=14&hidenavigation=1) wherein I render a view via `unstable_ConcurrentMode`. In the view, I create a `useState` hook with a value of `0`. After the view is rendered, I use that hook's setter to change its state to `1`.    Below is a log of the [steps I take](https://codesandbox.io/s/k5zmln6w83?expanddevtools=1&fontsize=14&hidenavigation=1), showing three values at each time: `seenByRender`, the last state-value that appeared within the render body; `calculated`, the last value returned from my state-update function; and `seenByEffect`, the last value observed from a `useEffect` I create in the view.         What I am wanting/expecting is for step 4 to look like step 5, ie, I can somehow test the full consequences of my setState call.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    16.8.6, using unstable_ConcurrentMode",
        "human_words_regrex": "I have been trying to use `act` for the first time, and having some issues, and so I'm wondering if my expectations are wrong about what it is supposed to do, or if I am \"doing it wrong\". **What is the current behavior?** The only way I can observe the results of state changes I initiate is by using a timeout. **Paste the link to your JSFiddle or CodeSandbox example below:**  **What is the expected behavior?** What I expect is that by wrapping a state change or render operation in `act`, all of the resulting state changes / side-effects / re-renders will be complete by the time `act` returns, so that the operation appears (or is coerced to be) synchronous. I created an example ( wherein I render a view via `unstable_ConcurrentMode`. In the view, I create a `useState` hook with a value of `0`. After the view is rendered, I use that hook's setter to change its state to `1`. Below is a log of the , showing three values at each time: `seenByRender`, the last state-value that appeared within the render body; `calculated`, the last value returned from my state-update function; and `seenByEffect`, the last value observed from a `useEffect` I create in the view. What I am wanting/expecting is for step 4 to look like step 5, ie, I can somehow test the full consequences of my setState call. **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** 16.8.6, using unstable_ConcurrentMode",
        "human_words_stopwords_removal_lemmatization": "trying use ` act ` first time , issue , 'm wondering expectation wrong supposed , `` wrong '' . * * current behavior ? * * way observe result state change initiate using timeout . * * paste link jsfiddle codesandbox example : * * * * expected behavior ? * * expect wrapping state change render operation ` act ` , resulting state change / side-effects / re-renders complete time ` act ` return , operation appears ( coerced ) synchronous . created example ( wherein render view via ` unstable_concurrentmode ` . view , create ` usestate ` hook value ` 0 ` . view rendered , use hook 's setter change state ` 1 ` . log , showing three value time : ` seenbyrender ` , last state-value appeared within render body ; ` calculated ` , last value returned state-update function ; ` seenbyeffect ` , last value observed ` useeffect ` create view . wanting/expecting step 4 look like step 5 , ie , somehow test full consequence setstate call . * * version react , browser / o affected issue ? work previous version react ? * * 16.8.6 , using unstable_concurrentmode",
        "title_stopwords_removal_lemmatization": "understanding ` act ` behaviour"
    },
    {
        "issue_id": 438155079,
        "title": "useEffect for synchronizing state and props",
        "label": [
            "Type: Question"
        ],
        "date": "2019-04-29T05:31:03Z",
        "status": "closed",
        "description": "Hi. I have a recurring scenario that I\u2019ve been struggling with since the good old days of `componentWillReceiveProps`, and now I\u2019ve pretty much run into the same issue with hooks, so I was hoping I could get some guidance as to what the idiomatic way of solving this and similar cases in React is.\r\n\r\n### Problem description - starting point\r\n\r\nI have a list of items. Every item has an Edit button next to it. Clicking it opens an \u201cEditor\u201d, where one can change all the fields and either Confirm or Cancel. (Confirming would send an API call to save the data, but this part is not relevant to the problem I am having.) The \u201cparent\u201d component would render the list with the Edit buttons, and have an `itemUnderEdit` property that would be null from the start. Clicking on \u201cEdit\u201d for a specific item would set the `itemUnderEdit` to the clicked item.\r\n\r\n![usecase](https://user-images.githubusercontent.com/5010901/56883590-6cbcd080-6a67-11e9-9401-bd44e1747bc2.gif)\r\n\r\nHere is the full example with all 3 solutions on CodeSandbox: https://codesandbox.io/s/2oz2nzynpy\r\n\r\n### Solution 1\r\n\r\nMake the \u201cEditor\u201d component stateless and controlled - it takes in change handlers for every field as props with the parent tracking every change. This solution appeals to me, since I like pure stateful components that are a one-to-one mapping of props to HTML - they are simple to reason about etc etc. This kind of goes against the commonly heard \u201ckeep your state close to where it is used\u201d advice, which also seems reasonable, since I don\u2019t really need to know in the parent what the user is typing, I am only interested to know when they are done at the end. This stateless solution also introduces a lot of props, since I need one event handler per field (onNameChanged, onDescriptionChanged in the example, but it could as well be 10 fields), which is a lot of props.\r\n\r\n### Solution 2\r\n\r\nMake the \u201cEditor\u201d component stateful and only get an event when editing is done: `onConfirm(itemToSave)` or `onCancel()`. This seems like the \u201cReact\u201d way and is in line with the advice of keeping state close to where it is used. Since I am only interested to know when the user clicks `Confirm`, a stateful \u201cblackbox\u201d-component that tracks its own state seems reasonable.\r\n\r\nIn order to achieve this, however, I need to copy my props to the state, which, according to @gaearon, is a bad idea:\r\n```\r\nconst [name, setName] = useState(props.item.name);\r\nconst [description, setDescription] = useState(props.item.description);\r\n```\r\n\r\nMoreover, this solution is buggy from the start, since clicking on Edit for a different item doesn\u2019t \u201cre-sync\u201d the props with the state - it only works if I close the Editor and then reopen it:\r\n\r\n![stateful_editor1](https://user-images.githubusercontent.com/5010901/56877667-e2b53d80-6a4f-11e9-8f4c-6a52fa175abd.gif)\r\n\r\nWhich brings us to Solution 3.\r\n\r\n### Solution 3\r\n\r\nThis one has been one of my biggest pain-points with stateful components in React (which is why I prefer stateless components with a state container, but those I widely demonized nowadays, so I am yet again trying to understand the idiomatic React way of doing this).\r\nThe \u201cold\u201d ways were to sync in `componentWillReceiveProps` and later with `getDerivedStateFromProps`. Now I can do this with `useEffect`, where I specify `props.item` as the \u201cdependency\u201d, since I want to run it when the item changes.\r\n\r\n```\r\nuseEffect(() => {\r\n  if (props.item.name !== name) {\r\n    setName(props.item.name);\r\n  }\r\n  if (props.item.description !== description) {\r\n    setDescription(props.item.description);\r\n  }\r\n}, [props.item]);\r\n```\r\n\r\nThis seems to work as expected, but I get the linter warning: `React Hook useEffect has missing dependencies: 'description' and 'name'. Either include them or remove the dependency array  react-hooks/exhaustive-deps`. Obviously if I were to add those to the dependency list, I wouldn\u2019t be able to change anything in the inputs, so how come I get this warning?\r\n\r\n### Summary\r\n\r\nThis is a question in two parts: first one about an idiomatic solution in React, as well as feedback to the React team: this scenario is simple and common, but *it\u2019s difficult to know how to implement correctly and safely in a consistent way*.\r\n\r\nLifting state up and making the problematic component stateless is good advice that solves the problem, but every time it seems like a \u201ctemporary\u201d solution. It also leads to painful refactoring every time something has to be moved around the component tree, so relying on it in the long run is extremely brittle.\r\n\r\nThe second part of the question is whether the solution with `useEffect` is viable at all, and in this case - why do I get the linter warning? Clearly I want to run it **only** when a certain prop changes. Is there an edge-case where this would result in an unexpected bug? ",
        "remove_template_description": "Hi. I have a recurring scenario that I\u2019ve been struggling with since the good old days of `componentWillReceiveProps`, and now I\u2019ve pretty much run into the same issue with hooks, so I was hoping I could get some guidance as to what the idiomatic way of solving this and similar cases in React is.    ### Problem description - starting point    I have a list of items. Every item has an Edit button next to it. Clicking it opens an \u201cEditor\u201d, where one can change all the fields and either Confirm or Cancel. (Confirming would send an API call to save the data, but this part is not relevant to the problem I am having.) The \u201cparent\u201d component would render the list with the Edit buttons, and have an `itemUnderEdit` property that would be null from the start. Clicking on \u201cEdit\u201d for a specific item would set the `itemUnderEdit` to the clicked item.    ![usecase](https://user-images.githubusercontent.com/5010901/56883590-6cbcd080-6a67-11e9-9401-bd44e1747bc2.gif)    Here is the full example with all 3 solutions on CodeSandbox: https://codesandbox.io/s/2oz2nzynpy    ### Solution 1    Make the \u201cEditor\u201d component stateless and controlled - it takes in change handlers for every field as props with the parent tracking every change. This solution appeals to me, since I like pure stateful components that are a one-to-one mapping of props to HTML - they are simple to reason about etc etc. This kind of goes against the commonly heard \u201ckeep your state close to where it is used\u201d advice, which also seems reasonable, since I don\u2019t really need to know in the parent what the user is typing, I am only interested to know when they are done at the end. This stateless solution also introduces a lot of props, since I need one event handler per field (onNameChanged, onDescriptionChanged in the example, but it could as well be 10 fields), which is a lot of props.    ### Solution 2    Make the \u201cEditor\u201d component stateful and only get an event when editing is done: `onConfirm(itemToSave)` or `onCancel()`. This seems like the \u201cReact\u201d way and is in line with the advice of keeping state close to where it is used. Since I am only interested to know when the user clicks `Confirm`, a stateful \u201cblackbox\u201d-component that tracks its own state seems reasonable.    In order to achieve this, however, I need to copy my props to the state, which, according to @gaearon, is a bad idea:  ```  const [name, setName] = useState(props.item.name);  const [description, setDescription] = useState(props.item.description);  ```    Moreover, this solution is buggy from the start, since clicking on Edit for a different item doesn\u2019t \u201cre-sync\u201d the props with the state - it only works if I close the Editor and then reopen it:    ![stateful_editor1](https://user-images.githubusercontent.com/5010901/56877667-e2b53d80-6a4f-11e9-8f4c-6a52fa175abd.gif)    Which brings us to Solution 3.    ### Solution 3    This one has been one of my biggest pain-points with stateful components in React (which is why I prefer stateless components with a state container, but those I widely demonized nowadays, so I am yet again trying to understand the idiomatic React way of doing this).  The \u201cold\u201d ways were to sync in `componentWillReceiveProps` and later with `getDerivedStateFromProps`. Now I can do this with `useEffect`, where I specify `props.item` as the \u201cdependency\u201d, since I want to run it when the item changes.    ```  useEffect(() => {    if (props.item.name !== name) {      setName(props.item.name);    }    if (props.item.description !== description) {      setDescription(props.item.description);    }  }, [props.item]);  ```    This seems to work as expected, but I get the linter warning: `React Hook useEffect has missing dependencies: 'description' and 'name'. Either include them or remove the dependency array  react-hooks/exhaustive-deps`. Obviously if I were to add those to the dependency list, I wouldn\u2019t be able to change anything in the inputs, so how come I get this warning?    ### Summary    This is a question in two parts: first one about an idiomatic solution in React, as well as feedback to the React team: this scenario is simple and common, but *it\u2019s difficult to know how to implement correctly and safely in a consistent way*.    Lifting state up and making the problematic component stateless is good advice that solves the problem, but every time it seems like a \u201ctemporary\u201d solution. It also leads to painful refactoring every time something has to be moved around the component tree, so relying on it in the long run is extremely brittle.    The second part of the question is whether the solution with `useEffect` is viable at all, and in this case - why do I get the linter warning? Clearly I want to run it **only** when a certain prop changes. Is there an edge-case where this would result in an unexpected bug?",
        "human_words": "Hi. I have a recurring scenario that I\u2019ve been struggling with since the good old days of `componentWillReceiveProps`, and now I\u2019ve pretty much run into the same issue with hooks, so I was hoping I could get some guidance as to what the idiomatic way of solving this and similar cases in React is.    ### Problem description - starting point    I have a list of items. Every item has an Edit button next to it. Clicking it opens an \u201cEditor\u201d, where one can change all the fields and either Confirm or Cancel. (Confirming would send an API call to save the data, but this part is not relevant to the problem I am having.) The \u201cparent\u201d component would render the list with the Edit buttons, and have an `itemUnderEdit` property that would be null from the start. Clicking on \u201cEdit\u201d for a specific item would set the `itemUnderEdit` to the clicked item.    ![usecase](https://user-images.githubusercontent.com/5010901/56883590-6cbcd080-6a67-11e9-9401-bd44e1747bc2.gif)    Here is the full example with all 3 solutions on CodeSandbox: https://codesandbox.io/s/2oz2nzynpy    ### Solution 1    Make the \u201cEditor\u201d component stateless and controlled - it takes in change handlers for every field as props with the parent tracking every change. This solution appeals to me, since I like pure stateful components that are a one-to-one mapping of props to HTML - they are simple to reason about etc etc. This kind of goes against the commonly heard \u201ckeep your state close to where it is used\u201d advice, which also seems reasonable, since I don\u2019t really need to know in the parent what the user is typing, I am only interested to know when they are done at the end. This stateless solution also introduces a lot of props, since I need one event handler per field (onNameChanged, onDescriptionChanged in the example, but it could as well be 10 fields), which is a lot of props.    ### Solution 2    Make the \u201cEditor\u201d component stateful and only get an event when editing is done: `onConfirm(itemToSave)` or `onCancel()`. This seems like the \u201cReact\u201d way and is in line with the advice of keeping state close to where it is used. Since I am only interested to know when the user clicks `Confirm`, a stateful \u201cblackbox\u201d-component that tracks its own state seems reasonable.    In order to achieve this, however, I need to copy my props to the state, which, according to @gaearon, is a bad idea:      Moreover, this solution is buggy from the start, since clicking on Edit for a different item doesn\u2019t \u201cre-sync\u201d the props with the state - it only works if I close the Editor and then reopen it:    ![stateful_editor1](https://user-images.githubusercontent.com/5010901/56877667-e2b53d80-6a4f-11e9-8f4c-6a52fa175abd.gif)    Which brings us to Solution 3.    ### Solution 3    This one has been one of my biggest pain-points with stateful components in React (which is why I prefer stateless components with a state container, but those I widely demonized nowadays, so I am yet again trying to understand the idiomatic React way of doing this).  The \u201cold\u201d ways were to sync in `componentWillReceiveProps` and later with `getDerivedStateFromProps`. Now I can do this with `useEffect`, where I specify `props.item` as the \u201cdependency\u201d, since I want to run it when the item changes.        This seems to work as expected, but I get the linter warning: `React Hook useEffect has missing dependencies: 'description' and 'name'. Either include them or remove the dependency array  react-hooks/exhaustive-deps`. Obviously if I were to add those to the dependency list, I wouldn\u2019t be able to change anything in the inputs, so how come I get this warning?    ### Summary    This is a question in two parts: first one about an idiomatic solution in React, as well as feedback to the React team: this scenario is simple and common, but *it\u2019s difficult to know how to implement correctly and safely in a consistent way*.    Lifting state up and making the problematic component stateless is good advice that solves the problem, but every time it seems like a \u201ctemporary\u201d solution. It also leads to painful refactoring every time something has to be moved around the component tree, so relying on it in the long run is extremely brittle.    The second part of the question is whether the solution with `useEffect` is viable at all, and in this case - why do I get the linter warning? Clearly I want to run it **only** when a certain prop changes. Is there an edge-case where this would result in an unexpected bug?",
        "human_words_regrex": "Hi. I have a recurring scenario that I\u2019ve been struggling with since the good old days of `componentWillReceiveProps`, and now I\u2019ve pretty much run into the same issue with hooks, so I was hoping I could get some guidance as to what the idiomatic way of solving this and similar cases in React is. ### Problem description - starting point I have a list of items. Every item has an Edit button next to it. Clicking it opens an \u201cEditor\u201d, where one can change all the fields and either Confirm or Cancel. (Confirming would send an API call to save the data, but this part is not relevant to the problem I am having.) The \u201cparent\u201d component would render the list with the Edit buttons, and have an `itemUnderEdit` property that would be null from the start. Clicking on \u201cEdit\u201d for a specific item would set the `itemUnderEdit` to the clicked item. ! Here is the full example with all 3 solutions on CodeSandbox:  ### Solution 1 Make the \u201cEditor\u201d component stateless and controlled - it takes in change handlers for every field as props with the parent tracking every change. This solution appeals to me, since I like pure stateful components that are a one-to-one mapping of props to HTML - they are simple to reason about etc etc. This kind of goes against the commonly heard \u201ckeep your state close to where it is used\u201d advice, which also seems reasonable, since I don\u2019t really need to know in the parent what the user is typing, I am only interested to know when they are done at the end. This stateless solution also introduces a lot of props, since I need one event handler per field (onNameChanged, onDescriptionChanged in the example, but it could as well be 10 fields), which is a lot of props. ### Solution 2 Make the \u201cEditor\u201d component stateful and only get an event when editing is done: `onConfirm(itemToSave)` or `onCancel()`. This seems like the \u201cReact\u201d way and is in line with the advice of keeping state close to where it is used. Since I am only interested to know when the user clicks `Confirm`, a stateful \u201cblackbox\u201d-component that tracks its own state seems reasonable. In order to achieve this, however, I need to copy my props to the state, which, according to @gaearon, is a bad idea: Moreover, this solution is buggy from the start, since clicking on Edit for a different item doesn\u2019t \u201cre-sync\u201d the props with the state - it only works if I close the Editor and then reopen it: ! Which brings us to Solution 3. ### Solution 3 This one has been one of my biggest pain-points with stateful components in React (which is why I prefer stateless components with a state container, but those I widely demonized nowadays, so I am yet again trying to understand the idiomatic React way of doing this). The \u201cold\u201d ways were to sync in `componentWillReceiveProps` and later with `getDerivedStateFromProps`. Now I can do this with `useEffect`, where I specify `props.item` as the \u201cdependency\u201d, since I want to run it when the item changes. This seems to work as expected, but I get the linter warning: `React Hook useEffect has missing dependencies: 'description' and 'name'. Either include them or remove the dependency array react-hooks/exhaustive-deps`. Obviously if I were to add those to the dependency list, I wouldn\u2019t be able to change anything in the inputs, so how come I get this warning? ### Summary This is a question in two parts: first one about an idiomatic solution in React, as well as feedback to the React team: this scenario is simple and common, but *it\u2019s difficult to know how to implement correctly and safely in a consistent way*. Lifting state up and making the problematic component stateless is good advice that solves the problem, but every time it seems like a \u201ctemporary\u201d solution. It also leads to painful refactoring every time something has to be moved around the component tree, so relying on it in the long run is extremely brittle. The second part of the question is whether the solution with `useEffect` is viable at all, and in this case - why do I get the linter warning? Clearly I want to run it **only** when a certain prop changes. Is there an edge-case where this would result in an unexpected bug?",
        "human_words_stopwords_removal_lemmatization": "hi . recurring scenario \u2019 struggling since good old day ` componentwillreceiveprops ` , \u2019 pretty much run issue hook , hoping could get guidance idiomatic way solving similar case react . # # # problem description - starting point list item . every item edit button next . clicking open \u201c editor \u201d , one change field either confirm cancel . ( confirming would send api call save data , part relevant problem . ) \u201c parent \u201d component would render list edit button , ` itemunderedit ` property would null start . clicking \u201c edit \u201d specific item would set ` itemunderedit ` clicked item . ! full example 3 solution codesandbox : # # # solution 1 make \u201c editor \u201d component stateless controlled - take change handler every field prop parent tracking every change . solution appeal , since like pure stateful component one-to-one mapping prop html - simple reason etc etc . kind go commonly heard \u201c keep state close used \u201d advice , also seems reasonable , since \u2019 really need know parent user typing , interested know done end . stateless solution also introduces lot prop , since need one event handler per field ( onnamechanged , ondescriptionchanged example , could well 10 field ) , lot prop . # # # solution 2 make \u201c editor \u201d component stateful get event editing done : ` onconfirm ( itemtosave ) ` ` oncancel ( ) ` . seems like \u201c react \u201d way line advice keeping state close used . since interested know user click ` confirm ` , stateful \u201c blackbox \u201d -component track state seems reasonable . order achieve , however , need copy prop state , , according @ gaearon , bad idea : moreover , solution buggy start , since clicking edit different item \u2019 \u201c re-sync \u201d prop state - work close editor reopen : ! brings u solution 3 . # # # solution 3 one one biggest pain-points stateful component react ( prefer stateless component state container , widely demonized nowadays , yet trying understand idiomatic react way ) . \u201c old \u201d way sync ` componentwillreceiveprops ` later ` getderivedstatefromprops ` . ` useeffect ` , specify ` props.item ` \u201c dependency \u201d , since want run item change . seems work expected , get linter warning : ` react hook useeffect missing dependency : 'description ' 'name ' . either include remove dependency array react-hooks/exhaustive-deps ` . obviously add dependency list , \u2019 able change anything input , come get warning ? # # # summary question two part : first one idiomatic solution react , well feedback react team : scenario simple common , * \u2019 difficult know implement correctly safely consistent way * . lifting state making problematic component stateless good advice solves problem , every time seems like \u201c temporary \u201d solution . also lead painful refactoring every time something moved around component tree , relying long run extremely brittle . second part question whether solution ` useeffect ` viable , case - get linter warning ? clearly want run * * * * certain prop change . edge-case would result unexpected bug ?",
        "title_stopwords_removal_lemmatization": "useeffect synchronizing state prop"
    },
    {
        "issue_id": 437905241,
        "title": "License for Source Code Examples & Tutorials on https://reactjs.org",
        "label": [
            "Type: Question"
        ],
        "date": "2019-04-27T04:30:20Z",
        "status": "closed",
        "description": "\r\nWhat is the license for the tutorials and examples on https://reactjs.org?",
        "remove_template_description": "What is the license for the tutorials and examples on https://reactjs.org?",
        "human_words": "What is the license for the tutorials and examples on https://reactjs.org?",
        "human_words_regrex": "What is the license for the tutorials and examples on ",
        "human_words_stopwords_removal_lemmatization": "license tutorial example",
        "title_stopwords_removal_lemmatization": "license source code example & tutorial http : //reactjs.org"
    },
    {
        "issue_id": 437575033,
        "title": "`static getDerivedStateFromProps()` does not works same as componentWillReceiveProps  ",
        "label": [
            "Type: Question"
        ],
        "date": "2019-04-26T09:10:44Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n   bug\r\n**What is the current behavior?**\r\n `static getDerivedStateFromProps()` is not a replacement for `componentWillReceiveProps`\r\n\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n**What is the expected behavior?**\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16\r\n\r\n\r\nHi I'm trying to implement `toasterNotificationcards` which will be displayed when a user save an item, stating `item saved successfully`\r\n\r\nbelow is my code I'm using `componentWillReceiveProps` which is depreciated I tried `static getDerivedStateFromProps()` but it didn't work \r\n\r\nhow can I removed `componentWillReceiveProps` , assuming the close button shouldn't be in parent component(whichever is calling `notificationcomponent`)\r\n\r\n[jsfiddle working example ](https://jsfiddle.net/munsp36f/)\r\nrequirement:\r\n\r\n  On click of the button show `Notificationcard`\r\n  On click on close hide `Notificationcard`\r\n\r\n```jsx\r\nclass Notification extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      open: true\r\n    };\r\n  }\r\n\r\n  componentWillReceiveProps(props) {\r\n    this.setState({ open: props.show });\r\n    // setTimeout(this.handleClick.bind(this), 8000);\r\n  }\r\n\r\n  handleClick() {\r\n    this.setState({ open: false });\r\n  }\r\n\r\n  componentDidMount() {\r\n    //setTimeout(this.handleClick.bind(this), 8000);\r\n  }\r\n\r\n  render() {\r\n    if (!this.state.open) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <br />\r\n        <div>Item saved successfully</div>\r\n        <div className=\"cls--btn\" onClick={() => this.handleClick()}>\r\n          &#10006;\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Test extends React.Component {\r\n  handleClick() {\r\n    this.setState({ show: true });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <button onClick={this.handleClick.bind(this)}>click</button>\r\n        <Notification show={true} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nReactDOM.render(<Test name=\"World\" />, document.getElementById(\"container\"));\r\n```",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**     bug  **What is the current behavior?**   `static getDerivedStateFromProps()` is not a replacement for `componentWillReceiveProps`      **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**    **What is the expected behavior?**    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    16      Hi I'm trying to implement `toasterNotificationcards` which will be displayed when a user save an item, stating `item saved successfully`    below is my code I'm using `componentWillReceiveProps` which is depreciated I tried `static getDerivedStateFromProps()` but it didn't work     how can I removed `componentWillReceiveProps` , assuming the close button shouldn't be in parent component(whichever is calling `notificationcomponent`)    [jsfiddle working example ](https://jsfiddle.net/munsp36f/)  requirement:      On click of the button show `Notificationcard`    On click on close hide `Notificationcard`    ```jsx  class Notification extends React.Component {    constructor(props) {      super(props);      this.state = {        open: true      };    }      componentWillReceiveProps(props) {      this.setState({ open: props.show });      // setTimeout(this.handleClick.bind(this), 8000);    }      handleClick() {      this.setState({ open: false });    }      componentDidMount() {      //setTimeout(this.handleClick.bind(this), 8000);    }      render() {      if (!this.state.open) {        return null;      }        return (        <div>          <br />          <div>Item saved successfully</div>          <div className=\"cls--btn\" onClick={() => this.handleClick()}>            &#10006;          </div>        </div>      );    }  }    class Test extends React.Component {    handleClick() {      this.setState({ show: true });    }      render() {      return (        <div>          <button onClick={this.handleClick.bind(this)}>click</button>          <Notification show={true} />        </div>      );    }  }    ReactDOM.render(<Test name=\"World\" />, document.getElementById(\"container\"));  ```",
        "human_words": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**     bug  **What is the current behavior?**   `static getDerivedStateFromProps()` is not a replacement for `componentWillReceiveProps`      **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**    **What is the expected behavior?**    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    16      Hi I'm trying to implement `toasterNotificationcards` which will be displayed when a user save an item, stating `item saved successfully`    below is my code I'm using `componentWillReceiveProps` which is depreciated I tried `static getDerivedStateFromProps()` but it didn't work     how can I removed `componentWillReceiveProps` , assuming the close button shouldn't be in parent component(whichever is calling `notificationcomponent`)    [jsfiddle working example ](https://jsfiddle.net/munsp36f/)  requirement:      On click of the button show `Notificationcard`    On click on close hide `Notificationcard`    ",
        "human_words_regrex": " **Do you want to request a *feature* or report a *bug*?** bug **What is the current behavior?** `static getDerivedStateFromProps()` is not a replacement for `componentWillReceiveProps` **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle ( or CodeSandbox ( example below:** **What is the expected behavior?** **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** 16 Hi I'm trying to implement `toasterNotificationcards` which will be displayed when a user save an item, stating `item saved successfully` below is my code I'm using `componentWillReceiveProps` which is depreciated I tried `static getDerivedStateFromProps()` but it didn't work how can I removed `componentWillReceiveProps` , assuming the close button shouldn't be in parent component(whichever is calling `notificationcomponent`)  requirement: On click of the button show `Notificationcard` On click on close hide `Notificationcard` ",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * bug * * current behavior ? * * ` static getderivedstatefromprops ( ) ` replacement ` componentwillreceiveprops ` * * current behavior bug , please provide step reproduce possible minimal demo problem . bug get fixed much faster run code n't dependency react . paste link jsfiddle ( codesandbox ( example : * * * * expected behavior ? * * * * version react , browser / o affected issue ? work previous version react ? * * 16 hi 'm trying implement ` toasternotificationcards ` displayed user save item , stating ` item saved successfully ` code 'm using ` componentwillreceiveprops ` depreciated tried ` static getderivedstatefromprops ( ) ` n't work removed ` componentwillreceiveprops ` , assuming close button n't parent component ( whichever calling ` notificationcomponent ` ) requirement : click button show ` notificationcard ` click close hide ` notificationcard `",
        "title_stopwords_removal_lemmatization": "` static getderivedstatefromprops ( ) ` work componentwillreceiveprops"
    },
    {
        "issue_id": 437212173,
        "title": "[eslint-plugin-react-hooks]: bug React Hook \"XXX\" is called in function \"children\"",
        "label": [
            "Type: Question"
        ],
        "date": "2019-04-25T13:52:38Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**bug**\r\n\r\n**What is the current behavior?**\r\n\r\nThe hooks created in children function provided in defaultProps populates error `react-hooks/rules-of-hooks`.\r\n\r\n```js\r\nconst App = props => props.children(props);\r\n\r\nApp.defaultProps = {\r\n  children: props => {\r\n    const [count, setCount] = useState(0);\r\n\r\n    return (\r\n      <>\r\n        count: {count}\r\n        <button onClick={() => setCount(count + 1)}>Increment</button>\r\n      </>\r\n    );\r\n  },\r\n};\r\n```\r\n\r\n`React Hook \"useState\" is called in function \"children\" which is neither a React function component or a custom React Hook function  react-hooks/rules-of-hooks\r\n`\r\n\r\nhttps://codesandbox.io/s/v60mm6yvx0\r\n\r\n**What is the expected behavior?**\r\n\r\nHooks inside children function in defaultProps should not create an error when hook is used. \r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nSame as in the codesandbox.\r\n```\r\n\"dependencies\": {\r\n  \"react\": \"16.8.6\",\r\n  \"react-dom\": \"16.8.6\",\r\n  \"react-scripts\": \"3.0.0\"\r\n},\r\n```",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **bug**    **What is the current behavior?**    The hooks created in children function provided in defaultProps populates error `react-hooks/rules-of-hooks`.    ```js  const App = props => props.children(props);    App.defaultProps = {    children: props => {      const [count, setCount] = useState(0);        return (        <>          count: {count}          <button onClick={() => setCount(count + 1)}>Increment</button>        </>      );    },  };  ```    `React Hook \"useState\" is called in function \"children\" which is neither a React function component or a custom React Hook function  react-hooks/rules-of-hooks  `    https://codesandbox.io/s/v60mm6yvx0    **What is the expected behavior?**    Hooks inside children function in defaultProps should not create an error when hook is used.     **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    Same as in the codesandbox.  ```  \"dependencies\": {    \"react\": \"16.8.6\",    \"react-dom\": \"16.8.6\",    \"react-scripts\": \"3.0.0\"  },  ```",
        "human_words": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **bug**    **What is the current behavior?**    The hooks created in children function provided in defaultProps populates error `react-hooks/rules-of-hooks`.        `React Hook \"useState\" is called in function \"children\" which is neither a React function component or a custom React Hook function  react-hooks/rules-of-hooks  `    https://codesandbox.io/s/v60mm6yvx0    **What is the expected behavior?**    Hooks inside children function in defaultProps should not create an error when hook is used.     **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    Same as in the codesandbox.  ",
        "human_words_regrex": " **bug** **What is the current behavior?** The hooks created in children function provided in defaultProps populates error `react-hooks/rules-of-hooks`. `React Hook \"useState\" is called in function \"children\" which is neither a React function component or a custom React Hook function react-hooks/rules-of-hooks `  **What is the expected behavior?** Hooks inside children function in defaultProps should not create an error when hook is used. **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** Same as in the codesandbox. ",
        "human_words_stopwords_removal_lemmatization": "* * bug * * * * current behavior ? * * hook created child function provided defaultprops populates error ` react-hooks/rules-of-hooks ` . ` react hook `` usestate '' called function `` child '' neither react function component custom react hook function react-hooks/rules-of-hooks ` * * expected behavior ? * * hook inside child function defaultprops create error hook used . * * version react , browser / o affected issue ? work previous version react ? * * codesandbox .",
        "title_stopwords_removal_lemmatization": "[ eslint-plugin-react-hooks ] : bug react hook `` xxx '' called function `` child ''"
    },
    {
        "issue_id": 437016972,
        "title": "Declarative vs. imperative coding style using Hooks",
        "label": [
            "Type: Question"
        ],
        "date": "2019-04-25T05:38:14Z",
        "status": "closed",
        "description": "_If this should be asked on Stack Overflow instead, please let me know and feel free to close the issue._\r\n\r\nConsider a component that fetches some data in a custom hook, saves the fetched data in a state hook, and notifies the user that data has been fetched using a prop callback.\r\n\r\nNotifying the user can be done imperatively:\r\n\r\n```js\r\nfunction Component(props) {\r\n  const [ data, setData ] = useState(null);\r\n\r\n  useApi(\"/api/data\")\r\n    .then(setData)\r\n    .then(props.onFetched);\r\n\r\n  return dataToElements(data);\r\n}\r\n```\r\n\r\nor declaratively using an effect hook:\r\n\r\n```js\r\nfunction Component(props) {\r\n  const [ data, setData ] = useState(null);\r\n\r\n  useApi(\"/api/data\")\r\n    .then(setData);\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      props.onFetched();\r\n    }\r\n  }, [ data ]);\r\n\r\n  return dataToElements(data);\r\n}\r\n```\r\n\r\nReact seems to promote a declarative approach. But what I've found is that when components grow large and complex, using declarative effect hooks makes the flow of data and actions quite hard to follow. If you're not careful, a lot of things start to depend on a lot of other things, and the predicted results become non-intuitive and hard to wrap your head around.\r\n\r\nI would like to know other peoples' opinions on this matter, and whether or not an imperative approach might sometimes be better. ",
        "remove_template_description": "_If this should be asked on Stack Overflow instead, please let me know and feel free to close the issue._    Consider a component that fetches some data in a custom hook, saves the fetched data in a state hook, and notifies the user that data has been fetched using a prop callback.    Notifying the user can be done imperatively:    ```js  function Component(props) {    const [ data, setData ] = useState(null);      useApi(\"/api/data\")      .then(setData)      .then(props.onFetched);      return dataToElements(data);  }  ```    or declaratively using an effect hook:    ```js  function Component(props) {    const [ data, setData ] = useState(null);      useApi(\"/api/data\")      .then(setData);      useEffect(() => {      if (data) {        props.onFetched();      }    }, [ data ]);      return dataToElements(data);  }  ```    React seems to promote a declarative approach. But what I've found is that when components grow large and complex, using declarative effect hooks makes the flow of data and actions quite hard to follow. If you're not careful, a lot of things start to depend on a lot of other things, and the predicted results become non-intuitive and hard to wrap your head around.    I would like to know other peoples' opinions on this matter, and whether or not an imperative approach might sometimes be better.",
        "human_words": "_If this should be asked on Stack Overflow instead, please let me know and feel free to close the issue._    Consider a component that fetches some data in a custom hook, saves the fetched data in a state hook, and notifies the user that data has been fetched using a prop callback.    Notifying the user can be done imperatively:        or declaratively using an effect hook:        React seems to promote a declarative approach. But what I've found is that when components grow large and complex, using declarative effect hooks makes the flow of data and actions quite hard to follow. If you're not careful, a lot of things start to depend on a lot of other things, and the predicted results become non-intuitive and hard to wrap your head around.    I would like to know other peoples' opinions on this matter, and whether or not an imperative approach might sometimes be better.",
        "human_words_regrex": "_If this should be asked on Stack Overflow instead, please let me know and feel free to close the issue._ Consider a component that fetches some data in a custom hook, saves the fetched data in a state hook, and notifies the user that data has been fetched using a prop callback. Notifying the user can be done imperatively: or declaratively using an effect hook: React seems to promote a declarative approach. But what I've found is that when components grow large and complex, using declarative effect hooks makes the flow of data and actions quite hard to follow. If you're not careful, a lot of things start to depend on a lot of other things, and the predicted results become non-intuitive and hard to wrap your head around. I would like to know other peoples' opinions on this matter, and whether or not an imperative approach might sometimes be better.",
        "human_words_stopwords_removal_lemmatization": "_if asked stack overflow instead , please let know feel free close issue._ consider component fetch data custom hook , save fetched data state hook , notifies user data fetched using prop callback . notifying user done imperatively : declaratively using effect hook : react seems promote declarative approach . 've found component grow large complex , using declarative effect hook make flow data action quite hard follow . 're careful , lot thing start depend lot thing , predicted result become non-intuitive hard wrap head around . would like know people ' opinion matter , whether imperative approach might sometimes better .",
        "title_stopwords_removal_lemmatization": "declarative vs. imperative coding style using hook"
    },
    {
        "issue_id": 433114466,
        "title": "How to test multiple state changes with act?",
        "label": [
            "Type: Question",
            "Component: Test Utils"
        ],
        "date": "2019-04-15T06:29:03Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nWith the new `act` function, I'm unsure how to test state transitions that occur _during_ an event handler processing. For example if I have this handler that is called on form submission:\r\n\r\n```\r\nconst [isSubmitting, setIsSubmitting] = useState(false);\r\nconst handleSubmit = async () => {\r\n  setIsSubmitting(true);\r\n  await fetcher();\r\n  setIsSubmitting(false);\r\n};\r\n\r\n```\r\nthen I want to be able to test that `isSubmitting` state is indeed set to true before `fetcher` is called.\r\n\r\nDue to the nature of `act` (I believe it defers all state changes until after its provided function has been run) I'm not sure that this is currently possible?\r\n\r\nPreviously I've been testing using `await new Promise(setTimeout)` to flush the current runtime task queue, which works fine for this use case.\r\n\r\nI _have_ found a way to make this work without triggering the `act` warning, but it feels like a hack. I have to wrap `act` around my expectation, not the submit.\r\n\r\n```\r\nit('displays indicator when form is submitting', async () => {\r\n  ReactTestUtils.Simulate.submit(form());\r\n  await act(async () => {\r\n    expect(container.querySelector('.submittingIndicator')).not.toBeNull();\r\n  });\r\n});\r\n```\r\n\r\nI've provided this test in a repo together with a couple of other tests which complete the feature - see the link below.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://github.com/dirv/react-act-toggle-state\r\n\r\n**What is the expected behavior?**\r\nThere's a way for me to test this which doesn't feel like a hack.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n16.9.0-alpha.0",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**  Bug    **What is the current behavior?**  With the new `act` function, I'm unsure how to test state transitions that occur _during_ an event handler processing. For example if I have this handler that is called on form submission:    ```  const [isSubmitting, setIsSubmitting] = useState(false);  const handleSubmit = async () => {    setIsSubmitting(true);    await fetcher();    setIsSubmitting(false);  };    ```  then I want to be able to test that `isSubmitting` state is indeed set to true before `fetcher` is called.    Due to the nature of `act` (I believe it defers all state changes until after its provided function has been run) I'm not sure that this is currently possible?    Previously I've been testing using `await new Promise(setTimeout)` to flush the current runtime task queue, which works fine for this use case.    I _have_ found a way to make this work without triggering the `act` warning, but it feels like a hack. I have to wrap `act` around my expectation, not the submit.    ```  it('displays indicator when form is submitting', async () => {    ReactTestUtils.Simulate.submit(form());    await act(async () => {      expect(container.querySelector('.submittingIndicator')).not.toBeNull();    });  });  ```    I've provided this test in a repo together with a couple of other tests which complete the feature - see the link below.    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**    https://github.com/dirv/react-act-toggle-state    **What is the expected behavior?**  There's a way for me to test this which doesn't feel like a hack.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  16.9.0-alpha.0",
        "codes_and_errors": [
            "  const [isSubmitting, setIsSubmitting] = useState(false);  const handleSubmit = async () => {    setIsSubmitting(true);    await fetcher();    setIsSubmitting(false);  };    ",
            "  it('displays indicator when form is submitting', async () => {    ReactTestUtils.Simulate.submit(form());    await act(async () => {      expect(container.querySelector('.submittingIndicator')).not.toBeNull();    });  });  "
        ],
        "human_words": "**Do you want to request a *feature* or report a *bug*?**  Bug    **What is the current behavior?**  With the new `act` function, I'm unsure how to test state transitions that occur _during_ an event handler processing. For example if I have this handler that is called on form submission:      then I want to be able to test that `isSubmitting` state is indeed set to true before `fetcher` is called.    Due to the nature of `act` (I believe it defers all state changes until after its provided function has been run) I'm not sure that this is currently possible?    Previously I've been testing using `await new Promise(setTimeout)` to flush the current runtime task queue, which works fine for this use case.    I _have_ found a way to make this work without triggering the `act` warning, but it feels like a hack. I have to wrap `act` around my expectation, not the submit.        I've provided this test in a repo together with a couple of other tests which complete the feature - see the link below.    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**    https://github.com/dirv/react-act-toggle-state    **What is the expected behavior?**  There's a way for me to test this which doesn't feel like a hack.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  16.9.0-alpha.0",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** Bug **What is the current behavior?** With the new `act` function, I'm unsure how to test state transitions that occur _during_ an event handler processing. For example if I have this handler that is called on form submission: then I want to be able to test that `isSubmitting` state is indeed set to true before `fetcher` is called. Due to the nature of `act` (I believe it defers all state changes until after its provided function has been run) I'm not sure that this is currently possible? Previously I've been testing using `await new Promise(setTimeout)` to flush the current runtime task queue, which works fine for this use case. I _have_ found a way to make this work without triggering the `act` warning, but it feels like a hack. I have to wrap `act` around my expectation, not the submit. I've provided this test in a repo together with a couple of other tests which complete the feature - see the link below. **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle ( or CodeSandbox ( example below:**  **What is the expected behavior?** There's a way for me to test this which doesn't feel like a hack. **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** 16.9.0-alpha.0"
    },
    {
        "issue_id": 432723008,
        "title": "Using app shell architecture throws Warning: Expected server HTML to contain a matching <div> in <div>.",
        "label": [
            "Type: Question",
            "Component: Server Rendering",
            "Resolution: Stale"
        ],
        "date": "2019-04-12T20:01:40Z",
        "status": "closed",
        "description": "I am currently using workbox along with webpack. The app shell url is /app-shell. I tried following 2 approaches:\r\n\r\n1. In server.js, I created a dedicated route to handle /app-shell URL.\u2028\u2028\r\n\r\n   ```javascript\r\n   server.get('/app-shell', (request, response) => {\r\n  \tresponse.set('content-type', 'text/html');\r\n\tresponse.write(`<!DOCTYPE html>\r\n\t     \u2026\u2028\r\n            <body>\r\n               <div id=\"root\"></div>\r\n               <script src=\"js/client.js\"></script>\r\n               <script src=\"js/vendor.js\"></script>\r\n              <script>\r\n                 if ('serviceWorker' in navigator) {\r\n                    window.addEventListener('load', () => {\r\n                   navigator.serviceWorker\r\n                  .register('/service-worker.js', { scope: '/' })\r\n                  .then((registration) => {\r\n                      console.log('ServiceWorker registration successful with scope: ', registration.scope);\r\n                })\r\n                .catch((registrationError) => {\r\n                    console.log('SW registration failed: ', registrationError);   \r\n                });\r\n            });\r\n          }\r\n         </script>\r\n      </body>\t\t\r\n       `);\r\n   });\u2028\u2028\r\n   ```\r\n2. Second approach, I created a route /app-shell which corresponds to an element with content \u201cLoading\u2026\u201d.\u2028\u2028\r\n\r\n  ```javascript\r\n   const AppShellComponent: React.FC<{}> = (): JSX.Element => (\r\n  \t<main>\r\n   \t     Loading...\r\n        </main>\r\n  );\r\n  ```\r\n\r\n\u2028\u2028In both cases, I get the above mismatch warning. If I make AppShellComponent exactly same as HomeComponent i.e. path /, then the error goes away if the app is invoked from the home page path i.e. / . However, if any other route is invoked, the warning comes back again. Please suggest a better approach. Thanks.\r\n",
        "remove_template_description": "I am currently using workbox along with webpack. The app shell url is /app-shell. I tried following 2 approaches:    1. In server.js, I created a dedicated route to handle /app-shell URL.\u2028\u2028       ```javascript     server.get('/app-shell', (request, response) => {    \tresponse.set('content-type', 'text/html');  \tresponse.write(`<!DOCTYPE html>  \t     \u2026\u2028              <body>                 <div id=\"root\"></div>                 <script src=\"js/client.js\"></script>                 <script src=\"js/vendor.js\"></script>                <script>                   if ('serviceWorker' in navigator) {                      window.addEventListener('load', () => {                     navigator.serviceWorker                    .register('/service-worker.js', { scope: '/' })                    .then((registration) => {                        console.log('ServiceWorker registration successful with scope: ', registration.scope);                  })                  .catch((registrationError) => {                      console.log('SW registration failed: ', registrationError);                     });              });            }           </script>        </body>\t\t         `);     });\u2028\u2028     ```  2. Second approach, I created a route /app-shell which corresponds to an element with content \u201cLoading\u2026\u201d.\u2028\u2028      ```javascript     const AppShellComponent: React.FC<{}> = (): JSX.Element => (    \t<main>     \t     Loading...          </main>    );    ```    \u2028\u2028In both cases, I get the above mismatch warning. If I make AppShellComponent exactly same as HomeComponent i.e. path /, then the error goes away if the app is invoked from the home page path i.e. / . However, if any other route is invoked, the warning comes back again. Please suggest a better approach. Thanks.",
        "human_words": "I am currently using workbox along with webpack. The app shell url is /app-shell. I tried following 2 approaches:    1. In server.js, I created a dedicated route to handle /app-shell URL.\u2028\u2028         2. Second approach, I created a route /app-shell which corresponds to an element with content \u201cLoading\u2026\u201d.\u2028\u2028          \u2028\u2028In both cases, I get the above mismatch warning. If I make AppShellComponent exactly same as HomeComponent i.e. path /, then the error goes away if the app is invoked from the home page path i.e. / . However, if any other route is invoked, the warning comes back again. Please suggest a better approach. Thanks.",
        "human_words_regrex": "I am currently using workbox along with webpack. The app shell url is /app-shell. I tried following 2 approaches: 1. In server.js, I created a dedicated route to handle /app-shell URL. 2. Second approach, I created a route /app-shell which corresponds to an element with content \u201cLoading\u2026\u201d. In both cases, I get the above mismatch warning. If I make AppShellComponent exactly same as HomeComponent i.e. path /, then the error goes away if the app is invoked from the home page path i.e. / . However, if any other route is invoked, the warning comes back again. Please suggest a better approach. Thanks.",
        "human_words_stopwords_removal_lemmatization": "currently using workbox along webpack . app shell url /app-shell . tried following 2 approach : 1. server.js , created dedicated route handle /app-shell url . 2. second approach , created route /app-shell corresponds element content \u201c loading\u2026 \u201d . case , get mismatch warning . make appshellcomponent exactly homecomponent i.e . path / , error go away app invoked home page path i.e . / . however , route invoked , warning come back . please suggest better approach . thanks .",
        "title_stopwords_removal_lemmatization": "using app shell architecture throw warning : expected server html contain matching < div > < div > ."
    },
    {
        "issue_id": 432364885,
        "title": "[Question] about \"._owner.alternate\"",
        "label": [
            "Type: Question"
        ],
        "date": "2019-04-12T02:57:14Z",
        "status": "closed",
        "description": "It seems that in react@16 every React element children contains cyclic property `._owner.alternate.alternate.alternate.alternate`....\r\n\r\n![image](https://user-images.githubusercontent.com/19988985/56009001-c2c41100-5d10-11e9-839f-b4a4a608cf86.png)\r\n\r\nSo it is easy to cause \"Maximum call stack exceeded\" error when developer compares `props.children` in deep way(like [deep-equal](https://www.npmjs.com/package/deep-equal)).\r\n\r\nThis caused bugs for community libraries like [react-helmet](https://github.com/nfl/react-helmet): \r\nhttps://github.com/nfl/react-helmet/issues/441\r\n\r\nI am extremely curious about:\r\nWhy React has `_owner.alternate`, and what it stands for?\r\nAs it is named as \u201c_owner\u201d, could it be better if we make \u201cowner\u201d not enumerable?\r\n\r\nI tried to search source code and but still can\u2019t find any clue.\r\n\r\nThanks in advance.",
        "remove_template_description": "It seems that in react@16 every React element children contains cyclic property `._owner.alternate.alternate.alternate.alternate`....    ![image](https://user-images.githubusercontent.com/19988985/56009001-c2c41100-5d10-11e9-839f-b4a4a608cf86.png)    So it is easy to cause \"Maximum call stack exceeded\" error when developer compares `props.children` in deep way(like [deep-equal](https://www.npmjs.com/package/deep-equal)).    This caused bugs for community libraries like [react-helmet](https://github.com/nfl/react-helmet):   https://github.com/nfl/react-helmet/issues/441    I am extremely curious about:  Why React has `_owner.alternate`, and what it stands for?  As it is named as \u201c_owner\u201d, could it be better if we make \u201cowner\u201d not enumerable?    I tried to search source code and but still can\u2019t find any clue.    Thanks in advance.",
        "human_words": "It seems that in react@16 every React element children contains cyclic property `._owner.alternate.alternate.alternate.alternate`....    ![image](https://user-images.githubusercontent.com/19988985/56009001-c2c41100-5d10-11e9-839f-b4a4a608cf86.png)    So it is easy to cause \"Maximum call stack exceeded\" error when developer compares `props.children` in deep way(like [deep-equal](https://www.npmjs.com/package/deep-equal)).    This caused bugs for community libraries like [react-helmet](https://github.com/nfl/react-helmet):   https://github.com/nfl/react-helmet/issues/441    I am extremely curious about:  Why React has `_owner.alternate`, and what it stands for?  As it is named as \u201c_owner\u201d, could it be better if we make \u201cowner\u201d not enumerable?    I tried to search source code and but still can\u2019t find any clue.    Thanks in advance.",
        "human_words_regrex": "It seems that in react@16 every React element children contains cyclic property `._owner.alternate.alternate.alternate.alternate`.... ! So it is easy to cause \"Maximum call stack exceeded\" error when developer compares `props.children` in deep way(like ). This caused bugs for community libraries like :  I am extremely curious about: Why React has `_owner.alternate`, and what it stands for? As it is named as \u201c_owner\u201d, could it be better if we make \u201cowner\u201d not enumerable? I tried to search source code and but still can\u2019t find any clue. Thanks in advance.",
        "human_words_stopwords_removal_lemmatization": "seems react @ 16 every react element child contains cyclic property ` ._owner.alternate.alternate.alternate.alternate ` .... ! easy cause `` maximum call stack exceeded '' error developer compare ` props.children ` deep way ( like ) . caused bug community library like : extremely curious : react ` _owner.alternate ` , stand ? named \u201c _owner \u201d , could better make \u201c owner \u201d enumerable ? tried search source code still \u2019 find clue . thanks advance .",
        "title_stopwords_removal_lemmatization": "[ question ] `` ._owner.alternate ''"
    },
    {
        "issue_id": 431476560,
        "title": "TestUtils.renderIntoDocument returns `null` when valid functional component passed.",
        "label": [
            "Type: Question",
            "Component: Test Utils"
        ],
        "date": "2019-04-10T12:31:13Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\nI want to report a bug.\r\n\r\n**What is the current behavior?**\r\nCurrently when valid functional component is passed to **TestUtils.renderIntoDocument** it returns a **null** and raise no error.\r\n\r\n**Demo**\r\nThis behavior was reproduced in a sandbox: https://codesandbox.io/s/1zpvll4j24\r\n\r\nCheck the console, to see **TestUtils.renderIntoDocument** output of prepared sample components.\r\n\r\n**Workarounds**\r\nWorkaround that satisfies both SFC and FC is wrapping component into container:\r\n```\r\nconst FCCounter = () => {\r\n  const [count, setCount] = useState(0);\r\n\r\n  return (\r\n    <div>\r\n      <div>{count}</div>\r\n      <button onClick={() => setCount(count + 1)}>+1</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nTestUtils.renderIntoDocument(\r\n  <div>\r\n    <FCCounter />\r\n  </div>\r\n);\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\n- To render a functional component.\r\n- In worst case - providing an error.\r\n\r\n**Which versions of React are affected by this issue?**\r\nReact version: 16.8.6\r\n",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**  I want to report a bug.    **What is the current behavior?**  Currently when valid functional component is passed to **TestUtils.renderIntoDocument** it returns a **null** and raise no error.    **Demo**  This behavior was reproduced in a sandbox: https://codesandbox.io/s/1zpvll4j24    Check the console, to see **TestUtils.renderIntoDocument** output of prepared sample components.    **Workarounds**  Workaround that satisfies both SFC and FC is wrapping component into container:  ```  const FCCounter = () => {    const [count, setCount] = useState(0);      return (      <div>        <div>{count}</div>        <button onClick={() => setCount(count + 1)}>+1</button>      </div>    );  };    TestUtils.renderIntoDocument(    <div>      <FCCounter />    </div>  );  ```    **What is the expected behavior?**    - To render a functional component.  - In worst case - providing an error.    **Which versions of React are affected by this issue?**  React version: 16.8.6",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**  I want to report a bug.    **What is the current behavior?**  Currently when valid functional component is passed to **TestUtils.renderIntoDocument** it returns a **null** and raise no error.    **Demo**  This behavior was reproduced in a sandbox: https://codesandbox.io/s/1zpvll4j24    Check the console, to see **TestUtils.renderIntoDocument** output of prepared sample components.    **Workarounds**  Workaround that satisfies both SFC and FC is wrapping component into container:      **What is the expected behavior?**    - To render a functional component.  - In worst case - providing an error.    **Which versions of React are affected by this issue?**  React version: 16.8.6",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** I want to report a bug. **What is the current behavior?** Currently when valid functional component is passed to **TestUtils.renderIntoDocument** it returns a **null** and raise no error. **Demo** This behavior was reproduced in a sandbox:  Check the console, to see **TestUtils.renderIntoDocument** output of prepared sample components. **Workarounds** Workaround that satisfies both SFC and FC is wrapping component into container: **What is the expected behavior?** - To render a functional component. - In worst case - providing an error. **Which versions of React are affected by this issue?** React version: 16.8.6",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * want report bug . * * current behavior ? * * currently valid functional component passed * * testutils.renderintodocument * * return * * null * * raise error . * * demo * * behavior reproduced sandbox : check console , see * * testutils.renderintodocument * * output prepared sample component . * * workarounds * * workaround satisfies sfc fc wrapping component container : * * expected behavior ? * * - render functional component . - worst case - providing error . * * version react affected issue ? * * react version : 16.8.6",
        "title_stopwords_removal_lemmatization": "testutils.renderintodocument return ` null ` valid functional component passed ."
    },
    {
        "issue_id": 431228583,
        "title": "useState causing children to re-mount?",
        "label": [
            "Type: Question"
        ],
        "date": "2019-04-09T22:45:48Z",
        "status": "closed",
        "description": "*bug*\r\n\r\n**What is the current behavior?**\r\n\r\nI have a hook that is supposed to call a callback after a `setTimeout`. When I render a list of children with this hook, the callback behaves differently when its in a function component with `useState` than it does if its in a class component.\r\n\r\nTo see this in action, checkout the codesandbox below. The demo should show children components being added to the page and then after 2 seconds the child is mounted, it should be removed. Both the examples use the same child components, only difference is the parent component being a class vs functional component.\r\n[CodeSandbox](https://codesandbox.io/s/01yo61v6m0)\r\n\r\n**What is the expected behavior?**\r\n\r\nThe function component should behave like the class component.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact v16.8.6\r\nLatest Chrome\r\n\r\nUnsure if this worked with previous versions of hooks.\r\n",
        "remove_template_description": "*bug*    **What is the current behavior?**    I have a hook that is supposed to call a callback after a `setTimeout`. When I render a list of children with this hook, the callback behaves differently when its in a function component with `useState` than it does if its in a class component.    To see this in action, checkout the codesandbox below. The demo should show children components being added to the page and then after 2 seconds the child is mounted, it should be removed. Both the examples use the same child components, only difference is the parent component being a class vs functional component.  [CodeSandbox](https://codesandbox.io/s/01yo61v6m0)    **What is the expected behavior?**    The function component should behave like the class component.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    React v16.8.6  Latest Chrome    Unsure if this worked with previous versions of hooks.",
        "human_words": "*bug*    **What is the current behavior?**    I have a hook that is supposed to call a callback after a `setTimeout`. When I render a list of children with this hook, the callback behaves differently when its in a function component with `useState` than it does if its in a class component.    To see this in action, checkout the codesandbox below. The demo should show children components being added to the page and then after 2 seconds the child is mounted, it should be removed. Both the examples use the same child components, only difference is the parent component being a class vs functional component.  [CodeSandbox](https://codesandbox.io/s/01yo61v6m0)    **What is the expected behavior?**    The function component should behave like the class component.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    React v16.8.6  Latest Chrome    Unsure if this worked with previous versions of hooks.",
        "human_words_regrex": "*bug* **What is the current behavior?** I have a hook that is supposed to call a callback after a `setTimeout`. When I render a list of children with this hook, the callback behaves differently when its in a function component with `useState` than it does if its in a class component. To see this in action, checkout the codesandbox below. The demo should show children components being added to the page and then after 2 seconds the child is mounted, it should be removed. Both the examples use the same child components, only difference is the parent component being a class vs functional component.  **What is the expected behavior?** The function component should behave like the class component. **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** React v16.8.6 Latest Chrome Unsure if this worked with previous versions of hooks.",
        "human_words_stopwords_removal_lemmatization": "* bug * * * current behavior ? * * hook supposed call callback ` settimeout ` . render list child hook , callback behaves differently function component ` usestate ` class component . see action , checkout codesandbox . demo show child component added page 2 second child mounted , removed . example use child component , difference parent component class v functional component . * * expected behavior ? * * function component behave like class component . * * version react , browser / o affected issue ? work previous version react ? * * react v16.8.6 latest chrome unsure worked previous version hook .",
        "title_stopwords_removal_lemmatization": "usestate causing child re-mount ?"
    },
    {
        "issue_id": 429582415,
        "title": "react hooks: a few inconveniences",
        "label": [
            "Type: Question"
        ],
        "date": "2019-04-05T04:53:16Z",
        "status": "closed",
        "description": "1) When using useEffect, can not get latest state. \r\n\r\nFor example, I add a event listener in componentDidMount.\r\n```\r\nconst App = () => {\r\n    const [state1, setState1] = useState('state1');\r\n    const [state2, setState2] = useState('state2');\r\n    useEffect(() => {\r\n        function handler() {\r\n            // can't get the latest state1 and state2 because of the scope.\r\n        }\r\n        document.addEventListener('click', handler);\r\n        return () => document.removeEventListener('click', handler);\r\n    }, [])\r\n}\r\n```\r\nI have to change code into this:\r\n```\r\nconst App = () => {\r\n    const [state1, setState1] = useState('state1');\r\n    const [state2, setState2] = useState('state2');\r\n    useEffect(() => {\r\n        function handler() {\r\n            // for the reason of scope, can't get the latest state1 and state2.\r\n        }\r\n        document.addEventListener('click', handler);\r\n        return () => document.removeEventListener('click', handler);\r\n    }, [state1, state2])\r\n    ....\r\n}\r\n```\r\nproblem solved, but the effect executes again. (wasteful ???)\r\n\r\n2) functional props cause updating subComponent every time.\r\n\r\n```\r\nconst App = () => {\r\n    const [state, useState] = useState(0)\r\n\r\n    function handleChange() {\r\n      // do something\r\n    }\r\n    return (\r\n        <SubComponent  onChange={handleChange} />\r\n    );\r\n}\r\n```\r\nIn this case, SubComponent will update every time App rerender, because the onChange prop is Changed. If we need to use state or props in handleChange, we have nothing to do with it.(If we useCallback, see No.1, the lastest state issue).\r\n",
        "remove_template_description": "1) When using useEffect, can not get latest state.     For example, I add a event listener in componentDidMount.  ```  const App = () => {      const [state1, setState1] = useState('state1');      const [state2, setState2] = useState('state2');      useEffect(() => {          function handler() {              // can't get the latest state1 and state2 because of the scope.          }          document.addEventListener('click', handler);          return () => document.removeEventListener('click', handler);      }, [])  }  ```  I have to change code into this:  ```  const App = () => {      const [state1, setState1] = useState('state1');      const [state2, setState2] = useState('state2');      useEffect(() => {          function handler() {              // for the reason of scope, can't get the latest state1 and state2.          }          document.addEventListener('click', handler);          return () => document.removeEventListener('click', handler);      }, [state1, state2])      ....  }  ```  problem solved, but the effect executes again. (wasteful ???)    2) functional props cause updating subComponent every time.    ```  const App = () => {      const [state, useState] = useState(0)        function handleChange() {        // do something      }      return (          <SubComponent  onChange={handleChange} />      );  }  ```  In this case, SubComponent will update every time App rerender, because the onChange prop is Changed. If we need to use state or props in handleChange, we have nothing to do with it.(If we useCallback, see No.1, the lastest state issue).",
        "human_words": "1) When using useEffect, can not get latest state.     For example, I add a event listener in componentDidMount.    I have to change code into this:    problem solved, but the effect executes again. (wasteful ???)    2) functional props cause updating subComponent every time.      In this case, SubComponent will update every time App rerender, because the onChange prop is Changed. If we need to use state or props in handleChange, we have nothing to do with it.(If we useCallback, see No.1, the lastest state issue).",
        "human_words_regrex": "1) When using useEffect, can not get latest state. For example, I add a event listener in componentDidMount. I have to change code into this: problem solved, but the effect executes again. (wasteful ???) 2) functional props cause updating subComponent every time. In this case, SubComponent will update every time App rerender, because the onChange prop is Changed. If we need to use state or props in handleChange, we have nothing to do with it.(If we useCallback, see No.1, the lastest state issue).",
        "human_words_stopwords_removal_lemmatization": "1 ) using useeffect , get latest state . example , add event listener componentdidmount . change code : problem solved , effect executes . ( wasteful ? ? ? ) 2 ) functional prop cause updating subcomponent every time . case , subcomponent update every time app rerender , onchange prop changed . need use state prop handlechange , nothing . ( usecallback , see no.1 , lastest state issue ) .",
        "title_stopwords_removal_lemmatization": "react hook : inconvenience"
    },
    {
        "issue_id": 429516566,
        "title": "onAnimationEnd/onTransitionEnd Issues",
        "label": [
            "Type: Question"
        ],
        "date": "2019-04-04T22:54:37Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\n### onAnimationEnd creates unexpected behavior\r\n\r\nIn the following example, I am creating a simple notification component from an array. Each element in the array is used to generate a html element with a class that has a css animation on it. The generated div has an \"onAnimationEnd\" binding which will remove them from the array of notifications. The basic idea is that the notification will fade away (using a CSS animation) and then be removed from the array, or alternatively, I am also allowing the user to manually click on the notification element to remove it.\r\n\r\nThe interesting bug is as follows. If you add two notifications, the first one will trigger its onAnimationEnd and remove itself. The remaining notification will suddenly jump to the end of its css animation and never trigger its own onAnimationEnd. \r\n\r\nEven more curiously if you add four notifications, exactly two of them will have the above bug, while the other two function properly. In fact exactly half of the added elements will trigger onAnimationEnd properly, while the other half will not.\r\n\r\nThe onClick functionality to remove the notifications from the array does NOT cause any unexpected behavior, and thus I am forced to conclude that the fault lies with onAnimationEnd, since they both run the exact same function.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://codepen.io/msorrentino/pen/xeVrwz\r\n\r\nClick the \"add notification\" button. Then press it again before the first element has faded (7 seconds) . You will notice that the second notification element gets \"fast forwarded\" to the end of its animation when the first notification is removed by its onAnimationEnd trigger. The second notification will then be stuck there, never triggering its own onAnimationEnd.\r\n\r\n**What is the expected behavior?**\r\n\r\nonAnimationEnd should trigger for each element in the loop properly.\r\n\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nCurrent version of 16.8.6 displays this behavior.\r\n",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**  Bug    **What is the current behavior?**    ### onAnimationEnd creates unexpected behavior    In the following example, I am creating a simple notification component from an array. Each element in the array is used to generate a html element with a class that has a css animation on it. The generated div has an \"onAnimationEnd\" binding which will remove them from the array of notifications. The basic idea is that the notification will fade away (using a CSS animation) and then be removed from the array, or alternatively, I am also allowing the user to manually click on the notification element to remove it.    The interesting bug is as follows. If you add two notifications, the first one will trigger its onAnimationEnd and remove itself. The remaining notification will suddenly jump to the end of its css animation and never trigger its own onAnimationEnd.     Even more curiously if you add four notifications, exactly two of them will have the above bug, while the other two function properly. In fact exactly half of the added elements will trigger onAnimationEnd properly, while the other half will not.    The onClick functionality to remove the notifications from the array does NOT cause any unexpected behavior, and thus I am forced to conclude that the fault lies with onAnimationEnd, since they both run the exact same function.    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**    https://codepen.io/msorrentino/pen/xeVrwz    Click the \"add notification\" button. Then press it again before the first element has faded (7 seconds) . You will notice that the second notification element gets \"fast forwarded\" to the end of its animation when the first notification is removed by its onAnimationEnd trigger. The second notification will then be stuck there, never triggering its own onAnimationEnd.    **What is the expected behavior?**    onAnimationEnd should trigger for each element in the loop properly.      **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    Current version of 16.8.6 displays this behavior.",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**  Bug    **What is the current behavior?**    ### onAnimationEnd creates unexpected behavior    In the following example, I am creating a simple notification component from an array. Each element in the array is used to generate a html element with a class that has a css animation on it. The generated div has an \"onAnimationEnd\" binding which will remove them from the array of notifications. The basic idea is that the notification will fade away (using a CSS animation) and then be removed from the array, or alternatively, I am also allowing the user to manually click on the notification element to remove it.    The interesting bug is as follows. If you add two notifications, the first one will trigger its onAnimationEnd and remove itself. The remaining notification will suddenly jump to the end of its css animation and never trigger its own onAnimationEnd.     Even more curiously if you add four notifications, exactly two of them will have the above bug, while the other two function properly. In fact exactly half of the added elements will trigger onAnimationEnd properly, while the other half will not.    The onClick functionality to remove the notifications from the array does NOT cause any unexpected behavior, and thus I am forced to conclude that the fault lies with onAnimationEnd, since they both run the exact same function.    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**    https://codepen.io/msorrentino/pen/xeVrwz    Click the \"add notification\" button. Then press it again before the first element has faded (7 seconds) . You will notice that the second notification element gets \"fast forwarded\" to the end of its animation when the first notification is removed by its onAnimationEnd trigger. The second notification will then be stuck there, never triggering its own onAnimationEnd.    **What is the expected behavior?**    onAnimationEnd should trigger for each element in the loop properly.      **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    Current version of 16.8.6 displays this behavior.",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** Bug **What is the current behavior?** ### onAnimationEnd creates unexpected behavior In the following example, I am creating a simple notification component from an array. Each element in the array is used to generate a html element with a class that has a css animation on it. The generated div has an \"onAnimationEnd\" binding which will remove them from the array of notifications. The basic idea is that the notification will fade away (using a CSS animation) and then be removed from the array, or alternatively, I am also allowing the user to manually click on the notification element to remove it. The interesting bug is as follows. If you add two notifications, the first one will trigger its onAnimationEnd and remove itself. The remaining notification will suddenly jump to the end of its css animation and never trigger its own onAnimationEnd. Even more curiously if you add four notifications, exactly two of them will have the above bug, while the other two function properly. In fact exactly half of the added elements will trigger onAnimationEnd properly, while the other half will not. The onClick functionality to remove the notifications from the array does NOT cause any unexpected behavior, and thus I am forced to conclude that the fault lies with onAnimationEnd, since they both run the exact same function. **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle ( or CodeSandbox ( example below:**  Click the \"add notification\" button. Then press it again before the first element has faded (7 seconds) . You will notice that the second notification element gets \"fast forwarded\" to the end of its animation when the first notification is removed by its onAnimationEnd trigger. The second notification will then be stuck there, never triggering its own onAnimationEnd. **What is the expected behavior?** onAnimationEnd should trigger for each element in the loop properly. **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** Current version of 16.8.6 displays this behavior.",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * bug * * current behavior ? * * # # # onanimationend creates unexpected behavior following example , creating simple notification component array . element array used generate html element class cs animation . generated div `` onanimationend '' binding remove array notification . basic idea notification fade away ( using cs animation ) removed array , alternatively , also allowing user manually click notification element remove . interesting bug follows . add two notification , first one trigger onanimationend remove . remaining notification suddenly jump end cs animation never trigger onanimationend . even curiously add four notification , exactly two bug , two function properly . fact exactly half added element trigger onanimationend properly , half . onclick functionality remove notification array cause unexpected behavior , thus forced conclude fault lie onanimationend , since run exact function . * * current behavior bug , please provide step reproduce possible minimal demo problem . bug get fixed much faster run code n't dependency react . paste link jsfiddle ( codesandbox ( example : * * click `` add notification '' button . press first element faded ( 7 second ) . notice second notification element get `` fast forwarded '' end animation first notification removed onanimationend trigger . second notification stuck , never triggering onanimationend . * * expected behavior ? * * onanimationend trigger element loop properly . * * version react , browser / o affected issue ? work previous version react ? * * current version 16.8.6 display behavior .",
        "title_stopwords_removal_lemmatization": "onanimationend/ontransitionend issue"
    },
    {
        "issue_id": 428832289,
        "title": "Hook for forwardRef",
        "label": [
            "Type: Question"
        ],
        "date": "2019-04-03T15:26:05Z",
        "status": "closed",
        "description": "\r\n**Do you want to request a *feature* or report a *bug*?**\r\n  feature\r\n**What is the current behavior?**\r\nToday we use forwardRef as a HOC around functional component, like this:\r\n```js\r\nconst MyComponent = React.forwardRef((props, ref) => {\r\n  return (<div {...props} ref={ref}>Some text</div>);\r\n});\r\n\r\nMyComponent.displayName = 'MyComponent';\r\n```\r\n\r\n**What is the expected behavior?**\r\nIs it possible to use hooks to forward ref? For example, something like this:\r\n```js\r\nconst MyComponent = (props) => {\r\n  // will return ref that was passed from parent component\r\n  const forwardedRef = useForwardredRef(); \r\n  return (<div {...props} ref={forwardedRef}>Some text</div>);\r\n}\r\n```\r\nWith this approach we don't need to manually set displayName all the time, also this would be great for libraries, as you still export same component, not a forwardRef HOC.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact 16.8 and upper",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**    feature  **What is the current behavior?**  Today we use forwardRef as a HOC around functional component, like this:  ```js  const MyComponent = React.forwardRef((props, ref) => {    return (<div {...props} ref={ref}>Some text</div>);  });    MyComponent.displayName = 'MyComponent';  ```    **What is the expected behavior?**  Is it possible to use hooks to forward ref? For example, something like this:  ```js  const MyComponent = (props) => {    // will return ref that was passed from parent component    const forwardedRef = useForwardredRef();     return (<div {...props} ref={forwardedRef}>Some text</div>);  }  ```  With this approach we don't need to manually set displayName all the time, also this would be great for libraries, as you still export same component, not a forwardRef HOC.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  React 16.8 and upper",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**    feature  **What is the current behavior?**  Today we use forwardRef as a HOC around functional component, like this:      **What is the expected behavior?**  Is it possible to use hooks to forward ref? For example, something like this:    With this approach we don't need to manually set displayName all the time, also this would be great for libraries, as you still export same component, not a forwardRef HOC.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  React 16.8 and upper",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** feature **What is the current behavior?** Today we use forwardRef as a HOC around functional component, like this: **What is the expected behavior?** Is it possible to use hooks to forward ref? For example, something like this: With this approach we don't need to manually set displayName all the time, also this would be great for libraries, as you still export same component, not a forwardRef HOC. **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** React 16.8 and upper",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * feature * * current behavior ? * * today use forwardref hoc around functional component , like : * * expected behavior ? * * possible use hook forward ref ? example , something like : approach n't need manually set displayname time , also would great library , still export component , forwardref hoc . * * version react , browser / o affected issue ? work previous version react ? * * react 16.8 upper",
        "title_stopwords_removal_lemmatization": "hook forwardref"
    },
    {
        "issue_id": 428597420,
        "title": "UseEffect how to solve conditional paging list",
        "label": [
            "Type: Question",
            "Resolution: Stale"
        ],
        "date": "2019-04-03T07:01:40Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n bug\r\n**What is the current behavior?**\r\nUseEffect how to solve conditional paging list:\r\n    1. Reset the page number to 1 when the condition changes\r\n![image](https://user-images.githubusercontent.com/26135370/55459099-4c912180-5621-11e9-827c-1760fec8aa6b.png)\r\n    2. Request to return the current page and keep the current state\r\n![image](https://user-images.githubusercontent.com/26135370/55459127-5ca90100-5621-11e9-97a4-ba5ea642900f.png)\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n**What is the expected behavior?**\r\nProperly handle paging and conditions\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n16.8    Previously treated in class form",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**   bug  **What is the current behavior?**  UseEffect how to solve conditional paging list:      1. Reset the page number to 1 when the condition changes  ![image](https://user-images.githubusercontent.com/26135370/55459099-4c912180-5621-11e9-827c-1760fec8aa6b.png)      2. Request to return the current page and keep the current state  ![image](https://user-images.githubusercontent.com/26135370/55459127-5ca90100-5621-11e9-97a4-ba5ea642900f.png)    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**    **What is the expected behavior?**  Properly handle paging and conditions  **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  16.8    Previously treated in class form",
        "human_words": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**   bug  **What is the current behavior?**  UseEffect how to solve conditional paging list:      1. Reset the page number to 1 when the condition changes  ![image](https://user-images.githubusercontent.com/26135370/55459099-4c912180-5621-11e9-827c-1760fec8aa6b.png)      2. Request to return the current page and keep the current state  ![image](https://user-images.githubusercontent.com/26135370/55459127-5ca90100-5621-11e9-97a4-ba5ea642900f.png)    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**    **What is the expected behavior?**  Properly handle paging and conditions  **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  16.8    Previously treated in class form",
        "human_words_regrex": " **Do you want to request a *feature* or report a *bug*?** bug **What is the current behavior?** UseEffect how to solve conditional paging list: 1. Reset the page number to 1 when the condition changes ! 2. Request to return the current page and keep the current state ! **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle ( or CodeSandbox ( example below:** **What is the expected behavior?** Properly handle paging and conditions **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** 16.8 Previously treated in class form",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * bug * * current behavior ? * * useeffect solve conditional paging list : 1. reset page number 1 condition change ! 2. request return current page keep current state ! * * current behavior bug , please provide step reproduce possible minimal demo problem . bug get fixed much faster run code n't dependency react . paste link jsfiddle ( codesandbox ( example : * * * * expected behavior ? * * properly handle paging condition * * version react , browser / o affected issue ? work previous version react ? * * 16.8 previously treated class form",
        "title_stopwords_removal_lemmatization": "useeffect solve conditional paging list"
    },
    {
        "issue_id": 427619801,
        "title": "useEffect firing in children before parent",
        "label": [
            "Type: Question"
        ],
        "date": "2019-04-01T10:09:51Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nFeature (I believe)\r\n**What is the current behavior?**\r\nRight now, the effects in useEffect fire children-first. I know this makes sense, since the behaviour of the first render has a close correlation to cDm. However, I cannot seem to find a way to fire events parent-first. Before, I could do it with cWm, and after that was deprecated, in the constructor. How can I accomplish that with hooks?\r\n**CodeSandbox example:**\r\nhttps://codesandbox.io/s/035lqnozzl?fontsize=14\r\n**What is the use case?**\r\nImagine I want to post to an external server when two components were first rendered, to measure a sort of meaningful paint.\r\n```\r\n- Component A -> post(\"first render\"\", component: A)\r\n----\r\n--------\r\n------------ Component B -> post(\"first render\", component: B)\r\n```\r\nHow could I accomplish this with hooks?",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**  Feature (I believe)  **What is the current behavior?**  Right now, the effects in useEffect fire children-first. I know this makes sense, since the behaviour of the first render has a close correlation to cDm. However, I cannot seem to find a way to fire events parent-first. Before, I could do it with cWm, and after that was deprecated, in the constructor. How can I accomplish that with hooks?  **CodeSandbox example:**  https://codesandbox.io/s/035lqnozzl?fontsize=14  **What is the use case?**  Imagine I want to post to an external server when two components were first rendered, to measure a sort of meaningful paint.  ```  - Component A -> post(\"first render\"\", component: A)  ----  --------  ------------ Component B -> post(\"first render\", component: B)  ```  How could I accomplish this with hooks?",
        "human_words": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**  Feature (I believe)  **What is the current behavior?**  Right now, the effects in useEffect fire children-first. I know this makes sense, since the behaviour of the first render has a close correlation to cDm. However, I cannot seem to find a way to fire events parent-first. Before, I could do it with cWm, and after that was deprecated, in the constructor. How can I accomplish that with hooks?  **CodeSandbox example:**  https://codesandbox.io/s/035lqnozzl?fontsize=14  **What is the use case?**  Imagine I want to post to an external server when two components were first rendered, to measure a sort of meaningful paint.    How could I accomplish this with hooks?",
        "human_words_regrex": " **Do you want to request a *feature* or report a *bug*?** Feature (I believe) **What is the current behavior?** Right now, the effects in useEffect fire children-first. I know this makes sense, since the behaviour of the first render has a close correlation to cDm. However, I cannot seem to find a way to fire events parent-first. Before, I could do it with cWm, and after that was deprecated, in the constructor. How can I accomplish that with hooks? **CodeSandbox example:**  **What is the use case?** Imagine I want to post to an external server when two components were first rendered, to measure a sort of meaningful paint. How could I accomplish this with hooks?",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * feature ( believe ) * * current behavior ? * * right , effect useeffect fire children-first . know make sense , since behaviour first render close correlation cdm . however , seem find way fire event parent-first . , could cwm , deprecated , constructor . accomplish hook ? * * codesandbox example : * * * * use case ? * * imagine want post external server two component first rendered , measure sort meaningful paint . could accomplish hook ?",
        "title_stopwords_removal_lemmatization": "useeffect firing child parent"
    },
    {
        "issue_id": 426933035,
        "title": "Mimic componentDidMount but with hooks",
        "label": [
            "Type: Question"
        ],
        "date": "2019-03-29T11:03:43Z",
        "status": "closed",
        "description": "We are trying to use Hooks and we want to mimic componentDidMount but our eslint is responding with \"React Hook React.useEffect has a missing dependency: '_checkUser'. Either include it or remove the dependency array  react-hooks/exhaustive-deps\"\r\n\r\nIf we add checkUser to the dependency in the useEffect we get: \"The '_checkUser' function makes the dependencies of useEffect Hook change on every render. Move it inside the useEffect callback. Alternatively, wrap the '_checkUser' definition into its own useCallback() Hook  react-hooks/exhaustive-deps\".\r\n\r\nIf we change the _checkUser to use useCallback eslint is responding with: \"React Hook React.useCallback has a missing dependency: '_handleUserState'. Either include it or remove the dependency array  react-hooks/exhaustive-deps\".\r\n\r\nWhat is the correct way to solve this? Or should we ignore the warnings?\r\n\r\n```javascript\r\nfunction _handleUserState(respons) {\r\n      // Some code\r\n}\r\n\r\nfunction _checkUser() {\r\n       const response = someExternalFunction();\r\n       _handleUserState(response);\r\n}\r\n\r\nReact.useEffect(\r\n        () => {\r\n            _checkUser();\r\n        },\r\n        [] // Run once\r\n);\r\n```\r\n",
        "remove_template_description": "We are trying to use Hooks and we want to mimic componentDidMount but our eslint is responding with \"React Hook React.useEffect has a missing dependency: '_checkUser'. Either include it or remove the dependency array  react-hooks/exhaustive-deps\"    If we add checkUser to the dependency in the useEffect we get: \"The '_checkUser' function makes the dependencies of useEffect Hook change on every render. Move it inside the useEffect callback. Alternatively, wrap the '_checkUser' definition into its own useCallback() Hook  react-hooks/exhaustive-deps\".    If we change the _checkUser to use useCallback eslint is responding with: \"React Hook React.useCallback has a missing dependency: '_handleUserState'. Either include it or remove the dependency array  react-hooks/exhaustive-deps\".    What is the correct way to solve this? Or should we ignore the warnings?    ```javascript  function _handleUserState(respons) {        // Some code  }    function _checkUser() {         const response = someExternalFunction();         _handleUserState(response);  }    React.useEffect(          () => {              _checkUser();          },          [] // Run once  );  ```",
        "human_words": "We are trying to use Hooks and we want to mimic componentDidMount but our eslint is responding with \"React Hook React.useEffect has a missing dependency: '_checkUser'. Either include it or remove the dependency array  react-hooks/exhaustive-deps\"    If we add checkUser to the dependency in the useEffect we get: \"The '_checkUser' function makes the dependencies of useEffect Hook change on every render. Move it inside the useEffect callback. Alternatively, wrap the '_checkUser' definition into its own useCallback() Hook  react-hooks/exhaustive-deps\".    If we change the _checkUser to use useCallback eslint is responding with: \"React Hook React.useCallback has a missing dependency: '_handleUserState'. Either include it or remove the dependency array  react-hooks/exhaustive-deps\".    What is the correct way to solve this? Or should we ignore the warnings?    ",
        "human_words_regrex": "We are trying to use Hooks and we want to mimic componentDidMount but our eslint is responding with \"React Hook React.useEffect has a missing dependency: '_checkUser'. Either include it or remove the dependency array react-hooks/exhaustive-deps\" If we add checkUser to the dependency in the useEffect we get: \"The '_checkUser' function makes the dependencies of useEffect Hook change on every render. Move it inside the useEffect callback. Alternatively, wrap the '_checkUser' definition into its own useCallback() Hook react-hooks/exhaustive-deps\". If we change the _checkUser to use useCallback eslint is responding with: \"React Hook React.useCallback has a missing dependency: '_handleUserState'. Either include it or remove the dependency array react-hooks/exhaustive-deps\". What is the correct way to solve this? Or should we ignore the warnings? ",
        "human_words_stopwords_removal_lemmatization": "trying use hook want mimic componentdidmount eslint responding `` react hook react.useeffect missing dependency : '_checkuser ' . either include remove dependency array react-hooks/exhaustive-deps '' add checkuser dependency useeffect get : `` '_checkuser ' function make dependency useeffect hook change every render . move inside useeffect callback . alternatively , wrap '_checkuser ' definition usecallback ( ) hook react-hooks/exhaustive-deps '' . change _checkuser use usecallback eslint responding : `` react hook react.usecallback missing dependency : '_handleuserstate ' . either include remove dependency array react-hooks/exhaustive-deps '' . correct way solve ? ignore warning ?",
        "title_stopwords_removal_lemmatization": "mimic componentdidmount hook"
    },
    {
        "issue_id": 423136431,
        "title": "is passing a ref to useMemo considered cheating?",
        "label": [
            "Type: Question",
            "Resolution: Stale"
        ],
        "date": "2019-03-20T09:00:18Z",
        "status": "closed",
        "description": "I have an object which is created via useMemo\r\n\r\nI do not want this object to be recreated every time a certain dependency changes, and yet I want it to always see the latest version of that dependency (not just what it was upon initial creation)\r\n\r\nCurrently, I'm doing something like this:\r\n\r\n```\r\n//bar changes between renders\r\nconst latestFoo = useRef(bar); \r\n\r\n//obj will only be created once, yet it sees the updated latestFoo\r\nconst obj = useMemo(() => ({\r\n doSomething: () => { \r\n    //use and/or set latestFoo.current \r\n  }\r\n}), [latestFoo]);\r\n```\r\n\r\nThis feels like a little bit of a lie... because it kindof depends on an updated `latestFoo.current`... not really `latestFoo` the ref, if that makes sense.\r\n\r\nYet it works fine as far as I can see....\r\n\r\nNot sure if I should feel bad about lying to `useMemo` about its deps, or if it's not really a lie at all and this is actually a totally expected use case of `useRef`\r\n\r\nAny tips are appreciated.\r\n\r\nP.S. this was prompted by refactoring my code after reading this page, which was an _enourmous_ help in understanding hooks and writing code that uses them more consciously:  https://overreacted.io/a-complete-guide-to-useeffect/\r\n\r\n@gaearon would you rather me post questions like this somewhere else? Didn't see a comment section on the site and I don't use twitter...",
        "remove_template_description": "I have an object which is created via useMemo    I do not want this object to be recreated every time a certain dependency changes, and yet I want it to always see the latest version of that dependency (not just what it was upon initial creation)    Currently, I'm doing something like this:    ```  //bar changes between renders  const latestFoo = useRef(bar);     //obj will only be created once, yet it sees the updated latestFoo  const obj = useMemo(() => ({   doSomething: () => {       //use and/or set latestFoo.current     }  }), [latestFoo]);  ```    This feels like a little bit of a lie... because it kindof depends on an updated `latestFoo.current`... not really `latestFoo` the ref, if that makes sense.    Yet it works fine as far as I can see....    Not sure if I should feel bad about lying to `useMemo` about its deps, or if it's not really a lie at all and this is actually a totally expected use case of `useRef`    Any tips are appreciated.    P.S. this was prompted by refactoring my code after reading this page, which was an _enourmous_ help in understanding hooks and writing code that uses them more consciously:  https://overreacted.io/a-complete-guide-to-useeffect/    @gaearon would you rather me post questions like this somewhere else? Didn't see a comment section on the site and I don't use twitter...",
        "human_words": "I have an object which is created via useMemo    I do not want this object to be recreated every time a certain dependency changes, and yet I want it to always see the latest version of that dependency (not just what it was upon initial creation)    Currently, I'm doing something like this:        This feels like a little bit of a lie... because it kindof depends on an updated `latestFoo.current`... not really `latestFoo` the ref, if that makes sense.    Yet it works fine as far as I can see....    Not sure if I should feel bad about lying to `useMemo` about its deps, or if it's not really a lie at all and this is actually a totally expected use case of `useRef`    Any tips are appreciated.    P.S. this was prompted by refactoring my code after reading this page, which was an _enourmous_ help in understanding hooks and writing code that uses them more consciously:  https://overreacted.io/a-complete-guide-to-useeffect/    @gaearon would you rather me post questions like this somewhere else? Didn't see a comment section on the site and I don't use twitter...",
        "human_words_regrex": "I have an object which is created via useMemo I do not want this object to be recreated every time a certain dependency changes, and yet I want it to always see the latest version of that dependency (not just what it was upon initial creation) Currently, I'm doing something like this: This feels like a little bit of a lie... because it kindof depends on an updated `latestFoo.current`... not really `latestFoo` the ref, if that makes sense. Yet it works fine as far as I can see.... Not sure if I should feel bad about lying to `useMemo` about its deps, or if it's not really a lie at all and this is actually a totally expected use case of `useRef` Any tips are appreciated. P.S. this was prompted by refactoring my code after reading this page, which was an _enourmous_ help in understanding hooks and writing code that uses them more consciously:  @gaearon would you rather me post questions like this somewhere else? Didn't see a comment section on the site and I don't use twitter...",
        "human_words_stopwords_removal_lemmatization": "object created via usememo want object recreated every time certain dependency change , yet want always see latest version dependency ( upon initial creation ) currently , 'm something like : feel like little bit lie ... kindof depends updated ` latestfoo.current ` ... really ` latestfoo ` ref , make sense . yet work fine far see .... sure feel bad lying ` usememo ` deps , 's really lie actually totally expected use case ` useref ` tip appreciated . p.s . prompted refactoring code reading page , _enourmous_ help understanding hook writing code us consciously : @ gaearon would rather post question like somewhere else ? n't see comment section site n't use twitter ...",
        "title_stopwords_removal_lemmatization": "passing ref usememo considered cheating ?"
    },
    {
        "issue_id": 421819293,
        "title": "Why function as child is not considered as children?",
        "label": [
            "Type: Question"
        ],
        "date": "2019-03-16T15:30:22Z",
        "status": "closed",
        "description": "After digging deeper with [this question](https://stackoverflow.com/questions/52553580/react-children-with-non-element-children), I have found `function as a child` is not being considered as **children**.\r\n\r\nTake this example:\r\n```\r\nclass CountExpression extends React.Component {\r\n  render() {\r\n    const children = React.Children.toArray(this.props.children)\r\n    console.log(children)\r\n    return <p>{React.Children.count(children)}</p>\r\n  }\r\n}\r\n<CountExpression>\r\n   {'one'}\r\n   {'two'}\r\n   { () => <p>Still, this will be ignored as child. Why?</p>}\r\n   <p>This will be included in array - that's fine</p>\r\n</CountExpression>\r\n```\r\n\r\nSo, I would like know why is it so? Is it a bug or an expected behavior?",
        "remove_template_description": "After digging deeper with [this question](https://stackoverflow.com/questions/52553580/react-children-with-non-element-children), I have found `function as a child` is not being considered as **children**.    Take this example:  ```  class CountExpression extends React.Component {    render() {      const children = React.Children.toArray(this.props.children)      console.log(children)      return <p>{React.Children.count(children)}</p>    }  }  <CountExpression>     {'one'}     {'two'}     { () => <p>Still, this will be ignored as child. Why?</p>}     <p>This will be included in array - that's fine</p>  </CountExpression>  ```    So, I would like know why is it so? Is it a bug or an expected behavior?",
        "human_words": "After digging deeper with [this question](https://stackoverflow.com/questions/52553580/react-children-with-non-element-children), I have found `function as a child` is not being considered as **children**.    Take this example:      So, I would like know why is it so? Is it a bug or an expected behavior?",
        "human_words_regrex": "After digging deeper with , I have found `function as a child` is not being considered as **children**. Take this example: So, I would like know why is it so? Is it a bug or an expected behavior?",
        "human_words_stopwords_removal_lemmatization": "digging deeper , found ` function child ` considered * * child * * . take example : , would like know ? bug expected behavior ?",
        "title_stopwords_removal_lemmatization": "function child considered child ?"
    },
    {
        "issue_id": 421750679,
        "title": "useRef only updates with a useState together",
        "label": [
            "Type: Question"
        ],
        "date": "2019-03-16T00:53:35Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nProbably a bug\r\n\r\n**What is the current behavior?**\r\nI'm creating a component swapper triggeredd by a interval. I had to use the useRef hook to keep the index state between renders, but it only gets updated when I keep a useState (the setCurrentIndex) is with it. When the setCurrentIndex at line 17 is removed, the swapper doesn't works.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nPlease check it out https://codesandbox.io/s/ooy2xrvxky\r\n\r\n**What is the expected behavior?**\r\nI tought that the indexRef wouldn't depend on the state hook to be updated.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact 16.8.4, Chrome 72.0, Os Ubuntu 16.04.",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**  Probably a bug    **What is the current behavior?**  I'm creating a component swapper triggeredd by a interval. I had to use the useRef hook to keep the index state between renders, but it only gets updated when I keep a useState (the setCurrentIndex) is with it. When the setCurrentIndex at line 17 is removed, the swapper doesn't works.    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**    Please check it out https://codesandbox.io/s/ooy2xrvxky    **What is the expected behavior?**  I tought that the indexRef wouldn't depend on the state hook to be updated.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  React 16.8.4, Chrome 72.0, Os Ubuntu 16.04.",
        "human_words": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**  Probably a bug    **What is the current behavior?**  I'm creating a component swapper triggeredd by a interval. I had to use the useRef hook to keep the index state between renders, but it only gets updated when I keep a useState (the setCurrentIndex) is with it. When the setCurrentIndex at line 17 is removed, the swapper doesn't works.    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**    Please check it out https://codesandbox.io/s/ooy2xrvxky    **What is the expected behavior?**  I tought that the indexRef wouldn't depend on the state hook to be updated.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  React 16.8.4, Chrome 72.0, Os Ubuntu 16.04.",
        "human_words_regrex": " **Do you want to request a *feature* or report a *bug*?** Probably a bug **What is the current behavior?** I'm creating a component swapper triggeredd by a interval. I had to use the useRef hook to keep the index state between renders, but it only gets updated when I keep a useState (the setCurrentIndex) is with it. When the setCurrentIndex at line 17 is removed, the swapper doesn't works. **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle ( or CodeSandbox ( example below:** Please check it out  **What is the expected behavior?** I tought that the indexRef wouldn't depend on the state hook to be updated. **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** React 16.8.4, Chrome 72.0, Os Ubuntu 16.04.",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * probably bug * * current behavior ? * * 'm creating component swapper triggeredd interval . use useref hook keep index state render , get updated keep usestate ( setcurrentindex ) . setcurrentindex line 17 removed , swapper n't work . * * current behavior bug , please provide step reproduce possible minimal demo problem . bug get fixed much faster run code n't dependency react . paste link jsfiddle ( codesandbox ( example : * * please check * * expected behavior ? * * tought indexref would n't depend state hook updated . * * version react , browser / o affected issue ? work previous version react ? * * react 16.8.4 , chrome 72.0 , o ubuntu 16.04 .",
        "title_stopwords_removal_lemmatization": "useref update usestate together"
    },
    {
        "issue_id": 420095999,
        "title": "\u00d7 Maximum update depth exceeded in controled way",
        "label": [
            "Type: Question"
        ],
        "date": "2019-03-12T16:51:41Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\n- maybe bug?\r\n\r\n**What is the current behavior?**\r\n\r\nMy case is that I want to update state n times by adding different types of fields to the state and then render them. \r\nEvery updating of dom(adding new field) I have to check whether I should do something more by checking the hight of added elements, for example, add a break between elements. \r\nFields are represented by the tree structure of data, so I created the class which helps me with going through the tree of fields and I keep it in the class property.\r\n\r\nI know how many times I have to modify the DOM so It will be a fully controlled way of state update and it will finish after all fields are added to DOM but before I render all fields I am getting the error \"Maximum update depth exceeded\".\r\n\r\nDo you know How I can handle with such a problem? \r\nI found a solution by adding setTimeout on the way but I am not sure that is the clean solution?(commented code)\r\nIs it ok that I keep in component class property more complex class to manage structure of data?\r\n\r\nI am providing a simple example in codepage which shows the problem and throw the error.\r\n\r\nhttps://codesandbox.io/s/93w2lp37xw\r\n",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**  - maybe bug?    **What is the current behavior?**    My case is that I want to update state n times by adding different types of fields to the state and then render them.   Every updating of dom(adding new field) I have to check whether I should do something more by checking the hight of added elements, for example, add a break between elements.   Fields are represented by the tree structure of data, so I created the class which helps me with going through the tree of fields and I keep it in the class property.    I know how many times I have to modify the DOM so It will be a fully controlled way of state update and it will finish after all fields are added to DOM but before I render all fields I am getting the error \"Maximum update depth exceeded\".    Do you know How I can handle with such a problem?   I found a solution by adding setTimeout on the way but I am not sure that is the clean solution?(commented code)  Is it ok that I keep in component class property more complex class to manage structure of data?    I am providing a simple example in codepage which shows the problem and throw the error.    https://codesandbox.io/s/93w2lp37xw",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**  - maybe bug?    **What is the current behavior?**    My case is that I want to update state n times by adding different types of fields to the state and then render them.   Every updating of dom(adding new field) I have to check whether I should do something more by checking the hight of added elements, for example, add a break between elements.   Fields are represented by the tree structure of data, so I created the class which helps me with going through the tree of fields and I keep it in the class property.    I know how many times I have to modify the DOM so It will be a fully controlled way of state update and it will finish after all fields are added to DOM but before I render all fields I am getting the error \"Maximum update depth exceeded\".    Do you know How I can handle with such a problem?   I found a solution by adding setTimeout on the way but I am not sure that is the clean solution?(commented code)  Is it ok that I keep in component class property more complex class to manage structure of data?    I am providing a simple example in codepage which shows the problem and throw the error.    https://codesandbox.io/s/93w2lp37xw",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** - maybe bug? **What is the current behavior?** My case is that I want to update state n times by adding different types of fields to the state and then render them. Every updating of dom(adding new field) I have to check whether I should do something more by checking the hight of added elements, for example, add a break between elements. Fields are represented by the tree structure of data, so I created the class which helps me with going through the tree of fields and I keep it in the class property. I know how many times I have to modify the DOM so It will be a fully controlled way of state update and it will finish after all fields are added to DOM but before I render all fields I am getting the error \"Maximum update depth exceeded\". Do you know How I can handle with such a problem? I found a solution by adding setTimeout on the way but I am not sure that is the clean solution?(commented code) Is it ok that I keep in component class property more complex class to manage structure of data? I am providing a simple example in codepage which shows the problem and throw the error. ",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * - maybe bug ? * * current behavior ? * * case want update state n time adding different type field state render . every updating dom ( adding new field ) check whether something checking hight added element , example , add break element . field represented tree structure data , created class help going tree field keep class property . know many time modify dom fully controlled way state update finish field added dom render field getting error `` maximum update depth exceeded '' . know handle problem ? found solution adding settimeout way sure clean solution ? ( commented code ) ok keep component class property complex class manage structure data ? providing simple example codepage show problem throw error .",
        "title_stopwords_removal_lemmatization": "\u00d7 maximum update depth exceeded controled way"
    },
    {
        "issue_id": 417980041,
        "title": "React Hooks useState updating an array",
        "label": [
            "Type: Question"
        ],
        "date": "2019-03-06T19:51:42Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nHooks Clarification\r\n\r\n**What is the current behavior?**\r\nI'm trying to understand the lifecycle of `useState`.\r\n\r\nI have a mock application using a mock websocket. Every second, it sends a new message from the backend. The new message is meant to be appended to an array using `useState`. \r\n\r\nHere are a few different examples that highlight my confusion:\r\n\r\n**Example 1**\r\n[In this example](https://codesandbox.io/s/zz2lj8knyp), if I set the websocket's `onmessage` function once in `useEffect`, then whenever I call `setMessages` to update the `messages` array, the `messages` array I receive as an input is empty.\r\n\r\n```js\r\nconst [messages, setMessages] = useState([]);\r\n\r\nfunction receiveMsg(msg) {\r\n  setMessages(messages.concat(JSON.parse(msg.data)));\r\n}\r\n\r\nuseEffect(function() {\r\n    if (_.isUndefined(socket)) {\r\n      let ws = new MockWebsocket(\"ws://127.0.0.1:8080/\");\r\n      ws.onmessage = receiveMsg;\r\n    }\r\n});\r\n```\r\n\r\nThe effect of this is that I only ever get the latest message in my array.\r\n\r\n**Example 2**\r\nIf, however, I set the `onmessage` function on every render [as in this example](https://codesandbox.io/s/73kr25mkrj), then I get my full array with data appended as I would expect.\r\n\r\n```js\r\nconst [messages, setMessages] = useState([]);\r\n\r\nfunction receiveMsg(msg) {\r\n  setMessages(messages.concat(JSON.parse(msg.data)));\r\n}\r\n\r\nif (!_.isUndefined(socket)) {\r\n  socket.onmessage = receiveMsg;\r\n}\r\n\r\nuseEffect(function() {\r\n  if (_.isUndefined(socket)) {\r\n    let ws = new MockWebsocket(\"ws://127.0.0.1:8080/\");\r\n    ws.onmessage = receiveMsg;\r\n  }\r\n});\r\n```\r\n\r\nIn the `receiveMessage` function, my `messages` array is the whole array instead of an empty one in this example.\r\n\r\n**Example 3**\r\nBUT, if I assign a new reference to `messages`, [as in this example](https://codesandbox.io/s/j1n0py5zz3), and re-assign the value inside `receiveMsg`, then I don't have to re-assign the `onmessage` function over and over.\r\n\r\n```js\r\nconst [messages, setMessages] = useState([]);\r\nlet msgRef = messages;\r\n\r\nfunction receiveMsg(msg) {\r\n  msgRef = msgRef.concat(JSON.parse(msg.data));\r\n  setMessages(msgRef);\r\n}\r\n\r\nuseEffect(function() {\r\n  if (_.isUndefined(socket)) {\r\n    let ws = new MockWebsocket(\"ws://127.0.0.1:8080/\");\r\n    ws.onmessage = receiveMsg;\r\n  }\r\n});\r\n```\r\n\r\n**Example 4**\r\nBut, if I assign a new reference and don't re-assign to it, [as in this example](https://codesandbox.io/s/8pkwr86p29), I continue ending up with an empty array. This suggests it's the assignment back to `msgRef` that is keeping the entire array within the closure.\r\n\r\n```js\r\nconst [messages, setMessages] = useState([]);\r\nlet msgRef = messages;\r\n\r\nfunction receiveMsg(msg) {\r\n  setMessages(msgRef.concat(JSON.parse(msg.data)));\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\nMy original expectation was that example #1 would work. I can tell there's something I'm not totally understanding about the way the assignment of variables to closure works with this hook, but I'm struggling to define what exactly's going on. Can someone shed some light on why this works this way?\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.8",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**  Hooks Clarification    **What is the current behavior?**  I'm trying to understand the lifecycle of `useState`.    I have a mock application using a mock websocket. Every second, it sends a new message from the backend. The new message is meant to be appended to an array using `useState`.     Here are a few different examples that highlight my confusion:    **Example 1**  [In this example](https://codesandbox.io/s/zz2lj8knyp), if I set the websocket's `onmessage` function once in `useEffect`, then whenever I call `setMessages` to update the `messages` array, the `messages` array I receive as an input is empty.    ```js  const [messages, setMessages] = useState([]);    function receiveMsg(msg) {    setMessages(messages.concat(JSON.parse(msg.data)));  }    useEffect(function() {      if (_.isUndefined(socket)) {        let ws = new MockWebsocket(\"ws://127.0.0.1:8080/\");        ws.onmessage = receiveMsg;      }  });  ```    The effect of this is that I only ever get the latest message in my array.    **Example 2**  If, however, I set the `onmessage` function on every render [as in this example](https://codesandbox.io/s/73kr25mkrj), then I get my full array with data appended as I would expect.    ```js  const [messages, setMessages] = useState([]);    function receiveMsg(msg) {    setMessages(messages.concat(JSON.parse(msg.data)));  }    if (!_.isUndefined(socket)) {    socket.onmessage = receiveMsg;  }    useEffect(function() {    if (_.isUndefined(socket)) {      let ws = new MockWebsocket(\"ws://127.0.0.1:8080/\");      ws.onmessage = receiveMsg;    }  });  ```    In the `receiveMessage` function, my `messages` array is the whole array instead of an empty one in this example.    **Example 3**  BUT, if I assign a new reference to `messages`, [as in this example](https://codesandbox.io/s/j1n0py5zz3), and re-assign the value inside `receiveMsg`, then I don't have to re-assign the `onmessage` function over and over.    ```js  const [messages, setMessages] = useState([]);  let msgRef = messages;    function receiveMsg(msg) {    msgRef = msgRef.concat(JSON.parse(msg.data));    setMessages(msgRef);  }    useEffect(function() {    if (_.isUndefined(socket)) {      let ws = new MockWebsocket(\"ws://127.0.0.1:8080/\");      ws.onmessage = receiveMsg;    }  });  ```    **Example 4**  But, if I assign a new reference and don't re-assign to it, [as in this example](https://codesandbox.io/s/8pkwr86p29), I continue ending up with an empty array. This suggests it's the assignment back to `msgRef` that is keeping the entire array within the closure.    ```js  const [messages, setMessages] = useState([]);  let msgRef = messages;    function receiveMsg(msg) {    setMessages(msgRef.concat(JSON.parse(msg.data)));  }  ```    **What is the expected behavior?**  My original expectation was that example #1 would work. I can tell there's something I'm not totally understanding about the way the assignment of variables to closure works with this hook, but I'm struggling to define what exactly's going on. Can someone shed some light on why this works this way?    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    React 16.8",
        "human_words": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**  Hooks Clarification    **What is the current behavior?**  I'm trying to understand the lifecycle of `useState`.    I have a mock application using a mock websocket. Every second, it sends a new message from the backend. The new message is meant to be appended to an array using `useState`.     Here are a few different examples that highlight my confusion:    **Example 1**  [In this example](https://codesandbox.io/s/zz2lj8knyp), if I set the websocket's `onmessage` function once in `useEffect`, then whenever I call `setMessages` to update the `messages` array, the `messages` array I receive as an input is empty.        The effect of this is that I only ever get the latest message in my array.    **Example 2**  If, however, I set the `onmessage` function on every render [as in this example](https://codesandbox.io/s/73kr25mkrj), then I get my full array with data appended as I would expect.        In the `receiveMessage` function, my `messages` array is the whole array instead of an empty one in this example.    **Example 3**  BUT, if I assign a new reference to `messages`, [as in this example](https://codesandbox.io/s/j1n0py5zz3), and re-assign the value inside `receiveMsg`, then I don't have to re-assign the `onmessage` function over and over.        **Example 4**  But, if I assign a new reference and don't re-assign to it, [as in this example](https://codesandbox.io/s/8pkwr86p29), I continue ending up with an empty array. This suggests it's the assignment back to `msgRef` that is keeping the entire array within the closure.        **What is the expected behavior?**  My original expectation was that example #1 would work. I can tell there's something I'm not totally understanding about the way the assignment of variables to closure works with this hook, but I'm struggling to define what exactly's going on. Can someone shed some light on why this works this way?    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    React 16.8",
        "human_words_regrex": " **Do you want to request a *feature* or report a *bug*?** Hooks Clarification **What is the current behavior?** I'm trying to understand the lifecycle of `useState`. I have a mock application using a mock websocket. Every second, it sends a new message from the backend. The new message is meant to be appended to an array using `useState`. Here are a few different examples that highlight my confusion: **Example 1** , if I set the websocket's `onmessage` function once in `useEffect`, then whenever I call `setMessages` to update the `messages` array, the `messages` array I receive as an input is empty. The effect of this is that I only ever get the latest message in my array. **Example 2** If, however, I set the `onmessage` function on every render , then I get my full array with data appended as I would expect. In the `receiveMessage` function, my `messages` array is the whole array instead of an empty one in this example. **Example 3** BUT, if I assign a new reference to `messages`, , and re-assign the value inside `receiveMsg`, then I don't have to re-assign the `onmessage` function over and over. **Example 4** But, if I assign a new reference and don't re-assign to it, , I continue ending up with an empty array. This suggests it's the assignment back to `msgRef` that is keeping the entire array within the closure. **What is the expected behavior?** My original expectation was that example #1 would work. I can tell there's something I'm not totally understanding about the way the assignment of variables to closure works with this hook, but I'm struggling to define what exactly's going on. Can someone shed some light on why this works this way? **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** React 16.8",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * hook clarification * * current behavior ? * * 'm trying understand lifecycle ` usestate ` . mock application using mock websocket . every second , sends new message backend . new message meant appended array using ` usestate ` . different example highlight confusion : * * example 1 * * , set websocket 's ` onmessage ` function ` useeffect ` , whenever call ` setmessages ` update ` message ` array , ` message ` array receive input empty . effect ever get latest message array . * * example 2 * * , however , set ` onmessage ` function every render , get full array data appended would expect . ` receivemessage ` function , ` message ` array whole array instead empty one example . * * example 3 * * , assign new reference ` message ` , , re-assign value inside ` receivemsg ` , n't re-assign ` onmessage ` function . * * example 4 * * , assign new reference n't re-assign , , continue ending empty array . suggests 's assignment back ` msgref ` keeping entire array within closure . * * expected behavior ? * * original expectation example # 1 would work . tell 's something 'm totally understanding way assignment variable closure work hook , 'm struggling define exactly 's going . someone shed light work way ? * * version react , browser / o affected issue ? work previous version react ? * * react 16.8",
        "title_stopwords_removal_lemmatization": "react hook usestate updating array"
    },
    {
        "issue_id": 417396323,
        "title": "Should setting state inside discrete events cause cleanup to run?",
        "label": [
            "Type: Question",
            "Component: Hooks"
        ],
        "date": "2019-03-05T16:49:38Z",
        "status": "closed",
        "description": "This bug is pretty confusing:\r\n\r\nhttps://twitter.com/kentcdodds/status/1102659818660102145\r\n\r\nI think it happens because `fn` scheduled by `setInterval(fn, 0)` jumps in front of the `[running]` effect cleanup caused by `setRunning(false)`. So the interval still fires, overwriting `setLapse(0)` that happened during the event with its `setLapse(someValue)`.\r\n\r\nThis reminds me of the issue described in https://github.com/facebook/react/issues/14750#issuecomment-460409609, or at least a part of it:\r\n\r\n>In fact, this problem exists even for regular React keystrokes (and other \u201cdiscrete\u201d events). The solution to that would be to flush passive effects before we get a discrete event.\r\n\r\nBut here, it seems like this wouldn\u2019t be sufficient because the effect flips *as a result* of the click, not before it. So should `setState` inside a discrete event *also* flush passive effect? Seems like not. (That would defeat the purpose of delaying them.)\r\n\r\nSo this is working as designed, and the fix is just `useLayoutEffect` when the timing matters? Or the rAF solution?",
        "remove_template_description": "This bug is pretty confusing:    https://twitter.com/kentcdodds/status/1102659818660102145    I think it happens because `fn` scheduled by `setInterval(fn, 0)` jumps in front of the `[running]` effect cleanup caused by `setRunning(false)`. So the interval still fires, overwriting `setLapse(0)` that happened during the event with its `setLapse(someValue)`.    This reminds me of the issue described in https://github.com/facebook/react/issues/14750#issuecomment-460409609, or at least a part of it:    >In fact, this problem exists even for regular React keystrokes (and other \u201cdiscrete\u201d events). The solution to that would be to flush passive effects before we get a discrete event.    But here, it seems like this wouldn\u2019t be sufficient because the effect flips *as a result* of the click, not before it. So should `setState` inside a discrete event *also* flush passive effect? Seems like not. (That would defeat the purpose of delaying them.)    So this is working as designed, and the fix is just `useLayoutEffect` when the timing matters? Or the rAF solution?",
        "human_words": "This bug is pretty confusing:    https://twitter.com/kentcdodds/status/1102659818660102145    I think it happens because `fn` scheduled by `setInterval(fn, 0)` jumps in front of the `[running]` effect cleanup caused by `setRunning(false)`. So the interval still fires, overwriting `setLapse(0)` that happened during the event with its `setLapse(someValue)`.    This reminds me of the issue described in https://github.com/facebook/react/issues/14750#issuecomment-460409609, or at least a part of it:    >In fact, this problem exists even for regular React keystrokes (and other \u201cdiscrete\u201d events). The solution to that would be to flush passive effects before we get a discrete event.    But here, it seems like this wouldn\u2019t be sufficient because the effect flips *as a result* of the click, not before it. So should `setState` inside a discrete event *also* flush passive effect? Seems like not. (That would defeat the purpose of delaying them.)    So this is working as designed, and the fix is just `useLayoutEffect` when the timing matters? Or the rAF solution?",
        "human_words_regrex": "This bug is pretty confusing:  I think it happens because `fn` scheduled by `setInterval(fn, 0)` jumps in front of the `[running]` effect cleanup caused by `setRunning(false)`. So the interval still fires, overwriting `setLapse(0)` that happened during the event with its `setLapse(someValue)`. This reminds me of the issue described in  or at least a part of it: >In fact, this problem exists even for regular React keystrokes (and other \u201cdiscrete\u201d events). The solution to that would be to flush passive effects before we get a discrete event. But here, it seems like this wouldn\u2019t be sufficient because the effect flips *as a result* of the click, not before it. So should `setState` inside a discrete event *also* flush passive effect? Seems like not. (That would defeat the purpose of delaying them.) So this is working as designed, and the fix is just `useLayoutEffect` when the timing matters? Or the rAF solution?",
        "human_words_stopwords_removal_lemmatization": "bug pretty confusing : think happens ` fn ` scheduled ` setinterval ( fn , 0 ) ` jump front ` [ running ] ` effect cleanup caused ` setrunning ( false ) ` . interval still fire , overwriting ` setlapse ( 0 ) ` happened event ` setlapse ( somevalue ) ` . reminds issue described least part : > fact , problem exists even regular react keystroke ( \u201c discrete \u201d event ) . solution would flush passive effect get discrete event . , seems like \u2019 sufficient effect flip * result * click , . ` setstate ` inside discrete event * also * flush passive effect ? seems like . ( would defeat purpose delaying . ) working designed , fix ` uselayouteffect ` timing matter ? raf solution ?",
        "title_stopwords_removal_lemmatization": "setting state inside discrete event cause cleanup run ?"
    },
    {
        "issue_id": 417044158,
        "title": "exhaustive-deps support for dynamic array",
        "label": [
            "Type: Question"
        ],
        "date": "2019-03-04T23:37:21Z",
        "status": "closed",
        "description": "Maybe it's antipattern and maybe it isn't. Note how I leverage deps for createdAt subselect.\r\n\r\n```ts\r\nconst TaskLists: FunctionComponent = () => {\r\n  const taskLists = useAppState(state => state.taskLists);\r\n  const sortedTaskLists = useMemo(() => {\r\n    return Object.values(taskLists).sort((a, b) => a.createdAt - b.createdAt);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, Object.values(taskLists).map(item => item.createdAt));\r\n\r\n  const children = useMemo(() => {\r\n    return (\r\n      <>\r\n        {sortedTaskLists.map(taskList => (\r\n          <TaskListLink id={taskList.id} key={taskList.id} />\r\n        ))}\r\n      </>\r\n    );\r\n  }, [sortedTaskLists]);\r\n\r\n  return children;\r\n};\r\n```",
        "remove_template_description": "Maybe it's antipattern and maybe it isn't. Note how I leverage deps for createdAt subselect.    ```ts  const TaskLists: FunctionComponent = () => {    const taskLists = useAppState(state => state.taskLists);    const sortedTaskLists = useMemo(() => {      return Object.values(taskLists).sort((a, b) => a.createdAt - b.createdAt);      // eslint-disable-next-line react-hooks/exhaustive-deps    }, Object.values(taskLists).map(item => item.createdAt));      const children = useMemo(() => {      return (        <>          {sortedTaskLists.map(taskList => (            <TaskListLink id={taskList.id} key={taskList.id} />          ))}        </>      );    }, [sortedTaskLists]);      return children;  };  ```",
        "human_words": "Maybe it's antipattern and maybe it isn't. Note how I leverage deps for createdAt subselect.    ",
        "human_words_regrex": "Maybe it's antipattern and maybe it isn't. Note how I leverage deps for createdAt subselect. ",
        "human_words_stopwords_removal_lemmatization": "maybe 's antipattern maybe n't . note leverage deps createdat subselect .",
        "title_stopwords_removal_lemmatization": "exhaustive-deps support dynamic array"
    },
    {
        "issue_id": 413349220,
        "title": "useLayoutEffect in ssr",
        "label": [
            "Type: Question"
        ],
        "date": "2019-02-22T10:52:29Z",
        "status": "closed",
        "description": "Hi, I do not understand the situation with this hook a bit. I use this hook to perform the animation synchronously with the state update, if I use useEffect, then I have jumps in the animation, because the animation library does not have time to start. Also, the documentation states that useLayoutEffect runs on the same phase as componentDidMount (that is, on the client side), and here my server issues complaints to me about my code. Why is that?\r\n\r\nhttps://codesandbox.io/s/oo47nj9mk9\r\n\r\n_Originally posted by @dimensi in https://github.com/facebook/react/pull/14596#issuecomment-466023638_",
        "remove_template_description": "Hi, I do not understand the situation with this hook a bit. I use this hook to perform the animation synchronously with the state update, if I use useEffect, then I have jumps in the animation, because the animation library does not have time to start. Also, the documentation states that useLayoutEffect runs on the same phase as componentDidMount (that is, on the client side), and here my server issues complaints to me about my code. Why is that?    https://codesandbox.io/s/oo47nj9mk9    _Originally posted by @dimensi in https://github.com/facebook/react/pull/14596#issuecomment-466023638_",
        "human_words": "Hi, I do not understand the situation with this hook a bit. I use this hook to perform the animation synchronously with the state update, if I use useEffect, then I have jumps in the animation, because the animation library does not have time to start. Also, the documentation states that useLayoutEffect runs on the same phase as componentDidMount (that is, on the client side), and here my server issues complaints to me about my code. Why is that?    https://codesandbox.io/s/oo47nj9mk9    _Originally posted by @dimensi in https://github.com/facebook/react/pull/14596#issuecomment-466023638_",
        "human_words_regrex": "Hi, I do not understand the situation with this hook a bit. I use this hook to perform the animation synchronously with the state update, if I use useEffect, then I have jumps in the animation, because the animation library does not have time to start. Also, the documentation states that useLayoutEffect runs on the same phase as componentDidMount (that is, on the client side), and here my server issues complaints to me about my code. Why is that?  _Originally posted by @dimensi in ",
        "human_words_stopwords_removal_lemmatization": "hi , understand situation hook bit . use hook perform animation synchronously state update , use useeffect , jump animation , animation library time start . also , documentation state uselayouteffect run phase componentdidmount ( , client side ) , server issue complaint code . ? _originally posted @ dimensi",
        "title_stopwords_removal_lemmatization": "uselayouteffect ssr"
    },
    {
        "issue_id": 412450984,
        "title": "Why moving item to another array fire re-rendering for itself (the item)?",
        "label": [
            "Type: Question"
        ],
        "date": "2019-02-20T14:22:20Z",
        "status": "closed",
        "description": "Hello,\r\n\r\nI have the following problem :\r\n\r\n\u2014 When I drag/drop item to an another `array()` > it re-renders the item I moved \u2014 (Why?)\r\n\r\n\u2014 When I drag/drop in the **same** `array()` > it's not renders. So it's GOOD !\r\n\r\nThe problem is my deepest child, I have a little `fetch()` to retrieve some additional data. \r\nThese data are already fetched.\r\nSo when I drag/drop **I don't want** another fetch. \r\nEvent `React.memo()` solve the problem.\r\n\r\nYou can check the console of CodeSandbox to see the problem :\r\n\r\n\r\n###  [https://codesandbox.io/s/03on3k75xw](https://codesandbox.io/s/03on3k75xw)\r\n\r\n\r\n\r\n**What is the expected behavior?**\r\n\r\nNo re-render of the item, since React already displays it, I just moved to another array. It's still the same item.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n```\r\nReact 16.8.1\r\nMacOS 10.14.2\r\n```\r\n\r\nReact Beautiful Dnd : https://github.com/atlassian/react-beautiful-dnd\r\n\r\n",
        "remove_template_description": "Hello,    I have the following problem :    \u2014 When I drag/drop item to an another `array()` > it re-renders the item I moved \u2014 (Why?)    \u2014 When I drag/drop in the **same** `array()` > it's not renders. So it's GOOD !    The problem is my deepest child, I have a little `fetch()` to retrieve some additional data.   These data are already fetched.  So when I drag/drop **I don't want** another fetch.   Event `React.memo()` solve the problem.    You can check the console of CodeSandbox to see the problem :      ###  [https://codesandbox.io/s/03on3k75xw](https://codesandbox.io/s/03on3k75xw)        **What is the expected behavior?**    No re-render of the item, since React already displays it, I just moved to another array. It's still the same item.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    ```  React 16.8.1  MacOS 10.14.2  ```    React Beautiful Dnd : https://github.com/atlassian/react-beautiful-dnd",
        "human_words": "Hello,    I have the following problem :    \u2014 When I drag/drop item to an another `array()` > it re-renders the item I moved \u2014 (Why?)    \u2014 When I drag/drop in the **same** `array()` > it's not renders. So it's GOOD !    The problem is my deepest child, I have a little `fetch()` to retrieve some additional data.   These data are already fetched.  So when I drag/drop **I don't want** another fetch.   Event `React.memo()` solve the problem.    You can check the console of CodeSandbox to see the problem :      ###  [https://codesandbox.io/s/03on3k75xw](https://codesandbox.io/s/03on3k75xw)        **What is the expected behavior?**    No re-render of the item, since React already displays it, I just moved to another array. It's still the same item.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**        React Beautiful Dnd : https://github.com/atlassian/react-beautiful-dnd",
        "human_words_regrex": "Hello, I have the following problem : \u2014 When I drag/drop item to an another `array()` > it re-renders the item I moved \u2014 (Why?) \u2014 When I drag/drop in the **same** `array()` > it's not renders. So it's GOOD ! The problem is my deepest child, I have a little `fetch()` to retrieve some additional data. These data are already fetched. So when I drag/drop **I don't want** another fetch. Event `React.memo()` solve the problem. You can check the console of CodeSandbox to see the problem : ###  **What is the expected behavior?** No re-render of the item, since React already displays it, I just moved to another array. It's still the same item. **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** React Beautiful Dnd : ",
        "human_words_stopwords_removal_lemmatization": "hello , following problem : \u2014 drag/drop item another ` array ( ) ` > re-renders item moved \u2014 ( ? ) \u2014 drag/drop * * * * ` array ( ) ` > 's render . 's good ! problem deepest child , little ` fetch ( ) ` retrieve additional data . data already fetched . drag/drop * * n't want * * another fetch . event ` react.memo ( ) ` solve problem . check console codesandbox see problem : # # # * * expected behavior ? * * re-render item , since react already display , moved another array . 's still item . * * version react , browser / o affected issue ? work previous version react ? * * react beautiful dnd :",
        "title_stopwords_removal_lemmatization": "moving item another array fire re-rendering ( item ) ?"
    },
    {
        "issue_id": 411127520,
        "title": "Hooks: useState one-off callbacks",
        "label": [
            "Type: Question"
        ],
        "date": "2019-02-16T23:32:23Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\nQuestion / feature\r\n\r\nI've been trying to handle a case where I need to execute a piece of code right after the state is set at a particular place in the code. I do understand I'm supposed to use `useEffect` to respond to changes in state, like so:\r\n\r\n```javascript\r\nconst [val, setVal] = useState(null);\r\nuseEffect(() => { /* handle changes to val here */ }, [val])\r\n```\r\n\r\nBut the problem is, it will run on all changes made to `val` anywhere in the code. Without the second argument of `setVal` being a callback that'll run after the state is set, how can I execute something after a specific `setVal` function call sets the state ? \r\n\r\n\r\n\r\n\r\n\r\n",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**  Question / feature    I've been trying to handle a case where I need to execute a piece of code right after the state is set at a particular place in the code. I do understand I'm supposed to use `useEffect` to respond to changes in state, like so:    ```javascript  const [val, setVal] = useState(null);  useEffect(() => { /* handle changes to val here */ }, [val])  ```    But the problem is, it will run on all changes made to `val` anywhere in the code. Without the second argument of `setVal` being a callback that'll run after the state is set, how can I execute something after a specific `setVal` function call sets the state ?",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**  Question / feature    I've been trying to handle a case where I need to execute a piece of code right after the state is set at a particular place in the code. I do understand I'm supposed to use `useEffect` to respond to changes in state, like so:        But the problem is, it will run on all changes made to `val` anywhere in the code. Without the second argument of `setVal` being a callback that'll run after the state is set, how can I execute something after a specific `setVal` function call sets the state ?",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** Question / feature I've been trying to handle a case where I need to execute a piece of code right after the state is set at a particular place in the code. I do understand I'm supposed to use `useEffect` to respond to changes in state, like so: But the problem is, it will run on all changes made to `val` anywhere in the code. Without the second argument of `setVal` being a callback that'll run after the state is set, how can I execute something after a specific `setVal` function call sets the state ?",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * question / feature 've trying handle case need execute piece code right state set particular place code . understand 'm supposed use ` useeffect ` respond change state , like : problem , run change made ` val ` anywhere code . without second argument ` setval ` callback 'll run state set , execute something specific ` setval ` function call set state ?",
        "title_stopwords_removal_lemmatization": "hook : usestate one-off callback"
    },
    {
        "issue_id": 410561328,
        "title": "`react-dom/server.renderStaticMarkup()` returns empty string server-side",
        "label": [
            "Type: Question"
        ],
        "date": "2019-02-15T01:07:34Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\n**bug**\r\n\r\n**What is the current behavior?**\r\n\r\nI'm trying to extract the initial HTML from react code on the server side. To do this, I'm using the official react-dom/server library function `renderToStaticMarkup()` referenced here: https://reactjs.org/docs/react-dom-server.html#rendertostaticmarkup\r\n\r\nI'm reading a react source file, transpiling the JSX and ES6 syntax to CommonJS using Babel and then parsing the evaluated CommonJS to `renderToStaticMarkup()`.\r\n\r\n## React code:\r\n```jsx\r\nimport React from 'react';\r\n\r\nclass Test extends React.Component {\r\n    render() {\r\n        return <p>Hello World!</p>;\r\n    }\r\n}\r\n\r\nexport default Test;\r\n```\r\n\r\n## Server-side code:\r\n```javascript\r\nconst { renderToStaticMarkup } = require( 'react-dom/server');\r\nconst Babel = require( '@babel/core' );\r\nconst Fsp = require( 'fs' ).promises;\r\n\r\n(async () => {\r\n    let fileContent = await Fsp.readFile( 'test.js', 'utf-8' );\r\n\r\n    let code = Babel.transform( \r\n        fileContent, \r\n        { \r\n            presets: [ '@babel/preset-env', '@babel/preset-react' ],\r\n            comments: false,\r\n            minified: true\r\n        }).code;\r\n\r\n    let result = renderToStaticMarkup( code );\r\n\r\n    console.log( result );\r\n})();\r\n```\r\n\r\n## package.json:\r\n```json\r\n{\r\n  \"dependencies\": {\r\n    \"@babel/core\": \"^7.3.3\",\r\n    \"@babel/preset-env\": \"^7.3.1\",\r\n    \"@babel/preset-react\": \"^7.0.0\",\r\n    \"react\": \"^16.8.2\",\r\n    \"react-dom\": \"^16.8.2\"\r\n  }\r\n}\r\n```\r\n\r\n**What is the output?**\r\n`&quot;use strict&quot;;Object.defineProperty(exports,&quot;__esModule&quot;,{value:true});exports.default=void 0;var _re act=_interopRequireDefault(require(\"react\"));function...`\r\n\r\n**What is the expected output?**\r\n`<p>Hello World!</p>`\r\n\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n```json\r\n\"react\": \"^16.8.2\",\r\n\"react-dom\": \"^16.8.2\"\r\n```",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**    **bug**    **What is the current behavior?**    I'm trying to extract the initial HTML from react code on the server side. To do this, I'm using the official react-dom/server library function `renderToStaticMarkup()` referenced here: https://reactjs.org/docs/react-dom-server.html#rendertostaticmarkup    I'm reading a react source file, transpiling the JSX and ES6 syntax to CommonJS using Babel and then parsing the evaluated CommonJS to `renderToStaticMarkup()`.    ## React code:  ```jsx  import React from 'react';    class Test extends React.Component {      render() {          return <p>Hello World!</p>;      }  }    export default Test;  ```    ## Server-side code:  ```javascript  const { renderToStaticMarkup } = require( 'react-dom/server');  const Babel = require( '@babel/core' );  const Fsp = require( 'fs' ).promises;    (async () => {      let fileContent = await Fsp.readFile( 'test.js', 'utf-8' );        let code = Babel.transform(           fileContent,           {               presets: [ '@babel/preset-env', '@babel/preset-react' ],              comments: false,              minified: true          }).code;        let result = renderToStaticMarkup( code );        console.log( result );  })();  ```    ## package.json:  ```json  {    \"dependencies\": {      \"@babel/core\": \"^7.3.3\",      \"@babel/preset-env\": \"^7.3.1\",      \"@babel/preset-react\": \"^7.0.0\",      \"react\": \"^16.8.2\",      \"react-dom\": \"^16.8.2\"    }  }  ```    **What is the output?**  `&quot;use strict&quot;;Object.defineProperty(exports,&quot;__esModule&quot;,{value:true});exports.default=void 0;var _re act=_interopRequireDefault(require(\"react\"));function...`    **What is the expected output?**  `<p>Hello World!</p>`      **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  ```json  \"react\": \"^16.8.2\",  \"react-dom\": \"^16.8.2\"  ```",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**    **bug**    **What is the current behavior?**    I'm trying to extract the initial HTML from react code on the server side. To do this, I'm using the official react-dom/server library function `renderToStaticMarkup()` referenced here: https://reactjs.org/docs/react-dom-server.html#rendertostaticmarkup    I'm reading a react source file, transpiling the JSX and ES6 syntax to CommonJS using Babel and then parsing the evaluated CommonJS to `renderToStaticMarkup()`.    ## React code:      ## Server-side code:      ## package.json:      **What is the output?**  `&quot;use strict&quot;;Object.defineProperty(exports,&quot;__esModule&quot;,{value:true});exports.default=void 0;var _re act=_interopRequireDefault(require(\"react\"));function...`    **What is the expected output?**  `<p>Hello World!</p>`      **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  ",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** **bug** **What is the current behavior?** I'm trying to extract the initial HTML from react code on the server side. To do this, I'm using the official react-dom/server library function `renderToStaticMarkup()` referenced here:  I'm reading a react source file, transpiling the JSX and ES6 syntax to CommonJS using Babel and then parsing the evaluated CommonJS to `renderToStaticMarkup()`. ## React code: ## Server-side code: ## package.json: **What is the output?** `&quot;use strict&quot;;Object.defineProperty(exports,&quot;__esModule&quot;,{value:true});exports.default=void 0;var _re act=_interopRequireDefault(require(\"react\"));function...` **What is the expected output?** `Hello World!` **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** ",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * * * bug * * * * current behavior ? * * 'm trying extract initial html react code server side . , 'm using official react-dom/server library function ` rendertostaticmarkup ( ) ` referenced : 'm reading react source file , transpiling jsx es6 syntax commonjs using babel parsing evaluated commonjs ` rendertostaticmarkup ( ) ` . # # react code : # # server-side code : # # package.json : * * output ? * * ` & quot ; use strict & quot ; ; object.defineproperty ( export , & quot ; __esmodule & quot ; , { value : true } ) ; exports.default=void 0 ; var _re act=_interoprequiredefault ( require ( `` react '' ) ) ; function ... ` * * expected output ? * * ` hello world ! ` * * version react , browser / o affected issue ? work previous version react ? * *",
        "title_stopwords_removal_lemmatization": "` react-dom/server.renderstaticmarkup ( ) ` return empty string server-side"
    },
    {
        "issue_id": 408973443,
        "title": "Prop reassignment in components",
        "label": [
            "Type: Question"
        ],
        "date": "2019-02-11T20:59:54Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nProp reassignment in components\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n1. Have a parent component that passes a prop to a child\r\n2. Have a child assign the prop to the state default\r\n3. Unpack the state value and use a`.push` to alter it\r\n4. Watch in horror as both the prop and the state changes.\r\n\r\nhttps://codesandbox.io/s/61x9k76v8w\r\nCheck child.js\r\n\r\n**What is the expected behavior?**\r\nProps should not be reassignable within mounted components\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nAll browsers all OS's React: 16.7.0\r\n",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**  Bug    **What is the current behavior?**  Prop reassignment in components    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**    1. Have a parent component that passes a prop to a child  2. Have a child assign the prop to the state default  3. Unpack the state value and use a`.push` to alter it  4. Watch in horror as both the prop and the state changes.    https://codesandbox.io/s/61x9k76v8w  Check child.js    **What is the expected behavior?**  Props should not be reassignable within mounted components    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  All browsers all OS's React: 16.7.0",
        "human_words": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**  Bug    **What is the current behavior?**  Prop reassignment in components    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**    1. Have a parent component that passes a prop to a child  2. Have a child assign the prop to the state default  3. Unpack the state value and use a`.push` to alter it  4. Watch in horror as both the prop and the state changes.    https://codesandbox.io/s/61x9k76v8w  Check child.js    **What is the expected behavior?**  Props should not be reassignable within mounted components    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  All browsers all OS's React: 16.7.0",
        "human_words_regrex": " **Do you want to request a *feature* or report a *bug*?** Bug **What is the current behavior?** Prop reassignment in components **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle ( or CodeSandbox ( example below:** 1. Have a parent component that passes a prop to a child 2. Have a child assign the prop to the state default 3. Unpack the state value and use a`.push` to alter it 4. Watch in horror as both the prop and the state changes.  Check child.js **What is the expected behavior?** Props should not be reassignable within mounted components **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** All browsers all OS's React: 16.7.0",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * bug * * current behavior ? * * prop reassignment component * * current behavior bug , please provide step reproduce possible minimal demo problem . bug get fixed much faster run code n't dependency react . paste link jsfiddle ( codesandbox ( example : * * 1. parent component pass prop child 2. child assign prop state default 3. unpack state value use ` .push ` alter 4. watch horror prop state change . check child.js * * expected behavior ? * * prop reassignable within mounted component * * version react , browser / o affected issue ? work previous version react ? * * browser o 's react : 16.7.0",
        "title_stopwords_removal_lemmatization": "prop reassignment component"
    },
    {
        "issue_id": 408217365,
        "title": "Module mock yields unexpected act() error",
        "label": [
            "Type: Question"
        ],
        "date": "2019-02-08T16:06:16Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n**What is the current behavior?**\r\nI am trying to figure out where is the best place to put a module mock according to the new react version 16.8.1.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n``` javascript\r\nimport React from 'react';\r\nimport { act } from 'react-dom/test-utils';\r\nimport { mount } from 'enzyme';\r\nimport { getPointsFromGroupID } from './utils/getPointsFromGroupID';\r\nimport { TDashBody } from '.';\r\n\r\njest.mock('./utils/getPointsFromGroupID', () => ({\r\n  getPointsFromGroupID: jest.fn(() => Promise.resolve({})),\r\n}));\r\n\r\nconst getDefaultProps = () => ({\r\n  currentGroup: 0,\r\n});\r\ndescribe('DashBody', () => {\r\n  let component;\r\n  beforeEach(() => {\r\n    act(() => {\r\n      const props = getDefaultProps();\r\n      component = mount(<TDashBody {...props} />);\r\n    });\r\n  });\r\n  describe('rendering', () => {\r\n    it('Should render without exploding', () => {\r\n      expect(component).toBeDefined();\r\n    });\r\n  });\r\n});\r\n```\r\n\r\n**What is the expected behavior?**\r\nThis test passes, but the placement of the mock module call gives me the act() error\r\n```\r\nWarning: An update to TDashBody inside a test was not wrapped in act(...).\r\n\r\n      When testing, code that causes React state updates should be wrapped into act(...):\r\n\r\n      act(() => {\r\n        /* fire events that update state */\r\n      });\r\n      /* assert on the output */\r\n\r\n      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://fb\r\n\r\n.me/react-wrap-tests-with-act\r\n```\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nv16.8.1 running chrome on windows 10",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**  bug    **What is the current behavior?**  I am trying to figure out where is the best place to put a module mock according to the new react version 16.8.1.    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**  ``` javascript  import React from 'react';  import { act } from 'react-dom/test-utils';  import { mount } from 'enzyme';  import { getPointsFromGroupID } from './utils/getPointsFromGroupID';  import { TDashBody } from '.';    jest.mock('./utils/getPointsFromGroupID', () => ({    getPointsFromGroupID: jest.fn(() => Promise.resolve({})),  }));    const getDefaultProps = () => ({    currentGroup: 0,  });  describe('DashBody', () => {    let component;    beforeEach(() => {      act(() => {        const props = getDefaultProps();        component = mount(<TDashBody {...props} />);      });    });    describe('rendering', () => {      it('Should render without exploding', () => {        expect(component).toBeDefined();      });    });  });  ```    **What is the expected behavior?**  This test passes, but the placement of the mock module call gives me the act() error  ```  Warning: An update to TDashBody inside a test was not wrapped in act(...).          When testing, code that causes React state updates should be wrapped into act(...):          act(() => {          /* fire events that update state */        });        /* assert on the output */          This ensures that you're testing the behavior the user would see in the browser. Learn more at https://fb    .me/react-wrap-tests-with-act  ```    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  v16.8.1 running chrome on windows 10",
        "human_words": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**  bug    **What is the current behavior?**  I am trying to figure out where is the best place to put a module mock according to the new react version 16.8.1.    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**      **What is the expected behavior?**  This test passes, but the placement of the mock module call gives me the act() error      **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  v16.8.1 running chrome on windows 10",
        "human_words_regrex": " **Do you want to request a *feature* or report a *bug*?** bug **What is the current behavior?** I am trying to figure out where is the best place to put a module mock according to the new react version 16.8.1. **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle ( or CodeSandbox ( example below:** **What is the expected behavior?** This test passes, but the placement of the mock module call gives me the act() error **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** v16.8.1 running chrome on windows 10",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * bug * * current behavior ? * * trying figure best place put module mock according new react version 16.8.1 . * * current behavior bug , please provide step reproduce possible minimal demo problem . bug get fixed much faster run code n't dependency react . paste link jsfiddle ( codesandbox ( example : * * * * expected behavior ? * * test pass , placement mock module call give act ( ) error * * version react , browser / o affected issue ? work previous version react ? * * v16.8.1 running chrome window 10",
        "title_stopwords_removal_lemmatization": "module mock yield unexpected act ( ) error"
    },
    {
        "issue_id": 408162836,
        "title": "Under what circumstances, unstable_shouldYield will return true\uff1f",
        "label": [
            "Type: Question"
        ],
        "date": "2019-02-08T13:56:21Z",
        "status": "closed",
        "description": "In Scheduler.js, \r\n```\r\nfunction unstable_shouldYield() {\r\n  return (\r\n    !currentDidTimeout &&\r\n    ((firstCallbackNode !== null &&\r\n      firstCallbackNode.expirationTime < currentExpirationTime) ||\r\n      shouldYieldToHost())\r\n  );\r\n}\r\n```\r\nunstable_shouldYield() return true when currentDidTimeout is false and shouldYieldToHost() return true, but why?\r\n```\r\nshouldYieldToHost = function() {\r\n  return frameDeadline <= getCurrentTime();\r\n};\r\n```\r\nshouldYieldToHost() return true means there's no time left in this idle period\r\ncurrentDidTimeout is false means the schedule is not timeout\r\nwhat relationship between them, why does unstable_shouldYield() depend on them?\r\n",
        "remove_template_description": "In Scheduler.js,   ```  function unstable_shouldYield() {    return (      !currentDidTimeout &&      ((firstCallbackNode !== null &&        firstCallbackNode.expirationTime < currentExpirationTime) ||        shouldYieldToHost())    );  }  ```  unstable_shouldYield() return true when currentDidTimeout is false and shouldYieldToHost() return true, but why?  ```  shouldYieldToHost = function() {    return frameDeadline <= getCurrentTime();  };  ```  shouldYieldToHost() return true means there's no time left in this idle period  currentDidTimeout is false means the schedule is not timeout  what relationship between them, why does unstable_shouldYield() depend on them?",
        "human_words": "In Scheduler.js,     unstable_shouldYield() return true when currentDidTimeout is false and shouldYieldToHost() return true, but why?    shouldYieldToHost() return true means there's no time left in this idle period  currentDidTimeout is false means the schedule is not timeout  what relationship between them, why does unstable_shouldYield() depend on them?",
        "human_words_regrex": "In Scheduler.js, unstable_shouldYield() return true when currentDidTimeout is false and shouldYieldToHost() return true, but why? shouldYieldToHost() return true means there's no time left in this idle period currentDidTimeout is false means the schedule is not timeout what relationship between them, why does unstable_shouldYield() depend on them?",
        "human_words_stopwords_removal_lemmatization": "scheduler.js , unstable_shouldyield ( ) return true currentdidtimeout false shouldyieldtohost ( ) return true , ? shouldyieldtohost ( ) return true mean 's time left idle period currentdidtimeout false mean schedule timeout relationship , unstable_shouldyield ( ) depend ?",
        "title_stopwords_removal_lemmatization": "circumstance , unstable_shouldyield return true\uff1f"
    },
    {
        "issue_id": 407412754,
        "title": "react-cache alphas don't work with 16.8+",
        "label": [
            "Type: Question",
            "Resolution: Stale"
        ],
        "date": "2019-02-06T20:18:31Z",
        "status": "closed",
        "description": "> `react-cache` was not published with 16.8.1 like the rest of the react packages.\r\nThis means that the platform's Suspense stuff will not work.\r\n\r\n_Originally posted by @jaredpalmer in https://github.com/palmerhq/the-platform/pull/70#issuecomment-461170282_\r\n",
        "remove_template_description": "> `react-cache` was not published with 16.8.1 like the rest of the react packages.  This means that the platform's Suspense stuff will not work.    _Originally posted by @jaredpalmer in https://github.com/palmerhq/the-platform/pull/70#issuecomment-461170282_",
        "human_words": "> `react-cache` was not published with 16.8.1 like the rest of the react packages.  This means that the platform's Suspense stuff will not work.    _Originally posted by @jaredpalmer in https://github.com/palmerhq/the-platform/pull/70#issuecomment-461170282_",
        "human_words_regrex": "> `react-cache` was not published with 16.8.1 like the rest of the react packages. This means that the platform's Suspense stuff will not work. _Originally posted by @jaredpalmer in ",
        "human_words_stopwords_removal_lemmatization": "> ` react-cache ` published 16.8.1 like rest react package . mean platform 's suspense stuff work . _originally posted @ jaredpalmer",
        "title_stopwords_removal_lemmatization": "react-cache alpha n't work 16.8+"
    },
    {
        "issue_id": 407362428,
        "title": "act cannot detect secondary updates",
        "label": [
            "Type: Question"
        ],
        "date": "2019-02-06T18:07:40Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nbug\r\n\r\n**What is the current behavior?**\r\n\r\nIf a component performs a second (non user triggered) update, `act` cannot detect it and warns about the update.\r\n\r\nFor example, a button is clicked and updates its text. After a second, the button resets and its text reverts to its original state.\r\n\r\nhttps://codesandbox.io/s/6xkyl37x7k?previewwindow=tests\r\n\r\n(The reproduction is a bit contrived, but demonstrates the issue.)\r\n\r\n**What is the expected behavior?**\r\n\r\nThe test runs without warning about being wrapped in `act`.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact & React DOM @ `16.8.0`",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**    bug    **What is the current behavior?**    If a component performs a second (non user triggered) update, `act` cannot detect it and warns about the update.    For example, a button is clicked and updates its text. After a second, the button resets and its text reverts to its original state.    https://codesandbox.io/s/6xkyl37x7k?previewwindow=tests    (The reproduction is a bit contrived, but demonstrates the issue.)    **What is the expected behavior?**    The test runs without warning about being wrapped in `act`.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    React & React DOM @ `16.8.0`",
        "human_words": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**    bug    **What is the current behavior?**    If a component performs a second (non user triggered) update, `act` cannot detect it and warns about the update.    For example, a button is clicked and updates its text. After a second, the button resets and its text reverts to its original state.    https://codesandbox.io/s/6xkyl37x7k?previewwindow=tests    (The reproduction is a bit contrived, but demonstrates the issue.)    **What is the expected behavior?**    The test runs without warning about being wrapped in `act`.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    React & React DOM @ `16.8.0`",
        "human_words_regrex": " **Do you want to request a *feature* or report a *bug*?** bug **What is the current behavior?** If a component performs a second (non user triggered) update, `act` cannot detect it and warns about the update. For example, a button is clicked and updates its text. After a second, the button resets and its text reverts to its original state.  (The reproduction is a bit contrived, but demonstrates the issue.) **What is the expected behavior?** The test runs without warning about being wrapped in `act`. **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** React & React DOM @ `16.8.0`",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * bug * * current behavior ? * * component performs second ( non user triggered ) update , ` act ` detect warns update . example , button clicked update text . second , button reset text reverts original state . ( reproduction bit contrived , demonstrates issue . ) * * expected behavior ? * * test run without warning wrapped ` act ` . * * version react , browser / o affected issue ? work previous version react ? * * react & react dom @ ` 16.8.0 `",
        "title_stopwords_removal_lemmatization": "act detect secondary update"
    },
    {
        "issue_id": 407344056,
        "title": "Warning for `act` even when code is wrapped inside it",
        "label": [
            "Type: Question"
        ],
        "date": "2019-02-06T17:21:12Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nReport a bug\r\n\r\n**What is the current behavior?**\r\n\r\n`react-test-renderer` emits a warning to wrap code inside `act` even though it is.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nHere is a [CodeSandbox](https://codesandbox.io/s/wwopxr137k?expanddevtools=1&previewwindow=tests) with a component using `useState` that toggles a div on/off on a button click. The test finds the button, calls the `onClick` on the props. This would be followed by a snapshot test. However, no matter how I try and wrap the code in `act`, the warning persists.\r\n\r\nMake sure to open the tests tab on the right, and to expand the console at the bottom:\r\n\r\n![image](https://user-images.githubusercontent.com/433409/52360399-ac50bf00-2a1a-11e9-9cf1-ba34b642102f.png)\r\n\r\n\r\n**What is the expected behavior?**\r\n\r\nThere should be no warning.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nreact@16.8\r\nreact-dom@16.8\r\nreact-test-renderer@16.8\r\njest@24.1.0\r\n\r\nThis worked fine with react*@16.7.0-alpha.2, snapshot and all.",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**    Report a bug    **What is the current behavior?**    `react-test-renderer` emits a warning to wrap code inside `act` even though it is.    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**    Here is a [CodeSandbox](https://codesandbox.io/s/wwopxr137k?expanddevtools=1&previewwindow=tests) with a component using `useState` that toggles a div on/off on a button click. The test finds the button, calls the `onClick` on the props. This would be followed by a snapshot test. However, no matter how I try and wrap the code in `act`, the warning persists.    Make sure to open the tests tab on the right, and to expand the console at the bottom:    ![image](https://user-images.githubusercontent.com/433409/52360399-ac50bf00-2a1a-11e9-9cf1-ba34b642102f.png)      **What is the expected behavior?**    There should be no warning.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    react@16.8  react-dom@16.8  react-test-renderer@16.8  jest@24.1.0    This worked fine with react*@16.7.0-alpha.2, snapshot and all.",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**    Report a bug    **What is the current behavior?**    `react-test-renderer` emits a warning to wrap code inside `act` even though it is.    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**    Here is a [CodeSandbox](https://codesandbox.io/s/wwopxr137k?expanddevtools=1&previewwindow=tests) with a component using `useState` that toggles a div on/off on a button click. The test finds the button, calls the `onClick` on the props. This would be followed by a snapshot test. However, no matter how I try and wrap the code in `act`, the warning persists.    Make sure to open the tests tab on the right, and to expand the console at the bottom:    ![image](https://user-images.githubusercontent.com/433409/52360399-ac50bf00-2a1a-11e9-9cf1-ba34b642102f.png)      **What is the expected behavior?**    There should be no warning.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    react@16.8  react-dom@16.8  react-test-renderer@16.8  jest@24.1.0    This worked fine with react*@16.7.0-alpha.2, snapshot and all.",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** Report a bug **What is the current behavior?** `react-test-renderer` emits a warning to wrap code inside `act` even though it is. **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle ( or CodeSandbox ( example below:** Here is a  with a component using `useState` that toggles a div on/off on a button click. The test finds the button, calls the `onClick` on the props. This would be followed by a snapshot test. However, no matter how I try and wrap the code in `act`, the warning persists. Make sure to open the tests tab on the right, and to expand the console at the bottom: ! **What is the expected behavior?** There should be no warning. **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** react@16.8 react-dom@16.8 react-test-renderer@16.8 jest@24.1.0 This worked fine with react*@16.7.0-alpha.2, snapshot and all.",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * report bug * * current behavior ? * * ` react-test-renderer ` emits warning wrap code inside ` act ` even though . * * current behavior bug , please provide step reproduce possible minimal demo problem . bug get fixed much faster run code n't dependency react . paste link jsfiddle ( codesandbox ( example : * * component using ` usestate ` toggle div on/off button click . test find button , call ` onclick ` prop . would followed snapshot test . however , matter try wrap code ` act ` , warning persists . make sure open test tab right , expand console bottom : ! * * expected behavior ? * * warning . * * version react , browser / o affected issue ? work previous version react ? * * react @ 16.8 react-dom @ 16.8 react-test-renderer @ 16.8 jest @ 24.1.0 worked fine react * @ 16.7.0-alpha.2 , snapshot .",
        "title_stopwords_removal_lemmatization": "warning ` act ` even code wrapped inside"
    },
    {
        "issue_id": 404290039,
        "title": "Unable to use useContext hook inline in Context.Provider",
        "label": [
            "Type: Question"
        ],
        "date": "2019-01-29T13:26:12Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nNot sure if it is a bug or a feature yet. This relates to Hooks.\r\n\r\nIt could also be that this is all expected behaviour and one of the workarounds mentioned is required.\r\n\r\n**What is the current behavior?**\r\n\r\nI have a hook that depends on the `useContext` hook. Using it as follows works perfectly:\r\n\r\n```\r\nconst MyHookedComponent = () => {\r\n    const contextValue = useContext(DemoContext);\r\n\r\n    return (\r\n       //Do something with contextValue\r\n    )\r\n}\r\n\r\nconst MyContextProviderComponent = () => {\r\n\r\n   return (\r\n        <DemoContext.Provider value={someContextValue}>\r\n                <MyHookedComponent />\r\n         </DemoContext.Provider>\r\n   )\r\n}\r\n```\r\n\r\nWhat if I want to use the `getContext` hook inline in the same component that declares the `DemoContext.Provider` ?\r\n\r\n```\r\nconst MyContextProviderComponent = () => {\r\n       const contextValue = useContext(DemoContext); //Of course this fails due to the Context hierarchy.\r\n   return (\r\n        <DemoContext.Provider value={someContextValue}>\r\n                     //Do something with contextValue\r\n         </DemoContext.Provider>\r\n   )\r\n}\r\n```\r\n\r\nI seem to be unable to get this working.\r\n\r\n**Please note**:\r\n- I have a very good reason for solving my issue with Context and not passing props.\r\n- The implementation I show above looks trivial and dumb but it is the simplest way to illustrate what the use case is. In my implementation the `Provider` sits in a complex component that does a lot of data management which I really want to happen at this level.\r\n- The usual way to use this will be the first working version I noted above, it is only in the case where the user would want to use the hook inline inside the `Provider`.\r\n- I have searched for a couple of hours and tried various configurations without success, so my apologies if this is a duplicate of another issue.\r\n\r\n**What is the expected behavior?**\r\n\r\nAny method to consume context inline in the provider using the same re-usable hook without having to revert back to render props.\r\n\r\nI know I can solve this with **render props** but I am trying to convert an implementation using render props to hooks. I also know I can hoist the Context Provider higher up but in my implementation it would quadruple the code complexity to develop and maintain while introducing extra complexity into the user interface.\r\n\r\nAlso, by extracting the body inside the `Provider` to a new component I can also solve this but ideally I would not like to have a user do this for this use case.\r\n",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**    Not sure if it is a bug or a feature yet. This relates to Hooks.    It could also be that this is all expected behaviour and one of the workarounds mentioned is required.    **What is the current behavior?**    I have a hook that depends on the `useContext` hook. Using it as follows works perfectly:    ```  const MyHookedComponent = () => {      const contextValue = useContext(DemoContext);        return (         //Do something with contextValue      )  }    const MyContextProviderComponent = () => {       return (          <DemoContext.Provider value={someContextValue}>                  <MyHookedComponent />           </DemoContext.Provider>     )  }  ```    What if I want to use the `getContext` hook inline in the same component that declares the `DemoContext.Provider` ?    ```  const MyContextProviderComponent = () => {         const contextValue = useContext(DemoContext); //Of course this fails due to the Context hierarchy.     return (          <DemoContext.Provider value={someContextValue}>                       //Do something with contextValue           </DemoContext.Provider>     )  }  ```    I seem to be unable to get this working.    **Please note**:  - I have a very good reason for solving my issue with Context and not passing props.  - The implementation I show above looks trivial and dumb but it is the simplest way to illustrate what the use case is. In my implementation the `Provider` sits in a complex component that does a lot of data management which I really want to happen at this level.  - The usual way to use this will be the first working version I noted above, it is only in the case where the user would want to use the hook inline inside the `Provider`.  - I have searched for a couple of hours and tried various configurations without success, so my apologies if this is a duplicate of another issue.    **What is the expected behavior?**    Any method to consume context inline in the provider using the same re-usable hook without having to revert back to render props.    I know I can solve this with **render props** but I am trying to convert an implementation using render props to hooks. I also know I can hoist the Context Provider higher up but in my implementation it would quadruple the code complexity to develop and maintain while introducing extra complexity into the user interface.    Also, by extracting the body inside the `Provider` to a new component I can also solve this but ideally I would not like to have a user do this for this use case.",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**    Not sure if it is a bug or a feature yet. This relates to Hooks.    It could also be that this is all expected behaviour and one of the workarounds mentioned is required.    **What is the current behavior?**    I have a hook that depends on the `useContext` hook. Using it as follows works perfectly:        What if I want to use the `getContext` hook inline in the same component that declares the `DemoContext.Provider` ?        I seem to be unable to get this working.    **Please note**:  - I have a very good reason for solving my issue with Context and not passing props.  - The implementation I show above looks trivial and dumb but it is the simplest way to illustrate what the use case is. In my implementation the `Provider` sits in a complex component that does a lot of data management which I really want to happen at this level.  - The usual way to use this will be the first working version I noted above, it is only in the case where the user would want to use the hook inline inside the `Provider`.  - I have searched for a couple of hours and tried various configurations without success, so my apologies if this is a duplicate of another issue.    **What is the expected behavior?**    Any method to consume context inline in the provider using the same re-usable hook without having to revert back to render props.    I know I can solve this with **render props** but I am trying to convert an implementation using render props to hooks. I also know I can hoist the Context Provider higher up but in my implementation it would quadruple the code complexity to develop and maintain while introducing extra complexity into the user interface.    Also, by extracting the body inside the `Provider` to a new component I can also solve this but ideally I would not like to have a user do this for this use case.",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** Not sure if it is a bug or a feature yet. This relates to Hooks. It could also be that this is all expected behaviour and one of the workarounds mentioned is required. **What is the current behavior?** I have a hook that depends on the `useContext` hook. Using it as follows works perfectly: What if I want to use the `getContext` hook inline in the same component that declares the `DemoContext.Provider` ? I seem to be unable to get this working. **Please note**: - I have a very good reason for solving my issue with Context and not passing props. - The implementation I show above looks trivial and dumb but it is the simplest way to illustrate what the use case is. In my implementation the `Provider` sits in a complex component that does a lot of data management which I really want to happen at this level. - The usual way to use this will be the first working version I noted above, it is only in the case where the user would want to use the hook inline inside the `Provider`. - I have searched for a couple of hours and tried various configurations without success, so my apologies if this is a duplicate of another issue. **What is the expected behavior?** Any method to consume context inline in the provider using the same re-usable hook without having to revert back to render props. I know I can solve this with **render props** but I am trying to convert an implementation using render props to hooks. I also know I can hoist the Context Provider higher up but in my implementation it would quadruple the code complexity to develop and maintain while introducing extra complexity into the user interface. Also, by extracting the body inside the `Provider` to a new component I can also solve this but ideally I would not like to have a user do this for this use case.",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * sure bug feature yet . relates hook . could also expected behaviour one workarounds mentioned required . * * current behavior ? * * hook depends ` usecontext ` hook . using follows work perfectly : want use ` getcontext ` hook inline component declares ` democontext.provider ` ? seem unable get working . * * please note * * : - good reason solving issue context passing prop . - implementation show look trivial dumb simplest way illustrate use case . implementation ` provider ` sits complex component lot data management really want happen level . - usual way use first working version noted , case user would want use hook inline inside ` provider ` . - searched couple hour tried various configuration without success , apology duplicate another issue . * * expected behavior ? * * method consume context inline provider using re-usable hook without revert back render prop . know solve * * render prop * * trying convert implementation using render prop hook . also know hoist context provider higher implementation would quadruple code complexity develop maintain introducing extra complexity user interface . also , extracting body inside ` provider ` new component also solve ideally would like user use case .",
        "title_stopwords_removal_lemmatization": "unable use usecontext hook inline context.provider"
    },
    {
        "issue_id": 403481023,
        "title": "hooks: useContext with useState not updating",
        "label": [
            "Type: Question"
        ],
        "date": "2019-01-26T20:39:04Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nseems it's a **bug**. \ud83d\ude15 \r\n\r\n**What is the current behavior?**\r\n\r\nNested context provider and `useContext` hooks seems to be conflicting, updates get discarded.\r\n\r\n**What is the expected behavior?**\r\n\r\nWhen connecting to a context, it should update whenever it's `value` changes.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n- **react**: `18.8.0-alpha.1` (also reproduced on `16.7.0-alpha.0`)\r\n- **browser**: `chrome 71`\r\n- **os**: macOS Sierra\r\n\r\n---\r\n\r\n### more details\r\n\r\nWhile working on a cleanup of a localStorage \"connection\",\r\nI tried to mix 2 articles ([`[1]`](https://reactjs.org/docs/hooks-faq.html#how-to-avoid-passing-callbacks-down) & [`[2]`](https://reactjs.org/docs/context.html#updating-context-from-a-nested-component)) from the official react documentation, I've implemented it with hooks, but the value seems not to be passing through.\r\n\r\nI've put up a streamlined demo on [codesandbox `[3]`](https://codesandbox.io/s/0yzjr8vnrv).\r\n\r\nThe actual implementation is only a couple of lines more (parsing it from and stringifying it to JSON).\r\n\r\nWorkarounds that I found:\r\n- If I create a new function on each render around the `setValue` function, it actually works. \r\n  - but this goes against the advice on [`[1]`](https://reactjs.org/docs/hooks-faq.html#how-to-avoid-passing-callbacks-down) about avoiding creating  new values.\r\n- Migrate it to a class and use `componentDidUpdate` instead of `useEffect`.\r\n  - I'm actually using this right now, as it works. Including saving a reference to the function in the state.\r\n\r\n---\r\n\r\nIs there anything that shouldn't work on the code below? the effect gets triggered with the changes,\r\nbut the value doesn't get updated on the components that consume via hook. see repro code [`[3]`](https://codesandbox.io/s/0yzjr8vnrv)\r\n\r\n```javascript\r\nconst createLocalStorage = key => {\r\n    const initialValue = localStorage.getItem(key)\r\n    const ValueContext = createContext(initialValue)\r\n    const SetterContext = createContext(() => {})\r\n\r\n    const useStorage = () => [ValueContext, SetterContext].map(useContext)\r\n\r\n    const Provider = ({children}) => {\r\n        const [value, setValue] = useState(initialValue)\r\n\r\n        useEffect(\r\n            () => {\r\n                console.log('effect', value)\r\n                localStorage.setItem(key, value)\r\n            },\r\n            [value],\r\n        )\r\n\r\n        return (\r\n            <ValueContext.Provider value={value}>\r\n                <SetterContext.Provider value={setValue}>\r\n                    {children}\r\n                </SetterContext.Provider>\r\n            </ValueContext.Provider>\r\n        )\r\n    }\r\n\r\n    return [Provider, useStorage]\r\n}\r\n```\r\n\r\n`[1]`: https://reactjs.org/docs/hooks-faq.html#how-to-avoid-passing-callbacks-down\r\n`[2]`: https://reactjs.org/docs/context.html#updating-context-from-a-nested-component\r\n`[3]`: https://codesandbox.io/s/0yzjr8vnrv\r\n\r\n---\r\n\r\n![hlcecpq](https://user-images.githubusercontent.com/8649362/51789871-bea63f80-2174-11e9-9288-151510494a7e.gif)\r\n",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**    seems it's a **bug**. \ud83d\ude15     **What is the current behavior?**    Nested context provider and `useContext` hooks seems to be conflicting, updates get discarded.    **What is the expected behavior?**    When connecting to a context, it should update whenever it's `value` changes.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    - **react**: `18.8.0-alpha.1` (also reproduced on `16.7.0-alpha.0`)  - **browser**: `chrome 71`  - **os**: macOS Sierra    ---    ### more details    While working on a cleanup of a localStorage \"connection\",  I tried to mix 2 articles ([`[1]`](https://reactjs.org/docs/hooks-faq.html#how-to-avoid-passing-callbacks-down) & [`[2]`](https://reactjs.org/docs/context.html#updating-context-from-a-nested-component)) from the official react documentation, I've implemented it with hooks, but the value seems not to be passing through.    I've put up a streamlined demo on [codesandbox `[3]`](https://codesandbox.io/s/0yzjr8vnrv).    The actual implementation is only a couple of lines more (parsing it from and stringifying it to JSON).    Workarounds that I found:  - If I create a new function on each render around the `setValue` function, it actually works.     - but this goes against the advice on [`[1]`](https://reactjs.org/docs/hooks-faq.html#how-to-avoid-passing-callbacks-down) about avoiding creating  new values.  - Migrate it to a class and use `componentDidUpdate` instead of `useEffect`.    - I'm actually using this right now, as it works. Including saving a reference to the function in the state.    ---    Is there anything that shouldn't work on the code below? the effect gets triggered with the changes,  but the value doesn't get updated on the components that consume via hook. see repro code [`[3]`](https://codesandbox.io/s/0yzjr8vnrv)    ```javascript  const createLocalStorage = key => {      const initialValue = localStorage.getItem(key)      const ValueContext = createContext(initialValue)      const SetterContext = createContext(() => {})        const useStorage = () => [ValueContext, SetterContext].map(useContext)        const Provider = ({children}) => {          const [value, setValue] = useState(initialValue)            useEffect(              () => {                  console.log('effect', value)                  localStorage.setItem(key, value)              },              [value],          )            return (              <ValueContext.Provider value={value}>                  <SetterContext.Provider value={setValue}>                      {children}                  </SetterContext.Provider>              </ValueContext.Provider>          )      }        return [Provider, useStorage]  }  ```    `[1]`: https://reactjs.org/docs/hooks-faq.html#how-to-avoid-passing-callbacks-down  `[2]`: https://reactjs.org/docs/context.html#updating-context-from-a-nested-component  `[3]`: https://codesandbox.io/s/0yzjr8vnrv    ---    ![hlcecpq](https://user-images.githubusercontent.com/8649362/51789871-bea63f80-2174-11e9-9288-151510494a7e.gif)",
        "human_words": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**    seems it's a **bug**. \ud83d\ude15     **What is the current behavior?**    Nested context provider and `useContext` hooks seems to be conflicting, updates get discarded.    **What is the expected behavior?**    When connecting to a context, it should update whenever it's `value` changes.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    - **react**: `18.8.0-alpha.1` (also reproduced on `16.7.0-alpha.0`)  - **browser**: `chrome 71`  - **os**: macOS Sierra    ---    ### more details    While working on a cleanup of a localStorage \"connection\",  I tried to mix 2 articles ([`[1]`](https://reactjs.org/docs/hooks-faq.html#how-to-avoid-passing-callbacks-down) & [`[2]`](https://reactjs.org/docs/context.html#updating-context-from-a-nested-component)) from the official react documentation, I've implemented it with hooks, but the value seems not to be passing through.    I've put up a streamlined demo on [codesandbox `[3]`](https://codesandbox.io/s/0yzjr8vnrv).    The actual implementation is only a couple of lines more (parsing it from and stringifying it to JSON).    Workarounds that I found:  - If I create a new function on each render around the `setValue` function, it actually works.     - but this goes against the advice on [`[1]`](https://reactjs.org/docs/hooks-faq.html#how-to-avoid-passing-callbacks-down) about avoiding creating  new values.  - Migrate it to a class and use `componentDidUpdate` instead of `useEffect`.    - I'm actually using this right now, as it works. Including saving a reference to the function in the state.    ---    Is there anything that shouldn't work on the code below? the effect gets triggered with the changes,  but the value doesn't get updated on the components that consume via hook. see repro code [`[3]`](https://codesandbox.io/s/0yzjr8vnrv)        `[1]`: https://reactjs.org/docs/hooks-faq.html#how-to-avoid-passing-callbacks-down  `[2]`: https://reactjs.org/docs/context.html#updating-context-from-a-nested-component  `[3]`: https://codesandbox.io/s/0yzjr8vnrv    ---    ![hlcecpq](https://user-images.githubusercontent.com/8649362/51789871-bea63f80-2174-11e9-9288-151510494a7e.gif)",
        "human_words_regrex": " **Do you want to request a *feature* or report a *bug*?** seems it's a **bug**. \ud83d\ude15 **What is the current behavior?** Nested context provider and `useContext` hooks seems to be conflicting, updates get discarded. **What is the expected behavior?** When connecting to a context, it should update whenever it's `value` changes. **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** - **react**: `18.8.0-alpha.1` (also reproduced on `16.7.0-alpha.0`) - **browser**: `chrome 71` - **os**: macOS Sierra --- ### more details While working on a cleanup of a localStorage \"connection\", I tried to mix 2 articles ( & ) from the official react documentation, I've implemented it with hooks, but the value seems not to be passing through. I've put up a streamlined demo on . The actual implementation is only a couple of lines more (parsing it from and stringifying it to JSON). Workarounds that I found: - If I create a new function on each render around the `setValue` function, it actually works. - but this goes against the advice on  about avoiding creating new values. - Migrate it to a class and use `componentDidUpdate` instead of `useEffect`. - I'm actually using this right now, as it works. Including saving a reference to the function in the state. --- Is there anything that shouldn't work on the code below? the effect gets triggered with the changes, but the value doesn't get updated on the components that consume via hook. see repro code  `",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * seems 's * * bug * * . \ud83d\ude15 * * current behavior ? * * nested context provider ` usecontext ` hook seems conflicting , update get discarded . * * expected behavior ? * * connecting context , update whenever 's ` value ` change . * * version react , browser / o affected issue ? work previous version react ? * * - * * react * * : ` 18.8.0-alpha.1 ` ( also reproduced ` 16.7.0-alpha.0 ` ) - * * browser * * : ` chrome 71 ` - * * o * * : macos sierra -- - # # # detail working cleanup localstorage `` connection '' , tried mix 2 article ( & ) official react documentation , 've implemented hook , value seems passing . 've put streamlined demo . actual implementation couple line ( parsing stringifying json ) . workarounds found : - create new function render around ` setvalue ` function , actually work . - go advice avoiding creating new value . - migrate class use ` componentdidupdate ` instead ` useeffect ` . - 'm actually using right , work . including saving reference function state . -- - anything n't work code ? effect get triggered change , value n't get updated component consume via hook . see repro code `",
        "title_stopwords_removal_lemmatization": "hook : usecontext usestate updating"
    },
    {
        "issue_id": 402125091,
        "title": "react-router can't pass Hooks",
        "label": [
            "Type: Question"
        ],
        "date": "2019-01-23T08:33:52Z",
        "status": "closed",
        "description": "This is actually an issue of react-router https://github.com/ReactTraining/react-router/issues/6555 but since it's the major routing lib I want to make you aware that there are issues when you want to pass custom hooks via props through your component tree.\r\n\r\nSince routing (with react-router) is a regular use case and React Hooks is an easy/elegant way to manage state through the app they should work together. Otherwise React Hooks is about creating Hooks limited to just one component and you cannot share state/hooks component-wide. Maybe I didn't get something right and there is a way...",
        "remove_template_description": "This is actually an issue of react-router https://github.com/ReactTraining/react-router/issues/6555 but since it's the major routing lib I want to make you aware that there are issues when you want to pass custom hooks via props through your component tree.    Since routing (with react-router) is a regular use case and React Hooks is an easy/elegant way to manage state through the app they should work together. Otherwise React Hooks is about creating Hooks limited to just one component and you cannot share state/hooks component-wide. Maybe I didn't get something right and there is a way...",
        "human_words": "This is actually an issue of react-router https://github.com/ReactTraining/react-router/issues/6555 but since it's the major routing lib I want to make you aware that there are issues when you want to pass custom hooks via props through your component tree.    Since routing (with react-router) is a regular use case and React Hooks is an easy/elegant way to manage state through the app they should work together. Otherwise React Hooks is about creating Hooks limited to just one component and you cannot share state/hooks component-wide. Maybe I didn't get something right and there is a way...",
        "human_words_regrex": "This is actually an issue of react-router  but since it's the major routing lib I want to make you aware that there are issues when you want to pass custom hooks via props through your component tree. Since routing (with react-router) is a regular use case and React Hooks is an easy/elegant way to manage state through the app they should work together. Otherwise React Hooks is about creating Hooks limited to just one component and you cannot share state/hooks component-wide. Maybe I didn't get something right and there is a way...",
        "human_words_stopwords_removal_lemmatization": "actually issue react-router since 's major routing lib want make aware issue want pas custom hook via prop component tree . since routing ( react-router ) regular use case react hook easy/elegant way manage state app work together . otherwise react hook creating hook limited one component share state/hooks component-wide . maybe n't get something right way ...",
        "title_stopwords_removal_lemmatization": "react-router ca n't pas hook"
    },
    {
        "issue_id": 400770259,
        "title": "componentDidMount inside a class causing a memory leak",
        "label": [
            "Type: Question",
            "Resolution: Stale"
        ],
        "date": "2019-01-18T15:23:59Z",
        "status": "closed",
        "description": "Hi,\r\n\r\nI have a very weird memory leak that seems to be related to componentDidMount declaration. Memory is not freed after unmounting component.\r\n\r\n### Used code\r\nVersion: react 16.7\r\nMode: developper or production (same behaviour)\r\n\r\n\r\n\r\nHere is the code I use to hide or display a list of items  \r\n```\r\nclass Item extends React.Component {\r\n     componentDidMount() {\r\n\r\n    }\r\n      render() {\r\n            return <div>test item</div>;\r\n      }\r\n}\r\n\r\nclass Items extends React.Component {\r\n      constructor(props) {\r\n            super(props);\r\n            this.state =  {};\r\n      }\r\n\r\n      renderList() {\r\n            let items = [];\r\n            for(var i = 0; i < 4000; i++) {\r\n                  items.push( <Item key={i} />);\r\n            };\r\n\r\n            return items;\r\n      }\r\n\r\n      onDisplay = ()=>{\r\n            this.setState({display: true});\r\n      }\r\n      onHide = ()=>{\r\n            this.setState({display: false});\r\n      }\r\n\r\n      render() {      \r\n            return <div>\r\n                  <div key=\"display\" onClick={this.onDisplay}>Display</div>\r\n                  <div key=\"hide\" onClick={this.onHide}>Hide</div>\r\n                  {this.state.display ? this.renderList() : null}\r\n            </div>\r\n      }\r\n}\r\nReactDOM.render(<Items />, document.getElementById(\"app\"));\r\n```\r\n\r\n### Steps to reproduce\r\n\r\nCASE 1\r\nUse google chrome and display the performance monitor to study JS Heap size and Dom Nodes.\r\n1) Click on display => the list of 4000 items is displayed\r\n2) Click on \"hide\" => the list is unmounted\r\nWhen you look at performance monitor, you can see that around 8000 nodes are still in memory (and JS Heap is higher than before mounting components as well).\r\nIf you redo 1) and 2) multiple times, you will see nodes going to 16000 then going back to 8000, ... etc.\r\n\r\nThus, memory is freed after the first unmount operation, but the first one is not. The weird thing is that if you do 1), 2), 2), 2), then it is freed.\r\n\r\nCASE 2\r\nUse the same code but remove the \"componentDidMount\" function in the class.\r\nDo 1) and 2), then after few secondes memory is freed automatically (nodes and js heap)  => expected behaviour\r\n\r\n### Behaviour expected\r\n\r\nI was expected that the memory would be freed after unmounting a component, like in the 2nd case. That's a real issue when you mount.unmount big list multiple times, then js heap is going very high.\r\n\r\n\r\n",
        "remove_template_description": "Hi,    I have a very weird memory leak that seems to be related to componentDidMount declaration. Memory is not freed after unmounting component.    ### Used code  Version: react 16.7  Mode: developper or production (same behaviour)        Here is the code I use to hide or display a list of items    ```  class Item extends React.Component {       componentDidMount() {        }        render() {              return <div>test item</div>;        }  }    class Items extends React.Component {        constructor(props) {              super(props);              this.state =  {};        }          renderList() {              let items = [];              for(var i = 0; i < 4000; i++) {                    items.push( <Item key={i} />);              };                return items;        }          onDisplay = ()=>{              this.setState({display: true});        }        onHide = ()=>{              this.setState({display: false});        }          render() {                    return <div>                    <div key=\"display\" onClick={this.onDisplay}>Display</div>                    <div key=\"hide\" onClick={this.onHide}>Hide</div>                    {this.state.display ? this.renderList() : null}              </div>        }  }  ReactDOM.render(<Items />, document.getElementById(\"app\"));  ```    ### Steps to reproduce    CASE 1  Use google chrome and display the performance monitor to study JS Heap size and Dom Nodes.  1) Click on display => the list of 4000 items is displayed  2) Click on \"hide\" => the list is unmounted  When you look at performance monitor, you can see that around 8000 nodes are still in memory (and JS Heap is higher than before mounting components as well).  If you redo 1) and 2) multiple times, you will see nodes going to 16000 then going back to 8000, ... etc.    Thus, memory is freed after the first unmount operation, but the first one is not. The weird thing is that if you do 1), 2), 2), 2), then it is freed.    CASE 2  Use the same code but remove the \"componentDidMount\" function in the class.  Do 1) and 2), then after few secondes memory is freed automatically (nodes and js heap)  => expected behaviour    ### Behaviour expected    I was expected that the memory would be freed after unmounting a component, like in the 2nd case. That's a real issue when you mount.unmount big list multiple times, then js heap is going very high.",
        "human_words": "Hi,    I have a very weird memory leak that seems to be related to componentDidMount declaration. Memory is not freed after unmounting component.    ### Used code  Version: react 16.7  Mode: developper or production (same behaviour)        Here is the code I use to hide or display a list of items        ### Steps to reproduce    CASE 1  Use google chrome and display the performance monitor to study JS Heap size and Dom Nodes.  1) Click on display => the list of 4000 items is displayed  2) Click on \"hide\" => the list is unmounted  When you look at performance monitor, you can see that around 8000 nodes are still in memory (and JS Heap is higher than before mounting components as well).  If you redo 1) and 2) multiple times, you will see nodes going to 16000 then going back to 8000, ... etc.    Thus, memory is freed after the first unmount operation, but the first one is not. The weird thing is that if you do 1), 2), 2), 2), then it is freed.    CASE 2  Use the same code but remove the \"componentDidMount\" function in the class.  Do 1) and 2), then after few secondes memory is freed automatically (nodes and js heap)  => expected behaviour    ### Behaviour expected    I was expected that the memory would be freed after unmounting a component, like in the 2nd case. That's a real issue when you mount.unmount big list multiple times, then js heap is going very high.",
        "human_words_regrex": "Hi, I have a very weird memory leak that seems to be related to componentDidMount declaration. Memory is not freed after unmounting component. ### Used code Version: react 16.7 Mode: developper or production (same behaviour) Here is the code I use to hide or display a list of items ### Steps to reproduce CASE 1 Use google chrome and display the performance monitor to study JS Heap size and Dom Nodes. 1) Click on display => the list of 4000 items is displayed 2) Click on \"hide\" => the list is unmounted When you look at performance monitor, you can see that around 8000 nodes are still in memory (and JS Heap is higher than before mounting components as well). If you redo 1) and 2) multiple times, you will see nodes going to 16000 then going back to 8000, ... etc. Thus, memory is freed after the first unmount operation, but the first one is not. The weird thing is that if you do 1), 2), 2), 2), then it is freed. CASE 2 Use the same code but remove the \"componentDidMount\" function in the class. Do 1) and 2), then after few secondes memory is freed automatically (nodes and js heap) => expected behaviour ### Behaviour expected I was expected that the memory would be freed after unmounting a component, like in the 2nd case. That's a real issue when you mount.unmount big list multiple times, then js heap is going very high.",
        "human_words_stopwords_removal_lemmatization": "hi , weird memory leak seems related componentdidmount declaration . memory freed unmounting component . # # # used code version : react 16.7 mode : developper production ( behaviour ) code use hide display list item # # # step reproduce case 1 use google chrome display performance monitor study j heap size dom node . 1 ) click display = > list 4000 item displayed 2 ) click `` hide '' = > list unmounted look performance monitor , see around 8000 node still memory ( j heap higher mounting component well ) . redo 1 ) 2 ) multiple time , see node going 16000 going back 8000 , ... etc . thus , memory freed first unmount operation , first one . weird thing 1 ) , 2 ) , 2 ) , 2 ) , freed . case 2 use code remove `` componentdidmount '' function class . 1 ) 2 ) , secondes memory freed automatically ( node j heap ) = > expected behaviour # # # behaviour expected expected memory would freed unmounting component , like 2nd case . 's real issue mount.unmount big list multiple time , j heap going high .",
        "title_stopwords_removal_lemmatization": "componentdidmount inside class causing memory leak"
    },
    {
        "issue_id": 400553976,
        "title": "How will react solve nested contexts?",
        "label": [
            "Type: Question"
        ],
        "date": "2019-01-18T03:09:42Z",
        "status": "closed",
        "description": "```js\r\n<context1.Provider value={value1}>\r\n  <context2.Provider value={value2}>\r\n    <context3.Provider value={value3}>\r\n      <context4.Provider value={value4}>\r\n        <context5.Provider value={value5}>\r\n\r\n        </context5.Provider>\r\n      </context4.Provider>\r\n    </context3.Provider>\r\n  </context2.Provider>\r\n</context1.Provider>\r\n```\r\n```js\r\n<context1.Consumer>\r\n  {value1 => <context2.Consumer>\r\n    {value2 => <context3.Consumer>\r\n      {value3 => <context4.Consumer>\r\n        {value4 => <context5.Consumer>\r\n          {value5 => (\r\n            null\r\n          )}\r\n        </context5.Consumer>}\r\n      </context4.Consumer>}\r\n    </context3.Consumer>}\r\n  </context2.Consumer>}\r\n</context1.Consumer>\r\n```",
        "remove_template_description": "```js  <context1.Provider value={value1}>    <context2.Provider value={value2}>      <context3.Provider value={value3}>        <context4.Provider value={value4}>          <context5.Provider value={value5}>            </context5.Provider>        </context4.Provider>      </context3.Provider>    </context2.Provider>  </context1.Provider>  ```  ```js  <context1.Consumer>    {value1 => <context2.Consumer>      {value2 => <context3.Consumer>        {value3 => <context4.Consumer>          {value4 => <context5.Consumer>            {value5 => (              null            )}          </context5.Consumer>}        </context4.Consumer>}      </context3.Consumer>}    </context2.Consumer>}  </context1.Consumer>  ```",
        "human_words": "  ",
        "human_words_regrex": " ",
        "human_words_stopwords_removal_lemmatization": "",
        "title_stopwords_removal_lemmatization": "react solve nested context ?"
    },
    {
        "issue_id": 399467170,
        "title": "What\u2019s the difference between fiber reconciler sync mode and the old react 15 stack reconciler? Why does performance boosts so much?",
        "label": [
            "Type: Question"
        ],
        "date": "2019-01-15T18:04:28Z",
        "status": "closed",
        "description": "Since performance of react 16 boosts so much and thanks to those aweosome talks on YouTube explained fiber so detailed, I hardly figured out even the latest version of react 16 is still in sync mode, no features like time slicing are turned on by default.\r\n\r\nThen I wondered why the perfmance is pretty good compared with react 15 even though? \r\n\r\nTrying to get some info on google, but it seems like no one really looked into this question. Even react 16 is shipped with this \u201cfake\u201d fiber mode for such a long time, it is not well documented or explained on the official website.\r\n\r\nCan someone give me some ideas about this please? ",
        "remove_template_description": "Since performance of react 16 boosts so much and thanks to those aweosome talks on YouTube explained fiber so detailed, I hardly figured out even the latest version of react 16 is still in sync mode, no features like time slicing are turned on by default.    Then I wondered why the perfmance is pretty good compared with react 15 even though?     Trying to get some info on google, but it seems like no one really looked into this question. Even react 16 is shipped with this \u201cfake\u201d fiber mode for such a long time, it is not well documented or explained on the official website.    Can someone give me some ideas about this please?",
        "human_words": "Since performance of react 16 boosts so much and thanks to those aweosome talks on YouTube explained fiber so detailed, I hardly figured out even the latest version of react 16 is still in sync mode, no features like time slicing are turned on by default.    Then I wondered why the perfmance is pretty good compared with react 15 even though?     Trying to get some info on google, but it seems like no one really looked into this question. Even react 16 is shipped with this \u201cfake\u201d fiber mode for such a long time, it is not well documented or explained on the official website.    Can someone give me some ideas about this please?",
        "human_words_regrex": "Since performance of react 16 boosts so much and thanks to those aweosome talks on YouTube explained fiber so detailed, I hardly figured out even the latest version of react 16 is still in sync mode, no features like time slicing are turned on by default. Then I wondered why the perfmance is pretty good compared with react 15 even though? Trying to get some info on google, but it seems like no one really looked into this question. Even react 16 is shipped with this \u201cfake\u201d fiber mode for such a long time, it is not well documented or explained on the official website. Can someone give me some ideas about this please?",
        "human_words_stopwords_removal_lemmatization": "since performance react 16 boost much thanks aweosome talk youtube explained fiber detailed , hardly figured even latest version react 16 still sync mode , feature like time slicing turned default . wondered perfmance pretty good compared react 15 even though ? trying get info google , seems like one really looked question . even react 16 shipped \u201c fake \u201d fiber mode long time , well documented explained official website . someone give idea please ?",
        "title_stopwords_removal_lemmatization": "\u2019 difference fiber reconciler sync mode old react 15 stack reconciler ? performance boost much ?"
    },
    {
        "issue_id": 397106791,
        "title": "Unable to catch Error emitted in componentDidMount",
        "label": [
            "Type: Question"
        ],
        "date": "2019-01-08T22:06:01Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\nBug report.\r\n\r\n**What is the current behavior?**\r\nError boundary handles `Error` emitted in `componentDidMount` and somewhy **rethrows** it.\r\n\r\n```javascript\r\nclass ErrorBoundary extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {error: null, errorInfo: null};\r\n  }\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    this.setState({\r\n      error: error,\r\n      errorInfo: errorInfo,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.errorInfo) {\r\n    \treturn (\r\n      \t    <div>Ive handled an error!</div>\r\n        );\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nclass MyComponent extends React.Component {\r\n  componentDidMount(){\r\n  \tthis.setState(()=>{\r\n    \t    throw new Error('This error somewhy was rethrown!')\r\n        });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n    \t<div>This component is awesome</div>\r\n    );\r\n  }\r\n}\r\n\r\nReactDOM.render((<ErrorBoundary><MyComponent/></ErrorBoundary>), document.getElementById('AppRoot'));\r\n```\r\n\r\nhttps://jsfiddle.net/xobotyi/96eqo8zp/\r\n\r\n**What is the expected behavior?**\r\nIt should not rethrow the error.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact: 16.7.0\r\nOS: Win 10 x64\r\nBrowser: Chromium 71.0.3578",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**  Bug report.    **What is the current behavior?**  Error boundary handles `Error` emitted in `componentDidMount` and somewhy **rethrows** it.    ```javascript  class ErrorBoundary extends React.Component {    constructor(props) {      super(props);      this.state = {error: null, errorInfo: null};    }      componentDidCatch(error, errorInfo) {      this.setState({        error: error,        errorInfo: errorInfo,      });    }      render() {      if (this.state.errorInfo) {      \treturn (        \t    <div>Ive handled an error!</div>          );      }        return this.props.children;    }  }    class MyComponent extends React.Component {    componentDidMount(){    \tthis.setState(()=>{      \t    throw new Error('This error somewhy was rethrown!')          });    }      render() {      return (      \t<div>This component is awesome</div>      );    }  }    ReactDOM.render((<ErrorBoundary><MyComponent/></ErrorBoundary>), document.getElementById('AppRoot'));  ```    https://jsfiddle.net/xobotyi/96eqo8zp/    **What is the expected behavior?**  It should not rethrow the error.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  React: 16.7.0  OS: Win 10 x64  Browser: Chromium 71.0.3578",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**  Bug report.    **What is the current behavior?**  Error boundary handles `Error` emitted in `componentDidMount` and somewhy **rethrows** it.        https://jsfiddle.net/xobotyi/96eqo8zp/    **What is the expected behavior?**  It should not rethrow the error.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  React: 16.7.0  OS: Win 10 x64  Browser: Chromium 71.0.3578",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** Bug report. **What is the current behavior?** Error boundary handles `Error` emitted in `componentDidMount` and somewhy **rethrows** it.  **What is the expected behavior?** It should not rethrow the error. **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** React: 16.7.0 OS: Win 10 x64 Browser: Chromium 71.0.3578",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * bug report . * * current behavior ? * * error boundary handle ` error ` emitted ` componentdidmount ` somewhy * * rethrows * * . * * expected behavior ? * * rethrow error . * * version react , browser / o affected issue ? work previous version react ? * * react : 16.7.0 o : win 10 x64 browser : chromium 71.0.3578",
        "title_stopwords_removal_lemmatization": "unable catch error emitted componentdidmount"
    },
    {
        "issue_id": 394071472,
        "title": "warn:It looks like Index is reassigning its own `this.props` while rendering,This is not supported and can lead to confusing bugs.",
        "label": [
            "Type: Question",
            "Resolution: Needs More Information"
        ],
        "date": "2018-12-26T03:12:15Z",
        "status": "closed",
        "description": " when I try to update react from 15.4.1 to 16.7.0\uff0cwhat's wrong with this?\r\n",
        "remove_template_description": "when I try to update react from 15.4.1 to 16.7.0\uff0cwhat's wrong with this?",
        "human_words": "when I try to update react from 15.4.1 to 16.7.0\uff0cwhat's wrong with this?",
        "human_words_regrex": "when I try to update react from 15.4.1 to 16.7.0\uff0cwhat's wrong with this?",
        "human_words_stopwords_removal_lemmatization": "try update react 15.4.1 16.7.0\uff0cwhat 's wrong ?",
        "title_stopwords_removal_lemmatization": "warn : look like index reassigning ` this.props ` rendering , supported lead confusing bug ."
    },
    {
        "issue_id": 393051225,
        "title": "useCallback/useEffect support custom comparator",
        "label": [
            "Type: Question",
            "Component: Hooks"
        ],
        "date": "2018-12-20T13:40:35Z",
        "status": "closed",
        "description": "Currently we can pass an array as second argument when using `useCallback` or `useEffect` like below:\r\n\r\n```js\r\nuseCallback(()=> {\r\n  doSth(a, b)\r\n}, [a, b]) // how to do deep equal if a is an object ?\r\n```\r\n\r\nThe problem is it only compare array items with `===`,  it there any way to compare complex object ? \r\n\r\nSupport custom comparator as third argument looks not bad:\r\n\r\n```js\r\nuseCallback(()=> {\r\n  doSth(a, b)\r\n  }, \r\n  [complexObject], \r\n  (item, previousItem)=> { //custom compare logic, return true || false here }\r\n)\r\n```\r\n",
        "remove_template_description": "Currently we can pass an array as second argument when using `useCallback` or `useEffect` like below:    ```js  useCallback(()=> {    doSth(a, b)  }, [a, b]) // how to do deep equal if a is an object ?  ```    The problem is it only compare array items with `===`,  it there any way to compare complex object ?     Support custom comparator as third argument looks not bad:    ```js  useCallback(()=> {    doSth(a, b)    },     [complexObject],     (item, previousItem)=> { //custom compare logic, return true || false here }  )  ```",
        "human_words": "Currently we can pass an array as second argument when using `useCallback` or `useEffect` like below:        The problem is it only compare array items with `===`,  it there any way to compare complex object ?     Support custom comparator as third argument looks not bad:    ",
        "human_words_regrex": "Currently we can pass an array as second argument when using `useCallback` or `useEffect` like below: The problem is it only compare array items with `===`, it there any way to compare complex object ? Support custom comparator as third argument looks not bad: ",
        "human_words_stopwords_removal_lemmatization": "currently pas array second argument using ` usecallback ` ` useeffect ` like : problem compare array item ` === ` , way compare complex object ? support custom comparator third argument look bad :",
        "title_stopwords_removal_lemmatization": "usecallback/useeffect support custom comparator"
    },
    {
        "issue_id": 392533046,
        "title": "Q: When should you NOT use React memo?",
        "label": [
            "Type: Question",
            "Component: Hooks"
        ],
        "date": "2018-12-19T10:24:12Z",
        "status": "closed",
        "description": "I've been playing around with React 16.6.0 recently and I love the idea of React Memo, but I've been unable to find anything regarding scenarios best suited to implement it. The React docs (https://reactjs.org/docs/react-api.html#reactmemo) don't seem to suggest any implications from just throwing it on all of your functional components. Because it does a shallow comparison to figure out if it needs to re-render, **is there ever going to be a situation that negatively impacts performance**?\r\n\r\nAnd second question: as long as everything remains pure, is there ever a situation to not wrap a functional component with React Memo?\r\n\r\nThank you.",
        "remove_template_description": "I've been playing around with React 16.6.0 recently and I love the idea of React Memo, but I've been unable to find anything regarding scenarios best suited to implement it. The React docs (https://reactjs.org/docs/react-api.html#reactmemo) don't seem to suggest any implications from just throwing it on all of your functional components. Because it does a shallow comparison to figure out if it needs to re-render, **is there ever going to be a situation that negatively impacts performance**?    And second question: as long as everything remains pure, is there ever a situation to not wrap a functional component with React Memo?    Thank you.",
        "human_words": "I've been playing around with React 16.6.0 recently and I love the idea of React Memo, but I've been unable to find anything regarding scenarios best suited to implement it. The React docs (https://reactjs.org/docs/react-api.html#reactmemo) don't seem to suggest any implications from just throwing it on all of your functional components. Because it does a shallow comparison to figure out if it needs to re-render, **is there ever going to be a situation that negatively impacts performance**?    And second question: as long as everything remains pure, is there ever a situation to not wrap a functional component with React Memo?    Thank you.",
        "human_words_regrex": "I've been playing around with React 16.6.0 recently and I love the idea of React Memo, but I've been unable to find anything regarding scenarios best suited to implement it. The React docs ( don't seem to suggest any implications from just throwing it on all of your functional components. Because it does a shallow comparison to figure out if it needs to re-render, **is there ever going to be a situation that negatively impacts performance**? And second question: as long as everything remains pure, is there ever a situation to not wrap a functional component with React Memo? Thank you.",
        "human_words_stopwords_removal_lemmatization": "'ve playing around react 16.6.0 recently love idea react memo , 've unable find anything regarding scenario best suited implement . react doc ( n't seem suggest implication throwing functional component . shallow comparison figure need re-render , * * ever going situation negatively impact performance * * ? second question : long everything remains pure , ever situation wrap functional component react memo ? thank .",
        "title_stopwords_removal_lemmatization": "q : use react memo ?"
    },
    {
        "issue_id": 386443099,
        "title": "setState hook inside useEffect can cause unavoidable warning  Can't perform a React state update",
        "label": [
            "Type: Question"
        ],
        "date": "2018-12-01T09:52:16Z",
        "status": "closed",
        "description": "**BUG**\r\n\r\n**What is the current behavior?**\r\n\r\nExample: https://codesandbox.io/s/6y1x2zr21n clicking on OK button cause `Warning: Can't perform a React state update on an unmounted component.`\r\n\r\nThe problem that unsubscribe is called during B event `setVisible(v => false);` call, see logs:\r\n\r\n```\r\nSET VISIBLE BEFORE \r\nUNSUBSCRIBE \r\nWarning: Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in a useEffect cleanup function.\r\n    in Child (created by Holder)\r\nSET VISIBLE AFTER \r\n```\r\n\r\nIn our case we have this even without RAF call, but on `transitionend` DOM event.\r\n(It's occurred randomly and rare in our codebase as transitionend event should be called exactly at needed time, but example showed what happens)\r\nSeems like it occurred only if you have a `setState` call during useEffect callback like `setRefresh(v => v + 1);` (_inside provided code_) (_after rewriting our codebase to avoid setState calls in useEffect the error has gone_)\r\n\r\n\r\nCode\r\n```javascript\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport mitt from \"mitt\";\r\n\r\nconst emitter = mitt();\r\n\r\nconst Child = () => {\r\n  const [visible, setVisible] = React.useReducer((s, a) => a, true);\r\n  React.useEffect(() => {\r\n    const handle = () => {\r\n      console.log(\"SET VISIBLE BEFORE\");\r\n      setVisible(v => false); // <--- THIS CALL CAUSES UNSUBSCRIBE AND WARNING ABOUT STATE\r\n      console.log(\"SET VISIBLE AFTER\");\r\n    };\r\n    emitter.on(\"B\", handle);\r\n    return () => {\r\n      console.log(\"UNSUBSCRIBE\");\r\n      emitter.off(\"B\", handle);\r\n    };\r\n  }, []);\r\n\r\n  return <div>{visible && <h1>CHILD TEXT</h1>}</div>;\r\n};\r\n\r\nconst Holder = () => {\r\n  const [refresh, setRefresh] = React.useState(0);\r\n  const visible = React.useRef(true);\r\n  React.useEffect(() => {\r\n    if (refresh === 1) {\r\n      visible.current = false;\r\n      setRefresh(v => v + 1); // <--- This state change from effect caused problems\r\n    }\r\n    const handle = () => {\r\n      setRefresh(v => v + 1);\r\n    };\r\n    emitter.on(\"A\", handle);\r\n    return () => {\r\n      emitter.off(\"A\", handle);\r\n    };\r\n  });\r\n\r\n  return <div>{visible.current && <Child />}</div>;\r\n};\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Holder />\r\n      <button\r\n        onClick={() => {\r\n          emitter.emit(\"A\", {});\r\n\r\n          requestAnimationFrame(() => {\r\n            emitter.emit(\"B\", {});\r\n          });\r\n        }}\r\n      >\r\n        OK\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\n\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nDo not provide warning if unsubscription is called during \"setState\" call.\r\n\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.7.0-alpha.2\r\n",
        "remove_template_description": "**BUG**    **What is the current behavior?**    Example: https://codesandbox.io/s/6y1x2zr21n clicking on OK button cause `Warning: Can't perform a React state update on an unmounted component.`    The problem that unsubscribe is called during B event `setVisible(v => false);` call, see logs:    ```  SET VISIBLE BEFORE   UNSUBSCRIBE   Warning: Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in a useEffect cleanup function.      in Child (created by Holder)  SET VISIBLE AFTER   ```    In our case we have this even without RAF call, but on `transitionend` DOM event.  (It's occurred randomly and rare in our codebase as transitionend event should be called exactly at needed time, but example showed what happens)  Seems like it occurred only if you have a `setState` call during useEffect callback like `setRefresh(v => v + 1);` (_inside provided code_) (_after rewriting our codebase to avoid setState calls in useEffect the error has gone_)      Code  ```javascript  import React from \"react\";  import ReactDOM from \"react-dom\";  import mitt from \"mitt\";    const emitter = mitt();    const Child = () => {    const [visible, setVisible] = React.useReducer((s, a) => a, true);    React.useEffect(() => {      const handle = () => {        console.log(\"SET VISIBLE BEFORE\");        setVisible(v => false); // <--- THIS CALL CAUSES UNSUBSCRIBE AND WARNING ABOUT STATE        console.log(\"SET VISIBLE AFTER\");      };      emitter.on(\"B\", handle);      return () => {        console.log(\"UNSUBSCRIBE\");        emitter.off(\"B\", handle);      };    }, []);      return <div>{visible && <h1>CHILD TEXT</h1>}</div>;  };    const Holder = () => {    const [refresh, setRefresh] = React.useState(0);    const visible = React.useRef(true);    React.useEffect(() => {      if (refresh === 1) {        visible.current = false;        setRefresh(v => v + 1); // <--- This state change from effect caused problems      }      const handle = () => {        setRefresh(v => v + 1);      };      emitter.on(\"A\", handle);      return () => {        emitter.off(\"A\", handle);      };    });      return <div>{visible.current && <Child />}</div>;  };    function App() {    return (      <div>        <Holder />        <button          onClick={() => {            emitter.emit(\"A\", {});              requestAnimationFrame(() => {              emitter.emit(\"B\", {});            });          }}        >          OK        </button>      </div>    );  }    const rootElement = document.getElementById(\"root\");  ReactDOM.render(<App />, rootElement);    ```    **What is the expected behavior?**    Do not provide warning if unsubscription is called during \"setState\" call.      **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    React 16.7.0-alpha.2",
        "human_words": "**BUG**    **What is the current behavior?**    Example: https://codesandbox.io/s/6y1x2zr21n clicking on OK button cause `Warning: Can't perform a React state update on an unmounted component.`    The problem that unsubscribe is called during B event `setVisible(v => false);` call, see logs:        In our case we have this even without RAF call, but on `transitionend` DOM event.  (It's occurred randomly and rare in our codebase as transitionend event should be called exactly at needed time, but example showed what happens)  Seems like it occurred only if you have a `setState` call during useEffect callback like `setRefresh(v => v + 1);` (_inside provided code_) (_after rewriting our codebase to avoid setState calls in useEffect the error has gone_)      Code      **What is the expected behavior?**    Do not provide warning if unsubscription is called during \"setState\" call.      **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    React 16.7.0-alpha.2",
        "human_words_regrex": "**BUG** **What is the current behavior?** Example:  clicking on OK button cause `Warning: Can't perform a React state update on an unmounted component.` The problem that unsubscribe is called during B event `setVisible(v => false);` call, see logs: In our case we have this even without RAF call, but on `transitionend` DOM event. (It's occurred randomly and rare in our codebase as transitionend event should be called exactly at needed time, but example showed what happens) Seems like it occurred only if you have a `setState` call during useEffect callback like `setRefresh(v => v + 1);` (_inside provided code_) (_after rewriting our codebase to avoid setState calls in useEffect the error has gone_) Code **What is the expected behavior?** Do not provide warning if unsubscription is called during \"setState\" call. **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** React 16.7.0-alpha.2",
        "human_words_stopwords_removal_lemmatization": "* * bug * * * * current behavior ? * * example : clicking ok button cause ` warning : ca n't perform react state update unmounted component. ` problem unsubscribe called b event ` setvisible ( v = > false ) ; ` call , see log : case even without raf call , ` transitionend ` dom event . ( 's occurred randomly rare codebase transitionend event called exactly needed time , example showed happens ) seems like occurred ` setstate ` call useeffect callback like ` setrefresh ( v = > v + 1 ) ; ` ( _inside provided code_ ) ( _after rewriting codebase avoid setstate call useeffect error gone_ ) code * * expected behavior ? * * provide warning unsubscription called `` setstate '' call . * * version react , browser / o affected issue ? work previous version react ? * * react 16.7.0-alpha.2",
        "title_stopwords_removal_lemmatization": "setstate hook inside useeffect cause unavoidable warning ca n't perform react state update"
    },
    {
        "issue_id": 384043563,
        "title": "\u8bf7\u95ee\u4e0d\u505a\u4efb\u4f55\u5904\u7406\uff0creact\u53ef\u4ee5\u517c\u5bb9\u5230IE\u591a\u5c11",
        "label": [
            "Type: Question"
        ],
        "date": "2018-11-25T03:26:14Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\n**What is the current behavior?**\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n**What is the expected behavior?**\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**    **What is the current behavior?**    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**    **What is the expected behavior?**    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**",
        "human_words": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**    **What is the current behavior?**    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**    **What is the expected behavior?**    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**",
        "human_words_regrex": " **Do you want to request a *feature* or report a *bug*?** **What is the current behavior?** **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle ( or CodeSandbox ( example below:** **What is the expected behavior?** **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * * * current behavior ? * * * * current behavior bug , please provide step reproduce possible minimal demo problem . bug get fixed much faster run code n't dependency react . paste link jsfiddle ( codesandbox ( example : * * * * expected behavior ? * * * * version react , browser / o affected issue ? work previous version react ? * *",
        "title_stopwords_removal_lemmatization": "\u8bf7\u95ee\u4e0d\u505a\u4efb\u4f55\u5904\u7406\uff0creact\u53ef\u4ee5\u517c\u5bb9\u5230ie\u591a\u5c11"
    },
    {
        "issue_id": 384021246,
        "title": "getDerivedStateFromProps is user-hostile",
        "label": [
            "Type: Question",
            "Resolution: Stale"
        ],
        "date": "2018-11-24T20:56:14Z",
        "status": "closed",
        "description": "So I think `getDerivedStateFromProps` as designed turns out to be user-hostile. The short summary is that it makes the pattern described in the docs, https://reactjs.org/docs/higher-order-components.html#use-hocs-for-cross-cutting-concerns, impossible for non-trivial cases. \r\n\r\nImagine implementing an HOC that listens to change events on a DataSource, but where a simple shallowEqual() on the resultant state isn't sufficient to prevent rendering. I.e., what if you need more complex logic to determine if new data from the DataSource should be applied? \r\n\r\nIn my case, I have a DataSource that doesn't guarantee that it will give out objects of the same identity, so a `===` check will always return false and cause a re-render. BUT, I can do a little bookkeeping on the side and determine whether the data is actually new and should therefore be loaded into state. \r\n\r\nThis leads to some problems: \r\n1) Because `getDerivedStateFromProps` is static, it's not possible to store some internal bookkeeping data on the Component instance that gets used to determine whether to query the DataSource. Worst case, this bookkeeping information could be stuffed in the state object, but that's unnecessarily constraining and a bit ugly from a code organization perspective. \r\n2) More importantly, it's not possible to determine why `getDerivedStateFromProps` is being called. Is it because of a props change? Or is it because of a \"change\" event firing on the `DataSource`? \r\n\r\nThis matters because if props have changed, data must be fetched and the Component re-rendered unconditionally, but if the props haven't changed, then it's possible all the data loaded is the same as last time, and so `render()` can be skipped. \r\n\r\nHere's an example using the deprecated API that's no longer possible, lightly edited from the HOC example I mention above: \r\n```\r\nfunction withDataLoading(Component, DataSource, getDataFunc) {\r\n\r\n  return class extends React.PureComponent {\r\n    componentDidMount() {\r\n      // Subscribe to changes\r\n      DataSource.addChangeListener(this.handleChange);\r\n    }\r\n  \r\n    componentWillUnmount() {\r\n      // Clean up listener\r\n      DataSource.removeChangeListener(this.handleChange);\r\n    }\r\n\r\n    componentWillReceiveProps(props) {\r\n      //Unconditionally update state and rerender since the props changed\r\n      const possiblyNewData = getDataFunc(DataSource, props, this)\r\n      this.setState(possiblyNewData);\r\n      //Remember some metadata about what we fetched for next time\r\n      this.bookkeeping = DataSource.bookkeepingData();\r\n    }\r\n  \r\n    handleChange() {\r\n      // Update component state whenever the data source changes\r\n      const possiblyNewData = getDataFunc(DataSource, this.props, this)\r\n      if(DataSource.didIFetchNewData(this.bookkeeping)) {\r\n        //The DataSource had updated data in it, so rerender\r\n        this.setState(possiblyNewData);\r\n        //Remember some metadata about what we fetched for next time\r\n        this.bookkeeping = DataSource.bookkeepingData();\r\n      } else {\r\n        //No new data was fetched, so don't update State and don't rerender\r\n        //Do nothing\u2026\r\n      }\r\n    }\r\n\r\n    render() {\r\n      <Component data={this.state}/>\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nNotice that the behavior is different between `componentWillReceiveProps` and `handleChange`. There's no way to make that distinction with the new API. ",
        "remove_template_description": "So I think `getDerivedStateFromProps` as designed turns out to be user-hostile. The short summary is that it makes the pattern described in the docs, https://reactjs.org/docs/higher-order-components.html#use-hocs-for-cross-cutting-concerns, impossible for non-trivial cases.     Imagine implementing an HOC that listens to change events on a DataSource, but where a simple shallowEqual() on the resultant state isn't sufficient to prevent rendering. I.e., what if you need more complex logic to determine if new data from the DataSource should be applied?     In my case, I have a DataSource that doesn't guarantee that it will give out objects of the same identity, so a `===` check will always return false and cause a re-render. BUT, I can do a little bookkeeping on the side and determine whether the data is actually new and should therefore be loaded into state.     This leads to some problems:   1) Because `getDerivedStateFromProps` is static, it's not possible to store some internal bookkeeping data on the Component instance that gets used to determine whether to query the DataSource. Worst case, this bookkeeping information could be stuffed in the state object, but that's unnecessarily constraining and a bit ugly from a code organization perspective.   2) More importantly, it's not possible to determine why `getDerivedStateFromProps` is being called. Is it because of a props change? Or is it because of a \"change\" event firing on the `DataSource`?     This matters because if props have changed, data must be fetched and the Component re-rendered unconditionally, but if the props haven't changed, then it's possible all the data loaded is the same as last time, and so `render()` can be skipped.     Here's an example using the deprecated API that's no longer possible, lightly edited from the HOC example I mention above:   ```  function withDataLoading(Component, DataSource, getDataFunc) {      return class extends React.PureComponent {      componentDidMount() {        // Subscribe to changes        DataSource.addChangeListener(this.handleChange);      }          componentWillUnmount() {        // Clean up listener        DataSource.removeChangeListener(this.handleChange);      }        componentWillReceiveProps(props) {        //Unconditionally update state and rerender since the props changed        const possiblyNewData = getDataFunc(DataSource, props, this)        this.setState(possiblyNewData);        //Remember some metadata about what we fetched for next time        this.bookkeeping = DataSource.bookkeepingData();      }          handleChange() {        // Update component state whenever the data source changes        const possiblyNewData = getDataFunc(DataSource, this.props, this)        if(DataSource.didIFetchNewData(this.bookkeeping)) {          //The DataSource had updated data in it, so rerender          this.setState(possiblyNewData);          //Remember some metadata about what we fetched for next time          this.bookkeeping = DataSource.bookkeepingData();        } else {          //No new data was fetched, so don't update State and don't rerender          //Do nothing\u2026        }      }        render() {        <Component data={this.state}/>      }    }  }  ```    Notice that the behavior is different between `componentWillReceiveProps` and `handleChange`. There's no way to make that distinction with the new API.",
        "human_words": "So I think `getDerivedStateFromProps` as designed turns out to be user-hostile. The short summary is that it makes the pattern described in the docs, https://reactjs.org/docs/higher-order-components.html#use-hocs-for-cross-cutting-concerns, impossible for non-trivial cases.     Imagine implementing an HOC that listens to change events on a DataSource, but where a simple shallowEqual() on the resultant state isn't sufficient to prevent rendering. I.e., what if you need more complex logic to determine if new data from the DataSource should be applied?     In my case, I have a DataSource that doesn't guarantee that it will give out objects of the same identity, so a `===` check will always return false and cause a re-render. BUT, I can do a little bookkeeping on the side and determine whether the data is actually new and should therefore be loaded into state.     This leads to some problems:   1) Because `getDerivedStateFromProps` is static, it's not possible to store some internal bookkeeping data on the Component instance that gets used to determine whether to query the DataSource. Worst case, this bookkeeping information could be stuffed in the state object, but that's unnecessarily constraining and a bit ugly from a code organization perspective.   2) More importantly, it's not possible to determine why `getDerivedStateFromProps` is being called. Is it because of a props change? Or is it because of a \"change\" event firing on the `DataSource`?     This matters because if props have changed, data must be fetched and the Component re-rendered unconditionally, but if the props haven't changed, then it's possible all the data loaded is the same as last time, and so `render()` can be skipped.     Here's an example using the deprecated API that's no longer possible, lightly edited from the HOC example I mention above:       Notice that the behavior is different between `componentWillReceiveProps` and `handleChange`. There's no way to make that distinction with the new API.",
        "human_words_regrex": "So I think `getDerivedStateFromProps` as designed turns out to be user-hostile. The short summary is that it makes the pattern described in the docs,  impossible for non-trivial cases. Imagine implementing an HOC that listens to change events on a DataSource, but where a simple shallowEqual() on the resultant state isn't sufficient to prevent rendering. I.e., what if you need more complex logic to determine if new data from the DataSource should be applied? In my case, I have a DataSource that doesn't guarantee that it will give out objects of the same identity, so a `===` check will always return false and cause a re-render. BUT, I can do a little bookkeeping on the side and determine whether the data is actually new and should therefore be loaded into state. This leads to some problems: 1) Because `getDerivedStateFromProps` is static, it's not possible to store some internal bookkeeping data on the Component instance that gets used to determine whether to query the DataSource. Worst case, this bookkeeping information could be stuffed in the state object, but that's unnecessarily constraining and a bit ugly from a code organization perspective. 2) More importantly, it's not possible to determine why `getDerivedStateFromProps` is being called. Is it because of a props change? Or is it because of a \"change\" event firing on the `DataSource`? This matters because if props have changed, data must be fetched and the Component re-rendered unconditionally, but if the props haven't changed, then it's possible all the data loaded is the same as last time, and so `render()` can be skipped. Here's an example using the deprecated API that's no longer possible, lightly edited from the HOC example I mention above: Notice that the behavior is different between `componentWillReceiveProps` and `handleChange`. There's no way to make that distinction with the new API.",
        "human_words_stopwords_removal_lemmatization": "think ` getderivedstatefromprops ` designed turn user-hostile . short summary make pattern described doc , impossible non-trivial case . imagine implementing hoc listens change event datasource , simple shallowequal ( ) resultant state n't sufficient prevent rendering . i.e. , need complex logic determine new data datasource applied ? case , datasource n't guarantee give object identity , ` === ` check always return false cause re-render . , little bookkeeping side determine whether data actually new therefore loaded state . lead problem : 1 ) ` getderivedstatefromprops ` static , 's possible store internal bookkeeping data component instance get used determine whether query datasource . worst case , bookkeeping information could stuffed state object , 's unnecessarily constraining bit ugly code organization perspective . 2 ) importantly , 's possible determine ` getderivedstatefromprops ` called . prop change ? `` change '' event firing ` datasource ` ? matter prop changed , data must fetched component re-rendered unconditionally , prop n't changed , 's possible data loaded last time , ` render ( ) ` skipped . 's example using deprecated api 's longer possible , lightly edited hoc example mention : notice behavior different ` componentwillreceiveprops ` ` handlechange ` . 's way make distinction new api .",
        "title_stopwords_removal_lemmatization": "getderivedstatefromprops user-hostile"
    },
    {
        "issue_id": 379211041,
        "title": "SetStateAction returned from useState hook dose not accept a second callback argument",
        "label": [
            "Type: Question",
            "Resolution: Stale"
        ],
        "date": "2018-11-09T15:39:59Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nQuestion\r\n\r\n**What is the current behavior?**\r\nThe SetStateAction returned from useState hook dose not accept a second callback argument. It cannot works like Class Componet's 'setState'  method, which receives a callback param, and can perform the callback after this setState action updates;\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\nhttps://codesandbox.io/s/93mkr1ywpr\r\n\r\n**What is the expected behavior?**\r\nHopes the SetStateAction function can receive a second callback argument, and can used like 'setState' method callback. \r\n\r\nI have read the official note: \r\n\r\n>     // this technically does accept a second argument, but it's already under a deprecation warning\r\n>     // and it's not even released so probably better to not define it.\r\n\r\nIf instead it's working as intended, how can I perform special action after this SetStateAction called ? \r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n16.7.0-alpha.0\r\n\r\n",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**  Question    **What is the current behavior?**  The SetStateAction returned from useState hook dose not accept a second callback argument. It cannot works like Class Componet's 'setState'  method, which receives a callback param, and can perform the callback after this setState action updates;    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**  https://codesandbox.io/s/93mkr1ywpr    **What is the expected behavior?**  Hopes the SetStateAction function can receive a second callback argument, and can used like 'setState' method callback.     I have read the official note:     >     // this technically does accept a second argument, but it's already under a deprecation warning  >     // and it's not even released so probably better to not define it.    If instead it's working as intended, how can I perform special action after this SetStateAction called ?     **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  16.7.0-alpha.0",
        "human_words": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**  Question    **What is the current behavior?**  The SetStateAction returned from useState hook dose not accept a second callback argument. It cannot works like Class Componet's 'setState'  method, which receives a callback param, and can perform the callback after this setState action updates;    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**  https://codesandbox.io/s/93mkr1ywpr    **What is the expected behavior?**  Hopes the SetStateAction function can receive a second callback argument, and can used like 'setState' method callback.     I have read the official note:     >     // this technically does accept a second argument, but it's already under a deprecation warning  >     // and it's not even released so probably better to not define it.    If instead it's working as intended, how can I perform special action after this SetStateAction called ?     **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  16.7.0-alpha.0",
        "human_words_regrex": " **Do you want to request a *feature* or report a *bug*?** Question **What is the current behavior?** The SetStateAction returned from useState hook dose not accept a second callback argument. It cannot works like Class Componet's 'setState' method, which receives a callback param, and can perform the callback after this setState action updates; **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle ( or CodeSandbox ( example below:**  **What is the expected behavior?** Hopes the SetStateAction function can receive a second callback argument, and can used like 'setState' method callback. I have read the official note: > // this technically does accept a second argument, but it's already under a deprecation warning > // and it's not even released so probably better to not define it. If instead it's working as intended, how can I perform special action after this SetStateAction called ? **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** 16.7.0-alpha.0",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * question * * current behavior ? * * setstateaction returned usestate hook dose accept second callback argument . work like class componet 's 'setstate ' method , receives callback param , perform callback setstate action update ; * * current behavior bug , please provide step reproduce possible minimal demo problem . bug get fixed much faster run code n't dependency react . paste link jsfiddle ( codesandbox ( example : * * * * expected behavior ? * * hope setstateaction function receive second callback argument , used like 'setstate ' method callback . read official note : > // technically accept second argument , 's already deprecation warning > // 's even released probably better define . instead 's working intended , perform special action setstateaction called ? * * version react , browser / o affected issue ? work previous version react ? * * 16.7.0-alpha.0",
        "title_stopwords_removal_lemmatization": "setstateaction returned usestate hook dose accept second callback argument"
    },
    {
        "issue_id": 374986998,
        "title": "Cases where hooks don't currently provide a good answer vs HOC",
        "label": [
            "Type: Question"
        ],
        "date": "2018-10-29T12:13:54Z",
        "status": "closed",
        "description": "(unsure if this is the right place, so trying it out)\r\n\r\nI've noticed that the new React Hooks feature is aiming at providing an alternative composition pattern to HOC and render functions, but I believe that many of the use cases solved by HOC (at the framework level) cannot currently be addressed by the new hooks API. \r\n\r\nSpecifically, there is not way to incorporate React Hooks with React.memo. Unless I am incorrect, this means that any system that would like to implement optimisations based on external context, such as the react-redux `connect` function (that uses `mapStateToProps` to implement an efficient `shouldComponentUpdate`) will still need to rely on a HOC/render-prop to automate this optimisation.\r\n\r\nThe reason I am bringing this up is because one of the main benefits stated in the documentation is to reduce framework level use of HOC that \"pollute\" the tree, of which the react-redux connect HOC is probably the most prevalent use case. \r\n\r\nAdditionally redux (and `useRedux`) are specifically brought up as an exemplary use case, although with the current system it will cause large optimisation issues (since with no optimised `shouldComponentUpdate`, every \"connected\" component will re-render on every state change).\r\n(Although this might fit into the documentation repo, this is a discussion / opinion and I do not feel it is a \"mistake\" that I should report, but rather a discussion on importance).\r\n\r\nAn example solution for this could be if there was a way to use contexts in `React.memo` (which unless I'm incorrect only have access to `props` and `prevProps`)",
        "remove_template_description": "(unsure if this is the right place, so trying it out)    I've noticed that the new React Hooks feature is aiming at providing an alternative composition pattern to HOC and render functions, but I believe that many of the use cases solved by HOC (at the framework level) cannot currently be addressed by the new hooks API.     Specifically, there is not way to incorporate React Hooks with React.memo. Unless I am incorrect, this means that any system that would like to implement optimisations based on external context, such as the react-redux `connect` function (that uses `mapStateToProps` to implement an efficient `shouldComponentUpdate`) will still need to rely on a HOC/render-prop to automate this optimisation.    The reason I am bringing this up is because one of the main benefits stated in the documentation is to reduce framework level use of HOC that \"pollute\" the tree, of which the react-redux connect HOC is probably the most prevalent use case.     Additionally redux (and `useRedux`) are specifically brought up as an exemplary use case, although with the current system it will cause large optimisation issues (since with no optimised `shouldComponentUpdate`, every \"connected\" component will re-render on every state change).  (Although this might fit into the documentation repo, this is a discussion / opinion and I do not feel it is a \"mistake\" that I should report, but rather a discussion on importance).    An example solution for this could be if there was a way to use contexts in `React.memo` (which unless I'm incorrect only have access to `props` and `prevProps`)",
        "human_words": "(unsure if this is the right place, so trying it out)    I've noticed that the new React Hooks feature is aiming at providing an alternative composition pattern to HOC and render functions, but I believe that many of the use cases solved by HOC (at the framework level) cannot currently be addressed by the new hooks API.     Specifically, there is not way to incorporate React Hooks with React.memo. Unless I am incorrect, this means that any system that would like to implement optimisations based on external context, such as the react-redux `connect` function (that uses `mapStateToProps` to implement an efficient `shouldComponentUpdate`) will still need to rely on a HOC/render-prop to automate this optimisation.    The reason I am bringing this up is because one of the main benefits stated in the documentation is to reduce framework level use of HOC that \"pollute\" the tree, of which the react-redux connect HOC is probably the most prevalent use case.     Additionally redux (and `useRedux`) are specifically brought up as an exemplary use case, although with the current system it will cause large optimisation issues (since with no optimised `shouldComponentUpdate`, every \"connected\" component will re-render on every state change).  (Although this might fit into the documentation repo, this is a discussion / opinion and I do not feel it is a \"mistake\" that I should report, but rather a discussion on importance).    An example solution for this could be if there was a way to use contexts in `React.memo` (which unless I'm incorrect only have access to `props` and `prevProps`)",
        "human_words_regrex": "(unsure if this is the right place, so trying it out) I've noticed that the new React Hooks feature is aiming at providing an alternative composition pattern to HOC and render functions, but I believe that many of the use cases solved by HOC (at the framework level) cannot currently be addressed by the new hooks API. Specifically, there is not way to incorporate React Hooks with React.memo. Unless I am incorrect, this means that any system that would like to implement optimisations based on external context, such as the react-redux `connect` function (that uses `mapStateToProps` to implement an efficient `shouldComponentUpdate`) will still need to rely on a HOC/render-prop to automate this optimisation. The reason I am bringing this up is because one of the main benefits stated in the documentation is to reduce framework level use of HOC that \"pollute\" the tree, of which the react-redux connect HOC is probably the most prevalent use case. Additionally redux (and `useRedux`) are specifically brought up as an exemplary use case, although with the current system it will cause large optimisation issues (since with no optimised `shouldComponentUpdate`, every \"connected\" component will re-render on every state change). (Although this might fit into the documentation repo, this is a discussion / opinion and I do not feel it is a \"mistake\" that I should report, but rather a discussion on importance). An example solution for this could be if there was a way to use contexts in `React.memo` (which unless I'm incorrect only have access to `props` and `prevProps`)",
        "human_words_stopwords_removal_lemmatization": "( unsure right place , trying ) 've noticed new react hook feature aiming providing alternative composition pattern hoc render function , believe many use case solved hoc ( framework level ) currently addressed new hook api . specifically , way incorporate react hook react.memo . unless incorrect , mean system would like implement optimisation based external context , react-redux ` connect ` function ( us ` mapstatetoprops ` implement efficient ` shouldcomponentupdate ` ) still need rely hoc/render-prop automate optimisation . reason bringing one main benefit stated documentation reduce framework level use hoc `` pollute '' tree , react-redux connect hoc probably prevalent use case . additionally redux ( ` useredux ` ) specifically brought exemplary use case , although current system cause large optimisation issue ( since optimised ` shouldcomponentupdate ` , every `` connected '' component re-render every state change ) . ( although might fit documentation repo , discussion / opinion feel `` mistake '' report , rather discussion importance ) . example solution could way use context ` react.memo ` ( unless 'm incorrect access ` prop ` ` prevprops ` )",
        "title_stopwords_removal_lemmatization": "case hook n't currently provide good answer v hoc"
    },
    {
        "issue_id": 366773887,
        "title": "Limitations of React.createContext",
        "label": [
            "Type: Question"
        ],
        "date": "2018-10-04T12:49:54Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nfeature\r\n\r\n**What is the current behavior?**\r\n\r\nThe current behavior requires end users to use `createContext` in the module scope. To my understanding, it's not currently possible to use a default value derived from the state of a component (a stateful Provider in my case).\r\n\r\nThis [StackOverflow post](https://stackoverflow.com/questions/51448291/how-to-create-a-generic-react-component-with-a-typed-context-provider) hits the issue right on IMO.\r\n\r\nI feel like this is the classic use case for replacing Redux, and it doesn't work out of the box with static types.\r\n\r\nI think it's quite telling that `react-redux` is doing something similar [here](https://github.com/reduxjs/react-redux/pull/995/files#diff-0d7275a0771455b7118505dedef42772R3) in their PR to move to React 16 context. I would expect the default value to be `this.state` of the Provider component instead of `null`.\r\n\r\nMy knowledge of React internals is naive, but I didn't see anyone else bringing up this issue.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n**What is the desired behavior?**\r\n\r\nMaybe a JSX API for context creation? I imagine it's not quite that simple.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.3+",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**    feature    **What is the current behavior?**    The current behavior requires end users to use `createContext` in the module scope. To my understanding, it's not currently possible to use a default value derived from the state of a component (a stateful Provider in my case).    This [StackOverflow post](https://stackoverflow.com/questions/51448291/how-to-create-a-generic-react-component-with-a-typed-context-provider) hits the issue right on IMO.    I feel like this is the classic use case for replacing Redux, and it doesn't work out of the box with static types.    I think it's quite telling that `react-redux` is doing something similar [here](https://github.com/reduxjs/react-redux/pull/995/files#diff-0d7275a0771455b7118505dedef42772R3) in their PR to move to React 16 context. I would expect the default value to be `this.state` of the Provider component instead of `null`.    My knowledge of React internals is naive, but I didn't see anyone else bringing up this issue.    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**    **What is the desired behavior?**    Maybe a JSX API for context creation? I imagine it's not quite that simple.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    16.3+",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**    feature    **What is the current behavior?**    The current behavior requires end users to use `createContext` in the module scope. To my understanding, it's not currently possible to use a default value derived from the state of a component (a stateful Provider in my case).    This [StackOverflow post](https://stackoverflow.com/questions/51448291/how-to-create-a-generic-react-component-with-a-typed-context-provider) hits the issue right on IMO.    I feel like this is the classic use case for replacing Redux, and it doesn't work out of the box with static types.    I think it's quite telling that `react-redux` is doing something similar [here](https://github.com/reduxjs/react-redux/pull/995/files#diff-0d7275a0771455b7118505dedef42772R3) in their PR to move to React 16 context. I would expect the default value to be `this.state` of the Provider component instead of `null`.    My knowledge of React internals is naive, but I didn't see anyone else bringing up this issue.    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**    **What is the desired behavior?**    Maybe a JSX API for context creation? I imagine it's not quite that simple.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    16.3+",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** feature **What is the current behavior?** The current behavior requires end users to use `createContext` in the module scope. To my understanding, it's not currently possible to use a default value derived from the state of a component (a stateful Provider in my case). This  hits the issue right on IMO. I feel like this is the classic use case for replacing Redux, and it doesn't work out of the box with static types. I think it's quite telling that `react-redux` is doing something similar  in their PR to move to React 16 context. I would expect the default value to be `this.state` of the Provider component instead of `null`. My knowledge of React internals is naive, but I didn't see anyone else bringing up this issue. **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle ( or CodeSandbox ( example below:** **What is the desired behavior?** Maybe a JSX API for context creation? I imagine it's not quite that simple. **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** 16.3+",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * feature * * current behavior ? * * current behavior requires end user use ` createcontext ` module scope . understanding , 's currently possible use default value derived state component ( stateful provider case ) . hit issue right imo . feel like classic use case replacing redux , n't work box static type . think 's quite telling ` react-redux ` something similar pr move react 16 context . would expect default value ` this.state ` provider component instead ` null ` . knowledge react internals naive , n't see anyone else bringing issue . * * current behavior bug , please provide step reproduce possible minimal demo problem . bug get fixed much faster run code n't dependency react . paste link jsfiddle ( codesandbox ( example : * * * * desired behavior ? * * maybe jsx api context creation ? imagine 's quite simple . * * version react , browser / o affected issue ? work previous version react ? * * 16.3+",
        "title_stopwords_removal_lemmatization": "limitation react.createcontext"
    },
    {
        "issue_id": 365269469,
        "title": "[npm:create-react-class] No way to implement getDerivedStateFromProps",
        "label": [
            "Type: Question"
        ],
        "date": "2018-09-30T22:49:03Z",
        "status": "closed",
        "description": "There seems to be no way to implement class methods such as `getDerivedStateFromProps` and a few others.\r\n\r\nAm I overlooking something?\r\n\r\nThere is no mention of it here either: https://reactjs.org/docs/react-without-es6.html",
        "remove_template_description": "There seems to be no way to implement class methods such as `getDerivedStateFromProps` and a few others.    Am I overlooking something?    There is no mention of it here either: https://reactjs.org/docs/react-without-es6.html",
        "human_words": "There seems to be no way to implement class methods such as `getDerivedStateFromProps` and a few others.    Am I overlooking something?    There is no mention of it here either: https://reactjs.org/docs/react-without-es6.html",
        "human_words_regrex": "There seems to be no way to implement class methods such as `getDerivedStateFromProps` and a few others. Am I overlooking something? There is no mention of it here either: ",
        "human_words_stopwords_removal_lemmatization": "seems way implement class method ` getderivedstatefromprops ` others . overlooking something ? mention either :",
        "title_stopwords_removal_lemmatization": "[ npm : create-react-class ] way implement getderivedstatefromprops"
    },
    {
        "issue_id": 360162586,
        "title": "[feature request] Add DOM to life cycle hooks.",
        "label": [
            "Type: Question"
        ],
        "date": "2018-09-14T05:34:29Z",
        "status": "closed",
        "description": "Currently, it's not very straight forward to get your hands on a components full DOM - in particular if it returns multiple elements. In that case `ReactDOM.findDomNode` just won't work. So you're left with refs, but you'll never get the whole dom *at once* - instead you get one element at a time. You can of course do something along the lines of this:\r\n\r\n```js\r\nclass CityList extends Component {\r\n  render() {\r\n    this.childElements = []; \r\n    let store = this.childElements.push.bind(this.childElements);\r\n    return this.props.cities.map(p => <li class=\"city\" ref={store}>...</li>);\r\n  }\r\n  componentDidMount() {\r\n    //access this.childElements here\r\n  }\r\n}\r\n```\r\n\r\nBut that feels a bit awkward.\r\n\r\nHence my question is: how about adding the DOM nodes rendered for a given component at the end of the argument list of the relevant life cycle events? If I'm not mistaken, those would be `componentDidMount`, `getSnapshotBeforeUpdate`, `componentDidUpdate` and `componentWillUnmount` (as well as *perhaps* `shouldComponentUpdate` although I'm not sure why that would be a good time to access the DOM). I haven't dug too deep into React's internals, but my naive guess would be that this information should be available when those life cycle hooks are being called.\r\n\r\nOn a more \"philosophical\" note: It seems to me that storing references to the DOM in the component just isn't all that clean. In event handlers, you can use the event to reach into the DOM and it seems to me that life cycle hooks are practically destined to allow the same.\r\n\r\nThanks for your consideration :)",
        "remove_template_description": "Currently, it's not very straight forward to get your hands on a components full DOM - in particular if it returns multiple elements. In that case `ReactDOM.findDomNode` just won't work. So you're left with refs, but you'll never get the whole dom *at once* - instead you get one element at a time. You can of course do something along the lines of this:    ```js  class CityList extends Component {    render() {      this.childElements = [];       let store = this.childElements.push.bind(this.childElements);      return this.props.cities.map(p => <li class=\"city\" ref={store}>...</li>);    }    componentDidMount() {      //access this.childElements here    }  }  ```    But that feels a bit awkward.    Hence my question is: how about adding the DOM nodes rendered for a given component at the end of the argument list of the relevant life cycle events? If I'm not mistaken, those would be `componentDidMount`, `getSnapshotBeforeUpdate`, `componentDidUpdate` and `componentWillUnmount` (as well as *perhaps* `shouldComponentUpdate` although I'm not sure why that would be a good time to access the DOM). I haven't dug too deep into React's internals, but my naive guess would be that this information should be available when those life cycle hooks are being called.    On a more \"philosophical\" note: It seems to me that storing references to the DOM in the component just isn't all that clean. In event handlers, you can use the event to reach into the DOM and it seems to me that life cycle hooks are practically destined to allow the same.    Thanks for your consideration :)",
        "human_words": "Currently, it's not very straight forward to get your hands on a components full DOM - in particular if it returns multiple elements. In that case `ReactDOM.findDomNode` just won't work. So you're left with refs, but you'll never get the whole dom *at once* - instead you get one element at a time. You can of course do something along the lines of this:        But that feels a bit awkward.    Hence my question is: how about adding the DOM nodes rendered for a given component at the end of the argument list of the relevant life cycle events? If I'm not mistaken, those would be `componentDidMount`, `getSnapshotBeforeUpdate`, `componentDidUpdate` and `componentWillUnmount` (as well as *perhaps* `shouldComponentUpdate` although I'm not sure why that would be a good time to access the DOM). I haven't dug too deep into React's internals, but my naive guess would be that this information should be available when those life cycle hooks are being called.    On a more \"philosophical\" note: It seems to me that storing references to the DOM in the component just isn't all that clean. In event handlers, you can use the event to reach into the DOM and it seems to me that life cycle hooks are practically destined to allow the same.    Thanks for your consideration :)",
        "human_words_regrex": "Currently, it's not very straight forward to get your hands on a components full DOM - in particular if it returns multiple elements. In that case `ReactDOM.findDomNode` just won't work. So you're left with refs, but you'll never get the whole dom *at once* - instead you get one element at a time. You can of course do something along the lines of this: But that feels a bit awkward. Hence my question is: how about adding the DOM nodes rendered for a given component at the end of the argument list of the relevant life cycle events? If I'm not mistaken, those would be `componentDidMount`, `getSnapshotBeforeUpdate`, `componentDidUpdate` and `componentWillUnmount` (as well as *perhaps* `shouldComponentUpdate` although I'm not sure why that would be a good time to access the DOM). I haven't dug too deep into React's internals, but my naive guess would be that this information should be available when those life cycle hooks are being called. On a more \"philosophical\" note: It seems to me that storing references to the DOM in the component just isn't all that clean. In event handlers, you can use the event to reach into the DOM and it seems to me that life cycle hooks are practically destined to allow the same. Thanks for your consideration :)",
        "human_words_stopwords_removal_lemmatization": "currently , 's straight forward get hand component full dom - particular return multiple element . case ` reactdom.finddomnode ` wo n't work . 're left ref , 'll never get whole dom * * - instead get one element time . course something along line : feel bit awkward . hence question : adding dom node rendered given component end argument list relevant life cycle event ? 'm mistaken , would ` componentdidmount ` , ` getsnapshotbeforeupdate ` , ` componentdidupdate ` ` componentwillunmount ` ( well * perhaps * ` shouldcomponentupdate ` although 'm sure would good time access dom ) . n't dug deep react 's internals , naive guess would information available life cycle hook called . `` philosophical '' note : seems storing reference dom component n't clean . event handler , use event reach dom seems life cycle hook practically destined allow . thanks consideration : )",
        "title_stopwords_removal_lemmatization": "[ feature request ] add dom life cycle hook ."
    },
    {
        "issue_id": 360138160,
        "title": "Element attributes be removed silently in frameset tag",
        "label": [
            "Type: Question",
            "Component: DOM",
            "Resolution: Stale"
        ],
        "date": "2018-09-14T02:53:16Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n**What is the current behavior?**\r\nIn some historical reason, i am still using obsolete tag `frameset` in my project. And when i render my component which includes `frameset` tag in react, some attributes are ignored, like `rows`, `cols`.\r\nCould anyone tell me why and how to solve it by no hacking way? Thx.\r\n\r\n**input**\r\n```javascript\r\nexport default class obsoleteElment extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <html>\r\n      <head>\r\n        <meta httpEquiv=\"content-type\" content=\"text/html; charset=UTF-8\" />\r\n          <title>old page</title>\r\n      </head>\r\n      <frameset id=\"frame-container\" rows='60,*' frameBorder=\"0\" border=\"0\"  cols=\"180,11,*\">\r\n      </frameset>\r\n      </html>\r\n    )\r\n  }\r\n}\r\n```\r\n\r\n**output**\r\n```javascript\r\n      <html>\r\n      <head>\r\n        <meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\" />\r\n          <title>old page</title>\r\n      </head>\r\n      <frameset id=\"frame-container\" frameBorder=\"0\" border=\"0\">\r\n      </frameset>\r\n      </html>\r\n```\r\n\r\n**expect**\r\n```javascript\r\n      <html>\r\n      <head>\r\n        <meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\" />\r\n          <title>old page</title>\r\n      </head>\r\n      <frameset id=\"frame-container\" rows='60,*' frameBorder=\"0\" border=\"0\"  cols=\"180,11,*\">\r\n      </frameset>\r\n      </html>\r\n```\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n**react version**\r\n![image](https://user-images.githubusercontent.com/17465046/45526873-9b08db00-b80b-11e8-980b-86407da1934c.png)\r\n\r\n**node environment**\r\n![image](https://user-images.githubusercontent.com/17465046/45526918-ca1f4c80-b80b-11e8-911d-cf0bb3ab9b32.png)\r\n![image](https://user-images.githubusercontent.com/17465046/45526934-d905ff00-b80b-11e8-87d4-306ca3a998c3.png)\r\n\r\n**OS**\r\n![image](https://user-images.githubusercontent.com/17465046/45526979-18cce680-b80c-11e8-8928-ee784a5f0a7d.png)\r\n",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**  bug    **What is the current behavior?**  In some historical reason, i am still using obsolete tag `frameset` in my project. And when i render my component which includes `frameset` tag in react, some attributes are ignored, like `rows`, `cols`.  Could anyone tell me why and how to solve it by no hacking way? Thx.    **input**  ```javascript  export default class obsoleteElment extends React.Component {      render() {      return (        <html>        <head>          <meta httpEquiv=\"content-type\" content=\"text/html; charset=UTF-8\" />            <title>old page</title>        </head>        <frameset id=\"frame-container\" rows='60,*' frameBorder=\"0\" border=\"0\"  cols=\"180,11,*\">        </frameset>        </html>      )    }  }  ```    **output**  ```javascript        <html>        <head>          <meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\" />            <title>old page</title>        </head>        <frameset id=\"frame-container\" frameBorder=\"0\" border=\"0\">        </frameset>        </html>  ```    **expect**  ```javascript        <html>        <head>          <meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\" />            <title>old page</title>        </head>        <frameset id=\"frame-container\" rows='60,*' frameBorder=\"0\" border=\"0\"  cols=\"180,11,*\">        </frameset>        </html>  ```    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    **react version**  ![image](https://user-images.githubusercontent.com/17465046/45526873-9b08db00-b80b-11e8-980b-86407da1934c.png)    **node environment**  ![image](https://user-images.githubusercontent.com/17465046/45526918-ca1f4c80-b80b-11e8-911d-cf0bb3ab9b32.png)  ![image](https://user-images.githubusercontent.com/17465046/45526934-d905ff00-b80b-11e8-87d4-306ca3a998c3.png)    **OS**  ![image](https://user-images.githubusercontent.com/17465046/45526979-18cce680-b80c-11e8-8928-ee784a5f0a7d.png)",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**  bug    **What is the current behavior?**  In some historical reason, i am still using obsolete tag `frameset` in my project. And when i render my component which includes `frameset` tag in react, some attributes are ignored, like `rows`, `cols`.  Could anyone tell me why and how to solve it by no hacking way? Thx.    **input**      **output**      **expect**      **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    **react version**  ![image](https://user-images.githubusercontent.com/17465046/45526873-9b08db00-b80b-11e8-980b-86407da1934c.png)    **node environment**  ![image](https://user-images.githubusercontent.com/17465046/45526918-ca1f4c80-b80b-11e8-911d-cf0bb3ab9b32.png)  ![image](https://user-images.githubusercontent.com/17465046/45526934-d905ff00-b80b-11e8-87d4-306ca3a998c3.png)    **OS**  ![image](https://user-images.githubusercontent.com/17465046/45526979-18cce680-b80c-11e8-8928-ee784a5f0a7d.png)",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** bug **What is the current behavior?** In some historical reason, i am still using obsolete tag `frameset` in my project. And when i render my component which includes `frameset` tag in react, some attributes are ignored, like `rows`, `cols`. Could anyone tell me why and how to solve it by no hacking way? Thx. **input** **output** **expect** **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** **react version** ! **node environment** ! ! **OS** !",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * bug * * current behavior ? * * historical reason , still using obsolete tag ` frameset ` project . render component includes ` frameset ` tag react , attribute ignored , like ` row ` , ` col ` . could anyone tell solve hacking way ? thx . * * input * * * * output * * * * expect * * * * version react , browser / o affected issue ? work previous version react ? * * * * react version * * ! * * node environment * * ! ! * * o * * !",
        "title_stopwords_removal_lemmatization": "element attribute removed silently frameset tag"
    },
    {
        "issue_id": 357314289,
        "title": "Why we need both isBatchingUpdates and isUnbatchingUpdates?",
        "label": [
            "Type: Question",
            "Component: Reconciler",
            "Resolution: Stale"
        ],
        "date": "2018-09-05T16:45:39Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nQuestion.\r\n\r\n**What is the current behavior?**\r\nIMO, from the naming, `isBatchingUpdates` should always equals `!isUnbatchingUpdates`, I wonder why we need both of them.\r\n\r\nIn [81224b](https://github.com/facebook/react/commit/dcc02dd0f12fb4b9b4b910aef6c5808dc761dc22#diff-7a9f2b48de4b0ffcf7b436798ce9aaabR198) we add the `isUnbatchingUpdates` variable, the comment says it's just \"for the weird case where the initial mount is synchronous\"(and add [a test](https://github.com/facebook/react/commit/dcc02dd0f12fb4b9b4b910aef6c5808dc761dc22#diff-c06dcc21e6553eb98915ab0eb50e4c7eR314) for it). But in a [follow up PR](https://github.com/facebook/react/pull/11264/files#diff-24152ba0b2ac251decb6a12f41bdf116L211) we just delete the comment but don't remove the `isUnbatchingUpdates`. I don't know why we remove the comment, seems the weird case which the before comment said doesn't be solved in this PR.\r\n\r\n**What is the expected behavior?**\r\nI try to remove `isUnbatchingUpdates` and use `!isUnbatchingUpdates` instead just like before we did. But encounter many tests fails(I thought just few tests would fails before try).\r\n\r\nSo, could you give some clarifications about this? Do we still need this now? Thanks!\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nmaster branch\r\n",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**  Question.    **What is the current behavior?**  IMO, from the naming, `isBatchingUpdates` should always equals `!isUnbatchingUpdates`, I wonder why we need both of them.    In [81224b](https://github.com/facebook/react/commit/dcc02dd0f12fb4b9b4b910aef6c5808dc761dc22#diff-7a9f2b48de4b0ffcf7b436798ce9aaabR198) we add the `isUnbatchingUpdates` variable, the comment says it's just \"for the weird case where the initial mount is synchronous\"(and add [a test](https://github.com/facebook/react/commit/dcc02dd0f12fb4b9b4b910aef6c5808dc761dc22#diff-c06dcc21e6553eb98915ab0eb50e4c7eR314) for it). But in a [follow up PR](https://github.com/facebook/react/pull/11264/files#diff-24152ba0b2ac251decb6a12f41bdf116L211) we just delete the comment but don't remove the `isUnbatchingUpdates`. I don't know why we remove the comment, seems the weird case which the before comment said doesn't be solved in this PR.    **What is the expected behavior?**  I try to remove `isUnbatchingUpdates` and use `!isUnbatchingUpdates` instead just like before we did. But encounter many tests fails(I thought just few tests would fails before try).    So, could you give some clarifications about this? Do we still need this now? Thanks!    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  master branch",
        "human_words": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**  Question.    **What is the current behavior?**  IMO, from the naming, `isBatchingUpdates` should always equals `!isUnbatchingUpdates`, I wonder why we need both of them.    In [81224b](https://github.com/facebook/react/commit/dcc02dd0f12fb4b9b4b910aef6c5808dc761dc22#diff-7a9f2b48de4b0ffcf7b436798ce9aaabR198) we add the `isUnbatchingUpdates` variable, the comment says it's just \"for the weird case where the initial mount is synchronous\"(and add [a test](https://github.com/facebook/react/commit/dcc02dd0f12fb4b9b4b910aef6c5808dc761dc22#diff-c06dcc21e6553eb98915ab0eb50e4c7eR314) for it). But in a [follow up PR](https://github.com/facebook/react/pull/11264/files#diff-24152ba0b2ac251decb6a12f41bdf116L211) we just delete the comment but don't remove the `isUnbatchingUpdates`. I don't know why we remove the comment, seems the weird case which the before comment said doesn't be solved in this PR.    **What is the expected behavior?**  I try to remove `isUnbatchingUpdates` and use `!isUnbatchingUpdates` instead just like before we did. But encounter many tests fails(I thought just few tests would fails before try).    So, could you give some clarifications about this? Do we still need this now? Thanks!    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  master branch",
        "human_words_regrex": " **Do you want to request a *feature* or report a *bug*?** Question. **What is the current behavior?** IMO, from the naming, `isBatchingUpdates` should always equals `!isUnbatchingUpdates`, I wonder why we need both of them. In  we add the `isUnbatchingUpdates` variable, the comment says it's just \"for the weird case where the initial mount is synchronous\"(and add  for it). But in a  we just delete the comment but don't remove the `isUnbatchingUpdates`. I don't know why we remove the comment, seems the weird case which the before comment said doesn't be solved in this PR. **What is the expected behavior?** I try to remove `isUnbatchingUpdates` and use `!isUnbatchingUpdates` instead just like before we did. But encounter many tests fails(I thought just few tests would fails before try). So, could you give some clarifications about this? Do we still need this now? Thanks! **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** master branch",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * question . * * current behavior ? * * imo , naming , ` isbatchingupdates ` always equal ` ! isunbatchingupdates ` , wonder need . add ` isunbatchingupdates ` variable , comment say 's `` weird case initial mount synchronous '' ( add ) . delete comment n't remove ` isunbatchingupdates ` . n't know remove comment , seems weird case comment said n't solved pr . * * expected behavior ? * * try remove ` isunbatchingupdates ` use ` ! isunbatchingupdates ` instead like . encounter many test fails ( thought test would fails try ) . , could give clarification ? still need ? thanks ! * * version react , browser / o affected issue ? work previous version react ? * * master branch",
        "title_stopwords_removal_lemmatization": "need isbatchingupdates isunbatchingupdates ?"
    },
    {
        "issue_id": 355742946,
        "title": "Access React component underlying DOM tree",
        "label": [
            "Type: Question"
        ],
        "date": "2018-08-30T20:32:19Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\nfeature\r\n\r\n**What is the current behavior?**\r\nForm component has \"form field\" children (Input(), Checkbox(), etc) that are validated against some custom rules when form is submitted. Validation works fine.\r\n\r\n**What is the expected behavior?**\r\n If the form is invalid, I would like to scroll the page to the first invalid element after the form is submitted but unfortunately components do not expose the underlying DOM three (except via the Fiber object) and I cannot get the \"ref\" of any component, which makes scrolling not possible since I don't have the DOM reference.\r\n\r\nI am trying to avoid ref forwarding on \"form field\" components because I would like the Form to handle all validation related code (for encapsulation purposes and in case I want to publish this as a library, for instance).\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nreact: \"^16.4.0\"\r\n\r\nIs there any way to achieve this?\r\n",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**  feature    **What is the current behavior?**  Form component has \"form field\" children (Input(), Checkbox(), etc) that are validated against some custom rules when form is submitted. Validation works fine.    **What is the expected behavior?**   If the form is invalid, I would like to scroll the page to the first invalid element after the form is submitted but unfortunately components do not expose the underlying DOM three (except via the Fiber object) and I cannot get the \"ref\" of any component, which makes scrolling not possible since I don't have the DOM reference.    I am trying to avoid ref forwarding on \"form field\" components because I would like the Form to handle all validation related code (for encapsulation purposes and in case I want to publish this as a library, for instance).    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  react: \"^16.4.0\"    Is there any way to achieve this?",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**  feature    **What is the current behavior?**  Form component has \"form field\" children (Input(), Checkbox(), etc) that are validated against some custom rules when form is submitted. Validation works fine.    **What is the expected behavior?**   If the form is invalid, I would like to scroll the page to the first invalid element after the form is submitted but unfortunately components do not expose the underlying DOM three (except via the Fiber object) and I cannot get the \"ref\" of any component, which makes scrolling not possible since I don't have the DOM reference.    I am trying to avoid ref forwarding on \"form field\" components because I would like the Form to handle all validation related code (for encapsulation purposes and in case I want to publish this as a library, for instance).    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  react: \"^16.4.0\"    Is there any way to achieve this?",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** feature **What is the current behavior?** Form component has \"form field\" children (Input(), Checkbox(), etc) that are validated against some custom rules when form is submitted. Validation works fine. **What is the expected behavior?** If the form is invalid, I would like to scroll the page to the first invalid element after the form is submitted but unfortunately components do not expose the underlying DOM three (except via the Fiber object) and I cannot get the \"ref\" of any component, which makes scrolling not possible since I don't have the DOM reference. I am trying to avoid ref forwarding on \"form field\" components because I would like the Form to handle all validation related code (for encapsulation purposes and in case I want to publish this as a library, for instance). **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** react: \"^16.4.0\" Is there any way to achieve this?",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * feature * * current behavior ? * * form component `` form field '' child ( input ( ) , checkbox ( ) , etc ) validated custom rule form submitted . validation work fine . * * expected behavior ? * * form invalid , would like scroll page first invalid element form submitted unfortunately component expose underlying dom three ( except via fiber object ) get `` ref '' component , make scrolling possible since n't dom reference . trying avoid ref forwarding `` form field '' component would like form handle validation related code ( encapsulation purpose case want publish library , instance ) . * * version react , browser / o affected issue ? work previous version react ? * * react : `` ^16.4.0 '' way achieve ?",
        "title_stopwords_removal_lemmatization": "access react component underlying dom tree"
    },
    {
        "issue_id": 354128604,
        "title": "Consider keeping legacy context API for non-state usages",
        "label": [
            "Type: Question"
        ],
        "date": "2018-08-26T20:59:00Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?** Feature request / question\r\n\r\nAccording to React docs, there are 2 ways to avoid passing props through many levels:\r\n1. (New) context API\r\n2. Composition (Inversion of control)\r\n\r\nWhen using the new context API, a consumer component must know, and explicitly import, a context.\r\nThis raises a quite big disadvantage comparing to the legacy context API:\r\nSuch component can't be reusable with different contexts (unless making a prop only version of this component, and wrapping it with another one that uses the context directly). \r\nIn fact, it means that a component can't be \"contextual\" and reusable (by different contexts) at the same time.\r\n\r\nUsing composition in many cases feels wrong for solving this, quoting the docs:\r\n_However, this isn\u2019t the right choice in every case: moving more complexity higher in the tree makes those higher-level components more complicated and forces the lower-level components to be more flexible than you may want._\r\n\r\nExample of a component I struggle to understand why it should now import a context:\r\n```JavaScript\r\nimport * as React from \"react\"\r\nimport * as propsTypes from \"prop-types\"\r\n\r\nexport class Link extends React.PureComponent {\r\n  static contextTypes = {\r\n    navTo: propsTypes.any\r\n  }\r\n  \r\n  handleClick = (e) => {\r\n    e.preventDefault()\r\n    const {path} = this.props\r\n    this.context.navTo(path)\r\n  }\r\n\r\n  render() {\r\n    const {path, ...props} = this.props\r\n    return <a href={path} onClick={this.handleClick} {...props} />\r\n  }\r\n}\r\n```\r\n\r\nIf it was already discussed or answered, I apologize, couldn't find any related issues.",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?** Feature request / question    According to React docs, there are 2 ways to avoid passing props through many levels:  1. (New) context API  2. Composition (Inversion of control)    When using the new context API, a consumer component must know, and explicitly import, a context.  This raises a quite big disadvantage comparing to the legacy context API:  Such component can't be reusable with different contexts (unless making a prop only version of this component, and wrapping it with another one that uses the context directly).   In fact, it means that a component can't be \"contextual\" and reusable (by different contexts) at the same time.    Using composition in many cases feels wrong for solving this, quoting the docs:  _However, this isn\u2019t the right choice in every case: moving more complexity higher in the tree makes those higher-level components more complicated and forces the lower-level components to be more flexible than you may want._    Example of a component I struggle to understand why it should now import a context:  ```JavaScript  import * as React from \"react\"  import * as propsTypes from \"prop-types\"    export class Link extends React.PureComponent {    static contextTypes = {      navTo: propsTypes.any    }        handleClick = (e) => {      e.preventDefault()      const {path} = this.props      this.context.navTo(path)    }      render() {      const {path, ...props} = this.props      return <a href={path} onClick={this.handleClick} {...props} />    }  }  ```    If it was already discussed or answered, I apologize, couldn't find any related issues.",
        "human_words": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?** Feature request / question    According to React docs, there are 2 ways to avoid passing props through many levels:  1. (New) context API  2. Composition (Inversion of control)    When using the new context API, a consumer component must know, and explicitly import, a context.  This raises a quite big disadvantage comparing to the legacy context API:  Such component can't be reusable with different contexts (unless making a prop only version of this component, and wrapping it with another one that uses the context directly).   In fact, it means that a component can't be \"contextual\" and reusable (by different contexts) at the same time.    Using composition in many cases feels wrong for solving this, quoting the docs:  _However, this isn\u2019t the right choice in every case: moving more complexity higher in the tree makes those higher-level components more complicated and forces the lower-level components to be more flexible than you may want._    Example of a component I struggle to understand why it should now import a context:      If it was already discussed or answered, I apologize, couldn't find any related issues.",
        "human_words_regrex": " **Do you want to request a *feature* or report a *bug*?** Feature request / question According to React docs, there are 2 ways to avoid passing props through many levels: 1. (New) context API 2. Composition (Inversion of control) When using the new context API, a consumer component must know, and explicitly import, a context. This raises a quite big disadvantage comparing to the legacy context API: Such component can't be reusable with different contexts (unless making a prop only version of this component, and wrapping it with another one that uses the context directly). In fact, it means that a component can't be \"contextual\" and reusable (by different contexts) at the same time. Using composition in many cases feels wrong for solving this, quoting the docs: _However, this isn\u2019t the right choice in every case: moving more complexity higher in the tree makes those higher-level components more complicated and forces the lower-level components to be more flexible than you may want._ Example of a component I struggle to understand why it should now import a context: If it was already discussed or answered, I apologize, couldn't find any related issues.",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * feature request / question according react doc , 2 way avoid passing prop many level : 1 . ( new ) context api 2. composition ( inversion control ) using new context api , consumer component must know , explicitly import , context . raise quite big disadvantage comparing legacy context api : component ca n't reusable different context ( unless making prop version component , wrapping another one us context directly ) . fact , mean component ca n't `` contextual '' reusable ( different context ) time . using composition many case feel wrong solving , quoting doc : _however , \u2019 right choice every case : moving complexity higher tree make higher-level component complicated force lower-level component flexible may want._ example component struggle understand import context : already discussed answered , apologize , could n't find related issue .",
        "title_stopwords_removal_lemmatization": "consider keeping legacy context api non-state usage"
    },
    {
        "issue_id": 354112762,
        "title": "Question on reconciliation",
        "label": [
            "Type: Question"
        ],
        "date": "2018-08-26T17:31:50Z",
        "status": "closed",
        "description": " I think I understood reconciliation in react however there is one thing I would like to clarify.\r\nLet's say on first render, we render:\r\n\r\n```\r\n<ul>\r\n  <li>Duke</li> // key 0\r\n  <li>Villanova</li> // key 1\r\n</ul>\r\n```\r\n\r\nAnd on next render\r\n\r\n\r\n```\r\n<ul>\r\n  <li>Connecticut</li> // key 0\r\n  <li>Duke</li> // key 1\r\n  <li>Villanova</li> // key 2\r\n</ul>\r\n```\r\n\r\nIf I understood reconciliation correctly on the second render, react will check that **types (e.g. `<li>`) and keys of first two items from first and second render match**, hence it will add only the new item with key 2 to the new output, hence generate following result:\r\n\r\n```\r\n<ul>\r\n  <li>Duke</li> // key 0\r\n  <li>Villanova</li> // key 1\r\n  <li>Villanova</li> // key 2\r\n</ul>\r\n```\r\n\r\nHowever I think this is not what react will generate and it seems then there is some issue with my understanding (especially the bold part in the previous paragraph). Can someone explain what I missed in my understanding?",
        "remove_template_description": "I think I understood reconciliation in react however there is one thing I would like to clarify.  Let's say on first render, we render:    ```  <ul>    <li>Duke</li> // key 0    <li>Villanova</li> // key 1  </ul>  ```    And on next render      ```  <ul>    <li>Connecticut</li> // key 0    <li>Duke</li> // key 1    <li>Villanova</li> // key 2  </ul>  ```    If I understood reconciliation correctly on the second render, react will check that **types (e.g. `<li>`) and keys of first two items from first and second render match**, hence it will add only the new item with key 2 to the new output, hence generate following result:    ```  <ul>    <li>Duke</li> // key 0    <li>Villanova</li> // key 1    <li>Villanova</li> // key 2  </ul>  ```    However I think this is not what react will generate and it seems then there is some issue with my understanding (especially the bold part in the previous paragraph). Can someone explain what I missed in my understanding?",
        "human_words": "I think I understood reconciliation in react however there is one thing I would like to clarify.  Let's say on first render, we render:        And on next render          If I understood reconciliation correctly on the second render, react will check that **types (e.g. `<li>`) and keys of first two items from first and second render match**, hence it will add only the new item with key 2 to the new output, hence generate following result:        However I think this is not what react will generate and it seems then there is some issue with my understanding (especially the bold part in the previous paragraph). Can someone explain what I missed in my understanding?",
        "human_words_regrex": "I think I understood reconciliation in react however there is one thing I would like to clarify. Let's say on first render, we render: And on next render If I understood reconciliation correctly on the second render, react will check that **types (e.g. ``) and keys of first two items from first and second render match**, hence it will add only the new item with key 2 to the new output, hence generate following result: However I think this is not what react will generate and it seems then there is some issue with my understanding (especially the bold part in the previous paragraph). Can someone explain what I missed in my understanding?",
        "human_words_stopwords_removal_lemmatization": "think understood reconciliation react however one thing would like clarify . let 's say first render , render : next render understood reconciliation correctly second render , react check * * type ( e.g . `` ) key first two item first second render match * * , hence add new item key 2 new output , hence generate following result : however think react generate seems issue understanding ( especially bold part previous paragraph ) . someone explain missed understanding ?",
        "title_stopwords_removal_lemmatization": "question reconciliation"
    },
    {
        "issue_id": 354093835,
        "title": "react-test-renderer: is possible to test lifecycle functions?",
        "label": [
            "Type: Question",
            "Component: Test Renderer"
        ],
        "date": "2018-08-26T13:10:45Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nQuestion\r\n\r\n**What is the current behavior?**\r\n\r\nI am trying to use `react-test-renderer` and I notice that the lifecycles methods (ex: `componentDidMount`) need to be fired manually - `rendered.getInstance().componentDidMount()`, what solves my problem but reveals an other: I want to use shallow render, to test only the component under test, but then `react-test-renderer/shallow` API is minimal for rendering.\r\n\r\n**What is the expected behavior?**\r\n\r\nI was expecting that `react-test-renderer` would support testing my component reaction to the different lifecycles and be capable to use `shallow` rendering. Is there some way to use `react-test-renderer` in this scenario? Or is better I move to another library like `enzyme`?\r\n",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**    Question    **What is the current behavior?**    I am trying to use `react-test-renderer` and I notice that the lifecycles methods (ex: `componentDidMount`) need to be fired manually - `rendered.getInstance().componentDidMount()`, what solves my problem but reveals an other: I want to use shallow render, to test only the component under test, but then `react-test-renderer/shallow` API is minimal for rendering.    **What is the expected behavior?**    I was expecting that `react-test-renderer` would support testing my component reaction to the different lifecycles and be capable to use `shallow` rendering. Is there some way to use `react-test-renderer` in this scenario? Or is better I move to another library like `enzyme`?",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**    Question    **What is the current behavior?**    I am trying to use `react-test-renderer` and I notice that the lifecycles methods (ex: `componentDidMount`) need to be fired manually - `rendered.getInstance().componentDidMount()`, what solves my problem but reveals an other: I want to use shallow render, to test only the component under test, but then `react-test-renderer/shallow` API is minimal for rendering.    **What is the expected behavior?**    I was expecting that `react-test-renderer` would support testing my component reaction to the different lifecycles and be capable to use `shallow` rendering. Is there some way to use `react-test-renderer` in this scenario? Or is better I move to another library like `enzyme`?",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** Question **What is the current behavior?** I am trying to use `react-test-renderer` and I notice that the lifecycles methods (ex: `componentDidMount`) need to be fired manually - `rendered.getInstance().componentDidMount()`, what solves my problem but reveals an other: I want to use shallow render, to test only the component under test, but then `react-test-renderer/shallow` API is minimal for rendering. **What is the expected behavior?** I was expecting that `react-test-renderer` would support testing my component reaction to the different lifecycles and be capable to use `shallow` rendering. Is there some way to use `react-test-renderer` in this scenario? Or is better I move to another library like `enzyme`?",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * question * * current behavior ? * * trying use ` react-test-renderer ` notice lifecycles method ( ex : ` componentdidmount ` ) need fired manually - ` rendered.getinstance ( ) .componentdidmount ( ) ` , solves problem reveals : want use shallow render , test component test , ` react-test-renderer/shallow ` api minimal rendering . * * expected behavior ? * * expecting ` react-test-renderer ` would support testing component reaction different lifecycles capable use ` shallow ` rendering . way use ` react-test-renderer ` scenario ? better move another library like ` enzyme ` ?",
        "title_stopwords_removal_lemmatization": "react-test-renderer : possible test lifecycle function ?"
    },
    {
        "issue_id": 353293895,
        "title": "Get keys in react-reconciler",
        "label": [
            "Type: Question",
            "Component: Reconciler",
            "Resolution: Stale"
        ],
        "date": "2018-08-23T09:15:50Z",
        "status": "closed",
        "description": "I am struggling to implement reusable views on mobile platforms and to make it i need to get key values (explicitly set and generated) in react-reconciler to match two different view trees somewhere outside react.\r\n\r\nIs there a way to achieve this?\r\n\r\nThanks!",
        "remove_template_description": "I am struggling to implement reusable views on mobile platforms and to make it i need to get key values (explicitly set and generated) in react-reconciler to match two different view trees somewhere outside react.    Is there a way to achieve this?    Thanks!",
        "human_words": "I am struggling to implement reusable views on mobile platforms and to make it i need to get key values (explicitly set and generated) in react-reconciler to match two different view trees somewhere outside react.    Is there a way to achieve this?    Thanks!",
        "human_words_regrex": "I am struggling to implement reusable views on mobile platforms and to make it i need to get key values (explicitly set and generated) in react-reconciler to match two different view trees somewhere outside react. Is there a way to achieve this? Thanks!",
        "human_words_stopwords_removal_lemmatization": "struggling implement reusable view mobile platform make need get key value ( explicitly set generated ) react-reconciler match two different view tree somewhere outside react . way achieve ? thanks !",
        "title_stopwords_removal_lemmatization": "get key react-reconciler"
    },
    {
        "issue_id": 352607377,
        "title": "Component.prototype.setState() callback is not receiving any arguments",
        "label": [
            "Type: Question"
        ],
        "date": "2018-08-21T15:57:33Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\n```Component.prototype.setState()```'s callback is not receiving any parameters, though line 47 in `/packages/react/src/ReactBaseClasses.js` states, that: `It will be called with the up to date component arguments (state, props, context).`\r\n\r\nhttps://github.com/facebook/react/blob/aeda7b745d9c080150704feb20ea576238a1b9a1/packages/react/src/ReactBaseClasses.js#L45-L47\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://jsfiddle.net/n5u2wwjg/145295/\r\n\r\nPlease check the console after clicking the button, as it will display an empty array, indicating that it doesn't get called with any parameters.\r\n\r\n**What is the expected behavior?**\r\n\r\nAs the comment mentions, we should get the updated state and props and context as arguments.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nI'm checking this behaviour in React v16.4.2 using Chrome 68, Mac OS High Sierra 10.13.6 and it also didn't seem to work in previous versions, though I didn't go back in the version history.\r\n",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**    Bug    **What is the current behavior?**    ```Component.prototype.setState()```'s callback is not receiving any parameters, though line 47 in `/packages/react/src/ReactBaseClasses.js` states, that: `It will be called with the up to date component arguments (state, props, context).`    https://github.com/facebook/react/blob/aeda7b745d9c080150704feb20ea576238a1b9a1/packages/react/src/ReactBaseClasses.js#L45-L47    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**    https://jsfiddle.net/n5u2wwjg/145295/    Please check the console after clicking the button, as it will display an empty array, indicating that it doesn't get called with any parameters.    **What is the expected behavior?**    As the comment mentions, we should get the updated state and props and context as arguments.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    I'm checking this behaviour in React v16.4.2 using Chrome 68, Mac OS High Sierra 10.13.6 and it also didn't seem to work in previous versions, though I didn't go back in the version history.",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**    Bug    **What is the current behavior?**    's callback is not receiving any parameters, though line 47 in `/packages/react/src/ReactBaseClasses.js` states, that: `It will be called with the up to date component arguments (state, props, context).`    https://github.com/facebook/react/blob/aeda7b745d9c080150704feb20ea576238a1b9a1/packages/react/src/ReactBaseClasses.js#L45-L47    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**    https://jsfiddle.net/n5u2wwjg/145295/    Please check the console after clicking the button, as it will display an empty array, indicating that it doesn't get called with any parameters.    **What is the expected behavior?**    As the comment mentions, we should get the updated state and props and context as arguments.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    I'm checking this behaviour in React v16.4.2 using Chrome 68, Mac OS High Sierra 10.13.6 and it also didn't seem to work in previous versions, though I didn't go back in the version history.",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** Bug **What is the current behavior?** 's callback is not receiving any parameters, though line 47 in `/packages/react/src/ReactBaseClasses.js` states, that: `It will be called with the up to date component arguments (state, props, context).`  **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle ( or CodeSandbox ( example below:**  Please check the console after clicking the button, as it will display an empty array, indicating that it doesn't get called with any parameters. **What is the expected behavior?** As the comment mentions, we should get the updated state and props and context as arguments. **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** I'm checking this behaviour in React v16.4.2 using Chrome 68, Mac OS High Sierra 10.13.6 and it also didn't seem to work in previous versions, though I didn't go back in the version history.",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * bug * * current behavior ? * * 's callback receiving parameter , though line 47 ` /packages/react/src/reactbaseclasses.js ` state , : ` called date component argument ( state , prop , context ) . ` * * current behavior bug , please provide step reproduce possible minimal demo problem . bug get fixed much faster run code n't dependency react . paste link jsfiddle ( codesandbox ( example : * * please check console clicking button , display empty array , indicating n't get called parameter . * * expected behavior ? * * comment mention , get updated state prop context argument . * * version react , browser / o affected issue ? work previous version react ? * * 'm checking behaviour react v16.4.2 using chrome 68 , mac o high sierra 10.13.6 also n't seem work previous version , though n't go back version history .",
        "title_stopwords_removal_lemmatization": "component.prototype.setstate ( ) callback receiving argument"
    },
    {
        "issue_id": 352382255,
        "title": "how map ? render An Array Of Elements ",
        "label": [
            "Type: Question",
            "Resolution: Needs More Information"
        ],
        "date": "2018-08-21T04:33:25Z",
        "status": "closed",
        "description": "  \r\n **What is the current behavior?**\r\n   react16+ support return array components, for example:\r\n   render() {\r\n      return [\r\n          \u300aLi\u300b1\u300a/Li\u300b\r\n          \u300aLi\u300b2\u300a/Li\u300b\r\n          \u300aLi\u300b3\u300a/Li\u300b\r\n      ]\r\n   }\r\n   export default ArrayDemo\r\n   ----------------\r\n   i want to map it with React.Children.map,\r\n  for example:\r\n  import ArrayDemo from 'xxx/xxx';\r\n  ....\r\n  React.Children.map(ArrayDemo,(item, index) => {\r\n      return \u300aCol span={6}\u300b{item}\u300a/Col\u300b\r\n  })\r\n  ....\r\n\r\n  -------------------\r\n  but ArrayDemo has become a single element; React.Children.toArray got [0] only;\r\n\r\n**What is the expected behavior?**\r\n\r\n  i expected since React can return array;  how can i map it? for sometimes i want to wrap each\r\n element in array ;\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n   16.4+\r\n\r\n\r\n---------------------------------------\r\nor am i missing something important?    thx a lot!\r\n\r\n",
        "remove_template_description": "**What is the current behavior?**     react16+ support return array components, for example:     render() {        return [            \u300aLi\u300b1\u300a/Li\u300b            \u300aLi\u300b2\u300a/Li\u300b            \u300aLi\u300b3\u300a/Li\u300b        ]     }     export default ArrayDemo     ----------------     i want to map it with React.Children.map,    for example:    import ArrayDemo from 'xxx/xxx';    ....    React.Children.map(ArrayDemo,(item, index) => {        return \u300aCol span={6}\u300b{item}\u300a/Col\u300b    })    ....      -------------------    but ArrayDemo has become a single element; React.Children.toArray got [0] only;    **What is the expected behavior?**      i expected since React can return array;  how can i map it? for sometimes i want to wrap each   element in array ;    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**       16.4+      ---------------------------------------  or am i missing something important?    thx a lot!",
        "human_words": "**What is the current behavior?**     react16+ support return array components, for example:     render() {        return [            \u300aLi\u300b1\u300a/Li\u300b            \u300aLi\u300b2\u300a/Li\u300b            \u300aLi\u300b3\u300a/Li\u300b        ]     }     export default ArrayDemo     ----------------     i want to map it with React.Children.map,    for example:    import ArrayDemo from 'xxx/xxx';    ....    React.Children.map(ArrayDemo,(item, index) => {        return \u300aCol span={6}\u300b{item}\u300a/Col\u300b    })    ....      -------------------    but ArrayDemo has become a single element; React.Children.toArray got [0] only;    **What is the expected behavior?**      i expected since React can return array;  how can i map it? for sometimes i want to wrap each   element in array ;    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**       16.4+      ---------------------------------------  or am i missing something important?    thx a lot!",
        "human_words_regrex": "**What is the current behavior?** react16+ support return array components, for example: render() { return [ \u300aLi\u300b1\u300a/Li\u300b \u300aLi\u300b2\u300a/Li\u300b \u300aLi\u300b3\u300a/Li\u300b ] } export default ArrayDemo ---------------- i want to map it with React.Children.map, for example: import ArrayDemo from 'xxx/xxx'; .... React.Children.map(ArrayDemo,(item, index) => { return \u300aCol span={6}\u300b{item}\u300a/Col\u300b }) .... ------------------- but ArrayDemo has become a single element; React.Children.toArray got [0] only; **What is the expected behavior?** i expected since React can return array; how can i map it? for sometimes i want to wrap each element in array ; **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** 16.4+ --------------------------------------- or am i missing something important? thx a lot!",
        "human_words_stopwords_removal_lemmatization": "* * current behavior ? * * react16+ support return array component , example : render ( ) { return [ \u300ali\u300b1\u300a/li\u300b \u300ali\u300b2\u300a/li\u300b \u300ali\u300b3\u300a/li\u300b ] } export default arraydemo -- -- -- -- -- -- -- -- want map react.children.map , example : import arraydemo 'xxx/xxx ' ; .... react.children.map ( arraydemo , ( item , index ) = > { return \u300acol span= { 6 } \u300b { item } \u300a/col\u300b } ) .... -- -- -- -- -- -- -- -- -- - arraydemo become single element ; react.children.toarray got [ 0 ] ; * * expected behavior ? * * expected since react return array ; map ? sometimes want wrap element array ; * * version react , browser / o affected issue ? work previous version react ? * * 16.4+ -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - missing something important ? thx lot !",
        "title_stopwords_removal_lemmatization": "map ? render array element"
    },
    {
        "issue_id": 352223467,
        "title": "tools for end-to-end testing",
        "label": [
            "Type: Question"
        ],
        "date": "2018-08-20T17:15:57Z",
        "status": "closed",
        "description": "This may be a question moreso than a feature request, but I can't seem to find the answer around the web. It seems most people are working on small apps or just ignoring this as an issue.\r\n\r\nI am working on a large react application, and seeing some issues with end-to-end testing. We have a webdriverio/selenium setup which seems to be rather common from what I understand. We use these tools to click some buttons, type some text, etc., and then find the affected DOM elements and do some assertions.\r\n\r\nHowever, and here is where the problem is, React does not synchronously perform all operations on the read DOM. It will use various methods to schedule work, which will be done asynchronously at some later time. I have found that in our tests, a few assertions at random will see that the real DOM is still in the previous state (rather than the new state that results from having clicked the button and whatnot) in every large test run.\r\n\r\nI have not seen many posts on the internet even acknowledge this as an issue. The one that I found that does only suggests adding timeouts throughout the tests. However, for obvious reasons, this is slow and non-deterministic.\r\n\r\nIs there a suggested way to know that a React application has finished performing all scheduled work? And if not, is there a discussion about this happening somewhere?\r\n",
        "remove_template_description": "This may be a question moreso than a feature request, but I can't seem to find the answer around the web. It seems most people are working on small apps or just ignoring this as an issue.    I am working on a large react application, and seeing some issues with end-to-end testing. We have a webdriverio/selenium setup which seems to be rather common from what I understand. We use these tools to click some buttons, type some text, etc., and then find the affected DOM elements and do some assertions.    However, and here is where the problem is, React does not synchronously perform all operations on the read DOM. It will use various methods to schedule work, which will be done asynchronously at some later time. I have found that in our tests, a few assertions at random will see that the real DOM is still in the previous state (rather than the new state that results from having clicked the button and whatnot) in every large test run.    I have not seen many posts on the internet even acknowledge this as an issue. The one that I found that does only suggests adding timeouts throughout the tests. However, for obvious reasons, this is slow and non-deterministic.    Is there a suggested way to know that a React application has finished performing all scheduled work? And if not, is there a discussion about this happening somewhere?",
        "human_words": "This may be a question moreso than a feature request, but I can't seem to find the answer around the web. It seems most people are working on small apps or just ignoring this as an issue.    I am working on a large react application, and seeing some issues with end-to-end testing. We have a webdriverio/selenium setup which seems to be rather common from what I understand. We use these tools to click some buttons, type some text, etc., and then find the affected DOM elements and do some assertions.    However, and here is where the problem is, React does not synchronously perform all operations on the read DOM. It will use various methods to schedule work, which will be done asynchronously at some later time. I have found that in our tests, a few assertions at random will see that the real DOM is still in the previous state (rather than the new state that results from having clicked the button and whatnot) in every large test run.    I have not seen many posts on the internet even acknowledge this as an issue. The one that I found that does only suggests adding timeouts throughout the tests. However, for obvious reasons, this is slow and non-deterministic.    Is there a suggested way to know that a React application has finished performing all scheduled work? And if not, is there a discussion about this happening somewhere?",
        "human_words_regrex": "This may be a question moreso than a feature request, but I can't seem to find the answer around the web. It seems most people are working on small apps or just ignoring this as an issue. I am working on a large react application, and seeing some issues with end-to-end testing. We have a webdriverio/selenium setup which seems to be rather common from what I understand. We use these tools to click some buttons, type some text, etc., and then find the affected DOM elements and do some assertions. However, and here is where the problem is, React does not synchronously perform all operations on the read DOM. It will use various methods to schedule work, which will be done asynchronously at some later time. I have found that in our tests, a few assertions at random will see that the real DOM is still in the previous state (rather than the new state that results from having clicked the button and whatnot) in every large test run. I have not seen many posts on the internet even acknowledge this as an issue. The one that I found that does only suggests adding timeouts throughout the tests. However, for obvious reasons, this is slow and non-deterministic. Is there a suggested way to know that a React application has finished performing all scheduled work? And if not, is there a discussion about this happening somewhere?",
        "human_words_stopwords_removal_lemmatization": "may question moreso feature request , ca n't seem find answer around web . seems people working small apps ignoring issue . working large react application , seeing issue end-to-end testing . webdriverio/selenium setup seems rather common understand . use tool click button , type text , etc. , find affected dom element assertion . however , problem , react synchronously perform operation read dom . use various method schedule work , done asynchronously later time . found test , assertion random see real dom still previous state ( rather new state result clicked button whatnot ) every large test run . seen many post internet even acknowledge issue . one found suggests adding timeouts throughout test . however , obvious reason , slow non-deterministic . suggested way know react application finished performing scheduled work ? , discussion happening somewhere ?",
        "title_stopwords_removal_lemmatization": "tool end-to-end testing"
    },
    {
        "issue_id": 350571032,
        "title": "Avoid reconciliation, alternative component interface",
        "label": [
            "Type: Question"
        ],
        "date": "2018-08-14T19:44:28Z",
        "status": "closed",
        "description": "Hello. I want to ask a question about a way to avoid reconciliation process.\r\n\r\nToday I can see the following process:\r\n\r\n1. Component wants to re-render.\r\n2. Component render method provides new virtual dom.\r\n3. Some react diff library tries to find some non-optimal way to morph old virtual dom into new one.\r\n\r\nPlease fix me if I am wrong, I am not familiar with react codebase.\r\n\r\nI can see an information in [docs](https://reactjs.org/docs/reconciliation.html):\r\n\r\n> you don\u2019t have to worry about exactly what changes on every update\r\n\r\nBut your solution has complexity about O(n) or even worse, so user should care about what changes sometimes. When user knows what changed he will be able to provide O(log n) or even O(1) solution.\r\n\r\nFor example I am working with huge data list and I am receiving information from websocket about how to morph my list: append/prepend, remove, swap items, etc. I don't want to render huge component list and run reconciliation process for each mutation. I can tell virtual dom how to morph efficiently.\r\n\r\n![append](https://user-images.githubusercontent.com/941925/44114154-05201870-a013-11e8-9c7a-2e5ed890e372.jpg)\r\n\r\nIs there a way for user to provide morph method? I can imagine some api like:\r\n\r\n```\r\n// render is not defined\r\n\r\nmorph(component) {\r\n  if (...) {\r\n    component.append(<Item />);\r\n  } else {\r\n    (<Item />).prependTo(component.find({ key: '5' }));\r\n  }\r\n}\r\n\r\n```\r\n\r\nDo you have any plans to implement it? Thank you. Please feel free to ask any questions.",
        "remove_template_description": "Hello. I want to ask a question about a way to avoid reconciliation process.    Today I can see the following process:    1. Component wants to re-render.  2. Component render method provides new virtual dom.  3. Some react diff library tries to find some non-optimal way to morph old virtual dom into new one.    Please fix me if I am wrong, I am not familiar with react codebase.    I can see an information in [docs](https://reactjs.org/docs/reconciliation.html):    > you don\u2019t have to worry about exactly what changes on every update    But your solution has complexity about O(n) or even worse, so user should care about what changes sometimes. When user knows what changed he will be able to provide O(log n) or even O(1) solution.    For example I am working with huge data list and I am receiving information from websocket about how to morph my list: append/prepend, remove, swap items, etc. I don't want to render huge component list and run reconciliation process for each mutation. I can tell virtual dom how to morph efficiently.    ![append](https://user-images.githubusercontent.com/941925/44114154-05201870-a013-11e8-9c7a-2e5ed890e372.jpg)    Is there a way for user to provide morph method? I can imagine some api like:    ```  // render is not defined    morph(component) {    if (...) {      component.append(<Item />);    } else {      (<Item />).prependTo(component.find({ key: '5' }));    }  }    ```    Do you have any plans to implement it? Thank you. Please feel free to ask any questions.",
        "human_words": "Hello. I want to ask a question about a way to avoid reconciliation process.    Today I can see the following process:    1. Component wants to re-render.  2. Component render method provides new virtual dom.  3. Some react diff library tries to find some non-optimal way to morph old virtual dom into new one.    Please fix me if I am wrong, I am not familiar with react codebase.    I can see an information in [docs](https://reactjs.org/docs/reconciliation.html):    > you don\u2019t have to worry about exactly what changes on every update    But your solution has complexity about O(n) or even worse, so user should care about what changes sometimes. When user knows what changed he will be able to provide O(log n) or even O(1) solution.    For example I am working with huge data list and I am receiving information from websocket about how to morph my list: append/prepend, remove, swap items, etc. I don't want to render huge component list and run reconciliation process for each mutation. I can tell virtual dom how to morph efficiently.    ![append](https://user-images.githubusercontent.com/941925/44114154-05201870-a013-11e8-9c7a-2e5ed890e372.jpg)    Is there a way for user to provide morph method? I can imagine some api like:        Do you have any plans to implement it? Thank you. Please feel free to ask any questions.",
        "human_words_regrex": "Hello. I want to ask a question about a way to avoid reconciliation process. Today I can see the following process: 1. Component wants to re-render. 2. Component render method provides new virtual dom. 3. Some react diff library tries to find some non-optimal way to morph old virtual dom into new one. Please fix me if I am wrong, I am not familiar with react codebase. I can see an information in : > you don\u2019t have to worry about exactly what changes on every update But your solution has complexity about O(n) or even worse, so user should care about what changes sometimes. When user knows what changed he will be able to provide O(log n) or even O(1) solution. For example I am working with huge data list and I am receiving information from websocket about how to morph my list: append/prepend, remove, swap items, etc. I don't want to render huge component list and run reconciliation process for each mutation. I can tell virtual dom how to morph efficiently. ! Is there a way for user to provide morph method? I can imagine some api like: Do you have any plans to implement it? Thank you. Please feel free to ask any questions.",
        "human_words_stopwords_removal_lemmatization": "hello . want ask question way avoid reconciliation process . today see following process : 1. component want re-render . 2. component render method provides new virtual dom . 3. react diff library try find non-optimal way morph old virtual dom new one . please fix wrong , familiar react codebase . see information : > \u2019 worry exactly change every update solution complexity ( n ) even worse , user care change sometimes . user know changed able provide ( log n ) even ( 1 ) solution . example working huge data list receiving information websocket morph list : append/prepend , remove , swap item , etc . n't want render huge component list run reconciliation process mutation . tell virtual dom morph efficiently . ! way user provide morph method ? imagine api like : plan implement ? thank . please feel free ask question .",
        "title_stopwords_removal_lemmatization": "avoid reconciliation , alternative component interface"
    },
    {
        "issue_id": 339943556,
        "title": "What is meant within the README of `create-subscription` by async limitations? Can it be clarified?",
        "label": [
            "Type: Question"
        ],
        "date": "2018-07-10T17:44:50Z",
        "status": "closed",
        "description": "What is meant within the [`README.md` of `create-subscription`](https://github.com/facebook/react/tree/master/packages/create-subscription) by async limitations?\r\n\r\n> For full compatibility with asynchronous rendering, including both time-slicing and React Suspense, the suggested longer term solution is to move to one of the patterns described in the previous section.\r\n\r\nThe patterns described above are:\r\n\r\n> * Redux/Flux stores should use the context API instead.\r\n> * I/O subscriptions (e.g. notifications) that update infrequently should use simple-cache-provider instead.\r\n> * Complex libraries like Relay/Apollo should manage subscriptions manually with the same techniques which this library uses under the hood (as referenced here) in a way that is most optimized for their library usage.\r\n\r\nI don't think any of these suit our use case: a high performance WebSocket stream that produces price quotes which are rendered directly into components. The application domain is a realtime trading application for an investment bank I am consulting for.\r\n\r\nIdeally, we want the price quotes to be passed straight into the component with as little ceremony as possible. This state will be transient, so:\r\n\r\n* I don't see why I need to use some kind of state management solution to store it somewhere.\r\n* I don't think I should need to use `react#Context` and to then pass the data down the tree, since I can just import the service wherever I want in my code and pass callbacks into this to begin receiving data. The latter seems simpler, with less ceremony and will make it easier to differentiate between different streams of price updates.\r\n\r\nIt seems to me that `create-subscription` is exactly what I need, however the comment about async limitations worries me. Is there something I'm missing? Could this be clarified in the README?\r\n\r\nIs it because of priority? I think ideally we wish the price updates to be treated as if they are high priority, because we would prefer to decrease the likelihood of clients interacting with stale data.",
        "remove_template_description": "What is meant within the [`README.md` of `create-subscription`](https://github.com/facebook/react/tree/master/packages/create-subscription) by async limitations?    > For full compatibility with asynchronous rendering, including both time-slicing and React Suspense, the suggested longer term solution is to move to one of the patterns described in the previous section.    The patterns described above are:    > * Redux/Flux stores should use the context API instead.  > * I/O subscriptions (e.g. notifications) that update infrequently should use simple-cache-provider instead.  > * Complex libraries like Relay/Apollo should manage subscriptions manually with the same techniques which this library uses under the hood (as referenced here) in a way that is most optimized for their library usage.    I don't think any of these suit our use case: a high performance WebSocket stream that produces price quotes which are rendered directly into components. The application domain is a realtime trading application for an investment bank I am consulting for.    Ideally, we want the price quotes to be passed straight into the component with as little ceremony as possible. This state will be transient, so:    * I don't see why I need to use some kind of state management solution to store it somewhere.  * I don't think I should need to use `react#Context` and to then pass the data down the tree, since I can just import the service wherever I want in my code and pass callbacks into this to begin receiving data. The latter seems simpler, with less ceremony and will make it easier to differentiate between different streams of price updates.    It seems to me that `create-subscription` is exactly what I need, however the comment about async limitations worries me. Is there something I'm missing? Could this be clarified in the README?    Is it because of priority? I think ideally we wish the price updates to be treated as if they are high priority, because we would prefer to decrease the likelihood of clients interacting with stale data.",
        "human_words": "What is meant within the [`README.md` of `create-subscription`](https://github.com/facebook/react/tree/master/packages/create-subscription) by async limitations?    > For full compatibility with asynchronous rendering, including both time-slicing and React Suspense, the suggested longer term solution is to move to one of the patterns described in the previous section.    The patterns described above are:    > * Redux/Flux stores should use the context API instead.  > * I/O subscriptions (e.g. notifications) that update infrequently should use simple-cache-provider instead.  > * Complex libraries like Relay/Apollo should manage subscriptions manually with the same techniques which this library uses under the hood (as referenced here) in a way that is most optimized for their library usage.    I don't think any of these suit our use case: a high performance WebSocket stream that produces price quotes which are rendered directly into components. The application domain is a realtime trading application for an investment bank I am consulting for.    Ideally, we want the price quotes to be passed straight into the component with as little ceremony as possible. This state will be transient, so:    * I don't see why I need to use some kind of state management solution to store it somewhere.  * I don't think I should need to use `react#Context` and to then pass the data down the tree, since I can just import the service wherever I want in my code and pass callbacks into this to begin receiving data. The latter seems simpler, with less ceremony and will make it easier to differentiate between different streams of price updates.    It seems to me that `create-subscription` is exactly what I need, however the comment about async limitations worries me. Is there something I'm missing? Could this be clarified in the README?    Is it because of priority? I think ideally we wish the price updates to be treated as if they are high priority, because we would prefer to decrease the likelihood of clients interacting with stale data.",
        "human_words_regrex": "What is meant within the  by async limitations? > For full compatibility with asynchronous rendering, including both time-slicing and React Suspense, the suggested longer term solution is to move to one of the patterns described in the previous section. The patterns described above are: > * Redux/Flux stores should use the context API instead. > * I/O subscriptions (e.g. notifications) that update infrequently should use simple-cache-provider instead. > * Complex libraries like Relay/Apollo should manage subscriptions manually with the same techniques which this library uses under the hood (as referenced here) in a way that is most optimized for their library usage. I don't think any of these suit our use case: a high performance WebSocket stream that produces price quotes which are rendered directly into components. The application domain is a realtime trading application for an investment bank I am consulting for. Ideally, we want the price quotes to be passed straight into the component with as little ceremony as possible. This state will be transient, so: * I don't see why I need to use some kind of state management solution to store it somewhere. * I don't think I should need to use `react#Context` and to then pass the data down the tree, since I can just import the service wherever I want in my code and pass callbacks into this to begin receiving data. The latter seems simpler, with less ceremony and will make it easier to differentiate between different streams of price updates. It seems to me that `create-subscription` is exactly what I need, however the comment about async limitations worries me. Is there something I'm missing? Could this be clarified in the README? Is it because of priority? I think ideally we wish the price updates to be treated as if they are high priority, because we would prefer to decrease the likelihood of clients interacting with stale data.",
        "human_words_stopwords_removal_lemmatization": "meant within async limitation ? > full compatibility asynchronous rendering , including time-slicing react suspense , suggested longer term solution move one pattern described previous section . pattern described : > * redux/flux store use context api instead . > * i/o subscription ( e.g . notification ) update infrequently use simple-cache-provider instead . > * complex library like relay/apollo manage subscription manually technique library us hood ( referenced ) way optimized library usage . n't think suit use case : high performance websocket stream produce price quote rendered directly component . application domain realtime trading application investment bank consulting . ideally , want price quote passed straight component little ceremony possible . state transient , : * n't see need use kind state management solution store somewhere . * n't think need use ` react # context ` pas data tree , since import service wherever want code pas callback begin receiving data . latter seems simpler , le ceremony make easier differentiate different stream price update . seems ` create-subscription ` exactly need , however comment async limitation worry . something 'm missing ? could clarified readme ? priority ? think ideally wish price update treated high priority , would prefer decrease likelihood client interacting stale data .",
        "title_stopwords_removal_lemmatization": "meant within readme ` create-subscription ` async limitation ? clarified ?"
    },
    {
        "issue_id": 329659207,
        "title": "componentWillUpdate discussion",
        "label": [
            "Type: Question"
        ],
        "date": "2018-06-05T23:25:50Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature : componentWillUpdate Discussion\r\n\r\n**What is the current behavior?**\r\n\r\nThe current behavior calls the function before re-rendering the render target however there is no indication for when the re-render method should be called\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n**What is the expected behavior?**\r\n\r\nThe expected behavior should call the function before re-rendering the render target if there is no returned conditional statement and if there is, true should trigger the re-render and false should not\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.4.0\r\n\r\nI have a few questions before I try to solve this problem and it gets rejected. I'm assuming that the team has decided to move in the direction of removing \"Will-Updates\" from React all together and have labeled them \"Unsafe\". I've seen a lot of issues with those functionalities before as well. I was curious if providing a conditional statement inside those functions would satisfy the unexpected renders. \"shouldComponentUpdate\" does trigger when to call these functions however in those functions that \"will\" run before the render can always be controlled with a conditional statement of it's own. I'm getting comfortable with the code base however I'm curious if the team is removing that functionality all together and using the \"static\" function \"getDerivedStateFromProps\" instead. Has a React lover it is a little confusing and may break a lot of legacy code when updating versions. I believe that may solve the problem of unexpected renders after a \"will\" change lifecycle event.\r\n\r\nI was curious if that was the case, and removing \"will\" lifecycles is the next steps for React then how will the \"did\" lifecycles work instead?\r\n\r\nI love React and I'm just curious about the future for React as a whole. I'd love to tackle any bugs or feature requests when I have time. I will be writing clean code and create tests for new features or bugs as well.",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**    Feature : componentWillUpdate Discussion    **What is the current behavior?**    The current behavior calls the function before re-rendering the render target however there is no indication for when the re-render method should be called    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**    **What is the expected behavior?**    The expected behavior should call the function before re-rendering the render target if there is no returned conditional statement and if there is, true should trigger the re-render and false should not    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    16.4.0    I have a few questions before I try to solve this problem and it gets rejected. I'm assuming that the team has decided to move in the direction of removing \"Will-Updates\" from React all together and have labeled them \"Unsafe\". I've seen a lot of issues with those functionalities before as well. I was curious if providing a conditional statement inside those functions would satisfy the unexpected renders. \"shouldComponentUpdate\" does trigger when to call these functions however in those functions that \"will\" run before the render can always be controlled with a conditional statement of it's own. I'm getting comfortable with the code base however I'm curious if the team is removing that functionality all together and using the \"static\" function \"getDerivedStateFromProps\" instead. Has a React lover it is a little confusing and may break a lot of legacy code when updating versions. I believe that may solve the problem of unexpected renders after a \"will\" change lifecycle event.    I was curious if that was the case, and removing \"will\" lifecycles is the next steps for React then how will the \"did\" lifecycles work instead?    I love React and I'm just curious about the future for React as a whole. I'd love to tackle any bugs or feature requests when I have time. I will be writing clean code and create tests for new features or bugs as well.",
        "human_words": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**    Feature : componentWillUpdate Discussion    **What is the current behavior?**    The current behavior calls the function before re-rendering the render target however there is no indication for when the re-render method should be called    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**    **What is the expected behavior?**    The expected behavior should call the function before re-rendering the render target if there is no returned conditional statement and if there is, true should trigger the re-render and false should not    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    16.4.0    I have a few questions before I try to solve this problem and it gets rejected. I'm assuming that the team has decided to move in the direction of removing \"Will-Updates\" from React all together and have labeled them \"Unsafe\". I've seen a lot of issues with those functionalities before as well. I was curious if providing a conditional statement inside those functions would satisfy the unexpected renders. \"shouldComponentUpdate\" does trigger when to call these functions however in those functions that \"will\" run before the render can always be controlled with a conditional statement of it's own. I'm getting comfortable with the code base however I'm curious if the team is removing that functionality all together and using the \"static\" function \"getDerivedStateFromProps\" instead. Has a React lover it is a little confusing and may break a lot of legacy code when updating versions. I believe that may solve the problem of unexpected renders after a \"will\" change lifecycle event.    I was curious if that was the case, and removing \"will\" lifecycles is the next steps for React then how will the \"did\" lifecycles work instead?    I love React and I'm just curious about the future for React as a whole. I'd love to tackle any bugs or feature requests when I have time. I will be writing clean code and create tests for new features or bugs as well.",
        "human_words_regrex": " **Do you want to request a *feature* or report a *bug*?** Feature : componentWillUpdate Discussion **What is the current behavior?** The current behavior calls the function before re-rendering the render target however there is no indication for when the re-render method should be called **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle ( or CodeSandbox ( example below:** **What is the expected behavior?** The expected behavior should call the function before re-rendering the render target if there is no returned conditional statement and if there is, true should trigger the re-render and false should not **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** 16.4.0 I have a few questions before I try to solve this problem and it gets rejected. I'm assuming that the team has decided to move in the direction of removing \"Will-Updates\" from React all together and have labeled them \"Unsafe\". I've seen a lot of issues with those functionalities before as well. I was curious if providing a conditional statement inside those functions would satisfy the unexpected renders. \"shouldComponentUpdate\" does trigger when to call these functions however in those functions that \"will\" run before the render can always be controlled with a conditional statement of it's own. I'm getting comfortable with the code base however I'm curious if the team is removing that functionality all together and using the \"static\" function \"getDerivedStateFromProps\" instead. Has a React lover it is a little confusing and may break a lot of legacy code when updating versions. I believe that may solve the problem of unexpected renders after a \"will\" change lifecycle event. I was curious if that was the case, and removing \"will\" lifecycles is the next steps for React then how will the \"did\" lifecycles work instead? I love React and I'm just curious about the future for React as a whole. I'd love to tackle any bugs or feature requests when I have time. I will be writing clean code and create tests for new features or bugs as well.",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * feature : componentwillupdate discussion * * current behavior ? * * current behavior call function re-rendering render target however indication re-render method called * * current behavior bug , please provide step reproduce possible minimal demo problem . bug get fixed much faster run code n't dependency react . paste link jsfiddle ( codesandbox ( example : * * * * expected behavior ? * * expected behavior call function re-rendering render target returned conditional statement , true trigger re-render false * * version react , browser / o affected issue ? work previous version react ? * * 16.4.0 question try solve problem get rejected . 'm assuming team decided move direction removing `` will-updates '' react together labeled `` unsafe '' . 've seen lot issue functionality well . curious providing conditional statement inside function would satisfy unexpected render . `` shouldcomponentupdate '' trigger call function however function `` '' run render always controlled conditional statement 's . 'm getting comfortable code base however 'm curious team removing functionality together using `` static '' function `` getderivedstatefromprops '' instead . react lover little confusing may break lot legacy code updating version . believe may solve problem unexpected render `` '' change lifecycle event . curious case , removing `` '' lifecycles next step react `` '' lifecycles work instead ? love react 'm curious future react whole . 'd love tackle bug feature request time . writing clean code create test new feature bug well .",
        "title_stopwords_removal_lemmatization": "componentwillupdate discussion"
    },
    {
        "issue_id": 327237077,
        "title": "Keep using legacy Context API - or how to achieve this with new API",
        "label": [
            "Type: Question"
        ],
        "date": "2018-05-29T09:22:53Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nmore like a feature.\r\n\r\n**What is the current behavior?**\r\n\r\nSo I am currently using the legacy context api very heavily.\r\nA typical \"component tree\" in my app might look a bit like this:\r\n```js\r\n<App>\r\n  <Component1> // provides 3 Objects via context all children might need at some point\r\n    <Component2> // might need one of the 3 Objects passed via context\r\n      <Foo> // additionally provides 2 Functions via context\r\n        <SomeList> // needs some Objects from <Component1>\r\n          <ListItem>\r\n            <SomeChild> // needs both functions from <Foo> and maybe some Objects from <Component1>\r\n              // ... and so on and so forth - you get the idea\r\n            </SomeChild>\r\n          </ListItem>\r\n        </SomeList>\r\n      </Foo>\r\n    </Component2>\r\n  </Component1>\r\n</App>\r\n```\r\n\r\nSo I Have a heavily nested component tree, where I use context all the time to pass functions, booleans, objects or whatever without having to use props all the time - I am trying to avoid \"prop drilling\" as much as possible.\r\n\r\nAdditionally, some of these context vars might be set in lifecycle methods after a first render or maybe after some HOC provided some data. It is basically all over the place.\r\n\r\n**What is the expected behavior?**\r\n\r\nMy question now is: I can't see any **proper** solution to achieve all this with the next context api. It will be a huge pain in the a** to achieve it and make some of my code completely unreadable.\r\n\r\nIs there any way to keep using the legacy context api? Maybe the React team could provide a extra package for that? Or maybe someone has a better idea on how to achieve this without having pretty bad prop drilling all over the place.\r\n\r\nLooking forward to your answers! best, Patrick\r\n",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**    more like a feature.    **What is the current behavior?**    So I am currently using the legacy context api very heavily.  A typical \"component tree\" in my app might look a bit like this:  ```js  <App>    <Component1> // provides 3 Objects via context all children might need at some point      <Component2> // might need one of the 3 Objects passed via context        <Foo> // additionally provides 2 Functions via context          <SomeList> // needs some Objects from <Component1>            <ListItem>              <SomeChild> // needs both functions from <Foo> and maybe some Objects from <Component1>                // ... and so on and so forth - you get the idea              </SomeChild>            </ListItem>          </SomeList>        </Foo>      </Component2>    </Component1>  </App>  ```    So I Have a heavily nested component tree, where I use context all the time to pass functions, booleans, objects or whatever without having to use props all the time - I am trying to avoid \"prop drilling\" as much as possible.    Additionally, some of these context vars might be set in lifecycle methods after a first render or maybe after some HOC provided some data. It is basically all over the place.    **What is the expected behavior?**    My question now is: I can't see any **proper** solution to achieve all this with the next context api. It will be a huge pain in the a** to achieve it and make some of my code completely unreadable.    Is there any way to keep using the legacy context api? Maybe the React team could provide a extra package for that? Or maybe someone has a better idea on how to achieve this without having pretty bad prop drilling all over the place.    Looking forward to your answers! best, Patrick",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**    more like a feature.    **What is the current behavior?**    So I am currently using the legacy context api very heavily.  A typical \"component tree\" in my app might look a bit like this:      So I Have a heavily nested component tree, where I use context all the time to pass functions, booleans, objects or whatever without having to use props all the time - I am trying to avoid \"prop drilling\" as much as possible.    Additionally, some of these context vars might be set in lifecycle methods after a first render or maybe after some HOC provided some data. It is basically all over the place.    **What is the expected behavior?**    My question now is: I can't see any **proper** solution to achieve all this with the next context api. It will be a huge pain in the a** to achieve it and make some of my code completely unreadable.    Is there any way to keep using the legacy context api? Maybe the React team could provide a extra package for that? Or maybe someone has a better idea on how to achieve this without having pretty bad prop drilling all over the place.    Looking forward to your answers! best, Patrick",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** more like a feature. **What is the current behavior?** So I am currently using the legacy context api very heavily. A typical \"component tree\" in my app might look a bit like this: So I Have a heavily nested component tree, where I use context all the time to pass functions, booleans, objects or whatever without having to use props all the time - I am trying to avoid \"prop drilling\" as much as possible. Additionally, some of these context vars might be set in lifecycle methods after a first render or maybe after some HOC provided some data. It is basically all over the place. **What is the expected behavior?** My question now is: I can't see any **proper** solution to achieve all this with the next context api. It will be a huge pain in the a** to achieve it and make some of my code completely unreadable. Is there any way to keep using the legacy context api? Maybe the React team could provide a extra package for that? Or maybe someone has a better idea on how to achieve this without having pretty bad prop drilling all over the place. Looking forward to your answers! best, Patrick",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * like feature . * * current behavior ? * * currently using legacy context api heavily . typical `` component tree '' app might look bit like : heavily nested component tree , use context time pas function , booleans , object whatever without use prop time - trying avoid `` prop drilling '' much possible . additionally , context var might set lifecycle method first render maybe hoc provided data . basically place . * * expected behavior ? * * question : ca n't see * * proper * * solution achieve next context api . huge pain * * achieve make code completely unreadable . way keep using legacy context api ? maybe react team could provide extra package ? maybe someone better idea achieve without pretty bad prop drilling place . looking forward answer ! best , patrick",
        "title_stopwords_removal_lemmatization": "keep using legacy context api - achieve new api"
    },
    {
        "issue_id": 326774977,
        "title": "Suspense: timeout expiration and siblings rendering issues",
        "label": [
            "Type: Question"
        ],
        "date": "2018-05-26T23:38:59Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nCode for reproducing is [here](https://github.com/alexeyraspopov/react-suspense-sandbox/tree/cb3b60be69523de8f720a474c965face2b521b9b). I've also deployed an example to Zeit Now: https://suspense-fpwoufdzfv.now.sh/.\r\n\r\nThis is a basic example of using React Suspense and Simple Cache Provider. Postponing text rendering and showing loading spinners when it's necessary.\r\n\r\nI can see my use of `<Timeout />` doesn't really care about `ms` I'm passing \u2014 it always become expired right after the render. You can open a page and the loading bar appears immediately despite `1000ms` delay that it has.\r\n\r\nThere is content that is placed next to an async component (the one that's going to be suspended).\r\n\r\nhttps://github.com/alexeyraspopov/react-suspense-sandbox/blob/cb3b60be69523de8f720a474c965face2b521b9b/src/index.js#L51-L56\r\n\r\nLooking at React Suspense tests, it is assumed that sibling elements can be rendered in any way.\r\n\r\n**What is the expected behavior?**\r\n\r\n`<Timeout />` component only shows placehold when expired, sibling content is shown even if an async component was suspended.\r\n\r\nI built sources for `react`, `react-dom`, and `simple-cache-provider` from the current master, updating `enableSuspense` flag. I also used `<unstable_AsyncMode />` but it didn't seem to make any difference.\r\n\r\nI overall was really satisfied with this feature. I hope I did the code correctly so it shows the real bug. ",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**    Bug    **What is the current behavior?**    Code for reproducing is [here](https://github.com/alexeyraspopov/react-suspense-sandbox/tree/cb3b60be69523de8f720a474c965face2b521b9b). I've also deployed an example to Zeit Now: https://suspense-fpwoufdzfv.now.sh/.    This is a basic example of using React Suspense and Simple Cache Provider. Postponing text rendering and showing loading spinners when it's necessary.    I can see my use of `<Timeout />` doesn't really care about `ms` I'm passing \u2014 it always become expired right after the render. You can open a page and the loading bar appears immediately despite `1000ms` delay that it has.    There is content that is placed next to an async component (the one that's going to be suspended).    https://github.com/alexeyraspopov/react-suspense-sandbox/blob/cb3b60be69523de8f720a474c965face2b521b9b/src/index.js#L51-L56    Looking at React Suspense tests, it is assumed that sibling elements can be rendered in any way.    **What is the expected behavior?**    `<Timeout />` component only shows placehold when expired, sibling content is shown even if an async component was suspended.    I built sources for `react`, `react-dom`, and `simple-cache-provider` from the current master, updating `enableSuspense` flag. I also used `<unstable_AsyncMode />` but it didn't seem to make any difference.    I overall was really satisfied with this feature. I hope I did the code correctly so it shows the real bug.",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**    Bug    **What is the current behavior?**    Code for reproducing is [here](https://github.com/alexeyraspopov/react-suspense-sandbox/tree/cb3b60be69523de8f720a474c965face2b521b9b). I've also deployed an example to Zeit Now: https://suspense-fpwoufdzfv.now.sh/.    This is a basic example of using React Suspense and Simple Cache Provider. Postponing text rendering and showing loading spinners when it's necessary.    I can see my use of `<Timeout />` doesn't really care about `ms` I'm passing \u2014 it always become expired right after the render. You can open a page and the loading bar appears immediately despite `1000ms` delay that it has.    There is content that is placed next to an async component (the one that's going to be suspended).    https://github.com/alexeyraspopov/react-suspense-sandbox/blob/cb3b60be69523de8f720a474c965face2b521b9b/src/index.js#L51-L56    Looking at React Suspense tests, it is assumed that sibling elements can be rendered in any way.    **What is the expected behavior?**    `<Timeout />` component only shows placehold when expired, sibling content is shown even if an async component was suspended.    I built sources for `react`, `react-dom`, and `simple-cache-provider` from the current master, updating `enableSuspense` flag. I also used `<unstable_AsyncMode />` but it didn't seem to make any difference.    I overall was really satisfied with this feature. I hope I did the code correctly so it shows the real bug.",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** Bug **What is the current behavior?** Code for reproducing is . I've also deployed an example to Zeit Now:  This is a basic example of using React Suspense and Simple Cache Provider. Postponing text rendering and showing loading spinners when it's necessary. I can see my use of `` doesn't really care about `ms` I'm passing \u2014 it always become expired right after the render. You can open a page and the loading bar appears immediately despite `1000ms` delay that it has. There is content that is placed next to an async component (the one that's going to be suspended).  Looking at React Suspense tests, it is assumed that sibling elements can be rendered in any way. **What is the expected behavior?** `` component only shows placehold when expired, sibling content is shown even if an async component was suspended. I built sources for `react`, `react-dom`, and `simple-cache-provider` from the current master, updating `enableSuspense` flag. I also used `` but it didn't seem to make any difference. I overall was really satisfied with this feature. I hope I did the code correctly so it shows the real bug.",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * bug * * current behavior ? * * code reproducing . 've also deployed example zeit : basic example using react suspense simple cache provider . postponing text rendering showing loading spinner 's necessary . see use `` n't really care ` m ` 'm passing \u2014 always become expired right render . open page loading bar appears immediately despite ` 1000ms ` delay . content placed next async component ( one 's going suspended ) . looking react suspense test , assumed sibling element rendered way . * * expected behavior ? * * `` component show placehold expired , sibling content shown even async component suspended . built source ` react ` , ` react-dom ` , ` simple-cache-provider ` current master , updating ` enablesuspense ` flag . also used `` n't seem make difference . overall really satisfied feature . hope code correctly show real bug .",
        "title_stopwords_removal_lemmatization": "suspense : timeout expiration sibling rendering issue"
    },
    {
        "issue_id": 326729090,
        "title": "Questions regarding \"props.children\"",
        "label": [
            "Type: Question"
        ],
        "date": "2018-05-26T10:48:47Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\nJust questions\r\n\r\n### Some questions regarding props.children\r\n\r\nIn the official React documentation of [React.Children](https://reactjs.org/docs/react-api.html#reactchildren) you can read that ```this.props.children``` is an \"opaque data structure\".\r\nWhat does that mean EXACTLY?\r\n\r\nI think there are in general three possibilities for the transparency of the data structure of ```props.children```:\r\n\r\n#### Case 1: EVERY aspect of the ```props.children```data structure is open and well defined.\r\n\r\n  If this was right then the term \"opaque data structure\" would be completely wrong.\r\n  Therefore \"Case 1\" obviously is not the case.\r\n  \r\n#### Case 2: NO aspect of the ```props.children``` data structure is open or clear.\r\n\r\n   That would mean that whenever you use ```props.children``` you ALWAYS HAVE to use it in combination with ```React.Children``` as ```React.Children``` is the only one (mmmh, is it really the only one?) who knows about the actual data structure of ```props.children```.\r\n   \r\nBut that would imply that it should neither be allowed to use\r\n   \r\n ```javascript\r\n // This is used almost everywhere (even in the official React documentation)\r\n <div>{this.props.children}</div>\r\n ```\r\n\r\n nor\r\n\r\n ```javascript\r\n  // This is often seen with the \"Function as child\" pattern\r\n  MyComponent.propTypes = {\r\n    children: PropTypes.func.isRequired,\r\n  };\r\n  ```\r\n   \r\n As both examples are very common, it seems that \"Case 2\" is obviously also not the case.\r\n\t\r\n#### Case 3: SOME aspects of the ```props.children``` data structure are open and well defined.\r\n\r\nThat would open the possibility that one or even both of the examples in \"Case 2\" are valid.\r\nBut then it would mean that there should be an exact specification what aspects of ```props.children``` is well and openly defined and which aspects are really opaque.\r\nMaybe I've missed something in the React documentation, but I think it's not really exactly specified there, is it?\r\n\r\n#### And last but not least a further question:\r\n\r\nWhy exactly isn't ```props.children``` in case there are some children (one ore more) just always an array (as it is done in \"Preact\" for example)? That would make things so much easier, wouldn't it?\r\n\r\nMany thanks in advance for the clarifications.\r\n",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**  Just questions    ### Some questions regarding props.children    In the official React documentation of [React.Children](https://reactjs.org/docs/react-api.html#reactchildren) you can read that ```this.props.children``` is an \"opaque data structure\".  What does that mean EXACTLY?    I think there are in general three possibilities for the transparency of the data structure of ```props.children```:    #### Case 1: EVERY aspect of the ```props.children```data structure is open and well defined.      If this was right then the term \"opaque data structure\" would be completely wrong.    Therefore \"Case 1\" obviously is not the case.      #### Case 2: NO aspect of the ```props.children``` data structure is open or clear.       That would mean that whenever you use ```props.children``` you ALWAYS HAVE to use it in combination with ```React.Children``` as ```React.Children``` is the only one (mmmh, is it really the only one?) who knows about the actual data structure of ```props.children```.       But that would imply that it should neither be allowed to use        ```javascript   // This is used almost everywhere (even in the official React documentation)   <div>{this.props.children}</div>   ```     nor     ```javascript    // This is often seen with the \"Function as child\" pattern    MyComponent.propTypes = {      children: PropTypes.func.isRequired,    };    ```        As both examples are very common, it seems that \"Case 2\" is obviously also not the case.  \t  #### Case 3: SOME aspects of the ```props.children``` data structure are open and well defined.    That would open the possibility that one or even both of the examples in \"Case 2\" are valid.  But then it would mean that there should be an exact specification what aspects of ```props.children``` is well and openly defined and which aspects are really opaque.  Maybe I've missed something in the React documentation, but I think it's not really exactly specified there, is it?    #### And last but not least a further question:    Why exactly isn't ```props.children``` in case there are some children (one ore more) just always an array (as it is done in \"Preact\" for example)? That would make things so much easier, wouldn't it?    Many thanks in advance for the clarifications.",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**  Just questions    ### Some questions regarding props.children    In the official React documentation of [React.Children](https://reactjs.org/docs/react-api.html#reactchildren) you can read that  is an \"opaque data structure\".  What does that mean EXACTLY?    I think there are in general three possibilities for the transparency of the data structure of :    #### Case 1: EVERY aspect of the data structure is open and well defined.      If this was right then the term \"opaque data structure\" would be completely wrong.    Therefore \"Case 1\" obviously is not the case.      #### Case 2: NO aspect of the  data structure is open or clear.       That would mean that whenever you use  you ALWAYS HAVE to use it in combination with  as  is the only one (mmmh, is it really the only one?) who knows about the actual data structure of .       But that would imply that it should neither be allowed to use             nor             As both examples are very common, it seems that \"Case 2\" is obviously also not the case.  \t  #### Case 3: SOME aspects of the  data structure are open and well defined.    That would open the possibility that one or even both of the examples in \"Case 2\" are valid.  But then it would mean that there should be an exact specification what aspects of  is well and openly defined and which aspects are really opaque.  Maybe I've missed something in the React documentation, but I think it's not really exactly specified there, is it?    #### And last but not least a further question:    Why exactly isn't  in case there are some children (one ore more) just always an array (as it is done in \"Preact\" for example)? That would make things so much easier, wouldn't it?    Many thanks in advance for the clarifications.",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** Just questions ### Some questions regarding props.children In the official React documentation of  you can read that is an \"opaque data structure\". What does that mean EXACTLY? I think there are in general three possibilities for the transparency of the data structure of : #### Case 1: EVERY aspect of the data structure is open and well defined. If this was right then the term \"opaque data structure\" would be completely wrong. Therefore \"Case 1\" obviously is not the case. #### Case 2: NO aspect of the data structure is open or clear. That would mean that whenever you use you ALWAYS HAVE to use it in combination with as is the only one (mmmh, is it really the only one?) who knows about the actual data structure of . But that would imply that it should neither be allowed to use nor As both examples are very common, it seems that \"Case 2\" is obviously also not the case. #### Case 3: SOME aspects of the data structure are open and well defined. That would open the possibility that one or even both of the examples in \"Case 2\" are valid. But then it would mean that there should be an exact specification what aspects of is well and openly defined and which aspects are really opaque. Maybe I've missed something in the React documentation, but I think it's not really exactly specified there, is it? #### And last but not least a further question: Why exactly isn't in case there are some children (one ore more) just always an array (as it is done in \"Preact\" for example)? That would make things so much easier, wouldn't it? Many thanks in advance for the clarifications.",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * question # # # question regarding props.children official react documentation read `` opaque data structure '' . mean exactly ? think general three possibility transparency data structure : # # # # case 1 : every aspect data structure open well defined . right term `` opaque data structure '' would completely wrong . therefore `` case 1 '' obviously case . # # # # case 2 : aspect data structure open clear . would mean whenever use always use combination one ( mmmh , really one ? ) know actual data structure . would imply neither allowed use example common , seems `` case 2 '' obviously also case . # # # # case 3 : aspect data structure open well defined . would open possibility one even example `` case 2 '' valid . would mean exact specification aspect well openly defined aspect really opaque . maybe 've missed something react documentation , think 's really exactly specified , ? # # # # last least question : exactly n't case child ( one ore ) always array ( done `` preact '' example ) ? would make thing much easier , would n't ? many thanks advance clarification .",
        "title_stopwords_removal_lemmatization": "question regarding `` props.children ''"
    },
    {
        "issue_id": 319695368,
        "title": "Use and set a component's state within setInterval function",
        "label": [
            "Type: Question"
        ],
        "date": "2018-05-02T20:12:18Z",
        "status": "closed",
        "description": "This is a question, so I apologize if this isn't the best place to ask.\r\nI'm trying to work with a component's internal state within a setInterval function and I know there are some asynchronous problems I need to be aware of. I also know that I can pass setState a function which would help me protect against async problems... but I can't because I need to use the changed state within the setInterval function? Is what I'm doing safe or should I be working a different way around this problem.\r\n\r\nI've seen the following that nearly answers my question and am having trouble visualizing / adapting this (or maybe the behavior I have is fine?):\r\n[Stackoverflow Answer](https://stackoverflow.com/questions/43428456/do-i-need-to-use-setstatefunction-overload-in-this-case?utm_medium=organic&utm_source=google_rich_qa&utm_campaign=google_rich_qa)\r\n```\r\nsectionTimerHandler = () => {\r\n    const elapsedSectionTimeMs = this.state.elapsedSectionTimeMs + 1000;\r\n    // Do some stuff with elapsedSectionTimeMs\r\n    this.setState({elapsedSectionTimeMs});\r\n}\r\n\r\nrestartSectionTimer = () => {\r\n    if (this.sectionTimeIntervalId !== 0) {\r\n        window.clearInterval(this.sectionTimeIntervalId);\r\n    }\r\n    this.sectionTimeIntervalId = window.setInterval(this.sectionTimerHandler, 1000);\r\n    this.setState({ elapsedSectionTimeMs: 0 });\r\n}\r\n```\r\n\r\nor would something like the following be better/safer even though I'm using `this.state.elapsedSectionTimeMs + 1000` earlier in the function?\r\n\r\n```\r\n this.setState((prevState: AssessmentState) => {\r\n      return {\r\n          elapsedSectionTimeMs: prevState.elapsedSectionTimeMs + 1000\r\n      };\r\n});\r\n```",
        "remove_template_description": "This is a question, so I apologize if this isn't the best place to ask.  I'm trying to work with a component's internal state within a setInterval function and I know there are some asynchronous problems I need to be aware of. I also know that I can pass setState a function which would help me protect against async problems... but I can't because I need to use the changed state within the setInterval function? Is what I'm doing safe or should I be working a different way around this problem.    I've seen the following that nearly answers my question and am having trouble visualizing / adapting this (or maybe the behavior I have is fine?):  [Stackoverflow Answer](https://stackoverflow.com/questions/43428456/do-i-need-to-use-setstatefunction-overload-in-this-case?utm_medium=organic&utm_source=google_rich_qa&utm_campaign=google_rich_qa)  ```  sectionTimerHandler = () => {      const elapsedSectionTimeMs = this.state.elapsedSectionTimeMs + 1000;      // Do some stuff with elapsedSectionTimeMs      this.setState({elapsedSectionTimeMs});  }    restartSectionTimer = () => {      if (this.sectionTimeIntervalId !== 0) {          window.clearInterval(this.sectionTimeIntervalId);      }      this.sectionTimeIntervalId = window.setInterval(this.sectionTimerHandler, 1000);      this.setState({ elapsedSectionTimeMs: 0 });  }  ```    or would something like the following be better/safer even though I'm using `this.state.elapsedSectionTimeMs + 1000` earlier in the function?    ```   this.setState((prevState: AssessmentState) => {        return {            elapsedSectionTimeMs: prevState.elapsedSectionTimeMs + 1000        };  });  ```",
        "human_words": "This is a question, so I apologize if this isn't the best place to ask.  I'm trying to work with a component's internal state within a setInterval function and I know there are some asynchronous problems I need to be aware of. I also know that I can pass setState a function which would help me protect against async problems... but I can't because I need to use the changed state within the setInterval function? Is what I'm doing safe or should I be working a different way around this problem.    I've seen the following that nearly answers my question and am having trouble visualizing / adapting this (or maybe the behavior I have is fine?):  [Stackoverflow Answer](https://stackoverflow.com/questions/43428456/do-i-need-to-use-setstatefunction-overload-in-this-case?utm_medium=organic&utm_source=google_rich_qa&utm_campaign=google_rich_qa)      or would something like the following be better/safer even though I'm using `this.state.elapsedSectionTimeMs + 1000` earlier in the function?    ",
        "human_words_regrex": "This is a question, so I apologize if this isn't the best place to ask. I'm trying to work with a component's internal state within a setInterval function and I know there are some asynchronous problems I need to be aware of. I also know that I can pass setState a function which would help me protect against async problems... but I can't because I need to use the changed state within the setInterval function? Is what I'm doing safe or should I be working a different way around this problem. I've seen the following that nearly answers my question and am having trouble visualizing / adapting this (or maybe the behavior I have is fine?):  or would something like the following be better/safer even though I'm using `this.state.elapsedSectionTimeMs + 1000` earlier in the function? ",
        "human_words_stopwords_removal_lemmatization": "question , apologize n't best place ask . 'm trying work component 's internal state within setinterval function know asynchronous problem need aware . also know pas setstate function would help protect async problem ... ca n't need use changed state within setinterval function ? 'm safe working different way around problem . 've seen following nearly answer question trouble visualizing / adapting ( maybe behavior fine ? ) : would something like following better/safer even though 'm using ` this.state.elapsedsectiontimems + 1000 ` earlier function ?",
        "title_stopwords_removal_lemmatization": "use set component 's state within setinterval function"
    },
    {
        "issue_id": 319655070,
        "title": "Why are the Consumer and Provider properties of Consumer?",
        "label": [
            "Type: Question"
        ],
        "date": "2018-05-02T18:03:56Z",
        "status": "closed",
        "description": "Is there a higher meaning for 1) `Consumer` and `Provider` both being properties of `Consumer`?\r\n2) And `Consumer` being of type `Symbol(react.context)` _(and not react.consumer)_ while `Provider` is of type `Symbol(react.provider)`?\r\n\r\n```jsx\r\nconst MyContext = React.createContext('value')\r\nMyContext === MyContext.Consumer === MyContext.Consumer.Consumer\r\n```\r\n\r\nWhile this _**IS**_ **convenient**, because I usually only use Provider once as\r\n```jsx\r\nimport MyContext from './MyContext'\r\n\r\n<MyContext.Provider>\r\n  ...\r\n</MyContext.Provider>\r\n```\r\n... and then I can do less typing by simply using, \r\n```jsx\r\nimport MyContext from './MyContext'\r\n\r\n<MyContext>\r\n  ...\r\n</MyContext>\r\n```\r\n\r\nI would be interested in knowing where _(if)_ this is documented and what is the preferred way? Whether to use the full `<MyContext.Consumer>` or if it is legit to just simplify to `<MyContext>`.",
        "remove_template_description": "Is there a higher meaning for 1) `Consumer` and `Provider` both being properties of `Consumer`?  2) And `Consumer` being of type `Symbol(react.context)` _(and not react.consumer)_ while `Provider` is of type `Symbol(react.provider)`?    ```jsx  const MyContext = React.createContext('value')  MyContext === MyContext.Consumer === MyContext.Consumer.Consumer  ```    While this _**IS**_ **convenient**, because I usually only use Provider once as  ```jsx  import MyContext from './MyContext'    <MyContext.Provider>    ...  </MyContext.Provider>  ```  ... and then I can do less typing by simply using,   ```jsx  import MyContext from './MyContext'    <MyContext>    ...  </MyContext>  ```    I would be interested in knowing where _(if)_ this is documented and what is the preferred way? Whether to use the full `<MyContext.Consumer>` or if it is legit to just simplify to `<MyContext>`.",
        "human_words": "Is there a higher meaning for 1) `Consumer` and `Provider` both being properties of `Consumer`?  2) And `Consumer` being of type `Symbol(react.context)` _(and not react.consumer)_ while `Provider` is of type `Symbol(react.provider)`?        While this _**IS**_ **convenient**, because I usually only use Provider once as    ... and then I can do less typing by simply using,       I would be interested in knowing where _(if)_ this is documented and what is the preferred way? Whether to use the full `<MyContext.Consumer>` or if it is legit to just simplify to `<MyContext>`.",
        "human_words_regrex": "Is there a higher meaning for 1) `Consumer` and `Provider` both being properties of `Consumer`? 2) And `Consumer` being of type `Symbol(react.context)` _(and not react.consumer)_ while `Provider` is of type `Symbol(react.provider)`? While this _**IS**_ **convenient**, because I usually only use Provider once as ... and then I can do less typing by simply using, I would be interested in knowing where _(if)_ this is documented and what is the preferred way? Whether to use the full `` or if it is legit to just simplify to ``.",
        "human_words_stopwords_removal_lemmatization": "higher meaning 1 ) ` consumer ` ` provider ` property ` consumer ` ? 2 ) ` consumer ` type ` symbol ( react.context ) ` _ ( react.consumer ) _ ` provider ` type ` symbol ( react.provider ) ` ? _ * * * * _ * * convenient * * , usually use provider ... le typing simply using , would interested knowing _ ( ) _ documented preferred way ? whether use full `` legit simplify `` .",
        "title_stopwords_removal_lemmatization": "consumer provider property consumer ?"
    },
    {
        "issue_id": 319562686,
        "title": "Context API bitmask related questions",
        "label": [
            "Type: Question"
        ],
        "date": "2018-05-02T13:55:21Z",
        "status": "closed",
        "description": "I'm playing with Context API bitmask feature to bail out unwanted re-render.\r\n\r\nI have a dynamic model ( a JSON object) as context value. By dynamic i meant , the number of keys and structure of the JSON object is unknown. But when the JSON object changed , i know which key is changed. It seems difficult to turn the unknown keys to static pre-defined bitmasks. But I thought such use case is very common, and the bail-out feature should handle it easily by just matching the key. \r\n\r\nAlso I notice default changedBits and observedBits is MAX_SIGNED_31_BIT_INT. Does this mean it has a limitation up to 31 type of context change?",
        "remove_template_description": "I'm playing with Context API bitmask feature to bail out unwanted re-render.    I have a dynamic model ( a JSON object) as context value. By dynamic i meant , the number of keys and structure of the JSON object is unknown. But when the JSON object changed , i know which key is changed. It seems difficult to turn the unknown keys to static pre-defined bitmasks. But I thought such use case is very common, and the bail-out feature should handle it easily by just matching the key.     Also I notice default changedBits and observedBits is MAX_SIGNED_31_BIT_INT. Does this mean it has a limitation up to 31 type of context change?",
        "human_words": "I'm playing with Context API bitmask feature to bail out unwanted re-render.    I have a dynamic model ( a JSON object) as context value. By dynamic i meant , the number of keys and structure of the JSON object is unknown. But when the JSON object changed , i know which key is changed. It seems difficult to turn the unknown keys to static pre-defined bitmasks. But I thought such use case is very common, and the bail-out feature should handle it easily by just matching the key.     Also I notice default changedBits and observedBits is MAX_SIGNED_31_BIT_INT. Does this mean it has a limitation up to 31 type of context change?",
        "human_words_regrex": "I'm playing with Context API bitmask feature to bail out unwanted re-render. I have a dynamic model ( a JSON object) as context value. By dynamic i meant , the number of keys and structure of the JSON object is unknown. But when the JSON object changed , i know which key is changed. It seems difficult to turn the unknown keys to static pre-defined bitmasks. But I thought such use case is very common, and the bail-out feature should handle it easily by just matching the key. Also I notice default changedBits and observedBits is MAX_SIGNED_31_BIT_INT. Does this mean it has a limitation up to 31 type of context change?",
        "human_words_stopwords_removal_lemmatization": "'m playing context api bitmask feature bail unwanted re-render . dynamic model ( json object ) context value . dynamic meant , number key structure json object unknown . json object changed , know key changed . seems difficult turn unknown key static pre-defined bitmasks . thought use case common , bail-out feature handle easily matching key . also notice default changedbits observedbits max_signed_31_bit_int . mean limitation 31 type context change ?",
        "title_stopwords_removal_lemmatization": "context api bitmask related question"
    },
    {
        "issue_id": 317723596,
        "title": "Cloning the child of a context Consumer produces confusing warning and error",
        "label": [
            "Type: Question"
        ],
        "date": "2018-04-25T17:30:19Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nthis is a bug, or at least a request for more precise warnings and error messages.\r\n\r\n**What is the current behavior?**\r\n\r\nI was cloning children to add some properties and I overlooked that the context Consumer subtree should  not be cloned...\r\n\r\n```\r\nimport React from 'react';\r\nimport {render} from 'react-dom';\r\n\r\nconst { Provider, Consumer} = React.createContext();\r\n\r\nconst Comp = ({children})=> <Provider>{cloneKids(children)}</Provider>;\r\n\r\nconst cloneKids=(children)=>React.Children.map(children, child =>\r\n\t\t\t\t\t       React.cloneElement(child, child.props,\r\n\t\t\t\t\t\t\t\t  child.props.children&&\r\n\t\t\t\t\t\t\t\t  cloneKids(child.props.children)));\r\nrender(\r\n\t<Comp><Consumer>{console.log}</Consumer></Comp>,\r\n    document.getElementById('root')\r\n);\r\n```\r\n\r\nThe code produces the warning and error introduced with #12241\r\n\r\n> Warning: A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.\r\n\r\nand (even more confusing)\r\n\r\n> TypeError: render is not a function\r\n\r\n**What is the expected behavior?**\r\n\r\nMaybe React.cloneElement should not attempt to clone functions? Whatever it does, the result is not a function.\r\n\r\nThe warning part \"a child that isn't a function\" should be separated from the other warnings. There can't be multiple children and one child that is not a function at the same time, so a more precise warning can be issued.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nTested with react 16.3.0 in Stackblitz/Chrome 65 and react 16.3.2 in Chrome 65 and Firefox 59",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**  this is a bug, or at least a request for more precise warnings and error messages.    **What is the current behavior?**    I was cloning children to add some properties and I overlooked that the context Consumer subtree should  not be cloned...    ```  import React from 'react';  import {render} from 'react-dom';    const { Provider, Consumer} = React.createContext();    const Comp = ({children})=> <Provider>{cloneKids(children)}</Provider>;    const cloneKids=(children)=>React.Children.map(children, child =>  \t\t\t\t\t       React.cloneElement(child, child.props,  \t\t\t\t\t\t\t\t  child.props.children&&  \t\t\t\t\t\t\t\t  cloneKids(child.props.children)));  render(  \t<Comp><Consumer>{console.log}</Consumer></Comp>,      document.getElementById('root')  );  ```    The code produces the warning and error introduced with #12241    > Warning: A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.    and (even more confusing)    > TypeError: render is not a function    **What is the expected behavior?**    Maybe React.cloneElement should not attempt to clone functions? Whatever it does, the result is not a function.    The warning part \"a child that isn't a function\" should be separated from the other warnings. There can't be multiple children and one child that is not a function at the same time, so a more precise warning can be issued.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    Tested with react 16.3.0 in Stackblitz/Chrome 65 and react 16.3.2 in Chrome 65 and Firefox 59",
        "human_words": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**  this is a bug, or at least a request for more precise warnings and error messages.    **What is the current behavior?**    I was cloning children to add some properties and I overlooked that the context Consumer subtree should  not be cloned...        The code produces the warning and error introduced with #12241    > Warning: A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.    and (even more confusing)    > TypeError: render is not a function    **What is the expected behavior?**    Maybe React.cloneElement should not attempt to clone functions? Whatever it does, the result is not a function.    The warning part \"a child that isn't a function\" should be separated from the other warnings. There can't be multiple children and one child that is not a function at the same time, so a more precise warning can be issued.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    Tested with react 16.3.0 in Stackblitz/Chrome 65 and react 16.3.2 in Chrome 65 and Firefox 59",
        "human_words_regrex": " **Do you want to request a *feature* or report a *bug*?** this is a bug, or at least a request for more precise warnings and error messages. **What is the current behavior?** I was cloning children to add some properties and I overlooked that the context Consumer subtree should not be cloned... The code produces the warning and error introduced with #12241 > Warning: A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it. and (even more confusing) > TypeError: render is not a function **What is the expected behavior?** Maybe React.cloneElement should not attempt to clone functions? Whatever it does, the result is not a function. The warning part \"a child that isn't a function\" should be separated from the other warnings. There can't be multiple children and one child that is not a function at the same time, so a more precise warning can be issued. **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** Tested with react 16.3.0 in Stackblitz/Chrome 65 and react 16.3.2 in Chrome 65 and Firefox 59",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * bug , least request precise warning error message . * * current behavior ? * * cloning child add property overlooked context consumer subtree cloned ... code produce warning error introduced # 12241 > warning : context consumer rendered multiple child , child n't function . context consumer expects single child function . pas function , make sure trailing leading whitespace around . ( even confusing ) > typeerror : render function * * expected behavior ? * * maybe react.cloneelement attempt clone function ? whatever , result function . warning part `` child n't function '' separated warning . ca n't multiple child one child function time , precise warning issued . * * version react , browser / o affected issue ? work previous version react ? * * tested react 16.3.0 stackblitz/chrome 65 react 16.3.2 chrome 65 firefox 59",
        "title_stopwords_removal_lemmatization": "cloning child context consumer produce confusing warning error"
    },
    {
        "issue_id": 312980151,
        "title": "[Question] Context provider state initialisation.",
        "label": [
            "Type: Question"
        ],
        "date": "2018-04-10T15:40:31Z",
        "status": "closed",
        "description": "Consider a component wrapping a context provider:\r\n\r\n```js\r\nclass ValueWrapper extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      value: null,\r\n      setValue: this.setValue,\r\n    };\r\n  }\r\n\r\n  setValue = (value) => {\r\n    this.setState({ value });\r\n  };\r\n\r\n  render = () => (\r\n    <Context.Provider value={this.state}>\r\n      {this.props.children}\r\n    </Context.Provider>\r\n  );\r\n}\r\n```\r\n\r\nA consumer then might want to set a default value when it is first mounted. The only way I can see to do this using the new API is to check for an existing value on first render:\r\n\r\n```js\r\nclass ValueUpdater extends React.Component {\r\n  state = {\r\n    inputValue: 0,\r\n  };\r\n\r\n  handleInputChange = e => {\r\n    this.setState({ inputValue: e.target.value });\r\n  };\r\n\r\n  render = () => (\r\n    <Context.Consumer>\r\n      {({ value, setValue }) => {\r\n        if (!value) {\r\n          setValue(this.state.inputValue);\r\n        }\r\n\r\n        return (\r\n          <div>\r\n            <input type=\"text\" value={value} onChange={handleInputChange}/>\r\n            <button onClick={() => setValue(this.state.inputValue)}>Update value</button>\r\n          </div>\r\n        );\r\n      }}\r\n    </Context.Consumer>\r\n  )\r\n};\r\n```\r\n\r\nBut this seems to break the golden rule of updating state in the render method (`setValue(this.state.inputValue)`), as this would immediately cause a re-render. Ideally I would be able to call the `setValue` from the context in the `componentDidMount` method of the `ValueUpdater` component, but with context as a render prop, that's not possible, as far as I can tell. The docs suggest passing props down to another component:\r\n\r\n```js\r\n  render = () => (\r\n    <Context.Consumer>\r\n      {({ value, setValue }) => (\r\n          <ValueUpdaterInput setValue={ setValue } value={ value } />\r\n      )}\r\n    </Context.Consumer>\r\n  )\r\n```\r\n\r\nBut if I tried to do the initialisation in the `ValueUpdaterInput` component's `componentDidMount` method, it would be called on every render, surely, as `ValueUpdaterInput` would be re-rendered each time?\r\n\r\nIs there a better pattern than this, or am I trying to use context inappropriately?",
        "remove_template_description": "Consider a component wrapping a context provider:    ```js  class ValueWrapper extends React.Component {    constructor(props) {      super(props);      this.state = {        value: null,        setValue: this.setValue,      };    }      setValue = (value) => {      this.setState({ value });    };      render = () => (      <Context.Provider value={this.state}>        {this.props.children}      </Context.Provider>    );  }  ```    A consumer then might want to set a default value when it is first mounted. The only way I can see to do this using the new API is to check for an existing value on first render:    ```js  class ValueUpdater extends React.Component {    state = {      inputValue: 0,    };      handleInputChange = e => {      this.setState({ inputValue: e.target.value });    };      render = () => (      <Context.Consumer>        {({ value, setValue }) => {          if (!value) {            setValue(this.state.inputValue);          }            return (            <div>              <input type=\"text\" value={value} onChange={handleInputChange}/>              <button onClick={() => setValue(this.state.inputValue)}>Update value</button>            </div>          );        }}      </Context.Consumer>    )  };  ```    But this seems to break the golden rule of updating state in the render method (`setValue(this.state.inputValue)`), as this would immediately cause a re-render. Ideally I would be able to call the `setValue` from the context in the `componentDidMount` method of the `ValueUpdater` component, but with context as a render prop, that's not possible, as far as I can tell. The docs suggest passing props down to another component:    ```js    render = () => (      <Context.Consumer>        {({ value, setValue }) => (            <ValueUpdaterInput setValue={ setValue } value={ value } />        )}      </Context.Consumer>    )  ```    But if I tried to do the initialisation in the `ValueUpdaterInput` component's `componentDidMount` method, it would be called on every render, surely, as `ValueUpdaterInput` would be re-rendered each time?    Is there a better pattern than this, or am I trying to use context inappropriately?",
        "human_words": "Consider a component wrapping a context provider:        A consumer then might want to set a default value when it is first mounted. The only way I can see to do this using the new API is to check for an existing value on first render:        But this seems to break the golden rule of updating state in the render method (`setValue(this.state.inputValue)`), as this would immediately cause a re-render. Ideally I would be able to call the `setValue` from the context in the `componentDidMount` method of the `ValueUpdater` component, but with context as a render prop, that's not possible, as far as I can tell. The docs suggest passing props down to another component:        But if I tried to do the initialisation in the `ValueUpdaterInput` component's `componentDidMount` method, it would be called on every render, surely, as `ValueUpdaterInput` would be re-rendered each time?    Is there a better pattern than this, or am I trying to use context inappropriately?",
        "human_words_regrex": "Consider a component wrapping a context provider: A consumer then might want to set a default value when it is first mounted. The only way I can see to do this using the new API is to check for an existing value on first render: But this seems to break the golden rule of updating state in the render method (`setValue(this.state.inputValue)`), as this would immediately cause a re-render. Ideally I would be able to call the `setValue` from the context in the `componentDidMount` method of the `ValueUpdater` component, but with context as a render prop, that's not possible, as far as I can tell. The docs suggest passing props down to another component: But if I tried to do the initialisation in the `ValueUpdaterInput` component's `componentDidMount` method, it would be called on every render, surely, as `ValueUpdaterInput` would be re-rendered each time? Is there a better pattern than this, or am I trying to use context inappropriately?",
        "human_words_stopwords_removal_lemmatization": "consider component wrapping context provider : consumer might want set default value first mounted . way see using new api check existing value first render : seems break golden rule updating state render method ( ` setvalue ( this.state.inputvalue ) ` ) , would immediately cause re-render . ideally would able call ` setvalue ` context ` componentdidmount ` method ` valueupdater ` component , context render prop , 's possible , far tell . doc suggest passing prop another component : tried initialisation ` valueupdaterinput ` component 's ` componentdidmount ` method , would called every render , surely , ` valueupdaterinput ` would re-rendered time ? better pattern , trying use context inappropriately ?",
        "title_stopwords_removal_lemmatization": "[ question ] context provider state initialisation ."
    },
    {
        "issue_id": 312254725,
        "title": "ReactJS Logo License",
        "label": [
            "Type: Question"
        ],
        "date": "2018-04-08T00:00:41Z",
        "status": "closed",
        "description": "I have been unable to find out what the license for the React logo is. Does anyone know under which license it is?",
        "remove_template_description": "I have been unable to find out what the license for the React logo is. Does anyone know under which license it is?",
        "human_words": "I have been unable to find out what the license for the React logo is. Does anyone know under which license it is?",
        "human_words_regrex": "I have been unable to find out what the license for the React logo is. Does anyone know under which license it is?",
        "human_words_stopwords_removal_lemmatization": "unable find license react logo . anyone know license ?",
        "title_stopwords_removal_lemmatization": "reactjs logo license"
    },
    {
        "issue_id": 306234572,
        "title": "Is there a way to access new context api within ComponentDidMount?",
        "label": [
            "Type: Question"
        ],
        "date": "2018-03-18T12:06:40Z",
        "status": "closed",
        "description": "We are building a react mapbox gl module and we use clone and inject props today.\r\n\r\nWe were looking into using the 16.2.0 context api but I saw that it will have a new one on 16.3.0 but I can\u2019t seem to find a way to read context details\r\nOn componentDidMount lifecycle (which makes sense for me to use on the map implementation).\r\n\r\nIs there a way around this ?",
        "remove_template_description": "We are building a react mapbox gl module and we use clone and inject props today.    We were looking into using the 16.2.0 context api but I saw that it will have a new one on 16.3.0 but I can\u2019t seem to find a way to read context details  On componentDidMount lifecycle (which makes sense for me to use on the map implementation).    Is there a way around this ?",
        "human_words": "We are building a react mapbox gl module and we use clone and inject props today.    We were looking into using the 16.2.0 context api but I saw that it will have a new one on 16.3.0 but I can\u2019t seem to find a way to read context details  On componentDidMount lifecycle (which makes sense for me to use on the map implementation).    Is there a way around this ?",
        "human_words_regrex": "We are building a react mapbox gl module and we use clone and inject props today. We were looking into using the 16.2.0 context api but I saw that it will have a new one on 16.3.0 but I can\u2019t seem to find a way to read context details On componentDidMount lifecycle (which makes sense for me to use on the map implementation). Is there a way around this ?",
        "human_words_stopwords_removal_lemmatization": "building react mapbox gl module use clone inject prop today . looking using 16.2.0 context api saw new one 16.3.0 \u2019 seem find way read context detail componentdidmount lifecycle ( make sense use map implementation ) . way around ?",
        "title_stopwords_removal_lemmatization": "way access new context api within componentdidmount ?"
    },
    {
        "issue_id": 306067450,
        "title": "Keep the children mounted but replace the parent",
        "label": [
            "Type: Question"
        ],
        "date": "2018-03-16T20:31:44Z",
        "status": "closed",
        "description": "Hi,\r\n\r\nI'm trying to do something like this:\r\n\r\n```\r\nconst Container = (props) => props.someCondition? (\r\n    <ContainerType1>\r\n        {props.children}\r\n    </ContainerType1>\r\n) : (\r\n    <ContainerType2>\r\n        {props.children}\r\n    </ContainerType2>\r\n);\r\n\r\nconst App = (props) => (\r\n    <Container someCondition={props.someCondition} >\r\n        <ComponentThatDoesAsyncFetches1 />\r\n        <ComponentThatDoesAsyncFetches2 />\r\n        <ComponentThatDoesAsyncFetches3 />\r\n    </Container>\r\n);\r\n```\r\n\r\nBasically what I want is a situation where App is rerendering on a changing boolean prop (Imagine someCondition has an actual changing value), and a different container will render depending on its value, while maintaining the same children inside. Problem is, that those children are doing async fetches (on DidMount), but they re-mount and lose their state while the containers change. \r\n\r\nAny idea how can I achieve this with the children still mounted even if their parent changed?\r\n\r\nThanks in advance!\r\n",
        "remove_template_description": "Hi,    I'm trying to do something like this:    ```  const Container = (props) => props.someCondition? (      <ContainerType1>          {props.children}      </ContainerType1>  ) : (      <ContainerType2>          {props.children}      </ContainerType2>  );    const App = (props) => (      <Container someCondition={props.someCondition} >          <ComponentThatDoesAsyncFetches1 />          <ComponentThatDoesAsyncFetches2 />          <ComponentThatDoesAsyncFetches3 />      </Container>  );  ```    Basically what I want is a situation where App is rerendering on a changing boolean prop (Imagine someCondition has an actual changing value), and a different container will render depending on its value, while maintaining the same children inside. Problem is, that those children are doing async fetches (on DidMount), but they re-mount and lose their state while the containers change.     Any idea how can I achieve this with the children still mounted even if their parent changed?    Thanks in advance!",
        "human_words": "Hi,    I'm trying to do something like this:        Basically what I want is a situation where App is rerendering on a changing boolean prop (Imagine someCondition has an actual changing value), and a different container will render depending on its value, while maintaining the same children inside. Problem is, that those children are doing async fetches (on DidMount), but they re-mount and lose their state while the containers change.     Any idea how can I achieve this with the children still mounted even if their parent changed?    Thanks in advance!",
        "human_words_regrex": "Hi, I'm trying to do something like this: Basically what I want is a situation where App is rerendering on a changing boolean prop (Imagine someCondition has an actual changing value), and a different container will render depending on its value, while maintaining the same children inside. Problem is, that those children are doing async fetches (on DidMount), but they re-mount and lose their state while the containers change. Any idea how can I achieve this with the children still mounted even if their parent changed? Thanks in advance!",
        "human_words_stopwords_removal_lemmatization": "hi , 'm trying something like : basically want situation app rerendering changing boolean prop ( imagine somecondition actual changing value ) , different container render depending value , maintaining child inside . problem , child async fetch ( didmount ) , re-mount lose state container change . idea achieve child still mounted even parent changed ? thanks advance !",
        "title_stopwords_removal_lemmatization": "keep child mounted replace parent"
    },
    {
        "issue_id": 304440142,
        "title": "Potential Future Bug in getEventKey for Edge with Synthetic Event normalization.",
        "label": [
            "Type: Question",
            "Component: DOM"
        ],
        "date": "2018-03-12T16:16:24Z",
        "status": "closed",
        "description": "**Bug**\r\n\r\n**Current behavior**\r\nReact currently normalizes keyboard events cross-browser by falling back on the native KeyboardEvent.keyCode property and using a dictionary object to normalize the key. As noted in the source, getEventKey is used for \"Normalization of deprecated HTML5 `key` values\".\r\n\r\nEdge currently does not implement the correct key values and this normalization will fall back to KeyboardEvent.keyCode. KeyboardEvent.keyCode is deprecated and may be dropped at any time.\r\n\r\nMicrosoft as per https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/15907408/ have fixed this issue, but it has not yet been released to insider preview releases. This means there is the potential for the KeyboardEvent.keyCode to be removed from Edge before the fix is made public. It may be a good idea to not rely on keyCode in this instance.\r\n\r\nRefer to https://github.com/facebook/react/blob/5bd2321ae3dd7d68ac02dee3c3f271e9d0ee8784/packages/react-dom/src/events/getEventKey.js Line 103\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nreact-dom version 16.2.0, potentially affects future versions of Edge.\r\n",
        "remove_template_description": "**Bug**    **Current behavior**  React currently normalizes keyboard events cross-browser by falling back on the native KeyboardEvent.keyCode property and using a dictionary object to normalize the key. As noted in the source, getEventKey is used for \"Normalization of deprecated HTML5 `key` values\".    Edge currently does not implement the correct key values and this normalization will fall back to KeyboardEvent.keyCode. KeyboardEvent.keyCode is deprecated and may be dropped at any time.    Microsoft as per https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/15907408/ have fixed this issue, but it has not yet been released to insider preview releases. This means there is the potential for the KeyboardEvent.keyCode to be removed from Edge before the fix is made public. It may be a good idea to not rely on keyCode in this instance.    Refer to https://github.com/facebook/react/blob/5bd2321ae3dd7d68ac02dee3c3f271e9d0ee8784/packages/react-dom/src/events/getEventKey.js Line 103    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  react-dom version 16.2.0, potentially affects future versions of Edge.",
        "human_words": "**Bug**    **Current behavior**  React currently normalizes keyboard events cross-browser by falling back on the native KeyboardEvent.keyCode property and using a dictionary object to normalize the key. As noted in the source, getEventKey is used for \"Normalization of deprecated HTML5 `key` values\".    Edge currently does not implement the correct key values and this normalization will fall back to KeyboardEvent.keyCode. KeyboardEvent.keyCode is deprecated and may be dropped at any time.    Microsoft as per https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/15907408/ have fixed this issue, but it has not yet been released to insider preview releases. This means there is the potential for the KeyboardEvent.keyCode to be removed from Edge before the fix is made public. It may be a good idea to not rely on keyCode in this instance.    Refer to https://github.com/facebook/react/blob/5bd2321ae3dd7d68ac02dee3c3f271e9d0ee8784/packages/react-dom/src/events/getEventKey.js Line 103    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  react-dom version 16.2.0, potentially affects future versions of Edge.",
        "human_words_regrex": "**Bug** **Current behavior** React currently normalizes keyboard events cross-browser by falling back on the native KeyboardEvent.keyCode property and using a dictionary object to normalize the key. As noted in the source, getEventKey is used for \"Normalization of deprecated HTML5 `key` values\". Edge currently does not implement the correct key values and this normalization will fall back to KeyboardEvent.keyCode. KeyboardEvent.keyCode is deprecated and may be dropped at any time. Microsoft as per  have fixed this issue, but it has not yet been released to insider preview releases. This means there is the potential for the KeyboardEvent.keyCode to be removed from Edge before the fix is made public. It may be a good idea to not rely on keyCode in this instance. Refer to  Line 103 **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** react-dom version 16.2.0, potentially affects future versions of Edge.",
        "human_words_stopwords_removal_lemmatization": "* * bug * * * * current behavior * * react currently normalizes keyboard event cross-browser falling back native keyboardevent.keycode property using dictionary object normalize key . noted source , geteventkey used `` normalization deprecated html5 ` key ` value '' . edge currently implement correct key value normalization fall back keyboardevent.keycode . keyboardevent.keycode deprecated may dropped time . microsoft per fixed issue , yet released insider preview release . mean potential keyboardevent.keycode removed edge fix made public . may good idea rely keycode instance . refer line 103 * * version react , browser / o affected issue ? work previous version react ? * * react-dom version 16.2.0 , potentially affect future version edge .",
        "title_stopwords_removal_lemmatization": "potential future bug geteventkey edge synthetic event normalization ."
    },
    {
        "issue_id": 302268511,
        "title": "Capturing events trigger after vanilla bubbling events",
        "label": [
            "Type: Question"
        ],
        "date": "2018-03-05T11:42:08Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nWhen subscribing to DOM events it's possible to use capturing. However it seems that capturing takes place after the vanilla JavaScript bubbling phase. This results in an incorrect order of events unless all events are subscribed to via React which isn't always possible.\r\n\r\nHere's an example that mimicks one of our use cases: https://jsbin.com/zuleceg/1/\r\n\r\n**What is the expected behavior?**\r\nA capturing event subscribed to within React, should take place before bubbling events subscribed to via vanilla JavaScript.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue?**\r\nDevelopment edition, Chrome v64 x64\r\n",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**  Bug    **What is the current behavior?**  When subscribing to DOM events it's possible to use capturing. However it seems that capturing takes place after the vanilla JavaScript bubbling phase. This results in an incorrect order of events unless all events are subscribed to via React which isn't always possible.    Here's an example that mimicks one of our use cases: https://jsbin.com/zuleceg/1/    **What is the expected behavior?**  A capturing event subscribed to within React, should take place before bubbling events subscribed to via vanilla JavaScript.    **Which versions of React, and which browser / OS are affected by this issue?**  Development edition, Chrome v64 x64",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**  Bug    **What is the current behavior?**  When subscribing to DOM events it's possible to use capturing. However it seems that capturing takes place after the vanilla JavaScript bubbling phase. This results in an incorrect order of events unless all events are subscribed to via React which isn't always possible.    Here's an example that mimicks one of our use cases: https://jsbin.com/zuleceg/1/    **What is the expected behavior?**  A capturing event subscribed to within React, should take place before bubbling events subscribed to via vanilla JavaScript.    **Which versions of React, and which browser / OS are affected by this issue?**  Development edition, Chrome v64 x64",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** Bug **What is the current behavior?** When subscribing to DOM events it's possible to use capturing. However it seems that capturing takes place after the vanilla JavaScript bubbling phase. This results in an incorrect order of events unless all events are subscribed to via React which isn't always possible. Here's an example that mimicks one of our use cases:  **What is the expected behavior?** A capturing event subscribed to within React, should take place before bubbling events subscribed to via vanilla JavaScript. **Which versions of React, and which browser / OS are affected by this issue?** Development edition, Chrome v64 x64",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * bug * * current behavior ? * * subscribing dom event 's possible use capturing . however seems capturing take place vanilla javascript bubbling phase . result incorrect order event unless event subscribed via react n't always possible . 's example mimicks one use case : * * expected behavior ? * * capturing event subscribed within react , take place bubbling event subscribed via vanilla javascript . * * version react , browser / o affected issue ? * * development edition , chrome v64 x64",
        "title_stopwords_removal_lemmatization": "capturing event trigger vanilla bubbling event"
    },
    {
        "issue_id": 300528372,
        "title": "state change in td element",
        "label": [
            "Resolution: Invalid",
            "Type: Question"
        ],
        "date": "2018-02-27T08:05:21Z",
        "status": "closed",
        "description": "Displaying tabular rows, when setting data in td element, on state change it displays only the currently updated td element data..all the other ones go missing from screen. When the same thing is placed within text box in each td element things work fine.\r\n\r\nFollowing is sample the code :\r\n\r\nWorking code :\r\n`<tr key={id}> `\r\n`<td> <input  value={this.state.price[id]}/> </td>`\r\n\r\nFailing code :\r\n`<tr key={id}> `\r\n`<td> {this.state.price[id]} </td>`",
        "remove_template_description": "Displaying tabular rows, when setting data in td element, on state change it displays only the currently updated td element data..all the other ones go missing from screen. When the same thing is placed within text box in each td element things work fine.    Following is sample the code :    Working code :  `<tr key={id}> `  `<td> <input  value={this.state.price[id]}/> </td>`    Failing code :  `<tr key={id}> `  `<td> {this.state.price[id]} </td>`",
        "human_words": "Displaying tabular rows, when setting data in td element, on state change it displays only the currently updated td element data..all the other ones go missing from screen. When the same thing is placed within text box in each td element things work fine.    Following is sample the code :    Working code :  `<tr key={id}> `  `<td> <input  value={this.state.price[id]}/> </td>`    Failing code :  `<tr key={id}> `  `<td> {this.state.price[id]} </td>`",
        "human_words_regrex": "Displaying tabular rows, when setting data in td element, on state change it displays only the currently updated td element data..all the other ones go missing from screen. When the same thing is placed within text box in each td element things work fine. Following is sample the code : Working code : ` ` `  ` Failing code : ` ` ` {this.state.price[id]} `",
        "human_words_stopwords_removal_lemmatization": "displaying tabular row , setting data td element , state change display currently updated td element data .. one go missing screen . thing placed within text box td element thing work fine . following sample code : working code : ` ` ` ` failing code : ` ` ` { this.state.price [ id ] } `",
        "title_stopwords_removal_lemmatization": "state change td element"
    },
    {
        "issue_id": 294516105,
        "title": "Getting started docs are terrible",
        "label": [
            "Type: Question"
        ],
        "date": "2018-02-05T19:36:12Z",
        "status": "closed",
        "description": "I just came back to react after about a year or so of not using it and now the getting started docs are pretty much not helpful in the slightest. All the docs are now is just links to other websites without any instructions on how to get a react project running. I remember a year ago back in react 15 the docs had a step by step walkthrough for how to set up and get a project running from scratch and now they are just links to websites without react specific instructions. What happened to the docs, when did they become so useless?\r\n\r\nThere needs to be a step by step guide added back to the docs, a guide that will get you from having nothing to running it in the browser instead of just links to other websites that don't have anything to do with react. I remember back in react 15, you could run through the guide and have a hello world app running within 10 minutes no problems, I have been trying to figure it out with these new docs for over an hour now and still 0 luck getting this running. The instructions used to actually be instructions, basically saying, install this, then that, then run this command in terminal, then do this and so on. The docs now just say, well you can use this, then has a link to a site that has nothing to do with react, there is not even any sort of instruction on the react website on what to do with that, just the link without any context around it. Can these docs please be reverted to the old versions or actually create a proper getting started page to get you from nothing to running?",
        "remove_template_description": "I just came back to react after about a year or so of not using it and now the getting started docs are pretty much not helpful in the slightest. All the docs are now is just links to other websites without any instructions on how to get a react project running. I remember a year ago back in react 15 the docs had a step by step walkthrough for how to set up and get a project running from scratch and now they are just links to websites without react specific instructions. What happened to the docs, when did they become so useless?    There needs to be a step by step guide added back to the docs, a guide that will get you from having nothing to running it in the browser instead of just links to other websites that don't have anything to do with react. I remember back in react 15, you could run through the guide and have a hello world app running within 10 minutes no problems, I have been trying to figure it out with these new docs for over an hour now and still 0 luck getting this running. The instructions used to actually be instructions, basically saying, install this, then that, then run this command in terminal, then do this and so on. The docs now just say, well you can use this, then has a link to a site that has nothing to do with react, there is not even any sort of instruction on the react website on what to do with that, just the link without any context around it. Can these docs please be reverted to the old versions or actually create a proper getting started page to get you from nothing to running?",
        "codes_and_errors": [],
        "human_words": "I just came back to react after about a year or so of not using it and now the getting started docs are pretty much not helpful in the slightest. All the docs are now is just links to other websites without any instructions on how to get a react project running. I remember a year ago back in react 15 the docs had a step by step walkthrough for how to set up and get a project running from scratch and now they are just links to websites without react specific instructions. What happened to the docs, when did they become so useless?    There needs to be a step by step guide added back to the docs, a guide that will get you from having nothing to running it in the browser instead of just links to other websites that don't have anything to do with react. I remember back in react 15, you could run through the guide and have a hello world app running within 10 minutes no problems, I have been trying to figure it out with these new docs for over an hour now and still 0 luck getting this running. The instructions used to actually be instructions, basically saying, install this, then that, then run this command in terminal, then do this and so on. The docs now just say, well you can use this, then has a link to a site that has nothing to do with react, there is not even any sort of instruction on the react website on what to do with that, just the link without any context around it. Can these docs please be reverted to the old versions or actually create a proper getting started page to get you from nothing to running?",
        "human_words_regrex": "I just came back to react after about a year or so of not using it and now the getting started docs are pretty much not helpful in the slightest. All the docs are now is just links to other websites without any instructions on how to get a react project running. I remember a year ago back in react 15 the docs had a step by step walkthrough for how to set up and get a project running from scratch and now they are just links to websites without react specific instructions. What happened to the docs, when did they become so useless? There needs to be a step by step guide added back to the docs, a guide that will get you from having nothing to running it in the browser instead of just links to other websites that don't have anything to do with react. I remember back in react 15, you could run through the guide and have a hello world app running within 10 minutes no problems, I have been trying to figure it out with these new docs for over an hour now and still 0 luck getting this running. The instructions used to actually be instructions, basically saying, install this, then that, then run this command in terminal, then do this and so on. The docs now just say, well you can use this, then has a link to a site that has nothing to do with react, there is not even any sort of instruction on the react website on what to do with that, just the link without any context around it. Can these docs please be reverted to the old versions or actually create a proper getting started page to get you from nothing to running?"
    },
    {
        "issue_id": 294274205,
        "title": "react-test-renderer: Asynchronous rendering guarantees?",
        "label": [
            "Type: Question"
        ],
        "date": "2018-02-05T05:00:31Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nI think this is just a question.\r\n\r\nAs I understand it, React's newer *Fiber* architecture introduces an asynchronous rendering pipeline, which allows for better prioritisation of work.  I'm also aware that in version 16, React is still expected to render synchronously.\r\n\r\nLooking forward though, when using `react-test-renderer` (especially the [ReactTestInstance](https://github.com/facebook/react/blob/master/packages/react-test-renderer/src/ReactTestRenderer.js#L466-L512) helper APIs), what guarantees are safe for a developer to lean on?\r\n\r\nAfter creating a test-renderer instance, is it safe to immediately introspect the instance to look for a child node with a given type?  Does this differ from components with user-space asynchrony?\r\n\r\nFor instance, if I have a class component with a child node that I want to make a test assertion against, is this safe?  If not, is there a safe way to flush pending reconciler changes, or check for pending work?\r\n\r\n```\r\nconst renderer = ReactTestRenderer.create(<MyComponent />);\r\nconst childInstance = renderer.root.findByType(ChildNode).instance;\r\n```\r\n\r\nCurrently I am experiencing intermittent (1 in 50 or so) failures in test assertions that look like this.  The error output looks like:\r\n\r\n```\r\nFAIL path/to/MyComponent/test.jsx (8.116s)\r\n\u25cf MyComponent \u203a test assertion against child node instance\r\n\r\nNo instances found with node type: \"ChildNode\"\r\n\r\nat expectOne (node_modules/react-test-renderer/cjs/react-test-renderer.development.js:8161:9)\r\nat ReactTestInstance.findByType (node_modules/react-test-renderer/cjs/react-test-renderer.development.js:8009:12)\r\n...\r\n```\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nI am seeing this failure when running `react@16.0.0` with `react-test-renderer@16.0.0`, in `jest@22.1.4` while running in `node@8.3.0`.",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**    I think this is just a question.    As I understand it, React's newer *Fiber* architecture introduces an asynchronous rendering pipeline, which allows for better prioritisation of work.  I'm also aware that in version 16, React is still expected to render synchronously.    Looking forward though, when using `react-test-renderer` (especially the [ReactTestInstance](https://github.com/facebook/react/blob/master/packages/react-test-renderer/src/ReactTestRenderer.js#L466-L512) helper APIs), what guarantees are safe for a developer to lean on?    After creating a test-renderer instance, is it safe to immediately introspect the instance to look for a child node with a given type?  Does this differ from components with user-space asynchrony?    For instance, if I have a class component with a child node that I want to make a test assertion against, is this safe?  If not, is there a safe way to flush pending reconciler changes, or check for pending work?    ```  const renderer = ReactTestRenderer.create(<MyComponent />);  const childInstance = renderer.root.findByType(ChildNode).instance;  ```    Currently I am experiencing intermittent (1 in 50 or so) failures in test assertions that look like this.  The error output looks like:    ```  FAIL path/to/MyComponent/test.jsx (8.116s)  \u25cf MyComponent \u203a test assertion against child node instance    No instances found with node type: \"ChildNode\"    at expectOne (node_modules/react-test-renderer/cjs/react-test-renderer.development.js:8161:9)  at ReactTestInstance.findByType (node_modules/react-test-renderer/cjs/react-test-renderer.development.js:8009:12)  ...  ```    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    I am seeing this failure when running `react@16.0.0` with `react-test-renderer@16.0.0`, in `jest@22.1.4` while running in `node@8.3.0`.",
        "human_words": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**    I think this is just a question.    As I understand it, React's newer *Fiber* architecture introduces an asynchronous rendering pipeline, which allows for better prioritisation of work.  I'm also aware that in version 16, React is still expected to render synchronously.    Looking forward though, when using `react-test-renderer` (especially the [ReactTestInstance](https://github.com/facebook/react/blob/master/packages/react-test-renderer/src/ReactTestRenderer.js#L466-L512) helper APIs), what guarantees are safe for a developer to lean on?    After creating a test-renderer instance, is it safe to immediately introspect the instance to look for a child node with a given type?  Does this differ from components with user-space asynchrony?    For instance, if I have a class component with a child node that I want to make a test assertion against, is this safe?  If not, is there a safe way to flush pending reconciler changes, or check for pending work?        Currently I am experiencing intermittent (1 in 50 or so) failures in test assertions that look like this.  The error output looks like:        **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    I am seeing this failure when running `react@16.0.0` with `react-test-renderer@16.0.0`, in `jest@22.1.4` while running in `node@8.3.0`.",
        "human_words_regrex": " **Do you want to request a *feature* or report a *bug*?** I think this is just a question. As I understand it, React's newer *Fiber* architecture introduces an asynchronous rendering pipeline, which allows for better prioritisation of work. I'm also aware that in version 16, React is still expected to render synchronously. Looking forward though, when using `react-test-renderer` (especially the  helper APIs), what guarantees are safe for a developer to lean on? After creating a test-renderer instance, is it safe to immediately introspect the instance to look for a child node with a given type? Does this differ from components with user-space asynchrony? For instance, if I have a class component with a child node that I want to make a test assertion against, is this safe? If not, is there a safe way to flush pending reconciler changes, or check for pending work? Currently I am experiencing intermittent (1 in 50 or so) failures in test assertions that look like this. The error output looks like: **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** I am seeing this failure when running `react@16.0.0` with `react-test-renderer@16.0.0`, in `jest@22.1.4` while running in `node@8.3.0`.",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * think question . understand , react 's newer * fiber * architecture introduces asynchronous rendering pipeline , allows better prioritisation work . 'm also aware version 16 , react still expected render synchronously . looking forward though , using ` react-test-renderer ` ( especially helper apis ) , guarantee safe developer lean ? creating test-renderer instance , safe immediately introspect instance look child node given type ? differ component user-space asynchrony ? instance , class component child node want make test assertion , safe ? , safe way flush pending reconciler change , check pending work ? currently experiencing intermittent ( 1 50 ) failure test assertion look like . error output look like : * * version react , browser / o affected issue ? work previous version react ? * * seeing failure running ` react @ 16.0.0 ` ` react-test-renderer @ 16.0.0 ` , ` jest @ 22.1.4 ` running ` node @ 8.3.0 ` .",
        "title_stopwords_removal_lemmatization": "react-test-renderer : asynchronous rendering guarantee ?"
    },
    {
        "issue_id": 292806098,
        "title": "Concating react with other resources",
        "label": [
            "Type: Question"
        ],
        "date": "2018-01-30T14:39:07Z",
        "status": "closed",
        "description": "Hi.\r\n\r\nI want to use many libraries and frameworks in my project.\r\n\r\nCan I concat React with other framework like angular, vue, ember...?\r\n\r\n",
        "remove_template_description": "Hi.    I want to use many libraries and frameworks in my project.    Can I concat React with other framework like angular, vue, ember...?",
        "human_words": "Hi.    I want to use many libraries and frameworks in my project.    Can I concat React with other framework like angular, vue, ember...?",
        "human_words_regrex": "Hi. I want to use many libraries and frameworks in my project. Can I concat React with other framework like angular, vue, ember...?",
        "human_words_stopwords_removal_lemmatization": "hi . want use many library framework project . concat react framework like angular , vue , ember ... ?",
        "title_stopwords_removal_lemmatization": "concating react resource"
    },
    {
        "issue_id": 292405519,
        "title": "Document the use of setState in componentWillUnmount",
        "label": [
            "Type: Question"
        ],
        "date": "2018-01-29T13:25:26Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature\r\n\r\n**What is the current behavior?**\r\n\r\nExcerpt from documentation:\r\n\r\n>componentWillUnmount() is invoked immediately before a component is unmounted and destroyed. Perform any necessary cleanup in this method, such as invalidating timers, canceling network requests, or cleaning up any subscriptions that were created in componentDidMount().\r\n\r\nhttps://reactjs.org/docs/react-component.html\r\n\r\nThe docs don't mention if `setState` can be used in `componentWillUnmount`. \r\n\r\nConsider the following example where the `state.showGreeting` is undone by timer over time. But since the timer has to be invalidated in `componentWillUnmount` there no other place to reset the state:\r\n\r\n```\r\nclass HelloWorld extends Component {\r\n  state = {\r\n    showGreeting: false\r\n  };\r\n\r\n  onClick() {\r\n    this.setState({ showGreeting: true })\r\n\r\n    this._timer = setTimeout(() => this.setState({ showGreeting: false }), 3000)\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearTimeout(this._timer)\r\n\r\n    // is it legal?\r\n    this.setState({ showGreeting: false })\r\n  }\r\n}\r\n```\r\n\r\nIs it legal to call `setState` from `componentWillUnmount`? Given that it can be asynchronous it feels that `setState` may not be invoked until after component is actually unmounted which may produce a warning in my understanding, until.. `componentWillUnmount` actually pumps up the state's dispatch queue manually to ensure that all state changes land in component before it's too late.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n**What is the expected behavior?**\r\n\r\nNot sure\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.2 / Webkit",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**    Feature    **What is the current behavior?**    Excerpt from documentation:    >componentWillUnmount() is invoked immediately before a component is unmounted and destroyed. Perform any necessary cleanup in this method, such as invalidating timers, canceling network requests, or cleaning up any subscriptions that were created in componentDidMount().    https://reactjs.org/docs/react-component.html    The docs don't mention if `setState` can be used in `componentWillUnmount`.     Consider the following example where the `state.showGreeting` is undone by timer over time. But since the timer has to be invalidated in `componentWillUnmount` there no other place to reset the state:    ```  class HelloWorld extends Component {    state = {      showGreeting: false    };      onClick() {      this.setState({ showGreeting: true })        this._timer = setTimeout(() => this.setState({ showGreeting: false }), 3000)    }      componentWillUnmount() {      clearTimeout(this._timer)        // is it legal?      this.setState({ showGreeting: false })    }  }  ```    Is it legal to call `setState` from `componentWillUnmount`? Given that it can be asynchronous it feels that `setState` may not be invoked until after component is actually unmounted which may produce a warning in my understanding, until.. `componentWillUnmount` actually pumps up the state's dispatch queue manually to ensure that all state changes land in component before it's too late.    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**    **What is the expected behavior?**    Not sure    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    16.2 / Webkit",
        "human_words": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**    Feature    **What is the current behavior?**    Excerpt from documentation:    >componentWillUnmount() is invoked immediately before a component is unmounted and destroyed. Perform any necessary cleanup in this method, such as invalidating timers, canceling network requests, or cleaning up any subscriptions that were created in componentDidMount().    https://reactjs.org/docs/react-component.html    The docs don't mention if `setState` can be used in `componentWillUnmount`.     Consider the following example where the `state.showGreeting` is undone by timer over time. But since the timer has to be invalidated in `componentWillUnmount` there no other place to reset the state:        Is it legal to call `setState` from `componentWillUnmount`? Given that it can be asynchronous it feels that `setState` may not be invoked until after component is actually unmounted which may produce a warning in my understanding, until.. `componentWillUnmount` actually pumps up the state's dispatch queue manually to ensure that all state changes land in component before it's too late.    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**    **What is the expected behavior?**    Not sure    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    16.2 / Webkit",
        "human_words_regrex": " **Do you want to request a *feature* or report a *bug*?** Feature **What is the current behavior?** Excerpt from documentation: >componentWillUnmount() is invoked immediately before a component is unmounted and destroyed. Perform any necessary cleanup in this method, such as invalidating timers, canceling network requests, or cleaning up any subscriptions that were created in componentDidMount().  The docs don't mention if `setState` can be used in `componentWillUnmount`. Consider the following example where the `state.showGreeting` is undone by timer over time. But since the timer has to be invalidated in `componentWillUnmount` there no other place to reset the state: Is it legal to call `setState` from `componentWillUnmount`? Given that it can be asynchronous it feels that `setState` may not be invoked until after component is actually unmounted which may produce a warning in my understanding, until.. `componentWillUnmount` actually pumps up the state's dispatch queue manually to ensure that all state changes land in component before it's too late. **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle ( or CodeSandbox ( example below:** **What is the expected behavior?** Not sure **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** 16.2 / Webkit",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * feature * * current behavior ? * * excerpt documentation : > componentwillunmount ( ) invoked immediately component unmounted destroyed . perform necessary cleanup method , invalidating timer , canceling network request , cleaning subscription created componentdidmount ( ) . doc n't mention ` setstate ` used ` componentwillunmount ` . consider following example ` state.showgreeting ` undone timer time . since timer invalidated ` componentwillunmount ` place reset state : legal call ` setstate ` ` componentwillunmount ` ? given asynchronous feel ` setstate ` may invoked component actually unmounted may produce warning understanding , .. ` componentwillunmount ` actually pump state 's dispatch queue manually ensure state change land component 's late . * * current behavior bug , please provide step reproduce possible minimal demo problem . bug get fixed much faster run code n't dependency react . paste link jsfiddle ( codesandbox ( example : * * * * expected behavior ? * * sure * * version react , browser / o affected issue ? work previous version react ? * * 16.2 / webkit",
        "title_stopwords_removal_lemmatization": "document use setstate componentwillunmount"
    },
    {
        "issue_id": 291965923,
        "title": "can't edit the wiki",
        "label": [
            "Type: Question"
        ],
        "date": "2018-01-26T16:58:31Z",
        "status": "closed",
        "description": "Hello,\r\nI can't edit the wiki to add my website to the list there, is editing disabled?",
        "remove_template_description": "Hello,  I can't edit the wiki to add my website to the list there, is editing disabled?",
        "human_words": "Hello,  I can't edit the wiki to add my website to the list there, is editing disabled?",
        "human_words_regrex": "Hello, I can't edit the wiki to add my website to the list there, is editing disabled?",
        "human_words_stopwords_removal_lemmatization": "hello , ca n't edit wiki add website list , editing disabled ?",
        "title_stopwords_removal_lemmatization": "ca n't edit wiki"
    },
    {
        "issue_id": 291855053,
        "title": "Access Component from child's instance?",
        "label": [
            "Type: Question"
        ],
        "date": "2018-01-26T10:15:55Z",
        "status": "closed",
        "description": "I am creating a [small, generic state management](https://github.com/franciscop/state) based on the `Proxy()` object. Now I am writing a React helper, but I've found an issue: to create the HOC I need access to `Component` from React. Looking at the [source code for Component](https://github.com/facebook/react/blob/master/packages/react/src/ReactBaseClasses.js) it doesn't seem like it can/should be a standalone function. This library should be able to be used independently, so making everyone download React is not feasible.\r\n\r\nI have navigated through the [official HOC documentation](https://reactjs.org/docs/higher-order-components.html), past issues and Google but couldn't find any way to retrieve `Component` from the passed component to my HOC. This is the code I am working with (not yet in the repo linked above):\r\n\r\n```js\r\n// This will load the whole React independently of the project type\r\nimport { Component } from 'react';\r\n\r\nconst connect = (opts) => (Passed) => {\r\n  return class WithState extends Component {\r\n    // ...\r\n  }\r\n};\r\n\r\nexport default connect;\r\n```\r\n\r\n```js\r\n// Note: assume this for Passed.js\r\nimport React, { Component } from 'react';\r\nclass Passed extends Component { ... }\r\nexport default connect()(Passed);\r\n```\r\n\r\nNow, I *did* find a hack to make this work, but it seems like one of the most fragile pieces of code I've ever written, relying on the differences between ES7 modules and CommonJS:\r\n\r\n```js\r\nconst connect = (opts) => (Passed) => {\r\n  const React = require('react');\r\n  return class WithState extends React.Component {\r\n    // ...\r\n  }\r\n};\r\n\r\nexport default connect;\r\n```\r\n\r\nThis way it will only import React once the `connect()` is used, and `connect()` is the *React-exclusive* helper from my library. So my question/feature request is this: is it possible to access its constructor's parent (not just the child)? Could we make it possible somehow? Something like this would be ideal:\r\n\r\n```js\r\n// Is something like this possible?\r\nconst Component = Passed.super;\r\n// or\r\nconst Component = Passed.constructor.super;\r\n// or even (since a class is syntax sugar)\r\nconst Component = Passed.prototype.super;\r\n```\r\n\r\nI think that is not the way Javascript/React works, but I figured I will ask here since chances are you will know way better than me whether something like this is possible or not.\r\n\r\n\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nRequest a feature I think",
        "remove_template_description": "I am creating a [small, generic state management](https://github.com/franciscop/state) based on the `Proxy()` object. Now I am writing a React helper, but I've found an issue: to create the HOC I need access to `Component` from React. Looking at the [source code for Component](https://github.com/facebook/react/blob/master/packages/react/src/ReactBaseClasses.js) it doesn't seem like it can/should be a standalone function. This library should be able to be used independently, so making everyone download React is not feasible.    I have navigated through the [official HOC documentation](https://reactjs.org/docs/higher-order-components.html), past issues and Google but couldn't find any way to retrieve `Component` from the passed component to my HOC. This is the code I am working with (not yet in the repo linked above):    ```js  // This will load the whole React independently of the project type  import { Component } from 'react';    const connect = (opts) => (Passed) => {    return class WithState extends Component {      // ...    }  };    export default connect;  ```    ```js  // Note: assume this for Passed.js  import React, { Component } from 'react';  class Passed extends Component { ... }  export default connect()(Passed);  ```    Now, I *did* find a hack to make this work, but it seems like one of the most fragile pieces of code I've ever written, relying on the differences between ES7 modules and CommonJS:    ```js  const connect = (opts) => (Passed) => {    const React = require('react');    return class WithState extends React.Component {      // ...    }  };    export default connect;  ```    This way it will only import React once the `connect()` is used, and `connect()` is the *React-exclusive* helper from my library. So my question/feature request is this: is it possible to access its constructor's parent (not just the child)? Could we make it possible somehow? Something like this would be ideal:    ```js  // Is something like this possible?  const Component = Passed.super;  // or  const Component = Passed.constructor.super;  // or even (since a class is syntax sugar)  const Component = Passed.prototype.super;  ```    I think that is not the way Javascript/React works, but I figured I will ask here since chances are you will know way better than me whether something like this is possible or not.        **Do you want to request a *feature* or report a *bug*?**  Request a feature I think",
        "human_words": "I am creating a [small, generic state management](https://github.com/franciscop/state) based on the `Proxy()` object. Now I am writing a React helper, but I've found an issue: to create the HOC I need access to `Component` from React. Looking at the [source code for Component](https://github.com/facebook/react/blob/master/packages/react/src/ReactBaseClasses.js) it doesn't seem like it can/should be a standalone function. This library should be able to be used independently, so making everyone download React is not feasible.    I have navigated through the [official HOC documentation](https://reactjs.org/docs/higher-order-components.html), past issues and Google but couldn't find any way to retrieve `Component` from the passed component to my HOC. This is the code I am working with (not yet in the repo linked above):            Now, I *did* find a hack to make this work, but it seems like one of the most fragile pieces of code I've ever written, relying on the differences between ES7 modules and CommonJS:        This way it will only import React once the `connect()` is used, and `connect()` is the *React-exclusive* helper from my library. So my question/feature request is this: is it possible to access its constructor's parent (not just the child)? Could we make it possible somehow? Something like this would be ideal:        I think that is not the way Javascript/React works, but I figured I will ask here since chances are you will know way better than me whether something like this is possible or not.        **Do you want to request a *feature* or report a *bug*?**  Request a feature I think",
        "human_words_regrex": "I am creating a  based on the `Proxy()` object. Now I am writing a React helper, but I've found an issue: to create the HOC I need access to `Component` from React. Looking at the  it doesn't seem like it can/should be a standalone function. This library should be able to be used independently, so making everyone download React is not feasible. I have navigated through the , past issues and Google but couldn't find any way to retrieve `Component` from the passed component to my HOC. This is the code I am working with (not yet in the repo linked above): Now, I *did* find a hack to make this work, but it seems like one of the most fragile pieces of code I've ever written, relying on the differences between ES7 modules and CommonJS: This way it will only import React once the `connect()` is used, and `connect()` is the *React-exclusive* helper from my library. So my question/feature request is this: is it possible to access its constructor's parent (not just the child)? Could we make it possible somehow? Something like this would be ideal: I think that is not the way Javascript/React works, but I figured I will ask here since chances are you will know way better than me whether something like this is possible or not. **Do you want to request a *feature* or report a *bug*?** Request a feature I think",
        "human_words_stopwords_removal_lemmatization": "creating based ` proxy ( ) ` object . writing react helper , 've found issue : create hoc need access ` component ` react . looking n't seem like can/should standalone function . library able used independently , making everyone download react feasible . navigated , past issue google could n't find way retrieve ` component ` passed component hoc . code working ( yet repo linked ) : , * * find hack make work , seems like one fragile piece code 've ever written , relying difference es7 module commonjs : way import react ` connect ( ) ` used , ` connect ( ) ` * react-exclusive * helper library . question/feature request : possible access constructor 's parent ( child ) ? could make possible somehow ? something like would ideal : think way javascript/react work , figured ask since chance know way better whether something like possible . * * want request * feature * report * bug * ? * * request feature think",
        "title_stopwords_removal_lemmatization": "access component child 's instance ?"
    },
    {
        "issue_id": 291682258,
        "title": "TypeError: Cannot read property 'state' of undefined with create-react-class",
        "label": [
            "Type: Question"
        ],
        "date": "2018-01-25T19:11:26Z",
        "status": "closed",
        "description": "I am currently attempting to create a button which is red with the text \"Yes\" that when you click on it the button changes to a green color with the text \"Confirm?\" before the final stage in which an action takes place. Where I am currently at is defining `buttonColor` as a state which changes on the click of the button; the initial color should be `#FD8F83` and the final color after the click should be `#A4D87C`. However, I am currently getting the error \"TypeError: Cannot read property 'state' of undefined\" pointing to the `style={{backgroundColor: this.state.buttonColor}} ` line whenever the code is compiled on the webpage. \r\n\r\n**Defining initial state and behavior on click:**\r\n```\r\ngetInitialState: function() {\r\n    \treturn {\r\n    \t\tbuttonColor: \"#FD8F83\"\r\n    \t};\r\n},\r\nhandleClick(color) {\r\n    \tthis.setState({\r\n\t\tbuttonColor: color\r\n\t}); \r\n}\r\n```\r\n\r\n**Code inside table in render():** \r\n```\r\n<td>\r\n\t<button \r\n\t\tclassName=\"removeButton\" \r\n\t\tstyle={{backgroundColor: this.state.buttonColor}} \r\n\t\tonClick={function(){this.handleClick(\"#A4D87C\")}}>\r\n\t\tYes\r\n\t</button>\r\n</td>\r\n```\r\n\r\nDoes anyone have any ideas why this is? I am brand new to React so I apologize if it's obvious. I also learned React using createClass so I've been trying to piece together how to make this work with the new `create-react-class` package. Any advice is greatly appreciated! \r\n\r\nReact: `^16.2.0`\r\nChrome: `Version 63.0.3239.132 (Official Build) (64-bit)`\r\n",
        "remove_template_description": "I am currently attempting to create a button which is red with the text \"Yes\" that when you click on it the button changes to a green color with the text \"Confirm?\" before the final stage in which an action takes place. Where I am currently at is defining `buttonColor` as a state which changes on the click of the button; the initial color should be `#FD8F83` and the final color after the click should be `#A4D87C`. However, I am currently getting the error \"TypeError: Cannot read property 'state' of undefined\" pointing to the `style={{backgroundColor: this.state.buttonColor}} ` line whenever the code is compiled on the webpage.     **Defining initial state and behavior on click:**  ```  getInitialState: function() {      \treturn {      \t\tbuttonColor: \"#FD8F83\"      \t};  },  handleClick(color) {      \tthis.setState({  \t\tbuttonColor: color  \t});   }  ```    **Code inside table in render():**   ```  <td>  \t<button   \t\tclassName=\"removeButton\"   \t\tstyle={{backgroundColor: this.state.buttonColor}}   \t\tonClick={function(){this.handleClick(\"#A4D87C\")}}>  \t\tYes  \t</button>  </td>  ```    Does anyone have any ideas why this is? I am brand new to React so I apologize if it's obvious. I also learned React using createClass so I've been trying to piece together how to make this work with the new `create-react-class` package. Any advice is greatly appreciated!     React: `^16.2.0`  Chrome: `Version 63.0.3239.132 (Official Build) (64-bit)`",
        "human_words": "I am currently attempting to create a button which is red with the text \"Yes\" that when you click on it the button changes to a green color with the text \"Confirm?\" before the final stage in which an action takes place. Where I am currently at is defining `buttonColor` as a state which changes on the click of the button; the initial color should be `#FD8F83` and the final color after the click should be `#A4D87C`. However, I am currently getting the error \"TypeError: Cannot read property 'state' of undefined\" pointing to the `style={{backgroundColor: this.state.buttonColor}} ` line whenever the code is compiled on the webpage.     **Defining initial state and behavior on click:**      **Code inside table in render():**       Does anyone have any ideas why this is? I am brand new to React so I apologize if it's obvious. I also learned React using createClass so I've been trying to piece together how to make this work with the new `create-react-class` package. Any advice is greatly appreciated!     React: `^16.2.0`  Chrome: `Version 63.0.3239.132 (Official Build) (64-bit)`",
        "human_words_regrex": "I am currently attempting to create a button which is red with the text \"Yes\" that when you click on it the button changes to a green color with the text \"Confirm?\" before the final stage in which an action takes place. Where I am currently at is defining `buttonColor` as a state which changes on the click of the button; the initial color should be `#FD8F83` and the final color after the click should be `#A4D87C`. However, I am currently getting the error \"TypeError: Cannot read property 'state' of undefined\" pointing to the `style={{backgroundColor: this.state.buttonColor}} ` line whenever the code is compiled on the webpage. **Defining initial state and behavior on click:** **Code inside table in render():** Does anyone have any ideas why this is? I am brand new to React so I apologize if it's obvious. I also learned React using createClass so I've been trying to piece together how to make this work with the new `create-react-class` package. Any advice is greatly appreciated! React: `^16.2.0` Chrome: `Version 63.0.3239.132 (Official Build) (64-bit)`",
        "human_words_stopwords_removal_lemmatization": "currently attempting create button red text `` yes '' click button change green color text `` confirm ? '' final stage action take place . currently defining ` buttoncolor ` state change click button ; initial color ` # fd8f83 ` final color click ` # a4d87c ` . however , currently getting error `` typeerror : read property 'state ' undefined '' pointing ` style= { { backgroundcolor : this.state.buttoncolor } } ` line whenever code compiled webpage . * * defining initial state behavior click : * * * * code inside table render ( ) : * * anyone idea ? brand new react apologize 's obvious . also learned react using createclass 've trying piece together make work new ` create-react-class ` package . advice greatly appreciated ! react : ` ^16.2.0 ` chrome : ` version 63.0.3239.132 ( official build ) ( 64-bit ) `",
        "title_stopwords_removal_lemmatization": "typeerror : read property 'state ' undefined create-react-class"
    },
    {
        "issue_id": 287616476,
        "title": "Getting minification warnings even with DefinePlugin and UglifyJSPlugin",
        "label": [
            "Type: Question"
        ],
        "date": "2018-01-10T23:43:56Z",
        "status": "closed",
        "description": "Hello! I've scoured through other issues and can't figure out why the warning is still around because it feels like I've done everything. Here's the setup:\r\n\r\nBuild scripts\r\n```\r\n    \"heroku-postbuild\": \"npm run build:prod\",\r\n    \"build:webpack\": \"webpack --progress --display-error-details --bail\",\r\n    \"build:dev\": \"npm run build:webpack -- --config config/webpack/development.config.js\",\r\n    \"build:prod\": \"NODE_ENV=production npm run build:webpack -- --config config/webpack/production.config.js\",\r\n```\r\n\r\n`base.config.js`:\r\n```\r\nconfig.plugins = [\r\n  new webpack.optimize.OccurenceOrderPlugin(),\r\n  new webpack.DefinePlugin({\r\n    //sets up some other constants on process.env\r\n  }),\r\n];\r\n```\r\n\r\n`production.config.js`:\r\n```\r\nvar config = extend({}, baseConfig);\r\n\r\nconfig.plugins.push(\r\n  new webpack.DefinePlugin({\r\n    \"process.env.NODE_ENV\": JSON.stringify(\"production\"),\r\n  }),\r\n  new webpack.optimize.UglifyJsPlugin({\r\n    mangle: true,\r\n    compress: { warnings: false },\r\n    output: { comments: false },\r\n    exclude: [/\\.min\\.js$/gi]\r\n  }),\r\n  new webpack.optimize.DedupePlugin(),\r\n//some more plugins\r\n```\r\n\r\nUsing React v15.4.2 and Webpack v1.14.0. I'm not sure what I'm missing -- DefinePlugin and UglifyJsPlugin seem to be declared properly, and the `NODE_ENV` is set to production up in the script. Any help would be greatly appreciated! Thank you!",
        "remove_template_description": "Hello! I've scoured through other issues and can't figure out why the warning is still around because it feels like I've done everything. Here's the setup:    Build scripts  ```      \"heroku-postbuild\": \"npm run build:prod\",      \"build:webpack\": \"webpack --progress --display-error-details --bail\",      \"build:dev\": \"npm run build:webpack -- --config config/webpack/development.config.js\",      \"build:prod\": \"NODE_ENV=production npm run build:webpack -- --config config/webpack/production.config.js\",  ```    `base.config.js`:  ```  config.plugins = [    new webpack.optimize.OccurenceOrderPlugin(),    new webpack.DefinePlugin({      //sets up some other constants on process.env    }),  ];  ```    `production.config.js`:  ```  var config = extend({}, baseConfig);    config.plugins.push(    new webpack.DefinePlugin({      \"process.env.NODE_ENV\": JSON.stringify(\"production\"),    }),    new webpack.optimize.UglifyJsPlugin({      mangle: true,      compress: { warnings: false },      output: { comments: false },      exclude: [/\\.min\\.js$/gi]    }),    new webpack.optimize.DedupePlugin(),  //some more plugins  ```    Using React v15.4.2 and Webpack v1.14.0. I'm not sure what I'm missing -- DefinePlugin and UglifyJsPlugin seem to be declared properly, and the `NODE_ENV` is set to production up in the script. Any help would be greatly appreciated! Thank you!",
        "human_words": "Hello! I've scoured through other issues and can't figure out why the warning is still around because it feels like I've done everything. Here's the setup:    Build scripts      `base.config.js`:      `production.config.js`:      Using React v15.4.2 and Webpack v1.14.0. I'm not sure what I'm missing -- DefinePlugin and UglifyJsPlugin seem to be declared properly, and the `NODE_ENV` is set to production up in the script. Any help would be greatly appreciated! Thank you!",
        "human_words_regrex": "Hello! I've scoured through other issues and can't figure out why the warning is still around because it feels like I've done everything. Here's the setup: Build scripts `base.config.js`: `production.config.js`: Using React v15.4.2 and Webpack v1.14.0. I'm not sure what I'm missing -- DefinePlugin and UglifyJsPlugin seem to be declared properly, and the `NODE_ENV` is set to production up in the script. Any help would be greatly appreciated! Thank you!",
        "human_words_stopwords_removal_lemmatization": "hello ! 've scoured issue ca n't figure warning still around feel like 've done everything . 's setup : build script ` base.config.js ` : ` production.config.js ` : using react v15.4.2 webpack v1.14.0 . 'm sure 'm missing -- defineplugin uglifyjsplugin seem declared properly , ` node_env ` set production script . help would greatly appreciated ! thank !",
        "title_stopwords_removal_lemmatization": "getting minification warning even defineplugin uglifyjsplugin"
    },
    {
        "issue_id": 277506843,
        "title": "Sluggish scrolling when rendering table with large dataset in React",
        "label": [
            "Type: Question"
        ],
        "date": "2017-11-28T19:21:46Z",
        "status": "closed",
        "description": "So I'm creating an application with real-time streaming data in a table using react (v16.1.1). The number of rows shown at a time can be rather large (400+ rows) and when those situations occur, the scrolling behavior on browsers (desktop & mobile) really takes a hit and staggers when attempting to browse the content. Has anybody experienced this kind of scrolling behavior when rendering large data sets in a table? \r\n\r\nI'm expecting React to be able to efficiently draw/redraw these elements with ease but that doesn't appear to be the case. I tried using JSFiddle to recreate the scenario but did not have much success.\r\n",
        "remove_template_description": "So I'm creating an application with real-time streaming data in a table using react (v16.1.1). The number of rows shown at a time can be rather large (400+ rows) and when those situations occur, the scrolling behavior on browsers (desktop & mobile) really takes a hit and staggers when attempting to browse the content. Has anybody experienced this kind of scrolling behavior when rendering large data sets in a table?     I'm expecting React to be able to efficiently draw/redraw these elements with ease but that doesn't appear to be the case. I tried using JSFiddle to recreate the scenario but did not have much success.",
        "human_words": "So I'm creating an application with real-time streaming data in a table using react (v16.1.1). The number of rows shown at a time can be rather large (400+ rows) and when those situations occur, the scrolling behavior on browsers (desktop & mobile) really takes a hit and staggers when attempting to browse the content. Has anybody experienced this kind of scrolling behavior when rendering large data sets in a table?     I'm expecting React to be able to efficiently draw/redraw these elements with ease but that doesn't appear to be the case. I tried using JSFiddle to recreate the scenario but did not have much success.",
        "human_words_regrex": "So I'm creating an application with real-time streaming data in a table using react (v16.1.1). The number of rows shown at a time can be rather large (400+ rows) and when those situations occur, the scrolling behavior on browsers (desktop & mobile) really takes a hit and staggers when attempting to browse the content. Has anybody experienced this kind of scrolling behavior when rendering large data sets in a table? I'm expecting React to be able to efficiently draw/redraw these elements with ease but that doesn't appear to be the case. I tried using JSFiddle to recreate the scenario but did not have much success.",
        "human_words_stopwords_removal_lemmatization": "'m creating application real-time streaming data table using react ( v16.1.1 ) . number row shown time rather large ( 400+ row ) situation occur , scrolling behavior browser ( desktop & mobile ) really take hit stagger attempting browse content . anybody experienced kind scrolling behavior rendering large data set table ? 'm expecting react able efficiently draw/redraw element ease n't appear case . tried using jsfiddle recreate scenario much success .",
        "title_stopwords_removal_lemmatization": "sluggish scrolling rendering table large dataset react"
    },
    {
        "issue_id": 276688793,
        "title": "Question from react reconciliation",
        "label": [
            "Type: Question"
        ],
        "date": "2017-11-24T19:37:18Z",
        "status": "closed",
        "description": " With the goal to better understand react reconciliation I created this example\r\n\r\n\r\n```\r\n// Just a simple timer component basically which shows each second passed\r\nclass Stateful extends React.Component{\r\n constructor(props){\r\n   super(props)\r\n     this.state={timer:0}\r\n   }\r\n    \r\n  componentDidMount(){\r\n    let that = this;\r\n    setInterval(function(){\r\n    that.setState(function(prevState){return {timer: prevState.timer+1}})\r\n    }, 1000);\r\n  }\r\n  render(){\r\n    return <p>{this.state.timer}</p>\r\n  }\r\n}\r\n\r\n// Just a demo class for understanding reconciliation\r\nclass Demo extends React.Component {\r\n   constructor(props){\r\n     super(props)\r\n     this.state={}\r\n   }\r\n  componentDidMount(){\r\n    let that = this;\r\n    setTimeout(function(){\r\n    that.setState({showWarning: true})\r\n  }, 3000);\r\n  }\r\n  render() {\r\n    if (this.state.showWarning) {\r\n      return (\r\n        <div>\r\n          <Stateful /> // I was hoping this would create a new instance of Stateful Component after 3 seconds\r\n        </div>\r\n    );\r\n  }\r\n\r\n    return (\r\n      <div>\r\n        <Stateful />\r\n      </div>\r\n    );\r\n}\r\n}\r\n\r\nReactDOM.render(\r\n  <Demo />,\r\n  document.getElementById('container')\r\n);\r\n\r\n\r\n```\r\nYou can see after three seconds `showWarning `is set to true. **So I was believing that after three seconds I would get a new instance of `<Stateful>` component (because it lives in a different div than the one rendered already)**  - hence I would see the output of `Stateful `component starting from 0 again, but the timer just continued to increase on the screen....  So the output basically is:\r\n0...1...2...3...4....(and so on each second).\r\nWhereas I expected it to show 0...1..2.. and on third second do a restart basically and start 0...1...2...3...etc.\r\nWhat did I miss from reconciliation docs that led me believe in this? (I have a feeling the react docs on this misses to highlight this, or it might be I missed something?)",
        "remove_template_description": "With the goal to better understand react reconciliation I created this example      ```  // Just a simple timer component basically which shows each second passed  class Stateful extends React.Component{   constructor(props){     super(props)       this.state={timer:0}     }          componentDidMount(){      let that = this;      setInterval(function(){      that.setState(function(prevState){return {timer: prevState.timer+1}})      }, 1000);    }    render(){      return <p>{this.state.timer}</p>    }  }    // Just a demo class for understanding reconciliation  class Demo extends React.Component {     constructor(props){       super(props)       this.state={}     }    componentDidMount(){      let that = this;      setTimeout(function(){      that.setState({showWarning: true})    }, 3000);    }    render() {      if (this.state.showWarning) {        return (          <div>            <Stateful /> // I was hoping this would create a new instance of Stateful Component after 3 seconds          </div>      );    }        return (        <div>          <Stateful />        </div>      );  }  }    ReactDOM.render(    <Demo />,    document.getElementById('container')  );      ```  You can see after three seconds `showWarning `is set to true. **So I was believing that after three seconds I would get a new instance of `<Stateful>` component (because it lives in a different div than the one rendered already)**  - hence I would see the output of `Stateful `component starting from 0 again, but the timer just continued to increase on the screen....  So the output basically is:  0...1...2...3...4....(and so on each second).  Whereas I expected it to show 0...1..2.. and on third second do a restart basically and start 0...1...2...3...etc.  What did I miss from reconciliation docs that led me believe in this? (I have a feeling the react docs on this misses to highlight this, or it might be I missed something?)",
        "human_words": "With the goal to better understand react reconciliation I created this example        You can see after three seconds `showWarning `is set to true. **So I was believing that after three seconds I would get a new instance of `<Stateful>` component (because it lives in a different div than the one rendered already)**  - hence I would see the output of `Stateful `component starting from 0 again, but the timer just continued to increase on the screen....  So the output basically is:  0...1...2...3...4....(and so on each second).  Whereas I expected it to show 0...1..2.. and on third second do a restart basically and start 0...1...2...3...etc.  What did I miss from reconciliation docs that led me believe in this? (I have a feeling the react docs on this misses to highlight this, or it might be I missed something?)",
        "human_words_regrex": "With the goal to better understand react reconciliation I created this example You can see after three seconds `showWarning `is set to true. **So I was believing that after three seconds I would get a new instance of `` component (because it lives in a different div than the one rendered already)** - hence I would see the output of `Stateful `component starting from 0 again, but the timer just continued to increase on the screen.... So the output basically is: 0...1...2...3...4....(and so on each second). Whereas I expected it to show 0...1..2.. and on third second do a restart basically and start 0...1...2...3...etc. What did I miss from reconciliation docs that led me believe in this? (I have a feeling the react docs on this misses to highlight this, or it might be I missed something?)",
        "human_words_stopwords_removal_lemmatization": "goal better understand react reconciliation created example see three second ` showwarning ` set true . * * believing three second would get new instance `` component ( life different div one rendered already ) * * - hence would see output ` stateful ` component starting 0 , timer continued increase screen .... output basically : 0 ... 1 ... 2 ... 3 ... 4 .... ( second ) . whereas expected show 0 ... 1 .. 2 .. third second restart basically start 0 ... 1 ... 2 ... 3 ... etc . miss reconciliation doc led believe ? ( feeling react doc miss highlight , might missed something ? )",
        "title_stopwords_removal_lemmatization": "question react reconciliation"
    },
    {
        "issue_id": 276579766,
        "title": "forceUpdate recalls all ref callbacks",
        "label": [
            "Type: Question"
        ],
        "date": "2017-11-24T10:47:19Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug, maybe\r\n\r\n**What is the current behavior?**\r\n\r\nOn calling forceUpdate ref callbacks called again. So, doing forceUpdate in ref callback makes infinite loop.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template for React 16: https://jsfiddle.net/Luktwrdm/, template for React 15: https://jsfiddle.net/hmbg7e9w/).**\r\n\r\nhttps://codepen.io/TrySound/pen/mqKqeB?editors=0012\r\n\r\n**What is the expected behavior?**\r\n\r\nDo not recall refs\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nreact 16.1.1\r\nchrome 62",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**    Bug, maybe    **What is the current behavior?**    On calling forceUpdate ref callbacks called again. So, doing forceUpdate in ref callback makes infinite loop.    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template for React 16: https://jsfiddle.net/Luktwrdm/, template for React 15: https://jsfiddle.net/hmbg7e9w/).**    https://codepen.io/TrySound/pen/mqKqeB?editors=0012    **What is the expected behavior?**    Do not recall refs    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    react 16.1.1  chrome 62",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**    Bug, maybe    **What is the current behavior?**    On calling forceUpdate ref callbacks called again. So, doing forceUpdate in ref callback makes infinite loop.    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template for React 16: https://jsfiddle.net/Luktwrdm/, template for React 15: https://jsfiddle.net/hmbg7e9w/).**    https://codepen.io/TrySound/pen/mqKqeB?editors=0012    **What is the expected behavior?**    Do not recall refs    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    react 16.1.1  chrome 62",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** Bug, maybe **What is the current behavior?** On calling forceUpdate ref callbacks called again. So, doing forceUpdate in ref callback makes infinite loop. **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via  or similar (template for React 16:  template for React 15:   **What is the expected behavior?** Do not recall refs **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** react 16.1.1 chrome 62",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * bug , maybe * * current behavior ? * * calling forceupdate ref callback called . , forceupdate ref callback make infinite loop . * * current behavior bug , please provide step reproduce possible minimal demo problem via similar ( template react 16 : template react 15 : * * expected behavior ? * * recall ref * * version react , browser / o affected issue ? work previous version react ? * * react 16.1.1 chrome 62",
        "title_stopwords_removal_lemmatization": "forceupdate recall ref callback"
    },
    {
        "issue_id": 276114304,
        "title": "Question: What is your workflow to release a new version",
        "label": [
            "Type: Question"
        ],
        "date": "2017-11-22T15:44:24Z",
        "status": "closed",
        "description": "Hello,\r\n\r\nif I am totally out of place asking this here I am sorry, please close this issue. I work at a German newspaper and we are publishing some smaller npm packages publically as open source and some for our own purposes privately.\r\n\r\nCurrently, we are not quite sure of our workflow and we want to learn from the best (YOU \ud83c\udf89 ). We are wondering how you manage to publish new releases of React. I see you have [some release sh scripts](https://github.com/facebook/react/tree/master/scripts/release). We have an npm script that basically builds our package, bumps the version and publishes the lib to npm. So far this seems quite similar, correct me if I am wrong. Also, when we want to publish a new release, someone just runs that npm script from their laptop. This seems somewhat unsettling, it feels like there should be more this.\r\n\r\nSo I am wondering, if you care to answer, how do you do it at Facebook?",
        "remove_template_description": "Hello,    if I am totally out of place asking this here I am sorry, please close this issue. I work at a German newspaper and we are publishing some smaller npm packages publically as open source and some for our own purposes privately.    Currently, we are not quite sure of our workflow and we want to learn from the best (YOU \ud83c\udf89 ). We are wondering how you manage to publish new releases of React. I see you have [some release sh scripts](https://github.com/facebook/react/tree/master/scripts/release). We have an npm script that basically builds our package, bumps the version and publishes the lib to npm. So far this seems quite similar, correct me if I am wrong. Also, when we want to publish a new release, someone just runs that npm script from their laptop. This seems somewhat unsettling, it feels like there should be more this.    So I am wondering, if you care to answer, how do you do it at Facebook?",
        "human_words": "Hello,    if I am totally out of place asking this here I am sorry, please close this issue. I work at a German newspaper and we are publishing some smaller npm packages publically as open source and some for our own purposes privately.    Currently, we are not quite sure of our workflow and we want to learn from the best (YOU \ud83c\udf89 ). We are wondering how you manage to publish new releases of React. I see you have [some release sh scripts](https://github.com/facebook/react/tree/master/scripts/release). We have an npm script that basically builds our package, bumps the version and publishes the lib to npm. So far this seems quite similar, correct me if I am wrong. Also, when we want to publish a new release, someone just runs that npm script from their laptop. This seems somewhat unsettling, it feels like there should be more this.    So I am wondering, if you care to answer, how do you do it at Facebook?",
        "human_words_regrex": "Hello, if I am totally out of place asking this here I am sorry, please close this issue. I work at a German newspaper and we are publishing some smaller npm packages publically as open source and some for our own purposes privately. Currently, we are not quite sure of our workflow and we want to learn from the best (YOU \ud83c\udf89 ). We are wondering how you manage to publish new releases of React. I see you have . We have an npm script that basically builds our package, bumps the version and publishes the lib to npm. So far this seems quite similar, correct me if I am wrong. Also, when we want to publish a new release, someone just runs that npm script from their laptop. This seems somewhat unsettling, it feels like there should be more this. So I am wondering, if you care to answer, how do you do it at Facebook?",
        "human_words_stopwords_removal_lemmatization": "hello , totally place asking sorry , please close issue . work german newspaper publishing smaller npm package publically open source purpose privately . currently , quite sure workflow want learn best ( \ud83c\udf89 ) . wondering manage publish new release react . see . npm script basically build package , bump version publishes lib npm . far seems quite similar , correct wrong . also , want publish new release , someone run npm script laptop . seems somewhat unsettling , feel like . wondering , care answer , facebook ?",
        "title_stopwords_removal_lemmatization": "question : workflow release new version"
    },
    {
        "issue_id": 275460622,
        "title": "can't access discuss react",
        "label": [
            "Type: Question"
        ],
        "date": "2017-11-20T18:53:12Z",
        "status": "closed",
        "description": "I know this is not related to react directly but didn't know where to turn to.\r\nAm I the only one who can't access/login to discuss.reactjs.org? (for quite some time already)\r\nI get error:\r\n_This page isn\u2019t working. discuss.reactjs.org is currently unable to handle this request. HTTP ERROR 500_\r\nand sometimes when I retry this error:\r\n_Sorry, there was an error authorizing your account. Perhaps you did not approve authorization?_",
        "remove_template_description": "I know this is not related to react directly but didn't know where to turn to.  Am I the only one who can't access/login to discuss.reactjs.org? (for quite some time already)  I get error:  _This page isn\u2019t working. discuss.reactjs.org is currently unable to handle this request. HTTP ERROR 500_  and sometimes when I retry this error:  _Sorry, there was an error authorizing your account. Perhaps you did not approve authorization?_",
        "human_words": "I know this is not related to react directly but didn't know where to turn to.  Am I the only one who can't access/login to discuss.reactjs.org? (for quite some time already)  I get error:  _This page isn\u2019t working. discuss.reactjs.org is currently unable to handle this request. HTTP ERROR 500_  and sometimes when I retry this error:  _Sorry, there was an error authorizing your account. Perhaps you did not approve authorization?_",
        "human_words_regrex": "I know this is not related to react directly but didn't know where to turn to. Am I the only one who can't access/login to discuss.reactjs.org? (for quite some time already) I get error: _This page isn\u2019t working. discuss.reactjs.org is currently unable to handle this request. HTTP ERROR 500_ and sometimes when I retry this error: _Sorry, there was an error authorizing your account. Perhaps you did not approve authorization?_",
        "human_words_stopwords_removal_lemmatization": "know related react directly n't know turn . one ca n't access/login discuss.reactjs.org ? ( quite time already ) get error : _this page \u2019 working . discuss.reactjs.org currently unable handle request . http error 500_ sometimes retry error : _sorry , error authorizing account . perhaps approve authorization ? _",
        "title_stopwords_removal_lemmatization": "ca n't access discus react"
    },
    {
        "issue_id": 267019470,
        "title": "React spread operator is still in the official documentation",
        "label": [
            "Type: Question"
        ],
        "date": "2017-10-19T23:23:52Z",
        "status": "closed",
        "description": "Bug in documentation\r\n\r\n**What is the current behavior?**\r\nReact's spread operator was removed in React 16, but it is still in the documentation https://reactjs.org/docs/jsx-in-depth.html#spread-attributes\r\n\r\n**What is the expected behavior?**\r\nA word of caution should be included that this does not include React 16+. Maybe also add other ways of spreading props.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact 16+. It worked in previous releases.",
        "remove_template_description": "Bug in documentation    **What is the current behavior?**  React's spread operator was removed in React 16, but it is still in the documentation https://reactjs.org/docs/jsx-in-depth.html#spread-attributes    **What is the expected behavior?**  A word of caution should be included that this does not include React 16+. Maybe also add other ways of spreading props.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  React 16+. It worked in previous releases.",
        "human_words": "Bug in documentation    **What is the current behavior?**  React's spread operator was removed in React 16, but it is still in the documentation https://reactjs.org/docs/jsx-in-depth.html#spread-attributes    **What is the expected behavior?**  A word of caution should be included that this does not include React 16+. Maybe also add other ways of spreading props.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  React 16+. It worked in previous releases.",
        "human_words_regrex": "Bug in documentation **What is the current behavior?** React's spread operator was removed in React 16, but it is still in the documentation  **What is the expected behavior?** A word of caution should be included that this does not include React 16+. Maybe also add other ways of spreading props. **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** React 16+. It worked in previous releases.",
        "human_words_stopwords_removal_lemmatization": "bug documentation * * current behavior ? * * react 's spread operator removed react 16 , still documentation * * expected behavior ? * * word caution included include react 16+ . maybe also add way spreading prop . * * version react , browser / o affected issue ? work previous version react ? * * react 16+ . worked previous release .",
        "title_stopwords_removal_lemmatization": "react spread operator still official documentation"
    },
    {
        "issue_id": 264078947,
        "title": "React 16: Mismatched HTML Warning logged when hydrating Portals rendered to document.head",
        "label": [
            "Type: Question",
            "Component: DOM"
        ],
        "date": "2017-10-10T02:23:41Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug?\r\n\r\n**What is the current behavior?**\r\n\r\nRendering a portal to `document.head` on the server causes React to log a Warning on unexpected markup while hydrating server markup. Currently this happens when using [react-head](https://github.com/tizmagik/react-head)\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template for React 16: https://jsfiddle.net/Luktwrdm/, template for React 15: https://jsfiddle.net/hmbg7e9w/).**\r\n\r\nI'm not sure if it's possible to simulate this in jsfiddle, since it requires server-rendering and access to `document.head`, but a fairly minimal repro case is in [react-head's example app](https://github.com/tizmagik/react-head/tree/master/example), which you can clone and run via doing the following:\r\n\r\n```\r\ngit clone git@github.com:tizmagik/react-head.git\r\ncd react-head\r\nnpm install\r\nnpm run dev\r\nopen http://localhost:3000\r\n```\r\nYou'll then see the React warning logged.\r\n\r\nIf you have thoughts on a simpler way to repro this, happy to do that as well!\r\n\r\n**What is the expected behavior?**\r\n\r\nIt's entirely possible that this is just a usage of React Portals that wasn't anticipated, but i'm not sure if this is an invalid use case? Would like to get your thoughts and if there's a better approach than what I'm currently doing with react-head?\r\n\r\nBesides the warning, the module/app seems to function exactly as expected.\r\n\r\n_At a high level, this is how react-head works:_\r\n\r\nDuring server-rendering `<head />` tags (e.g. `<meta />` etc) are [collected in an array](https://github.com/tizmagik/react-head/blob/master/src/HeadTag.js#L41), which are [`renderToString()`d and placed in the server template `<head />`](https://github.com/tizmagik/react-head/blob/master/example/src/server.js#L39), then on the client, these server-rendered tags are [querySelected and removed](https://github.com/tizmagik/react-head/blob/master/src/HeadTag.js#L20-L30), to be replaced by [ReactDOM.createPortal()](https://github.com/tizmagik/react-head/blob/master/src/HeadTag.js#L38) in order to support SPA functionality from then on.\r\n\r\nHere's the issue in react-head: https://github.com/tizmagik/react-head/issues/1\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16\r\n",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**    Bug?    **What is the current behavior?**    Rendering a portal to `document.head` on the server causes React to log a Warning on unexpected markup while hydrating server markup. Currently this happens when using [react-head](https://github.com/tizmagik/react-head)    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template for React 16: https://jsfiddle.net/Luktwrdm/, template for React 15: https://jsfiddle.net/hmbg7e9w/).**    I'm not sure if it's possible to simulate this in jsfiddle, since it requires server-rendering and access to `document.head`, but a fairly minimal repro case is in [react-head's example app](https://github.com/tizmagik/react-head/tree/master/example), which you can clone and run via doing the following:    ```  git clone git@github.com:tizmagik/react-head.git  cd react-head  npm install  npm run dev  open http://localhost:3000  ```  You'll then see the React warning logged.    If you have thoughts on a simpler way to repro this, happy to do that as well!    **What is the expected behavior?**    It's entirely possible that this is just a usage of React Portals that wasn't anticipated, but i'm not sure if this is an invalid use case? Would like to get your thoughts and if there's a better approach than what I'm currently doing with react-head?    Besides the warning, the module/app seems to function exactly as expected.    _At a high level, this is how react-head works:_    During server-rendering `<head />` tags (e.g. `<meta />` etc) are [collected in an array](https://github.com/tizmagik/react-head/blob/master/src/HeadTag.js#L41), which are [`renderToString()`d and placed in the server template `<head />`](https://github.com/tizmagik/react-head/blob/master/example/src/server.js#L39), then on the client, these server-rendered tags are [querySelected and removed](https://github.com/tizmagik/react-head/blob/master/src/HeadTag.js#L20-L30), to be replaced by [ReactDOM.createPortal()](https://github.com/tizmagik/react-head/blob/master/src/HeadTag.js#L38) in order to support SPA functionality from then on.    Here's the issue in react-head: https://github.com/tizmagik/react-head/issues/1    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    React 16",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**    Bug?    **What is the current behavior?**    Rendering a portal to `document.head` on the server causes React to log a Warning on unexpected markup while hydrating server markup. Currently this happens when using [react-head](https://github.com/tizmagik/react-head)    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template for React 16: https://jsfiddle.net/Luktwrdm/, template for React 15: https://jsfiddle.net/hmbg7e9w/).**    I'm not sure if it's possible to simulate this in jsfiddle, since it requires server-rendering and access to `document.head`, but a fairly minimal repro case is in [react-head's example app](https://github.com/tizmagik/react-head/tree/master/example), which you can clone and run via doing the following:      You'll then see the React warning logged.    If you have thoughts on a simpler way to repro this, happy to do that as well!    **What is the expected behavior?**    It's entirely possible that this is just a usage of React Portals that wasn't anticipated, but i'm not sure if this is an invalid use case? Would like to get your thoughts and if there's a better approach than what I'm currently doing with react-head?    Besides the warning, the module/app seems to function exactly as expected.    _At a high level, this is how react-head works:_    During server-rendering `<head />` tags (e.g. `<meta />` etc) are [collected in an array](https://github.com/tizmagik/react-head/blob/master/src/HeadTag.js#L41), which are [`renderToString()`d and placed in the server template `<head />`](https://github.com/tizmagik/react-head/blob/master/example/src/server.js#L39), then on the client, these server-rendered tags are [querySelected and removed](https://github.com/tizmagik/react-head/blob/master/src/HeadTag.js#L20-L30), to be replaced by [ReactDOM.createPortal()](https://github.com/tizmagik/react-head/blob/master/src/HeadTag.js#L38) in order to support SPA functionality from then on.    Here's the issue in react-head: https://github.com/tizmagik/react-head/issues/1    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    React 16",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** Bug? **What is the current behavior?** Rendering a portal to `document.head` on the server causes React to log a Warning on unexpected markup while hydrating server markup. Currently this happens when using  **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via  or similar (template for React 16:  template for React 15:  I'm not sure if it's possible to simulate this in jsfiddle, since it requires server-rendering and access to `document.head`, but a fairly minimal repro case is in , which you can clone and run via doing the following: You'll then see the React warning logged. If you have thoughts on a simpler way to repro this, happy to do that as well! **What is the expected behavior?** It's entirely possible that this is just a usage of React Portals that wasn't anticipated, but i'm not sure if this is an invalid use case? Would like to get your thoughts and if there's a better approach than what I'm currently doing with react-head? Besides the warning, the module/app seems to function exactly as expected. _At a high level, this is how react-head works:_ During server-rendering `` tags (e.g. `` etc) are , which are , then on the client, these server-rendered tags are , to be replaced by  in order to support SPA functionality from then on. Here's the issue in react-head:  **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** React 16",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * bug ? * * current behavior ? * * rendering portal ` document.head ` server cause react log warning unexpected markup hydrating server markup . currently happens using * * current behavior bug , please provide step reproduce possible minimal demo problem via similar ( template react 16 : template react 15 : 'm sure 's possible simulate jsfiddle , since requires server-rendering access ` document.head ` , fairly minimal repro case , clone run via following : 'll see react warning logged . thought simpler way repro , happy well ! * * expected behavior ? * * 's entirely possible usage react portal n't anticipated , 'm sure invalid use case ? would like get thought 's better approach 'm currently react-head ? besides warning , module/app seems function exactly expected . _at high level , react-head work : _ server-rendering `` tag ( e.g . `` etc ) , , client , server-rendered tag , replaced order support spa functionality . 's issue react-head : * * version react , browser / o affected issue ? work previous version react ? * * react 16",
        "title_stopwords_removal_lemmatization": "react 16 : mismatched html warning logged hydrating portal rendered document.head"
    },
    {
        "issue_id": 263939763,
        "title": "TypeError: Cannot read property 'create' of undefined when using 'react-test-renderer'",
        "label": [
            "Type: Question",
            "Component: Test Renderer"
        ],
        "date": "2017-10-09T15:40:07Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n**What is the current behavior?**\r\nTrying to run a simple Jest snapshot test but failing on react-test-renderer\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template for React 16: https://jsfiddle.net/Luktwrdm/, template for React 15: https://jsfiddle.net/hmbg7e9w/).**\r\n\r\nimport * as React from 'react';\r\nimport Header from './../../components/Header/HeaderContainer';\r\nimport renderer from 'react-test-renderer';\r\n\r\ntest('Header is loaded correctly', () => {\r\n    const component = renderer.create(\r\n       <Header/>\r\n    );\r\n    let tree = component.toJSON();\r\n    expect(tree).toMatchSnapshot();\r\n});\r\n\r\nWhen running Jest throws the following error:\r\n\r\n \u25cf Header is loaded correctly\r\n\r\n    TypeError: Cannot read property 'create' of undefined\r\n\r\n      at Object.<anonymous> (src/__tests__/unit/Header.test.tsx:6:31)\r\n          at Promise (<anonymous>)\r\n          at <anonymous>\r\n      at process._tickCallback (internal/process/next_tick.js:188:7)\r\n\r\n  \u2715 Header is loaded correctly (144ms)\r\n\r\n**What is the expected behavior?**\r\nSnpashot test should pass\r\n\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n\"react-test-renderer\": \"=16.0.0\",\r\n\"react\": \"=16.0\",\r\n\"react-dom\": \"=16.0\",\r\n\r\n",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**  Bug  **What is the current behavior?**  Trying to run a simple Jest snapshot test but failing on react-test-renderer    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template for React 16: https://jsfiddle.net/Luktwrdm/, template for React 15: https://jsfiddle.net/hmbg7e9w/).**    import * as React from 'react';  import Header from './../../components/Header/HeaderContainer';  import renderer from 'react-test-renderer';    test('Header is loaded correctly', () => {      const component = renderer.create(         <Header/>      );      let tree = component.toJSON();      expect(tree).toMatchSnapshot();  });    When running Jest throws the following error:     \u25cf Header is loaded correctly        TypeError: Cannot read property 'create' of undefined          at Object.<anonymous> (src/__tests__/unit/Header.test.tsx:6:31)            at Promise (<anonymous>)            at <anonymous>        at process._tickCallback (internal/process/next_tick.js:188:7)      \u2715 Header is loaded correctly (144ms)    **What is the expected behavior?**  Snpashot test should pass      **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    \"react-test-renderer\": \"=16.0.0\",  \"react\": \"=16.0\",  \"react-dom\": \"=16.0\",",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**  Bug  **What is the current behavior?**  Trying to run a simple Jest snapshot test but failing on react-test-renderer    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template for React 16: https://jsfiddle.net/Luktwrdm/, template for React 15: https://jsfiddle.net/hmbg7e9w/).**    import * as React from 'react';  import Header from './../../components/Header/HeaderContainer';  import renderer from 'react-test-renderer';    test('Header is loaded correctly', () => {      const component = renderer.create(         <Header/>      );      let tree = component.toJSON();      expect(tree).toMatchSnapshot();  });    When running Jest throws the following error:     \u25cf Header is loaded correctly        TypeError: Cannot read property 'create' of undefined          at Object.<anonymous> (src/__tests__/unit/Header.test.tsx:6:31)            at Promise (<anonymous>)            at <anonymous>        at process._tickCallback (internal/process/next_tick.js:188:7)      \u2715 Header is loaded correctly (144ms)    **What is the expected behavior?**  Snpashot test should pass      **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    \"react-test-renderer\": \"=16.0.0\",  \"react\": \"=16.0\",  \"react-dom\": \"=16.0\",",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** Bug **What is the current behavior?** Trying to run a simple Jest snapshot test but failing on react-test-renderer **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via  or similar (template for React 16:  template for React 15:  import * as React from 'react'; import Header from './../../components/Header/HeaderContainer'; import renderer from 'react-test-renderer'; test('Header is loaded correctly', () => { const component = renderer.create(  ); let tree = component.toJSON(); expect(tree).toMatchSnapshot(); }); When running Jest throws the following error: \u25cf Header is loaded correctly TypeError: Cannot read property 'create' of undefined at Object. (src/__tests__/unit/Header.test.tsx:6:31) at Promise () at  at process._tickCallback (internal/process/next_tick.js:188:7) \u2715 Header is loaded correctly (144ms) **What is the expected behavior?** Snpashot test should pass **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** \"react-test-renderer\": \"=16.0.0\", \"react\": \"=16.0\", \"react-dom\": \"=16.0\",",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * bug * * current behavior ? * * trying run simple jest snapshot test failing react-test-renderer * * current behavior bug , please provide step reproduce possible minimal demo problem via similar ( template react 16 : template react 15 : import * react 'react ' ; import header './ .. / .. /components/header/headercontainer ' ; import renderer 'react-test-renderer ' ; test ( 'header loaded correctly ' , ( ) = > { const component = renderer.create ( ) ; let tree = component.tojson ( ) ; expect ( tree ) .tomatchsnapshot ( ) ; } ) ; running jest throw following error : \u25cf header loaded correctly typeerror : read property 'create ' undefined object . ( src/__tests__/unit/header.test.tsx:6:31 ) promise ( ) process._tickcallback ( internal/process/next_tick.js:188:7 ) \u2715 header loaded correctly ( 144ms ) * * expected behavior ? * * snpashot test pas * * version react , browser / o affected issue ? work previous version react ? * * `` react-test-renderer '' : `` =16.0.0 '' , `` react '' : `` =16.0 '' , `` react-dom '' : `` =16.0 '' ,",
        "title_stopwords_removal_lemmatization": "typeerror : read property 'create ' undefined using 'react-test-renderer '"
    },
    {
        "issue_id": 263709832,
        "title": "update props in commitUpdate()",
        "label": [
            "Type: Question",
            "Component: Core Utilities"
        ],
        "date": "2017-10-08T11:02:48Z",
        "status": "closed",
        "description": "Given an instance which contains some object, attempts to update that object in `commitUpdate()` result in an error since the object is frozen\r\n\r\nWhat is the correct approach to set the new props to an instance in commitUpdate()?\r\n\r\nI see in the ART renderer for example, it sets the properties on the instance directly (e.g. https://github.com/facebook/react/blob/master/src/renderers/art/ReactARTFiberEntry.js#L152)\r\n\r\nIs that the correct approach? Is there no ability to wrap these changing properties in a container object?",
        "remove_template_description": "Given an instance which contains some object, attempts to update that object in `commitUpdate()` result in an error since the object is frozen    What is the correct approach to set the new props to an instance in commitUpdate()?    I see in the ART renderer for example, it sets the properties on the instance directly (e.g. https://github.com/facebook/react/blob/master/src/renderers/art/ReactARTFiberEntry.js#L152)    Is that the correct approach? Is there no ability to wrap these changing properties in a container object?",
        "human_words": "Given an instance which contains some object, attempts to update that object in `commitUpdate()` result in an error since the object is frozen    What is the correct approach to set the new props to an instance in commitUpdate()?    I see in the ART renderer for example, it sets the properties on the instance directly (e.g. https://github.com/facebook/react/blob/master/src/renderers/art/ReactARTFiberEntry.js#L152)    Is that the correct approach? Is there no ability to wrap these changing properties in a container object?",
        "human_words_regrex": "Given an instance which contains some object, attempts to update that object in `commitUpdate()` result in an error since the object is frozen What is the correct approach to set the new props to an instance in commitUpdate()? I see in the ART renderer for example, it sets the properties on the instance directly (e.g.  Is that the correct approach? Is there no ability to wrap these changing properties in a container object?",
        "human_words_stopwords_removal_lemmatization": "given instance contains object , attempt update object ` commitupdate ( ) ` result error since object frozen correct approach set new prop instance commitupdate ( ) ? see art renderer example , set property instance directly ( e.g . correct approach ? ability wrap changing property container object ?",
        "title_stopwords_removal_lemmatization": "update prop commitupdate ( )"
    },
    {
        "issue_id": 263051011,
        "title": "Asynchronous ComponentWillUnmount in React 16",
        "label": [
            "Type: Question",
            "Component: Component API"
        ],
        "date": "2017-10-05T09:01:18Z",
        "status": "closed",
        "description": "**In React 15**, `ComponentWillUnmount` called first before the rendering of next component in DOM. **In the current version (v16)**, `ComponentWillUnmount` was called after the mounting of next component.\r\n\r\nIt creates an issue with my existing code, since I reuse the same component after the history changes so it invokes the `componentWillMount` with new props and change in URL and thereafter, it invokes the `ComponentWillUnmount` of same component. \r\n\r\nIs there still a way to do this in a **_synchronous_** way?\r\n",
        "remove_template_description": "**In React 15**, `ComponentWillUnmount` called first before the rendering of next component in DOM. **In the current version (v16)**, `ComponentWillUnmount` was called after the mounting of next component.    It creates an issue with my existing code, since I reuse the same component after the history changes so it invokes the `componentWillMount` with new props and change in URL and thereafter, it invokes the `ComponentWillUnmount` of same component.     Is there still a way to do this in a **_synchronous_** way?",
        "human_words": "**In React 15**, `ComponentWillUnmount` called first before the rendering of next component in DOM. **In the current version (v16)**, `ComponentWillUnmount` was called after the mounting of next component.    It creates an issue with my existing code, since I reuse the same component after the history changes so it invokes the `componentWillMount` with new props and change in URL and thereafter, it invokes the `ComponentWillUnmount` of same component.     Is there still a way to do this in a **_synchronous_** way?",
        "human_words_regrex": "**In React 15**, `ComponentWillUnmount` called first before the rendering of next component in DOM. **In the current version (v16)**, `ComponentWillUnmount` was called after the mounting of next component. It creates an issue with my existing code, since I reuse the same component after the history changes so it invokes the `componentWillMount` with new props and change in URL and thereafter, it invokes the `ComponentWillUnmount` of same component. Is there still a way to do this in a **_synchronous_** way?",
        "human_words_stopwords_removal_lemmatization": "* * react 15 * * , ` componentwillunmount ` called first rendering next component dom . * * current version ( v16 ) * * , ` componentwillunmount ` called mounting next component . creates issue existing code , since reuse component history change invokes ` componentwillmount ` new prop change url thereafter , invokes ` componentwillunmount ` component . still way * * _synchronous_ * * way ?",
        "title_stopwords_removal_lemmatization": "asynchronous componentwillunmount react 16"
    },
    {
        "issue_id": 262820765,
        "title": "Even Though I am using the webpack uglifyjs plugin for minification ReactDevTools is telling me that I have unminified code that is not production quality",
        "label": [
            "Type: Question"
        ],
        "date": "2017-10-04T15:00:54Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n**What is the current behavior?**\r\nReactDevTools is showing the red icon for my deployed application even though I am using the webpack uglifyjs plugin and the webpack DefinePlugin with process.env.NODE_ENV': JSON.stringify('production').\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template for React 16: https://jsfiddle.net/Luktwrdm/, template for React 15: https://jsfiddle.net/hmbg7e9w/).**\r\n\r\n**What is the expected behavior?**\r\nThat react DevTools would show me a black icon indicating production quality code.\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nI am using  the latest version of Google Chrome, Version 61.0.3163.100 (Official Build) (64-bit) and this app is running with \"react\": \"^15.6.1\" and \"react-dom\": \"^15.6.1\".\r\n",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**  Bug  **What is the current behavior?**  ReactDevTools is showing the red icon for my deployed application even though I am using the webpack uglifyjs plugin and the webpack DefinePlugin with process.env.NODE_ENV': JSON.stringify('production').  **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template for React 16: https://jsfiddle.net/Luktwrdm/, template for React 15: https://jsfiddle.net/hmbg7e9w/).**    **What is the expected behavior?**  That react DevTools would show me a black icon indicating production quality code.  **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    I am using  the latest version of Google Chrome, Version 61.0.3163.100 (Official Build) (64-bit) and this app is running with \"react\": \"^15.6.1\" and \"react-dom\": \"^15.6.1\".",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**  Bug  **What is the current behavior?**  ReactDevTools is showing the red icon for my deployed application even though I am using the webpack uglifyjs plugin and the webpack DefinePlugin with process.env.NODE_ENV': JSON.stringify('production').  **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template for React 16: https://jsfiddle.net/Luktwrdm/, template for React 15: https://jsfiddle.net/hmbg7e9w/).**    **What is the expected behavior?**  That react DevTools would show me a black icon indicating production quality code.  **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    I am using  the latest version of Google Chrome, Version 61.0.3163.100 (Official Build) (64-bit) and this app is running with \"react\": \"^15.6.1\" and \"react-dom\": \"^15.6.1\".",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** Bug **What is the current behavior?** ReactDevTools is showing the red icon for my deployed application even though I am using the webpack uglifyjs plugin and the webpack DefinePlugin with process.env.NODE_ENV': JSON.stringify('production'). **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via  or similar (template for React 16:  template for React 15:  **What is the expected behavior?** That react DevTools would show me a black icon indicating production quality code. **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** I am using the latest version of Google Chrome, Version 61.0.3163.100 (Official Build) (64-bit) and this app is running with \"react\": \"^15.6.1\" and \"react-dom\": \"^15.6.1\".",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * bug * * current behavior ? * * reactdevtools showing red icon deployed application even though using webpack uglifyjs plugin webpack defineplugin process.env.node_env ' : json.stringify ( 'production ' ) . * * current behavior bug , please provide step reproduce possible minimal demo problem via similar ( template react 16 : template react 15 : * * expected behavior ? * * react devtools would show black icon indicating production quality code . * * version react , browser / o affected issue ? work previous version react ? * * using latest version google chrome , version 61.0.3163.100 ( official build ) ( 64-bit ) app running `` react '' : `` ^15.6.1 '' `` react-dom '' : `` ^15.6.1 '' .",
        "title_stopwords_removal_lemmatization": "even though using webpack uglifyjs plugin minification reactdevtools telling unminified code production quality"
    },
    {
        "issue_id": 262346831,
        "title": "Relationship between render()/updateContainer() and requestAnimationFrame()?",
        "label": [
            "Type: Question",
            "Component: Reconciler"
        ],
        "date": "2017-10-03T08:38:49Z",
        "status": "closed",
        "description": "This is highly related to https://github.com/facebook/react/issues/10950\r\n\r\nWhen I call ReactDOM.render() - or more accurately updateContainer() from within a renderer, it seems the `callback` param is called somewhere in between \"updating\" and \"rendered\"\r\n\r\nSpecifically, if the callback is itself is a call to `updateContainer()`, e.g. a recursive approach, I get an error of:\r\n\r\n> flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering.`\r\n\r\n_tangential note - this happens even if `updateContainer()` was triggered elsewhere like `deferredUpdates()` - `flushSync()` may be a bit misleading_\r\n\r\nCan someone please explain this a little more- what does the order look like between updateContainer() and the callback?\r\n\r\nMy use case is as described in the other issue, but for the sake of clarity, I'd like to \r\n\r\n1. Call the top-level render() when the components have all finished rendering\r\n2. Rely on React's requestAnimationFrame timing rather than inject another one for triggering prop changes\r\n3. Do all this without making the root node manage it via setState() + componentDidUpdate()\r\n\r\nReal-world scenario is using React to drive animation via a custom renderer\r\n\r\nThanks!",
        "remove_template_description": "This is highly related to https://github.com/facebook/react/issues/10950    When I call ReactDOM.render() - or more accurately updateContainer() from within a renderer, it seems the `callback` param is called somewhere in between \"updating\" and \"rendered\"    Specifically, if the callback is itself is a call to `updateContainer()`, e.g. a recursive approach, I get an error of:    > flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering.`    _tangential note - this happens even if `updateContainer()` was triggered elsewhere like `deferredUpdates()` - `flushSync()` may be a bit misleading_    Can someone please explain this a little more- what does the order look like between updateContainer() and the callback?    My use case is as described in the other issue, but for the sake of clarity, I'd like to     1. Call the top-level render() when the components have all finished rendering  2. Rely on React's requestAnimationFrame timing rather than inject another one for triggering prop changes  3. Do all this without making the root node manage it via setState() + componentDidUpdate()    Real-world scenario is using React to drive animation via a custom renderer    Thanks!",
        "human_words": "This is highly related to https://github.com/facebook/react/issues/10950    When I call ReactDOM.render() - or more accurately updateContainer() from within a renderer, it seems the `callback` param is called somewhere in between \"updating\" and \"rendered\"    Specifically, if the callback is itself is a call to `updateContainer()`, e.g. a recursive approach, I get an error of:    > flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering.`    _tangential note - this happens even if `updateContainer()` was triggered elsewhere like `deferredUpdates()` - `flushSync()` may be a bit misleading_    Can someone please explain this a little more- what does the order look like between updateContainer() and the callback?    My use case is as described in the other issue, but for the sake of clarity, I'd like to     1. Call the top-level render() when the components have all finished rendering  2. Rely on React's requestAnimationFrame timing rather than inject another one for triggering prop changes  3. Do all this without making the root node manage it via setState() + componentDidUpdate()    Real-world scenario is using React to drive animation via a custom renderer    Thanks!",
        "human_words_regrex": "This is highly related to  When I call ReactDOM.render() - or more accurately updateContainer() from within a renderer, it seems the `callback` param is called somewhere in between \"updating\" and \"rendered\" Specifically, if the callback is itself is a call to `updateContainer()`, e.g. a recursive approach, I get an error of: > flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering.` _tangential note - this happens even if `updateContainer()` was triggered elsewhere like `deferredUpdates()` - `flushSync()` may be a bit misleading_ Can someone please explain this a little more- what does the order look like between updateContainer() and the callback? My use case is as described in the other issue, but for the sake of clarity, I'd like to 1. Call the top-level render() when the components have all finished rendering 2. Rely on React's requestAnimationFrame timing rather than inject another one for triggering prop changes 3. Do all this without making the root node manage it via setState() + componentDidUpdate() Real-world scenario is using React to drive animation via a custom renderer Thanks!",
        "human_words_stopwords_removal_lemmatization": "highly related call reactdom.render ( ) - accurately updatecontainer ( ) within renderer , seems ` callback ` param called somewhere `` updating '' `` rendered '' specifically , callback call ` updatecontainer ( ) ` , e.g . recursive approach , get error : > flushsync called inside lifecycle method . called react already rendering. ` _tangential note - happens even ` updatecontainer ( ) ` triggered elsewhere like ` deferredupdates ( ) ` - ` flushsync ( ) ` may bit misleading_ someone please explain little more- order look like updatecontainer ( ) callback ? use case described issue , sake clarity , 'd like 1. call top-level render ( ) component finished rendering 2. rely react 's requestanimationframe timing rather inject another one triggering prop change 3. without making root node manage via setstate ( ) + componentdidupdate ( ) real-world scenario using react drive animation via custom renderer thanks !",
        "title_stopwords_removal_lemmatization": "relationship render ( ) /updatecontainer ( ) requestanimationframe ( ) ?"
    },
    {
        "issue_id": 261393419,
        "title": "How to prevent React from modifying elements manipulated by external code?  ",
        "label": [
            "Type: Question",
            "Component: Server Rendering"
        ],
        "date": "2017-09-28T17:07:31Z",
        "status": "closed",
        "description": "The New York Times is [rebuilding its website](https://open.nytimes.com/react-relay-and-graphql-under-the-hood-of-the-times-website-redesign-22fb62ea9764) using React. Currently, it\u2019s an isomorphic app that has both server- and client-side renders. \r\n\r\n**Our question: What's the best way to include a non-React interactive graphic \u2014 maps, charts and other visualizations created by custom code \u2014 within a fully React page?**\r\n\r\nOur ideal scenario: \r\n\r\n* Server-side React renders the initial HTML for a graphic, using `dangerouslySetInnerHTML`, as part of a React page\r\n* Client-side React never touches those elements again, even during component mounting\r\n\r\nWe thought React 16 might solve this with `hydrate` method, but it still removes nodes that it doesn't expect, such as nodes generated by D3 or other client-side code. None of the options in [Integrating with Other Libraries](https://facebook.github.io/react/docs/integrating-with-other-libraries.html) seem to be an exact match either.\r\n\r\nThe classic use case is a graphic with a D3 map. The server-side HTML includes text and a placeholder <div> for the map, as well as the map JS. On page load, the map is immediately drawn by D3 but gets erased when React mounts client-side. The D3 nodes aren\u2019t included in the server-side output, because they often vary based on viewport, device, etc.\r\n\r\nHere\u2019s a [trivial example](https://jsfiddle.net/6zdhrych/), showing React 16\u2019s `hydrate` removing client-created nodes after one second. On mobile devices, loading the React library and potentially other dependencies could take some seconds.\r\n\r\nThe simplest solution I can think of is a `shouldComponentMount` function, where we could return false. The rest of the React components on the page would mount, but leave the interactive graphic part alone. There are probably other solutions.\r\n \r\nConstraints:\r\n\r\n* We need to use dangerouslySetInnerHTML, because we need to deploy graphics outside of site releases\r\n* We need to render the initial HTML server-side for performance and simplicity\r\n* We can\u2019t use iFrames for everything, as they\u2019re not flexible enough\r\n* We can\u2019t re-render or reattach elements, as that causes many problems \u2014 CSS animations restart, media playback is interrupted, input cursors and text selections are lost, etc.\r\n\r\nAny guidance is appreciated.\r\n\r\ncc @gaearon @leeb \r\n",
        "remove_template_description": "The New York Times is [rebuilding its website](https://open.nytimes.com/react-relay-and-graphql-under-the-hood-of-the-times-website-redesign-22fb62ea9764) using React. Currently, it\u2019s an isomorphic app that has both server- and client-side renders.     **Our question: What's the best way to include a non-React interactive graphic \u2014 maps, charts and other visualizations created by custom code \u2014 within a fully React page?**    Our ideal scenario:     * Server-side React renders the initial HTML for a graphic, using `dangerouslySetInnerHTML`, as part of a React page  * Client-side React never touches those elements again, even during component mounting    We thought React 16 might solve this with `hydrate` method, but it still removes nodes that it doesn't expect, such as nodes generated by D3 or other client-side code. None of the options in [Integrating with Other Libraries](https://facebook.github.io/react/docs/integrating-with-other-libraries.html) seem to be an exact match either.    The classic use case is a graphic with a D3 map. The server-side HTML includes text and a placeholder <div> for the map, as well as the map JS. On page load, the map is immediately drawn by D3 but gets erased when React mounts client-side. The D3 nodes aren\u2019t included in the server-side output, because they often vary based on viewport, device, etc.    Here\u2019s a [trivial example](https://jsfiddle.net/6zdhrych/), showing React 16\u2019s `hydrate` removing client-created nodes after one second. On mobile devices, loading the React library and potentially other dependencies could take some seconds.    The simplest solution I can think of is a `shouldComponentMount` function, where we could return false. The rest of the React components on the page would mount, but leave the interactive graphic part alone. There are probably other solutions.     Constraints:    * We need to use dangerouslySetInnerHTML, because we need to deploy graphics outside of site releases  * We need to render the initial HTML server-side for performance and simplicity  * We can\u2019t use iFrames for everything, as they\u2019re not flexible enough  * We can\u2019t re-render or reattach elements, as that causes many problems \u2014 CSS animations restart, media playback is interrupted, input cursors and text selections are lost, etc.    Any guidance is appreciated.    cc @gaearon @leeb",
        "human_words": "The New York Times is [rebuilding its website](https://open.nytimes.com/react-relay-and-graphql-under-the-hood-of-the-times-website-redesign-22fb62ea9764) using React. Currently, it\u2019s an isomorphic app that has both server- and client-side renders.     **Our question: What's the best way to include a non-React interactive graphic \u2014 maps, charts and other visualizations created by custom code \u2014 within a fully React page?**    Our ideal scenario:     * Server-side React renders the initial HTML for a graphic, using `dangerouslySetInnerHTML`, as part of a React page  * Client-side React never touches those elements again, even during component mounting    We thought React 16 might solve this with `hydrate` method, but it still removes nodes that it doesn't expect, such as nodes generated by D3 or other client-side code. None of the options in [Integrating with Other Libraries](https://facebook.github.io/react/docs/integrating-with-other-libraries.html) seem to be an exact match either.    The classic use case is a graphic with a D3 map. The server-side HTML includes text and a placeholder <div> for the map, as well as the map JS. On page load, the map is immediately drawn by D3 but gets erased when React mounts client-side. The D3 nodes aren\u2019t included in the server-side output, because they often vary based on viewport, device, etc.    Here\u2019s a [trivial example](https://jsfiddle.net/6zdhrych/), showing React 16\u2019s `hydrate` removing client-created nodes after one second. On mobile devices, loading the React library and potentially other dependencies could take some seconds.    The simplest solution I can think of is a `shouldComponentMount` function, where we could return false. The rest of the React components on the page would mount, but leave the interactive graphic part alone. There are probably other solutions.     Constraints:    * We need to use dangerouslySetInnerHTML, because we need to deploy graphics outside of site releases  * We need to render the initial HTML server-side for performance and simplicity  * We can\u2019t use iFrames for everything, as they\u2019re not flexible enough  * We can\u2019t re-render or reattach elements, as that causes many problems \u2014 CSS animations restart, media playback is interrupted, input cursors and text selections are lost, etc.    Any guidance is appreciated.    cc @gaearon @leeb",
        "human_words_regrex": "The New York Times is  using React. Currently, it\u2019s an isomorphic app that has both server- and client-side renders. **Our question: What's the best way to include a non-React interactive graphic \u2014 maps, charts and other visualizations created by custom code \u2014 within a fully React page?** Our ideal scenario: * Server-side React renders the initial HTML for a graphic, using `dangerouslySetInnerHTML`, as part of a React page * Client-side React never touches those elements again, even during component mounting We thought React 16 might solve this with `hydrate` method, but it still removes nodes that it doesn't expect, such as nodes generated by D3 or other client-side code. None of the options in  seem to be an exact match either. The classic use case is a graphic with a D3 map. The server-side HTML includes text and a placeholder  for the map, as well as the map JS. On page load, the map is immediately drawn by D3 but gets erased when React mounts client-side. The D3 nodes aren\u2019t included in the server-side output, because they often vary based on viewport, device, etc. Here\u2019s a , showing React 16\u2019s `hydrate` removing client-created nodes after one second. On mobile devices, loading the React library and potentially other dependencies could take some seconds. The simplest solution I can think of is a `shouldComponentMount` function, where we could return false. The rest of the React components on the page would mount, but leave the interactive graphic part alone. There are probably other solutions. Constraints: * We need to use dangerouslySetInnerHTML, because we need to deploy graphics outside of site releases * We need to render the initial HTML server-side for performance and simplicity * We can\u2019t use iFrames for everything, as they\u2019re not flexible enough * We can\u2019t re-render or reattach elements, as that causes many problems \u2014 CSS animations restart, media playback is interrupted, input cursors and text selections are lost, etc. Any guidance is appreciated. cc @gaearon @leeb",
        "human_words_stopwords_removal_lemmatization": "new york time using react . currently , \u2019 isomorphic app server- client-side render . * * question : 's best way include non-react interactive graphic \u2014 map , chart visualization created custom code \u2014 within fully react page ? * * ideal scenario : * server-side react render initial html graphic , using ` dangerouslysetinnerhtml ` , part react page * client-side react never touch element , even component mounting thought react 16 might solve ` hydrate ` method , still remove node n't expect , node generated d3 client-side code . none option seem exact match either . classic use case graphic d3 map . server-side html includes text placeholder map , well map j . page load , map immediately drawn d3 get erased react mount client-side . d3 node \u2019 included server-side output , often vary based viewport , device , etc . \u2019 , showing react 16 \u2019 ` hydrate ` removing client-created node one second . mobile device , loading react library potentially dependency could take second . simplest solution think ` shouldcomponentmount ` function , could return false . rest react component page would mount , leave interactive graphic part alone . probably solution . constraint : * need use dangerouslysetinnerhtml , need deploy graphic outside site release * need render initial html server-side performance simplicity * \u2019 use iframes everything , \u2019 flexible enough * \u2019 re-render reattach element , cause many problem \u2014 cs animation restart , medium playback interrupted , input cursor text selection lost , etc . guidance appreciated . cc @ gaearon @ leeb",
        "title_stopwords_removal_lemmatization": "prevent react modifying element manipulated external code ?"
    },
    {
        "issue_id": 255861331,
        "title": "Pattern for Parent Initiated fetch of Child data?",
        "label": [
            "Type: Question"
        ],
        "date": "2017-09-07T08:48:16Z",
        "status": "closed",
        "description": "For performance reasons I have a child element whose data is stored in its state and only its state (instead of being passed up the hierarchal chain using callbacks passed in props).\r\n\r\nThere then comes a time where an action in the parent element dictates that I now need that data, what is the correct pattern for fetching it in the child?\r\n\r\nDo I use refs and call a child.fetchData() method via a saved reference?\r\n\r\nDo I change a prop flag causing the child to call a prop callback with the data?",
        "remove_template_description": "For performance reasons I have a child element whose data is stored in its state and only its state (instead of being passed up the hierarchal chain using callbacks passed in props).    There then comes a time where an action in the parent element dictates that I now need that data, what is the correct pattern for fetching it in the child?    Do I use refs and call a child.fetchData() method via a saved reference?    Do I change a prop flag causing the child to call a prop callback with the data?",
        "human_words": "For performance reasons I have a child element whose data is stored in its state and only its state (instead of being passed up the hierarchal chain using callbacks passed in props).    There then comes a time where an action in the parent element dictates that I now need that data, what is the correct pattern for fetching it in the child?    Do I use refs and call a child.fetchData() method via a saved reference?    Do I change a prop flag causing the child to call a prop callback with the data?",
        "human_words_regrex": "For performance reasons I have a child element whose data is stored in its state and only its state (instead of being passed up the hierarchal chain using callbacks passed in props). There then comes a time where an action in the parent element dictates that I now need that data, what is the correct pattern for fetching it in the child? Do I use refs and call a child.fetchData() method via a saved reference? Do I change a prop flag causing the child to call a prop callback with the data?",
        "human_words_stopwords_removal_lemmatization": "performance reason child element whose data stored state state ( instead passed hierarchal chain using callback passed prop ) . come time action parent element dictate need data , correct pattern fetching child ? use ref call child.fetchdata ( ) method via saved reference ? change prop flag causing child call prop callback data ?",
        "title_stopwords_removal_lemmatization": "pattern parent initiated fetch child data ?"
    },
    {
        "issue_id": 249459453,
        "title": "Referencing `key` within `React.Children.map` *is* defined.",
        "label": [
            "Type: Question"
        ],
        "date": "2017-08-10T19:58:41Z",
        "status": "closed",
        "description": "This isn't necessarily a bug or a feature, more so asking for why it is implemented as it currently is.\r\nWhen inside of a component, `this.key` is undefined, however `child.key` is defined and has a value within `React.Children.map`. I realize these point to different instances, just demonstrating the difference.\r\n\r\nExample:\r\n```Javascript\r\n\r\nclass Example extends React.Component {\r\n  render() {\r\n    console.log(this.key); // undefined\r\n    return (\r\n      <div>\r\n       {React.Children.map(this.props.children, child => {\r\n          console.log(child.key); // defined\r\n          return child;\r\n       })}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n```\r\n\r\nI expect `child.key` to not be readable/writeable within `React.Children.map`, however it is both which seems counterintuitive to the idea that `this.key` is undefined within the component.\r\n\r\n\r\n",
        "remove_template_description": "This isn't necessarily a bug or a feature, more so asking for why it is implemented as it currently is.  When inside of a component, `this.key` is undefined, however `child.key` is defined and has a value within `React.Children.map`. I realize these point to different instances, just demonstrating the difference.    Example:  ```Javascript    class Example extends React.Component {    render() {      console.log(this.key); // undefined      return (        <div>         {React.Children.map(this.props.children, child => {            console.log(child.key); // defined            return child;         })}        </div>      )    }  }  ```    I expect `child.key` to not be readable/writeable within `React.Children.map`, however it is both which seems counterintuitive to the idea that `this.key` is undefined within the component.",
        "human_words": "This isn't necessarily a bug or a feature, more so asking for why it is implemented as it currently is.  When inside of a component, `this.key` is undefined, however `child.key` is defined and has a value within `React.Children.map`. I realize these point to different instances, just demonstrating the difference.    Example:      I expect `child.key` to not be readable/writeable within `React.Children.map`, however it is both which seems counterintuitive to the idea that `this.key` is undefined within the component.",
        "human_words_regrex": "This isn't necessarily a bug or a feature, more so asking for why it is implemented as it currently is. When inside of a component, `this.key` is undefined, however `child.key` is defined and has a value within `React.Children.map`. I realize these point to different instances, just demonstrating the difference. Example: I expect `child.key` to not be readable/writeable within `React.Children.map`, however it is both which seems counterintuitive to the idea that `this.key` is undefined within the component.",
        "human_words_stopwords_removal_lemmatization": "n't necessarily bug feature , asking implemented currently . inside component , ` this.key ` undefined , however ` child.key ` defined value within ` react.children.map ` . realize point different instance , demonstrating difference . example : expect ` child.key ` readable/writeable within ` react.children.map ` , however seems counterintuitive idea ` this.key ` undefined within component .",
        "title_stopwords_removal_lemmatization": "referencing ` key ` within ` react.children.map ` * * defined ."
    },
    {
        "issue_id": 247991028,
        "title": "Dispatch blur event on siblings",
        "label": [
            "Type: Question",
            "Component: DOM"
        ],
        "date": "2017-08-04T12:25:45Z",
        "status": "closed",
        "description": "There are two elements on the same level and they are both have onBlur handler. When one element loses focus, in his callback I try to dispatch blur event for the second element and I have \"Maximum call stack size exceeded\" error in console. \r\n\r\nTry example in JSFiddle. Click on second element and press \"tab\" button to lose focus.\r\n\r\nExample link: https://jsfiddle.net/0Lhqrjbq/2/\r\n\r\nVersion: 15.5.4",
        "remove_template_description": "There are two elements on the same level and they are both have onBlur handler. When one element loses focus, in his callback I try to dispatch blur event for the second element and I have \"Maximum call stack size exceeded\" error in console.     Try example in JSFiddle. Click on second element and press \"tab\" button to lose focus.    Example link: https://jsfiddle.net/0Lhqrjbq/2/    Version: 15.5.4",
        "human_words": "There are two elements on the same level and they are both have onBlur handler. When one element loses focus, in his callback I try to dispatch blur event for the second element and I have \"Maximum call stack size exceeded\" error in console.     Try example in JSFiddle. Click on second element and press \"tab\" button to lose focus.    Example link: https://jsfiddle.net/0Lhqrjbq/2/    Version: 15.5.4",
        "human_words_regrex": "There are two elements on the same level and they are both have onBlur handler. When one element loses focus, in his callback I try to dispatch blur event for the second element and I have \"Maximum call stack size exceeded\" error in console. Try example in JSFiddle. Click on second element and press \"tab\" button to lose focus. Example link:  Version: 15.5.4",
        "human_words_stopwords_removal_lemmatization": "two element level onblur handler . one element loses focus , callback try dispatch blur event second element `` maximum call stack size exceeded '' error console . try example jsfiddle . click second element press `` tab '' button lose focus . example link : version : 15.5.4",
        "title_stopwords_removal_lemmatization": "dispatch blur event sibling"
    },
    {
        "issue_id": 223122848,
        "title": "How to render object with custom toString?",
        "label": [
            "Type: Question"
        ],
        "date": "2017-04-20T16:19:10Z",
        "status": "closed",
        "description": "I'm implementing a i18n library, and would like to render a object with custom toString like this:\r\n\r\n```\r\nconst i18nObject = {\r\n  toString() {\r\n    return 'xxx';\r\n  }\r\n};\r\n```\r\n\r\n```\r\nrender() {\r\n  return {i18nObject}\r\n}\r\n```\r\n\r\nBut got the error:\r\n\r\ninvariant.js:44 Uncaught Error: Objects are not valid as a React child (found: xxx). If you meant to render a collection of children, use an array instead or wrap the object using createFragment(object) from the React add-ons. Check the render method of `App`. at invariant (invariant.js:44)\r\n\r\nDoes anyone know if there's any method to do this?",
        "remove_template_description": "I'm implementing a i18n library, and would like to render a object with custom toString like this:    ```  const i18nObject = {    toString() {      return 'xxx';    }  };  ```    ```  render() {    return {i18nObject}  }  ```    But got the error:    invariant.js:44 Uncaught Error: Objects are not valid as a React child (found: xxx). If you meant to render a collection of children, use an array instead or wrap the object using createFragment(object) from the React add-ons. Check the render method of `App`. at invariant (invariant.js:44)    Does anyone know if there's any method to do this?",
        "human_words": "I'm implementing a i18n library, and would like to render a object with custom toString like this:            But got the error:    invariant.js:44 Uncaught Error: Objects are not valid as a React child (found: xxx). If you meant to render a collection of children, use an array instead or wrap the object using createFragment(object) from the React add-ons. Check the render method of `App`. at invariant (invariant.js:44)    Does anyone know if there's any method to do this?",
        "human_words_regrex": "I'm implementing a i18n library, and would like to render a object with custom toString like this: But got the error: invariant.js:44 Uncaught Error: Objects are not valid as a React child (found: xxx). If you meant to render a collection of children, use an array instead or wrap the object using createFragment(object) from the React add-ons. Check the render method of `App`. at invariant (invariant.js:44) Does anyone know if there's any method to do this?",
        "human_words_stopwords_removal_lemmatization": "'m implementing i18n library , would like render object custom tostring like : got error : invariant.js:44 uncaught error : object valid react child ( found : xxx ) . meant render collection child , use array instead wrap object using createfragment ( object ) react add-on . check render method ` app ` . invariant ( invariant.js:44 ) anyone know 's method ?",
        "title_stopwords_removal_lemmatization": "render object custom tostring ?"
    },
    {
        "issue_id": 210501487,
        "title": "[Fiber] Investigation: what internals have direct dependencies on Stack modules?",
        "label": [
            "Type: Question"
        ],
        "date": "2017-02-27T14:36:58Z",
        "status": "closed",
        "description": "After some research, the following modules in the React codebase have some form of direct dependency on a React Stack module. Ideally, we want to move away form using internal module requires and use public API requires where possible.\r\n\r\nReactTestUtils:\r\n- `src/test/ReactShallowRenderer.js` \r\n  * There is a PR already open that should resolve this @lelandrichardson #8982\r\n  @spicyj says: \ud83d\udc4d\r\n\r\nRenderers:\r\n- `src/renderers/__tests__/ReactUpdates-test.js`\r\n  * Only one test makes use of `ReactUpdates` directly. Move the `require` to be inline within the test itself?\r\n  @spicyj says: this one just tests internals and doesn't test anything observable (originally was added as a part of a very minor perf improvement), can be deleted\r\n\r\nRenderers - ReactDOM:\r\n- `src/renderers/dom/shared/__tests__/ReactMount-test.js`\r\n  * A test in this suite uses `ReactMount._instancesByReactRootID`.\r\n  @spicyj says: this test was added because the old devtools relied on this and it was important to not break them -- but Dan rewrote the integration so the Fiber devtools don't need this and this test is fine to delete\r\n- `src/renderers/dom/shared/__tests__/ReactDOMComponent-test.js`\r\n  * Two tests: `createOpenTagMarkup` and `createContentMarkup` require Stack modules.\r\n  @spicyj says: these tests should be rewritten in terms of public APIs\r\n- `src/renderers/dom/shared/__tests__/ReactServerRendering-test.js`\r\n  * Re-visit once we have SSR working?\r\n  @spicyj says: \ud83d\udc4d\r\n- `src/renderers/dom/shared/__tests__/ReactDOMIDOperations-test.js`\r\n  * Only has a single `innerHTML` whitespace test.\r\n  @spicyj says: let's rewrite this one in terms of public APIs (though it can probably move into ReactDOMComponent-test) -- let's ensure that both initial render and updates work properly (since those historically used different codepaths and might also diverge in the future)\r\n\r\nRenderers - ReactDOM SSR:\r\n- `src/renderers/dom/ReactDOMServer.js`\r\n  * Re-visit once we have SSR working?\r\n  @spicyj says: \ud83d\udc4d\r\n\r\nRenderers - ReactART:\r\n- `src/renderers/art/ReactARTStack.js`\r\n  * A couple of Stack modules are required by ART.\r\n  @spicyj says: No need to worry about these, we'll delete these when we delete stack\r\n  @bvaughn says: \ud83d\udc4d\r\n\r\nRenderers - Native:\r\n- `src/renderers/native/ReactNativeReconcileTransaction.js`\r\n- `src/renderers/native/ReactNativeMount.js`\r\n- `src/renderers/native/ReactNativeStackInjection.js`\r\n- `src/renderers/native/ReactNativeBaseComponent.js`\r\n- `src/renderers/native/ReactNativeStack.js`\r\n\r\n@spicyj says: No need to worry about these, we'll delete these when we delete stack\r\n  @bvaughn says: \ud83d\udc4d\r\n\r\nScripts:\r\n- `scripts/bench/extract-component.js`\r\n  * Should we refactor to use the public API instead?\r\n  @spicyj says: We don't really have a public API for reflecting on/inspecting React trees which is what this script (almost a bookmarklet) does so we will need to rewrite this on top of Fiber if we want to use it again \u2013 but this isn't super important so for now this is okay to leave using Stack modules and it will only work with Stack until someone wants to use it and upgrades it to Fiber.",
        "remove_template_description": "After some research, the following modules in the React codebase have some form of direct dependency on a React Stack module. Ideally, we want to move away form using internal module requires and use public API requires where possible.    ReactTestUtils:  - `src/test/ReactShallowRenderer.js`     * There is a PR already open that should resolve this @lelandrichardson #8982    @spicyj says: \ud83d\udc4d    Renderers:  - `src/renderers/__tests__/ReactUpdates-test.js`    * Only one test makes use of `ReactUpdates` directly. Move the `require` to be inline within the test itself?    @spicyj says: this one just tests internals and doesn't test anything observable (originally was added as a part of a very minor perf improvement), can be deleted    Renderers - ReactDOM:  - `src/renderers/dom/shared/__tests__/ReactMount-test.js`    * A test in this suite uses `ReactMount._instancesByReactRootID`.    @spicyj says: this test was added because the old devtools relied on this and it was important to not break them -- but Dan rewrote the integration so the Fiber devtools don't need this and this test is fine to delete  - `src/renderers/dom/shared/__tests__/ReactDOMComponent-test.js`    * Two tests: `createOpenTagMarkup` and `createContentMarkup` require Stack modules.    @spicyj says: these tests should be rewritten in terms of public APIs  - `src/renderers/dom/shared/__tests__/ReactServerRendering-test.js`    * Re-visit once we have SSR working?    @spicyj says: \ud83d\udc4d  - `src/renderers/dom/shared/__tests__/ReactDOMIDOperations-test.js`    * Only has a single `innerHTML` whitespace test.    @spicyj says: let's rewrite this one in terms of public APIs (though it can probably move into ReactDOMComponent-test) -- let's ensure that both initial render and updates work properly (since those historically used different codepaths and might also diverge in the future)    Renderers - ReactDOM SSR:  - `src/renderers/dom/ReactDOMServer.js`    * Re-visit once we have SSR working?    @spicyj says: \ud83d\udc4d    Renderers - ReactART:  - `src/renderers/art/ReactARTStack.js`    * A couple of Stack modules are required by ART.    @spicyj says: No need to worry about these, we'll delete these when we delete stack    @bvaughn says: \ud83d\udc4d    Renderers - Native:  - `src/renderers/native/ReactNativeReconcileTransaction.js`  - `src/renderers/native/ReactNativeMount.js`  - `src/renderers/native/ReactNativeStackInjection.js`  - `src/renderers/native/ReactNativeBaseComponent.js`  - `src/renderers/native/ReactNativeStack.js`    @spicyj says: No need to worry about these, we'll delete these when we delete stack    @bvaughn says: \ud83d\udc4d    Scripts:  - `scripts/bench/extract-component.js`    * Should we refactor to use the public API instead?    @spicyj says: We don't really have a public API for reflecting on/inspecting React trees which is what this script (almost a bookmarklet) does so we will need to rewrite this on top of Fiber if we want to use it again \u2013 but this isn't super important so for now this is okay to leave using Stack modules and it will only work with Stack until someone wants to use it and upgrades it to Fiber.",
        "human_words": "After some research, the following modules in the React codebase have some form of direct dependency on a React Stack module. Ideally, we want to move away form using internal module requires and use public API requires where possible.    ReactTestUtils:  - `src/test/ReactShallowRenderer.js`     * There is a PR already open that should resolve this @lelandrichardson #8982    @spicyj says: \ud83d\udc4d    Renderers:  - `src/renderers/__tests__/ReactUpdates-test.js`    * Only one test makes use of `ReactUpdates` directly. Move the `require` to be inline within the test itself?    @spicyj says: this one just tests internals and doesn't test anything observable (originally was added as a part of a very minor perf improvement), can be deleted    Renderers - ReactDOM:  - `src/renderers/dom/shared/__tests__/ReactMount-test.js`    * A test in this suite uses `ReactMount._instancesByReactRootID`.    @spicyj says: this test was added because the old devtools relied on this and it was important to not break them -- but Dan rewrote the integration so the Fiber devtools don't need this and this test is fine to delete  - `src/renderers/dom/shared/__tests__/ReactDOMComponent-test.js`    * Two tests: `createOpenTagMarkup` and `createContentMarkup` require Stack modules.    @spicyj says: these tests should be rewritten in terms of public APIs  - `src/renderers/dom/shared/__tests__/ReactServerRendering-test.js`    * Re-visit once we have SSR working?    @spicyj says: \ud83d\udc4d  - `src/renderers/dom/shared/__tests__/ReactDOMIDOperations-test.js`    * Only has a single `innerHTML` whitespace test.    @spicyj says: let's rewrite this one in terms of public APIs (though it can probably move into ReactDOMComponent-test) -- let's ensure that both initial render and updates work properly (since those historically used different codepaths and might also diverge in the future)    Renderers - ReactDOM SSR:  - `src/renderers/dom/ReactDOMServer.js`    * Re-visit once we have SSR working?    @spicyj says: \ud83d\udc4d    Renderers - ReactART:  - `src/renderers/art/ReactARTStack.js`    * A couple of Stack modules are required by ART.    @spicyj says: No need to worry about these, we'll delete these when we delete stack    @bvaughn says: \ud83d\udc4d    Renderers - Native:  - `src/renderers/native/ReactNativeReconcileTransaction.js`  - `src/renderers/native/ReactNativeMount.js`  - `src/renderers/native/ReactNativeStackInjection.js`  - `src/renderers/native/ReactNativeBaseComponent.js`  - `src/renderers/native/ReactNativeStack.js`    @spicyj says: No need to worry about these, we'll delete these when we delete stack    @bvaughn says: \ud83d\udc4d    Scripts:  - `scripts/bench/extract-component.js`    * Should we refactor to use the public API instead?    @spicyj says: We don't really have a public API for reflecting on/inspecting React trees which is what this script (almost a bookmarklet) does so we will need to rewrite this on top of Fiber if we want to use it again \u2013 but this isn't super important so for now this is okay to leave using Stack modules and it will only work with Stack until someone wants to use it and upgrades it to Fiber.",
        "human_words_regrex": "After some research, the following modules in the React codebase have some form of direct dependency on a React Stack module. Ideally, we want to move away form using internal module requires and use public API requires where possible. ReactTestUtils: - `src/test/ReactShallowRenderer.js` * There is a PR already open that should resolve this @lelandrichardson #8982 @spicyj says: \ud83d\udc4d Renderers: - `src/renderers/__tests__/ReactUpdates-test.js` * Only one test makes use of `ReactUpdates` directly. Move the `require` to be inline within the test itself? @spicyj says: this one just tests internals and doesn't test anything observable (originally was added as a part of a very minor perf improvement), can be deleted Renderers - ReactDOM: - `src/renderers/dom/shared/__tests__/ReactMount-test.js` * A test in this suite uses `ReactMount._instancesByReactRootID`. @spicyj says: this test was added because the old devtools relied on this and it was important to not break them -- but Dan rewrote the integration so the Fiber devtools don't need this and this test is fine to delete - `src/renderers/dom/shared/__tests__/ReactDOMComponent-test.js` * Two tests: `createOpenTagMarkup` and `createContentMarkup` require Stack modules. @spicyj says: these tests should be rewritten in terms of public APIs - `src/renderers/dom/shared/__tests__/ReactServerRendering-test.js` * Re-visit once we have SSR working? @spicyj says: \ud83d\udc4d - `src/renderers/dom/shared/__tests__/ReactDOMIDOperations-test.js` * Only has a single `innerHTML` whitespace test. @spicyj says: let's rewrite this one in terms of public APIs (though it can probably move into ReactDOMComponent-test) -- let's ensure that both initial render and updates work properly (since those historically used different codepaths and might also diverge in the future) Renderers - ReactDOM SSR: - `src/renderers/dom/ReactDOMServer.js` * Re-visit once we have SSR working? @spicyj says: \ud83d\udc4d Renderers - ReactART: - `src/renderers/art/ReactARTStack.js` * A couple of Stack modules are required by ART. @spicyj says: No need to worry about these, we'll delete these when we delete stack @bvaughn says: \ud83d\udc4d Renderers - Native: - `src/renderers/native/ReactNativeReconcileTransaction.js` - `src/renderers/native/ReactNativeMount.js` - `src/renderers/native/ReactNativeStackInjection.js` - `src/renderers/native/ReactNativeBaseComponent.js` - `src/renderers/native/ReactNativeStack.js` @spicyj says: No need to worry about these, we'll delete these when we delete stack @bvaughn says: \ud83d\udc4d Scripts: - `scripts/bench/extract-component.js` * Should we refactor to use the public API instead? @spicyj says: We don't really have a public API for reflecting on/inspecting React trees which is what this script (almost a bookmarklet) does so we will need to rewrite this on top of Fiber if we want to use it again \u2013 but this isn't super important so for now this is okay to leave using Stack modules and it will only work with Stack until someone wants to use it and upgrades it to Fiber.",
        "human_words_stopwords_removal_lemmatization": "research , following module react codebase form direct dependency react stack module . ideally , want move away form using internal module requires use public api requires possible . reacttestutils : - ` src/test/reactshallowrenderer.js ` * pr already open resolve @ lelandrichardson # 8982 @ spicyj say : \ud83d\udc4d renderers : - ` src/renderers/__tests__/reactupdates-test.js ` * one test make use ` reactupdates ` directly . move ` require ` inline within test ? @ spicyj say : one test internals n't test anything observable ( originally added part minor perf improvement ) , deleted renderers - reactdom : - ` src/renderers/dom/shared/__tests__/reactmount-test.js ` * test suite us ` reactmount._instancesbyreactrootid ` . @ spicyj say : test added old devtools relied important break -- dan rewrote integration fiber devtools n't need test fine delete - ` src/renderers/dom/shared/__tests__/reactdomcomponent-test.js ` * two test : ` createopentagmarkup ` ` createcontentmarkup ` require stack module . @ spicyj say : test rewritten term public apis - ` src/renderers/dom/shared/__tests__/reactserverrendering-test.js ` * re-visit ssr working ? @ spicyj say : \ud83d\udc4d - ` src/renderers/dom/shared/__tests__/reactdomidoperations-test.js ` * single ` innerhtml ` whitespace test . @ spicyj say : let 's rewrite one term public apis ( though probably move reactdomcomponent-test ) -- let 's ensure initial render update work properly ( since historically used different codepaths might also diverge future ) renderers - reactdom ssr : - ` src/renderers/dom/reactdomserver.js ` * re-visit ssr working ? @ spicyj say : \ud83d\udc4d renderers - reactart : - ` src/renderers/art/reactartstack.js ` * couple stack module required art . @ spicyj say : need worry , 'll delete delete stack @ bvaughn say : \ud83d\udc4d renderers - native : - ` src/renderers/native/reactnativereconciletransaction.js ` - ` src/renderers/native/reactnativemount.js ` - ` src/renderers/native/reactnativestackinjection.js ` - ` src/renderers/native/reactnativebasecomponent.js ` - ` src/renderers/native/reactnativestack.js ` @ spicyj say : need worry , 'll delete delete stack @ bvaughn say : \ud83d\udc4d script : - ` scripts/bench/extract-component.js ` * refactor use public api instead ? @ spicyj say : n't really public api reflecting on/inspecting react tree script ( almost bookmarklet ) need rewrite top fiber want use \u2013 n't super important okay leave using stack module work stack someone want use upgrade fiber .",
        "title_stopwords_removal_lemmatization": "[ fiber ] investigation : internals direct dependency stack module ?"
    },
    {
        "issue_id": 199373530,
        "title": "Is _instance pointing to _ReactInternalInstance & _ReactInternalInstance pointing to _instance, expected Structure ?",
        "label": [
            "Type: Question"
        ],
        "date": "2017-01-07T17:30:52Z",
        "status": "closed",
        "description": "<img width=\"894\" alt=\"screen shot 2017-01-07 at 09 26 55\" src=\"https://cloud.githubusercontent.com/assets/755489/21743657/7e2c6ee6-d4bb-11e6-9964-9d2469e945e4.png\">\r\n\r\n\r\nI was playing with the examples to understand the internal code flow of React's setState.\r\nI noticed that **ReactCompositeComponentWrapper** Object had reference to **_instance** Object which in turn had reference to the same (screenshot's console) ReactCompositeComponentWrapper Object as **_ReactInternalInstance**. Is that an expected structure ?\r\n",
        "remove_template_description": "<img width=\"894\" alt=\"screen shot 2017-01-07 at 09 26 55\" src=\"https://cloud.githubusercontent.com/assets/755489/21743657/7e2c6ee6-d4bb-11e6-9964-9d2469e945e4.png\">      I was playing with the examples to understand the internal code flow of React's setState.  I noticed that **ReactCompositeComponentWrapper** Object had reference to **_instance** Object which in turn had reference to the same (screenshot's console) ReactCompositeComponentWrapper Object as **_ReactInternalInstance**. Is that an expected structure ?",
        "human_words": "<img width=\"894\" alt=\"screen shot 2017-01-07 at 09 26 55\" src=\"https://cloud.githubusercontent.com/assets/755489/21743657/7e2c6ee6-d4bb-11e6-9964-9d2469e945e4.png\">      I was playing with the examples to understand the internal code flow of React's setState.  I noticed that **ReactCompositeComponentWrapper** Object had reference to **_instance** Object which in turn had reference to the same (screenshot's console) ReactCompositeComponentWrapper Object as **_ReactInternalInstance**. Is that an expected structure ?",
        "human_words_regrex": "<img width=\"894\" alt=\"screen shot 2017-01-07 at 09 26 55\" src=\" I was playing with the examples to understand the internal code flow of React's setState. I noticed that **ReactCompositeComponentWrapper** Object had reference to **_instance** Object which in turn had reference to the same (screenshot's console) ReactCompositeComponentWrapper Object as **_ReactInternalInstance**. Is that an expected structure ?",
        "human_words_stopwords_removal_lemmatization": "< img width= '' 894 '' alt= '' screen shot 2017-01-07 09 26 55 '' src= '' playing example understand internal code flow react 's setstate . noticed * * reactcompositecomponentwrapper * * object reference * * _instance * * object turn reference ( screenshot 's console ) reactcompositecomponentwrapper object * * _reactinternalinstance * * . expected structure ?",
        "title_stopwords_removal_lemmatization": "_instance pointing _reactinternalinstance & _reactinternalinstance pointing _instance , expected structure ?"
    },
    {
        "issue_id": 178049304,
        "title": "____Notification Index:          -----Please ignore this issue. ----",
        "label": [
            "Type: Question"
        ],
        "date": "2016-09-20T12:44:32Z",
        "status": "closed",
        "description": "How to refer to the DOM element within JSX props (without using ref)?\r\nsame as: https://discuss.reactjs.org/t/passing-this-to-the-onclick-callback/437\r\n```\r\nclass myComponent extends Component{\r\n constructor(props){\r\n   this.state={ selectedOption: 'option1' }\r\n}\r\n   getClassName(e){\r\n           return e.target.textConent === this.state.selectedOption ? 'selected' :''      \r\n   }\r\n\r\n   onNodeSelected(e){\r\n      this.setState({selectedOption: e.target.contextText})\r\n}\r\n\r\n\r\nreturn(\r\n   <div>\r\n     {/* I was (and still am ) very much tempted  to pass `this` as `???` to refer to the current DOM element */}\r\n       <button className={ getClassName(??????)   onClick={this.onNodeSelected.bin(this)} >option1</button>\r\n       <button className={ getClassName(??????)}  onClick={...>option2</button>\r\n       <button className={ getClassName(??????)}  onClick={...>option3</button>\r\n       <button className={ getClassName(??????)}  onClick={...>option4</button>\r\n  </div> \r\n  )\r\n}\r\n```\r\n\r\n23/2/2017 update:\r\nthe answer is no. you can't use this. `this` always stands for the current component no matter where you use it.  the correct approach is to pass the `this object` explicitly. e.g.\r\n```\r\n<button className={ getClassName('option1')  onClick={this.onNodeSelected.bin(this)} >option1</button>\r\n```\r\nyou know that `this` refer to `option1` so you can pass the value directly without using `this` keyword\r\n@bochen2014",
        "remove_template_description": "How to refer to the DOM element within JSX props (without using ref)?  same as: https://discuss.reactjs.org/t/passing-this-to-the-onclick-callback/437  ```  class myComponent extends Component{   constructor(props){     this.state={ selectedOption: 'option1' }  }     getClassName(e){             return e.target.textConent === this.state.selectedOption ? 'selected' :''           }       onNodeSelected(e){        this.setState({selectedOption: e.target.contextText})  }      return(     <div>       {/* I was (and still am ) very much tempted  to pass `this` as `???` to refer to the current DOM element */}         <button className={ getClassName(??????)   onClick={this.onNodeSelected.bin(this)} >option1</button>         <button className={ getClassName(??????)}  onClick={...>option2</button>         <button className={ getClassName(??????)}  onClick={...>option3</button>         <button className={ getClassName(??????)}  onClick={...>option4</button>    </div>     )  }  ```    23/2/2017 update:  the answer is no. you can't use this. `this` always stands for the current component no matter where you use it.  the correct approach is to pass the `this object` explicitly. e.g.  ```  <button className={ getClassName('option1')  onClick={this.onNodeSelected.bin(this)} >option1</button>  ```  you know that `this` refer to `option1` so you can pass the value directly without using `this` keyword  @bochen2014",
        "human_words": "How to refer to the DOM element within JSX props (without using ref)?  same as: https://discuss.reactjs.org/t/passing-this-to-the-onclick-callback/437      23/2/2017 update:  the answer is no. you can't use this. `this` always stands for the current component no matter where you use it.  the correct approach is to pass the `this object` explicitly. e.g.    you know that `this` refer to `option1` so you can pass the value directly without using `this` keyword  @bochen2014",
        "human_words_regrex": "How to refer to the DOM element within JSX props (without using ref)? same as:  23/2/2017 update: the answer is no. you can't use this. `this` always stands for the current component no matter where you use it. the correct approach is to pass the `this object` explicitly. e.g. you know that `this` refer to `option1` so you can pass the value directly without using `this` keyword @bochen2014",
        "human_words_stopwords_removal_lemmatization": "refer dom element within jsx prop ( without using ref ) ? : 23/2/2017 update : answer . ca n't use . ` ` always stand current component matter use . correct approach pas ` object ` explicitly . e.g . know ` ` refer ` option1 ` pas value directly without using ` ` keyword @ bochen2014",
        "title_stopwords_removal_lemmatization": "____notification index : -- -- -please ignore issue . -- --"
    },
    {
        "issue_id": 160642831,
        "title": "Cannot access \"this\" or \"props\"",
        "label": [
            "Type: Question"
        ],
        "date": "2016-06-16T11:50:37Z",
        "status": "closed",
        "description": "**Do you want to request a _feature_ or report a _bug_?**\nSeems like a bug. Not sure\n\n**What is the current behavior?**\nUnable to access props, if the function is defined outside\n\n**If the current behavior is a bug, please provide the steps to reproduce.**\nhttps://jsfiddle.net/69z2wepo/45785/\n\n**What is the expected behavior?**\nExpected Behavior is having access to the props\n\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\nI am working with 15.1.0, though I believe this is present in older versions as well\n",
        "remove_template_description": "**Do you want to request a _feature_ or report a _bug_?** Seems like a bug. Not sure  **What is the current behavior?** Unable to access props, if the function is defined outside  **If the current behavior is a bug, please provide the steps to reproduce.** https://jsfiddle.net/69z2wepo/45785/  **What is the expected behavior?** Expected Behavior is having access to the props  **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** I am working with 15.1.0, though I believe this is present in older versions as well",
        "human_words": "**Do you want to request a _feature_ or report a _bug_?** Seems like a bug. Not sure  **What is the current behavior?** Unable to access props, if the function is defined outside  **If the current behavior is a bug, please provide the steps to reproduce.** https://jsfiddle.net/69z2wepo/45785/  **What is the expected behavior?** Expected Behavior is having access to the props  **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** I am working with 15.1.0, though I believe this is present in older versions as well",
        "human_words_regrex": "**Do you want to request a _feature_ or report a _bug_?** Seems like a bug. Not sure **What is the current behavior?** Unable to access props, if the function is defined outside **If the current behavior is a bug, please provide the steps to reproduce.**  **What is the expected behavior?** Expected Behavior is having access to the props **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** I am working with 15.1.0, though I believe this is present in older versions as well",
        "human_words_stopwords_removal_lemmatization": "* * want request _feature_ report _bug_ ? * * seems like bug . sure * * current behavior ? * * unable access prop , function defined outside * * current behavior bug , please provide step reproduce . * * * * expected behavior ? * * expected behavior access prop * * version react , browser / o affected issue ? work previous version react ? * * working 15.1.0 , though believe present older version well",
        "title_stopwords_removal_lemmatization": "access `` '' `` prop ''"
    },
    {
        "issue_id": 159101760,
        "title": "Documentation: passing key to React.createElement",
        "label": [
            "Type: Question"
        ],
        "date": "2016-06-08T07:58:31Z",
        "status": "closed",
        "description": "There is nothing in the documentation that indicates how to pass `key`s to `React.createElement`.\n\nAlso there is no explanation about `props.children` either, especially when using `React.cloneElement`: Should the `props.children` be copied or new children passed?\n\n(See also this SO question: http://stackoverflow.com/questions/37120956/react-cloneelement-pass-new-children-or-copy-props-children)\n",
        "remove_template_description": "There is nothing in the documentation that indicates how to pass `key`s to `React.createElement`.  Also there is no explanation about `props.children` either, especially when using `React.cloneElement`: Should the `props.children` be copied or new children passed?  (See also this SO question: http://stackoverflow.com/questions/37120956/react-cloneelement-pass-new-children-or-copy-props-children)",
        "human_words": "There is nothing in the documentation that indicates how to pass `key`s to `React.createElement`.  Also there is no explanation about `props.children` either, especially when using `React.cloneElement`: Should the `props.children` be copied or new children passed?  (See also this SO question: http://stackoverflow.com/questions/37120956/react-cloneelement-pass-new-children-or-copy-props-children)",
        "human_words_regrex": "There is nothing in the documentation that indicates how to pass `key`s to `React.createElement`. Also there is no explanation about `props.children` either, especially when using `React.cloneElement`: Should the `props.children` be copied or new children passed? (See also this SO question: ",
        "human_words_stopwords_removal_lemmatization": "nothing documentation indicates pas ` key ` ` react.createelement ` . also explanation ` props.children ` either , especially using ` react.cloneelement ` : ` props.children ` copied new child passed ? ( see also question :",
        "title_stopwords_removal_lemmatization": "documentation : passing key react.createelement"
    },
    {
        "issue_id": 157453871,
        "title": "Form disappears without calling onSubmit",
        "label": [
            "Type: Question",
            "Component: DOM"
        ],
        "date": "2016-05-30T08:16:57Z",
        "status": "closed",
        "description": "**Do you want to request a _feature_ or report a _bug_?**\nReport a bug\n\n**What is the current behavior?**\nWhen a form element disappears as the result of a state change (e.g., triggered by an onClick handler on the submit button), its onSubmit handler is not called. In HTML, even if a form element is removed from the DOM, its onSubmit handler is still called.\n\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/reactjs/69z2wepo/).**\nPlain JS + HTML version (expected behavior): https://jsfiddle.net/b22925dw/\nReproduced in React: https://jsfiddle.net/yaf6p0ga/1/\n_The commented-out setTimeout in the react code is a usable hack to fix it for the time being_\n\n**What is the expected behavior?**\nThe code specified in the form's onSubmit should be executed before the form disappears.\n\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\nReact 15.0.2 / Chrome 51.0.2704.63 (64-bit) / OS X 10.11.5\n",
        "remove_template_description": "**Do you want to request a _feature_ or report a _bug_?** Report a bug  **What is the current behavior?** When a form element disappears as the result of a state change (e.g., triggered by an onClick handler on the submit button), its onSubmit handler is not called. In HTML, even if a form element is removed from the DOM, its onSubmit handler is still called.  **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/reactjs/69z2wepo/).** Plain JS + HTML version (expected behavior): https://jsfiddle.net/b22925dw/ Reproduced in React: https://jsfiddle.net/yaf6p0ga/1/ _The commented-out setTimeout in the react code is a usable hack to fix it for the time being_  **What is the expected behavior?** The code specified in the form's onSubmit should be executed before the form disappears.  **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** React 15.0.2 / Chrome 51.0.2704.63 (64-bit) / OS X 10.11.5",
        "human_words": "**Do you want to request a _feature_ or report a _bug_?** Report a bug  **What is the current behavior?** When a form element disappears as the result of a state change (e.g., triggered by an onClick handler on the submit button), its onSubmit handler is not called. In HTML, even if a form element is removed from the DOM, its onSubmit handler is still called.  **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/reactjs/69z2wepo/).** Plain JS + HTML version (expected behavior): https://jsfiddle.net/b22925dw/ Reproduced in React: https://jsfiddle.net/yaf6p0ga/1/ _The commented-out setTimeout in the react code is a usable hack to fix it for the time being_  **What is the expected behavior?** The code specified in the form's onSubmit should be executed before the form disappears.  **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** React 15.0.2 / Chrome 51.0.2704.63 (64-bit) / OS X 10.11.5",
        "human_words_regrex": "**Do you want to request a _feature_ or report a _bug_?** Report a bug **What is the current behavior?** When a form element disappears as the result of a state change (e.g., triggered by an onClick handler on the submit button), its onSubmit handler is not called. In HTML, even if a form element is removed from the DOM, its onSubmit handler is still called. **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via  or similar (template:  Plain JS + HTML version (expected behavior):  Reproduced in React:  _The commented-out setTimeout in the react code is a usable hack to fix it for the time being_ **What is the expected behavior?** The code specified in the form's onSubmit should be executed before the form disappears. **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** React 15.0.2 / Chrome 51.0.2704.63 (64-bit) / OS X 10.11.5",
        "human_words_stopwords_removal_lemmatization": "* * want request _feature_ report _bug_ ? * * report bug * * current behavior ? * * form element disappears result state change ( e.g. , triggered onclick handler submit button ) , onsubmit handler called . html , even form element removed dom , onsubmit handler still called . * * current behavior bug , please provide step reproduce possible minimal demo problem via similar ( template : plain j + html version ( expected behavior ) : reproduced react : _the commented-out settimeout react code usable hack fix time being_ * * expected behavior ? * * code specified form 's onsubmit executed form disappears . * * version react , browser / o affected issue ? work previous version react ? * * react 15.0.2 / chrome 51.0.2704.63 ( 64-bit ) / o x 10.11.5",
        "title_stopwords_removal_lemmatization": "form disappears without calling onsubmit"
    },
    {
        "issue_id": 155776231,
        "title": "onMouseLeave doesn't work if the node gets detached",
        "label": [
            "Type: Question",
            "Component: DOM"
        ],
        "date": "2016-05-19T16:10:59Z",
        "status": "open",
        "description": "I have a problem with this kind of component:\n\n``` JavaScript\nclass onHover extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      bool: false,\n    }\n  }\n\n  render() {\n    return (\n      <div onMouseEnter={() => this.setState({ bool: true })} onMouseLeave={() => this.setState({ bool: false })}>\n        {\n          this.state.bool ? (\n            <span>[OPTION1] show after onMouseEnter</span>\n          ) : (\n            <div>[OPTION2] show after onMouseLeave</div>\n          )\n        }\n      </div>\n    )\n  }\n}\n```\n\nNotice that the first option1 is a `span`, option2 is a `div`.\n\nThis works fine when I move the mouse slowly.\nThough, if I \"cut\" through this with the mouse very fast, only the `onMouseEnter` event gets triggered, but not the `onMouseLeave` event.\n\nIt is always working though, if both options have the same tag (if both are `div` or both are `span`). \n\nEDIT:\nI think it has something to do with rerendering. When the components are of the same type, but I force a rerender, it causes the same issues. \n\n``` JavaScript\nclass onHover extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      bool: false,\n    }\n  }\n\n  render() {\n    return (\n      <div onMouseEnter={() => this.setState({ bool: true })} onMouseLeave={() => this.setState({ bool: false })}>\n        {\n          this.state.bool ? (\n            <div key={Math.random()}>[OPTION1] show after onMouseEnter</div>\n          ) : (\n            <div key={Math.random()}>[OPTION2] show after onMouseLeave</div>\n          )\n        }\n      </div>\n    )\n  }\n}\n```\n",
        "remove_template_description": "I have a problem with this kind of component:  ``` JavaScript class onHover extends Component {    constructor(props) {     super(props);     this.state = {       bool: false,     }   }    render() {     return (       <div onMouseEnter={() => this.setState({ bool: true })} onMouseLeave={() => this.setState({ bool: false })}>         {           this.state.bool ? (             <span>[OPTION1] show after onMouseEnter</span>           ) : (             <div>[OPTION2] show after onMouseLeave</div>           )         }       </div>     )   } } ```  Notice that the first option1 is a `span`, option2 is a `div`.  This works fine when I move the mouse slowly. Though, if I \"cut\" through this with the mouse very fast, only the `onMouseEnter` event gets triggered, but not the `onMouseLeave` event.  It is always working though, if both options have the same tag (if both are `div` or both are `span`).   EDIT: I think it has something to do with rerendering. When the components are of the same type, but I force a rerender, it causes the same issues.   ``` JavaScript class onHover extends Component {    constructor(props) {     super(props);     this.state = {       bool: false,     }   }    render() {     return (       <div onMouseEnter={() => this.setState({ bool: true })} onMouseLeave={() => this.setState({ bool: false })}>         {           this.state.bool ? (             <div key={Math.random()}>[OPTION1] show after onMouseEnter</div>           ) : (             <div key={Math.random()}>[OPTION2] show after onMouseLeave</div>           )         }       </div>     )   } } ```",
        "human_words": "I have a problem with this kind of component:    Notice that the first option1 is a `span`, option2 is a `div`.  This works fine when I move the mouse slowly. Though, if I \"cut\" through this with the mouse very fast, only the `onMouseEnter` event gets triggered, but not the `onMouseLeave` event.  It is always working though, if both options have the same tag (if both are `div` or both are `span`).   EDIT: I think it has something to do with rerendering. When the components are of the same type, but I force a rerender, it causes the same issues.   ",
        "human_words_regrex": "I have a problem with this kind of component: Notice that the first option1 is a `span`, option2 is a `div`. This works fine when I move the mouse slowly. Though, if I \"cut\" through this with the mouse very fast, only the `onMouseEnter` event gets triggered, but not the `onMouseLeave` event. It is always working though, if both options have the same tag (if both are `div` or both are `span`). EDIT: I think it has something to do with rerendering. When the components are of the same type, but I force a rerender, it causes the same issues. ",
        "human_words_stopwords_removal_lemmatization": "problem kind component : notice first option1 ` span ` , option2 ` div ` . work fine move mouse slowly . though , `` cut '' mouse fast , ` onmouseenter ` event get triggered , ` onmouseleave ` event . always working though , option tag ( ` div ` ` span ` ) . edit : think something rerendering . component type , force rerender , cause issue .",
        "title_stopwords_removal_lemmatization": "onmouseleave n't work node get detached"
    },
    {
        "issue_id": 153680206,
        "title": "How to force React to reorder keyed children instead of destroying/recreating",
        "label": [
            "Type: Question"
        ],
        "date": "2016-05-08T22:08:01Z",
        "status": "closed",
        "description": "I'm using React to build an application for viewing multiple webcasts at one time. I have a `VideoGrid` component that has an arbitrary number of `VideoCell` components as children. Each `VideoCell` has a unique key as described [here](https://facebook.github.io/react/docs/multiple-components.html#dynamic-children).\n\nI'm trying to implement the ability to swap the positions of webcasts on the screen. It's important that the DOM nodes are reordered and not recreated, in order to prevent the webcast embeds from reloading. Based on [the documentation](https://facebook.github.io/react/docs/multiple-components.html#dynamic-children), the components should be reordered, not destroyed and recreated, because they have unique keys:\n\n> When React reconciles the keyed children, it will ensure that any child with `key` will be reordered (instead of clobbered) or destroyed (instead of reused).\n\nThe problem there is the \"...or destroyed\". It's vital that my components be reordered and not destroyed. I don't know how the diffing algorithm decides which components to reorder and which to destroy and recreate, but I'm seeing a mix of the two behaviors that doesn't do what I want.\n\nI created a simple test case on JSFiddle to demonstrate the problem I'm having: https://jsfiddle.net/nwalters512/cja067cn/3/. Click the button to swap the keys assigned to the first and last components. Note how the last component is correctly moved to the first position, but the remainder of the components (including the ones at indices 1 and 2, who don't change at all!) are destroyed and recreated. You can see that by how the embedded video reloads.\n\nIs there a way to force React to reorder children instead of destroying and recreating them?\n",
        "remove_template_description": "I'm using React to build an application for viewing multiple webcasts at one time. I have a `VideoGrid` component that has an arbitrary number of `VideoCell` components as children. Each `VideoCell` has a unique key as described [here](https://facebook.github.io/react/docs/multiple-components.html#dynamic-children).  I'm trying to implement the ability to swap the positions of webcasts on the screen. It's important that the DOM nodes are reordered and not recreated, in order to prevent the webcast embeds from reloading. Based on [the documentation](https://facebook.github.io/react/docs/multiple-components.html#dynamic-children), the components should be reordered, not destroyed and recreated, because they have unique keys:  > When React reconciles the keyed children, it will ensure that any child with `key` will be reordered (instead of clobbered) or destroyed (instead of reused).  The problem there is the \"...or destroyed\". It's vital that my components be reordered and not destroyed. I don't know how the diffing algorithm decides which components to reorder and which to destroy and recreate, but I'm seeing a mix of the two behaviors that doesn't do what I want.  I created a simple test case on JSFiddle to demonstrate the problem I'm having: https://jsfiddle.net/nwalters512/cja067cn/3/. Click the button to swap the keys assigned to the first and last components. Note how the last component is correctly moved to the first position, but the remainder of the components (including the ones at indices 1 and 2, who don't change at all!) are destroyed and recreated. You can see that by how the embedded video reloads.  Is there a way to force React to reorder children instead of destroying and recreating them?",
        "human_words": "I'm using React to build an application for viewing multiple webcasts at one time. I have a `VideoGrid` component that has an arbitrary number of `VideoCell` components as children. Each `VideoCell` has a unique key as described [here](https://facebook.github.io/react/docs/multiple-components.html#dynamic-children).  I'm trying to implement the ability to swap the positions of webcasts on the screen. It's important that the DOM nodes are reordered and not recreated, in order to prevent the webcast embeds from reloading. Based on [the documentation](https://facebook.github.io/react/docs/multiple-components.html#dynamic-children), the components should be reordered, not destroyed and recreated, because they have unique keys:  > When React reconciles the keyed children, it will ensure that any child with `key` will be reordered (instead of clobbered) or destroyed (instead of reused).  The problem there is the \"...or destroyed\". It's vital that my components be reordered and not destroyed. I don't know how the diffing algorithm decides which components to reorder and which to destroy and recreate, but I'm seeing a mix of the two behaviors that doesn't do what I want.  I created a simple test case on JSFiddle to demonstrate the problem I'm having: https://jsfiddle.net/nwalters512/cja067cn/3/. Click the button to swap the keys assigned to the first and last components. Note how the last component is correctly moved to the first position, but the remainder of the components (including the ones at indices 1 and 2, who don't change at all!) are destroyed and recreated. You can see that by how the embedded video reloads.  Is there a way to force React to reorder children instead of destroying and recreating them?",
        "human_words_regrex": "I'm using React to build an application for viewing multiple webcasts at one time. I have a `VideoGrid` component that has an arbitrary number of `VideoCell` components as children. Each `VideoCell` has a unique key as described . I'm trying to implement the ability to swap the positions of webcasts on the screen. It's important that the DOM nodes are reordered and not recreated, in order to prevent the webcast embeds from reloading. Based on , the components should be reordered, not destroyed and recreated, because they have unique keys: > When React reconciles the keyed children, it will ensure that any child with `key` will be reordered (instead of clobbered) or destroyed (instead of reused). The problem there is the \"...or destroyed\". It's vital that my components be reordered and not destroyed. I don't know how the diffing algorithm decides which components to reorder and which to destroy and recreate, but I'm seeing a mix of the two behaviors that doesn't do what I want. I created a simple test case on JSFiddle to demonstrate the problem I'm having:  Click the button to swap the keys assigned to the first and last components. Note how the last component is correctly moved to the first position, but the remainder of the components (including the ones at indices 1 and 2, who don't change at all!) are destroyed and recreated. You can see that by how the embedded video reloads. Is there a way to force React to reorder children instead of destroying and recreating them?",
        "human_words_stopwords_removal_lemmatization": "'m using react build application viewing multiple webcasts one time . ` videogrid ` component arbitrary number ` videocell ` component child . ` videocell ` unique key described . 'm trying implement ability swap position webcasts screen . 's important dom node reordered recreated , order prevent webcast embeds reloading . based , component reordered , destroyed recreated , unique key : > react reconciles keyed child , ensure child ` key ` reordered ( instead clobbered ) destroyed ( instead reused ) . problem `` ... destroyed '' . 's vital component reordered destroyed . n't know diffing algorithm decides component reorder destroy recreate , 'm seeing mix two behavior n't want . created simple test case jsfiddle demonstrate problem 'm : click button swap key assigned first last component . note last component correctly moved first position , remainder component ( including one index 1 2 , n't change ! ) destroyed recreated . see embedded video reloads . way force react reorder child instead destroying recreating ?",
        "title_stopwords_removal_lemmatization": "force react reorder keyed child instead destroying/recreating"
    },
    {
        "issue_id": 153461043,
        "title": "How do I test the authentication flow in my app?",
        "label": [
            "Type: Question"
        ],
        "date": "2016-05-06T14:20:50Z",
        "status": "closed",
        "description": "Hi, I have an app implementing auth using React-router + Redux  + Sagas + JWT.\n\nTLDR;\nHow do I approach testing this authentication flow?\n\nBasically, I am using React-router's onEnter method to check if the user is authenticated to allow access to it. The function checks this info from the app state. When credentials are submitted, an action is dispatched which is received by the sagas which send an api request, and then store the credentials details in the local storage which then gets reduced in the app state.\n",
        "remove_template_description": "Hi, I have an app implementing auth using React-router + Redux  + Sagas + JWT.  TLDR; How do I approach testing this authentication flow?  Basically, I am using React-router's onEnter method to check if the user is authenticated to allow access to it. The function checks this info from the app state. When credentials are submitted, an action is dispatched which is received by the sagas which send an api request, and then store the credentials details in the local storage which then gets reduced in the app state.",
        "human_words": "Hi, I have an app implementing auth using React-router + Redux  + Sagas + JWT.  TLDR; How do I approach testing this authentication flow?  Basically, I am using React-router's onEnter method to check if the user is authenticated to allow access to it. The function checks this info from the app state. When credentials are submitted, an action is dispatched which is received by the sagas which send an api request, and then store the credentials details in the local storage which then gets reduced in the app state.",
        "human_words_regrex": "Hi, I have an app implementing auth using React-router + Redux + Sagas + JWT. TLDR; How do I approach testing this authentication flow? Basically, I am using React-router's onEnter method to check if the user is authenticated to allow access to it. The function checks this info from the app state. When credentials are submitted, an action is dispatched which is received by the sagas which send an api request, and then store the credentials details in the local storage which then gets reduced in the app state.",
        "human_words_stopwords_removal_lemmatization": "hi , app implementing auth using react-router + redux + saga + jwt . tldr ; approach testing authentication flow ? basically , using react-router 's onenter method check user authenticated allow access . function check info app state . credential submitted , action dispatched received saga send api request , store credential detail local storage get reduced app state .",
        "title_stopwords_removal_lemmatization": "test authentication flow app ?"
    },
    {
        "issue_id": 148926148,
        "title": "I got React v15 update error. ",
        "label": [
            "Type: Question"
        ],
        "date": "2016-04-17T07:15:01Z",
        "status": "closed",
        "description": "I run this command \nnpm install --save react@15.0.0-rc.1 react-dom@15.0.0-rc.1\n![screenshot from 2016-04-17 14 11 38](https://cloud.githubusercontent.com/assets/16798574/14585668/bcac7660-04a6-11e6-8a07-97a8f9b285a2.png)\n",
        "remove_template_description": "I run this command  npm install --save react@15.0.0-rc.1 react-dom@15.0.0-rc.1 ![screenshot from 2016-04-17 14 11 38](https://cloud.githubusercontent.com/assets/16798574/14585668/bcac7660-04a6-11e6-8a07-97a8f9b285a2.png)",
        "human_words": "I run this command  npm install --save react@15.0.0-rc.1 react-dom@15.0.0-rc.1 ![screenshot from 2016-04-17 14 11 38](https://cloud.githubusercontent.com/assets/16798574/14585668/bcac7660-04a6-11e6-8a07-97a8f9b285a2.png)",
        "human_words_regrex": "I run this command npm install --save react@15.0.0-rc.1 react-dom@15.0.0-rc.1 !",
        "human_words_stopwords_removal_lemmatization": "run command npm install -- save react @ 15.0.0-rc.1 react-dom @ 15.0.0-rc.1 !",
        "title_stopwords_removal_lemmatization": "got react v15 update error ."
    },
    {
        "issue_id": 148408114,
        "title": "Children don't re-render when parent component is optimised",
        "label": [
            "Type: Question"
        ],
        "date": "2016-04-14T16:01:59Z",
        "status": "closed",
        "description": "I am seeing something that looks like a bug and have written a simple test case for it.\n\nPlease refer to this WebpackBin as it contains the test scenario:\nhttp://www.webpackbin.com/EJpabsuJW\n",
        "remove_template_description": "I am seeing something that looks like a bug and have written a simple test case for it.  Please refer to this WebpackBin as it contains the test scenario: http://www.webpackbin.com/EJpabsuJW",
        "human_words": "I am seeing something that looks like a bug and have written a simple test case for it.  Please refer to this WebpackBin as it contains the test scenario: http://www.webpackbin.com/EJpabsuJW",
        "human_words_regrex": "I am seeing something that looks like a bug and have written a simple test case for it. Please refer to this WebpackBin as it contains the test scenario: ",
        "human_words_stopwords_removal_lemmatization": "seeing something look like bug written simple test case . please refer webpackbin contains test scenario :",
        "title_stopwords_removal_lemmatization": "child n't re-render parent component optimised"
    },
    {
        "issue_id": 146274978,
        "title": "callback in setState() second parameter cannot get mouse-click's event handler",
        "label": [
            "Type: Question"
        ],
        "date": "2016-04-06T10:57:42Z",
        "status": "closed",
        "description": "Hi all,\n\nI use setState in a click function, and I pass a callback function to second parameter. Please look at [https://jsfiddle.net/009memtb/](https://jsfiddle.net/009memtb/), In the callback function, I cannot get event handler, is it reasonable?\n\nI try to pass event handler into callback like [https://jsfiddle.net/ozagLubw/2/](https://jsfiddle.net/ozagLubw/2/), but the state is wrong. \n\nHow can I get event handler and right state in setState callback function correctly?\n\nthank for your help in advance\n",
        "remove_template_description": "Hi all,  I use setState in a click function, and I pass a callback function to second parameter. Please look at [https://jsfiddle.net/009memtb/](https://jsfiddle.net/009memtb/), In the callback function, I cannot get event handler, is it reasonable?  I try to pass event handler into callback like [https://jsfiddle.net/ozagLubw/2/](https://jsfiddle.net/ozagLubw/2/), but the state is wrong.   How can I get event handler and right state in setState callback function correctly?  thank for your help in advance",
        "human_words": "Hi all,  I use setState in a click function, and I pass a callback function to second parameter. Please look at [https://jsfiddle.net/009memtb/](https://jsfiddle.net/009memtb/), In the callback function, I cannot get event handler, is it reasonable?  I try to pass event handler into callback like [https://jsfiddle.net/ozagLubw/2/](https://jsfiddle.net/ozagLubw/2/), but the state is wrong.   How can I get event handler and right state in setState callback function correctly?  thank for your help in advance",
        "human_words_regrex": "Hi all, I use setState in a click function, and I pass a callback function to second parameter. Please look at , In the callback function, I cannot get event handler, is it reasonable? I try to pass event handler into callback like , but the state is wrong. How can I get event handler and right state in setState callback function correctly? thank for your help in advance",
        "human_words_stopwords_removal_lemmatization": "hi , use setstate click function , pas callback function second parameter . please look , callback function , get event handler , reasonable ? try pas event handler callback like , state wrong . get event handler right state setstate callback function correctly ? thank help advance",
        "title_stopwords_removal_lemmatization": "callback setstate ( ) second parameter get mouse-click 's event handler"
    },
    {
        "issue_id": 145974600,
        "title": "transitionGroup",
        "label": [
            "Type: Question"
        ],
        "date": "2016-04-05T12:34:27Z",
        "status": "closed",
        "description": "```\nvar ReactTransitionGroup = React.addons.TransitionGroup;\n\nvar Content = React.createClass({\n    componentWillAppear: function () {\n        console.log('componentWillAppear');\n    },\n    componentDidAppear: function () {\n        console.log('componentDidAppear');\n    },\n    componentWillEnter: function () {\n        console.log('MyBox.componentWillEnter');\n    },\n    componentDidEnter: function () {\n        console.log('MyBox.componentDidEnter');\n    },\n    componentWillLeave: function () {\n        console.log('MyBox.componentWillLeave');\n    },\n    componentDidLeave: function () {\n        console.log('MyBox.componentDidLeave');\n    },\n    render: function () {\n        return <div>content</div>;\n    }\n})\nvar TodoList = React.createClass({\n    getInitialState: function () {\n        return {show: false};\n    },\n    show: function () {\n        this.setState({\n            show: true\n        })\n    },\n    hide: function () {\n        this.setState({\n            show: false\n        })\n    },\n    render: function () {\n        var items = this.state.show ? <Content key='content'/> : '';\n        return (\n            <div>\n                <button onClick={this.show}>show</button>\n                <button onClick={this.hide}>hide</button>\n                <ReactTransitionGroup>\n                    {items}\n                </ReactTransitionGroup>\n\n            </div>\n        );\n    }\n});\n```\n\nCould you tell me where the problem is?\n",
        "remove_template_description": "``` var ReactTransitionGroup = React.addons.TransitionGroup;  var Content = React.createClass({     componentWillAppear: function () {         console.log('componentWillAppear');     },     componentDidAppear: function () {         console.log('componentDidAppear');     },     componentWillEnter: function () {         console.log('MyBox.componentWillEnter');     },     componentDidEnter: function () {         console.log('MyBox.componentDidEnter');     },     componentWillLeave: function () {         console.log('MyBox.componentWillLeave');     },     componentDidLeave: function () {         console.log('MyBox.componentDidLeave');     },     render: function () {         return <div>content</div>;     } }) var TodoList = React.createClass({     getInitialState: function () {         return {show: false};     },     show: function () {         this.setState({             show: true         })     },     hide: function () {         this.setState({             show: false         })     },     render: function () {         var items = this.state.show ? <Content key='content'/> : '';         return (             <div>                 <button onClick={this.show}>show</button>                 <button onClick={this.hide}>hide</button>                 <ReactTransitionGroup>                     {items}                 </ReactTransitionGroup>              </div>         );     } }); ```  Could you tell me where the problem is?",
        "human_words": "  Could you tell me where the problem is?",
        "human_words_regrex": " Could you tell me where the problem is?",
        "human_words_stopwords_removal_lemmatization": "could tell problem ?",
        "title_stopwords_removal_lemmatization": "transitiongroup"
    },
    {
        "issue_id": 144826084,
        "title": "Support question - Serverside rendering only, why re-render on client?",
        "label": [
            "Type: Question"
        ],
        "date": "2016-03-31T08:31:52Z",
        "status": "closed",
        "description": "Alright, kind of a React newb but React is not following the principle of least surprises with this one so I have to ask.\n\nOur team only really wants serverside rendering for a particular project. We don't need to do much special on the client.\n\nHowever, as far as I have learned, you need to have a reference to the same React components on the client as you do on the server in order to actually get dynamic behavior (events are bound etc) on the client.\n\nMy question is, if we have a `<div id='react-root'> </div>`\n\nwhy isn't React setup so that on the front-end we could just call:\n\n``` js\nReactDOM.render(document.getElementById('react-root');\n```\n\n(without the React component first argument.)\n\nDoesn't / couldn't React have enough info to go off of already, so as to not need an actual reference to the React component on the front-end as well? As long as React on the front-end has a reference to the root DOM node, couldn't / shouldn't that be enough?\n\nThe whole thing where you have to re-render on the client is kinda unexpected. I am sure I am missing something, or there must be some good reason why the lib works this way, I just don't know and want to know which is why I am writing this. Thanks.\n",
        "remove_template_description": "Alright, kind of a React newb but React is not following the principle of least surprises with this one so I have to ask.  Our team only really wants serverside rendering for a particular project. We don't need to do much special on the client.  However, as far as I have learned, you need to have a reference to the same React components on the client as you do on the server in order to actually get dynamic behavior (events are bound etc) on the client.  My question is, if we have a `<div id='react-root'> </div>`  why isn't React setup so that on the front-end we could just call:  ``` js ReactDOM.render(document.getElementById('react-root'); ```  (without the React component first argument.)  Doesn't / couldn't React have enough info to go off of already, so as to not need an actual reference to the React component on the front-end as well? As long as React on the front-end has a reference to the root DOM node, couldn't / shouldn't that be enough?  The whole thing where you have to re-render on the client is kinda unexpected. I am sure I am missing something, or there must be some good reason why the lib works this way, I just don't know and want to know which is why I am writing this. Thanks.",
        "human_words": "Alright, kind of a React newb but React is not following the principle of least surprises with this one so I have to ask.  Our team only really wants serverside rendering for a particular project. We don't need to do much special on the client.  However, as far as I have learned, you need to have a reference to the same React components on the client as you do on the server in order to actually get dynamic behavior (events are bound etc) on the client.  My question is, if we have a `<div id='react-root'> </div>`  why isn't React setup so that on the front-end we could just call:    (without the React component first argument.)  Doesn't / couldn't React have enough info to go off of already, so as to not need an actual reference to the React component on the front-end as well? As long as React on the front-end has a reference to the root DOM node, couldn't / shouldn't that be enough?  The whole thing where you have to re-render on the client is kinda unexpected. I am sure I am missing something, or there must be some good reason why the lib works this way, I just don't know and want to know which is why I am writing this. Thanks.",
        "human_words_regrex": "Alright, kind of a React newb but React is not following the principle of least surprises with this one so I have to ask. Our team only really wants serverside rendering for a particular project. We don't need to do much special on the client. However, as far as I have learned, you need to have a reference to the same React components on the client as you do on the server in order to actually get dynamic behavior (events are bound etc) on the client. My question is, if we have a ` ` why isn't React setup so that on the front-end we could just call: (without the React component first argument.) Doesn't / couldn't React have enough info to go off of already, so as to not need an actual reference to the React component on the front-end as well? As long as React on the front-end has a reference to the root DOM node, couldn't / shouldn't that be enough? The whole thing where you have to re-render on the client is kinda unexpected. I am sure I am missing something, or there must be some good reason why the lib works this way, I just don't know and want to know which is why I am writing this. Thanks.",
        "human_words_stopwords_removal_lemmatization": "alright , kind react newb react following principle least surprise one ask . team really want serverside rendering particular project . n't need much special client . however , far learned , need reference react component client server order actually get dynamic behavior ( event bound etc ) client . question , ` ` n't react setup front-end could call : ( without react component first argument . ) n't / could n't react enough info go already , need actual reference react component front-end well ? long react front-end reference root dom node , could n't / n't enough ? whole thing re-render client kinda unexpected . sure missing something , must good reason lib work way , n't know want know writing . thanks .",
        "title_stopwords_removal_lemmatization": "support question - serverside rendering , re-render client ?"
    },
    {
        "issue_id": 144775942,
        "title": "TestUtils.renderIntoDocument() and lifecycle",
        "label": [
            "Type: Question"
        ],
        "date": "2016-03-31T03:08:13Z",
        "status": "closed",
        "description": "Hi everybody,\r\n\r\nThere something I don't understand in the TestUtils library.\r\n\r\nI want to test a react component with TestUtils.\r\nThe lifecycle of my component is \r\n\r\n```getInitialState\r\ncomponentWillMount\r\nrender\r\ncomponentDidMount\r\ncomponentWillReceiveProps\r\nshouldComponentUpdate\r\ncomponentWillUpdate\r\nrender\r\ncomponentDidUpdate\r\ncomponentWillUnmount\r\n```\r\n\r\nIf I use TestUtils.renderIntoDocument, these methods will never be call:\r\n\r\n```componentWillReceiveProps\r\nshouldComponentUpdate\r\ncomponentWillUpdate\r\ncomponentDidUpdate\r\n```\r\n\r\nbecause a new container is recreated to each call to renderIntoDocument.\r\n\r\n```renderIntoDocument: function( aReactElement) {\r\n   var div = document.createElement('div');\r\n   return ReactDOM.render( aReactElements, div);\r\n}\r\n```\r\n\r\nSee my fiddle: `https://jsfiddle.net/JacquesBonet/k0tyztzc/`\r\n\r\nSo I don't understand why you suggest to use `renderIntoDocument` method to test reacts component?\r\n\r\nI think its better to use method likes: \r\n\r\n```\r\n// create the container\r\nlet container = document.createElement('div');\r\n// call render method\r\nlet component = ReactDOM.render( reactElement, container);\r\n```\r\n\r\nto test react components.\r\n\r\nSee fiddle: https://jsfiddle.net/JacquesBonet/k0tyztzc/\r\n\r\nYour opinion?\r\n\r\nBest regards.\r\n",
        "remove_template_description": "Hi everybody,    There something I don't understand in the TestUtils library.    I want to test a react component with TestUtils.  The lifecycle of my component is     ```getInitialState  componentWillMount  render  componentDidMount  componentWillReceiveProps  shouldComponentUpdate  componentWillUpdate  render  componentDidUpdate  componentWillUnmount  ```    If I use TestUtils.renderIntoDocument, these methods will never be call:    ```componentWillReceiveProps  shouldComponentUpdate  componentWillUpdate  componentDidUpdate  ```    because a new container is recreated to each call to renderIntoDocument.    ```renderIntoDocument: function( aReactElement) {     var div = document.createElement('div');     return ReactDOM.render( aReactElements, div);  }  ```    See my fiddle: `https://jsfiddle.net/JacquesBonet/k0tyztzc/`    So I don't understand why you suggest to use `renderIntoDocument` method to test reacts component?    I think its better to use method likes:     ```  // create the container  let container = document.createElement('div');  // call render method  let component = ReactDOM.render( reactElement, container);  ```    to test react components.    See fiddle: https://jsfiddle.net/JacquesBonet/k0tyztzc/    Your opinion?    Best regards.",
        "human_words": "Hi everybody,    There something I don't understand in the TestUtils library.    I want to test a react component with TestUtils.  The lifecycle of my component is         If I use TestUtils.renderIntoDocument, these methods will never be call:        because a new container is recreated to each call to renderIntoDocument.        See my fiddle: `https://jsfiddle.net/JacquesBonet/k0tyztzc/`    So I don't understand why you suggest to use `renderIntoDocument` method to test reacts component?    I think its better to use method likes:         to test react components.    See fiddle: https://jsfiddle.net/JacquesBonet/k0tyztzc/    Your opinion?    Best regards.",
        "human_words_regrex": "Hi everybody, There something I don't understand in the TestUtils library. I want to test a react component with TestUtils. The lifecycle of my component is If I use TestUtils.renderIntoDocument, these methods will never be call: because a new container is recreated to each call to renderIntoDocument. See my fiddle: ` So I don't understand why you suggest to use `renderIntoDocument` method to test reacts component? I think its better to use method likes: to test react components. See fiddle:  Your opinion? Best regards.",
        "human_words_stopwords_removal_lemmatization": "hi everybody , something n't understand testutils library . want test react component testutils . lifecycle component use testutils.renderintodocument , method never call : new container recreated call renderintodocument . see fiddle : ` n't understand suggest use ` renderintodocument ` method test reacts component ? think better use method like : test react component . see fiddle : opinion ? best regard .",
        "title_stopwords_removal_lemmatization": "testutils.renderintodocument ( ) lifecycle"
    },
    {
        "issue_id": 143612400,
        "title": "Nested properties issue",
        "label": [
            "Type: Question"
        ],
        "date": "2016-03-25T22:08:09Z",
        "status": "closed",
        "description": "Hello.\nI have the code:\n\n``` javascript\nclass Component extends React.Component\n{\n  render()\n  {\n    this.props.nested.prop = this.props.parse.nested.prop;\n    return <div>Component</div>;\n  }\n  componentDidMount()\n  {\n    console.log(this.props.nested.prop);\n  }\n}\nComponent.defaultProps = \n{\n  nested:\n  {\n    prop: \"default\"\n  }\n};\n\nconst obj1 = \n{\n  nested:\n  {\n    prop: \"obj1\"\n  }\n};\nconst obj2 = \n{\n  nested:\n  {\n    prop: \"obj2\"\n  }\n};\n\nclass Application extends React.Component\n{\n  render()\n  {\n    return (\n     <div>\n        <Component parse={obj1}/>\n        <Component parse={obj2}/>\n    </div>\n    );\n  }\n}\n\nReact.render(<Application />, document.getElementById('app'));\n//console output:\n//\"obj2\"\n//\"obj2\"\n```\n\nWhy do I get 1 variable reference for 2 separate components instead of 2 instanses of `nested.prop` for every component?\nWhy `this.props` saves only last setted value for **all instanses** of the component **after mounting**? Is it a normal behavior?\nI think the correct behavior is having different property values for different instanses.\n\nP.S. I tested this code [here](http://codepen.io/voronar/pen/mPwebK).\n",
        "remove_template_description": "Hello. I have the code:  ``` javascript class Component extends React.Component {   render()   {     this.props.nested.prop = this.props.parse.nested.prop;     return <div>Component</div>;   }   componentDidMount()   {     console.log(this.props.nested.prop);   } } Component.defaultProps =  {   nested:   {     prop: \"default\"   } };  const obj1 =  {   nested:   {     prop: \"obj1\"   } }; const obj2 =  {   nested:   {     prop: \"obj2\"   } };  class Application extends React.Component {   render()   {     return (      <div>         <Component parse={obj1}/>         <Component parse={obj2}/>     </div>     );   } }  React.render(<Application />, document.getElementById('app')); //console output: //\"obj2\" //\"obj2\" ```  Why do I get 1 variable reference for 2 separate components instead of 2 instanses of `nested.prop` for every component? Why `this.props` saves only last setted value for **all instanses** of the component **after mounting**? Is it a normal behavior? I think the correct behavior is having different property values for different instanses.  P.S. I tested this code [here](http://codepen.io/voronar/pen/mPwebK).",
        "human_words": "Hello. I have the code:    Why do I get 1 variable reference for 2 separate components instead of 2 instanses of `nested.prop` for every component? Why `this.props` saves only last setted value for **all instanses** of the component **after mounting**? Is it a normal behavior? I think the correct behavior is having different property values for different instanses.  P.S. I tested this code [here](http://codepen.io/voronar/pen/mPwebK).",
        "human_words_regrex": "Hello. I have the code: Why do I get 1 variable reference for 2 separate components instead of 2 instanses of `nested.prop` for every component? Why `this.props` saves only last setted value for **all instanses** of the component **after mounting**? Is it a normal behavior? I think the correct behavior is having different property values for different instanses. P.S. I tested this code .",
        "human_words_stopwords_removal_lemmatization": "hello . code : get 1 variable reference 2 separate component instead 2 instanses ` nested.prop ` every component ? ` this.props ` save last setted value * * instanses * * component * * mounting * * ? normal behavior ? think correct behavior different property value different instanses . p.s . tested code .",
        "title_stopwords_removal_lemmatization": "nested property issue"
    },
    {
        "issue_id": 140421677,
        "title": "How to use life cycle hooks for animation using react low level API",
        "label": [
            "Type: Question"
        ],
        "date": "2016-03-12T22:13:30Z",
        "status": "closed",
        "description": "I need to work around a bit of animation in react for that i am using the low level API of react i.e. React Transition Group. This i want to use because it provides me the life cycle hooks like componentWillEnter(callback), componentWillLeave(callback). But i am struck in the problem how to use those life cycle hooks. Herre is mine code\n\n```\nexport default class App extends Component {\n  componentWillLeave(callback) {\n    console.log('Component is leaving');\n  }\n  componentWillEnter(callback) {\n    console.log('component is entering')\n  }\n  render() {\n    const styles = require('./App.scss');\n    return (\n      <div className={styles.app}>\n          <ReactTransitionGroup transitionName=\"example\">\n            <div key={this.props.location.pathname}>\n              {this.props.children}\n            </div>\n          </ReactTransitionGroup>\n      </div>\n    );\n  }\n}\n\n```\n\nBut the life cycle hook function- componentWillEnter and componentWillLeave  are not getting called. Please let me know what mistake i am making\n",
        "remove_template_description": "I need to work around a bit of animation in react for that i am using the low level API of react i.e. React Transition Group. This i want to use because it provides me the life cycle hooks like componentWillEnter(callback), componentWillLeave(callback). But i am struck in the problem how to use those life cycle hooks. Herre is mine code  ``` export default class App extends Component {   componentWillLeave(callback) {     console.log('Component is leaving');   }   componentWillEnter(callback) {     console.log('component is entering')   }   render() {     const styles = require('./App.scss');     return (       <div className={styles.app}>           <ReactTransitionGroup transitionName=\"example\">             <div key={this.props.location.pathname}>               {this.props.children}             </div>           </ReactTransitionGroup>       </div>     );   } }  ```  But the life cycle hook function- componentWillEnter and componentWillLeave  are not getting called. Please let me know what mistake i am making",
        "human_words": "I need to work around a bit of animation in react for that i am using the low level API of react i.e. React Transition Group. This i want to use because it provides me the life cycle hooks like componentWillEnter(callback), componentWillLeave(callback). But i am struck in the problem how to use those life cycle hooks. Herre is mine code    But the life cycle hook function- componentWillEnter and componentWillLeave  are not getting called. Please let me know what mistake i am making",
        "human_words_regrex": "I need to work around a bit of animation in react for that i am using the low level API of react i.e. React Transition Group. This i want to use because it provides me the life cycle hooks like componentWillEnter(callback), componentWillLeave(callback). But i am struck in the problem how to use those life cycle hooks. Herre is mine code But the life cycle hook function- componentWillEnter and componentWillLeave are not getting called. Please let me know what mistake i am making",
        "human_words_stopwords_removal_lemmatization": "need work around bit animation react using low level api react i.e . react transition group . want use provides life cycle hook like componentwillenter ( callback ) , componentwillleave ( callback ) . struck problem use life cycle hook . herre mine code life cycle hook function- componentwillenter componentwillleave getting called . please let know mistake making",
        "title_stopwords_removal_lemmatization": "use life cycle hook animation using react low level api"
    },
    {
        "issue_id": 139119882,
        "title": "Pre-binding is problematic, binding causes performance issues",
        "label": [
            "Type: Question"
        ],
        "date": "2016-03-07T22:57:46Z",
        "status": "closed",
        "description": "Per this article: https://medium.com/@esamatti/react-js-pure-render-performance-anti-pattern-fb88c101332f\n\nI posted this in StackOverflow: http://stackoverflow.com/questions/35855490/react-and-pre-binding-functions-for-performance\n\nI feel like I'm in a catch-22. If I use `bind` on event handlers or the `() => { }` pattern, there could be performance issues with re-rendering. If I use the method described in the article above, then I can't pass arguments to a single DRY function, I have to create several functions to handle different scenarios (as in one of the answers in the SO post, with `setEmail`, `setPassword`).\n\nWhat's the solution here?\n",
        "remove_template_description": "Per this article: https://medium.com/@esamatti/react-js-pure-render-performance-anti-pattern-fb88c101332f  I posted this in StackOverflow: http://stackoverflow.com/questions/35855490/react-and-pre-binding-functions-for-performance  I feel like I'm in a catch-22. If I use `bind` on event handlers or the `() => { }` pattern, there could be performance issues with re-rendering. If I use the method described in the article above, then I can't pass arguments to a single DRY function, I have to create several functions to handle different scenarios (as in one of the answers in the SO post, with `setEmail`, `setPassword`).  What's the solution here?",
        "human_words": "Per this article: https://medium.com/@esamatti/react-js-pure-render-performance-anti-pattern-fb88c101332f  I posted this in StackOverflow: http://stackoverflow.com/questions/35855490/react-and-pre-binding-functions-for-performance  I feel like I'm in a catch-22. If I use `bind` on event handlers or the `() => { }` pattern, there could be performance issues with re-rendering. If I use the method described in the article above, then I can't pass arguments to a single DRY function, I have to create several functions to handle different scenarios (as in one of the answers in the SO post, with `setEmail`, `setPassword`).  What's the solution here?",
        "human_words_regrex": "Per this article:  I posted this in StackOverflow:  I feel like I'm in a catch-22. If I use `bind` on event handlers or the `() => { }` pattern, there could be performance issues with re-rendering. If I use the method described in the article above, then I can't pass arguments to a single DRY function, I have to create several functions to handle different scenarios (as in one of the answers in the SO post, with `setEmail`, `setPassword`). What's the solution here?",
        "human_words_stopwords_removal_lemmatization": "per article : posted stackoverflow : feel like 'm catch-22 . use ` bind ` event handler ` ( ) = > { } ` pattern , could performance issue re-rendering . use method described article , ca n't pas argument single dry function , create several function handle different scenario ( one answer post , ` setemail ` , ` setpassword ` ) . 's solution ?",
        "title_stopwords_removal_lemmatization": "pre-binding problematic , binding cause performance issue"
    },
    {
        "issue_id": 138439180,
        "title": "title tab value rendering using react",
        "label": [
            "Type: Question"
        ],
        "date": "2016-03-04T10:29:04Z",
        "status": "closed",
        "description": "Hello React, \n\n<pre>\nIs their a way to show rendered element's value in title.\nlike, we have:-\n\nvar $title = &lt;span>my title&lt;/span>\n&lt;div title={$title}>my value&lt;/div>\n\nOUTPUT should be like this:\n&lt;div title='my title'>my value&lt;/div>\n</pre>\n",
        "remove_template_description": "Hello React,   <pre> Is their a way to show rendered element's value in title. like, we have:-  var $title = &lt;span>my title&lt;/span> &lt;div title={$title}>my value&lt;/div>  OUTPUT should be like this: &lt;div title='my title'>my value&lt;/div> </pre>",
        "human_words": "Hello React,   <pre> Is their a way to show rendered element's value in title. like, we have:-  var $title = &lt;span>my title&lt;/span> &lt;div title={$title}>my value&lt;/div>  OUTPUT should be like this: &lt;div title='my title'>my value&lt;/div> </pre>",
        "human_words_regrex": "Hello React,  Is their a way to show rendered element's value in title. like, we have:- var $title = &lt;span>my title&lt;/span> &lt;div title={$title}>my value&lt;/div> OUTPUT should be like this: &lt;div title='my title'>my value&lt;/div> ",
        "human_words_stopwords_removal_lemmatization": "hello react , way show rendered element 's value title . like , : - var $ title = & lt ; span > title & lt ; /span > & lt ; div title= { $ title } > value & lt ; /div > output like : & lt ; div title='my title ' > value & lt ; /div >",
        "title_stopwords_removal_lemmatization": "title tab value rendering using react"
    },
    {
        "issue_id": 137301531,
        "title": "Is there any way to update React Child Components ",
        "label": [
            "Type: Question"
        ],
        "date": "2016-02-29T16:29:06Z",
        "status": "closed",
        "description": "Parent element \n\n```\nclass ReactWizard extends Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      childItems: [],\n      step: 0,\n      styleClass:null,\n      category: null,\n      data: {}\n    };\n    this._divStyle = this._divStyle.bind(this)\n    this._changeStep = this._changeStep.bind(this)\n  }\ncomponentWillMount(){\n    var wizardItems = [\n      <ReactWizardItem.start data={this.state.data}/>,\n      <ReactWizardItem.center data={this.state.data}/>,\n      <ReactWizardItem.finish data={this.state.data}/>\n    ];\n    this.setState({\n      childItems: wizardItems\n    })\n  }\nrender(){\nif(this.state.childItems.length > 0){\n      childItems = this.state.childItems.map((value, index) => {\n        return (\n          <div key={index} className=\"wizard-item\" data-wizard={index}>\n            {value}\n          </div>\n        )\n      })\n    }\n    var currentStep = this.state.step;\n    return(\n      <div className=\"wizard-outer\">\n        <div className=\"wizard-wrapper clearfix\" style={this.state.styleClass} id=\"wizardBox\">\n          {childItems}\n        </div>\n        <div className=\"wizard-nav\">\n          <a href=\"#\" className={\"btn  pull-left \" + currentButton.prevClass} onClick={this._prev.bind(this,currentStep)}>{currentButton.prev}</a>\n          <a href=\"#\" className={\"btn  pull-right \" + currentButton.nextClass} onClick={this._next.bind(this,currentStep)}>{currentButton.next}</a>\n        </div>\n      </div>\n    )\n  }\n}\n```\n\nChild component \n\n```\nclass ReactWizardItemCenter extends Component{\n  constructor(props){\n    super(props)\n  }\n  componentWillReceiveProps(nextProps){\n    console.log(nextProps)\n    console.log(\"Props updated\")\n  }\n  componentWillUpdate(){\n    console.log(\"Run if state changes\")\n  }\n  render(){\n    console.log(\"Render\")\n    return(\n      <div className=\"wizard\">\n        <div className=\"form-group\">\n          <label htmlFor=\"auto-video-subcategory\" className=\"control-label\">Subcategory</label>\n          <select type=\"text\" className=\"form-control\" id=\"auto-video-subcategory\" name=\"subcategory_id\">\n            <option value=\"\">--Select--</option>\n          </select>\n        </div>\n      </div>\n    )\n  }\n}\nReactWizardItem.center = ReactWizardItemCenter;\n```\n\nChild elements not  showing  anything on componetWillRecieveProps and componentDidUpdate.\n\nThis code working well when i change code\n\n```\nreturn(\n      <div className=\"wizard-outer\">\n        <div className=\"wizard-wrapper clearfix\" style={this.state.styleClass} id=\"wizardBox\">\n          <div key=\"0\" className=\"wizard-item\" data-wizard=\"0\">\n          <ReactWizardItem.start data={this.state.data}/>\n          </div>\n          <div key=\"1\" className=\"wizard-item\" data-wizard=\"1\">\n          <ReactWizardItem.center data={this.state.data}/>\n          </div>\n          <div key=\"2\" className=\"wizard-item\" data-wizard=\"2\">\n          <ReactWizardItem.finish data={this.state.data}/>\n          </div>\n        </div>\n        <div className=\"wizard-nav\">\n          <a href=\"#\" className={\"btn  pull-left \" + currentButton.prevClass} onClick={this._prev.bind(this,currentStep)}>{currentButton.prev}</a>\n          <a href=\"#\" className={\"btn  pull-right \" + currentButton.nextClass} onClick={this._next.bind(this,currentStep)}>{currentButton.next}</a>\n        </div>\n      </div>\n    )\n```\n\nI like to use first one, This code is to make a wizard like content.\n\nThanks in advance \n",
        "remove_template_description": "Parent element   ``` class ReactWizard extends Component{   constructor(props){     super(props);     this.state = {       childItems: [],       step: 0,       styleClass:null,       category: null,       data: {}     };     this._divStyle = this._divStyle.bind(this)     this._changeStep = this._changeStep.bind(this)   } componentWillMount(){     var wizardItems = [       <ReactWizardItem.start data={this.state.data}/>,       <ReactWizardItem.center data={this.state.data}/>,       <ReactWizardItem.finish data={this.state.data}/>     ];     this.setState({       childItems: wizardItems     })   } render(){ if(this.state.childItems.length > 0){       childItems = this.state.childItems.map((value, index) => {         return (           <div key={index} className=\"wizard-item\" data-wizard={index}>             {value}           </div>         )       })     }     var currentStep = this.state.step;     return(       <div className=\"wizard-outer\">         <div className=\"wizard-wrapper clearfix\" style={this.state.styleClass} id=\"wizardBox\">           {childItems}         </div>         <div className=\"wizard-nav\">           <a href=\"#\" className={\"btn  pull-left \" + currentButton.prevClass} onClick={this._prev.bind(this,currentStep)}>{currentButton.prev}</a>           <a href=\"#\" className={\"btn  pull-right \" + currentButton.nextClass} onClick={this._next.bind(this,currentStep)}>{currentButton.next}</a>         </div>       </div>     )   } } ```  Child component   ``` class ReactWizardItemCenter extends Component{   constructor(props){     super(props)   }   componentWillReceiveProps(nextProps){     console.log(nextProps)     console.log(\"Props updated\")   }   componentWillUpdate(){     console.log(\"Run if state changes\")   }   render(){     console.log(\"Render\")     return(       <div className=\"wizard\">         <div className=\"form-group\">           <label htmlFor=\"auto-video-subcategory\" className=\"control-label\">Subcategory</label>           <select type=\"text\" className=\"form-control\" id=\"auto-video-subcategory\" name=\"subcategory_id\">             <option value=\"\">--Select--</option>           </select>         </div>       </div>     )   } } ReactWizardItem.center = ReactWizardItemCenter; ```  Child elements not  showing  anything on componetWillRecieveProps and componentDidUpdate.  This code working well when i change code  ``` return(       <div className=\"wizard-outer\">         <div className=\"wizard-wrapper clearfix\" style={this.state.styleClass} id=\"wizardBox\">           <div key=\"0\" className=\"wizard-item\" data-wizard=\"0\">           <ReactWizardItem.start data={this.state.data}/>           </div>           <div key=\"1\" className=\"wizard-item\" data-wizard=\"1\">           <ReactWizardItem.center data={this.state.data}/>           </div>           <div key=\"2\" className=\"wizard-item\" data-wizard=\"2\">           <ReactWizardItem.finish data={this.state.data}/>           </div>         </div>         <div className=\"wizard-nav\">           <a href=\"#\" className={\"btn  pull-left \" + currentButton.prevClass} onClick={this._prev.bind(this,currentStep)}>{currentButton.prev}</a>           <a href=\"#\" className={\"btn  pull-right \" + currentButton.nextClass} onClick={this._next.bind(this,currentStep)}>{currentButton.next}</a>         </div>       </div>     ) ```  I like to use first one, This code is to make a wizard like content.  Thanks in advance",
        "human_words": "Parent element     Child component     Child elements not  showing  anything on componetWillRecieveProps and componentDidUpdate.  This code working well when i change code    I like to use first one, This code is to make a wizard like content.  Thanks in advance",
        "human_words_regrex": "Parent element Child component Child elements not showing anything on componetWillRecieveProps and componentDidUpdate. This code working well when i change code I like to use first one, This code is to make a wizard like content. Thanks in advance",
        "human_words_stopwords_removal_lemmatization": "parent element child component child element showing anything componetwillrecieveprops componentdidupdate . code working well change code like use first one , code make wizard like content . thanks advance",
        "title_stopwords_removal_lemmatization": "way update react child component"
    },
    {
        "issue_id": 137270054,
        "title": "Componen render but not call Lifecycle functions",
        "label": [
            "Type: Question",
            "Status: Unconfirmed"
        ],
        "date": "2016-02-29T14:30:30Z",
        "status": "closed",
        "description": "I have a project that creates a HTML layout based on json file\n**On the 4th and 3th step, some components are not call lifecycle functions**\n# For Example\n### Component code\n\n![Component code](http://i.stack.imgur.com/F9KGS.jpg) \nBaseNode \u2013 that is empty class\n### Rendering result\n\n![Rendering result](http://i.stack.imgur.com/AD9oc.jpg) \n### Console output\n\n![Console output](http://i.stack.imgur.com/k49KV.jpg)\n\n**Mini project with reproducible error:** [project](https://github.com/kirsanv43/ReactJsIssue)\n",
        "remove_template_description": "I have a project that creates a HTML layout based on json file **On the 4th and 3th step, some components are not call lifecycle functions** # For Example ### Component code  ![Component code](http://i.stack.imgur.com/F9KGS.jpg)  BaseNode \u2013 that is empty class ### Rendering result  ![Rendering result](http://i.stack.imgur.com/AD9oc.jpg)  ### Console output  ![Console output](http://i.stack.imgur.com/k49KV.jpg)  **Mini project with reproducible error:** [project](https://github.com/kirsanv43/ReactJsIssue)",
        "human_words": "I have a project that creates a HTML layout based on json file **On the 4th and 3th step, some components are not call lifecycle functions** # For Example ### Component code  ![Component code](http://i.stack.imgur.com/F9KGS.jpg)  BaseNode \u2013 that is empty class ### Rendering result  ![Rendering result](http://i.stack.imgur.com/AD9oc.jpg)  ### Console output  ![Console output](http://i.stack.imgur.com/k49KV.jpg)  **Mini project with reproducible error:** [project](https://github.com/kirsanv43/ReactJsIssue)",
        "human_words_regrex": "I have a project that creates a HTML layout based on json file **On the 4th and 3th step, some components are not call lifecycle functions** # For Example ### Component code ! BaseNode \u2013 that is empty class ### Rendering result ! ### Console output ! **Mini project with reproducible error:** ",
        "human_words_stopwords_removal_lemmatization": "project creates html layout based json file * * 4th 3th step , component call lifecycle function * * # example # # # component code ! basenode \u2013 empty class # # # rendering result ! # # # console output ! * * mini project reproducible error : * *",
        "title_stopwords_removal_lemmatization": "componen render call lifecycle function"
    },
    {
        "issue_id": 136232202,
        "title": "cloneElement vs createElement",
        "label": [
            "Type: Question"
        ],
        "date": "2016-02-25T00:14:45Z",
        "status": "closed",
        "description": "Can anyone let me know if using cloneElement (on exist element instance) or createElement (on react Element class) which one is better in term of performance?\nSometimes cloning something is faster than create new instance. Please let me know. Thanks\n",
        "remove_template_description": "Can anyone let me know if using cloneElement (on exist element instance) or createElement (on react Element class) which one is better in term of performance? Sometimes cloning something is faster than create new instance. Please let me know. Thanks",
        "human_words": "Can anyone let me know if using cloneElement (on exist element instance) or createElement (on react Element class) which one is better in term of performance? Sometimes cloning something is faster than create new instance. Please let me know. Thanks",
        "human_words_regrex": "Can anyone let me know if using cloneElement (on exist element instance) or createElement (on react Element class) which one is better in term of performance? Sometimes cloning something is faster than create new instance. Please let me know. Thanks",
        "human_words_stopwords_removal_lemmatization": "anyone let know using cloneelement ( exist element instance ) createelement ( react element class ) one better term performance ? sometimes cloning something faster create new instance . please let know . thanks",
        "title_stopwords_removal_lemmatization": "cloneelement v createelement"
    },
    {
        "issue_id": 136081280,
        "title": "How I can test a swipe with testUtils?",
        "label": [
            "Type: Question"
        ],
        "date": "2016-02-24T14:44:28Z",
        "status": "closed",
        "description": "Anyone of you knows how I can simulate a swipe using testUtils event simulation?\n",
        "remove_template_description": "Anyone of you knows how I can simulate a swipe using testUtils event simulation?",
        "human_words": "Anyone of you knows how I can simulate a swipe using testUtils event simulation?",
        "human_words_regrex": "Anyone of you knows how I can simulate a swipe using testUtils event simulation?",
        "human_words_stopwords_removal_lemmatization": "anyone know simulate swipe using testutils event simulation ?",
        "title_stopwords_removal_lemmatization": "test swipe testutils ?"
    },
    {
        "issue_id": 135153083,
        "title": "Frameworks?",
        "label": [
            "Type: Question"
        ],
        "date": "2016-02-21T03:22:11Z",
        "status": "closed",
        "description": "Does facebook recommend a good backend to go with react? Maybe something that already has login page features built in?\n",
        "remove_template_description": "Does facebook recommend a good backend to go with react? Maybe something that already has login page features built in?",
        "human_words": "Does facebook recommend a good backend to go with react? Maybe something that already has login page features built in?",
        "human_words_regrex": "Does facebook recommend a good backend to go with react? Maybe something that already has login page features built in?",
        "human_words_stopwords_removal_lemmatization": "facebook recommend good backend go react ? maybe something already login page feature built ?",
        "title_stopwords_removal_lemmatization": "framework ?"
    },
    {
        "issue_id": 135029209,
        "title": "ReactJS setState bug/my fault ",
        "label": [
            "Type: Question"
        ],
        "date": "2016-02-20T03:52:33Z",
        "status": "closed",
        "description": "Hello, guys!\n\nI made an exemple here to see exactly what I'm talking about:\nhttp://codepen.io/mga/pen/bEyZox\n\nI used context for the \"storeInput\" function because in my app it passes through more than one component.\n\nSorry for the short message but I don't have the best writing english skills and it's more easier for me to show you. If you don't understand something please let me know. Thanks!\n",
        "remove_template_description": "Hello, guys!  I made an exemple here to see exactly what I'm talking about: http://codepen.io/mga/pen/bEyZox  I used context for the \"storeInput\" function because in my app it passes through more than one component.  Sorry for the short message but I don't have the best writing english skills and it's more easier for me to show you. If you don't understand something please let me know. Thanks!",
        "human_words": "Hello, guys!  I made an exemple here to see exactly what I'm talking about: http://codepen.io/mga/pen/bEyZox  I used context for the \"storeInput\" function because in my app it passes through more than one component.  Sorry for the short message but I don't have the best writing english skills and it's more easier for me to show you. If you don't understand something please let me know. Thanks!",
        "human_words_regrex": "Hello, guys! I made an exemple here to see exactly what I'm talking about:  I used context for the \"storeInput\" function because in my app it passes through more than one component. Sorry for the short message but I don't have the best writing english skills and it's more easier for me to show you. If you don't understand something please let me know. Thanks!",
        "human_words_stopwords_removal_lemmatization": "hello , guy ! made exemple see exactly 'm talking : used context `` storeinput '' function app pass one component . sorry short message n't best writing english skill 's easier show . n't understand something please let know . thanks !",
        "title_stopwords_removal_lemmatization": "reactjs setstate bug/my fault"
    },
    {
        "issue_id": 134917766,
        "title": "why this.props.children cannot re-render?",
        "label": [
            "Type: Question"
        ],
        "date": "2016-02-19T17:04:31Z",
        "status": "closed",
        "description": "for example:\n\n``` js\n\nclass Parent extends React.Component {\n componentDidMount() {\n  setTimeout(() => { this.forceUpdate();}, 1000);\n  }\n\n  render() {\n   return <div>{this.props.children}</div>;\n  }\n}\n\nclass Child extends React.Component {\n  render() { return <div>{this.props.random}</div>}\n}\n\nclass App extends React.Component {\n  render() {\n   return (\n     <Parent><Child random={Math.random()}/></Parent>\n   );\n  }\n}\n\n```\n",
        "remove_template_description": "for example:  ``` js  class Parent extends React.Component {  componentDidMount() {   setTimeout(() => { this.forceUpdate();}, 1000);   }    render() {    return <div>{this.props.children}</div>;   } }  class Child extends React.Component {   render() { return <div>{this.props.random}</div>} }  class App extends React.Component {   render() {    return (      <Parent><Child random={Math.random()}/></Parent>    );   } }  ```",
        "human_words": "for example:  ",
        "human_words_regrex": "for example: ",
        "human_words_stopwords_removal_lemmatization": "example :",
        "title_stopwords_removal_lemmatization": "this.props.children re-render ?"
    },
    {
        "issue_id": 134626602,
        "title": "\"Dynamic\" propTypes",
        "label": [
            "Type: Question"
        ],
        "date": "2016-02-18T16:21:55Z",
        "status": "closed",
        "description": "Hi,\n\nI am trying to construct a mixin which takes a dev-defined component specification and constructs its prop-types + defaults accordingly. I am trying to do something like this:\n\n```\nvar _generatePropTypes = function(customData) {\n      //do the process here\n}\nvar MyMixin = {\n      propTypes : _generatePropTypes(this.getCustomData()),\n      getCustomData : function() { return this.customData;}\n}\n```\n\nThe above code does not work. Is there anyway I can do something similar?\n\nMany thanks!\n",
        "remove_template_description": "Hi,  I am trying to construct a mixin which takes a dev-defined component specification and constructs its prop-types + defaults accordingly. I am trying to do something like this:  ``` var _generatePropTypes = function(customData) {       //do the process here } var MyMixin = {       propTypes : _generatePropTypes(this.getCustomData()),       getCustomData : function() { return this.customData;} } ```  The above code does not work. Is there anyway I can do something similar?  Many thanks!",
        "human_words": "Hi,  I am trying to construct a mixin which takes a dev-defined component specification and constructs its prop-types + defaults accordingly. I am trying to do something like this:    The above code does not work. Is there anyway I can do something similar?  Many thanks!",
        "human_words_regrex": "Hi, I am trying to construct a mixin which takes a dev-defined component specification and constructs its prop-types + defaults accordingly. I am trying to do something like this: The above code does not work. Is there anyway I can do something similar? Many thanks!",
        "human_words_stopwords_removal_lemmatization": "hi , trying construct mixin take dev-defined component specification construct prop-types + default accordingly . trying something like : code work . anyway something similar ? many thanks !",
        "title_stopwords_removal_lemmatization": "`` dynamic '' proptypes"
    },
    {
        "issue_id": 134288135,
        "title": "Performance for Unmounting & Mounting a component vs hiding it",
        "label": [
            "Type: Question"
        ],
        "date": "2016-02-17T14:02:53Z",
        "status": "closed",
        "description": "Is there a preferred method or performance benefit to hiding a node in the dom via css vs mounting and unmounting it?\n\nFor example, I have a render function with the following code:\n\n``` javascript\nconst {map} = this.context;\nlet selectedFeature;\nlet content;\n\n//- Infer the selected feature from the info window\nif (map.infoWindow && map.infoWindow.getSelectedFeature()) {\n  selectedFeature = map.infoWindow.getSelectedFeature();\n}\n\nif (selectedFeature !== undefined) {\n  content = [<Analysis selectedFeature={selectedFeature} />];\n} else {\n  content = [<Instructions />, <Tools />];\n}\n\nreturn (\n  <div className='analysis-panel custom-scroll'>\n    {content}\n  </div>\n);\n```\n\nand I am wondering is this is preferred over something like this:\n\n``` javascript\nreturn (\n  <div className='analysis-panel custom-scroll'>\n    <div className={`${selectedFeature === undefined : 'hidden' : ''}`}>\n        <Analysis selectedFeature={selectedFeature} />\n    </div>\n    <div className={`${selectedFeature === undefined : '' : 'hidden'}`}>\n        <Instructions />\n        <Tools />\n    </div>\n  </div>\n);\n```\n\nThe first snippet mounts and unmounts the node, and I feel this is cleaner in the Analysis component since I know selectedFeature will always be defined and I don't need any conditional code in this snippet or the Analysis component.  But this can change very frequently in the application so I was wondering if one method is preferred or more performant over the other? (If performance is the same I will probably go with the first snippet as it feels cleaner to me and Im guaranteed to have a value for selectedFeature)\n",
        "remove_template_description": "Is there a preferred method or performance benefit to hiding a node in the dom via css vs mounting and unmounting it?  For example, I have a render function with the following code:  ``` javascript const {map} = this.context; let selectedFeature; let content;  //- Infer the selected feature from the info window if (map.infoWindow && map.infoWindow.getSelectedFeature()) {   selectedFeature = map.infoWindow.getSelectedFeature(); }  if (selectedFeature !== undefined) {   content = [<Analysis selectedFeature={selectedFeature} />]; } else {   content = [<Instructions />, <Tools />]; }  return (   <div className='analysis-panel custom-scroll'>     {content}   </div> ); ```  and I am wondering is this is preferred over something like this:  ``` javascript return (   <div className='analysis-panel custom-scroll'>     <div className={`${selectedFeature === undefined : 'hidden' : ''}`}>         <Analysis selectedFeature={selectedFeature} />     </div>     <div className={`${selectedFeature === undefined : '' : 'hidden'}`}>         <Instructions />         <Tools />     </div>   </div> ); ```  The first snippet mounts and unmounts the node, and I feel this is cleaner in the Analysis component since I know selectedFeature will always be defined and I don't need any conditional code in this snippet or the Analysis component.  But this can change very frequently in the application so I was wondering if one method is preferred or more performant over the other? (If performance is the same I will probably go with the first snippet as it feels cleaner to me and Im guaranteed to have a value for selectedFeature)",
        "human_words": "Is there a preferred method or performance benefit to hiding a node in the dom via css vs mounting and unmounting it?  For example, I have a render function with the following code:    and I am wondering is this is preferred over something like this:    The first snippet mounts and unmounts the node, and I feel this is cleaner in the Analysis component since I know selectedFeature will always be defined and I don't need any conditional code in this snippet or the Analysis component.  But this can change very frequently in the application so I was wondering if one method is preferred or more performant over the other? (If performance is the same I will probably go with the first snippet as it feels cleaner to me and Im guaranteed to have a value for selectedFeature)",
        "human_words_regrex": "Is there a preferred method or performance benefit to hiding a node in the dom via css vs mounting and unmounting it? For example, I have a render function with the following code: and I am wondering is this is preferred over something like this: The first snippet mounts and unmounts the node, and I feel this is cleaner in the Analysis component since I know selectedFeature will always be defined and I don't need any conditional code in this snippet or the Analysis component. But this can change very frequently in the application so I was wondering if one method is preferred or more performant over the other? (If performance is the same I will probably go with the first snippet as it feels cleaner to me and Im guaranteed to have a value for selectedFeature)",
        "human_words_stopwords_removal_lemmatization": "preferred method performance benefit hiding node dom via cs v mounting unmounting ? example , render function following code : wondering preferred something like : first snippet mount unmounts node , feel cleaner analysis component since know selectedfeature always defined n't need conditional code snippet analysis component . change frequently application wondering one method preferred performant ? ( performance probably go first snippet feel cleaner im guaranteed value selectedfeature )",
        "title_stopwords_removal_lemmatization": "performance unmounting & mounting component v hiding"
    },
    {
        "issue_id": 134203168,
        "title": "ReactDOM not define in \"react\": \"^0.14.7\"",
        "label": [
            "Type: Question"
        ],
        "date": "2016-02-17T07:24:17Z",
        "status": "closed",
        "description": "React.render works fine,but not ReactDOM.render\n\n```\n{\n  \"name\": \"class1webpack\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"build\": \"webpack\",\n    \"dev\": \"webpack-dev-server --devtool eval --progress --colors --hot --content-base build\"\n  },\n  \"author\": \"Eason\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"babel-core\": \"^6.5.2\",\n    \"babel-loader\": \"^6.2.2\",\n    \"react\": \"^0.14.7\",\n    \"webpack\": \"^1.12.13\",\n    \"webpack-dev-server\": \"^1.14.1\"\n  },\n  \"devDependencies\": {\n    \"babel-preset-es2015\": \"^6.5.0\",\n    \"babel-preset-react\": \"^6.5.0\"\n  }\n}\n\n```\n",
        "remove_template_description": "React.render works fine,but not ReactDOM.render  ``` {   \"name\": \"class1webpack\",   \"version\": \"1.0.0\",   \"description\": \"\",   \"main\": \"index.js\",   \"scripts\": {     \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",     \"build\": \"webpack\",     \"dev\": \"webpack-dev-server --devtool eval --progress --colors --hot --content-base build\"   },   \"author\": \"Eason\",   \"license\": \"ISC\",   \"dependencies\": {     \"babel-core\": \"^6.5.2\",     \"babel-loader\": \"^6.2.2\",     \"react\": \"^0.14.7\",     \"webpack\": \"^1.12.13\",     \"webpack-dev-server\": \"^1.14.1\"   },   \"devDependencies\": {     \"babel-preset-es2015\": \"^6.5.0\",     \"babel-preset-react\": \"^6.5.0\"   } }  ```",
        "human_words": "React.render works fine,but not ReactDOM.render  ",
        "human_words_regrex": "React.render works fine,but not ReactDOM.render ",
        "human_words_stopwords_removal_lemmatization": "react.render work fine , reactdom.render",
        "title_stopwords_removal_lemmatization": "reactdom define `` react '' : `` ^0.14.7 ''"
    },
    {
        "issue_id": 134168660,
        "title": "Programmatically access warnings / errors after rendering",
        "label": [
            "Type: Question"
        ],
        "date": "2016-02-17T03:36:56Z",
        "status": "closed",
        "description": "Let's say I have a component which has propTypes:\n\n```\nstatic propTypes = {\n   isError: React.PropTypes.bool.isRequired\n};\n```\n\nI want to ensure that this contract is not broken, so I have a test:\n\n```\n    it('should require an isError prop', () => {\n        expect(function () {\n            let result = renderReactComponent(<Component/>);\n        }).to.throw(Error);\n    });\n```\n\nUnfortunately, it doesn't throw an error - it DOES display a Warning statement.  I'd like that warning statement to be available, thus I should be able to alter my test to this:\n\n```\n    it('should require an isError prop', () => {\n        let result = renderReactComponent(<Component/>);\n        expect(result).to.have.property('warning');\n    });\n```\n\nthus ensuring the contract is maintained.\n",
        "remove_template_description": "Let's say I have a component which has propTypes:  ``` static propTypes = {    isError: React.PropTypes.bool.isRequired }; ```  I want to ensure that this contract is not broken, so I have a test:  ```     it('should require an isError prop', () => {         expect(function () {             let result = renderReactComponent(<Component/>);         }).to.throw(Error);     }); ```  Unfortunately, it doesn't throw an error - it DOES display a Warning statement.  I'd like that warning statement to be available, thus I should be able to alter my test to this:  ```     it('should require an isError prop', () => {         let result = renderReactComponent(<Component/>);         expect(result).to.have.property('warning');     }); ```  thus ensuring the contract is maintained.",
        "human_words": "Let's say I have a component which has propTypes:    I want to ensure that this contract is not broken, so I have a test:    Unfortunately, it doesn't throw an error - it DOES display a Warning statement.  I'd like that warning statement to be available, thus I should be able to alter my test to this:    thus ensuring the contract is maintained.",
        "human_words_regrex": "Let's say I have a component which has propTypes: I want to ensure that this contract is not broken, so I have a test: Unfortunately, it doesn't throw an error - it DOES display a Warning statement. I'd like that warning statement to be available, thus I should be able to alter my test to this: thus ensuring the contract is maintained.",
        "human_words_stopwords_removal_lemmatization": "let 's say component proptypes : want ensure contract broken , test : unfortunately , n't throw error - display warning statement . 'd like warning statement available , thus able alter test : thus ensuring contract maintained .",
        "title_stopwords_removal_lemmatization": "programmatically access warning / error rendering"
    },
    {
        "issue_id": 134073410,
        "title": "Following NPM getting started guide incomplete and results in errors",
        "label": [
            "Type: Question"
        ],
        "date": "2016-02-16T19:22:07Z",
        "status": "closed",
        "description": "I decided to try out React today, and began following the Getting Started Guide for using[ React from npm](https://facebook.github.io/react/docs/getting-started.html#using-react-from-npm).  Unfortunately I was unable to get the example up and running.  The first problem I encountered was the missing HTML file which I scavenged from lower in the page and adapted.  However once I loaded up the `bundle.js` file in the HTML page I received the following error in the browser console:\n\n`Uncaught Invariant Violation: _registerComponent(...): Target container is not a DOM element.`\n\nWas there a step I missed somewhere?\n",
        "remove_template_description": "I decided to try out React today, and began following the Getting Started Guide for using[ React from npm](https://facebook.github.io/react/docs/getting-started.html#using-react-from-npm).  Unfortunately I was unable to get the example up and running.  The first problem I encountered was the missing HTML file which I scavenged from lower in the page and adapted.  However once I loaded up the `bundle.js` file in the HTML page I received the following error in the browser console:  `Uncaught Invariant Violation: _registerComponent(...): Target container is not a DOM element.`  Was there a step I missed somewhere?",
        "human_words": "I decided to try out React today, and began following the Getting Started Guide for using[ React from npm](https://facebook.github.io/react/docs/getting-started.html#using-react-from-npm).  Unfortunately I was unable to get the example up and running.  The first problem I encountered was the missing HTML file which I scavenged from lower in the page and adapted.  However once I loaded up the `bundle.js` file in the HTML page I received the following error in the browser console:  `Uncaught Invariant Violation: _registerComponent(...): Target container is not a DOM element.`  Was there a step I missed somewhere?",
        "human_words_regrex": "I decided to try out React today, and began following the Getting Started Guide for using. Unfortunately I was unable to get the example up and running. The first problem I encountered was the missing HTML file which I scavenged from lower in the page and adapted. However once I loaded up the `bundle.js` file in the HTML page I received the following error in the browser console: `Uncaught Invariant Violation: _registerComponent(...): Target container is not a DOM element.` Was there a step I missed somewhere?",
        "human_words_stopwords_removal_lemmatization": "decided try react today , began following getting started guide using . unfortunately unable get example running . first problem encountered missing html file scavenged lower page adapted . however loaded ` bundle.js ` file html page received following error browser console : ` uncaught invariant violation : _registercomponent ( ... ) : target container dom element. ` step missed somewhere ?",
        "title_stopwords_removal_lemmatization": "following npm getting started guide incomplete result error"
    },
    {
        "issue_id": 133849413,
        "title": "Async routes cause server-side checksum invalid error",
        "label": [
            "Type: Question"
        ],
        "date": "2016-02-16T00:27:51Z",
        "status": "closed",
        "description": "**NOTE:** This may be an issue for React Router instead. If so, please inform me, and I will notify them.\n\nI'm using Webpack, react-router, and react.\n\nI got this error while using react-router with async routes and server-side rendering:\n\n``` shell\nbundle.js:1 Warning: React attempted to reuse markup in a container but the checksum was invalid. This generally means that you are using server rendering and the markup generated on the server was not what the client was expecting. React injected new markup to compensate which works but you have lost many of the benefits of server rendering. Instead, figure out why the markup being generated is different on the client or server:\n (client) <noscript data-reacti\n (server) <div data-reactid=\".1\n```\n\nMy routes.cjsx has this:\n\n``` coffee\n# Routes\npath: 'game'\ngetComponent: (location, cb) =>\n    require.ensure [], (require) =>\n        cb null, require './views/game'\n```\n\nIf I change it to this, I no longer get that error:\n\n``` coffee\n# Routes\npath: 'game'\ngetComponent: (location, cb) =>\n    cb null, require './views/game'\n```\n\nIs this a bug or something else?\n",
        "remove_template_description": "**NOTE:** This may be an issue for React Router instead. If so, please inform me, and I will notify them.  I'm using Webpack, react-router, and react.  I got this error while using react-router with async routes and server-side rendering:  ``` shell bundle.js:1 Warning: React attempted to reuse markup in a container but the checksum was invalid. This generally means that you are using server rendering and the markup generated on the server was not what the client was expecting. React injected new markup to compensate which works but you have lost many of the benefits of server rendering. Instead, figure out why the markup being generated is different on the client or server:  (client) <noscript data-reacti  (server) <div data-reactid=\".1 ```  My routes.cjsx has this:  ``` coffee # Routes path: 'game' getComponent: (location, cb) =>     require.ensure [], (require) =>         cb null, require './views/game' ```  If I change it to this, I no longer get that error:  ``` coffee # Routes path: 'game' getComponent: (location, cb) =>     cb null, require './views/game' ```  Is this a bug or something else?",
        "human_words": "**NOTE:** This may be an issue for React Router instead. If so, please inform me, and I will notify them.  I'm using Webpack, react-router, and react.  I got this error while using react-router with async routes and server-side rendering:    My routes.cjsx has this:    If I change it to this, I no longer get that error:    Is this a bug or something else?",
        "human_words_regrex": "**NOTE:** This may be an issue for React Router instead. If so, please inform me, and I will notify them. I'm using Webpack, react-router, and react. I got this error while using react-router with async routes and server-side rendering: My routes.cjsx has this: If I change it to this, I no longer get that error: Is this a bug or something else?",
        "human_words_stopwords_removal_lemmatization": "* * note : * * may issue react router instead . , please inform , notify . 'm using webpack , react-router , react . got error using react-router async route server-side rendering : routes.cjsx : change , longer get error : bug something else ?",
        "title_stopwords_removal_lemmatization": "async route cause server-side checksum invalid error"
    },
    {
        "issue_id": 133609810,
        "title": "Use mixed arrays with strings has warning",
        "label": [
            "Type: Question"
        ],
        "date": "2016-02-15T02:52:14Z",
        "status": "closed",
        "description": "``` js\nvar Hello = React.createClass({\n    render: function() {\n        return <div>{this.props.name}</div>;\n    }\n});\n\nReact.render(<Hello name={[\"This \", <strong>IS</strong>, \" working!\"]} />, document.body);\n```\n\nHas warning:\n`Each child in an array should have a unique \"key\" prop. Check the render method of Hello. See http://fb.me/react-warning-keys for more information.`\nJsfiddle\nhttp://jsfiddle.net/7s7dee6L/\n",
        "remove_template_description": "``` js var Hello = React.createClass({     render: function() {         return <div>{this.props.name}</div>;     } });  React.render(<Hello name={[\"This \", <strong>IS</strong>, \" working!\"]} />, document.body); ```  Has warning: `Each child in an array should have a unique \"key\" prop. Check the render method of Hello. See http://fb.me/react-warning-keys for more information.` Jsfiddle http://jsfiddle.net/7s7dee6L/",
        "human_words": "  Has warning: `Each child in an array should have a unique \"key\" prop. Check the render method of Hello. See http://fb.me/react-warning-keys for more information.` Jsfiddle http://jsfiddle.net/7s7dee6L/",
        "human_words_regrex": " Has warning: `Each child in an array should have a unique \"key\" prop. Check the render method of Hello. See  for more information.` Jsfiddle ",
        "human_words_stopwords_removal_lemmatization": "warning : ` child array unique `` key '' prop . check render method hello . see information. ` jsfiddle",
        "title_stopwords_removal_lemmatization": "use mixed array string warning"
    },
    {
        "issue_id": 132472097,
        "title": "Remove event listener used with bind in ES6 syntax ?",
        "label": [
            "Type: Question"
        ],
        "date": "2016-02-09T16:54:39Z",
        "status": "closed",
        "description": "I'm trying to communicate with an iframe with the postMessage API but I have an issue with the eventListeners management in ES6\n\nIt is stated in the docs that\n\n> With React, every method is automatically bound to its component instance (except when using ES6 class syntax)\n\nThe problem is that `this.handler.bind(this) !== this.handler` so when I'm done with the event I can't remove the listener because I can't keep a reference to the handler. I could try to encapsulate the function, but the encapsulating function would also need a binding. I could try to super the constructor too but I'm not sure this is a good idea, plus I don't know the args it need. I'm quite sure I'm missing an important point here.\n\nAny help would be much appreciated !\n\n```\nexport default class SomeComponent extends Component {\n\n  handleIframeData(event) {\n    // some stuff in there that will need 'this' to be set to the component's context, to get props for example.\n  }\n\n  componentDidMount() {\n    window.addEventListener('message', this.handleIframeData.bind(this), false)\n  }\n\n  componentWillUnmount() {\n    // won't work because 'this.handleIframeData.bind(this) !== this.handleIframeData'\n    window.removeEventListener('message', this.handleIframeData, false)\n  }\n\n  render() {\n    return (\n      <div className=\"SomeComponent\" style={{height: '100%', width:'100%', display: 'table'}}>\n        <iframe src=\"assets/iframe/index.html\" style={{display: 'table-row', width: '100%', height:'100%', border: 0}}></iframe>\n      </div>\n    )\n  }\n}\n```\n\nThanks anyway !\n",
        "remove_template_description": "I'm trying to communicate with an iframe with the postMessage API but I have an issue with the eventListeners management in ES6  It is stated in the docs that  > With React, every method is automatically bound to its component instance (except when using ES6 class syntax)  The problem is that `this.handler.bind(this) !== this.handler` so when I'm done with the event I can't remove the listener because I can't keep a reference to the handler. I could try to encapsulate the function, but the encapsulating function would also need a binding. I could try to super the constructor too but I'm not sure this is a good idea, plus I don't know the args it need. I'm quite sure I'm missing an important point here.  Any help would be much appreciated !  ``` export default class SomeComponent extends Component {    handleIframeData(event) {     // some stuff in there that will need 'this' to be set to the component's context, to get props for example.   }    componentDidMount() {     window.addEventListener('message', this.handleIframeData.bind(this), false)   }    componentWillUnmount() {     // won't work because 'this.handleIframeData.bind(this) !== this.handleIframeData'     window.removeEventListener('message', this.handleIframeData, false)   }    render() {     return (       <div className=\"SomeComponent\" style={{height: '100%', width:'100%', display: 'table'}}>         <iframe src=\"assets/iframe/index.html\" style={{display: 'table-row', width: '100%', height:'100%', border: 0}}></iframe>       </div>     )   } } ```  Thanks anyway !",
        "human_words": "I'm trying to communicate with an iframe with the postMessage API but I have an issue with the eventListeners management in ES6  It is stated in the docs that  > With React, every method is automatically bound to its component instance (except when using ES6 class syntax)  The problem is that `this.handler.bind(this) !== this.handler` so when I'm done with the event I can't remove the listener because I can't keep a reference to the handler. I could try to encapsulate the function, but the encapsulating function would also need a binding. I could try to super the constructor too but I'm not sure this is a good idea, plus I don't know the args it need. I'm quite sure I'm missing an important point here.  Any help would be much appreciated !    Thanks anyway !",
        "human_words_regrex": "I'm trying to communicate with an iframe with the postMessage API but I have an issue with the eventListeners management in ES6 It is stated in the docs that > With React, every method is automatically bound to its component instance (except when using ES6 class syntax) The problem is that `this.handler.bind(this) !== this.handler` so when I'm done with the event I can't remove the listener because I can't keep a reference to the handler. I could try to encapsulate the function, but the encapsulating function would also need a binding. I could try to super the constructor too but I'm not sure this is a good idea, plus I don't know the args it need. I'm quite sure I'm missing an important point here. Any help would be much appreciated ! Thanks anyway !",
        "human_words_stopwords_removal_lemmatization": "'m trying communicate iframe postmessage api issue eventlisteners management es6 stated doc > react , every method automatically bound component instance ( except using es6 class syntax ) problem ` this.handler.bind ( ) ! == this.handler ` 'm done event ca n't remove listener ca n't keep reference handler . could try encapsulate function , encapsulating function would also need binding . could try super constructor 'm sure good idea , plus n't know args need . 'm quite sure 'm missing important point . help would much appreciated ! thanks anyway !",
        "title_stopwords_removal_lemmatization": "remove event listener used bind es6 syntax ?"
    },
    {
        "issue_id": 131959590,
        "title": "console shows error: Uncaught Invariant Violation",
        "label": [
            "Type: Question"
        ],
        "date": "2016-02-07T11:19:10Z",
        "status": "closed",
        "description": "I am making an app based on [this](https://github.com/gaearon/react-transform-boilerplate) boilerplate. Ref: [gist](https://gist.github.com/purezen/e421917fca4c05bb2c05)\n\nThe app is building fine, but my console shows this error:\nUncaught Invariant Violation: Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: undefined.\n",
        "remove_template_description": "I am making an app based on [this](https://github.com/gaearon/react-transform-boilerplate) boilerplate. Ref: [gist](https://gist.github.com/purezen/e421917fca4c05bb2c05)  The app is building fine, but my console shows this error: Uncaught Invariant Violation: Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: undefined.",
        "human_words": "I am making an app based on [this](https://github.com/gaearon/react-transform-boilerplate) boilerplate. Ref: [gist](https://gist.github.com/purezen/e421917fca4c05bb2c05)  The app is building fine, but my console shows this error: Uncaught Invariant Violation: Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: undefined.",
        "human_words_regrex": "I am making an app based on  boilerplate. Ref:  The app is building fine, but my console shows this error: Uncaught Invariant Violation: Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: undefined.",
        "human_words_stopwords_removal_lemmatization": "making app based boilerplate . ref : app building fine , console show error : uncaught invariant violation : element type invalid : expected string ( built-in component ) class/function ( composite component ) got : undefined .",
        "title_stopwords_removal_lemmatization": "console show error : uncaught invariant violation"
    },
    {
        "issue_id": 131824732,
        "title": "How can I visit the official site that writing by other language (default English)?",
        "label": [
            "Type: Question"
        ],
        "date": "2016-02-06T05:48:09Z",
        "status": "closed",
        "description": "visit the link [`getting-started`](https://facebook.github.io/react/docs/getting-started.html), it's English page, how to read this page that writing by other language.\n",
        "remove_template_description": "visit the link [`getting-started`](https://facebook.github.io/react/docs/getting-started.html), it's English page, how to read this page that writing by other language.",
        "human_words": "visit the link [`getting-started`](https://facebook.github.io/react/docs/getting-started.html), it's English page, how to read this page that writing by other language.",
        "human_words_regrex": "visit the link , it's English page, how to read this page that writing by other language.",
        "human_words_stopwords_removal_lemmatization": "visit link , 's english page , read page writing language .",
        "title_stopwords_removal_lemmatization": "visit official site writing language ( default english ) ?"
    },
    {
        "issue_id": 131456553,
        "title": "componentDidMount is called before the visual is rendered",
        "label": [
            "Type: Question"
        ],
        "date": "2016-02-04T19:53:03Z",
        "status": "closed",
        "description": "I am trying to get visual attributes (width to be precise) of a component once it's rendered and CSS is applied. I've been trying with `componentDidMount` but width is still 0, I am not sure what I'm doing wrong.\n\noutput:\n\n```\nrendering\ncomponent did mount. The ribbon's width is 0\n```\n\nAnd after that, if I click on my header's button to \"re-route\" back to the same page (i.e. trigger an update), then the `componentDidUpdate` is called with the proper width.  Am I missing something or is this a bug?\n\nThanks you lots folks.\n\n``` javascript\nimport React, {Component} from 'react';\n\nexport default class RibbonHeader extends Component {\n  componentDidMount() {\n    console.log('component did mount. The ribbon\\'s width is', this.refs.ribbonSvg.width.animVal.value); // is 0\n    this.paintInSVG();\n  }\n\n  shouldComponentUpdate() {\n    console.log('should component update'); // never called\n    return true;\n  }\n\n  componentDidUpdate() {\n    // Not automatically called, but if I generate a routing event, it updates\n    console.log('component did update. The ribbon\\'s width is', this.refs.ribbonSvg.width.animVal.value);  // width is 1020px (good)\n    this.paintInSVG();\n  }\n\n  paintInSVG() {\n    const refRibbon = this.refs.ribbonSvg;\n    doSomeSVGMagicThatDependsOnTheWidth(refRibbon);\n  }\n\n  render() {\n    console.log('rendering');\n\n    return (\n      <svg ref=\"ribbonSvg\" styles={{width: '100%'}}></svg>\n    );\n  }\n}\n```\n\n**EDIT**:\nAdding a timeout to componentDidMount does the job, although this is probably not normal\n\n``` javascript\n  componentDidMount() {\n    setTimeout(() => {\n      this.paintInSVG();\n    }, 100);\n  }\n```\n",
        "remove_template_description": "I am trying to get visual attributes (width to be precise) of a component once it's rendered and CSS is applied. I've been trying with `componentDidMount` but width is still 0, I am not sure what I'm doing wrong.  output:  ``` rendering component did mount. The ribbon's width is 0 ```  And after that, if I click on my header's button to \"re-route\" back to the same page (i.e. trigger an update), then the `componentDidUpdate` is called with the proper width.  Am I missing something or is this a bug?  Thanks you lots folks.  ``` javascript import React, {Component} from 'react';  export default class RibbonHeader extends Component {   componentDidMount() {     console.log('component did mount. The ribbon\\'s width is', this.refs.ribbonSvg.width.animVal.value); // is 0     this.paintInSVG();   }    shouldComponentUpdate() {     console.log('should component update'); // never called     return true;   }    componentDidUpdate() {     // Not automatically called, but if I generate a routing event, it updates     console.log('component did update. The ribbon\\'s width is', this.refs.ribbonSvg.width.animVal.value);  // width is 1020px (good)     this.paintInSVG();   }    paintInSVG() {     const refRibbon = this.refs.ribbonSvg;     doSomeSVGMagicThatDependsOnTheWidth(refRibbon);   }    render() {     console.log('rendering');      return (       <svg ref=\"ribbonSvg\" styles={{width: '100%'}}></svg>     );   } } ```  **EDIT**: Adding a timeout to componentDidMount does the job, although this is probably not normal  ``` javascript   componentDidMount() {     setTimeout(() => {       this.paintInSVG();     }, 100);   } ```",
        "human_words": "I am trying to get visual attributes (width to be precise) of a component once it's rendered and CSS is applied. I've been trying with `componentDidMount` but width is still 0, I am not sure what I'm doing wrong.  output:    And after that, if I click on my header's button to \"re-route\" back to the same page (i.e. trigger an update), then the `componentDidUpdate` is called with the proper width.  Am I missing something or is this a bug?  Thanks you lots folks.    **EDIT**: Adding a timeout to componentDidMount does the job, although this is probably not normal  ",
        "human_words_regrex": "I am trying to get visual attributes (width to be precise) of a component once it's rendered and CSS is applied. I've been trying with `componentDidMount` but width is still 0, I am not sure what I'm doing wrong. output: And after that, if I click on my header's button to \"re-route\" back to the same page (i.e. trigger an update), then the `componentDidUpdate` is called with the proper width. Am I missing something or is this a bug? Thanks you lots folks. **EDIT**: Adding a timeout to componentDidMount does the job, although this is probably not normal ",
        "human_words_stopwords_removal_lemmatization": "trying get visual attribute ( width precise ) component 's rendered cs applied . 've trying ` componentdidmount ` width still 0 , sure 'm wrong . output : , click header 's button `` re-route '' back page ( i.e . trigger update ) , ` componentdidupdate ` called proper width . missing something bug ? thanks lot folk . * * edit * * : adding timeout componentdidmount job , although probably normal",
        "title_stopwords_removal_lemmatization": "componentdidmount called visual rendered"
    },
    {
        "issue_id": 131187935,
        "title": "$ is not defined",
        "label": [
            "Type: Question"
        ],
        "date": "2016-02-03T23:25:46Z",
        "status": "closed",
        "description": "I have a class that is trying to do a get request in the componentDidMount function, however if I initially load a page with this component in it I get the following error. `$ is not defined`. I followed the example from xxx I just changed it over to ES6, perhaps I am using something improperly?\n\n`\nclass NativeApp extends React.Component {\n\n  state = {\n    banners : {}\n  }\n\n  loadBanners() {\n    this.serverRequest = $.get('/api/banners', function (res) {\n      this.setState(res)\n    }.bind(this))\n  }\n\n  componentDidMount() {\n    this.loadBanners()\n  }\n\n  render() {\n    return (\n      <DefaultLayout title={this.props.title} loggedIn={this.props.loggedIn} logOut={this.props.logOut}>\n        <button onClick={this.loadBanners} className=\"btn btn-primary\">Manually Load Banners WHY!!!</button>\n      </DefaultLayout>\n    )\n  }\n}\n\nexport default NativeApp\n`\n",
        "remove_template_description": "I have a class that is trying to do a get request in the componentDidMount function, however if I initially load a page with this component in it I get the following error. `$ is not defined`. I followed the example from xxx I just changed it over to ES6, perhaps I am using something improperly?  ` class NativeApp extends React.Component {    state = {     banners : {}   }    loadBanners() {     this.serverRequest = $.get('/api/banners', function (res) {       this.setState(res)     }.bind(this))   }    componentDidMount() {     this.loadBanners()   }    render() {     return (       <DefaultLayout title={this.props.title} loggedIn={this.props.loggedIn} logOut={this.props.logOut}>         <button onClick={this.loadBanners} className=\"btn btn-primary\">Manually Load Banners WHY!!!</button>       </DefaultLayout>     )   } }  export default NativeApp `",
        "human_words": "I have a class that is trying to do a get request in the componentDidMount function, however if I initially load a page with this component in it I get the following error. `$ is not defined`. I followed the example from xxx I just changed it over to ES6, perhaps I am using something improperly?  ` class NativeApp extends React.Component {    state = {     banners : {}   }    loadBanners() {     this.serverRequest = $.get('/api/banners', function (res) {       this.setState(res)     }.bind(this))   }    componentDidMount() {     this.loadBanners()   }    render() {     return (       <DefaultLayout title={this.props.title} loggedIn={this.props.loggedIn} logOut={this.props.logOut}>         <button onClick={this.loadBanners} className=\"btn btn-primary\">Manually Load Banners WHY!!!</button>       </DefaultLayout>     )   } }  export default NativeApp `",
        "human_words_regrex": "I have a class that is trying to do a get request in the componentDidMount function, however if I initially load a page with this component in it I get the following error. `$ is not defined`. I followed the example from xxx I just changed it over to ES6, perhaps I am using something improperly? ` class NativeApp extends React.Component { state = { banners : {} } loadBanners() { this.serverRequest = $.get('/api/banners', function (res) { this.setState(res) }.bind(this)) } componentDidMount() { this.loadBanners() } render() { return (  Manually Load Banners WHY!!!  ) } } export default NativeApp `",
        "human_words_stopwords_removal_lemmatization": "class trying get request componentdidmount function , however initially load page component get following error . ` $ defined ` . followed example xxx changed es6 , perhaps using something improperly ? ` class nativeapp extends react.component { state = { banner : { } } loadbanners ( ) { this.serverrequest = $ .get ( '/api/banners ' , function ( re ) { this.setstate ( re ) } .bind ( ) ) } componentdidmount ( ) { this.loadbanners ( ) } render ( ) { return ( manually load banner ! ! ! ) } } export default nativeapp `",
        "title_stopwords_removal_lemmatization": "$ defined"
    },
    {
        "issue_id": 130414125,
        "title": "nesting of components fails with latest stable React + TypeScript + AMD/require.js",
        "label": [
            "Type: Question"
        ],
        "date": "2016-02-01T16:42:19Z",
        "status": "closed",
        "description": "I currently have a working example of a project that uses the latest React + TypeScript (using .tsx files), together with the AMD module loading system (with require.js) and building/running/debugging in Visual Studio 2015 CE.\n\nHowever, if I now try to nest 2 React components into a \"parent\" React component, I am getting exceptions in require.js when running the app...\n\nThe \"child\" React components are working fine individually, so the problem really seems to come from the nesting itself.\n\nIf I run the same project using an older version of React (13.x) and not using AMD modules, then the app works fine, also when nesting the React components.\n\nI've made a test repository public here: https://bitbucket.org/KoenT_IM/typescriptreactvs2015tests \n- HelloPenguin is the old project (using React 13.x and not using AMD)\n- HelloPenguin_React0.14.6_AMD is the new project (latest React 0.14.6 and using AMD)\n  If you remove lines 41 and 42 in ApplicationView.tsx, you will see that the app runs fine, and the individual React components also work fine.\n\nThis must be something I'm overlooking, but I can't seem to pin it down...\nDoes anyone know what could be wrong here and how to fix this problem?\nThanks!\n",
        "remove_template_description": "I currently have a working example of a project that uses the latest React + TypeScript (using .tsx files), together with the AMD module loading system (with require.js) and building/running/debugging in Visual Studio 2015 CE.  However, if I now try to nest 2 React components into a \"parent\" React component, I am getting exceptions in require.js when running the app...  The \"child\" React components are working fine individually, so the problem really seems to come from the nesting itself.  If I run the same project using an older version of React (13.x) and not using AMD modules, then the app works fine, also when nesting the React components.  I've made a test repository public here: https://bitbucket.org/KoenT_IM/typescriptreactvs2015tests  - HelloPenguin is the old project (using React 13.x and not using AMD) - HelloPenguin_React0.14.6_AMD is the new project (latest React 0.14.6 and using AMD)   If you remove lines 41 and 42 in ApplicationView.tsx, you will see that the app runs fine, and the individual React components also work fine.  This must be something I'm overlooking, but I can't seem to pin it down... Does anyone know what could be wrong here and how to fix this problem? Thanks!",
        "human_words": "I currently have a working example of a project that uses the latest React + TypeScript (using .tsx files), together with the AMD module loading system (with require.js) and building/running/debugging in Visual Studio 2015 CE.  However, if I now try to nest 2 React components into a \"parent\" React component, I am getting exceptions in require.js when running the app...  The \"child\" React components are working fine individually, so the problem really seems to come from the nesting itself.  If I run the same project using an older version of React (13.x) and not using AMD modules, then the app works fine, also when nesting the React components.  I've made a test repository public here: https://bitbucket.org/KoenT_IM/typescriptreactvs2015tests  - HelloPenguin is the old project (using React 13.x and not using AMD) - HelloPenguin_React0.14.6_AMD is the new project (latest React 0.14.6 and using AMD)   If you remove lines 41 and 42 in ApplicationView.tsx, you will see that the app runs fine, and the individual React components also work fine.  This must be something I'm overlooking, but I can't seem to pin it down... Does anyone know what could be wrong here and how to fix this problem? Thanks!",
        "human_words_regrex": "I currently have a working example of a project that uses the latest React + TypeScript (using .tsx files), together with the AMD module loading system (with require.js) and building/running/debugging in Visual Studio 2015 CE. However, if I now try to nest 2 React components into a \"parent\" React component, I am getting exceptions in require.js when running the app... The \"child\" React components are working fine individually, so the problem really seems to come from the nesting itself. If I run the same project using an older version of React (13.x) and not using AMD modules, then the app works fine, also when nesting the React components. I've made a test repository public here:  - HelloPenguin is the old project (using React 13.x and not using AMD) - HelloPenguin_React0.14.6_AMD is the new project (latest React 0.14.6 and using AMD) If you remove lines 41 and 42 in ApplicationView.tsx, you will see that the app runs fine, and the individual React components also work fine. This must be something I'm overlooking, but I can't seem to pin it down... Does anyone know what could be wrong here and how to fix this problem? Thanks!",
        "human_words_stopwords_removal_lemmatization": "currently working example project us latest react + typescript ( using .tsx file ) , together amd module loading system ( require.js ) building/running/debugging visual studio 2015 ce . however , try nest 2 react component `` parent '' react component , getting exception require.js running app ... `` child '' react component working fine individually , problem really seems come nesting . run project using older version react ( 13.x ) using amd module , app work fine , also nesting react component . 've made test repository public : - hellopenguin old project ( using react 13.x using amd ) - hellopenguin_react0.14.6_amd new project ( latest react 0.14.6 using amd ) remove line 41 42 applicationview.tsx , see app run fine , individual react component also work fine . must something 'm overlooking , ca n't seem pin ... anyone know could wrong fix problem ? thanks !",
        "title_stopwords_removal_lemmatization": "nesting component fails latest stable react + typescript + amd/require.js"
    },
    {
        "issue_id": 128332151,
        "title": "Question: how to just update parentless component outside of it?",
        "label": [
            "Type: Question"
        ],
        "date": "2016-01-23T14:47:22Z",
        "status": "closed",
        "description": "Copy of [stackoverflow question](http://stackoverflow.com/questions/34941364/update-react-component-without-parent-outside-of-it/34941598?noredirect=1#comment57616408_34941598)\n\nHow should I properly update component if it doesn't have a parent?\n\nI've found two ways to do it:\n### [First method](https://jsfiddle.net/69z2wepo/28597/)\n\nHere I update component through changing component`s state:\n\n```\nvar Hello = React.createClass({\n  render: function() {\n    if (!this.state) return null;\n    return (\n      <div>Hello {this.state.name}</div>\n    );\n  }\n});\n\n\nvar component = ReactDOM.render(\n  <Hello />,\n  document.getElementById('container')\n);\ncomponent.setState({name: \"World\"});\n\nsetTimeout(function(){\n  component.setState({name: \"StackOverFlow\"});\n}, 1000);\n```\n### [Second method](https://jsfiddle.net/69z2wepo/28596/)\n\nHere I update component through `ReactDOM.render` method:\n\n```\nvar Hello = React.createClass({\n  render: function() {\n    return (\n      <div>Hello {this.props.name}</div>\n    );\n  }\n});\n\n\nReactDOM.render(\n  <Hello name=\"world\"/>,\n    document.getElementById('container')\n);\n\nsetTimeout(function(){\n  ReactDOM.render(\n    <Hello name=\"StackOverFlow\"/>,\n      document.getElementById('container')\n  );\n\n}, 1000);\n```\n\nSo which method is correct? Or maybe here is a third, _correct_ way? I know that I should Flux etc., but I want to know the simplest way in the simplest example.\n",
        "remove_template_description": "Copy of [stackoverflow question](http://stackoverflow.com/questions/34941364/update-react-component-without-parent-outside-of-it/34941598?noredirect=1#comment57616408_34941598)  How should I properly update component if it doesn't have a parent?  I've found two ways to do it: ### [First method](https://jsfiddle.net/69z2wepo/28597/)  Here I update component through changing component`s state:  ``` var Hello = React.createClass({   render: function() {     if (!this.state) return null;     return (       <div>Hello {this.state.name}</div>     );   } });   var component = ReactDOM.render(   <Hello />,   document.getElementById('container') ); component.setState({name: \"World\"});  setTimeout(function(){   component.setState({name: \"StackOverFlow\"}); }, 1000); ``` ### [Second method](https://jsfiddle.net/69z2wepo/28596/)  Here I update component through `ReactDOM.render` method:  ``` var Hello = React.createClass({   render: function() {     return (       <div>Hello {this.props.name}</div>     );   } });   ReactDOM.render(   <Hello name=\"world\"/>,     document.getElementById('container') );  setTimeout(function(){   ReactDOM.render(     <Hello name=\"StackOverFlow\"/>,       document.getElementById('container')   );  }, 1000); ```  So which method is correct? Or maybe here is a third, _correct_ way? I know that I should Flux etc., but I want to know the simplest way in the simplest example.",
        "human_words": "Copy of [stackoverflow question](http://stackoverflow.com/questions/34941364/update-react-component-without-parent-outside-of-it/34941598?noredirect=1#comment57616408_34941598)  How should I properly update component if it doesn't have a parent?  I've found two ways to do it: ### [First method](https://jsfiddle.net/69z2wepo/28597/)  Here I update component through changing component`s state:   ### [Second method](https://jsfiddle.net/69z2wepo/28596/)  Here I update component through `ReactDOM.render` method:    So which method is correct? Or maybe here is a third, _correct_ way? I know that I should Flux etc., but I want to know the simplest way in the simplest example.",
        "human_words_regrex": "Copy of  How should I properly update component if it doesn't have a parent? I've found two ways to do it: ###  Here I update component through changing component`s state: ###  Here I update component through `ReactDOM.render` method: So which method is correct? Or maybe here is a third, _correct_ way? I know that I should Flux etc., but I want to know the simplest way in the simplest example.",
        "human_words_stopwords_removal_lemmatization": "copy properly update component n't parent ? 've found two way : # # # update component changing component ` state : # # # update component ` reactdom.render ` method : method correct ? maybe third , _correct_ way ? know flux etc. , want know simplest way simplest example .",
        "title_stopwords_removal_lemmatization": "question : update parentless component outside ?"
    },
    {
        "issue_id": 128088180,
        "title": "Can i render every element with different render function?",
        "label": [
            "Type: Question"
        ],
        "date": "2016-01-22T05:32:32Z",
        "status": "closed",
        "description": "I need some element only have html, and do not need data-reactid.\n\nBut I don't except i should render two element with different function( e.g. renderToStaticMarkup, renderToString) and combine it because the element could be include by many element. Render split and combine could cause mistake when element is much more.\n\nIf i could set an attribute in compoment:\n\n``` javascript\nclass DefaultLayout extends  React.Component{    \n    render() {\n        return (\n            <html></html>\n        );\n    }\n};\nDefaultLayout.noNeedDiffCompoment = true;\nexport default DefaultLayout;\n```\n\nor a new pure html Compoment\n\n``` javascript\n\nclass DefaultLayout extends  React.PureHtmlComponent{    \n    render() {\n        return (\n            <html></html>\n        );\n    }\n};\nexport default DefaultLayout;\n```\n\nIf i write as above, the render function can auto swap render function to render elements.\n\nIs there any graceful solution?\n",
        "remove_template_description": "I need some element only have html, and do not need data-reactid.  But I don't except i should render two element with different function( e.g. renderToStaticMarkup, renderToString) and combine it because the element could be include by many element. Render split and combine could cause mistake when element is much more.  If i could set an attribute in compoment:  ``` javascript class DefaultLayout extends  React.Component{         render() {         return (             <html></html>         );     } }; DefaultLayout.noNeedDiffCompoment = true; export default DefaultLayout; ```  or a new pure html Compoment  ``` javascript  class DefaultLayout extends  React.PureHtmlComponent{         render() {         return (             <html></html>         );     } }; export default DefaultLayout; ```  If i write as above, the render function can auto swap render function to render elements.  Is there any graceful solution?",
        "human_words": "I need some element only have html, and do not need data-reactid.  But I don't except i should render two element with different function( e.g. renderToStaticMarkup, renderToString) and combine it because the element could be include by many element. Render split and combine could cause mistake when element is much more.  If i could set an attribute in compoment:    or a new pure html Compoment    If i write as above, the render function can auto swap render function to render elements.  Is there any graceful solution?",
        "human_words_regrex": "I need some element only have html, and do not need data-reactid. But I don't except i should render two element with different function( e.g. renderToStaticMarkup, renderToString) and combine it because the element could be include by many element. Render split and combine could cause mistake when element is much more. If i could set an attribute in compoment: or a new pure html Compoment If i write as above, the render function can auto swap render function to render elements. Is there any graceful solution?",
        "human_words_stopwords_removal_lemmatization": "need element html , need data-reactid . n't except render two element different function ( e.g . rendertostaticmarkup , rendertostring ) combine element could include many element . render split combine could cause mistake element much . could set attribute compoment : new pure html compoment write , render function auto swap render function render element . graceful solution ?",
        "title_stopwords_removal_lemmatization": "render every element different render function ?"
    },
    {
        "issue_id": 127215385,
        "title": "onclick change render",
        "label": [
            "Type: Question"
        ],
        "date": "2016-01-18T12:17:06Z",
        "status": "closed",
        "description": "Hi,I'm new to react.If I want to click the button from DOM then change rendered class from CommentBox to CommentText below,how to do it using simple onclick function?Something like\n\n```\nif(btnclick){\nReactDOM.render(\n  <CommentBox />,\n  document.getElementById('content')\n);\n}else{\nReactDOM.render(\n  <CommentText />,\n  document.getElementById('content')\n);\n\n```\n\n```\n<div  id=\"content\"> </div>\n<button >  </button>\n```\n\n```\nvar CommentBox = React.createClass({\n  render: function() {\n    return (\n      <div className=\"commentBox\">\n        <h1>Comments</h1>\n\n      </div>\n    );\n  }\n});\n\nvar CommentText = React.createClass({\n  render: function() {\n    return (\n      <div className=\"commentBox\">\n        <h1>TEXT</h1>\n\n      </div>\n    );\n  }\n});\n```\n",
        "remove_template_description": "Hi,I'm new to react.If I want to click the button from DOM then change rendered class from CommentBox to CommentText below,how to do it using simple onclick function?Something like  ``` if(btnclick){ ReactDOM.render(   <CommentBox />,   document.getElementById('content') ); }else{ ReactDOM.render(   <CommentText />,   document.getElementById('content') );  ```  ``` <div  id=\"content\"> </div> <button >  </button> ```  ``` var CommentBox = React.createClass({   render: function() {     return (       <div className=\"commentBox\">         <h1>Comments</h1>        </div>     );   } });  var CommentText = React.createClass({   render: function() {     return (       <div className=\"commentBox\">         <h1>TEXT</h1>        </div>     );   } }); ```",
        "human_words": "Hi,I'm new to react.If I want to click the button from DOM then change rendered class from CommentBox to CommentText below,how to do it using simple onclick function?Something like      ",
        "human_words_regrex": "Hi,I'm new to react.If I want to click the button from DOM then change rendered class from CommentBox to CommentText below,how to do it using simple onclick function?Something like ",
        "human_words_stopwords_removal_lemmatization": "hi , 'm new react.if want click button dom change rendered class commentbox commenttext , using simple onclick function ? something like",
        "title_stopwords_removal_lemmatization": "onclick change render"
    },
    {
        "issue_id": 127002122,
        "title": "Render static html client-side",
        "label": [
            "Type: Question"
        ],
        "date": "2016-01-16T05:16:13Z",
        "status": "closed",
        "description": "Is there any way to get a string of plain html from a react component, but on the client side?\n\nMy app has a design editor that lets you click elements and edit their style, nothing new there, but I'm re-making it from the ground up using react both for the app itself and for the templates that should be edited inside an iframe and then rendered elsewhere.\n\nAttaching click handlers to every editable element conditionally (eg: if the view is being rendered inside an iframe, for the editor) would be a nightmare, and I can't just use jquery $('.is-editable').click() like I used to because of the virtual DOM.\n\nTaking all that in account, it seems that the only solution is rendering the would-be-edited view as plain HTML so I can use the $('.is-editable').click() approach inside my editor.\n\nAny insights or similar experiences?\n",
        "remove_template_description": "Is there any way to get a string of plain html from a react component, but on the client side?  My app has a design editor that lets you click elements and edit their style, nothing new there, but I'm re-making it from the ground up using react both for the app itself and for the templates that should be edited inside an iframe and then rendered elsewhere.  Attaching click handlers to every editable element conditionally (eg: if the view is being rendered inside an iframe, for the editor) would be a nightmare, and I can't just use jquery $('.is-editable').click() like I used to because of the virtual DOM.  Taking all that in account, it seems that the only solution is rendering the would-be-edited view as plain HTML so I can use the $('.is-editable').click() approach inside my editor.  Any insights or similar experiences?",
        "human_words": "Is there any way to get a string of plain html from a react component, but on the client side?  My app has a design editor that lets you click elements and edit their style, nothing new there, but I'm re-making it from the ground up using react both for the app itself and for the templates that should be edited inside an iframe and then rendered elsewhere.  Attaching click handlers to every editable element conditionally (eg: if the view is being rendered inside an iframe, for the editor) would be a nightmare, and I can't just use jquery $('.is-editable').click() like I used to because of the virtual DOM.  Taking all that in account, it seems that the only solution is rendering the would-be-edited view as plain HTML so I can use the $('.is-editable').click() approach inside my editor.  Any insights or similar experiences?",
        "human_words_regrex": "Is there any way to get a string of plain html from a react component, but on the client side? My app has a design editor that lets you click elements and edit their style, nothing new there, but I'm re-making it from the ground up using react both for the app itself and for the templates that should be edited inside an iframe and then rendered elsewhere. Attaching click handlers to every editable element conditionally (eg: if the view is being rendered inside an iframe, for the editor) would be a nightmare, and I can't just use jquery $('.is-editable').click() like I used to because of the virtual DOM. Taking all that in account, it seems that the only solution is rendering the would-be-edited view as plain HTML so I can use the $('.is-editable').click() approach inside my editor. Any insights or similar experiences?",
        "human_words_stopwords_removal_lemmatization": "way get string plain html react component , client side ? app design editor let click element edit style , nothing new , 'm re-making ground using react app template edited inside iframe rendered elsewhere . attaching click handler every editable element conditionally ( eg : view rendered inside iframe , editor ) would nightmare , ca n't use jquery $ ( '.is-editable ' ) .click ( ) like used virtual dom . taking account , seems solution rendering would-be-edited view plain html use $ ( '.is-editable ' ) .click ( ) approach inside editor . insight similar experience ?",
        "title_stopwords_removal_lemmatization": "render static html client-side"
    },
    {
        "issue_id": 126841370,
        "title": "Issue with ReactCSSTransitionGroup",
        "label": [
            "Type: Question"
        ],
        "date": "2016-01-15T09:59:42Z",
        "status": "closed",
        "description": "I'm getting this error \n\nUncaught Invariant Violation: addComponentAsRefTo(...): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component's `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).\n\nafter installing ReactCSSTransitionGroup and It seems that I have only one copy of react running.\n\nI'm using gulp and browserify to package the app.\n\n+-- babel-preset-react@6.3.13\n| +-- babel-plugin-transform-react-display-name@6.3.13\n| +-- babel-plugin-transform-react-jsx@6.3.13\n| | `-- babel-helper-builder-react-jsx@6.3.13\n|`-- babel-plugin-transform-react-jsx-source@6.3.13\n+-- eslint-plugin-react@3.15.0\n+-- formsy-react@0.17.0\n+-- react@0.14.6\n+-- react-addons-css-transition-group@0.14.6\n+-- react-dom@0.14.6\n+-- react-router@1.0.3\n",
        "remove_template_description": "I'm getting this error   Uncaught Invariant Violation: addComponentAsRefTo(...): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component's `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).  after installing ReactCSSTransitionGroup and It seems that I have only one copy of react running.  I'm using gulp and browserify to package the app.  +-- babel-preset-react@6.3.13 | +-- babel-plugin-transform-react-display-name@6.3.13 | +-- babel-plugin-transform-react-jsx@6.3.13 | | `-- babel-helper-builder-react-jsx@6.3.13 |`-- babel-plugin-transform-react-jsx-source@6.3.13 +-- eslint-plugin-react@3.15.0 +-- formsy-react@0.17.0 +-- react@0.14.6 +-- react-addons-css-transition-group@0.14.6 +-- react-dom@0.14.6 +-- react-router@1.0.3",
        "human_words": "I'm getting this error   Uncaught Invariant Violation: addComponentAsRefTo(...): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component's `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).  after installing ReactCSSTransitionGroup and It seems that I have only one copy of react running.  I'm using gulp and browserify to package the app.  +-- babel-preset-react@6.3.13 | +-- babel-plugin-transform-react-display-name@6.3.13 | +-- babel-plugin-transform-react-jsx@6.3.13 | | `-- babel-helper-builder-react-jsx@6.3.13 |`-- babel-plugin-transform-react-jsx-source@6.3.13 +-- eslint-plugin-react@3.15.0 +-- formsy-react@0.17.0 +-- react@0.14.6 +-- react-addons-css-transition-group@0.14.6 +-- react-dom@0.14.6 +-- react-router@1.0.3",
        "human_words_regrex": "I'm getting this error Uncaught Invariant Violation: addComponentAsRefTo(...): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component's `render` method, or you have multiple copies of React loaded (details:  after installing ReactCSSTransitionGroup and It seems that I have only one copy of react running. I'm using gulp and browserify to package the app. +-- babel-preset-react@6.3.13 | +-- babel-plugin-transform-react-display-name@6.3.13 | +-- babel-plugin-transform-react-jsx@6.3.13 | | `-- babel-helper-builder-react-jsx@6.3.13 |`-- babel-plugin-transform-react-jsx-source@6.3.13 +-- eslint-plugin-react@3.15.0 +-- formsy-react@0.17.0 +-- react@0.14.6 +-- react-addons-css-transition-group@0.14.6 +-- react-dom@0.14.6 +-- react-router@1.0.3",
        "human_words_stopwords_removal_lemmatization": "'m getting error uncaught invariant violation : addcomponentasrefto ( ... ) : reactowner ref . might adding ref component created inside component 's ` render ` method , multiple copy react loaded ( detail : installing reactcsstransitiongroup seems one copy react running . 'm using gulp browserify package app . + -- babel-preset-react @ 6.3.13 | + -- babel-plugin-transform-react-display-name @ 6.3.13 | + -- babel-plugin-transform-react-jsx @ 6.3.13 | | ` -- babel-helper-builder-react-jsx @ 6.3.13 | ` -- babel-plugin-transform-react-jsx-source @ 6.3.13 + -- eslint-plugin-react @ 3.15.0 + -- formsy-react @ 0.17.0 + -- react @ 0.14.6 + -- react-addons-css-transition-group @ 0.14.6 + -- react-dom @ 0.14.6 + -- react-router @ 1.0.3",
        "title_stopwords_removal_lemmatization": "issue reactcsstransitiongroup"
    },
    {
        "issue_id": 126540349,
        "title": "Tips Documentation on accessing props of the children",
        "label": [
            "Type: Question"
        ],
        "date": "2016-01-13T23:26:03Z",
        "status": "closed",
        "description": "e.g.\nhttp://codepen.io/moodysalem/pen/obeWRr?editors=001\n\nIs this something you should avoid doing?\n",
        "remove_template_description": "e.g. http://codepen.io/moodysalem/pen/obeWRr?editors=001  Is this something you should avoid doing?",
        "human_words": "e.g. http://codepen.io/moodysalem/pen/obeWRr?editors=001  Is this something you should avoid doing?",
        "human_words_regrex": "e.g.  Is this something you should avoid doing?",
        "human_words_stopwords_removal_lemmatization": "e.g . something avoid ?",
        "title_stopwords_removal_lemmatization": "tip documentation accessing prop child"
    },
    {
        "issue_id": 126481056,
        "title": "Enormous data-reactid",
        "label": [
            "Type: Question"
        ],
        "date": "2016-01-13T18:20:57Z",
        "status": "closed",
        "description": "I'm developing a big GUI application. Chrome Developer Tools are lagging because of `data-reactid`s reaching a hundred kilobytes in size. Here's a (small) example:\n\n```\n .0.$=1$=011.0.$=1$=01$0.0.0.$///=11//=1$//=011/=1$//=011/=01$/=0011.0.$//////=10/////=1$/////=010////=1$/////=010////=01$////=0010///=1$/////=010////=01$////=0010///=01$////=0010///=001$///=00010//=1$/////=010////=01$////=0010///=01$////=0010///=001$///=00010//=01$////=0010///=001$///=00010//=001$///=00010//=0001$//=000010/=1$/////=010////=01$////=0010///=01$////=0010///=001$///=00010//=01$////=0010///=001$///=00010//=001$///=00010//=0001$//=000010/=01$////=0010///=001$///=00010//=001$///=00010//=0001$//=000010/=001$///=00010//=0001$//=000010/=0001$//=000010/=00001$/=0000010.$///////=11//////=1$//////=011/////=1$//////=011/////=01$/////=0011////=1$//////=011/////=01$/////=0011////=01$/////=0011////=001$////=00011///=1$//////=011/////=01$/////=0011////=01$/////=0011////=001$////=00011///=01$/////=0011////=001$////=00011///=001$////=00011///=0001$///=000011//=1$//////=011/////=01$/////=0011////=01$/////=0011////=001$////=00011///=01$/////=0011////=001$////=00011///=001$////=00011///=0001$///=000011//=01$/////=0011////=001$////=00011///=001$////=00011///=0001$///=000011//=001$////=00011///=0001$///=000011//=0001$///=000011//=00001$//=0000011/=1$//////=011/////=01$/////=0011////=01$/////=0011////=001$////=00011///=01$/////=0011////=001$////=00011///=001$////=00011///=0001$///=000011//=01$/////=0011////=001$////=00011///=001$////=00011///=0001$///=000011//=001$////=00011///=0001$///=000011//=0001$///=000011//=00001$//=0000011/=01$/////=0011////=001$////=00011///=001$////=00011///=0001$///=000011//=001$////=00011///=0001$///=000011//=0001$///=000011//=00001$//=0000011/=001$////=00011///=0001$///=000011//=0001$///=000011//=00001$//=0000011/=0001$///=000011//=00001$//=0000011/=00001$//=0000011/=000001$/=00000011.0.0.$=1$=01$=001$=00012.0.0.$10/=1$10.$/=11\n```\n\nWhat do I do wrong? How `data-reactid` is computed (roughly)? Could you create a paragraph somewhere in the performance manual on this issue?\n",
        "remove_template_description": "I'm developing a big GUI application. Chrome Developer Tools are lagging because of `data-reactid`s reaching a hundred kilobytes in size. Here's a (small) example:  ```  .0.$=1$=011.0.$=1$=01$0.0.0.$///=11//=1$//=011/=1$//=011/=01$/=0011.0.$//////=10/////=1$/////=010////=1$/////=010////=01$////=0010///=1$/////=010////=01$////=0010///=01$////=0010///=001$///=00010//=1$/////=010////=01$////=0010///=01$////=0010///=001$///=00010//=01$////=0010///=001$///=00010//=001$///=00010//=0001$//=000010/=1$/////=010////=01$////=0010///=01$////=0010///=001$///=00010//=01$////=0010///=001$///=00010//=001$///=00010//=0001$//=000010/=01$////=0010///=001$///=00010//=001$///=00010//=0001$//=000010/=001$///=00010//=0001$//=000010/=0001$//=000010/=00001$/=0000010.$///////=11//////=1$//////=011/////=1$//////=011/////=01$/////=0011////=1$//////=011/////=01$/////=0011////=01$/////=0011////=001$////=00011///=1$//////=011/////=01$/////=0011////=01$/////=0011////=001$////=00011///=01$/////=0011////=001$////=00011///=001$////=00011///=0001$///=000011//=1$//////=011/////=01$/////=0011////=01$/////=0011////=001$////=00011///=01$/////=0011////=001$////=00011///=001$////=00011///=0001$///=000011//=01$/////=0011////=001$////=00011///=001$////=00011///=0001$///=000011//=001$////=00011///=0001$///=000011//=0001$///=000011//=00001$//=0000011/=1$//////=011/////=01$/////=0011////=01$/////=0011////=001$////=00011///=01$/////=0011////=001$////=00011///=001$////=00011///=0001$///=000011//=01$/////=0011////=001$////=00011///=001$////=00011///=0001$///=000011//=001$////=00011///=0001$///=000011//=0001$///=000011//=00001$//=0000011/=01$/////=0011////=001$////=00011///=001$////=00011///=0001$///=000011//=001$////=00011///=0001$///=000011//=0001$///=000011//=00001$//=0000011/=001$////=00011///=0001$///=000011//=0001$///=000011//=00001$//=0000011/=0001$///=000011//=00001$//=0000011/=00001$//=0000011/=000001$/=00000011.0.0.$=1$=01$=001$=00012.0.0.$10/=1$10.$/=11 ```  What do I do wrong? How `data-reactid` is computed (roughly)? Could you create a paragraph somewhere in the performance manual on this issue?",
        "human_words": "I'm developing a big GUI application. Chrome Developer Tools are lagging because of `data-reactid`s reaching a hundred kilobytes in size. Here's a (small) example:    What do I do wrong? How `data-reactid` is computed (roughly)? Could you create a paragraph somewhere in the performance manual on this issue?",
        "human_words_regrex": "I'm developing a big GUI application. Chrome Developer Tools are lagging because of `data-reactid`s reaching a hundred kilobytes in size. Here's a (small) example: What do I do wrong? How `data-reactid` is computed (roughly)? Could you create a paragraph somewhere in the performance manual on this issue?",
        "human_words_stopwords_removal_lemmatization": "'m developing big gui application . chrome developer tool lagging ` data-reactid ` reaching hundred kilobyte size . 's ( small ) example : wrong ? ` data-reactid ` computed ( roughly ) ? could create paragraph somewhere performance manual issue ?",
        "title_stopwords_removal_lemmatization": "enormous data-reactid"
    },
    {
        "issue_id": 126389424,
        "title": "onWheel Stop bubbling is not happening.",
        "label": [
            "Type: Question",
            "Status: Unconfirmed"
        ],
        "date": "2016-01-13T10:34:43Z",
        "status": "closed",
        "description": "> **My Target:** I am having a div which scrolls. But on coming to the top or the bottom after the scrolling the div, the scrolling starts happening on the entire page itself which I don't want. I think it's happening due to event propagation, so I am trying to stop in following manner.\n> \n> **My Implementation:** I am using \"extends Component (es6 way)\" to create my components. And I've put onWheel event listener as  \n> \n> ```\n> return (\n>   <div className='scroll-box-list' onWheel = {(e)=>{console.log('Scrolling Me..'); e.stopPropagation();}}>\n>       <OtherThings />\n>   </div>\n> );\n> ```\n> \n> It's consoling out 'Scrolling Me' fine but I am not able to stop propagating this event to the parent.\n> **Not sure why stopPropagation is not happening exactly or whether this issue is happening because of propagation**\n> \n> I don't want to use libraries which used mixins, so please don't suggest me this way.\n",
        "remove_template_description": "> **My Target:** I am having a div which scrolls. But on coming to the top or the bottom after the scrolling the div, the scrolling starts happening on the entire page itself which I don't want. I think it's happening due to event propagation, so I am trying to stop in following manner. >  > **My Implementation:** I am using \"extends Component (es6 way)\" to create my components. And I've put onWheel event listener as   >  > ``` > return ( >   <div className='scroll-box-list' onWheel = {(e)=>{console.log('Scrolling Me..'); e.stopPropagation();}}> >       <OtherThings /> >   </div> > ); > ``` >  > It's consoling out 'Scrolling Me' fine but I am not able to stop propagating this event to the parent. > **Not sure why stopPropagation is not happening exactly or whether this issue is happening because of propagation** >  > I don't want to use libraries which used mixins, so please don't suggest me this way.",
        "human_words": "> **My Target:** I am having a div which scrolls. But on coming to the top or the bottom after the scrolling the div, the scrolling starts happening on the entire page itself which I don't want. I think it's happening due to event propagation, so I am trying to stop in following manner. >  > **My Implementation:** I am using \"extends Component (es6 way)\" to create my components. And I've put onWheel event listener as   >  >  >  > It's consoling out 'Scrolling Me' fine but I am not able to stop propagating this event to the parent. > **Not sure why stopPropagation is not happening exactly or whether this issue is happening because of propagation** >  > I don't want to use libraries which used mixins, so please don't suggest me this way.",
        "human_words_regrex": "> **My Target:** I am having a div which scrolls. But on coming to the top or the bottom after the scrolling the div, the scrolling starts happening on the entire page itself which I don't want. I think it's happening due to event propagation, so I am trying to stop in following manner. > > **My Implementation:** I am using \"extends Component (es6 way)\" to create my components. And I've put onWheel event listener as > > > > It's consoling out 'Scrolling Me' fine but I am not able to stop propagating this event to the parent. > **Not sure why stopPropagation is not happening exactly or whether this issue is happening because of propagation** > > I don't want to use libraries which used mixins, so please don't suggest me this way.",
        "human_words_stopwords_removal_lemmatization": "> * * target : * * div scroll . coming top bottom scrolling div , scrolling start happening entire page n't want . think 's happening due event propagation , trying stop following manner . > > * * implementation : * * using `` extends component ( es6 way ) '' create component . 've put onwheel event listener > > > > 's consoling 'scrolling ' fine able stop propagating event parent . > * * sure stoppropagation happening exactly whether issue happening propagation * * > > n't want use library used mixins , please n't suggest way .",
        "title_stopwords_removal_lemmatization": "onwheel stop bubbling happening ."
    },
    {
        "issue_id": 126063776,
        "title": "componentDidMount is called before render is completly done",
        "label": [
            "Type: Question",
            "Status: Unconfirmed"
        ],
        "date": "2016-01-11T23:39:45Z",
        "status": "closed",
        "description": "Hi,\n\nAs much as I understand React component lifecycle, `componentDidMount()` should fire after `render()` is done, but I just found out today that this is not the case, and I'm not sure if this is a bug or lack of understanding from my side.\n\nIf I call a function that return some `jsx` inside `render()`, it always run after `componentDidMount()`, so if I have this setup, `componentDidMount()` always finish before `_renderTable()` or `_renderMessage()`\n\n``` jsx\nexport default class Table extends React.Component {\ncomponentDidMount() {\n...\n}\n\nrender() {\n  const content = this.props.valid ? this._renderTable() : this._renderMessage()\n  return (\n    {content}\n  )\n}\n_renderTable() {...}\n_renderMessage() {...}\n}\n```\n\nAm I missing something? or is it some bug? Thanks!\n",
        "remove_template_description": "Hi,  As much as I understand React component lifecycle, `componentDidMount()` should fire after `render()` is done, but I just found out today that this is not the case, and I'm not sure if this is a bug or lack of understanding from my side.  If I call a function that return some `jsx` inside `render()`, it always run after `componentDidMount()`, so if I have this setup, `componentDidMount()` always finish before `_renderTable()` or `_renderMessage()`  ``` jsx export default class Table extends React.Component { componentDidMount() { ... }  render() {   const content = this.props.valid ? this._renderTable() : this._renderMessage()   return (     {content}   ) } _renderTable() {...} _renderMessage() {...} } ```  Am I missing something? or is it some bug? Thanks!",
        "human_words": "Hi,  As much as I understand React component lifecycle, `componentDidMount()` should fire after `render()` is done, but I just found out today that this is not the case, and I'm not sure if this is a bug or lack of understanding from my side.  If I call a function that return some `jsx` inside `render()`, it always run after `componentDidMount()`, so if I have this setup, `componentDidMount()` always finish before `_renderTable()` or `_renderMessage()`    Am I missing something? or is it some bug? Thanks!",
        "human_words_regrex": "Hi, As much as I understand React component lifecycle, `componentDidMount()` should fire after `render()` is done, but I just found out today that this is not the case, and I'm not sure if this is a bug or lack of understanding from my side. If I call a function that return some `jsx` inside `render()`, it always run after `componentDidMount()`, so if I have this setup, `componentDidMount()` always finish before `_renderTable()` or `_renderMessage()` Am I missing something? or is it some bug? Thanks!",
        "human_words_stopwords_removal_lemmatization": "hi , much understand react component lifecycle , ` componentdidmount ( ) ` fire ` render ( ) ` done , found today case , 'm sure bug lack understanding side . call function return ` jsx ` inside ` render ( ) ` , always run ` componentdidmount ( ) ` , setup , ` componentdidmount ( ) ` always finish ` _rendertable ( ) ` ` _rendermessage ( ) ` missing something ? bug ? thanks !",
        "title_stopwords_removal_lemmatization": "componentdidmount called render completly done"
    },
    {
        "issue_id": 125563351,
        "title": "Drag n Drop elements sorting. ",
        "label": [
            "Type: Question"
        ],
        "date": "2016-01-08T08:10:52Z",
        "status": "closed",
        "description": "Hello, I need advice about drag n drop sorting with react. \n###### 1) Start\n\nData:\n\n``` js\n[\"one\", \"two\", \"three\"]\n```\n\nRendered DOM:\n\n``` html\n<ul>\n    <li>one</li>\n    <li>two</li>\n    <li>three</li>\n</ul>\n```\n###### 2) After manual sorting with drag n drop\n\nData:\n\n``` js\n[\"one\", \"two\", \"three\"]\n```\n\nRendered DOM:\n\n``` html\n<ul>\n    <li>three</li>\n    <li>one</li>\n    <li>two</li>\n</ul>\n```\n###### 3) Changing data\n\nData:\n\n``` js\n[\"three\", \"one\", \"two\"]\n```\n\nReact apply changes from array to dom:\n\n``` html\n<ul>\n    <li>two</li>\n    <li>three</li>\n    <li>one</li>\n</ul>\n```\n\nfor this reason i have to refund dom element to his place (`container.insertBefore(item, itemOldSibling)`):\n\n``` html\n<ul>\n    <li>three</li>\n    <li>one</li>\n    <li>two</li>\n</ul>\n```\n###### Problem:\n\nIf i have deep nesting of components\n\n``` html\n...\n<ul>\n    <li><SomeOtherComponent data={...}/></li>\n    <li>one</li>\n    <li>two</li>\n</ul>\n...\n```\n\nreact do full rerender and \n1) is no longer needed `insertBefore`\n2) If left `insertBefore`, it falls with an error because `item` and `itemOldSibling` no longer exist.\n\nWhether there is a normal way to dnd sorting with react?\n",
        "remove_template_description": "Hello, I need advice about drag n drop sorting with react.  ###### 1) Start  Data:  ``` js [\"one\", \"two\", \"three\"] ```  Rendered DOM:  ``` html <ul>     <li>one</li>     <li>two</li>     <li>three</li> </ul> ``` ###### 2) After manual sorting with drag n drop  Data:  ``` js [\"one\", \"two\", \"three\"] ```  Rendered DOM:  ``` html <ul>     <li>three</li>     <li>one</li>     <li>two</li> </ul> ``` ###### 3) Changing data  Data:  ``` js [\"three\", \"one\", \"two\"] ```  React apply changes from array to dom:  ``` html <ul>     <li>two</li>     <li>three</li>     <li>one</li> </ul> ```  for this reason i have to refund dom element to his place (`container.insertBefore(item, itemOldSibling)`):  ``` html <ul>     <li>three</li>     <li>one</li>     <li>two</li> </ul> ``` ###### Problem:  If i have deep nesting of components  ``` html ... <ul>     <li><SomeOtherComponent data={...}/></li>     <li>one</li>     <li>two</li> </ul> ... ```  react do full rerender and  1) is no longer needed `insertBefore` 2) If left `insertBefore`, it falls with an error because `item` and `itemOldSibling` no longer exist.  Whether there is a normal way to dnd sorting with react?",
        "human_words": "Hello, I need advice about drag n drop sorting with react.  ###### 1) Start  Data:    Rendered DOM:   ###### 2) After manual sorting with drag n drop  Data:    Rendered DOM:   ###### 3) Changing data  Data:    React apply changes from array to dom:    for this reason i have to refund dom element to his place (`container.insertBefore(item, itemOldSibling)`):   ###### Problem:  If i have deep nesting of components    react do full rerender and  1) is no longer needed `insertBefore` 2) If left `insertBefore`, it falls with an error because `item` and `itemOldSibling` no longer exist.  Whether there is a normal way to dnd sorting with react?",
        "human_words_regrex": "Hello, I need advice about drag n drop sorting with react. ###### 1) Start Data: Rendered DOM: ###### 2) After manual sorting with drag n drop Data: Rendered DOM: ###### 3) Changing data Data: React apply changes from array to dom: for this reason i have to refund dom element to his place (`container.insertBefore(item, itemOldSibling)`): ###### Problem: If i have deep nesting of components react do full rerender and 1) is no longer needed `insertBefore` 2) If left `insertBefore`, it falls with an error because `item` and `itemOldSibling` no longer exist. Whether there is a normal way to dnd sorting with react?",
        "human_words_stopwords_removal_lemmatization": "hello , need advice drag n drop sorting react . # # # # # # 1 ) start data : rendered dom : # # # # # # 2 ) manual sorting drag n drop data : rendered dom : # # # # # # 3 ) changing data data : react apply change array dom : reason refund dom element place ( ` container.insertbefore ( item , itemoldsibling ) ` ) : # # # # # # problem : deep nesting component react full rerender 1 ) longer needed ` insertbefore ` 2 ) left ` insertbefore ` , fall error ` item ` ` itemoldsibling ` longer exist . whether normal way dnd sorting react ?",
        "title_stopwords_removal_lemmatization": "drag n drop element sorting ."
    },
    {
        "issue_id": 124350957,
        "title": "Way to create pluggable Decorating Component",
        "label": [
            "Type: Question"
        ],
        "date": "2015-12-30T13:54:42Z",
        "status": "closed",
        "description": "How is it possible to make **pluggable** AOP-style component which transforms props and transmits it to child? More precisely, how to pass props to child element in parent render method?\nI want to use it like this:\n\n``` javascript\n// Scalable.js\n// Example of AOP-style decorating component\nimport React from 'react'\n\nconst Scalable = ({children}) =>\n  const scaledData = children.props.data.map(e => e + 1) // example 'transformation'\n  children.props.data = scaledData\n  {children}  // this is what i want\n\nScalable.propTypes = {\n  children: React.PropTypes.element.isRequired\n}\n```\n\n``` javascript\n// ScalablePlot.js\n// plug <Scalable /> to transform data passed to <Plot />\n// and render <Plot /> with transformed data\nimport React from 'react'\n\nconst ScalablePlot = ({data}) =>\n  <Scalable>\n    <Plot data={data} />\n  </Scalable>\n```\n\n``` js\n// Plot.js\nimport React from 'react'\n\nconst Plot = ({data}) ->\n  //paint plot using data\n\nPlot.propTypes = {\n  data: React.PropTypes.arrayOf(React.PropTypes.number)\n}\n```\n\nHowever, when i do this, react renders child element without data props.\n# UPD\n\nSolution: should have used [React.cloneElement](https://facebook.github.io/react/docs/top-level-api.html#react.cloneelement)\n",
        "remove_template_description": "How is it possible to make **pluggable** AOP-style component which transforms props and transmits it to child? More precisely, how to pass props to child element in parent render method? I want to use it like this:  ``` javascript // Scalable.js // Example of AOP-style decorating component import React from 'react'  const Scalable = ({children}) =>   const scaledData = children.props.data.map(e => e + 1) // example 'transformation'   children.props.data = scaledData   {children}  // this is what i want  Scalable.propTypes = {   children: React.PropTypes.element.isRequired } ```  ``` javascript // ScalablePlot.js // plug <Scalable /> to transform data passed to <Plot /> // and render <Plot /> with transformed data import React from 'react'  const ScalablePlot = ({data}) =>   <Scalable>     <Plot data={data} />   </Scalable> ```  ``` js // Plot.js import React from 'react'  const Plot = ({data}) ->   //paint plot using data  Plot.propTypes = {   data: React.PropTypes.arrayOf(React.PropTypes.number) } ```  However, when i do this, react renders child element without data props. # UPD  Solution: should have used [React.cloneElement](https://facebook.github.io/react/docs/top-level-api.html#react.cloneelement)",
        "human_words": "How is it possible to make **pluggable** AOP-style component which transforms props and transmits it to child? More precisely, how to pass props to child element in parent render method? I want to use it like this:        However, when i do this, react renders child element without data props. # UPD  Solution: should have used [React.cloneElement](https://facebook.github.io/react/docs/top-level-api.html#react.cloneelement)",
        "human_words_regrex": "How is it possible to make **pluggable** AOP-style component which transforms props and transmits it to child? More precisely, how to pass props to child element in parent render method? I want to use it like this: However, when i do this, react renders child element without data props. # UPD Solution: should have used ",
        "human_words_stopwords_removal_lemmatization": "possible make * * pluggable * * aop-style component transforms prop transmits child ? precisely , pas prop child element parent render method ? want use like : however , , react render child element without data prop . # upd solution : used",
        "title_stopwords_removal_lemmatization": "way create pluggable decorating component"
    },
    {
        "issue_id": 123843706,
        "title": "Difference between currentTarget and target of SyntheticEvent",
        "label": [
            "Type: Question",
            "Status: Unconfirmed"
        ],
        "date": "2015-12-25T01:41:09Z",
        "status": "closed",
        "description": "There is 2 properties in SyntheticEvent, currentTarget and target.\nIt is identical usage? or what is the difference between them?\n",
        "remove_template_description": "There is 2 properties in SyntheticEvent, currentTarget and target. It is identical usage? or what is the difference between them?",
        "human_words": "There is 2 properties in SyntheticEvent, currentTarget and target. It is identical usage? or what is the difference between them?",
        "human_words_regrex": "There is 2 properties in SyntheticEvent, currentTarget and target. It is identical usage? or what is the difference between them?",
        "human_words_stopwords_removal_lemmatization": "2 property syntheticevent , currenttarget target . identical usage ? difference ?",
        "title_stopwords_removal_lemmatization": "difference currenttarget target syntheticevent"
    },
    {
        "issue_id": 123563820,
        "title": "Server and Client render the same markup, but React still indicates checksum invalid",
        "label": [
            "Type: Question"
        ],
        "date": "2015-12-22T21:58:05Z",
        "status": "closed",
        "description": "![screenshot 2015-12-22 15 57 53](https://cloud.githubusercontent.com/assets/6501089/11966958/c7821ccc-a8c4-11e5-9aaa-f2c663762a63.png)\n",
        "remove_template_description": "![screenshot 2015-12-22 15 57 53](https://cloud.githubusercontent.com/assets/6501089/11966958/c7821ccc-a8c4-11e5-9aaa-f2c663762a63.png)",
        "human_words": "![screenshot 2015-12-22 15 57 53](https://cloud.githubusercontent.com/assets/6501089/11966958/c7821ccc-a8c4-11e5-9aaa-f2c663762a63.png)",
        "human_words_regrex": "!",
        "human_words_stopwords_removal_lemmatization": "!",
        "title_stopwords_removal_lemmatization": "server client render markup , react still indicates checksum invalid"
    },
    {
        "issue_id": 123472002,
        "title": "diff/patch with markdown preview",
        "label": [
            "Type: Question"
        ],
        "date": "2015-12-22T12:16:25Z",
        "status": "closed",
        "description": "When I preview huge markdown file with changes, dangerouslySetInnerHTML is very slow,\ncan I use react to smart innerHTML? I don't know how to do it, thx.\n",
        "remove_template_description": "When I preview huge markdown file with changes, dangerouslySetInnerHTML is very slow, can I use react to smart innerHTML? I don't know how to do it, thx.",
        "human_words": "When I preview huge markdown file with changes, dangerouslySetInnerHTML is very slow, can I use react to smart innerHTML? I don't know how to do it, thx.",
        "human_words_regrex": "When I preview huge markdown file with changes, dangerouslySetInnerHTML is very slow, can I use react to smart innerHTML? I don't know how to do it, thx.",
        "human_words_stopwords_removal_lemmatization": "preview huge markdown file change , dangerouslysetinnerhtml slow , use react smart innerhtml ? n't know , thx .",
        "title_stopwords_removal_lemmatization": "diff/patch markdown preview"
    },
    {
        "issue_id": 122860573,
        "title": "How would one pass LaTeX code into a component?",
        "label": [
            "Type: Question"
        ],
        "date": "2015-12-18T01:53:51Z",
        "status": "closed",
        "description": "I have the fairly rare, but given the internet by no means unusual, situation where I need to embed LaTeX code that needs to be interpreted later (by a MathJax, or KaTeX, etc). The following code doesn't work due to JSX intepretation of the bits inside `{...}`:\n\n```\n<p>\\[\n  p_1 = some\\ point, \\\\\n  p_2 = some\\ other\\ point, \\\\\n  distance = (p_2 - p_1), \\\\\n  ratio = \\frac{percentage}{100}, \\\\\n  new\\ point = p_1 + distance \\cdot ratio\n\\]</p>\n```\n\nUsing ES2015 tempating strings also doesn't work, because then the `\\` gets interpreted instead:\n\n```\n<p>{`\\[\n  p_1 = some\\ point, \\\\\n  p_2 = some\\ other\\ point, \\\\\n  distance = (p_2 - p_1), \\\\\n  ratio = \\frac{percentage}{100}, \\\\\n  new\\ point = p_1 + distance \\cdot ratio\n\\]`}</p>\n```\n\nAnd of coure, double escaping all the `\\` works but becomes _impossible_ to read or write:\n\n```\n<p>{`\\\\[\n  p_1 = some\\\\ point, \\\\\\\\\n  p_2 = some\\\\ other\\\\ point, \\\\\\\\\n  distance = (p_2 - p_1), \\\\\\\\\n  ratio = \\\\frac{percentage}{100}, \\\\\\\\\n  new\\\\ point = p_1 + distance \\\\cdot ratio\n\\\\]`}</p>\n```\n\nSo.. .is there a JSX feature that \"turns off\" interpretation for an element? Something like this, that treats the text inside the element as \"untouchable\"?\n\n```\n<p verbatim>\\[\n  p_1 = some\\ point, \\\\\n  p_2 = some\\ other\\ point, \\\\\n  distance = (p_2 - p_1), \\\\\n  ratio = \\frac{percentage}{100}, \\\\\n  new\\ point = p_1 + distance \\cdot ratio\n\\]</p>\n```\n",
        "remove_template_description": "I have the fairly rare, but given the internet by no means unusual, situation where I need to embed LaTeX code that needs to be interpreted later (by a MathJax, or KaTeX, etc). The following code doesn't work due to JSX intepretation of the bits inside `{...}`:  ``` <p>\\[   p_1 = some\\ point, \\\\   p_2 = some\\ other\\ point, \\\\   distance = (p_2 - p_1), \\\\   ratio = \\frac{percentage}{100}, \\\\   new\\ point = p_1 + distance \\cdot ratio \\]</p> ```  Using ES2015 tempating strings also doesn't work, because then the `\\` gets interpreted instead:  ``` <p>{`\\[   p_1 = some\\ point, \\\\   p_2 = some\\ other\\ point, \\\\   distance = (p_2 - p_1), \\\\   ratio = \\frac{percentage}{100}, \\\\   new\\ point = p_1 + distance \\cdot ratio \\]`}</p> ```  And of coure, double escaping all the `\\` works but becomes _impossible_ to read or write:  ``` <p>{`\\\\[   p_1 = some\\\\ point, \\\\\\\\   p_2 = some\\\\ other\\\\ point, \\\\\\\\   distance = (p_2 - p_1), \\\\\\\\   ratio = \\\\frac{percentage}{100}, \\\\\\\\   new\\\\ point = p_1 + distance \\\\cdot ratio \\\\]`}</p> ```  So.. .is there a JSX feature that \"turns off\" interpretation for an element? Something like this, that treats the text inside the element as \"untouchable\"?  ``` <p verbatim>\\[   p_1 = some\\ point, \\\\   p_2 = some\\ other\\ point, \\\\   distance = (p_2 - p_1), \\\\   ratio = \\frac{percentage}{100}, \\\\   new\\ point = p_1 + distance \\cdot ratio \\]</p> ```",
        "human_words": "I have the fairly rare, but given the internet by no means unusual, situation where I need to embed LaTeX code that needs to be interpreted later (by a MathJax, or KaTeX, etc). The following code doesn't work due to JSX intepretation of the bits inside `{...}`:    Using ES2015 tempating strings also doesn't work, because then the `\\` gets interpreted instead:    And of coure, double escaping all the `\\` works but becomes _impossible_ to read or write:    So.. .is there a JSX feature that \"turns off\" interpretation for an element? Something like this, that treats the text inside the element as \"untouchable\"?  ",
        "human_words_regrex": "I have the fairly rare, but given the internet by no means unusual, situation where I need to embed LaTeX code that needs to be interpreted later (by a MathJax, or KaTeX, etc). The following code doesn't work due to JSX intepretation of the bits inside `{...}`: Using ES2015 tempating strings also doesn't work, because then the `\\` gets interpreted instead: And of coure, double escaping all the `\\` works but becomes _impossible_ to read or write: So.. .is there a JSX feature that \"turns off\" interpretation for an element? Something like this, that treats the text inside the element as \"untouchable\"? ",
        "human_words_stopwords_removal_lemmatization": "fairly rare , given internet mean unusual , situation need embed latex code need interpreted later ( mathjax , katex , etc ) . following code n't work due jsx intepretation bit inside ` { ... } ` : using es2015 tempating string also n't work , ` \\ ` get interpreted instead : coure , double escaping ` \\ ` work becomes _impossible_ read write : .. .is jsx feature `` turn '' interpretation element ? something like , treat text inside element `` untouchable '' ?",
        "title_stopwords_removal_lemmatization": "would one pas latex code component ?"
    },
    {
        "issue_id": 122498951,
        "title": "How to get the index of clicked element?",
        "label": [
            "Type: Question"
        ],
        "date": "2015-12-16T13:02:56Z",
        "status": "closed",
        "description": "I have some list item, and I want know which one is clicked by user,\nso I set onClik on every `<li>` item,\nand I user `event.target` to get the node clicked,\nbut I get this issue, my `<li>` items has children nodes,\nwhen user click the children inside the `<li>` element, \n`event.target` is not the element I want, how do I fix it?\n\nmy code:\n\n``` js\nvar React = require('react');\nvar ReactDOM = require('react-dom');\n\nvar CC = React.createClass({\n\n    handleClick: function(e) {\n        console.log(e.target.getAttribute('data-key'));\n    },\n\n    render: function() {\n        var s = {\n            border: '1px solid #ddd',\n            display: 'block',\n            padding: '10px'\n        };\n        var items = this.props.arr.map(function(a, i) {\n            return (\n                <li key={i} onClick={this.handleClick} style={s} data-key={i}>\n                    <img src=\"images/joy.png\"/>\n                </li>\n                );\n        }, this);\n\n        return (\n            <ul >\n                {items}\n            </ul>\n            );\n    }\n});\n\n\nvar App = React.createClass({\n    getInitialState: function () {\n        return {\n            arr: [1,2,3]\n        };\n    },\n\n    render: function() {\n        return (\n            <div>\n                <CC arr={this.state.arr}/>\n            </div>\n        );\n    }\n});\n\nReactDOM.render(<App/>, document.getElementById('app'));\n```\n\nwhen user click the `<img>` inside `<li>`,\n`e.target.getAttribute('data-key')` return `null`\n\nI do can fix it by add the `data-key` attribute to all of `<li>` element's children,\nlike:\n\n``` js\nvar items = this.props.arr.map(function(a, i) {\n    return (\n        <li key={i} onClick={this.handleClick} style={s} data-key={i}>\n            <img src=\"images/joy.png\" data-key={i} />\n        </li>\n        );\n}, this);\n```\n\nbut I don't think it is a elegant way.\n",
        "remove_template_description": "I have some list item, and I want know which one is clicked by user, so I set onClik on every `<li>` item, and I user `event.target` to get the node clicked, but I get this issue, my `<li>` items has children nodes, when user click the children inside the `<li>` element,  `event.target` is not the element I want, how do I fix it?  my code:  ``` js var React = require('react'); var ReactDOM = require('react-dom');  var CC = React.createClass({      handleClick: function(e) {         console.log(e.target.getAttribute('data-key'));     },      render: function() {         var s = {             border: '1px solid #ddd',             display: 'block',             padding: '10px'         };         var items = this.props.arr.map(function(a, i) {             return (                 <li key={i} onClick={this.handleClick} style={s} data-key={i}>                     <img src=\"images/joy.png\"/>                 </li>                 );         }, this);          return (             <ul >                 {items}             </ul>             );     } });   var App = React.createClass({     getInitialState: function () {         return {             arr: [1,2,3]         };     },      render: function() {         return (             <div>                 <CC arr={this.state.arr}/>             </div>         );     } });  ReactDOM.render(<App/>, document.getElementById('app')); ```  when user click the `<img>` inside `<li>`, `e.target.getAttribute('data-key')` return `null`  I do can fix it by add the `data-key` attribute to all of `<li>` element's children, like:  ``` js var items = this.props.arr.map(function(a, i) {     return (         <li key={i} onClick={this.handleClick} style={s} data-key={i}>             <img src=\"images/joy.png\" data-key={i} />         </li>         ); }, this); ```  but I don't think it is a elegant way.",
        "human_words": "I have some list item, and I want know which one is clicked by user, so I set onClik on every `<li>` item, and I user `event.target` to get the node clicked, but I get this issue, my `<li>` items has children nodes, when user click the children inside the `<li>` element,  `event.target` is not the element I want, how do I fix it?  my code:    when user click the `<img>` inside `<li>`, `e.target.getAttribute('data-key')` return `null`  I do can fix it by add the `data-key` attribute to all of `<li>` element's children, like:    but I don't think it is a elegant way.",
        "human_words_regrex": "I have some list item, and I want know which one is clicked by user, so I set onClik on every `` item, and I user `event.target` to get the node clicked, but I get this issue, my `` items has children nodes, when user click the children inside the `` element, `event.target` is not the element I want, how do I fix it? my code: when user click the `` inside ``, `e.target.getAttribute('data-key')` return `null` I do can fix it by add the `data-key` attribute to all of `` element's children, like: but I don't think it is a elegant way.",
        "human_words_stopwords_removal_lemmatization": "list item , want know one clicked user , set onclik every `` item , user ` event.target ` get node clicked , get issue , `` item child node , user click child inside `` element , ` event.target ` element want , fix ? code : user click `` inside `` , ` e.target.getattribute ( 'data-key ' ) ` return ` null ` fix add ` data-key ` attribute `` element 's child , like : n't think elegant way .",
        "title_stopwords_removal_lemmatization": "get index clicked element ?"
    },
    {
        "issue_id": 122131304,
        "title": "Stateless Component Performance",
        "label": [
            "Type: Question"
        ],
        "date": "2015-12-14T21:06:07Z",
        "status": "closed",
        "description": "Are stateless components optimized using React.createElement so they arent re-rendered if the props havent changed?\n\nhttps://facebook.github.io/react/docs/reusable-components.html#stateless-functions\n\nIf so, it would be nice to mention that in the docs. Because then there is a significant difference between the following:\n\n``` js\nSomeComponent = (props) => {\n  return <div>{props.hugeList.map(/*...*/)}</div>\n}\n\nPerformant = (props) => {\n  return <SomeComponent hugeList={props.friends}/>\n}\n\nNotPerformant = (props) => {\n  return SomeComponent({hugeList: props.friends})\n}\n```\n\nAnd it may not seem evident to someone thinking that they're just functions...\n",
        "remove_template_description": "Are stateless components optimized using React.createElement so they arent re-rendered if the props havent changed?  https://facebook.github.io/react/docs/reusable-components.html#stateless-functions  If so, it would be nice to mention that in the docs. Because then there is a significant difference between the following:  ``` js SomeComponent = (props) => {   return <div>{props.hugeList.map(/*...*/)}</div> }  Performant = (props) => {   return <SomeComponent hugeList={props.friends}/> }  NotPerformant = (props) => {   return SomeComponent({hugeList: props.friends}) } ```  And it may not seem evident to someone thinking that they're just functions...",
        "codes_and_errors": [
            " js SomeComponent = (props) => {   return <div>{props.hugeList.map(/*...*/)}</div> }  Performant = (props) => {   return <SomeComponent hugeList={props.friends}/> }  NotPerformant = (props) => {   return SomeComponent({hugeList: props.friends}) } "
        ],
        "human_words": "Are stateless components optimized using React.createElement so they arent re-rendered if the props havent changed?  https://facebook.github.io/react/docs/reusable-components.html#stateless-functions  If so, it would be nice to mention that in the docs. Because then there is a significant difference between the following:    And it may not seem evident to someone thinking that they're just functions...",
        "human_words_regrex": "Are stateless components optimized using React.createElement so they arent re-rendered if the props havent changed?  If so, it would be nice to mention that in the docs. Because then there is a significant difference between the following: And it may not seem evident to someone thinking that they're just functions..."
    },
    {
        "issue_id": 121975743,
        "title": "How to use server side rendering in React in Expressjs app?",
        "label": [
            "Type: Question"
        ],
        "date": "2015-12-14T05:13:46Z",
        "status": "closed",
        "description": "Documentation doesn't have neither any examples nor links to examples.\n\nI want to know how, step by step, to use React on a server in an Expressjs application. How component files should look, how they are connected to templates and layouts, how Expressjs' `response.render('template')` should behave if I render react on server, how to include React components in a template, should components be compiled in advance, and many other questions.\n\nIn particularly, I have a Dust.js template that is rendered this way in a controller:\n\n```\nrouter.get('/', function(req, res, next) {\n    res.render('index', {\n        title: 'Title',\n        page: 'index',\n        foo: 'Foo'\n    });\n});\n```\n\nI compile and concat my `js` assets in one `app.js` file and include it in my template like this:\n\n```\n        <script src=\"/js/app.js\" type=\"text/javascript\" charset=\"utf-8\" async></script>\n    </body>\n</html>\n```\n\nAnd now I want to know how to use React on a server. How I need to change my current routine to compile/render react AND my template on a server.\n\nFor now when I use `ReactDOMServer.renderToString` and `ReactDOMServer.renderToStaticMarkup` I get these errors and I don't know what does it mean because React documentation doesn't have any errors explanations:\n\n`Error: Invariant Violation: renderToStaticMarkup(): You must pass a valid ReactElement.`\n`TypeError: Cannot read property '__reactAutoBindMap' of undefined`\n",
        "remove_template_description": "Documentation doesn't have neither any examples nor links to examples.  I want to know how, step by step, to use React on a server in an Expressjs application. How component files should look, how they are connected to templates and layouts, how Expressjs' `response.render('template')` should behave if I render react on server, how to include React components in a template, should components be compiled in advance, and many other questions.  In particularly, I have a Dust.js template that is rendered this way in a controller:  ``` router.get('/', function(req, res, next) {     res.render('index', {         title: 'Title',         page: 'index',         foo: 'Foo'     }); }); ```  I compile and concat my `js` assets in one `app.js` file and include it in my template like this:  ```         <script src=\"/js/app.js\" type=\"text/javascript\" charset=\"utf-8\" async></script>     </body> </html> ```  And now I want to know how to use React on a server. How I need to change my current routine to compile/render react AND my template on a server.  For now when I use `ReactDOMServer.renderToString` and `ReactDOMServer.renderToStaticMarkup` I get these errors and I don't know what does it mean because React documentation doesn't have any errors explanations:  `Error: Invariant Violation: renderToStaticMarkup(): You must pass a valid ReactElement.` `TypeError: Cannot read property '__reactAutoBindMap' of undefined`",
        "human_words": "Documentation doesn't have neither any examples nor links to examples.  I want to know how, step by step, to use React on a server in an Expressjs application. How component files should look, how they are connected to templates and layouts, how Expressjs' `response.render('template')` should behave if I render react on server, how to include React components in a template, should components be compiled in advance, and many other questions.  In particularly, I have a Dust.js template that is rendered this way in a controller:    I compile and concat my `js` assets in one `app.js` file and include it in my template like this:    And now I want to know how to use React on a server. How I need to change my current routine to compile/render react AND my template on a server.  For now when I use `ReactDOMServer.renderToString` and `ReactDOMServer.renderToStaticMarkup` I get these errors and I don't know what does it mean because React documentation doesn't have any errors explanations:  `Error: Invariant Violation: renderToStaticMarkup(): You must pass a valid ReactElement.` `TypeError: Cannot read property '__reactAutoBindMap' of undefined`",
        "human_words_regrex": "Documentation doesn't have neither any examples nor links to examples. I want to know how, step by step, to use React on a server in an Expressjs application. How component files should look, how they are connected to templates and layouts, how Expressjs' `response.render('template')` should behave if I render react on server, how to include React components in a template, should components be compiled in advance, and many other questions. In particularly, I have a Dust.js template that is rendered this way in a controller: I compile and concat my `js` assets in one `app.js` file and include it in my template like this: And now I want to know how to use React on a server. How I need to change my current routine to compile/render react AND my template on a server. For now when I use `ReactDOMServer.renderToString` and `ReactDOMServer.renderToStaticMarkup` I get these errors and I don't know what does it mean because React documentation doesn't have any errors explanations: `Error: Invariant Violation: renderToStaticMarkup(): You must pass a valid ReactElement.` `TypeError: Cannot read property '__reactAutoBindMap' of undefined`",
        "human_words_stopwords_removal_lemmatization": "documentation n't neither example link example . want know , step step , use react server expressjs application . component file look , connected template layout , expressjs ' ` response.render ( 'template ' ) ` behave render react server , include react component template , component compiled advance , many question . particularly , dust.js template rendered way controller : compile concat ` j ` asset one ` app.js ` file include template like : want know use react server . need change current routine compile/render react template server . use ` reactdomserver.rendertostring ` ` reactdomserver.rendertostaticmarkup ` get error n't know mean react documentation n't error explanation : ` error : invariant violation : rendertostaticmarkup ( ) : must pas valid reactelement. ` ` typeerror : read property '__reactautobindmap ' undefined `",
        "title_stopwords_removal_lemmatization": "use server side rendering react expressjs app ?"
    },
    {
        "issue_id": 121797526,
        "title": "Optimizing componentWillReceiveProps and shouldComponentUpdate",
        "label": [
            "Type: Question"
        ],
        "date": "2015-12-11T21:45:33Z",
        "status": "closed",
        "description": "React component lifecycle dictates that when new props roll in, `componentWillReceiveProps` gets called, where you can calculate the new state and set it without a second cycle. Afterwards, shouldComponentUpdate gets called and we can compare props and state of last cycle with the next one.\n\nHowever, if state is a product of the props, it makes more sense to check whether the props have changed before calculating the state, so unnecessary calculations can be avoided. This produces some ugly looking code where `componentWillReceiveProps` first runs the code that would otherwise be in `shouldComponentUpdate` and based on that result sets a new state, or terminates. \n\nSimplified Example:\n\n```\ncomponentWillReceiveProps: function (nextProps) {\n    if (nextProps === this.props) {\n        return;\n    }\n\n    // Calculate new state\n    this.setState(...);\n},\n\nshouldComponentUpdate: function (nextProps, nextState) {\n    return this.state !== nextState;\n}\n```\n\nIs there a cleaner way of approaching this where no resources are wasted on unnecessary state calculations?\n",
        "remove_template_description": "React component lifecycle dictates that when new props roll in, `componentWillReceiveProps` gets called, where you can calculate the new state and set it without a second cycle. Afterwards, shouldComponentUpdate gets called and we can compare props and state of last cycle with the next one.  However, if state is a product of the props, it makes more sense to check whether the props have changed before calculating the state, so unnecessary calculations can be avoided. This produces some ugly looking code where `componentWillReceiveProps` first runs the code that would otherwise be in `shouldComponentUpdate` and based on that result sets a new state, or terminates.   Simplified Example:  ``` componentWillReceiveProps: function (nextProps) {     if (nextProps === this.props) {         return;     }      // Calculate new state     this.setState(...); },  shouldComponentUpdate: function (nextProps, nextState) {     return this.state !== nextState; } ```  Is there a cleaner way of approaching this where no resources are wasted on unnecessary state calculations?",
        "human_words": "React component lifecycle dictates that when new props roll in, `componentWillReceiveProps` gets called, where you can calculate the new state and set it without a second cycle. Afterwards, shouldComponentUpdate gets called and we can compare props and state of last cycle with the next one.  However, if state is a product of the props, it makes more sense to check whether the props have changed before calculating the state, so unnecessary calculations can be avoided. This produces some ugly looking code where `componentWillReceiveProps` first runs the code that would otherwise be in `shouldComponentUpdate` and based on that result sets a new state, or terminates.   Simplified Example:    Is there a cleaner way of approaching this where no resources are wasted on unnecessary state calculations?",
        "human_words_regrex": "React component lifecycle dictates that when new props roll in, `componentWillReceiveProps` gets called, where you can calculate the new state and set it without a second cycle. Afterwards, shouldComponentUpdate gets called and we can compare props and state of last cycle with the next one. However, if state is a product of the props, it makes more sense to check whether the props have changed before calculating the state, so unnecessary calculations can be avoided. This produces some ugly looking code where `componentWillReceiveProps` first runs the code that would otherwise be in `shouldComponentUpdate` and based on that result sets a new state, or terminates. Simplified Example: Is there a cleaner way of approaching this where no resources are wasted on unnecessary state calculations?",
        "human_words_stopwords_removal_lemmatization": "react component lifecycle dictate new prop roll , ` componentwillreceiveprops ` get called , calculate new state set without second cycle . afterwards , shouldcomponentupdate get called compare prop state last cycle next one . however , state product prop , make sense check whether prop changed calculating state , unnecessary calculation avoided . produce ugly looking code ` componentwillreceiveprops ` first run code would otherwise ` shouldcomponentupdate ` based result set new state , terminates . simplified example : cleaner way approaching resource wasted unnecessary state calculation ?",
        "title_stopwords_removal_lemmatization": "optimizing componentwillreceiveprops shouldcomponentupdate"
    },
    {
        "issue_id": 120488923,
        "title": "Rendering a snap svg image",
        "label": [
            "Type: Question"
        ],
        "date": "2015-12-04T21:24:03Z",
        "status": "closed",
        "description": "Hi I'm new to React. I'm looking use snap svg for rendering some svg images into some views, however I'm not quite sure how best to set this up. I'm using ec6 and the Babel transpiler. Could you explain the best way to add snap svg so that it can render to a view please. \n\nReally looking for best practise here rather than me doing it completely the wrong way. \n\nThanks\n",
        "remove_template_description": "Hi I'm new to React. I'm looking use snap svg for rendering some svg images into some views, however I'm not quite sure how best to set this up. I'm using ec6 and the Babel transpiler. Could you explain the best way to add snap svg so that it can render to a view please.   Really looking for best practise here rather than me doing it completely the wrong way.   Thanks",
        "human_words": "Hi I'm new to React. I'm looking use snap svg for rendering some svg images into some views, however I'm not quite sure how best to set this up. I'm using ec6 and the Babel transpiler. Could you explain the best way to add snap svg so that it can render to a view please.   Really looking for best practise here rather than me doing it completely the wrong way.   Thanks",
        "human_words_regrex": "Hi I'm new to React. I'm looking use snap svg for rendering some svg images into some views, however I'm not quite sure how best to set this up. I'm using ec6 and the Babel transpiler. Could you explain the best way to add snap svg so that it can render to a view please. Really looking for best practise here rather than me doing it completely the wrong way. Thanks",
        "human_words_stopwords_removal_lemmatization": "hi 'm new react . 'm looking use snap svg rendering svg image view , however 'm quite sure best set . 'm using ec6 babel transpiler . could explain best way add snap svg render view please . really looking best practise rather completely wrong way . thanks",
        "title_stopwords_removal_lemmatization": "rendering snap svg image"
    },
    {
        "issue_id": 119787970,
        "title": "If it's isomorphic code, why do you require different code on the server",
        "label": [
            "Type: Question"
        ],
        "date": "2015-12-01T19:21:29Z",
        "status": "closed",
        "description": "In the [docs](https://www.npmjs.com/package/react-dom), you have an example for server side code and an example for client side code. I thought isomorphic code was supposed to work on both automatically.\n",
        "remove_template_description": "In the [docs](https://www.npmjs.com/package/react-dom), you have an example for server side code and an example for client side code. I thought isomorphic code was supposed to work on both automatically.",
        "human_words": "In the [docs](https://www.npmjs.com/package/react-dom), you have an example for server side code and an example for client side code. I thought isomorphic code was supposed to work on both automatically.",
        "human_words_regrex": "In the , you have an example for server side code and an example for client side code. I thought isomorphic code was supposed to work on both automatically.",
        "human_words_stopwords_removal_lemmatization": ", example server side code example client side code . thought isomorphic code supposed work automatically .",
        "title_stopwords_removal_lemmatization": "'s isomorphic code , require different code server"
    },
    {
        "issue_id": 119237231,
        "title": "Singleton React Component",
        "label": [
            "Type: Question"
        ],
        "date": "2015-11-27T19:09:19Z",
        "status": "closed",
        "description": "Hey guys!\nSo in this application I'm writing there's a component called \"help section\". It's basically a box that shows some predefined texts about the component the user's messing with.\n\nI want to be able to tell my \"help section\" component which component to show help for. As of now, I'm using Flux with some actions and a store. This isn't too bad and works quite nicely, however it's quite a large setup, with 2 files defined specifically for this cause. There are also a number of other issues that I've experienced such as \"help section\" actions dispatching because of other actions (which raises a \"Cannot dispatch in the middle of a dispatch\" error).\n\nHowever, if I could define \"help section\" as a **singleton**, I could just `import helpSection from './HelpSection` and be done with it, since I'll get the **instance** of \"help section\". All I have to do is expose a method on `helpSection` that sets the properties I want to change and call it.\n\nI know it breaks React's unidirectional data flow, with a component changing another component, but maybe it's worth it sometimes. The way I think about it, it's sort of a combination of a store, some actions and a component into one object. A lot of components will only get instantiated once at run time so maybe it'll be quite useful in some cases.\n\nI couldn't find any reference to this on the web other than in [this JSfiddle](https://jsfiddle.net/69z2wepo/7764/), which seems to work nicely (It's a bit unclear IMO). Is this a good way to do it?\n\nI'm quite a novice in JavaScript and React so I might be missing some obvious points, hopefully not.\nWhat do you think about this?\nThanks for reading.\n\n(P.S. Sorry for any ambiguousness, English is not my native language... :smile:)\n",
        "remove_template_description": "Hey guys! So in this application I'm writing there's a component called \"help section\". It's basically a box that shows some predefined texts about the component the user's messing with.  I want to be able to tell my \"help section\" component which component to show help for. As of now, I'm using Flux with some actions and a store. This isn't too bad and works quite nicely, however it's quite a large setup, with 2 files defined specifically for this cause. There are also a number of other issues that I've experienced such as \"help section\" actions dispatching because of other actions (which raises a \"Cannot dispatch in the middle of a dispatch\" error).  However, if I could define \"help section\" as a **singleton**, I could just `import helpSection from './HelpSection` and be done with it, since I'll get the **instance** of \"help section\". All I have to do is expose a method on `helpSection` that sets the properties I want to change and call it.  I know it breaks React's unidirectional data flow, with a component changing another component, but maybe it's worth it sometimes. The way I think about it, it's sort of a combination of a store, some actions and a component into one object. A lot of components will only get instantiated once at run time so maybe it'll be quite useful in some cases.  I couldn't find any reference to this on the web other than in [this JSfiddle](https://jsfiddle.net/69z2wepo/7764/), which seems to work nicely (It's a bit unclear IMO). Is this a good way to do it?  I'm quite a novice in JavaScript and React so I might be missing some obvious points, hopefully not. What do you think about this? Thanks for reading.  (P.S. Sorry for any ambiguousness, English is not my native language... :smile:)",
        "human_words": "Hey guys! So in this application I'm writing there's a component called \"help section\". It's basically a box that shows some predefined texts about the component the user's messing with.  I want to be able to tell my \"help section\" component which component to show help for. As of now, I'm using Flux with some actions and a store. This isn't too bad and works quite nicely, however it's quite a large setup, with 2 files defined specifically for this cause. There are also a number of other issues that I've experienced such as \"help section\" actions dispatching because of other actions (which raises a \"Cannot dispatch in the middle of a dispatch\" error).  However, if I could define \"help section\" as a **singleton**, I could just `import helpSection from './HelpSection` and be done with it, since I'll get the **instance** of \"help section\". All I have to do is expose a method on `helpSection` that sets the properties I want to change and call it.  I know it breaks React's unidirectional data flow, with a component changing another component, but maybe it's worth it sometimes. The way I think about it, it's sort of a combination of a store, some actions and a component into one object. A lot of components will only get instantiated once at run time so maybe it'll be quite useful in some cases.  I couldn't find any reference to this on the web other than in [this JSfiddle](https://jsfiddle.net/69z2wepo/7764/), which seems to work nicely (It's a bit unclear IMO). Is this a good way to do it?  I'm quite a novice in JavaScript and React so I might be missing some obvious points, hopefully not. What do you think about this? Thanks for reading.  (P.S. Sorry for any ambiguousness, English is not my native language... :smile:)",
        "human_words_regrex": "Hey guys! So in this application I'm writing there's a component called \"help section\". It's basically a box that shows some predefined texts about the component the user's messing with. I want to be able to tell my \"help section\" component which component to show help for. As of now, I'm using Flux with some actions and a store. This isn't too bad and works quite nicely, however it's quite a large setup, with 2 files defined specifically for this cause. There are also a number of other issues that I've experienced such as \"help section\" actions dispatching because of other actions (which raises a \"Cannot dispatch in the middle of a dispatch\" error). However, if I could define \"help section\" as a **singleton**, I could just `import helpSection from './HelpSection` and be done with it, since I'll get the **instance** of \"help section\". All I have to do is expose a method on `helpSection` that sets the properties I want to change and call it. I know it breaks React's unidirectional data flow, with a component changing another component, but maybe it's worth it sometimes. The way I think about it, it's sort of a combination of a store, some actions and a component into one object. A lot of components will only get instantiated once at run time so maybe it'll be quite useful in some cases. I couldn't find any reference to this on the web other than in , which seems to work nicely (It's a bit unclear IMO). Is this a good way to do it? I'm quite a novice in JavaScript and React so I might be missing some obvious points, hopefully not. What do you think about this? Thanks for reading. (P.S. Sorry for any ambiguousness, English is not my native language... :smile:)",
        "human_words_stopwords_removal_lemmatization": "hey guy ! application 'm writing 's component called `` help section '' . 's basically box show predefined text component user 's messing . want able tell `` help section '' component component show help . , 'm using flux action store . n't bad work quite nicely , however 's quite large setup , 2 file defined specifically cause . also number issue 've experienced `` help section '' action dispatching action ( raise `` dispatch middle dispatch '' error ) . however , could define `` help section '' * * singleton * * , could ` import helpsection './helpsection ` done , since 'll get * * instance * * `` help section '' . expose method ` helpsection ` set property want change call . know break react 's unidirectional data flow , component changing another component , maybe 's worth sometimes . way think , 's sort combination store , action component one object . lot component get instantiated run time maybe 'll quite useful case . could n't find reference web , seems work nicely ( 's bit unclear imo ) . good way ? 'm quite novice javascript react might missing obvious point , hopefully . think ? thanks reading . ( p.s . sorry ambiguousness , english native language ... : smile : )",
        "title_stopwords_removal_lemmatization": "singleton react component"
    },
    {
        "issue_id": 118868564,
        "title": "Disable a specific warning",
        "label": [
            "Type: Question"
        ],
        "date": "2015-11-25T16:05:45Z",
        "status": "closed",
        "description": "Will explain the issue briefly, instead of extending React.component I have a class which gets state from a getInitialState function if exists:\n\n```\nexport default class BaseComponent extends React.Component {\n  constructor (props, children) {\n    super(props, children);\n    this.state = this.getInitialState ? this.getInitialState() : {};\n  }\n}\n```\n\nWhen using it in a component looks like this:\n\n```\nexport default class SomeComponent extends BaseComponent {\n    getInitialState () {\n        return {\n          ...\n        };\n     }\n}\n```\n\nThis triggers a warning by react:\n\nWarning: getInitialState was defined on SomeComponent, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?\n\nSo my question is, is there a way to disable this warning from happening?\n\nCheers!\n",
        "remove_template_description": "Will explain the issue briefly, instead of extending React.component I have a class which gets state from a getInitialState function if exists:  ``` export default class BaseComponent extends React.Component {   constructor (props, children) {     super(props, children);     this.state = this.getInitialState ? this.getInitialState() : {};   } } ```  When using it in a component looks like this:  ``` export default class SomeComponent extends BaseComponent {     getInitialState () {         return {           ...         };      } } ```  This triggers a warning by react:  Warning: getInitialState was defined on SomeComponent, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?  So my question is, is there a way to disable this warning from happening?  Cheers!",
        "human_words": "Will explain the issue briefly, instead of extending React.component I have a class which gets state from a getInitialState function if exists:    When using it in a component looks like this:    This triggers a warning by react:  Warning: getInitialState was defined on SomeComponent, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?  So my question is, is there a way to disable this warning from happening?  Cheers!",
        "human_words_regrex": "Will explain the issue briefly, instead of extending React.component I have a class which gets state from a getInitialState function if exists: When using it in a component looks like this: This triggers a warning by react: Warning: getInitialState was defined on SomeComponent, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead? So my question is, is there a way to disable this warning from happening? Cheers!",
        "human_words_stopwords_removal_lemmatization": "explain issue briefly , instead extending react.component class get state getinitialstate function exists : using component look like : trigger warning react : warning : getinitialstate defined somecomponent , plain javascript class . supported class created using react.createclass . mean define state property instead ? question , way disable warning happening ? cheer !",
        "title_stopwords_removal_lemmatization": "disable specific warning"
    },
    {
        "issue_id": 118796562,
        "title": "Does the change of the state always fire the function \"render\"?",
        "label": [
            "Type: Question"
        ],
        "date": "2015-11-25T09:40:37Z",
        "status": "closed",
        "description": "Here is the example:\n\n```\n'use strict';\nimport React from 'react';\nexport var componentA=React.createClass({\n  componentWillMount(){\n    this.setState({\n      appList:this.props.appList,\n      c:this.props.c\n    })\n  },\n  componentWillReceiveProps(newProps){\n    this.setState({\n      appList:newProps.appList,\n      c:newProps.c\n    })\n  },\n  render(){\n    return (\n      <ul>\n        {this.state.appList.map(function(object,i){\n          return <li>\n            <input type=\"text\" defaultValue={object} ref={'input'+i}/>\n          </li>\n        })}\n        <li>{this.state.c}</li>\n      </ul>\n    );\n  },\n  componentDidUpdate(){\n    console.log(this.refs)\n    console.log(this.refs.input1.value);\n  }\n})\n```\n\nI use it on page A:\n\n```\nvar appList=[12,4,5,6,7];\n      var c=12;\n      React.render(<ComponentA appList={appList} c={c}/>,$('#containerA')[0]);\n\n      setTimeout(function(){\n        var appList=[3,4,5,3];\n        var d=20;\n        React.render(<ComponentA appList={appList} c={d}/>,$('#containerA')[0]);\n      },2000);\n```\n\nbut after the second update, I found that the values of the inputs can't change according to the state that I pass in the second time. \n\nI also want to know, if there are some UI operation happened during two calls for the \"render\", is it possible that React can reserve those for users? or just refresh the whole component according the state?\n",
        "remove_template_description": "Here is the example:  ``` 'use strict'; import React from 'react'; export var componentA=React.createClass({   componentWillMount(){     this.setState({       appList:this.props.appList,       c:this.props.c     })   },   componentWillReceiveProps(newProps){     this.setState({       appList:newProps.appList,       c:newProps.c     })   },   render(){     return (       <ul>         {this.state.appList.map(function(object,i){           return <li>             <input type=\"text\" defaultValue={object} ref={'input'+i}/>           </li>         })}         <li>{this.state.c}</li>       </ul>     );   },   componentDidUpdate(){     console.log(this.refs)     console.log(this.refs.input1.value);   } }) ```  I use it on page A:  ``` var appList=[12,4,5,6,7];       var c=12;       React.render(<ComponentA appList={appList} c={c}/>,$('#containerA')[0]);        setTimeout(function(){         var appList=[3,4,5,3];         var d=20;         React.render(<ComponentA appList={appList} c={d}/>,$('#containerA')[0]);       },2000); ```  but after the second update, I found that the values of the inputs can't change according to the state that I pass in the second time.   I also want to know, if there are some UI operation happened during two calls for the \"render\", is it possible that React can reserve those for users? or just refresh the whole component according the state?",
        "human_words": "Here is the example:    I use it on page A:    but after the second update, I found that the values of the inputs can't change according to the state that I pass in the second time.   I also want to know, if there are some UI operation happened during two calls for the \"render\", is it possible that React can reserve those for users? or just refresh the whole component according the state?",
        "human_words_regrex": "Here is the example: I use it on page A: but after the second update, I found that the values of the inputs can't change according to the state that I pass in the second time. I also want to know, if there are some UI operation happened during two calls for the \"render\", is it possible that React can reserve those for users? or just refresh the whole component according the state?",
        "human_words_stopwords_removal_lemmatization": "example : use page : second update , found value input ca n't change according state pas second time . also want know , ui operation happened two call `` render '' , possible react reserve user ? refresh whole component according state ?",
        "title_stopwords_removal_lemmatization": "change state always fire function `` render '' ?"
    },
    {
        "issue_id": 117284765,
        "title": "Issue with Simulate.Click invoking a function that I am spying on.",
        "label": [
            "Type: Question"
        ],
        "date": "2015-11-17T05:17:20Z",
        "status": "closed",
        "description": "I am having lots of trouble testing out whether clicking on my rendered button element is invoking the onClick handler.\n\nHere is my code for the Component to be tested...\n\n```\n'use strict';\n\n//Library Dependencies\nconst React = require('react');\n\nconst CategoryClearButton = React.createClass({\n\n  render() {\n    return (\n      <button type=\"reset\" className=\"btn btn-primary btn-sm\" onClick={this._clearAllSelectedCategories}>\n        Clear\n      </button>\n    );\n  },\n\n   _clearAllSelectedCategories() {\n    this.props.handleClick();\n  }\n\n});\n\nmodule.exports = CategoryClearButton;\n```\n\nHere is my test case using Jasmine...\n\n```\n'use strict';\n\nconst React = require('react');\nconst ReactDOM = require('react-dom');\nconst TestUtils = require('react-addons-test-utils');\n\nconst CategoryClearButton = require('./CategoryClearButton.jsx');\nconst Actions = require('../../../actions/DashboardActions');\n\nlet element;\n\ndescribe('CategoryClearButton', () => {\n\n  beforeEach(() =>{\n    element = TestUtils.renderIntoDocument(<CategoryClearButton />);\n  });\n\n it('will call the _clearAllSelectedCategories method when clicked', () => {\n    let renderedButton = TestUtils.findRenderedDOMComponentWithTag(element, 'button');\n    spyOn(element, '_clearAllSelectedCategories');\n    TestUtils.Simulate.click(renderedButton);\n    expect(element._clearAllSelectedCategories).toHaveBeenCalled();\n })\n\n})\n```\n\nHere is the error message i'm getting in my console...\n\n```\nPhantomJS 1.9.8 (Mac OS X 0.0.0) CategoryClearButton will call the _clearAllSelectedCategories method when clicked FAILED\n    TypeError: 'undefined' is not a funtion....\n\nPhantomJS 1.9.8 (Mac OS X 0.0.0): Executed 70 of 70 (1 FAILED) (0.069 secs / 0.101 secs).\n```\n\nI am pretty sure the issue here is with the simulate click event not firing, because I can make this test pass by doing the following, which leads me to believe that the spy is doing its job...\n\n```\nit('will call the _clearAllSelectedCategories method when clicked', () => {\n    let renderedButton = TestUtils.findRenderedDOMComponentWithTag(element, 'button');\n    spyOn(element, '_clearAllSelectedCategories');\n    element._clearAllSelectedCategories();\n    expect(element._clearAllSelectedCategories).toHaveBeenCalled();\n  })\n```\n\nCan anybuddy give a newbie some guidance?\nThanks,\nAndrew\n",
        "remove_template_description": "I am having lots of trouble testing out whether clicking on my rendered button element is invoking the onClick handler.  Here is my code for the Component to be tested...  ``` 'use strict';  //Library Dependencies const React = require('react');  const CategoryClearButton = React.createClass({    render() {     return (       <button type=\"reset\" className=\"btn btn-primary btn-sm\" onClick={this._clearAllSelectedCategories}>         Clear       </button>     );   },     _clearAllSelectedCategories() {     this.props.handleClick();   }  });  module.exports = CategoryClearButton; ```  Here is my test case using Jasmine...  ``` 'use strict';  const React = require('react'); const ReactDOM = require('react-dom'); const TestUtils = require('react-addons-test-utils');  const CategoryClearButton = require('./CategoryClearButton.jsx'); const Actions = require('../../../actions/DashboardActions');  let element;  describe('CategoryClearButton', () => {    beforeEach(() =>{     element = TestUtils.renderIntoDocument(<CategoryClearButton />);   });   it('will call the _clearAllSelectedCategories method when clicked', () => {     let renderedButton = TestUtils.findRenderedDOMComponentWithTag(element, 'button');     spyOn(element, '_clearAllSelectedCategories');     TestUtils.Simulate.click(renderedButton);     expect(element._clearAllSelectedCategories).toHaveBeenCalled();  })  }) ```  Here is the error message i'm getting in my console...  ``` PhantomJS 1.9.8 (Mac OS X 0.0.0) CategoryClearButton will call the _clearAllSelectedCategories method when clicked FAILED     TypeError: 'undefined' is not a funtion....  PhantomJS 1.9.8 (Mac OS X 0.0.0): Executed 70 of 70 (1 FAILED) (0.069 secs / 0.101 secs). ```  I am pretty sure the issue here is with the simulate click event not firing, because I can make this test pass by doing the following, which leads me to believe that the spy is doing its job...  ``` it('will call the _clearAllSelectedCategories method when clicked', () => {     let renderedButton = TestUtils.findRenderedDOMComponentWithTag(element, 'button');     spyOn(element, '_clearAllSelectedCategories');     element._clearAllSelectedCategories();     expect(element._clearAllSelectedCategories).toHaveBeenCalled();   }) ```  Can anybuddy give a newbie some guidance? Thanks, Andrew",
        "human_words": "I am having lots of trouble testing out whether clicking on my rendered button element is invoking the onClick handler.  Here is my code for the Component to be tested...    Here is my test case using Jasmine...    Here is the error message i'm getting in my console...    I am pretty sure the issue here is with the simulate click event not firing, because I can make this test pass by doing the following, which leads me to believe that the spy is doing its job...    Can anybuddy give a newbie some guidance? Thanks, Andrew",
        "human_words_regrex": "I am having lots of trouble testing out whether clicking on my rendered button element is invoking the onClick handler. Here is my code for the Component to be tested... Here is my test case using Jasmine... Here is the error message i'm getting in my console... I am pretty sure the issue here is with the simulate click event not firing, because I can make this test pass by doing the following, which leads me to believe that the spy is doing its job... Can anybuddy give a newbie some guidance? Thanks, Andrew",
        "human_words_stopwords_removal_lemmatization": "lot trouble testing whether clicking rendered button element invoking onclick handler . code component tested ... test case using jasmine ... error message 'm getting console ... pretty sure issue simulate click event firing , make test pas following , lead believe spy job ... anybuddy give newbie guidance ? thanks , andrew",
        "title_stopwords_removal_lemmatization": "issue simulate.click invoking function spying ."
    },
    {
        "issue_id": 116406278,
        "title": "TestUtil.renderIntoDocument issue with refs",
        "label": [
            "Type: Question"
        ],
        "date": "2015-11-11T19:38:13Z",
        "status": "closed",
        "description": "I'm quite unsure where this error is coming from.\n\n```\nError: Invariant Violation: addComponentAsRefTo(...): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component's `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).\n    at /var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:26176 <- node_modules/react/node_modules/fbjs/lib/invariant.js:46:0\n    at /var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:19543 <- node_modules/react/lib/ReactOwner.js:68:0\n    at attachRef (/var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:20361 <- node_modules/react/lib/ReactRef.js:23:0)\n    at /var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:20380 <- node_modules/react/lib/ReactRef.js:42:0\n    at attachRefs (/var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:20251 <- node_modules/react/lib/ReactReconciler.js:21:0)\n    at /var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:8011 <- node_modules/react/lib/CallbackQueue.js:66:0\n    at /var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:20159 <- node_modules/react/lib/ReactReconcileTransaction.js:81:0\n    at /var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:23475 <- node_modules/react/lib/Transaction.js:203:0\n    at /var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:23422 <- node_modules/react/lib/Transaction.js:150:0\n    at batchedMountComponentIntoNode (/var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:18151 <- node_modules/react/lib/ReactMount.js:283:0)\n    at /var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:23409 <- node_modules/react/lib/Transaction.js:137:0\n    at /var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:15712 <- node_modules/react/lib/ReactDefaultBatchingStrategy.js:62:0\n    at batchedUpdates (/var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:21476 <- node_modules/react/lib/ReactUpdates.js:95:0)\n    at /var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:18345 <- node_modules/react/lib/ReactMount.js:477:0\n    at ReactMount__renderNewRootComponent (/var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:19637 <- node_modules/react/lib/ReactPerf.js:67:0)\n    at /var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:18419 <- node_modules/react/lib/ReactMount.js:551:0\n    at /var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:18439 <- node_modules/react/lib/ReactMount.js:571:0\n    at React_render (/var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:19637 <- node_modules/react/lib/ReactPerf.js:67:0)\n    at /var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:20723 <- node_modules/react/lib/ReactTestUtils.js:77:0\n    at /var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:33989 <- /Users/jankarlorodriguez-rivera/Projects/web-ux/user-portal/test/spec/ui/dollar-input.coffee:11:16\n    at /var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:33991 <- /Users/jankarlorodriguez-rivera/Projects/web-ux/user-portal/test/spec/ui/dollar-input.coffee:6:31\n    at newRequire (/var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:75 <- /Users/jankarlorodriguez-rivera/Projects/web-ux/node_modules/proxyquireify/lib/prelude.js:75:0)\n    at /Users/jankarlorodriguez-rivera/Projects/web-ux/user-portal/test/spec/ui/dollar-input.coffee:1\n```\n\nI'm using coffeescript because the other tests are written in coffeescript but (1) I tried it with JSX and the same error and (2) it should matter anyways.\n\nDo here's my component, and it has a ref:\n\n``` jsx\nReact.createClass({\n  displayName: 'DollarInput',\n  // ...\n  render: function() {\n    return (\n      <input\n        ref=\"input\"\n        onChange={this.onChange}\n        onKeyDown={this.onKeyDown}\n        onBlur={this.onBlur}\n        value={this.state.amount}\n        className={this.props.className}\n        id={this.props.id}\n        autoComplete=\"off\"/>\n    )\n  }\n});\n```\n\nAnd here's my test -- using jasmine, karma, and phantomjs.\n\n``` coffee\nTestUtils = require('react-addons-test-utils')\nDollarInput = React.createFactory(require('user-portal/src/scripts/ui/dollar-input'))\n\ndescribe \"React dollar input\", ->\n  dollarInput = TestUtils.renderIntoDocument(DollarInput())\n```\n\nAny ideas where that error comes from?\n\nSome trouble shooting:\n- It says maybe I may have two instances of react being loaded. Well, I'm using bower and adding the proper files in my karma configuration:\n\n``` js\nfiles: [\n  'bower_components/react/react.js',\n  'bower_components/react/react-dom.js',\n  // ...\n  'test/*.coffee'\n]\n```\n\nI don't believe `require('react-addons-test-utils')` includes another version of React. And I wouldnt imagine Karma is loading react more than once either...\n- I don't believe I'm adding a ref outside the component's render function either. But when I remove the ref, then I dont get this error -- but the component wont work properly...\n\n``` jsx\nReact.createClass({\n  displayName: 'DollarInput',\n  // ...\n  render: function() {\n    return (\n      <input\n        onChange={this.onChange}\n        onKeyDown={this.onKeyDown}\n        onBlur={this.onBlur}\n        value={this.state.amount}\n        className={this.props.className}\n        id={this.props.id}\n        autoComplete=\"off\"/>\n    )\n  }\n});\n```\n",
        "remove_template_description": "I'm quite unsure where this error is coming from.  ``` Error: Invariant Violation: addComponentAsRefTo(...): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component's `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).     at /var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:26176 <- node_modules/react/node_modules/fbjs/lib/invariant.js:46:0     at /var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:19543 <- node_modules/react/lib/ReactOwner.js:68:0     at attachRef (/var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:20361 <- node_modules/react/lib/ReactRef.js:23:0)     at /var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:20380 <- node_modules/react/lib/ReactRef.js:42:0     at attachRefs (/var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:20251 <- node_modules/react/lib/ReactReconciler.js:21:0)     at /var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:8011 <- node_modules/react/lib/CallbackQueue.js:66:0     at /var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:20159 <- node_modules/react/lib/ReactReconcileTransaction.js:81:0     at /var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:23475 <- node_modules/react/lib/Transaction.js:203:0     at /var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:23422 <- node_modules/react/lib/Transaction.js:150:0     at batchedMountComponentIntoNode (/var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:18151 <- node_modules/react/lib/ReactMount.js:283:0)     at /var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:23409 <- node_modules/react/lib/Transaction.js:137:0     at /var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:15712 <- node_modules/react/lib/ReactDefaultBatchingStrategy.js:62:0     at batchedUpdates (/var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:21476 <- node_modules/react/lib/ReactUpdates.js:95:0)     at /var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:18345 <- node_modules/react/lib/ReactMount.js:477:0     at ReactMount__renderNewRootComponent (/var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:19637 <- node_modules/react/lib/ReactPerf.js:67:0)     at /var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:18419 <- node_modules/react/lib/ReactMount.js:551:0     at /var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:18439 <- node_modules/react/lib/ReactMount.js:571:0     at React_render (/var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:19637 <- node_modules/react/lib/ReactPerf.js:67:0)     at /var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:20723 <- node_modules/react/lib/ReactTestUtils.js:77:0     at /var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:33989 <- /Users/jankarlorodriguez-rivera/Projects/web-ux/user-portal/test/spec/ui/dollar-input.coffee:11:16     at /var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:33991 <- /Users/jankarlorodriguez-rivera/Projects/web-ux/user-portal/test/spec/ui/dollar-input.coffee:6:31     at newRequire (/var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:75 <- /Users/jankarlorodriguez-rivera/Projects/web-ux/node_modules/proxyquireify/lib/prelude.js:75:0)     at /Users/jankarlorodriguez-rivera/Projects/web-ux/user-portal/test/spec/ui/dollar-input.coffee:1 ```  I'm using coffeescript because the other tests are written in coffeescript but (1) I tried it with JSX and the same error and (2) it should matter anyways.  Do here's my component, and it has a ref:  ``` jsx React.createClass({   displayName: 'DollarInput',   // ...   render: function() {     return (       <input         ref=\"input\"         onChange={this.onChange}         onKeyDown={this.onKeyDown}         onBlur={this.onBlur}         value={this.state.amount}         className={this.props.className}         id={this.props.id}         autoComplete=\"off\"/>     )   } }); ```  And here's my test -- using jasmine, karma, and phantomjs.  ``` coffee TestUtils = require('react-addons-test-utils') DollarInput = React.createFactory(require('user-portal/src/scripts/ui/dollar-input'))  describe \"React dollar input\", ->   dollarInput = TestUtils.renderIntoDocument(DollarInput()) ```  Any ideas where that error comes from?  Some trouble shooting: - It says maybe I may have two instances of react being loaded. Well, I'm using bower and adding the proper files in my karma configuration:  ``` js files: [   'bower_components/react/react.js',   'bower_components/react/react-dom.js',   // ...   'test/*.coffee' ] ```  I don't believe `require('react-addons-test-utils')` includes another version of React. And I wouldnt imagine Karma is loading react more than once either... - I don't believe I'm adding a ref outside the component's render function either. But when I remove the ref, then I dont get this error -- but the component wont work properly...  ``` jsx React.createClass({   displayName: 'DollarInput',   // ...   render: function() {     return (       <input         onChange={this.onChange}         onKeyDown={this.onKeyDown}         onBlur={this.onBlur}         value={this.state.amount}         className={this.props.className}         id={this.props.id}         autoComplete=\"off\"/>     )   } }); ```",
        "codes_and_errors": [
            " Error: Invariant Violation: addComponentAsRefTo(...): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component's `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).     at /var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:26176 <- node_modules/react/node_modules/fbjs/lib/invariant.js:46:0     at /var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:19543 <- node_modules/react/lib/ReactOwner.js:68:0     at attachRef (/var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:20361 <- node_modules/react/lib/ReactRef.js:23:0)     at /var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:20380 <- node_modules/react/lib/ReactRef.js:42:0     at attachRefs (/var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:20251 <- node_modules/react/lib/ReactReconciler.js:21:0)     at /var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:8011 <- node_modules/react/lib/CallbackQueue.js:66:0     at /var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:20159 <- node_modules/react/lib/ReactReconcileTransaction.js:81:0     at /var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:23475 <- node_modules/react/lib/Transaction.js:203:0     at /var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:23422 <- node_modules/react/lib/Transaction.js:150:0     at batchedMountComponentIntoNode (/var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:18151 <- node_modules/react/lib/ReactMount.js:283:0)     at /var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:23409 <- node_modules/react/lib/Transaction.js:137:0     at /var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:15712 <- node_modules/react/lib/ReactDefaultBatchingStrategy.js:62:0     at batchedUpdates (/var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:21476 <- node_modules/react/lib/ReactUpdates.js:95:0)     at /var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:18345 <- node_modules/react/lib/ReactMount.js:477:0     at ReactMount__renderNewRootComponent (/var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:19637 <- node_modules/react/lib/ReactPerf.js:67:0)     at /var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:18419 <- node_modules/react/lib/ReactMount.js:551:0     at /var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:18439 <- node_modules/react/lib/ReactMount.js:571:0     at React_render (/var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:19637 <- node_modules/react/lib/ReactPerf.js:67:0)     at /var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:20723 <- node_modules/react/lib/ReactTestUtils.js:77:0     at /var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:33989 <- /Users/jankarlorodriguez-rivera/Projects/web-ux/user-portal/test/spec/ui/dollar-input.coffee:11:16     at /var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:33991 <- /Users/jankarlorodriguez-rivera/Projects/web-ux/user-portal/test/spec/ui/dollar-input.coffee:6:31     at newRequire (/var/folders/br/b9kks4y50qvfl_1cr22jj1_c0000gn/T/7fc1a283a49574bce1059aa1c5f740be.browserify:75 <- /Users/jankarlorodriguez-rivera/Projects/web-ux/node_modules/proxyquireify/lib/prelude.js:75:0)     at /Users/jankarlorodriguez-rivera/Projects/web-ux/user-portal/test/spec/ui/dollar-input.coffee:1 ",
            " jsx React.createClass({   displayName: 'DollarInput',   // ...   render: function() {     return (       <input         ref=\"input\"         onChange={this.onChange}         onKeyDown={this.onKeyDown}         onBlur={this.onBlur}         value={this.state.amount}         className={this.props.className}         id={this.props.id}         autoComplete=\"off\"/>     )   } }); ",
            " coffee TestUtils = require('react-addons-test-utils') DollarInput = React.createFactory(require('user-portal/src/scripts/ui/dollar-input'))  describe \"React dollar input\", ->   dollarInput = TestUtils.renderIntoDocument(DollarInput()) ",
            " js files: [   'bower_components/react/react.js',   'bower_components/react/react-dom.js',   // ...   'test/*.coffee' ] ",
            " jsx React.createClass({   displayName: 'DollarInput',   // ...   render: function() {     return (       <input         onChange={this.onChange}         onKeyDown={this.onKeyDown}         onBlur={this.onBlur}         value={this.state.amount}         className={this.props.className}         id={this.props.id}         autoComplete=\"off\"/>     )   } }); "
        ],
        "human_words": "I'm quite unsure where this error is coming from.    I'm using coffeescript because the other tests are written in coffeescript but (1) I tried it with JSX and the same error and (2) it should matter anyways.  Do here's my component, and it has a ref:    And here's my test -- using jasmine, karma, and phantomjs.    Any ideas where that error comes from?  Some trouble shooting: - It says maybe I may have two instances of react being loaded. Well, I'm using bower and adding the proper files in my karma configuration:    I don't believe `require('react-addons-test-utils')` includes another version of React. And I wouldnt imagine Karma is loading react more than once either... - I don't believe I'm adding a ref outside the component's render function either. But when I remove the ref, then I dont get this error -- but the component wont work properly...  ",
        "human_words_regrex": "I'm quite unsure where this error is coming from. I'm using coffeescript because the other tests are written in coffeescript but (1) I tried it with JSX and the same error and (2) it should matter anyways. Do here's my component, and it has a ref: And here's my test -- using jasmine, karma, and phantomjs. Any ideas where that error comes from? Some trouble shooting: - It says maybe I may have two instances of react being loaded. Well, I'm using bower and adding the proper files in my karma configuration: I don't believe `require('react-addons-test-utils')` includes another version of React. And I wouldnt imagine Karma is loading react more than once either... - I don't believe I'm adding a ref outside the component's render function either. But when I remove the ref, then I dont get this error -- but the component wont work properly... "
    },
    {
        "issue_id": 116250631,
        "title": "componentDidUpdate fires before references are triggered or associated",
        "label": [
            "Type: Question"
        ],
        "date": "2015-11-11T02:40:39Z",
        "status": "closed",
        "description": "So, I feel like componentDidUpdate and references are executing in the wrong order.\n\nBackground: I'm working on a situation where you're in a list of input fields, with a blank row of fields at the bottom. When you press enter in any field, it moves your focus to the next one by talking to a register which keeps track of all the fields and their positions. Shift+enter goes in reverse as well.\n\nIf you press enter on the final field, it kicks off a Flux like action which results in the next blank field being rendered, and then I want to move focus to that row. So I set up a callback that will fire on the next componentDidUpdate, knowing that when that happens, I'll have access to the new Field, which registers itself during componentWillMount. That works just fine, I can access that component just fine, however, if I want to use a method to direct focus to a DOM Element within it, it will be too early to make use of references:\n\n``` js\nconst FieldComponent = React.createClass({\n  receiveFocus: function() {\n    ReactDOM.findDOMNode(this.refs.input).focus() // error: this.refs.input == undefined\n  },\n  render: function() {\n    return React.DOM.div({},\n      React.DOM.label({}, \"Some Label\"),\n      React.DOM.input({ref: \"input\", type: \"text\"})\n    )\n  }\n})\n```\n\n...because the references have not yet been bound, even though we're at the componentDidMount/Update stage of the lifecycle, so this...\n\n``` js\n  receiveFocus: function() {\n    console.log(Object.keys(this.refs)) // log: []\n    setTimeout(function() {\n      console.log(Object.keys(this.refs)) // log: [\"input\"]\n    },  0)\n  },\n```\n\n...seems to indicate that reference binding happens synchronously after. Now, I could easily get around this by using ReactDOM.findDOMNode(this) and then using querySelector to find my target, but that isn't a clean `React` way to go about solving the issue, I believe based on what I know of the API that references should be bound/executed before componentDidUpdate/Mount fires. Does this not occur by design, mistake, or incompatibility with other goals?\n",
        "remove_template_description": "So, I feel like componentDidUpdate and references are executing in the wrong order.  Background: I'm working on a situation where you're in a list of input fields, with a blank row of fields at the bottom. When you press enter in any field, it moves your focus to the next one by talking to a register which keeps track of all the fields and their positions. Shift+enter goes in reverse as well.  If you press enter on the final field, it kicks off a Flux like action which results in the next blank field being rendered, and then I want to move focus to that row. So I set up a callback that will fire on the next componentDidUpdate, knowing that when that happens, I'll have access to the new Field, which registers itself during componentWillMount. That works just fine, I can access that component just fine, however, if I want to use a method to direct focus to a DOM Element within it, it will be too early to make use of references:  ``` js const FieldComponent = React.createClass({   receiveFocus: function() {     ReactDOM.findDOMNode(this.refs.input).focus() // error: this.refs.input == undefined   },   render: function() {     return React.DOM.div({},       React.DOM.label({}, \"Some Label\"),       React.DOM.input({ref: \"input\", type: \"text\"})     )   } }) ```  ...because the references have not yet been bound, even though we're at the componentDidMount/Update stage of the lifecycle, so this...  ``` js   receiveFocus: function() {     console.log(Object.keys(this.refs)) // log: []     setTimeout(function() {       console.log(Object.keys(this.refs)) // log: [\"input\"]     },  0)   }, ```  ...seems to indicate that reference binding happens synchronously after. Now, I could easily get around this by using ReactDOM.findDOMNode(this) and then using querySelector to find my target, but that isn't a clean `React` way to go about solving the issue, I believe based on what I know of the API that references should be bound/executed before componentDidUpdate/Mount fires. Does this not occur by design, mistake, or incompatibility with other goals?",
        "human_words": "So, I feel like componentDidUpdate and references are executing in the wrong order.  Background: I'm working on a situation where you're in a list of input fields, with a blank row of fields at the bottom. When you press enter in any field, it moves your focus to the next one by talking to a register which keeps track of all the fields and their positions. Shift+enter goes in reverse as well.  If you press enter on the final field, it kicks off a Flux like action which results in the next blank field being rendered, and then I want to move focus to that row. So I set up a callback that will fire on the next componentDidUpdate, knowing that when that happens, I'll have access to the new Field, which registers itself during componentWillMount. That works just fine, I can access that component just fine, however, if I want to use a method to direct focus to a DOM Element within it, it will be too early to make use of references:    ...because the references have not yet been bound, even though we're at the componentDidMount/Update stage of the lifecycle, so this...    ...seems to indicate that reference binding happens synchronously after. Now, I could easily get around this by using ReactDOM.findDOMNode(this) and then using querySelector to find my target, but that isn't a clean `React` way to go about solving the issue, I believe based on what I know of the API that references should be bound/executed before componentDidUpdate/Mount fires. Does this not occur by design, mistake, or incompatibility with other goals?",
        "human_words_regrex": "So, I feel like componentDidUpdate and references are executing in the wrong order. Background: I'm working on a situation where you're in a list of input fields, with a blank row of fields at the bottom. When you press enter in any field, it moves your focus to the next one by talking to a register which keeps track of all the fields and their positions. Shift+enter goes in reverse as well. If you press enter on the final field, it kicks off a Flux like action which results in the next blank field being rendered, and then I want to move focus to that row. So I set up a callback that will fire on the next componentDidUpdate, knowing that when that happens, I'll have access to the new Field, which registers itself during componentWillMount. That works just fine, I can access that component just fine, however, if I want to use a method to direct focus to a DOM Element within it, it will be too early to make use of references: ...because the references have not yet been bound, even though we're at the componentDidMount/Update stage of the lifecycle, so this... ...seems to indicate that reference binding happens synchronously after. Now, I could easily get around this by using ReactDOM.findDOMNode(this) and then using querySelector to find my target, but that isn't a clean `React` way to go about solving the issue, I believe based on what I know of the API that references should be bound/executed before componentDidUpdate/Mount fires. Does this not occur by design, mistake, or incompatibility with other goals?",
        "human_words_stopwords_removal_lemmatization": ", feel like componentdidupdate reference executing wrong order . background : 'm working situation 're list input field , blank row field bottom . press enter field , move focus next one talking register keep track field position . shift+enter go reverse well . press enter final field , kick flux like action result next blank field rendered , want move focus row . set callback fire next componentdidupdate , knowing happens , 'll access new field , register componentwillmount . work fine , access component fine , however , want use method direct focus dom element within , early make use reference : ... reference yet bound , even though 're componentdidmount/update stage lifecycle , ... ... seems indicate reference binding happens synchronously . , could easily get around using reactdom.finddomnode ( ) using queryselector find target , n't clean ` react ` way go solving issue , believe based know api reference bound/executed componentdidupdate/mount fire . occur design , mistake , incompatibility goal ?",
        "title_stopwords_removal_lemmatization": "componentdidupdate fire reference triggered associated"
    },
    {
        "issue_id": 116240670,
        "title": "adapting docs to react.rb",
        "label": [
            "Type: Question"
        ],
        "date": "2015-11-11T01:19:31Z",
        "status": "closed",
        "description": "I apologize if this is not the best place to ask this but...\n\nWe are getting ready to document our ruby react.js adapter (react.rb) and would like to take the current react.js docs as the starting point, and change the examples etc to use the ruby dsl syntax.\n\nI believe that this is within the docs creative-commons license correct?\n",
        "remove_template_description": "I apologize if this is not the best place to ask this but...  We are getting ready to document our ruby react.js adapter (react.rb) and would like to take the current react.js docs as the starting point, and change the examples etc to use the ruby dsl syntax.  I believe that this is within the docs creative-commons license correct?",
        "human_words": "I apologize if this is not the best place to ask this but...  We are getting ready to document our ruby react.js adapter (react.rb) and would like to take the current react.js docs as the starting point, and change the examples etc to use the ruby dsl syntax.  I believe that this is within the docs creative-commons license correct?",
        "human_words_regrex": "I apologize if this is not the best place to ask this but... We are getting ready to document our ruby react.js adapter (react.rb) and would like to take the current react.js docs as the starting point, and change the examples etc to use the ruby dsl syntax. I believe that this is within the docs creative-commons license correct?",
        "human_words_stopwords_removal_lemmatization": "apologize best place ask ... getting ready document ruby react.js adapter ( react.rb ) would like take current react.js doc starting point , change example etc use ruby dsl syntax . believe within doc creative-commons license correct ?",
        "title_stopwords_removal_lemmatization": "adapting doc react.rb"
    },
    {
        "issue_id": 116131577,
        "title": "Input element can not focus and can not edit",
        "label": [
            "Type: Question"
        ],
        "date": "2015-11-10T15:36:59Z",
        "status": "closed",
        "description": "Hi, guys:\nI get a problem. I write a react component. When I render the virtual selector to body in bootstrap modal, But I can not edit input or focus. \nOnline example: http://code-artisan.github.io/react-virtual-selector/examples/modal.html\n",
        "remove_template_description": "Hi, guys: I get a problem. I write a react component. When I render the virtual selector to body in bootstrap modal, But I can not edit input or focus.  Online example: http://code-artisan.github.io/react-virtual-selector/examples/modal.html",
        "human_words": "Hi, guys: I get a problem. I write a react component. When I render the virtual selector to body in bootstrap modal, But I can not edit input or focus.  Online example: http://code-artisan.github.io/react-virtual-selector/examples/modal.html",
        "human_words_regrex": "Hi, guys: I get a problem. I write a react component. When I render the virtual selector to body in bootstrap modal, But I can not edit input or focus. Online example: ",
        "human_words_stopwords_removal_lemmatization": "hi , guy : get problem . write react component . render virtual selector body bootstrap modal , edit input focus . online example :",
        "title_stopwords_removal_lemmatization": "input element focus edit"
    },
    {
        "issue_id": 116126724,
        "title": "React-dom and Apple TV",
        "label": [
            "Type: Question"
        ],
        "date": "2015-11-10T15:16:17Z",
        "status": "closed",
        "description": "I've been playing lately with getting React to work for building client/server apps for the new Apple TV so I'm opening this thread just to start the conversation around the issue in case other people are also looking into it.\n\nFor those unfamiliar with the subject the SDK for the new Apple TV lets you build JavaScript applications that get loaded from your server and evaluated in a JS context on the device. Now for building interfaces they came up with a [DOM implementation](https://developer.apple.com/library/prerelease/tvos/documentation/TVMLJS/Reference/TVJSFrameworkReference/) and some flavour of XML called [TVML](https://developer.apple.com/library/prerelease/tvos/documentation/LanguagesUtilities/Conceptual/ATV_Template_Guide/) that just bridges to native UI components and APIs (much like React Native in a way). They also have a small JavaScript API called [TVJS](https://developer.apple.com/library/prerelease/tvos/documentation/TVMLJS/Reference/TVJSFrameworkReference/) for creating documents, making HTTP calls, etc.\n\nThis way of building apps is an alternative to the traditional iOS development that you can also do on the Apple TV with Swift/Obj-C, UIKit and the other frameworks. The interesting thing is that the default Apple TV apps like Music, TV Shows, etc. are built as JS client/server apps with Browserify and Handlebars templates.\n\nSo at a first try React kind of works on the platform (you might need to shim `window` and `document` as they are not available) but as you start getting into the details you realise there are some limitations to ATV's DOM model. For example I just noticed that [IDL attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes#Content_versus_IDL_attributes) are not working so that might be a problem. Then some elements are conflicting with HTML elements that have the same name, same issue for property names, and so on.\n\nIn conclusion I think a custom React renderer for the Apple TV would be the solution but the strange thing is that it would still be a DOM renderer like `react-dom` only configured for ATV's elements and attributes and patched for its DOM implementation's quirks. Do you guys think this is feasible?\n",
        "remove_template_description": "I've been playing lately with getting React to work for building client/server apps for the new Apple TV so I'm opening this thread just to start the conversation around the issue in case other people are also looking into it.  For those unfamiliar with the subject the SDK for the new Apple TV lets you build JavaScript applications that get loaded from your server and evaluated in a JS context on the device. Now for building interfaces they came up with a [DOM implementation](https://developer.apple.com/library/prerelease/tvos/documentation/TVMLJS/Reference/TVJSFrameworkReference/) and some flavour of XML called [TVML](https://developer.apple.com/library/prerelease/tvos/documentation/LanguagesUtilities/Conceptual/ATV_Template_Guide/) that just bridges to native UI components and APIs (much like React Native in a way). They also have a small JavaScript API called [TVJS](https://developer.apple.com/library/prerelease/tvos/documentation/TVMLJS/Reference/TVJSFrameworkReference/) for creating documents, making HTTP calls, etc.  This way of building apps is an alternative to the traditional iOS development that you can also do on the Apple TV with Swift/Obj-C, UIKit and the other frameworks. The interesting thing is that the default Apple TV apps like Music, TV Shows, etc. are built as JS client/server apps with Browserify and Handlebars templates.  So at a first try React kind of works on the platform (you might need to shim `window` and `document` as they are not available) but as you start getting into the details you realise there are some limitations to ATV's DOM model. For example I just noticed that [IDL attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes#Content_versus_IDL_attributes) are not working so that might be a problem. Then some elements are conflicting with HTML elements that have the same name, same issue for property names, and so on.  In conclusion I think a custom React renderer for the Apple TV would be the solution but the strange thing is that it would still be a DOM renderer like `react-dom` only configured for ATV's elements and attributes and patched for its DOM implementation's quirks. Do you guys think this is feasible?",
        "human_words": "I've been playing lately with getting React to work for building client/server apps for the new Apple TV so I'm opening this thread just to start the conversation around the issue in case other people are also looking into it.  For those unfamiliar with the subject the SDK for the new Apple TV lets you build JavaScript applications that get loaded from your server and evaluated in a JS context on the device. Now for building interfaces they came up with a [DOM implementation](https://developer.apple.com/library/prerelease/tvos/documentation/TVMLJS/Reference/TVJSFrameworkReference/) and some flavour of XML called [TVML](https://developer.apple.com/library/prerelease/tvos/documentation/LanguagesUtilities/Conceptual/ATV_Template_Guide/) that just bridges to native UI components and APIs (much like React Native in a way). They also have a small JavaScript API called [TVJS](https://developer.apple.com/library/prerelease/tvos/documentation/TVMLJS/Reference/TVJSFrameworkReference/) for creating documents, making HTTP calls, etc.  This way of building apps is an alternative to the traditional iOS development that you can also do on the Apple TV with Swift/Obj-C, UIKit and the other frameworks. The interesting thing is that the default Apple TV apps like Music, TV Shows, etc. are built as JS client/server apps with Browserify and Handlebars templates.  So at a first try React kind of works on the platform (you might need to shim `window` and `document` as they are not available) but as you start getting into the details you realise there are some limitations to ATV's DOM model. For example I just noticed that [IDL attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes#Content_versus_IDL_attributes) are not working so that might be a problem. Then some elements are conflicting with HTML elements that have the same name, same issue for property names, and so on.  In conclusion I think a custom React renderer for the Apple TV would be the solution but the strange thing is that it would still be a DOM renderer like `react-dom` only configured for ATV's elements and attributes and patched for its DOM implementation's quirks. Do you guys think this is feasible?",
        "human_words_regrex": "I've been playing lately with getting React to work for building client/server apps for the new Apple TV so I'm opening this thread just to start the conversation around the issue in case other people are also looking into it. For those unfamiliar with the subject the SDK for the new Apple TV lets you build JavaScript applications that get loaded from your server and evaluated in a JS context on the device. Now for building interfaces they came up with a  and some flavour of XML called  that just bridges to native UI components and APIs (much like React Native in a way). They also have a small JavaScript API called  for creating documents, making HTTP calls, etc. This way of building apps is an alternative to the traditional iOS development that you can also do on the Apple TV with Swift/Obj-C, UIKit and the other frameworks. The interesting thing is that the default Apple TV apps like Music, TV Shows, etc. are built as JS client/server apps with Browserify and Handlebars templates. So at a first try React kind of works on the platform (you might need to shim `window` and `document` as they are not available) but as you start getting into the details you realise there are some limitations to ATV's DOM model. For example I just noticed that  are not working so that might be a problem. Then some elements are conflicting with HTML elements that have the same name, same issue for property names, and so on. In conclusion I think a custom React renderer for the Apple TV would be the solution but the strange thing is that it would still be a DOM renderer like `react-dom` only configured for ATV's elements and attributes and patched for its DOM implementation's quirks. Do you guys think this is feasible?",
        "human_words_stopwords_removal_lemmatization": "'ve playing lately getting react work building client/server apps new apple tv 'm opening thread start conversation around issue case people also looking . unfamiliar subject sdk new apple tv let build javascript application get loaded server evaluated j context device . building interface came flavour xml called bridge native ui component apis ( much like react native way ) . also small javascript api called creating document , making http call , etc . way building apps alternative traditional io development also apple tv swift/obj-c , uikit framework . interesting thing default apple tv apps like music , tv show , etc . built j client/server apps browserify handlebar template . first try react kind work platform ( might need shim ` window ` ` document ` available ) start getting detail realise limitation atv 's dom model . example noticed working might problem . element conflicting html element name , issue property name , . conclusion think custom react renderer apple tv would solution strange thing would still dom renderer like ` react-dom ` configured atv 's element attribute patched dom implementation 's quirk . guy think feasible ?",
        "title_stopwords_removal_lemmatization": "react-dom apple tv"
    },
    {
        "issue_id": 115907795,
        "title": "How to test child props without triggering \"Do not access .props of a DOM node\" (0.14)?",
        "label": [
            "Type: Question"
        ],
        "date": "2015-11-09T16:05:17Z",
        "status": "closed",
        "description": "I have a component whose job it is to add certain properties to its child:\n\n``` javascript\nconst Parent = React.createClass({\n  doStuff() {\n    // ...\n  },\n\n  render() {\n    const child = React.cloneElement(this.props.children, {doStuff: this.doStuff});\n    return <div>{child}</div>;\n  }\n});\n```\n\nWith 0.13 I could test it like this:\n\n``` javascript\nconst {renderIntoDocument, findRenderedDOMComponentWithClass} = TestUtils;\nconst parent = renderIntoDocument(<Parent><span className=\"test\" /></Parent>);\nconst child = findRenderedDOMComponentWithClass(parent, \"test\");\nexpect(child.props.doStuff).to.equal(parent.doStuff);\n```\n\nWhat is the \"0.14 way\" of testing this?\n\nPS. I test the behavior of `Parent.doStuff` elsewhere, but I also need to ensure that the given child gets a reference to this method.\n",
        "remove_template_description": "I have a component whose job it is to add certain properties to its child:  ``` javascript const Parent = React.createClass({   doStuff() {     // ...   },    render() {     const child = React.cloneElement(this.props.children, {doStuff: this.doStuff});     return <div>{child}</div>;   } }); ```  With 0.13 I could test it like this:  ``` javascript const {renderIntoDocument, findRenderedDOMComponentWithClass} = TestUtils; const parent = renderIntoDocument(<Parent><span className=\"test\" /></Parent>); const child = findRenderedDOMComponentWithClass(parent, \"test\"); expect(child.props.doStuff).to.equal(parent.doStuff); ```  What is the \"0.14 way\" of testing this?  PS. I test the behavior of `Parent.doStuff` elsewhere, but I also need to ensure that the given child gets a reference to this method.",
        "human_words": "I have a component whose job it is to add certain properties to its child:    With 0.13 I could test it like this:    What is the \"0.14 way\" of testing this?  PS. I test the behavior of `Parent.doStuff` elsewhere, but I also need to ensure that the given child gets a reference to this method.",
        "human_words_regrex": "I have a component whose job it is to add certain properties to its child: With 0.13 I could test it like this: What is the \"0.14 way\" of testing this? PS. I test the behavior of `Parent.doStuff` elsewhere, but I also need to ensure that the given child gets a reference to this method.",
        "human_words_stopwords_removal_lemmatization": "component whose job add certain property child : 0.13 could test like : `` 0.14 way '' testing ? p . test behavior ` parent.dostuff ` elsewhere , also need ensure given child get reference method .",
        "title_stopwords_removal_lemmatization": "test child prop without triggering `` access .props dom node '' ( 0.14 ) ?"
    },
    {
        "issue_id": 115835034,
        "title": "After calling `setState` with an ES6 class instance as its argument , this.state became a plain object.",
        "label": [
            "Type: Question"
        ],
        "date": "2015-11-09T09:09:17Z",
        "status": "closed",
        "description": "When  React component  getInitialState method returns  an ES6 class instance , everything works fine ,  this.state in render mthod has the right type .\n\nBut when I call `setState` with ES6 class instance as its argument  , this.state becomes a plain object .\n\n``` javascript\nclass State{\n  constructor(text){\n    this.text = text\n  }\n  get value(){\n    return this.text\n  }\n}\n\nvar Main = React.createClass({\n  getInitialState(){\n    return  new State(\"es6\")\n  },\n\n  handleClick(){\n    var state = new State(\"react\")\n    this.setState(state)    // bad case emerged\n  },\n  render(){\n    console.log(`type ok : ${ this.state instanceof State}` )\n    return(\n      <div>\n      {this.state.value}\n      <br/>\n      <button onClick={this.handleClick}>click</button>\n      </div>\n    )\n  }\n\n})\n\nReactDOM.render(<Main />, document.getElementById(\"react-wrap\"))\n```\n\nreact  0.14.2\ngulp-babel 6.1.0\n",
        "remove_template_description": "When  React component  getInitialState method returns  an ES6 class instance , everything works fine ,  this.state in render mthod has the right type .  But when I call `setState` with ES6 class instance as its argument  , this.state becomes a plain object .  ``` javascript class State{   constructor(text){     this.text = text   }   get value(){     return this.text   } }  var Main = React.createClass({   getInitialState(){     return  new State(\"es6\")   },    handleClick(){     var state = new State(\"react\")     this.setState(state)    // bad case emerged   },   render(){     console.log(`type ok : ${ this.state instanceof State}` )     return(       <div>       {this.state.value}       <br/>       <button onClick={this.handleClick}>click</button>       </div>     )   }  })  ReactDOM.render(<Main />, document.getElementById(\"react-wrap\")) ```  react  0.14.2 gulp-babel 6.1.0",
        "human_words": "When  React component  getInitialState method returns  an ES6 class instance , everything works fine ,  this.state in render mthod has the right type .  But when I call `setState` with ES6 class instance as its argument  , this.state becomes a plain object .    react  0.14.2 gulp-babel 6.1.0",
        "human_words_regrex": "When React component getInitialState method returns an ES6 class instance , everything works fine , this.state in render mthod has the right type . But when I call `setState` with ES6 class instance as its argument , this.state becomes a plain object . react 0.14.2 gulp-babel 6.1.0",
        "human_words_stopwords_removal_lemmatization": "react component getinitialstate method return es6 class instance , everything work fine , this.state render mthod right type . call ` setstate ` es6 class instance argument , this.state becomes plain object . react 0.14.2 gulp-babel 6.1.0",
        "title_stopwords_removal_lemmatization": "calling ` setstate ` es6 class instance argument , this.state became plain object ."
    },
    {
        "issue_id": 115462739,
        "title": "How to trigger the eventListener that is registered outside of the react component?",
        "label": [
            "Type: Question"
        ],
        "date": "2015-11-06T08:56:17Z",
        "status": "closed",
        "description": "How to trigger the eventListener that is registered outside of the react component?\n",
        "remove_template_description": "How to trigger the eventListener that is registered outside of the react component?",
        "human_words": "How to trigger the eventListener that is registered outside of the react component?",
        "human_words_regrex": "How to trigger the eventListener that is registered outside of the react component?",
        "human_words_stopwords_removal_lemmatization": "trigger eventlistener registered outside react component ?",
        "title_stopwords_removal_lemmatization": "trigger eventlistener registered outside react component ?"
    },
    {
        "issue_id": 113971736,
        "title": "Weird components that can not be referred",
        "label": [
            "Type: Question",
            "Status: Unconfirmed"
        ],
        "date": "2015-10-29T03:31:47Z",
        "status": "closed",
        "description": "I use React and Material-UI for my app.\nHere is the part of code:\n\n```\n  render(){\n    return <div>\n       <Table ref='fromform'>\n         <TableHeader>\n      <TableRow>\n        <TableHeaderColumn tooltip='The ID'>No.</TableHeaderColumn>\n        <TableHeaderColumn tooltip='The Name'>Name</TableHeaderColumn>\n        <TableHeaderColumn tooltip='The Status'>Notes</TableHeaderColumn>\n      </TableRow>\n    </TableHeader>\n    <TableBody ref='fromformb'>\n      {playerList.map(function(player, index){\n          return <TableRow onTouchTap={this._onShowInfo.bind(this, index)} key={'row' + index}>\n            <TableRowColumn>{index + 1}</TableRowColumn>\n            <TableRowColumn>{player.name}</TableRowColumn>\n            <TableRowColumn>{player.notes}</TableRowColumn>\n          </TableRow>;\n      }.bind(this))}\n    </TableBody>\n  </Table>\n  <Dialog\n    title='Player Info'\n    ref='playerInfoDialog'>\n    <form role='form' ref='fromfo'>\n      <div className='form-group' ref='frowwmformb'>\n        <TextField type='text' hintText='Player Name' ref='txtName' fullWidth={true} />\n        <TextField type='text' hintText='Notes' ref='txtNotes' fullWidth={true} />\n      </div>\n    </form>\n  </Dialog>\n  <MainButtonGroup page='players' />\n  <Spinner />\n</div>;\n  }\n\n  _onShowInfo(index){\n    var player = playerList[index];\n    console.log(this.refs);\n    this.refs.playerInfoDialog.show();\n    this.refs.txtName.setValue(player.name);\n    this.refs.txtNotes.setValue(player.notes);\n  }\n}\n```\n\nWhat I want to do with this code is to generate rows in a table of player list, and while a row is tapped, a dialog shows up with the data of the row.\n\nBut the two 'TextField's with refs of 'txtName' and 'txtNotes' can't be referred(as on the last 2 lines, produce errors)\n. The pic below is produced by 'console.log' in '_onShowInfo' method. I added some 'ref's with random names just to test.\n\n![ee77834e-7a46-4734-8480-2464e1d65382](https://cloud.githubusercontent.com/assets/1431032/10785424/1588a5b8-7d9f-11e5-8b47-4c8ad4c2828a.png)\n",
        "remove_template_description": "I use React and Material-UI for my app. Here is the part of code:  ```   render(){     return <div>        <Table ref='fromform'>          <TableHeader>       <TableRow>         <TableHeaderColumn tooltip='The ID'>No.</TableHeaderColumn>         <TableHeaderColumn tooltip='The Name'>Name</TableHeaderColumn>         <TableHeaderColumn tooltip='The Status'>Notes</TableHeaderColumn>       </TableRow>     </TableHeader>     <TableBody ref='fromformb'>       {playerList.map(function(player, index){           return <TableRow onTouchTap={this._onShowInfo.bind(this, index)} key={'row' + index}>             <TableRowColumn>{index + 1}</TableRowColumn>             <TableRowColumn>{player.name}</TableRowColumn>             <TableRowColumn>{player.notes}</TableRowColumn>           </TableRow>;       }.bind(this))}     </TableBody>   </Table>   <Dialog     title='Player Info'     ref='playerInfoDialog'>     <form role='form' ref='fromfo'>       <div className='form-group' ref='frowwmformb'>         <TextField type='text' hintText='Player Name' ref='txtName' fullWidth={true} />         <TextField type='text' hintText='Notes' ref='txtNotes' fullWidth={true} />       </div>     </form>   </Dialog>   <MainButtonGroup page='players' />   <Spinner /> </div>;   }    _onShowInfo(index){     var player = playerList[index];     console.log(this.refs);     this.refs.playerInfoDialog.show();     this.refs.txtName.setValue(player.name);     this.refs.txtNotes.setValue(player.notes);   } } ```  What I want to do with this code is to generate rows in a table of player list, and while a row is tapped, a dialog shows up with the data of the row.  But the two 'TextField's with refs of 'txtName' and 'txtNotes' can't be referred(as on the last 2 lines, produce errors) . The pic below is produced by 'console.log' in '_onShowInfo' method. I added some 'ref's with random names just to test.  ![ee77834e-7a46-4734-8480-2464e1d65382](https://cloud.githubusercontent.com/assets/1431032/10785424/1588a5b8-7d9f-11e5-8b47-4c8ad4c2828a.png)",
        "human_words": "I use React and Material-UI for my app. Here is the part of code:    What I want to do with this code is to generate rows in a table of player list, and while a row is tapped, a dialog shows up with the data of the row.  But the two 'TextField's with refs of 'txtName' and 'txtNotes' can't be referred(as on the last 2 lines, produce errors) . The pic below is produced by 'console.log' in '_onShowInfo' method. I added some 'ref's with random names just to test.  ![ee77834e-7a46-4734-8480-2464e1d65382](https://cloud.githubusercontent.com/assets/1431032/10785424/1588a5b8-7d9f-11e5-8b47-4c8ad4c2828a.png)",
        "human_words_regrex": "I use React and Material-UI for my app. Here is the part of code: What I want to do with this code is to generate rows in a table of player list, and while a row is tapped, a dialog shows up with the data of the row. But the two 'TextField's with refs of 'txtName' and 'txtNotes' can't be referred(as on the last 2 lines, produce errors) . The pic below is produced by 'console.log' in '_onShowInfo' method. I added some 'ref's with random names just to test. !",
        "human_words_stopwords_removal_lemmatization": "use react material-ui app . part code : want code generate row table player list , row tapped , dialog show data row . two 'textfield 's ref 'txtname ' 'txtnotes ' ca n't referred ( last 2 line , produce error ) . pic produced 'console.log ' '_onshowinfo ' method . added 'ref 's random name test . !",
        "title_stopwords_removal_lemmatization": "weird component referred"
    },
    {
        "issue_id": 112046260,
        "title": "How to getElementById with TestUtils renderIntoDocument",
        "label": [
            "Type: Question"
        ],
        "date": "2015-10-18T22:27:23Z",
        "status": "closed",
        "description": "I'm writing some karma tests:\n\n```\n    renderer = renderIntoDocument(\n      <MyComponent>\n        <Child id='foo' />\n      </MyComponent>\n    );\n    dom = ReactDOM.findDOMNode(renderer);\n```\n\nSince `renderIntoDocument` doesn't actually render into `document`, how may I find a component by id?\n",
        "remove_template_description": "I'm writing some karma tests:  ```     renderer = renderIntoDocument(       <MyComponent>         <Child id='foo' />       </MyComponent>     );     dom = ReactDOM.findDOMNode(renderer); ```  Since `renderIntoDocument` doesn't actually render into `document`, how may I find a component by id?",
        "human_words": "I'm writing some karma tests:    Since `renderIntoDocument` doesn't actually render into `document`, how may I find a component by id?",
        "human_words_regrex": "I'm writing some karma tests: Since `renderIntoDocument` doesn't actually render into `document`, how may I find a component by id?",
        "human_words_stopwords_removal_lemmatization": "'m writing karma test : since ` renderintodocument ` n't actually render ` document ` , may find component id ?",
        "title_stopwords_removal_lemmatization": "getelementbyid testutils renderintodocument"
    },
    {
        "issue_id": 105733785,
        "title": "Modding ReactTransitionGroup to work with a wrapped component",
        "label": [
            "Type: Question"
        ],
        "date": "2015-09-10T05:24:00Z",
        "status": "closed",
        "description": "I'm not sure if this is the right repo to ask this question in, but I figured I'd start somewhere.\n\nI am working on an app that uses react-router and redux. Using a library called react-redux which exposes a decorator to wrap the component and pass in data from the store as props. So the component that gets passed to ReactTransitionGroup is actually a class called Connect, which has a property called WrappedComponent where the actual component lives. Since all the ReactTransitionGroup lifecycle methods are inplemented on the WrappedComponent, ReactTransitionGroup is not finding them.\n\nI tired extending ReactTransitionGroup and overriding the perform and _handle methods to also look for the lifecycle methods on WrappedComponent, but I get the following error:\n\n```\nUnhandled promise rejection ReferenceError: ReactTransitionChildMapping is not defined\n```\n\nHere is a gist of the extended class I created:\n\nhttps://gist.github.com/duro/c58d21cf3183ae01c786\n\nIf anyone could point me in the right direction, I would appreciate it.\n\nThanks!\n",
        "remove_template_description": "I'm not sure if this is the right repo to ask this question in, but I figured I'd start somewhere.  I am working on an app that uses react-router and redux. Using a library called react-redux which exposes a decorator to wrap the component and pass in data from the store as props. So the component that gets passed to ReactTransitionGroup is actually a class called Connect, which has a property called WrappedComponent where the actual component lives. Since all the ReactTransitionGroup lifecycle methods are inplemented on the WrappedComponent, ReactTransitionGroup is not finding them.  I tired extending ReactTransitionGroup and overriding the perform and _handle methods to also look for the lifecycle methods on WrappedComponent, but I get the following error:  ``` Unhandled promise rejection ReferenceError: ReactTransitionChildMapping is not defined ```  Here is a gist of the extended class I created:  https://gist.github.com/duro/c58d21cf3183ae01c786  If anyone could point me in the right direction, I would appreciate it.  Thanks!",
        "human_words": "I'm not sure if this is the right repo to ask this question in, but I figured I'd start somewhere.  I am working on an app that uses react-router and redux. Using a library called react-redux which exposes a decorator to wrap the component and pass in data from the store as props. So the component that gets passed to ReactTransitionGroup is actually a class called Connect, which has a property called WrappedComponent where the actual component lives. Since all the ReactTransitionGroup lifecycle methods are inplemented on the WrappedComponent, ReactTransitionGroup is not finding them.  I tired extending ReactTransitionGroup and overriding the perform and _handle methods to also look for the lifecycle methods on WrappedComponent, but I get the following error:    Here is a gist of the extended class I created:  https://gist.github.com/duro/c58d21cf3183ae01c786  If anyone could point me in the right direction, I would appreciate it.  Thanks!",
        "human_words_regrex": "I'm not sure if this is the right repo to ask this question in, but I figured I'd start somewhere. I am working on an app that uses react-router and redux. Using a library called react-redux which exposes a decorator to wrap the component and pass in data from the store as props. So the component that gets passed to ReactTransitionGroup is actually a class called Connect, which has a property called WrappedComponent where the actual component lives. Since all the ReactTransitionGroup lifecycle methods are inplemented on the WrappedComponent, ReactTransitionGroup is not finding them. I tired extending ReactTransitionGroup and overriding the perform and _handle methods to also look for the lifecycle methods on WrappedComponent, but I get the following error: Here is a gist of the extended class I created:  If anyone could point me in the right direction, I would appreciate it. Thanks!",
        "human_words_stopwords_removal_lemmatization": "'m sure right repo ask question , figured 'd start somewhere . working app us react-router redux . using library called react-redux expose decorator wrap component pas data store prop . component get passed reacttransitiongroup actually class called connect , property called wrappedcomponent actual component life . since reacttransitiongroup lifecycle method inplemented wrappedcomponent , reacttransitiongroup finding . tired extending reacttransitiongroup overriding perform _handle method also look lifecycle method wrappedcomponent , get following error : gist extended class created : anyone could point right direction , would appreciate . thanks !",
        "title_stopwords_removal_lemmatization": "modding reacttransitiongroup work wrapped component"
    },
    {
        "issue_id": 102795499,
        "title": "How to 'unfold' children ?",
        "label": [
            "Type: Question"
        ],
        "date": "2015-08-24T13:41:21Z",
        "status": "closed",
        "description": "Hi,\n\nI'm writing a library which uses JSX as an abstract DSL, a bit like `react-router` have `<Router/>` and `<Route />`, or a bit like `react-canvas` have `<Surface />` and others primitives.\n\n**To explain my question, I will take the example of `react-router`:**\n\nAn user could define a CustomRoute component that render() to a `<Route>`. \n\nand use it like this:\n\n```\n<Router>\n  <CustomRoute>\n</Router>\n```\n\nAFAIK This won't be detected by the `<Router/>` , because just traversing the props.children is not enough (router will see a `child.type==CustomRoute`, and won't understand it).\n\n**Do you know if this is possible to solve this?**\nBasically I want to descent the render() tree, and stop if it is not a user component (== it is a native component like `<div/>`), or if I reach the `<Route />` I'm looking for.\n",
        "remove_template_description": "Hi,  I'm writing a library which uses JSX as an abstract DSL, a bit like `react-router` have `<Router/>` and `<Route />`, or a bit like `react-canvas` have `<Surface />` and others primitives.  **To explain my question, I will take the example of `react-router`:**  An user could define a CustomRoute component that render() to a `<Route>`.   and use it like this:  ``` <Router>   <CustomRoute> </Router> ```  AFAIK This won't be detected by the `<Router/>` , because just traversing the props.children is not enough (router will see a `child.type==CustomRoute`, and won't understand it).  **Do you know if this is possible to solve this?** Basically I want to descent the render() tree, and stop if it is not a user component (== it is a native component like `<div/>`), or if I reach the `<Route />` I'm looking for.",
        "human_words": "Hi,  I'm writing a library which uses JSX as an abstract DSL, a bit like `react-router` have `<Router/>` and `<Route />`, or a bit like `react-canvas` have `<Surface />` and others primitives.  **To explain my question, I will take the example of `react-router`:**  An user could define a CustomRoute component that render() to a `<Route>`.   and use it like this:    AFAIK This won't be detected by the `<Router/>` , because just traversing the props.children is not enough (router will see a `child.type==CustomRoute`, and won't understand it).  **Do you know if this is possible to solve this?** Basically I want to descent the render() tree, and stop if it is not a user component (== it is a native component like `<div/>`), or if I reach the `<Route />` I'm looking for.",
        "human_words_regrex": "Hi, I'm writing a library which uses JSX as an abstract DSL, a bit like `react-router` have `` and ``, or a bit like `react-canvas` have `` and others primitives. **To explain my question, I will take the example of `react-router`:** An user could define a CustomRoute component that render() to a ``. and use it like this: AFAIK This won't be detected by the `` , because just traversing the props.children is not enough (router will see a `child.type==CustomRoute`, and won't understand it). **Do you know if this is possible to solve this?** Basically I want to descent the render() tree, and stop if it is not a user component (== it is a native component like ``), or if I reach the `` I'm looking for.",
        "human_words_stopwords_removal_lemmatization": "hi , 'm writing library us jsx abstract dsl , bit like ` react-router ` `` `` , bit like ` react-canvas ` `` others primitive . * * explain question , take example ` react-router ` : * * user could define customroute component render ( ) `` . use like : afaik wo n't detected `` , traversing props.children enough ( router see ` child.type==customroute ` , wo n't understand ) . * * know possible solve ? * * basically want descent render ( ) tree , stop user component ( == native component like `` ) , reach `` 'm looking .",
        "title_stopwords_removal_lemmatization": "'unfold ' child ?"
    },
    {
        "issue_id": 100427511,
        "title": "Should I set \"key\" for conditional components?",
        "label": [
            "Type: Question"
        ],
        "date": "2015-08-11T22:43:28Z",
        "status": "closed",
        "description": "For example, if I have two conditional children like\n\n``` javascript\n<div>\n  {showA && <A/>}\n  {showB && <B/>}\n</div>\n```\n\nthen should I set \"key\" for the children?\n\nWithout keys, when diff between `<A/><B/>` and `<B/>`, will the result be [remove A, remove B, insert B]?\n\nWhat if I have many conditional children like that?\n\nI had a look at https://facebook.github.io/react/docs/reconciliation.html but could not figure out the answer. Thanks for help.\n",
        "remove_template_description": "For example, if I have two conditional children like  ``` javascript <div>   {showA && <A/>}   {showB && <B/>} </div> ```  then should I set \"key\" for the children?  Without keys, when diff between `<A/><B/>` and `<B/>`, will the result be [remove A, remove B, insert B]?  What if I have many conditional children like that?  I had a look at https://facebook.github.io/react/docs/reconciliation.html but could not figure out the answer. Thanks for help.",
        "human_words": "For example, if I have two conditional children like    then should I set \"key\" for the children?  Without keys, when diff between `<A/><B/>` and `<B/>`, will the result be [remove A, remove B, insert B]?  What if I have many conditional children like that?  I had a look at https://facebook.github.io/react/docs/reconciliation.html but could not figure out the answer. Thanks for help.",
        "human_words_regrex": "For example, if I have two conditional children like then should I set \"key\" for the children? Without keys, when diff between `` and ``, will the result be [remove A, remove B, insert B]? What if I have many conditional children like that? I had a look at  but could not figure out the answer. Thanks for help.",
        "human_words_stopwords_removal_lemmatization": "example , two conditional child like set `` key '' child ? without key , diff `` `` , result [ remove , remove b , insert b ] ? many conditional child like ? look could figure answer . thanks help .",
        "title_stopwords_removal_lemmatization": "set `` key '' conditional component ?"
    },
    {
        "issue_id": 99343667,
        "title": "What is the differ between parent-based context and child-based context,why the child-based context will be lost",
        "label": [
            "Type: Question"
        ],
        "date": "2015-08-06T03:07:00Z",
        "status": "closed",
        "description": "I want to use the material-ui for my react app.I do the same as material -ui says here is my code \n## index.js\n\n<pre>\n<code>\nvar React = require('react'),\n    mui = require('material-ui'),\n    ThemeManager = new mui.Styles.ThemeManager(),\n    RaisedButton = mui.RaisedButton;\nvar Index = React.createClass({\n    childContextTypes: {\n        muiTheme: React.PropTypes.object\n    },\n\n    getChildContext: function() {\n        return {\n            muiTheme: ThemeManager.getCurrentTheme()\n        };\n    },\n    render: function() {\n        return (\n            &lt;div&gt;\n                &lt;RaisedButton label=\"Default\" /&gt;\n            &lt;/div&gt;\n        );\n    }\n});\nmodule.exports = Index;\n</code>\n</pre>\n\n## reactapp.js\n\n<pre>\n<code>\n(function(){\n    var React = require('react/addons')\n    var Index = require('./component/index.js')\n    var injectTapEventPlugin = require('react-tap-event-plugin');\n\n    window.React = React;\n\n    injectTapEventPlugin();\n\n    React.render(&lt;Index /&gt; , document.body)\n})()\n</code>\n</pre>\n\n\nFirst I use the jsx tool to compile this two files and then I use browserify to browserify the reactapp.js to main.js and add it to my pages index.html but it reported this\n\n<pre>\n<code>\nWarning: owner-based and parent-based contexts differ (values: `undefined` vs `[object Object]`) for key (muiTheme) while mounting Paper (see: http://fb.me/react-context-by-parent)\n\nUncaught TypeError: Cannot read property 'component' of undefined\n\nbackgroundColor: this.context.muiTheme.component.paper.backgroundColor,\n</code>\n</pre>\n\n\nI did get to the http://fb.me/react-context-by-parent but did not make any sense so how do I solve this?\n",
        "remove_template_description": "I want to use the material-ui for my react app.I do the same as material -ui says here is my code  ## index.js  <pre> <code> var React = require('react'),     mui = require('material-ui'),     ThemeManager = new mui.Styles.ThemeManager(),     RaisedButton = mui.RaisedButton; var Index = React.createClass({     childContextTypes: {         muiTheme: React.PropTypes.object     },      getChildContext: function() {         return {             muiTheme: ThemeManager.getCurrentTheme()         };     },     render: function() {         return (             &lt;div&gt;                 &lt;RaisedButton label=\"Default\" /&gt;             &lt;/div&gt;         );     } }); module.exports = Index; </code> </pre>  ## reactapp.js  <pre> <code> (function(){     var React = require('react/addons')     var Index = require('./component/index.js')     var injectTapEventPlugin = require('react-tap-event-plugin');      window.React = React;      injectTapEventPlugin();      React.render(&lt;Index /&gt; , document.body) })() </code> </pre>   First I use the jsx tool to compile this two files and then I use browserify to browserify the reactapp.js to main.js and add it to my pages index.html but it reported this  <pre> <code> Warning: owner-based and parent-based contexts differ (values: `undefined` vs `[object Object]`) for key (muiTheme) while mounting Paper (see: http://fb.me/react-context-by-parent)  Uncaught TypeError: Cannot read property 'component' of undefined  backgroundColor: this.context.muiTheme.component.paper.backgroundColor, </code> </pre>   I did get to the http://fb.me/react-context-by-parent but did not make any sense so how do I solve this?",
        "human_words": "I want to use the material-ui for my react app.I do the same as material -ui says here is my code  ## index.js  <pre> <code> var React = require('react'),     mui = require('material-ui'),     ThemeManager = new mui.Styles.ThemeManager(),     RaisedButton = mui.RaisedButton; var Index = React.createClass({     childContextTypes: {         muiTheme: React.PropTypes.object     },      getChildContext: function() {         return {             muiTheme: ThemeManager.getCurrentTheme()         };     },     render: function() {         return (             &lt;div&gt;                 &lt;RaisedButton label=\"Default\" /&gt;             &lt;/div&gt;         );     } }); module.exports = Index; </code> </pre>  ## reactapp.js  <pre> <code> (function(){     var React = require('react/addons')     var Index = require('./component/index.js')     var injectTapEventPlugin = require('react-tap-event-plugin');      window.React = React;      injectTapEventPlugin();      React.render(&lt;Index /&gt; , document.body) })() </code> </pre>   First I use the jsx tool to compile this two files and then I use browserify to browserify the reactapp.js to main.js and add it to my pages index.html but it reported this  <pre> <code> Warning: owner-based and parent-based contexts differ (values: `undefined` vs `[object Object]`) for key (muiTheme) while mounting Paper (see: http://fb.me/react-context-by-parent)  Uncaught TypeError: Cannot read property 'component' of undefined  backgroundColor: this.context.muiTheme.component.paper.backgroundColor, </code> </pre>   I did get to the http://fb.me/react-context-by-parent but did not make any sense so how do I solve this?",
        "human_words_regrex": "I want to use the material-ui for my react app.I do the same as material -ui says here is my code ## index.js   var React = require('react'), mui = require('material-ui'), ThemeManager = new mui.Styles.ThemeManager(), RaisedButton = mui.RaisedButton; var Index = React.createClass({ childContextTypes: { muiTheme: React.PropTypes.object }, getChildContext: function() { return { muiTheme: ThemeManager.getCurrentTheme() }; }, render: function() { return ( &lt;div&gt; &lt;RaisedButton label=\"Default\" /&gt; &lt;/div&gt; ); } }); module.exports = Index;   ## reactapp.js   (function(){ var React = require('react/addons') var Index = require('./component/index.js') var injectTapEventPlugin = require('react-tap-event-plugin'); window.React = React; injectTapEventPlugin(); React.render(&lt;Index /&gt; , document.body) })()   First I use the jsx tool to compile this two files and then I use browserify to browserify the reactapp.js to main.js and add it to my pages index.html but it reported this   Warning: owner-based and parent-based contexts differ (values: `undefined` vs `[object Object]`) for key (muiTheme) while mounting Paper (see:  Uncaught TypeError: Cannot read property 'component' of undefined backgroundColor: this.context.muiTheme.component.paper.backgroundColor,   I did get to the  but did not make any sense so how do I solve this?",
        "human_words_stopwords_removal_lemmatization": "want use material-ui react app.i material -ui say code # # index.js var react = require ( 'react ' ) , mui = require ( 'material-ui ' ) , thememanager = new mui.styles.thememanager ( ) , raisedbutton = mui.raisedbutton ; var index = react.createclass ( { childcontexttypes : { muitheme : react.proptypes.object } , getchildcontext : function ( ) { return { muitheme : thememanager.getcurrenttheme ( ) } ; } , render : function ( ) { return ( & lt ; div & gt ; & lt ; raisedbutton label= '' default '' / & gt ; & lt ; /div & gt ; ) ; } } ) ; module.exports = index ; # # reactapp.js ( function ( ) { var react = require ( 'react/addons ' ) var index = require ( './component/index.js ' ) var injecttapeventplugin = require ( 'react-tap-event-plugin ' ) ; window.react = react ; injecttapeventplugin ( ) ; react.render ( & lt ; index / & gt ; , document.body ) } ) ( ) first use jsx tool compile two file use browserify browserify reactapp.js main.js add page index.html reported warning : owner-based parent-based context differ ( value : ` undefined ` v ` [ object object ] ` ) key ( muitheme ) mounting paper ( see : uncaught typeerror : read property 'component ' undefined backgroundcolor : this.context.muitheme.component.paper.backgroundcolor , get make sense solve ?",
        "title_stopwords_removal_lemmatization": "differ parent-based context child-based context , child-based context lost"
    },
    {
        "issue_id": 99180130,
        "title": "React with Facebook's comments",
        "label": [
            "Type: Question"
        ],
        "date": "2015-08-05T11:12:16Z",
        "status": "closed",
        "description": "Hi, I have a page completely written in React, so in html template is only a `<div id=\"app\"></div>`, and I have to use comments widget from Facebook. I came up with:\n\n``` js\nReact.render(\n  <App/>,// creates <div id=\"fb-root\"></div>\n  document.getElementById('app'),\n  function() {\n    (function(d, s, id) {\n    var js, fjs = d.getElementsByTagName(s)[0];\n    if (d.getElementById(id)) return;\n    js = d.createElement(s); js.id = id;\n    js.src = \"//connect.facebook.net/en_US/sdk.js#xfbml=1&version=v2.4\";\n    fjs.parentNode.insertBefore(js, fjs);\n    }(document, 'script', 'facebook-jssdk'));\n  }\n);\n```\n\nBut, the code above mutates the DOM, which is against React's philosophy. And let's assume that Facebook rewrites this plugin to React, so there would be two React apps - React inside React. Is it OK to include Facebook's comments like this or am I completely on a wrong path? Is it OK to have one React app inside another one (e. g. a video player inside a page)?\n",
        "remove_template_description": "Hi, I have a page completely written in React, so in html template is only a `<div id=\"app\"></div>`, and I have to use comments widget from Facebook. I came up with:  ``` js React.render(   <App/>,// creates <div id=\"fb-root\"></div>   document.getElementById('app'),   function() {     (function(d, s, id) {     var js, fjs = d.getElementsByTagName(s)[0];     if (d.getElementById(id)) return;     js = d.createElement(s); js.id = id;     js.src = \"//connect.facebook.net/en_US/sdk.js#xfbml=1&version=v2.4\";     fjs.parentNode.insertBefore(js, fjs);     }(document, 'script', 'facebook-jssdk'));   } ); ```  But, the code above mutates the DOM, which is against React's philosophy. And let's assume that Facebook rewrites this plugin to React, so there would be two React apps - React inside React. Is it OK to include Facebook's comments like this or am I completely on a wrong path? Is it OK to have one React app inside another one (e. g. a video player inside a page)?",
        "human_words": "Hi, I have a page completely written in React, so in html template is only a `<div id=\"app\"></div>`, and I have to use comments widget from Facebook. I came up with:    But, the code above mutates the DOM, which is against React's philosophy. And let's assume that Facebook rewrites this plugin to React, so there would be two React apps - React inside React. Is it OK to include Facebook's comments like this or am I completely on a wrong path? Is it OK to have one React app inside another one (e. g. a video player inside a page)?",
        "human_words_regrex": "Hi, I have a page completely written in React, so in html template is only a ``, and I have to use comments widget from Facebook. I came up with: But, the code above mutates the DOM, which is against React's philosophy. And let's assume that Facebook rewrites this plugin to React, so there would be two React apps - React inside React. Is it OK to include Facebook's comments like this or am I completely on a wrong path? Is it OK to have one React app inside another one (e. g. a video player inside a page)?",
        "human_words_stopwords_removal_lemmatization": "hi , page completely written react , html template `` , use comment widget facebook . came : , code mutates dom , react 's philosophy . let 's assume facebook rewrite plugin react , would two react apps - react inside react . ok include facebook 's comment like completely wrong path ? ok one react app inside another one ( e. g. video player inside page ) ?",
        "title_stopwords_removal_lemmatization": "react facebook 's comment"
    },
    {
        "issue_id": 98992171,
        "title": "Question: Dynamic Context",
        "label": [
            "Type: Question"
        ],
        "date": "2015-08-04T15:06:07Z",
        "status": "closed",
        "description": "I am trying to have locality specified throughout my app. I thought that using context could be a good solution for this. To achieve this, I need to let the user dynamically change their locale.\n\nShould dynamically changing the context have any negative consequences? I have tested it, and it works, but want to make sure there will not be any negative consequences.\n",
        "remove_template_description": "I am trying to have locality specified throughout my app. I thought that using context could be a good solution for this. To achieve this, I need to let the user dynamically change their locale.  Should dynamically changing the context have any negative consequences? I have tested it, and it works, but want to make sure there will not be any negative consequences.",
        "human_words": "I am trying to have locality specified throughout my app. I thought that using context could be a good solution for this. To achieve this, I need to let the user dynamically change their locale.  Should dynamically changing the context have any negative consequences? I have tested it, and it works, but want to make sure there will not be any negative consequences.",
        "human_words_regrex": "I am trying to have locality specified throughout my app. I thought that using context could be a good solution for this. To achieve this, I need to let the user dynamically change their locale. Should dynamically changing the context have any negative consequences? I have tested it, and it works, but want to make sure there will not be any negative consequences.",
        "human_words_stopwords_removal_lemmatization": "trying locality specified throughout app . thought using context could good solution . achieve , need let user dynamically change locale . dynamically changing context negative consequence ? tested , work , want make sure negative consequence .",
        "title_stopwords_removal_lemmatization": "question : dynamic context"
    },
    {
        "issue_id": 98715443,
        "title": "How to import react npm compoent in jsx file?",
        "label": [
            "Type: Question"
        ],
        "date": "2015-08-03T10:37:30Z",
        "status": "closed",
        "description": "Hello, I am freshman of react\uff0cI use **gulp** to build web assets\uff0cI compile all jsx files with **gulp-react** to js like this:\n\n``` javascript\n gulp.src(paths.appJsx)\n        .pipe(concat('app.jsx'))\n        .pipe(react());\n```\n\nBut now, I want to use some react component registered in npm\uff0csuch as **react-iscroll**\uff0cI don't know how to introduce it in my jsx file\uff0cif I directly add bellow to jsx file't top\uff0cit won't work well:\n\n``` javascript\n// my component jsx file\nvar React = require('react'),\n    ReactIScroll = require('react-iscroll'),\n    iScroll = require('iscroll');\n```\n\nHow I import them rightly?\n\nThanks & Regards.\n",
        "remove_template_description": "Hello, I am freshman of react\uff0cI use **gulp** to build web assets\uff0cI compile all jsx files with **gulp-react** to js like this:  ``` javascript  gulp.src(paths.appJsx)         .pipe(concat('app.jsx'))         .pipe(react()); ```  But now, I want to use some react component registered in npm\uff0csuch as **react-iscroll**\uff0cI don't know how to introduce it in my jsx file\uff0cif I directly add bellow to jsx file't top\uff0cit won't work well:  ``` javascript // my component jsx file var React = require('react'),     ReactIScroll = require('react-iscroll'),     iScroll = require('iscroll'); ```  How I import them rightly?  Thanks & Regards.",
        "human_words": "Hello, I am freshman of react\uff0cI use **gulp** to build web assets\uff0cI compile all jsx files with **gulp-react** to js like this:    But now, I want to use some react component registered in npm\uff0csuch as **react-iscroll**\uff0cI don't know how to introduce it in my jsx file\uff0cif I directly add bellow to jsx file't top\uff0cit won't work well:    How I import them rightly?  Thanks & Regards.",
        "human_words_regrex": "Hello, I am freshman of react\uff0cI use **gulp** to build web assets\uff0cI compile all jsx files with **gulp-react** to js like this: But now, I want to use some react component registered in npm\uff0csuch as **react-iscroll**\uff0cI don't know how to introduce it in my jsx file\uff0cif I directly add bellow to jsx file't top\uff0cit won't work well: How I import them rightly? Thanks & Regards.",
        "human_words_stopwords_removal_lemmatization": "hello , freshman react\uff0ci use * * gulp * * build web assets\uff0ci compile jsx file * * gulp-react * * j like : , want use react component registered npm\uff0csuch * * react-iscroll * * \uff0ci n't know introduce jsx file\uff0cif directly add bellow jsx file't top\uff0cit wo n't work well : import rightly ? thanks & regard .",
        "title_stopwords_removal_lemmatization": "import react npm compoent jsx file ?"
    },
    {
        "issue_id": 96283779,
        "title": "update data from rest api ",
        "label": [
            "Type: Question"
        ],
        "date": "2015-07-21T10:34:32Z",
        "status": "closed",
        "description": "``` jsx\n\nvar app = React.createClass({\n  getInitialState: function() {\n    return {data: 1};\n  },\n  updateData: function(){\n    this.setState(function(state){\n        this.getData1(state,function(state,data){\n          return data\n      })\n    })\n  },\n  getData1: function(state,cb){\n      $.get(\"http://api.openweathermap.org/data/2.5/weather?q=London,uk\",function(result){\n        data = { data : result};\n  // state.data = result\n        cb(state,data)\n   });\n },\n  render : function(){\n   return <a onClick={this.updateData} > {this.state.data}</a>\n  }\n})\n\n```\n\nI have tried this to update state but this is not working. \nonly way to update was manully (commented portion) even then it only render on second click  Can you tell me proper way to update state using REST api calls \n",
        "remove_template_description": "``` jsx  var app = React.createClass({   getInitialState: function() {     return {data: 1};   },   updateData: function(){     this.setState(function(state){         this.getData1(state,function(state,data){           return data       })     })   },   getData1: function(state,cb){       $.get(\"http://api.openweathermap.org/data/2.5/weather?q=London,uk\",function(result){         data = { data : result};   // state.data = result         cb(state,data)    });  },   render : function(){    return <a onClick={this.updateData} > {this.state.data}</a>   } })  ```  I have tried this to update state but this is not working.  only way to update was manully (commented portion) even then it only render on second click  Can you tell me proper way to update state using REST api calls",
        "human_words": "  I have tried this to update state but this is not working.  only way to update was manully (commented portion) even then it only render on second click  Can you tell me proper way to update state using REST api calls",
        "human_words_regrex": " I have tried this to update state but this is not working. only way to update was manully (commented portion) even then it only render on second click Can you tell me proper way to update state using REST api calls",
        "human_words_stopwords_removal_lemmatization": "tried update state working . way update manully ( commented portion ) even render second click tell proper way update state using rest api call",
        "title_stopwords_removal_lemmatization": "update data rest api"
    },
    {
        "issue_id": 94904110,
        "title": "TestUtils.Simulate.[change/keyDown/keyPress] is not working on a normal input field",
        "label": [
            "Type: Question"
        ],
        "date": "2015-07-14T09:25:09Z",
        "status": "closed",
        "description": "I'm having a hard time with `TestUtils.Simulate`, which are definitely not behaving as expected.\n\nBasically I have an input field of type text and I try to change it's content, click it and press some keys.\nNo rocket science, but all the \"editing\" stuff fails miserably.\n\nI wrote a small JSBin to showcase what the component I'm testing should do:\nhttps://jsbin.com/hutujemoku/13/edit?html,js,output\n\nAnd I've also wrote a small repo to showcase the failing tests:\nhttps://github.com/dmatteo/simulate-test\n\nWhat's going on?\n\np.s. the bin is running on 0.13.1 while the repo is running on 0.12.2, because that is what I'm using still. Nevertheless, I've also tried with 0.13.3 and it keeps failing\n",
        "remove_template_description": "I'm having a hard time with `TestUtils.Simulate`, which are definitely not behaving as expected.  Basically I have an input field of type text and I try to change it's content, click it and press some keys. No rocket science, but all the \"editing\" stuff fails miserably.  I wrote a small JSBin to showcase what the component I'm testing should do: https://jsbin.com/hutujemoku/13/edit?html,js,output  And I've also wrote a small repo to showcase the failing tests: https://github.com/dmatteo/simulate-test  What's going on?  p.s. the bin is running on 0.13.1 while the repo is running on 0.12.2, because that is what I'm using still. Nevertheless, I've also tried with 0.13.3 and it keeps failing",
        "human_words": "I'm having a hard time with `TestUtils.Simulate`, which are definitely not behaving as expected.  Basically I have an input field of type text and I try to change it's content, click it and press some keys. No rocket science, but all the \"editing\" stuff fails miserably.  I wrote a small JSBin to showcase what the component I'm testing should do: https://jsbin.com/hutujemoku/13/edit?html,js,output  And I've also wrote a small repo to showcase the failing tests: https://github.com/dmatteo/simulate-test  What's going on?  p.s. the bin is running on 0.13.1 while the repo is running on 0.12.2, because that is what I'm using still. Nevertheless, I've also tried with 0.13.3 and it keeps failing",
        "human_words_regrex": "I'm having a hard time with `TestUtils.Simulate`, which are definitely not behaving as expected. Basically I have an input field of type text and I try to change it's content, click it and press some keys. No rocket science, but all the \"editing\" stuff fails miserably. I wrote a small JSBin to showcase what the component I'm testing should do:  And I've also wrote a small repo to showcase the failing tests:  What's going on? p.s. the bin is running on 0.13.1 while the repo is running on 0.12.2, because that is what I'm using still. Nevertheless, I've also tried with 0.13.3 and it keeps failing",
        "human_words_stopwords_removal_lemmatization": "'m hard time ` testutils.simulate ` , definitely behaving expected . basically input field type text try change 's content , click press key . rocket science , `` editing '' stuff fails miserably . wrote small jsbin showcase component 'm testing : 've also wrote small repo showcase failing test : 's going ? p.s . bin running 0.13.1 repo running 0.12.2 , 'm using still . nevertheless , 've also tried 0.13.3 keep failing",
        "title_stopwords_removal_lemmatization": "testutils.simulate . [ change/keydown/keypress ] working normal input field"
    },
    {
        "issue_id": 94443516,
        "title": "How re-rendering should be done in efficient way while data change in flux architecture controller?",
        "label": [
            "Type: Question"
        ],
        "date": "2015-07-11T06:21:56Z",
        "status": "closed",
        "description": "I have a controller which consist of many views in it. Only my controller is having state and I pass data to my views through props. Now problem is suppose  my view depends on number of product.\nSay we have more than 100 products and each product consist of number of properties related to it. Now each property also have their own property on it. So if I change value of a sub-property then i have to re-render. No We dispatch the change event so it again start re-rendering from controller and it have to process through all the codes like all condition checks, loops etc which is time consuming. So how should we achieve it flux-react architecture? \n",
        "remove_template_description": "I have a controller which consist of many views in it. Only my controller is having state and I pass data to my views through props. Now problem is suppose  my view depends on number of product. Say we have more than 100 products and each product consist of number of properties related to it. Now each property also have their own property on it. So if I change value of a sub-property then i have to re-render. No We dispatch the change event so it again start re-rendering from controller and it have to process through all the codes like all condition checks, loops etc which is time consuming. So how should we achieve it flux-react architecture?",
        "human_words": "I have a controller which consist of many views in it. Only my controller is having state and I pass data to my views through props. Now problem is suppose  my view depends on number of product. Say we have more than 100 products and each product consist of number of properties related to it. Now each property also have their own property on it. So if I change value of a sub-property then i have to re-render. No We dispatch the change event so it again start re-rendering from controller and it have to process through all the codes like all condition checks, loops etc which is time consuming. So how should we achieve it flux-react architecture?",
        "human_words_regrex": "I have a controller which consist of many views in it. Only my controller is having state and I pass data to my views through props. Now problem is suppose my view depends on number of product. Say we have more than 100 products and each product consist of number of properties related to it. Now each property also have their own property on it. So if I change value of a sub-property then i have to re-render. No We dispatch the change event so it again start re-rendering from controller and it have to process through all the codes like all condition checks, loops etc which is time consuming. So how should we achieve it flux-react architecture?",
        "human_words_stopwords_removal_lemmatization": "controller consist many view . controller state pas data view prop . problem suppose view depends number product . say 100 product product consist number property related . property also property . change value sub-property re-render . dispatch change event start re-rendering controller process code like condition check , loop etc time consuming . achieve flux-react architecture ?",
        "title_stopwords_removal_lemmatization": "re-rendering done efficient way data change flux architecture controller ?"
    },
    {
        "issue_id": 91322227,
        "title": "Two different outputs from terminal and web inspector. Incorrect view rendered",
        "label": [
            "Type: Question"
        ],
        "date": "2015-06-26T17:59:35Z",
        "status": "closed",
        "description": "I am having trouble with generating my views with `reactjs`. I have these two views which I would like to generate.\n\n```\nvar test1 = (\n    <div id=\"container\">\n      <p>{initials}</p>\n      <p>loggedin!</p>\n    </div>\n    );\n\nvar test2 = (\n    <div id=\"container\">\n      <p>notloggedin</p>\n    </div>\n    );\n\n\nvar initials = \"\";\nvar isLoggedIn = false;\n\nvar Layout = React.createClass({\n    componentWillMount: function() {\n        try {\n            if (window && window.User) {\n                initials = window.User.name.first[0].toUpperCase() + window.User.name.last[0].toUpperCase();\n                isLoggedIn = true;\n            }\n        } catch(e) {\n            // ignore\n        }\n    },\n    render: function () {\n        if (isLoggedIn) {\n            console.log(window.User);\n            console.log(initials);\n            return test1;\n        } else {\n            console.log(\"not logged in\");\n            return test2;\n        }\n    }\n});\n```\n\nWhen I run this code, I have 2 different outputs from my terminal and my web inspector.\n\nTerminal:\n\n```\n[1] rendering server side react /\n[1] not logged in\n```\n\nWeb inspector:\n\n```\nObject {username: \"bli1\", userId: \"1298085750\", address: \"127.0.0.1\", name: Object, email: \"Bradford_Li@gmail.com\"\u2026}\n\nBL\n```\n\nThe first and second output from `console.log(window.User)` and `console.log(initials)` are displayed above. I am not sure why this is occurring. I'm not sure how to handle this to achieve the desired logic. \n\nThe view displayed on my broswer is that of `test2`\n",
        "remove_template_description": "I am having trouble with generating my views with `reactjs`. I have these two views which I would like to generate.  ``` var test1 = (     <div id=\"container\">       <p>{initials}</p>       <p>loggedin!</p>     </div>     );  var test2 = (     <div id=\"container\">       <p>notloggedin</p>     </div>     );   var initials = \"\"; var isLoggedIn = false;  var Layout = React.createClass({     componentWillMount: function() {         try {             if (window && window.User) {                 initials = window.User.name.first[0].toUpperCase() + window.User.name.last[0].toUpperCase();                 isLoggedIn = true;             }         } catch(e) {             // ignore         }     },     render: function () {         if (isLoggedIn) {             console.log(window.User);             console.log(initials);             return test1;         } else {             console.log(\"not logged in\");             return test2;         }     } }); ```  When I run this code, I have 2 different outputs from my terminal and my web inspector.  Terminal:  ``` [1] rendering server side react / [1] not logged in ```  Web inspector:  ``` Object {username: \"bli1\", userId: \"1298085750\", address: \"127.0.0.1\", name: Object, email: \"Bradford_Li@gmail.com\"\u2026}  BL ```  The first and second output from `console.log(window.User)` and `console.log(initials)` are displayed above. I am not sure why this is occurring. I'm not sure how to handle this to achieve the desired logic.   The view displayed on my broswer is that of `test2`",
        "human_words": "I am having trouble with generating my views with `reactjs`. I have these two views which I would like to generate.    When I run this code, I have 2 different outputs from my terminal and my web inspector.  Terminal:    Web inspector:    The first and second output from `console.log(window.User)` and `console.log(initials)` are displayed above. I am not sure why this is occurring. I'm not sure how to handle this to achieve the desired logic.   The view displayed on my broswer is that of `test2`",
        "human_words_regrex": "I am having trouble with generating my views with `reactjs`. I have these two views which I would like to generate. When I run this code, I have 2 different outputs from my terminal and my web inspector. Terminal: Web inspector: The first and second output from `console.log(window.User)` and `console.log(initials)` are displayed above. I am not sure why this is occurring. I'm not sure how to handle this to achieve the desired logic. The view displayed on my broswer is that of `test2`",
        "human_words_stopwords_removal_lemmatization": "trouble generating view ` reactjs ` . two view would like generate . run code , 2 different output terminal web inspector . terminal : web inspector : first second output ` console.log ( window.user ) ` ` console.log ( initial ) ` displayed . sure occurring . 'm sure handle achieve desired logic . view displayed broswer ` test2 `",
        "title_stopwords_removal_lemmatization": "two different output terminal web inspector . incorrect view rendered"
    },
    {
        "issue_id": 80012310,
        "title": "in component render method, how to get future container's width , height?",
        "label": [
            "Type: Question"
        ],
        "date": "2015-05-24T01:35:45Z",
        "status": "closed",
        "description": "I want to write a layout component \n\n```\n  <layout jsxcols=\"300,200,*\">\n         <div>\n                 <layout jsxcols=\"100,200\">\n                          <div></div>\n                         <div></div>\n                </layout>\n         </div>\n         <div> width will take 200px </div>\n         <div> width will take the rest width of container </div>\n </layout>\n```\n\nhow to get the future container's width , height? \n",
        "remove_template_description": "I want to write a layout component   ```   <layout jsxcols=\"300,200,*\">          <div>                  <layout jsxcols=\"100,200\">                           <div></div>                          <div></div>                 </layout>          </div>          <div> width will take 200px </div>          <div> width will take the rest width of container </div>  </layout> ```  how to get the future container's width , height?",
        "human_words": "I want to write a layout component     how to get the future container's width , height?",
        "human_words_regrex": "I want to write a layout component how to get the future container's width , height?",
        "human_words_stopwords_removal_lemmatization": "want write layout component get future container 's width , height ?",
        "title_stopwords_removal_lemmatization": "component render method , get future container 's width , height ?"
    },
    {
        "issue_id": 76046586,
        "title": "HTML Tag in component props",
        "label": [
            "Type: Question"
        ],
        "date": "2015-05-13T16:31:07Z",
        "status": "closed",
        "description": "Hi,\n\nI'm new in React development and i'm not english so i have some difficulty to understand all things which are possible in react.\nWell here, i would like to use some HTML tags in props for a component.\n\nFor example : if I have this component :\n\n```\nvar Card=React.createClass({\n    render:function(){\n        return(\n            <Container className=\"card\">\n                <Container className=\"card-content\">\n                    <span className=\"card-title grey-text\">{this.props.title}</span>\n                    {this.props.children}\n                </Container>\n            </Container>\n        );\n    }\n});\n```\n\nI would like to use it like that : \n\n```\n<Card title=\"<div>Mes informations d'identification</div>\">\n    Content\n</Card>\n```\n\nBut the title \"div Mes infor... div\" still be the same, whereas i would like to have a div with inside the real title.\n\nSo I don't know how to use the props of component to have my result...\n\n/Sorry for my poor English/\n",
        "remove_template_description": "Hi,  I'm new in React development and i'm not english so i have some difficulty to understand all things which are possible in react. Well here, i would like to use some HTML tags in props for a component.  For example : if I have this component :  ``` var Card=React.createClass({     render:function(){         return(             <Container className=\"card\">                 <Container className=\"card-content\">                     <span className=\"card-title grey-text\">{this.props.title}</span>                     {this.props.children}                 </Container>             </Container>         );     } }); ```  I would like to use it like that :   ``` <Card title=\"<div>Mes informations d'identification</div>\">     Content </Card> ```  But the title \"div Mes infor... div\" still be the same, whereas i would like to have a div with inside the real title.  So I don't know how to use the props of component to have my result...  /Sorry for my poor English/",
        "human_words": "Hi,  I'm new in React development and i'm not english so i have some difficulty to understand all things which are possible in react. Well here, i would like to use some HTML tags in props for a component.  For example : if I have this component :    I would like to use it like that :     But the title \"div Mes infor... div\" still be the same, whereas i would like to have a div with inside the real title.  So I don't know how to use the props of component to have my result...  /Sorry for my poor English/",
        "human_words_regrex": "Hi, I'm new in React development and i'm not english so i have some difficulty to understand all things which are possible in react. Well here, i would like to use some HTML tags in props for a component. For example : if I have this component : I would like to use it like that : But the title \"div Mes infor... div\" still be the same, whereas i would like to have a div with inside the real title. So I don't know how to use the props of component to have my result... /Sorry for my poor English/",
        "human_words_stopwords_removal_lemmatization": "hi , 'm new react development 'm english difficulty understand thing possible react . well , would like use html tag prop component . example : component : would like use like : title `` div me infor ... div '' still , whereas would like div inside real title . n't know use prop component result ... /sorry poor english/",
        "title_stopwords_removal_lemmatization": "html tag component prop"
    },
    {
        "issue_id": 67907563,
        "title": "Should I use Statefy?",
        "label": [
            "Type: Question"
        ],
        "date": "2015-04-12T12:11:21Z",
        "status": "closed",
        "description": "Hey folks. We're implementing a set of React components and, because of what I explain in the `motivation` section, we created [Statefy](https://github.com/gearz-lab/statefy).\n\nThe problem is: I'm not sure if it's a good practice. I'm afraid of using it in a large number of components just to find out it would be way better to do it in another way.\n\nCould you please, give your feedback on this project? That would be much appreciated.\n\nThanks.\n",
        "remove_template_description": "Hey folks. We're implementing a set of React components and, because of what I explain in the `motivation` section, we created [Statefy](https://github.com/gearz-lab/statefy).  The problem is: I'm not sure if it's a good practice. I'm afraid of using it in a large number of components just to find out it would be way better to do it in another way.  Could you please, give your feedback on this project? That would be much appreciated.  Thanks.",
        "human_words": "Hey folks. We're implementing a set of React components and, because of what I explain in the `motivation` section, we created [Statefy](https://github.com/gearz-lab/statefy).  The problem is: I'm not sure if it's a good practice. I'm afraid of using it in a large number of components just to find out it would be way better to do it in another way.  Could you please, give your feedback on this project? That would be much appreciated.  Thanks.",
        "human_words_regrex": "Hey folks. We're implementing a set of React components and, because of what I explain in the `motivation` section, we created . The problem is: I'm not sure if it's a good practice. I'm afraid of using it in a large number of components just to find out it would be way better to do it in another way. Could you please, give your feedback on this project? That would be much appreciated. Thanks.",
        "human_words_stopwords_removal_lemmatization": "hey folk . 're implementing set react component , explain ` motivation ` section , created . problem : 'm sure 's good practice . 'm afraid using large number component find would way better another way . could please , give feedback project ? would much appreciated . thanks .",
        "title_stopwords_removal_lemmatization": "use statefy ?"
    },
    {
        "issue_id": 59957108,
        "title": "How do I encapsulate styles?",
        "label": [
            "Type: Question"
        ],
        "date": "2015-03-05T14:17:04Z",
        "status": "closed",
        "description": "Hi, \nwe are converting a big project written with Polymer to React.\nThe biggest problem we face is the lack of encapsulated styling.\nI would like to encapsulate my sass files with encapsulated styles among my components.\nIn the entire react web site and documentation there is almost no mentioning of styles.\nFurthermore in chrome devtools under React plugin you have all the component properties except style. (not like devtools of the regular DOM).\nI really like React and what your doing so how are you going to approach this problem?\n",
        "remove_template_description": "Hi,  we are converting a big project written with Polymer to React. The biggest problem we face is the lack of encapsulated styling. I would like to encapsulate my sass files with encapsulated styles among my components. In the entire react web site and documentation there is almost no mentioning of styles. Furthermore in chrome devtools under React plugin you have all the component properties except style. (not like devtools of the regular DOM). I really like React and what your doing so how are you going to approach this problem?",
        "human_words": "Hi,  we are converting a big project written with Polymer to React. The biggest problem we face is the lack of encapsulated styling. I would like to encapsulate my sass files with encapsulated styles among my components. In the entire react web site and documentation there is almost no mentioning of styles. Furthermore in chrome devtools under React plugin you have all the component properties except style. (not like devtools of the regular DOM). I really like React and what your doing so how are you going to approach this problem?",
        "human_words_regrex": "Hi, we are converting a big project written with Polymer to React. The biggest problem we face is the lack of encapsulated styling. I would like to encapsulate my sass files with encapsulated styles among my components. In the entire react web site and documentation there is almost no mentioning of styles. Furthermore in chrome devtools under React plugin you have all the component properties except style. (not like devtools of the regular DOM). I really like React and what your doing so how are you going to approach this problem?",
        "human_words_stopwords_removal_lemmatization": "hi , converting big project written polymer react . biggest problem face lack encapsulated styling . would like encapsulate sas file encapsulated style among component . entire react web site documentation almost mentioning style . furthermore chrome devtools react plugin component property except style . ( like devtools regular dom ) . really like react going approach problem ?",
        "title_stopwords_removal_lemmatization": "encapsulate style ?"
    },
    {
        "issue_id": 55050046,
        "title": "Question about immutable data and React ",
        "label": [
            "Type: Question"
        ],
        "date": "2015-01-21T17:29:10Z",
        "status": "closed",
        "description": "It may sound like a noob question or just crazy, but I ask anyway :)\nSo DOM diffs may be replaced with immutable data diffs.\nIt's much faster and sane.\n\nIf we **require** of state to be immutable cannot we drop DOM diff entirely?\nAnd all this virtual DOM altogether. Most of React code actually :)\n\nIt will require from us to explicitly declare every form field state. Not a big deal.\nEvents are just derivatives of architecture (not vice versa as in jQuery) I believe. \nWhat I'm missing?\n",
        "remove_template_description": "It may sound like a noob question or just crazy, but I ask anyway :) So DOM diffs may be replaced with immutable data diffs. It's much faster and sane.  If we **require** of state to be immutable cannot we drop DOM diff entirely? And all this virtual DOM altogether. Most of React code actually :)  It will require from us to explicitly declare every form field state. Not a big deal. Events are just derivatives of architecture (not vice versa as in jQuery) I believe.  What I'm missing?",
        "human_words": "It may sound like a noob question or just crazy, but I ask anyway :) So DOM diffs may be replaced with immutable data diffs. It's much faster and sane.  If we **require** of state to be immutable cannot we drop DOM diff entirely? And all this virtual DOM altogether. Most of React code actually :)  It will require from us to explicitly declare every form field state. Not a big deal. Events are just derivatives of architecture (not vice versa as in jQuery) I believe.  What I'm missing?",
        "human_words_regrex": "It may sound like a noob question or just crazy, but I ask anyway :) So DOM diffs may be replaced with immutable data diffs. It's much faster and sane. If we **require** of state to be immutable cannot we drop DOM diff entirely? And all this virtual DOM altogether. Most of React code actually :) It will require from us to explicitly declare every form field state. Not a big deal. Events are just derivatives of architecture (not vice versa as in jQuery) I believe. What I'm missing?",
        "human_words_stopwords_removal_lemmatization": "may sound like noob question crazy , ask anyway : ) dom diffs may replaced immutable data diffs . 's much faster sane . * * require * * state immutable drop dom diff entirely ? virtual dom altogether . react code actually : ) require u explicitly declare every form field state . big deal . event derivative architecture ( vice versa jquery ) believe . 'm missing ?",
        "title_stopwords_removal_lemmatization": "question immutable data react"
    },
    {
        "issue_id": 53897453,
        "title": "[Q] Transfer state from server",
        "label": [
            "Type: Question"
        ],
        "date": "2015-01-09T18:14:50Z",
        "status": "closed",
        "description": "I wonder if it's possible to transfer state and\\or props from server to client. I imagine ways like stringify\\parse JSON to achieve it, how to do that properly? Or I should use AJAX for initial state even in isomorphic webapp?\n",
        "remove_template_description": "I wonder if it's possible to transfer state and\\or props from server to client. I imagine ways like stringify\\parse JSON to achieve it, how to do that properly? Or I should use AJAX for initial state even in isomorphic webapp?",
        "human_words": "I wonder if it's possible to transfer state and\\or props from server to client. I imagine ways like stringify\\parse JSON to achieve it, how to do that properly? Or I should use AJAX for initial state even in isomorphic webapp?",
        "human_words_regrex": "I wonder if it's possible to transfer state and\\or props from server to client. I imagine ways like stringify\\parse JSON to achieve it, how to do that properly? Or I should use AJAX for initial state even in isomorphic webapp?",
        "human_words_stopwords_removal_lemmatization": "wonder 's possible transfer state and\\or prop server client . imagine way like stringify\\parse json achieve , properly ? use ajax initial state even isomorphic webapp ?",
        "title_stopwords_removal_lemmatization": "[ q ] transfer state server"
    },
    {
        "issue_id": 52168598,
        "title": "How to distinguish if a component is the owner or the ownee?",
        "label": [
            "Type: Question"
        ],
        "date": "2014-12-16T21:20:45Z",
        "status": "closed",
        "description": "Title is self explanatory. I'm asking this due to `@_owner` removal. Thank you.\n",
        "remove_template_description": "Title is self explanatory. I'm asking this due to `@_owner` removal. Thank you.",
        "human_words": "Title is self explanatory. I'm asking this due to `@_owner` removal. Thank you.",
        "human_words_regrex": "Title is self explanatory. I'm asking this due to `@_owner` removal. Thank you.",
        "human_words_stopwords_removal_lemmatization": "title self explanatory . 'm asking due ` @ _owner ` removal . thank .",
        "title_stopwords_removal_lemmatization": "distinguish component owner ownee ?"
    },
    {
        "issue_id": 52099480,
        "title": "usage of _owner",
        "label": [
            "Type: Question"
        ],
        "date": "2014-12-16T11:04:24Z",
        "status": "closed",
        "description": "Hi,\n\nI would like to know if the _owner property is being \"deprecated\" (I mean, moved into a private scope) in the future or if it'll still be accessible as it's right now.\n\nThank you\n",
        "remove_template_description": "Hi,  I would like to know if the _owner property is being \"deprecated\" (I mean, moved into a private scope) in the future or if it'll still be accessible as it's right now.  Thank you",
        "human_words": "Hi,  I would like to know if the _owner property is being \"deprecated\" (I mean, moved into a private scope) in the future or if it'll still be accessible as it's right now.  Thank you",
        "human_words_regrex": "Hi, I would like to know if the _owner property is being \"deprecated\" (I mean, moved into a private scope) in the future or if it'll still be accessible as it's right now. Thank you",
        "human_words_stopwords_removal_lemmatization": "hi , would like know _owner property `` deprecated '' ( mean , moved private scope ) future 'll still accessible 's right . thank",
        "title_stopwords_removal_lemmatization": "usage _owner"
    },
    {
        "issue_id": 51531252,
        "title": "does \"unmount\" mean \"garbage collect\"? I'd like to persist state between renderings, but seems not possible",
        "label": [
            "Type: Question"
        ],
        "date": "2014-12-10T08:31:54Z",
        "status": "closed",
        "description": "Sometimes I switch tabs within my application or whatnot (I'm using react-bootstrap) and components will mount and unmount as they wish. But they might have updated `state` that I don't want to lose. Am I overlooking a feature that lets me do this?\n",
        "remove_template_description": "Sometimes I switch tabs within my application or whatnot (I'm using react-bootstrap) and components will mount and unmount as they wish. But they might have updated `state` that I don't want to lose. Am I overlooking a feature that lets me do this?",
        "human_words": "Sometimes I switch tabs within my application or whatnot (I'm using react-bootstrap) and components will mount and unmount as they wish. But they might have updated `state` that I don't want to lose. Am I overlooking a feature that lets me do this?",
        "human_words_regrex": "Sometimes I switch tabs within my application or whatnot (I'm using react-bootstrap) and components will mount and unmount as they wish. But they might have updated `state` that I don't want to lose. Am I overlooking a feature that lets me do this?",
        "human_words_stopwords_removal_lemmatization": "sometimes switch tab within application whatnot ( 'm using react-bootstrap ) component mount unmount wish . might updated ` state ` n't want lose . overlooking feature let ?",
        "title_stopwords_removal_lemmatization": "`` unmount '' mean `` garbage collect '' ? 'd like persist state rendering , seems possible"
    },
    {
        "issue_id": 50210934,
        "title": "Why is react so slow rendering 900 items? (with jsfiddle)",
        "label": [
            "Type: Question"
        ],
        "date": "2014-11-26T18:12:30Z",
        "status": "closed",
        "description": "Hi guys,\nI'm evaluating react.js (considering using it in some projects) but I'm having trouble rendering a simple list with 910 elements, since it takes almost 4 seconds.\nThis is not a complex markup (just a couple of div tags), actually it's an existing app simplification.\nI tried this using just underscore.js and it took 500ms!!\n\nJsfiddle:\n- using JSX: http://jsfiddle.net/4TpnG/459/\n- without JSX: http://jsfiddle.net/VkebS/925/\n\nWhat am I doing wrong?\n\nCheers,\nVasco Pessanha\n",
        "remove_template_description": "Hi guys, I'm evaluating react.js (considering using it in some projects) but I'm having trouble rendering a simple list with 910 elements, since it takes almost 4 seconds. This is not a complex markup (just a couple of div tags), actually it's an existing app simplification. I tried this using just underscore.js and it took 500ms!!  Jsfiddle: - using JSX: http://jsfiddle.net/4TpnG/459/ - without JSX: http://jsfiddle.net/VkebS/925/  What am I doing wrong?  Cheers, Vasco Pessanha",
        "human_words": "Hi guys, I'm evaluating react.js (considering using it in some projects) but I'm having trouble rendering a simple list with 910 elements, since it takes almost 4 seconds. This is not a complex markup (just a couple of div tags), actually it's an existing app simplification. I tried this using just underscore.js and it took 500ms!!  Jsfiddle: - using JSX: http://jsfiddle.net/4TpnG/459/ - without JSX: http://jsfiddle.net/VkebS/925/  What am I doing wrong?  Cheers, Vasco Pessanha",
        "human_words_regrex": "Hi guys, I'm evaluating react.js (considering using it in some projects) but I'm having trouble rendering a simple list with 910 elements, since it takes almost 4 seconds. This is not a complex markup (just a couple of div tags), actually it's an existing app simplification. I tried this using just underscore.js and it took 500ms!! Jsfiddle: - using JSX:  - without JSX:  What am I doing wrong? Cheers, Vasco Pessanha",
        "human_words_stopwords_removal_lemmatization": "hi guy , 'm evaluating react.js ( considering using project ) 'm trouble rendering simple list 910 element , since take almost 4 second . complex markup ( couple div tag ) , actually 's existing app simplification . tried using underscore.js took 500ms ! ! jsfiddle : - using jsx : - without jsx : wrong ? cheer , vasco pessanha",
        "title_stopwords_removal_lemmatization": "react slow rendering 900 item ? ( jsfiddle )"
    },
    {
        "issue_id": 45105552,
        "title": "Extending lifecycle and direct communication in component tree",
        "label": [
            "Type: Question"
        ],
        "date": "2014-10-07T13:17:02Z",
        "status": "closed",
        "description": "We want to extend the life-cycle of react components by giving children (those that have been declared in this.props.children) the opportunity to vote on whether they are ready to be rendered or not, in an asynchronous fashion. We want to postpone the actual rendering until all of them are ready. One of the usages would be showing the loading animations in the root component rather than the children.\nWe want to do something like this:\n\n```\nacceptsMount: function ()\n{\n    var accepts = this.props.children.map(function (child) {\n        return child.acceptsMount();\n    });\n    return Q.all(accepts).thenResolve();\n}\n```\n\nAnd then:\n\n```\nvar root = (<Parent><Child1 /><Child2 /></Parent>);\nroot.acceptsMount().then(function () {\n    React.renderComponent(root, document.body);\n});\n```\n\nThe problem is that we have no direct access to actual component and all we have are descriptors. So we cannot call our custom-defined methods of the component.\n\nUsing static methods also does not resolve our problem, as we may rely on component's current state in acceptsMount implementation.\n\nAny ideas how we can achieve this?\n",
        "remove_template_description": "We want to extend the life-cycle of react components by giving children (those that have been declared in this.props.children) the opportunity to vote on whether they are ready to be rendered or not, in an asynchronous fashion. We want to postpone the actual rendering until all of them are ready. One of the usages would be showing the loading animations in the root component rather than the children. We want to do something like this:  ``` acceptsMount: function () {     var accepts = this.props.children.map(function (child) {         return child.acceptsMount();     });     return Q.all(accepts).thenResolve(); } ```  And then:  ``` var root = (<Parent><Child1 /><Child2 /></Parent>); root.acceptsMount().then(function () {     React.renderComponent(root, document.body); }); ```  The problem is that we have no direct access to actual component and all we have are descriptors. So we cannot call our custom-defined methods of the component.  Using static methods also does not resolve our problem, as we may rely on component's current state in acceptsMount implementation.  Any ideas how we can achieve this?",
        "human_words": "We want to extend the life-cycle of react components by giving children (those that have been declared in this.props.children) the opportunity to vote on whether they are ready to be rendered or not, in an asynchronous fashion. We want to postpone the actual rendering until all of them are ready. One of the usages would be showing the loading animations in the root component rather than the children. We want to do something like this:    And then:    The problem is that we have no direct access to actual component and all we have are descriptors. So we cannot call our custom-defined methods of the component.  Using static methods also does not resolve our problem, as we may rely on component's current state in acceptsMount implementation.  Any ideas how we can achieve this?",
        "human_words_regrex": "We want to extend the life-cycle of react components by giving children (those that have been declared in this.props.children) the opportunity to vote on whether they are ready to be rendered or not, in an asynchronous fashion. We want to postpone the actual rendering until all of them are ready. One of the usages would be showing the loading animations in the root component rather than the children. We want to do something like this: And then: The problem is that we have no direct access to actual component and all we have are descriptors. So we cannot call our custom-defined methods of the component. Using static methods also does not resolve our problem, as we may rely on component's current state in acceptsMount implementation. Any ideas how we can achieve this?",
        "human_words_stopwords_removal_lemmatization": "want extend life-cycle react component giving child ( declared this.props.children ) opportunity vote whether ready rendered , asynchronous fashion . want postpone actual rendering ready . one usage would showing loading animation root component rather child . want something like : : problem direct access actual component descriptor . call custom-defined method component . using static method also resolve problem , may rely component 's current state acceptsmount implementation . idea achieve ?",
        "title_stopwords_removal_lemmatization": "extending lifecycle direct communication component tree"
    },
    {
        "issue_id": 42943181,
        "title": "Proper React minification",
        "label": [
            "Type: Question"
        ],
        "date": "2014-09-16T22:48:28Z",
        "status": "closed",
        "description": "I'm wondering about the best way to minify React for production builds. \n\nThe guide @christianalfoni wrote for #2046 is very comprehensive so I used it as a boilerplate. However, after adding envify, uglify, and uglifyify, my build is 131KB, 5KB bigger then the standard react.min.js.\n\nUglifyify doesn't seem to be doing anything so I'm guessing that's the problem. But since there are so many moving parts it's hard to pin down exactly what's going wrong, so some kind of boilerplate would be great.\n\nMy gulp task looks like this:\n\n```\ngulp.task('build', function() {\n    return browserify({\n            entries: ['./src/main.js'],\n            transform: [\n                uglifyify, envify\n            ],\n            debug: false,\n        })\n        .bundle()\n        .pipe(source('main.js'))\n        .pipe(buffer())// Convert from streaming to buffered vinyl file object\n        .pipe(uglify())\n        .pipe(gulp.dest('build'));\n});\n```\n\nmain.js looks like this:\n\n```\nvar React = require('react');\n```\n",
        "remove_template_description": "I'm wondering about the best way to minify React for production builds.   The guide @christianalfoni wrote for #2046 is very comprehensive so I used it as a boilerplate. However, after adding envify, uglify, and uglifyify, my build is 131KB, 5KB bigger then the standard react.min.js.  Uglifyify doesn't seem to be doing anything so I'm guessing that's the problem. But since there are so many moving parts it's hard to pin down exactly what's going wrong, so some kind of boilerplate would be great.  My gulp task looks like this:  ``` gulp.task('build', function() {     return browserify({             entries: ['./src/main.js'],             transform: [                 uglifyify, envify             ],             debug: false,         })         .bundle()         .pipe(source('main.js'))         .pipe(buffer())// Convert from streaming to buffered vinyl file object         .pipe(uglify())         .pipe(gulp.dest('build')); }); ```  main.js looks like this:  ``` var React = require('react'); ```",
        "human_words": "I'm wondering about the best way to minify React for production builds.   The guide @christianalfoni wrote for #2046 is very comprehensive so I used it as a boilerplate. However, after adding envify, uglify, and uglifyify, my build is 131KB, 5KB bigger then the standard react.min.js.  Uglifyify doesn't seem to be doing anything so I'm guessing that's the problem. But since there are so many moving parts it's hard to pin down exactly what's going wrong, so some kind of boilerplate would be great.  My gulp task looks like this:    main.js looks like this:  ",
        "human_words_regrex": "I'm wondering about the best way to minify React for production builds. The guide @christianalfoni wrote for #2046 is very comprehensive so I used it as a boilerplate. However, after adding envify, uglify, and uglifyify, my build is 131KB, 5KB bigger then the standard react.min.js. Uglifyify doesn't seem to be doing anything so I'm guessing that's the problem. But since there are so many moving parts it's hard to pin down exactly what's going wrong, so some kind of boilerplate would be great. My gulp task looks like this: main.js looks like this: ",
        "human_words_stopwords_removal_lemmatization": "'m wondering best way minify react production build . guide @ christianalfoni wrote # 2046 comprehensive used boilerplate . however , adding envify , uglify , uglifyify , build 131kb , 5kb bigger standard react.min.js . uglifyify n't seem anything 'm guessing 's problem . since many moving part 's hard pin exactly 's going wrong , kind boilerplate would great . gulp task look like : main.js look like :",
        "title_stopwords_removal_lemmatization": "proper react minification"
    },
    {
        "issue_id": 40066819,
        "title": "`createClass` behavior",
        "label": [
            "Type: Question"
        ],
        "date": "2014-08-12T15:28:28Z",
        "status": "closed",
        "description": "``` javascript\nvar Foo = createClass({\n    componentWillMount: function() {\n        alert('Mounted Foo');\n    },\n    componentWillUnmount: function() {\n        alert('Unmounted Foo');\n    },\n    render: function() {\n        return React.DOM.div({}, 'Hello ' + this.props.name);\n    }\n});\n\nvar Bar = React.createClass({\n    componentWillMount: function() {\n        alert('Mounted Bar');\n    },\n    componentWillUnmount: function() {\n        alert('Unmounted Bar');\n    },\n    render: function() {\n        return React.DOM.div({}, 'Hello ' + this.props.name);\n    }\n});\n\n// This unmounts a component\nReact.renderComponent(Foo({name: 'World'}), document.body);\nReact.renderComponent(Foo({name: 'There'}), document.body);\n\n// This does not\nReact.renderComponent(Bar({name: 'World'}), document.body);\nReact.renderComponent(Bar({name: 'There'}), document.body);\n\nfunction createClass(spec) {\n    return function(props) {\n        return React.createClass(spec)(props);\n    }\n}\n```\n\nhttp://jsfiddle.net/dvtcz52k/\n\nI'm not sure what's going on here. Why does the `Foo` component get unmounted while the `Bar` component does not? It seems like there should be no difference between these two ways of calling `React.createClass`\n",
        "remove_template_description": "``` javascript var Foo = createClass({     componentWillMount: function() {         alert('Mounted Foo');     },     componentWillUnmount: function() {         alert('Unmounted Foo');     },     render: function() {         return React.DOM.div({}, 'Hello ' + this.props.name);     } });  var Bar = React.createClass({     componentWillMount: function() {         alert('Mounted Bar');     },     componentWillUnmount: function() {         alert('Unmounted Bar');     },     render: function() {         return React.DOM.div({}, 'Hello ' + this.props.name);     } });  // This unmounts a component React.renderComponent(Foo({name: 'World'}), document.body); React.renderComponent(Foo({name: 'There'}), document.body);  // This does not React.renderComponent(Bar({name: 'World'}), document.body); React.renderComponent(Bar({name: 'There'}), document.body);  function createClass(spec) {     return function(props) {         return React.createClass(spec)(props);     } } ```  http://jsfiddle.net/dvtcz52k/  I'm not sure what's going on here. Why does the `Foo` component get unmounted while the `Bar` component does not? It seems like there should be no difference between these two ways of calling `React.createClass`",
        "human_words": "  http://jsfiddle.net/dvtcz52k/  I'm not sure what's going on here. Why does the `Foo` component get unmounted while the `Bar` component does not? It seems like there should be no difference between these two ways of calling `React.createClass`",
        "human_words_regrex": "  I'm not sure what's going on here. Why does the `Foo` component get unmounted while the `Bar` component does not? It seems like there should be no difference between these two ways of calling `React.createClass`",
        "human_words_stopwords_removal_lemmatization": "'m sure 's going . ` foo ` component get unmounted ` bar ` component ? seems like difference two way calling ` react.createclass `",
        "title_stopwords_removal_lemmatization": "` createclass ` behavior"
    },
    {
        "issue_id": 37759186,
        "title": "Where to put my states that are using in several components?",
        "label": [
            "Type: Question"
        ],
        "date": "2014-07-14T04:56:32Z",
        "status": "closed",
        "description": "I make a tiny app for Tower of Hanoi and run into this problem,\nrepo.tiye.me/react-hanoi\n![](http://ww1.sinaimg.cn/mw1024/62752320tw1eibojpy4pzj20za0i774z.jpg)\n\nAs I drag disks to different stacks, the hovering stack should give some feedbacks, like dimming its background color. And I have to add a class to that stack and remove tha class when disks leave.\n\nStacks need to know that state, disks need a reference to that state so they can change it when dragging is finished(onDragEnd). Which means I have to put it where both components can find it.\nAt last I put the state in my model, which holds my three stacks. `from` refers to the stack that dragging event started, and `dropping` refers to the stack the dragging disk is hovering.\n\n``` coffee\nstore =\n  a: [1..12]\n  b: []\n  c: []\n  from: null\n  dropping: null\n```\n\nhttps://github.com/jiyinyiyong/react-hanoi/blob/master/coffee/model.coffee#L5\n\nBut it's still bad idea to put state in my model. Is there a better solution for such case?\n",
        "remove_template_description": "I make a tiny app for Tower of Hanoi and run into this problem, repo.tiye.me/react-hanoi ![](http://ww1.sinaimg.cn/mw1024/62752320tw1eibojpy4pzj20za0i774z.jpg)  As I drag disks to different stacks, the hovering stack should give some feedbacks, like dimming its background color. And I have to add a class to that stack and remove tha class when disks leave.  Stacks need to know that state, disks need a reference to that state so they can change it when dragging is finished(onDragEnd). Which means I have to put it where both components can find it. At last I put the state in my model, which holds my three stacks. `from` refers to the stack that dragging event started, and `dropping` refers to the stack the dragging disk is hovering.  ``` coffee store =   a: [1..12]   b: []   c: []   from: null   dropping: null ```  https://github.com/jiyinyiyong/react-hanoi/blob/master/coffee/model.coffee#L5  But it's still bad idea to put state in my model. Is there a better solution for such case?",
        "human_words": "I make a tiny app for Tower of Hanoi and run into this problem, repo.tiye.me/react-hanoi ![](http://ww1.sinaimg.cn/mw1024/62752320tw1eibojpy4pzj20za0i774z.jpg)  As I drag disks to different stacks, the hovering stack should give some feedbacks, like dimming its background color. And I have to add a class to that stack and remove tha class when disks leave.  Stacks need to know that state, disks need a reference to that state so they can change it when dragging is finished(onDragEnd). Which means I have to put it where both components can find it. At last I put the state in my model, which holds my three stacks. `from` refers to the stack that dragging event started, and `dropping` refers to the stack the dragging disk is hovering.    https://github.com/jiyinyiyong/react-hanoi/blob/master/coffee/model.coffee#L5  But it's still bad idea to put state in my model. Is there a better solution for such case?",
        "human_words_regrex": "I make a tiny app for Tower of Hanoi and run into this problem, repo.tiye.me/react-hanoi ! As I drag disks to different stacks, the hovering stack should give some feedbacks, like dimming its background color. And I have to add a class to that stack and remove tha class when disks leave. Stacks need to know that state, disks need a reference to that state so they can change it when dragging is finished(onDragEnd). Which means I have to put it where both components can find it. At last I put the state in my model, which holds my three stacks. `from` refers to the stack that dragging event started, and `dropping` refers to the stack the dragging disk is hovering.  But it's still bad idea to put state in my model. Is there a better solution for such case?",
        "human_words_stopwords_removal_lemmatization": "make tiny app tower hanoi run problem , repo.tiye.me/react-hanoi ! drag disk different stack , hovering stack give feedback , like dimming background color . add class stack remove tha class disk leave . stack need know state , disk need reference state change dragging finished ( ondragend ) . mean put component find . last put state model , hold three stack . ` ` refers stack dragging event started , ` dropping ` refers stack dragging disk hovering . 's still bad idea put state model . better solution case ?",
        "title_stopwords_removal_lemmatization": "put state using several component ?"
    },
    {
        "issue_id": 37022874,
        "title": "Help with JSX -> JS transform without nodejs",
        "label": [
            "Type: Question"
        ],
        "date": "2014-07-02T20:48:37Z",
        "status": "closed",
        "description": "I'd like to convert JSX files to JS files on a Linux machine which has no (direct) internet access. All of the examples talk about running npm, which obviously won't work in this case. Are there any  alternatives for me?\n\nIdeally I would like to use the watch method of the jsx  executable to do all of the heacy lifting behind the scenes and before a Maven task builds my web app.\n",
        "remove_template_description": "I'd like to convert JSX files to JS files on a Linux machine which has no (direct) internet access. All of the examples talk about running npm, which obviously won't work in this case. Are there any  alternatives for me?  Ideally I would like to use the watch method of the jsx  executable to do all of the heacy lifting behind the scenes and before a Maven task builds my web app.",
        "human_words": "I'd like to convert JSX files to JS files on a Linux machine which has no (direct) internet access. All of the examples talk about running npm, which obviously won't work in this case. Are there any  alternatives for me?  Ideally I would like to use the watch method of the jsx  executable to do all of the heacy lifting behind the scenes and before a Maven task builds my web app.",
        "human_words_regrex": "I'd like to convert JSX files to JS files on a Linux machine which has no (direct) internet access. All of the examples talk about running npm, which obviously won't work in this case. Are there any alternatives for me? Ideally I would like to use the watch method of the jsx executable to do all of the heacy lifting behind the scenes and before a Maven task builds my web app.",
        "human_words_stopwords_removal_lemmatization": "'d like convert jsx file j file linux machine ( direct ) internet access . example talk running npm , obviously wo n't work case . alternative ? ideally would like use watch method jsx executable heacy lifting behind scene maven task build web app .",
        "title_stopwords_removal_lemmatization": "help jsx - > j transform without nodejs"
    },
    {
        "issue_id": 36541054,
        "title": "Question regarding todomvc-flux example and dispatching of actions",
        "label": [
            "Type: Question"
        ],
        "date": "2014-06-26T02:52:35Z",
        "status": "closed",
        "description": "I was unsure where to ask this. Let me know if I should post it somewhere else.\n\nI have a question regarding todomvc-flux example and the dispatching of actions in Flux. \nI was watching a video describing the Flux architecture, and the presenter mentioned ([at 12:20](https://www.youtube.com/watch?v=nYkdrAPrdcw#t=740)) that \"once an action goes to the store you can't put another one in until the stores are completely finished processing it\". She [the presenter] mentions this several times later in the video.\n\nIs this supposed to be a principle property in the Flux architecture?\n\nI was looking at the [todomvc-flux](https://github.com/facebook/react/tree/master/examples/todomvc-flux) example, and it doesn't seem to obey this property.\n",
        "remove_template_description": "I was unsure where to ask this. Let me know if I should post it somewhere else.  I have a question regarding todomvc-flux example and the dispatching of actions in Flux.  I was watching a video describing the Flux architecture, and the presenter mentioned ([at 12:20](https://www.youtube.com/watch?v=nYkdrAPrdcw#t=740)) that \"once an action goes to the store you can't put another one in until the stores are completely finished processing it\". She [the presenter] mentions this several times later in the video.  Is this supposed to be a principle property in the Flux architecture?  I was looking at the [todomvc-flux](https://github.com/facebook/react/tree/master/examples/todomvc-flux) example, and it doesn't seem to obey this property.",
        "human_words": "I was unsure where to ask this. Let me know if I should post it somewhere else.  I have a question regarding todomvc-flux example and the dispatching of actions in Flux.  I was watching a video describing the Flux architecture, and the presenter mentioned ([at 12:20](https://www.youtube.com/watch?v=nYkdrAPrdcw#t=740)) that \"once an action goes to the store you can't put another one in until the stores are completely finished processing it\". She [the presenter] mentions this several times later in the video.  Is this supposed to be a principle property in the Flux architecture?  I was looking at the [todomvc-flux](https://github.com/facebook/react/tree/master/examples/todomvc-flux) example, and it doesn't seem to obey this property.",
        "human_words_regrex": "I was unsure where to ask this. Let me know if I should post it somewhere else. I have a question regarding todomvc-flux example and the dispatching of actions in Flux. I was watching a video describing the Flux architecture, and the presenter mentioned () that \"once an action goes to the store you can't put another one in until the stores are completely finished processing it\". She  example, and it doesn't seem to obey this property.",
        "human_words_stopwords_removal_lemmatization": "unsure ask . let know post somewhere else . question regarding todomvc-flux example dispatching action flux . watching video describing flux architecture , presenter mentioned ( ) `` action go store ca n't put another one store completely finished processing '' . example , n't seem obey property .",
        "title_stopwords_removal_lemmatization": "question regarding todomvc-flux example dispatching action"
    },
    {
        "issue_id": 36275059,
        "title": "Flux: How do you test it or use multiple instances when you have a singleton like in the TodoStore.js?",
        "label": [
            "Type: Question"
        ],
        "date": "2014-06-23T09:33:52Z",
        "status": "closed",
        "description": "I've read http://facebook.github.io/react/docs/flux-todo-list.html \u2026 but how do you test it or use multiple instances when you have a singleton like in the TodoStore.js?\n\nIs a better choice to instance the store and pass to sub views?\n",
        "remove_template_description": "I've read http://facebook.github.io/react/docs/flux-todo-list.html \u2026 but how do you test it or use multiple instances when you have a singleton like in the TodoStore.js?  Is a better choice to instance the store and pass to sub views?",
        "human_words": "I've read http://facebook.github.io/react/docs/flux-todo-list.html \u2026 but how do you test it or use multiple instances when you have a singleton like in the TodoStore.js?  Is a better choice to instance the store and pass to sub views?",
        "human_words_regrex": "I've read  \u2026 but how do you test it or use multiple instances when you have a singleton like in the TodoStore.js? Is a better choice to instance the store and pass to sub views?",
        "human_words_stopwords_removal_lemmatization": "'ve read \u2026 test use multiple instance singleton like todostore.js ? better choice instance store pas sub view ?",
        "title_stopwords_removal_lemmatization": "flux : test use multiple instance singleton like todostore.js ?"
    },
    {
        "issue_id": 31631025,
        "title": "componentDidMount runs once !",
        "label": [
            "Type: Question"
        ],
        "date": "2014-04-16T10:42:00Z",
        "status": "closed",
        "description": "hi\n\nim trying to do something always after render()\n\nbut the componentDidMount only called once after the state change and after render()\n\nis there any way to run a method always after render()? even the state or prop change?\n",
        "remove_template_description": "hi  im trying to do something always after render()  but the componentDidMount only called once after the state change and after render()  is there any way to run a method always after render()? even the state or prop change?",
        "human_words": "hi  im trying to do something always after render()  but the componentDidMount only called once after the state change and after render()  is there any way to run a method always after render()? even the state or prop change?",
        "human_words_regrex": "hi im trying to do something always after render() but the componentDidMount only called once after the state change and after render() is there any way to run a method always after render()? even the state or prop change?",
        "human_words_stopwords_removal_lemmatization": "hi im trying something always render ( ) componentdidmount called state change render ( ) way run method always render ( ) ? even state prop change ?",
        "title_stopwords_removal_lemmatization": "componentdidmount run !"
    },
    {
        "issue_id": 30027747,
        "title": "renderComponentToStaticMarkup vs renderComponentToString",
        "label": [
            "Type: Question"
        ],
        "date": "2014-03-24T12:00:38Z",
        "status": "closed",
        "description": "Please give an example which shows the difference of:\n`renderComponentToStaticMarkup` vs `renderComponentToString`\n",
        "remove_template_description": "Please give an example which shows the difference of: `renderComponentToStaticMarkup` vs `renderComponentToString`",
        "human_words": "Please give an example which shows the difference of: `renderComponentToStaticMarkup` vs `renderComponentToString`",
        "human_words_regrex": "Please give an example which shows the difference of: `renderComponentToStaticMarkup` vs `renderComponentToString`",
        "human_words_stopwords_removal_lemmatization": "please give example show difference : ` rendercomponenttostaticmarkup ` v ` rendercomponenttostring `",
        "title_stopwords_removal_lemmatization": "rendercomponenttostaticmarkup v rendercomponenttostring"
    },
    {
        "issue_id": 27226377,
        "title": "Unmounting React node",
        "label": [
            "Type: Question"
        ],
        "date": "2014-02-09T17:14:01Z",
        "status": "closed",
        "description": "I'm trying to unmount a React.js node with `this._rootNodeID`\n\n```\n handleClick: function() {\n\n    React.unmountComponentAtNode(this._rootNodeID)\n\n }\n```\n\nBut it returns `false`.\n\nThe `handleClick` is fired when I click on an element, and should unmount the root-node.\n\nI've tried this as well:\n\n```\n  React.unmountComponentAtNode($('*[data-reactid=\"'+this._rootNodeID+'\"]')[0])\n```\n\nThat selector works with `jQuery.hide()`, but not with unmounting it, while the documentation states it should be a `DOMElement`, like you would use for `React.renderComponent`\n\nAfter a few more tests it turns out it works on some elements/selectors.\n\nIt somehow works with the selector: `document.getElementById('maindiv')`, where `maindiv` is an element not generated with React.js, and just plain html. Then it returns `true`.\n\nBut as soon as I try and select a different `ElementById` that is generated with React.js it returns `false`. And it won't work with `document.body` either, though they all essentially return the same thing if I `console.log` them (`getElementsByClassName('bla')[0]` also doesn't work)\n\nThere should be a simple way to select the node via this, without having to resort to jQuery or other selectors, I know it's in there somewhere..\n",
        "remove_template_description": "I'm trying to unmount a React.js node with `this._rootNodeID`  ```  handleClick: function() {      React.unmountComponentAtNode(this._rootNodeID)   } ```  But it returns `false`.  The `handleClick` is fired when I click on an element, and should unmount the root-node.  I've tried this as well:  ```   React.unmountComponentAtNode($('*[data-reactid=\"'+this._rootNodeID+'\"]')[0]) ```  That selector works with `jQuery.hide()`, but not with unmounting it, while the documentation states it should be a `DOMElement`, like you would use for `React.renderComponent`  After a few more tests it turns out it works on some elements/selectors.  It somehow works with the selector: `document.getElementById('maindiv')`, where `maindiv` is an element not generated with React.js, and just plain html. Then it returns `true`.  But as soon as I try and select a different `ElementById` that is generated with React.js it returns `false`. And it won't work with `document.body` either, though they all essentially return the same thing if I `console.log` them (`getElementsByClassName('bla')[0]` also doesn't work)  There should be a simple way to select the node via this, without having to resort to jQuery or other selectors, I know it's in there somewhere..",
        "human_words": "I'm trying to unmount a React.js node with `this._rootNodeID`    But it returns `false`.  The `handleClick` is fired when I click on an element, and should unmount the root-node.  I've tried this as well:    That selector works with `jQuery.hide()`, but not with unmounting it, while the documentation states it should be a `DOMElement`, like you would use for `React.renderComponent`  After a few more tests it turns out it works on some elements/selectors.  It somehow works with the selector: `document.getElementById('maindiv')`, where `maindiv` is an element not generated with React.js, and just plain html. Then it returns `true`.  But as soon as I try and select a different `ElementById` that is generated with React.js it returns `false`. And it won't work with `document.body` either, though they all essentially return the same thing if I `console.log` them (`getElementsByClassName('bla')[0]` also doesn't work)  There should be a simple way to select the node via this, without having to resort to jQuery or other selectors, I know it's in there somewhere..",
        "human_words_regrex": "I'm trying to unmount a React.js node with `this._rootNodeID` But it returns `false`. The `handleClick` is fired when I click on an element, and should unmount the root-node. I've tried this as well: That selector works with `jQuery.hide()`, but not with unmounting it, while the documentation states it should be a `DOMElement`, like you would use for `React.renderComponent` After a few more tests it turns out it works on some elements/selectors. It somehow works with the selector: `document.getElementById('maindiv')`, where `maindiv` is an element not generated with React.js, and just plain html. Then it returns `true`. But as soon as I try and select a different `ElementById` that is generated with React.js it returns `false`. And it won't work with `document.body` either, though they all essentially return the same thing if I `console.log` them (`getElementsByClassName('bla')[0]` also doesn't work) There should be a simple way to select the node via this, without having to resort to jQuery or other selectors, I know it's in there somewhere..",
        "human_words_stopwords_removal_lemmatization": "'m trying unmount react.js node ` this._rootnodeid ` return ` false ` . ` handleclick ` fired click element , unmount root-node . 've tried well : selector work ` jquery.hide ( ) ` , unmounting , documentation state ` domelement ` , like would use ` react.rendercomponent ` test turn work elements/selectors . somehow work selector : ` document.getelementbyid ( 'maindiv ' ) ` , ` maindiv ` element generated react.js , plain html . return ` true ` . soon try select different ` elementbyid ` generated react.js return ` false ` . wo n't work ` document.body ` either , though essentially return thing ` console.log ` ( ` getelementsbyclassname ( 'bla ' ) [ 0 ] ` also n't work ) simple way select node via , without resort jquery selector , know 's somewhere ..",
        "title_stopwords_removal_lemmatization": "unmounting react node"
    },
    {
        "issue_id": 26941904,
        "title": "is sending state of current component as a parameter to another external method possible ??",
        "label": [
            "Type: Question"
        ],
        "date": "2014-02-05T07:27:13Z",
        "status": "closed",
        "description": "<Button onClick={this.props.handleSubmit(this.state)}> SUBMIT </button>\n",
        "remove_template_description": "<Button onClick={this.props.handleSubmit(this.state)}> SUBMIT </button>",
        "human_words": "<Button onClick={this.props.handleSubmit(this.state)}> SUBMIT </button>",
        "human_words_regrex": " SUBMIT ",
        "human_words_stopwords_removal_lemmatization": "submit",
        "title_stopwords_removal_lemmatization": "sending state current component parameter another external method possible ? ?"
    },
    {
        "issue_id": 25893464,
        "title": "Unit testing react + backbone without phantom.js",
        "label": [
            "Type: Question"
        ],
        "date": "2014-01-20T01:01:58Z",
        "status": "closed",
        "description": "This is closely related to #455, but not entirely the same.\n\nI'm curious how one'd go around to testing browserified backbone + react apps. It appears that [react doesn't play well with phantomjs](https://github.com/facebook/react/pull/347), so I'm looking for alternatives. [Jsdom](https://github.com/tmpvar/jsdom) is next on the list, and I'm looking for suggestions how to properly handle this.\n\nAn issue that arises when using `browserify` and not loading the app through an html template is that you're not actually testing against the DOM and can't do things such as `<script src='vendor/react.js'></script>` to load packages into the global scope.\n\nDo you have any ideas, theorems or suggestions on how to approach unit testing without phantomjs?\n",
        "remove_template_description": "This is closely related to #455, but not entirely the same.  I'm curious how one'd go around to testing browserified backbone + react apps. It appears that [react doesn't play well with phantomjs](https://github.com/facebook/react/pull/347), so I'm looking for alternatives. [Jsdom](https://github.com/tmpvar/jsdom) is next on the list, and I'm looking for suggestions how to properly handle this.  An issue that arises when using `browserify` and not loading the app through an html template is that you're not actually testing against the DOM and can't do things such as `<script src='vendor/react.js'></script>` to load packages into the global scope.  Do you have any ideas, theorems or suggestions on how to approach unit testing without phantomjs?",
        "human_words": "This is closely related to #455, but not entirely the same.  I'm curious how one'd go around to testing browserified backbone + react apps. It appears that [react doesn't play well with phantomjs](https://github.com/facebook/react/pull/347), so I'm looking for alternatives. [Jsdom](https://github.com/tmpvar/jsdom) is next on the list, and I'm looking for suggestions how to properly handle this.  An issue that arises when using `browserify` and not loading the app through an html template is that you're not actually testing against the DOM and can't do things such as `<script src='vendor/react.js'></script>` to load packages into the global scope.  Do you have any ideas, theorems or suggestions on how to approach unit testing without phantomjs?",
        "human_words_regrex": "This is closely related to #455, but not entirely the same. I'm curious how one'd go around to testing browserified backbone + react apps. It appears that , so I'm looking for alternatives.  is next on the list, and I'm looking for suggestions how to properly handle this. An issue that arises when using `browserify` and not loading the app through an html template is that you're not actually testing against the DOM and can't do things such as `` to load packages into the global scope. Do you have any ideas, theorems or suggestions on how to approach unit testing without phantomjs?",
        "human_words_stopwords_removal_lemmatization": "closely related # 455 , entirely . 'm curious one 'd go around testing browserified backbone + react apps . appears , 'm looking alternative . next list , 'm looking suggestion properly handle . issue arises using ` browserify ` loading app html template 're actually testing dom ca n't thing `` load package global scope . idea , theorem suggestion approach unit testing without phantomjs ?",
        "title_stopwords_removal_lemmatization": "unit testing react + backbone without phantom.js"
    },
    {
        "issue_id": 24982798,
        "title": "D3.js Example Using React",
        "label": [
            "Type: Question"
        ],
        "date": "2014-01-02T19:42:00Z",
        "status": "closed",
        "description": "Not sure if this is the right place to ask, but are there any examples of using React to render a visualization created in D3.js?\n\nIt seems like React's Virtual DOM could really speed up animations and transitions used in visualizations like the [Force Directed Graph](http://bl.ocks.org/mbostock/4062045). D3.js just draws SVG, so as long as React can manipulate SVG like DOM it should work, right? I'm still a React newb, so just looking for any suggestions to get me started.\n",
        "remove_template_description": "Not sure if this is the right place to ask, but are there any examples of using React to render a visualization created in D3.js?  It seems like React's Virtual DOM could really speed up animations and transitions used in visualizations like the [Force Directed Graph](http://bl.ocks.org/mbostock/4062045). D3.js just draws SVG, so as long as React can manipulate SVG like DOM it should work, right? I'm still a React newb, so just looking for any suggestions to get me started.",
        "human_words": "Not sure if this is the right place to ask, but are there any examples of using React to render a visualization created in D3.js?  It seems like React's Virtual DOM could really speed up animations and transitions used in visualizations like the [Force Directed Graph](http://bl.ocks.org/mbostock/4062045). D3.js just draws SVG, so as long as React can manipulate SVG like DOM it should work, right? I'm still a React newb, so just looking for any suggestions to get me started.",
        "human_words_regrex": "Not sure if this is the right place to ask, but are there any examples of using React to render a visualization created in D3.js? It seems like React's Virtual DOM could really speed up animations and transitions used in visualizations like the . D3.js just draws SVG, so as long as React can manipulate SVG like DOM it should work, right? I'm still a React newb, so just looking for any suggestions to get me started.",
        "human_words_stopwords_removal_lemmatization": "sure right place ask , example using react render visualization created d3.js ? seems like react 's virtual dom could really speed animation transition used visualization like . d3.js draw svg , long react manipulate svg like dom work , right ? 'm still react newb , looking suggestion get started .",
        "title_stopwords_removal_lemmatization": "d3.js example using react"
    },
    {
        "issue_id": 24935047,
        "title": "__DEV__ vs env === 'production'",
        "label": [
            "Type: Question"
        ],
        "date": "2013-12-31T23:52:06Z",
        "status": "closed",
        "description": "Is there a reason why these two coexist (beside the fact that the latter seems to be introduced recently)?\n",
        "remove_template_description": "Is there a reason why these two coexist (beside the fact that the latter seems to be introduced recently)?",
        "human_words": "Is there a reason why these two coexist (beside the fact that the latter seems to be introduced recently)?",
        "human_words_regrex": "Is there a reason why these two coexist (beside the fact that the latter seems to be introduced recently)?",
        "human_words_stopwords_removal_lemmatization": "reason two coexist ( beside fact latter seems introduced recently ) ?",
        "title_stopwords_removal_lemmatization": "__dev__ v env === 'production '"
    },
    {
        "issue_id": 20989585,
        "title": "Jade?",
        "label": [
            "Type: Question"
        ],
        "date": "2013-10-15T00:12:13Z",
        "status": "closed",
        "description": "All my DOM code is written in jade. Any easy way to use jade in react?\n",
        "remove_template_description": "All my DOM code is written in jade. Any easy way to use jade in react?",
        "human_words": "All my DOM code is written in jade. Any easy way to use jade in react?",
        "human_words_regrex": "All my DOM code is written in jade. Any easy way to use jade in react?",
        "human_words_stopwords_removal_lemmatization": "dom code written jade . easy way use jade react ?",
        "title_stopwords_removal_lemmatization": "jade ?"
    },
    {
        "issue_id": 18952597,
        "title": "Inputs are uneditable if the \"value\" attribute is present",
        "label": [
            "Type: Question"
        ],
        "date": "2013-09-04T04:18:12Z",
        "status": "closed",
        "description": "See here: http://jsfiddle.net/XdNHU/1/\n\nIf an `<input>` element is rendered with its value attribute already present/set, the input seems to be uneditable. I thought it might have been something in handleChange, but I'm not sure.\n\nHopefully I'm not just misusing JSX...\n\nThanks!\n",
        "remove_template_description": "See here: http://jsfiddle.net/XdNHU/1/  If an `<input>` element is rendered with its value attribute already present/set, the input seems to be uneditable. I thought it might have been something in handleChange, but I'm not sure.  Hopefully I'm not just misusing JSX...  Thanks!",
        "human_words": "See here: http://jsfiddle.net/XdNHU/1/  If an `<input>` element is rendered with its value attribute already present/set, the input seems to be uneditable. I thought it might have been something in handleChange, but I'm not sure.  Hopefully I'm not just misusing JSX...  Thanks!",
        "human_words_regrex": "See here:  If an `` element is rendered with its value attribute already present/set, the input seems to be uneditable. I thought it might have been something in handleChange, but I'm not sure. Hopefully I'm not just misusing JSX... Thanks!",
        "human_words_stopwords_removal_lemmatization": "see : `` element rendered value attribute already present/set , input seems uneditable . thought might something handlechange , 'm sure . hopefully 'm misusing jsx ... thanks !",
        "title_stopwords_removal_lemmatization": "input uneditable `` value '' attribute present"
    },
    {
        "issue_id": 18838164,
        "title": "Existence of `componentDidMount` throws \"Error while invoking `findComponentRoot`\"",
        "label": [
            "Type: Question"
        ],
        "date": "2013-09-01T15:28:46Z",
        "status": "closed",
        "description": "##### Scenario\n\nI am trying to use React to dynamically replace a `tbody` tag with my app's content. In addition, I need to use a `componentDidMount` callback to handle some custom event binding.\n##### Problem\n\nAs soon as the `componentDidMount` callback is added to `React.createClass`, React throws the following errors:\n\n``` html\nError while invoking `findComponentRoot` with the following ancestor node: <tbody id=\u200b\"content\">\u200b\u2026\u200b</tbody>\n\u200b    \nUncaught Error: Invariant Violation: findComponentRoot(..., .r[3skhu]): Unable to find element. This probably means the DOM was unexpectedly mutated (e.g. by the browser).\n```\n\n[JSFiddle here](http://jsfiddle.net/B4u3j/)\n##### Conclusion\n\nThe content still renders, but the error is a bit unnerving. Simply removing the callback prevents the errors from being thrown.\n\nI'm brand new to this, so its possible that I'm trying to make React do something that it is not meant to handle. But either way, I think the mere existence of an empty callback should not be throwing any errors.\n\nFWIW, other scenarios that involve injecting content rather than replacing an existing DOMNode seem to work fine with or without the `componentDidMount` callback.\n",
        "remove_template_description": "##### Scenario  I am trying to use React to dynamically replace a `tbody` tag with my app's content. In addition, I need to use a `componentDidMount` callback to handle some custom event binding. ##### Problem  As soon as the `componentDidMount` callback is added to `React.createClass`, React throws the following errors:  ``` html Error while invoking `findComponentRoot` with the following ancestor node: <tbody id=\u200b\"content\">\u200b\u2026\u200b</tbody> \u200b     Uncaught Error: Invariant Violation: findComponentRoot(..., .r[3skhu]): Unable to find element. This probably means the DOM was unexpectedly mutated (e.g. by the browser). ```  [JSFiddle here](http://jsfiddle.net/B4u3j/) ##### Conclusion  The content still renders, but the error is a bit unnerving. Simply removing the callback prevents the errors from being thrown.  I'm brand new to this, so its possible that I'm trying to make React do something that it is not meant to handle. But either way, I think the mere existence of an empty callback should not be throwing any errors.  FWIW, other scenarios that involve injecting content rather than replacing an existing DOMNode seem to work fine with or without the `componentDidMount` callback.",
        "human_words": "##### Scenario  I am trying to use React to dynamically replace a `tbody` tag with my app's content. In addition, I need to use a `componentDidMount` callback to handle some custom event binding. ##### Problem  As soon as the `componentDidMount` callback is added to `React.createClass`, React throws the following errors:    [JSFiddle here](http://jsfiddle.net/B4u3j/) ##### Conclusion  The content still renders, but the error is a bit unnerving. Simply removing the callback prevents the errors from being thrown.  I'm brand new to this, so its possible that I'm trying to make React do something that it is not meant to handle. But either way, I think the mere existence of an empty callback should not be throwing any errors.  FWIW, other scenarios that involve injecting content rather than replacing an existing DOMNode seem to work fine with or without the `componentDidMount` callback.",
        "human_words_regrex": "##### Scenario I am trying to use React to dynamically replace a `tbody` tag with my app's content. In addition, I need to use a `componentDidMount` callback to handle some custom event binding. ##### Problem As soon as the `componentDidMount` callback is added to `React.createClass`, React throws the following errors:  ##### Conclusion The content still renders, but the error is a bit unnerving. Simply removing the callback prevents the errors from being thrown. I'm brand new to this, so its possible that I'm trying to make React do something that it is not meant to handle. But either way, I think the mere existence of an empty callback should not be throwing any errors. FWIW, other scenarios that involve injecting content rather than replacing an existing DOMNode seem to work fine with or without the `componentDidMount` callback.",
        "human_words_stopwords_removal_lemmatization": "# # # # # scenario trying use react dynamically replace ` tbody ` tag app 's content . addition , need use ` componentdidmount ` callback handle custom event binding . # # # # # problem soon ` componentdidmount ` callback added ` react.createclass ` , react throw following error : # # # # # conclusion content still render , error bit unnerving . simply removing callback prevents error thrown . 'm brand new , possible 'm trying make react something meant handle . either way , think mere existence empty callback throwing error . fwiw , scenario involve injecting content rather replacing existing domnode seem work fine without ` componentdidmount ` callback .",
        "title_stopwords_removal_lemmatization": "existence ` componentdidmount ` throw `` error invoking ` findcomponentroot ` ``"
    },
    {
        "issue_id": 17066604,
        "title": "Set siblings state",
        "label": [
            "Type: Question"
        ],
        "date": "2013-07-22T19:44:51Z",
        "status": "closed",
        "description": "How to set state for siblings?\nSuppose if I have list item, {a, b, c, d}. When I clicked a, setState({selected: true}). then, I wanna make other siblings (b, c, d) setState({selected: false})\n\nIs it possible?\n",
        "remove_template_description": "How to set state for siblings? Suppose if I have list item, {a, b, c, d}. When I clicked a, setState({selected: true}). then, I wanna make other siblings (b, c, d) setState({selected: false})  Is it possible?",
        "human_words": "How to set state for siblings? Suppose if I have list item, {a, b, c, d}. When I clicked a, setState({selected: true}). then, I wanna make other siblings (b, c, d) setState({selected: false})  Is it possible?",
        "human_words_regrex": "How to set state for siblings? Suppose if I have list item, {a, b, c, d}. When I clicked a, setState({selected: true}). then, I wanna make other siblings (b, c, d) setState({selected: false}) Is it possible?",
        "human_words_stopwords_removal_lemmatization": "set state sibling ? suppose list item , { , b , c , } . clicked , setstate ( { selected : true } ) . , wan na make sibling ( b , c , ) setstate ( { selected : false } ) possible ?",
        "title_stopwords_removal_lemmatization": "set sibling state"
    }
]