[
    {
        "issue_id": 1616082540,
        "title": "[DevTools Bug]: provide an icon to Edge devtools?",
        "label": [
            "Type: Feature Request",
            "Status: Unconfirmed",
            "Component: Developer Tools",
            "good first issue"
        ],
        "date": "2023-03-08T23:01:21Z",
        "status": "closed",
        "description": "### Website or app\r\n\r\nWebsite: https://reactjs.org/\r\n\r\n### Repro steps\r\n\r\n1. open developer tools in Edge\r\n2. go to settings -> experiment -> enable Focus Mode -> reload DevTools\r\n3. we can see the react extension is loaded as below in devtools:\r\n![image](https://user-images.githubusercontent.com/108438266/223870494-509d7658-220c-45e5-8399-05a0fa1e6171.png)\r\n\r\n4. since the react extension doesn't provide the icon when it's created, devtools fallback to use the default icon to represent the extension. However, we've received couple of requests from users that they'd like to see the icon in the panel.\r\nfor instance:\r\n![image](https://user-images.githubusercontent.com/108438266/223870622-a68fa934-4ba0-450b-aa02-96c66ccab1cb.png)\r\n\r\nWondering if it's possible to provide an icon to Edge in the `chrome.devtools.panels.create()`?\r\nThank you for your support.\r\n\r\n### How often does this bug happen?\r\n\r\nEvery time\r\n\r\n### DevTools package (automated)\r\n\r\n_No response_\r\n\r\n### DevTools version (automated)\r\n\r\n_No response_\r\n\r\n### Error message (automated)\r\n\r\n_No response_\r\n\r\n### Error call stack (automated)\r\n\r\n_No response_\r\n\r\n### Error component stack (automated)\r\n\r\n_No response_\r\n\r\n### GitHub query string (automated)\r\n\r\n_No response_",
        "remove_template_description": "Website: https://reactjs.org/        1. open developer tools in Edge  2. go to settings -> experiment -> enable Focus Mode -> reload DevTools  3. we can see the react extension is loaded as below in devtools:  ![image](https://user-images.githubusercontent.com/108438266/223870494-509d7658-220c-45e5-8399-05a0fa1e6171.png)    4. since the react extension doesn't provide the icon when it's created, devtools fallback to use the default icon to represent the extension. However, we've received couple of requests from users that they'd like to see the icon in the panel.  for instance:  ![image](https://user-images.githubusercontent.com/108438266/223870622-a68fa934-4ba0-450b-aa02-96c66ccab1cb.png)    Wondering if it's possible to provide an icon to Edge in the `chrome.devtools.panels.create()`?  Thank you for your support.        Every time        __        __        __        __        __        __",
        "human_words": "Website: https://reactjs.org/        1. open developer tools in Edge  2. go to settings -> experiment -> enable Focus Mode -> reload DevTools  3. we can see the react extension is loaded as below in devtools:  ![image](https://user-images.githubusercontent.com/108438266/223870494-509d7658-220c-45e5-8399-05a0fa1e6171.png)    4. since the react extension doesn't provide the icon when it's created, devtools fallback to use the default icon to represent the extension. However, we've received couple of requests from users that they'd like to see the icon in the panel.  for instance:  ![image](https://user-images.githubusercontent.com/108438266/223870622-a68fa934-4ba0-450b-aa02-96c66ccab1cb.png)    Wondering if it's possible to provide an icon to Edge in the `chrome.devtools.panels.create()`?  Thank you for your support.        Every time        __        __        __        __        __        __",
        "human_words_regrex": "Website:  1. open developer tools in Edge 2. go to settings -> experiment -> enable Focus Mode -> reload DevTools 3. we can see the react extension is loaded as below in devtools: ! 4. since the react extension doesn't provide the icon when it's created, devtools fallback to use the default icon to represent the extension. However, we've received couple of requests from users that they'd like to see the icon in the panel. for instance: ! Wondering if it's possible to provide an icon to Edge in the `chrome.devtools.panels.create()`? Thank you for your support. Every time __ __ __ __ __ __",
        "human_words_stopwords_removal_lemmatization": "website : 1. open developer tool edge 2. go setting - > experiment - > enable focus mode - > reload devtools 3. see react extension loaded devtools : ! 4. since react extension n't provide icon 's created , devtools fallback use default icon represent extension . however , 've received couple request user 'd like see icon panel . instance : ! wondering 's possible provide icon edge ` chrome.devtools.panels.create ( ) ` ? thank support . every time __ __ __ __ __ __",
        "title_stopwords_removal_lemmatization": "[ devtools bug ] : provide icon edge devtools ?"
    },
    {
        "issue_id": 1573997252,
        "title": "Feature request: Improved warning \"Functions are not valid as a React child...\"",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2023-02-07T09:40:15Z",
        "status": "open",
        "description": "Good day. Every time when I bump into the following error\r\n```\r\nWarning: Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.\r\n```\r\nit takes me quite some time to locate the bad value in UI structure, even though there's a component trace in the console. What I think would improve by debugging experience if the error would also log the problematic value. This way I could know which value it is exactly in a single click in DevTools.",
        "remove_template_description": "Good day. Every time when I bump into the following error  ```  Warning: Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.  ```  it takes me quite some time to locate the bad value in UI structure, even though there's a component trace in the console. What I think would improve by debugging experience if the error would also log the problematic value. This way I could know which value it is exactly in a single click in DevTools.",
        "human_words": "Good day. Every time when I bump into the following error    it takes me quite some time to locate the bad value in UI structure, even though there's a component trace in the console. What I think would improve by debugging experience if the error would also log the problematic value. This way I could know which value it is exactly in a single click in DevTools.",
        "human_words_regrex": "Good day. Every time when I bump into the following error it takes me quite some time to locate the bad value in UI structure, even though there's a component trace in the console. What I think would improve by debugging experience if the error would also log the problematic value. This way I could know which value it is exactly in a single click in DevTools.",
        "human_words_stopwords_removal_lemmatization": "good day . every time bump following error take quite time locate bad value ui structure , even though 's component trace console . think would improve debugging experience error would also log problematic value . way could know value exactly single click devtools .",
        "title_stopwords_removal_lemmatization": "feature request : improved warning `` function valid react child ... ''"
    },
    {
        "issue_id": 1525639437,
        "title": "Bug: eslint react-hooks/exhaustive-deps should not quote nor localize the dependency list in the output",
        "label": [
            "Type: Feature Request",
            "Component: ESLint Rules"
        ],
        "date": "2023-01-09T13:56:40Z",
        "status": "open",
        "description": "React version: 18\r\n\r\n## Steps To Reproduce\r\n\r\n1. Create a useCallback or useEffect hook with missing deps\r\n2. enable react-hooks/exhaustive-deps eslint rule\r\n\r\n## The current behavior\r\n\r\n>   161:6  error  React Hook useCallback has missing dependencies: 'isTablet', 't', and 'theme.sizes.spacing'. Either include them or remove the dependency array  react-hooks/exhaustive-deps\r\n\r\n## The expected behavior\r\n\r\n>   161:6  error  React Hook useCallback has missing dependencies: [ isTablet, t, theme.sizes.spacing ]. Either include them or remove the dependency array  react-hooks/exhaustive-deps\r\n\r\nBy rendering it that way we can simply copy and paste the list into our code rather than changing the copied list after the fact.",
        "remove_template_description": "React version: 18        1. Create a useCallback or useEffect hook with missing deps  2. enable react-hooks/exhaustive-deps eslint rule        >   161:6  error  React Hook useCallback has missing dependencies: 'isTablet', 't', and 'theme.sizes.spacing'. Either include them or remove the dependency array  react-hooks/exhaustive-deps        >   161:6  error  React Hook useCallback has missing dependencies: [ isTablet, t, theme.sizes.spacing ]. Either include them or remove the dependency array  react-hooks/exhaustive-deps    By rendering it that way we can simply copy and paste the list into our code rather than changing the copied list after the fact.",
        "human_words": "React version: 18        1. Create a useCallback or useEffect hook with missing deps  2. enable react-hooks/exhaustive-deps eslint rule        >   161:6  error  React Hook useCallback has missing dependencies: 'isTablet', 't', and 'theme.sizes.spacing'. Either include them or remove the dependency array  react-hooks/exhaustive-deps        >   161:6  error  React Hook useCallback has missing dependencies: [ isTablet, t, theme.sizes.spacing ]. Either include them or remove the dependency array  react-hooks/exhaustive-deps    By rendering it that way we can simply copy and paste the list into our code rather than changing the copied list after the fact.",
        "human_words_regrex": "React version: 18 1. Create a useCallback or useEffect hook with missing deps 2. enable react-hooks/exhaustive-deps eslint rule > 161:6 error React Hook useCallback has missing dependencies: 'isTablet', 't', and 'theme.sizes.spacing'. Either include them or remove the dependency array react-hooks/exhaustive-deps > 161:6 error React Hook useCallback has missing dependencies: [ isTablet, t, theme.sizes.spacing ]. Either include them or remove the dependency array react-hooks/exhaustive-deps By rendering it that way we can simply copy and paste the list into our code rather than changing the copied list after the fact.",
        "human_words_stopwords_removal_lemmatization": "react version : 18 1. create usecallback useeffect hook missing deps 2. enable react-hooks/exhaustive-deps eslint rule > 161:6 error react hook usecallback missing dependency : 'istablet ' , 't ' , 'theme.sizes.spacing ' . either include remove dependency array react-hooks/exhaustive-deps > 161:6 error react hook usecallback missing dependency : [ istablet , , theme.sizes.spacing ] . either include remove dependency array react-hooks/exhaustive-deps rendering way simply copy paste list code rather changing copied list fact .",
        "title_stopwords_removal_lemmatization": "bug : eslint react-hooks/exhaustive-deps quote localize dependency list output"
    },
    {
        "issue_id": 1450194484,
        "title": "Support All of Structure Clone in RSC Serialization",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2022-11-15T18:20:56Z",
        "status": "open",
        "description": "The React Server Components payload is a custom protocol that extends what is serializable beyond just JSON. Beyond just JSON we also support all React primitives (React.lazy, ReactNode) and global named symbols (Symbol.for). We also already have plan to expand this support with these as well:\r\n\r\n- [x] Promises\r\n- [ ] Typed Arrays / DataView\r\n- [x] BigInt\r\n- [x] undefined, Infinity, NaN, -0\r\n\r\nWe don't have plans to make this algorithm pluggable from the outside because we're concerned about the complexity this puts on the ecosystem and that components won't be reusable in different contexts where they're not configured or configurations are conflicting.\r\n\r\nHowever, it might make sense to expand support to the types supported by the [Structured clone algorithm](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm) which is already standardized and specified.\r\n\r\n- [ ] Cyclic references: We already support references in the protocol. This is mostly just an implementation detail for the perf cost whether something should be inlined as JSON or defined as a separate row.\r\n- [ ] ArrayBuffer: For Typed Arrays we might stick to using the underlying buffer coming from the stream instead of cloning the data. All values are considered immutable anyway. For ArrayBuffers we can't use that trick though so it would require a new clone of the data which might be a bit of a foot gun when switching between buffers and typed arrays.\r\n- [ ] Error objects: We already support thrown errors and we could support more errors in the encoding. However, we intentionally don't pass them through with all information. We cover them up with digests since the error message and stack can sometimes include sensitive information that only the server should have access to. We would likely have to do the same here.\r\n- [ ] Boolean/String objects: We don't currently support the object wrappers around primitives e.g. `new String()`. You're not really supposed to use these in modern JS so it's kind of annoying to have to add extra code to handle this case.\r\n- [ ] RegExp: These are pretty straightforward but can possibly have security implications.\r\n- [x] Date, Map, Set: These are fairly straightforward to serialize so it's mostly a matter of allowing these as special cases. Why are these special? Because Structured Clone says so.\r\n- [ ] (Temporal: It seems appropriate that this would be added to structured clone but we need to confirm.)\r\n\r\nWe probably won't support Web specific APIs that don't necessarily have an equivalent on the Server or isn't directly transferrable such as if it has handles to local hardware or file system resources. The only one that might be easy to support:\r\n\r\n- [ ] Blob: This would be a wrapper around a ReadableStream with a mime type.\r\n- [ ] (File: This is just a Blob with a modified time and file name. I think we'll likely want to only support Blobs and not Files, meaning that File object would serialize as Blob, so the receiving type has to be Blob. Because file names and modified times could have security implications and it's too easy to accidentally leak this data.)",
        "remove_template_description": "The React Server Components payload is a custom protocol that extends what is serializable beyond just JSON. Beyond just JSON we also support all React primitives (React.lazy, ReactNode) and global named symbols (Symbol.for). We also already have plan to expand this support with these as well:    - [x] Promises  - [ ] Typed Arrays / DataView  - [x] BigInt  - [x] undefined, Infinity, NaN, -0    We don't have plans to make this algorithm pluggable from the outside because we're concerned about the complexity this puts on the ecosystem and that components won't be reusable in different contexts where they're not configured or configurations are conflicting.    However, it might make sense to expand support to the types supported by the [Structured clone algorithm](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm) which is already standardized and specified.    - [ ] Cyclic references: We already support references in the protocol. This is mostly just an implementation detail for the perf cost whether something should be inlined as JSON or defined as a separate row.  - [ ] ArrayBuffer: For Typed Arrays we might stick to using the underlying buffer coming from the stream instead of cloning the data. All values are considered immutable anyway. For ArrayBuffers we can't use that trick though so it would require a new clone of the data which might be a bit of a foot gun when switching between buffers and typed arrays.  - [ ] Error objects: We already support thrown errors and we could support more errors in the encoding. However, we intentionally don't pass them through with all information. We cover them up with digests since the error message and stack can sometimes include sensitive information that only the server should have access to. We would likely have to do the same here.  - [ ] Boolean/String objects: We don't currently support the object wrappers around primitives e.g. `new String()`. You're not really supposed to use these in modern JS so it's kind of annoying to have to add extra code to handle this case.  - [ ] RegExp: These are pretty straightforward but can possibly have security implications.  - [x] Date, Map, Set: These are fairly straightforward to serialize so it's mostly a matter of allowing these as special cases. Why are these special? Because Structured Clone says so.  - [ ] (Temporal: It seems appropriate that this would be added to structured clone but we need to confirm.)    We probably won't support Web specific APIs that don't necessarily have an equivalent on the Server or isn't directly transferrable such as if it has handles to local hardware or file system resources. The only one that might be easy to support:    - [ ] Blob: This would be a wrapper around a ReadableStream with a mime type.  - [ ] (File: This is just a Blob with a modified time and file name. I think we'll likely want to only support Blobs and not Files, meaning that File object would serialize as Blob, so the receiving type has to be Blob. Because file names and modified times could have security implications and it's too easy to accidentally leak this data.)",
        "human_words": "The React Server Components payload is a custom protocol that extends what is serializable beyond just JSON. Beyond just JSON we also support all React primitives (React.lazy, ReactNode) and global named symbols (Symbol.for). We also already have plan to expand this support with these as well:    - [x] Promises  - [ ] Typed Arrays / DataView  - [x] BigInt  - [x] undefined, Infinity, NaN, -0    We don't have plans to make this algorithm pluggable from the outside because we're concerned about the complexity this puts on the ecosystem and that components won't be reusable in different contexts where they're not configured or configurations are conflicting.    However, it might make sense to expand support to the types supported by the [Structured clone algorithm](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm) which is already standardized and specified.    - [ ] Cyclic references: We already support references in the protocol. This is mostly just an implementation detail for the perf cost whether something should be inlined as JSON or defined as a separate row.  - [ ] ArrayBuffer: For Typed Arrays we might stick to using the underlying buffer coming from the stream instead of cloning the data. All values are considered immutable anyway. For ArrayBuffers we can't use that trick though so it would require a new clone of the data which might be a bit of a foot gun when switching between buffers and typed arrays.  - [ ] Error objects: We already support thrown errors and we could support more errors in the encoding. However, we intentionally don't pass them through with all information. We cover them up with digests since the error message and stack can sometimes include sensitive information that only the server should have access to. We would likely have to do the same here.  - [ ] Boolean/String objects: We don't currently support the object wrappers around primitives e.g. `new String()`. You're not really supposed to use these in modern JS so it's kind of annoying to have to add extra code to handle this case.  - [ ] RegExp: These are pretty straightforward but can possibly have security implications.  - [x] Date, Map, Set: These are fairly straightforward to serialize so it's mostly a matter of allowing these as special cases. Why are these special? Because Structured Clone says so.  - [ ] (Temporal: It seems appropriate that this would be added to structured clone but we need to confirm.)    We probably won't support Web specific APIs that don't necessarily have an equivalent on the Server or isn't directly transferrable such as if it has handles to local hardware or file system resources. The only one that might be easy to support:    - [ ] Blob: This would be a wrapper around a ReadableStream with a mime type.  - [ ] (File: This is just a Blob with a modified time and file name. I think we'll likely want to only support Blobs and not Files, meaning that File object would serialize as Blob, so the receiving type has to be Blob. Because file names and modified times could have security implications and it's too easy to accidentally leak this data.)",
        "human_words_regrex": "The React Server Components payload is a custom protocol that extends what is serializable beyond just JSON. Beyond just JSON we also support all React primitives (React.lazy, ReactNode) and global named symbols (Symbol.for). We also already have plan to expand this support with these as well: -  which is already standardized and specified. - [ ] Cyclic references: We already support references in the protocol. This is mostly just an implementation detail for the perf cost whether something should be inlined as JSON or defined as a separate row. - [ ] ArrayBuffer: For Typed Arrays we might stick to using the underlying buffer coming from the stream instead of cloning the data. All values are considered immutable anyway. For ArrayBuffers we can't use that trick though so it would require a new clone of the data which might be a bit of a foot gun when switching between buffers and typed arrays. - [ ] Error objects: We already support thrown errors and we could support more errors in the encoding. However, we intentionally don't pass them through with all information. We cover them up with digests since the error message and stack can sometimes include sensitive information that only the server should have access to. We would likely have to do the same here. - [ ] Boolean/String objects: We don't currently support the object wrappers around primitives e.g. `new String()`. You're not really supposed to use these in modern JS so it's kind of annoying to have to add extra code to handle this case. - [ ] RegExp: These are pretty straightforward but can possibly have security implications. - [x] Date, Map, Set: These are fairly straightforward to serialize so it's mostly a matter of allowing these as special cases. Why are these special? Because Structured Clone says so. - [ ] (Temporal: It seems appropriate that this would be added to structured clone but we need to confirm.) We probably won't support Web specific APIs that don't necessarily have an equivalent on the Server or isn't directly transferrable such as if it has handles to local hardware or file system resources. The only one that might be easy to support: - [ ] Blob: This would be a wrapper around a ReadableStream with a mime type. - [ ] (File: This is just a Blob with a modified time and file name. I think we'll likely want to only support Blobs and not Files, meaning that File object would serialize as Blob, so the receiving type has to be Blob. Because file names and modified times could have security implications and it's too easy to accidentally leak this data.)",
        "human_words_stopwords_removal_lemmatization": "react server component payload custom protocol extends serializable beyond json . beyond json also support react primitive ( react.lazy , reactnode ) global named symbol ( symbol.for ) . also already plan expand support well : - already standardized specified . - [ ] cyclic reference : already support reference protocol . mostly implementation detail perf cost whether something inlined json defined separate row . - [ ] arraybuffer : typed array might stick using underlying buffer coming stream instead cloning data . value considered immutable anyway . arraybuffers ca n't use trick though would require new clone data might bit foot gun switching buffer typed array . - [ ] error object : already support thrown error could support error encoding . however , intentionally n't pas information . cover digest since error message stack sometimes include sensitive information server access . would likely . - [ ] boolean/string object : n't currently support object wrapper around primitive e.g . ` new string ( ) ` . 're really supposed use modern j 's kind annoying add extra code handle case . - [ ] regexp : pretty straightforward possibly security implication . - [ x ] date , map , set : fairly straightforward serialize 's mostly matter allowing special case . special ? structured clone say . - [ ] ( temporal : seems appropriate would added structured clone need confirm . ) probably wo n't support web specific apis n't necessarily equivalent server n't directly transferrable handle local hardware file system resource . one might easy support : - [ ] blob : would wrapper around readablestream mime type . - [ ] ( file : blob modified time file name . think 'll likely want support blob file , meaning file object would serialize blob , receiving type blob . file name modified time could security implication 's easy accidentally leak data . )",
        "title_stopwords_removal_lemmatization": "support structure clone rsc serialization"
    },
    {
        "issue_id": 1400306693,
        "title": "[Feature Request] exhaustive-deps linting rule: allow custom hooks to specify the index of their callback effect",
        "label": [
            "Type: Feature Request",
            "Component: ESLint Rules"
        ],
        "date": "2022-10-06T21:12:29Z",
        "status": "open",
        "description": "# Background\r\nCurrently, the `react-hooks/exhaustive-deps` linting rule allows developers to lint custom hooks. E.g.:\r\n\r\n```\r\n{\r\n  \"rules\": {\r\n    // ...\r\n    \"react-hooks/exhaustive-deps\": [\"warn\", {\r\n      \"additionalHooks\": \"(useMyCustomHook|useMyOtherCustomHook)\"\r\n    }]\r\n  }\r\n}\r\n```\r\n\r\nWhile the [official documentation](https://www.npmjs.com/package/eslint-plugin-react-hooks) for this configuration states \"We suggest to use this option **very sparingly, if at all**\", there are nonetheless certain custom hook cases that necessitate such an approach. Consider the following scenario: (1) a callback needs to hook into an external system (thus requiring an effect), (2) the callback has dependencies on state / props and needs to reexecute when those change, (3) executing that callback can be arbitrarily expensive, so re-executing every render is not an option.\r\n\r\n# Motivation\r\nTo meet this challenge, we have two options: (1) treat the callback reference as sufficiently reactive (by this I mean, referentially stable unless a dependency has changed) \u2014 in other words, we assume the user of the hook is passing in a callback that was defined via useCallback, with the appropriate dependencies; (2) accept dependencies in the custom hook itself, wrap the function in a `useEvent` / `useEventHandler` style hook for referential stability, apply the dependencies to whatever effect the function is then executed within.\r\n\r\nIf we go with option (1) we have an obvious shortcoming \u2014 there's no way to ensure the user is wrapping their callback in useCallback. From personal experience on a large industry project with lots of developers, this is just not a viable option. Option (2) on the other hand meets all our needs, and via the `additionalHooks` config, we can ensure correctness by linting for exhaustive dependencies.\r\n\r\n# The Problem\r\nGreat! We've met our challenge with a robust solution and easy to use solution, however...... what if our hook accepts a third, or fourth arg? Well, the [current implementation](https://github.com/facebook/react/blob/main/packages/eslint-plugin-react-hooks/src/ExhaustiveDeps.js#L1737) of exhaustive-deps only allows for the [callback, deps] args to occupy arg0 and arg1 of our custom hook (e.g., `useCustomHook(effectCallback, effectDeps)`). While we can still get everything to \"work\", this because more than a minor headache if a hypothetical arg2 we want to add contains some of the most important contextual information. This pain is particularly acute because callbacks are (preferably) defined inline within hooks, and so they'll have a tendency push any succeeding args pretty far down, making them almost seem irrelevant.\r\n\r\n## An example from React\r\nWhile this is ultimately an issue of style, the resulting requirement forces custom hooks that need the exhaustive deps rule into a very awkward argument pattern. It seems I'm not alone, as React's own [`useImperativeHandle`](https://reactjs.org/docs/hooks-reference.html#useimperativehandle) seems to agree in the preferred structure for hooks that accept effectful callbacks with deps. In the case of useImperativeHandle, the most important, unique, and concise value \u2014 the `ref` \u2014 is passed first, and only then followed by the more verbose and less information-dense callback + deps args.\r\n\r\n## The Proposal\r\nAllowing developers to add their custom hooks to the linting tool is genuinely useful, but it does come with the significant caveat that the effect and deps have to be used as the first two args. I propose either of the following revisions:\r\n\r\n1. The additionalHooks rule be modified to alternatively accept an object of the form `{ [callbackArgIndex: number]: customHookRegex }`. For instance, adding a rule for `useImperativeHandle` would look like\r\n```\r\n\"additionalHooks\": { 1: \"useImperativeHandle\" }\"\r\n```\r\n\r\n2. Instead, the behavior of the rule should be altered to assume that the callback and the dependencies occupy the final two arguments of any given custom hook. This pattern seems consistent with how all native hooks with callback-deps patterns are defined, and so it seems to be a better \"default assumption\" over the current approach. \r\n\r\nIf this proposal is not moved forward with, I highly recommend that the documentation for the linting rule at least be updated to clarify that the linted callback and dependencies must occupy the first two arguments of any custom hook. Mine was failing silently and it took a deep dive into the implementation to understand what was going on!",
        "remove_template_description": "# Background  Currently, the `react-hooks/exhaustive-deps` linting rule allows developers to lint custom hooks. E.g.:    ```  {    \"rules\": {      // ...      \"react-hooks/exhaustive-deps\": [\"warn\", {        \"additionalHooks\": \"(useMyCustomHook|useMyOtherCustomHook)\"      }]    }  }  ```    While the [official documentation](https://www.npmjs.com/package/eslint-plugin-react-hooks) for this configuration states \"We suggest to use this option **very sparingly, if at all**\", there are nonetheless certain custom hook cases that necessitate such an approach. Consider the following scenario: (1) a callback needs to hook into an external system (thus requiring an effect), (2) the callback has dependencies on state / props and needs to reexecute when those change, (3) executing that callback can be arbitrarily expensive, so re-executing every render is not an option.    # Motivation  To meet this challenge, we have two options: (1) treat the callback reference as sufficiently reactive (by this I mean, referentially stable unless a dependency has changed) \u2014 in other words, we assume the user of the hook is passing in a callback that was defined via useCallback, with the appropriate dependencies; (2) accept dependencies in the custom hook itself, wrap the function in a `useEvent` / `useEventHandler` style hook for referential stability, apply the dependencies to whatever effect the function is then executed within.    If we go with option (1) we have an obvious shortcoming \u2014 there's no way to ensure the user is wrapping their callback in useCallback. From personal experience on a large industry project with lots of developers, this is just not a viable option. Option (2) on the other hand meets all our needs, and via the `additionalHooks` config, we can ensure correctness by linting for exhaustive dependencies.    # The Problem  Great! We've met our challenge with a robust solution and easy to use solution, however...... what if our hook accepts a third, or fourth arg? Well, the [current implementation](https://github.com/facebook/react/blob/main/packages/eslint-plugin-react-hooks/src/ExhaustiveDeps.js#L1737) of exhaustive-deps only allows for the [callback, deps] args to occupy arg0 and arg1 of our custom hook (e.g., `useCustomHook(effectCallback, effectDeps)`). While we can still get everything to \"work\", this because more than a minor headache if a hypothetical arg2 we want to add contains some of the most important contextual information. This pain is particularly acute because callbacks are (preferably) defined inline within hooks, and so they'll have a tendency push any succeeding args pretty far down, making them almost seem irrelevant.    ## An example from React  While this is ultimately an issue of style, the resulting requirement forces custom hooks that need the exhaustive deps rule into a very awkward argument pattern. It seems I'm not alone, as React's own [`useImperativeHandle`](https://reactjs.org/docs/hooks-reference.html#useimperativehandle) seems to agree in the preferred structure for hooks that accept effectful callbacks with deps. In the case of useImperativeHandle, the most important, unique, and concise value \u2014 the `ref` \u2014 is passed first, and only then followed by the more verbose and less information-dense callback + deps args.    ## The Proposal  Allowing developers to add their custom hooks to the linting tool is genuinely useful, but it does come with the significant caveat that the effect and deps have to be used as the first two args. I propose either of the following revisions:    1. The additionalHooks rule be modified to alternatively accept an object of the form `{ [callbackArgIndex: number]: customHookRegex }`. For instance, adding a rule for `useImperativeHandle` would look like  ```  \"additionalHooks\": { 1: \"useImperativeHandle\" }\"  ```    2. Instead, the behavior of the rule should be altered to assume that the callback and the dependencies occupy the final two arguments of any given custom hook. This pattern seems consistent with how all native hooks with callback-deps patterns are defined, and so it seems to be a better \"default assumption\" over the current approach.     If this proposal is not moved forward with, I highly recommend that the documentation for the linting rule at least be updated to clarify that the linted callback and dependencies must occupy the first two arguments of any custom hook. Mine was failing silently and it took a deep dive into the implementation to understand what was going on!",
        "human_words": "# Background  Currently, the `react-hooks/exhaustive-deps` linting rule allows developers to lint custom hooks. E.g.:        While the [official documentation](https://www.npmjs.com/package/eslint-plugin-react-hooks) for this configuration states \"We suggest to use this option **very sparingly, if at all**\", there are nonetheless certain custom hook cases that necessitate such an approach. Consider the following scenario: (1) a callback needs to hook into an external system (thus requiring an effect), (2) the callback has dependencies on state / props and needs to reexecute when those change, (3) executing that callback can be arbitrarily expensive, so re-executing every render is not an option.    # Motivation  To meet this challenge, we have two options: (1) treat the callback reference as sufficiently reactive (by this I mean, referentially stable unless a dependency has changed) \u2014 in other words, we assume the user of the hook is passing in a callback that was defined via useCallback, with the appropriate dependencies; (2) accept dependencies in the custom hook itself, wrap the function in a `useEvent` / `useEventHandler` style hook for referential stability, apply the dependencies to whatever effect the function is then executed within.    If we go with option (1) we have an obvious shortcoming \u2014 there's no way to ensure the user is wrapping their callback in useCallback. From personal experience on a large industry project with lots of developers, this is just not a viable option. Option (2) on the other hand meets all our needs, and via the `additionalHooks` config, we can ensure correctness by linting for exhaustive dependencies.    # The Problem  Great! We've met our challenge with a robust solution and easy to use solution, however...... what if our hook accepts a third, or fourth arg? Well, the [current implementation](https://github.com/facebook/react/blob/main/packages/eslint-plugin-react-hooks/src/ExhaustiveDeps.js#L1737) of exhaustive-deps only allows for the [callback, deps] args to occupy arg0 and arg1 of our custom hook (e.g., `useCustomHook(effectCallback, effectDeps)`). While we can still get everything to \"work\", this because more than a minor headache if a hypothetical arg2 we want to add contains some of the most important contextual information. This pain is particularly acute because callbacks are (preferably) defined inline within hooks, and so they'll have a tendency push any succeeding args pretty far down, making them almost seem irrelevant.    ## An example from React  While this is ultimately an issue of style, the resulting requirement forces custom hooks that need the exhaustive deps rule into a very awkward argument pattern. It seems I'm not alone, as React's own [`useImperativeHandle`](https://reactjs.org/docs/hooks-reference.html#useimperativehandle) seems to agree in the preferred structure for hooks that accept effectful callbacks with deps. In the case of useImperativeHandle, the most important, unique, and concise value \u2014 the `ref` \u2014 is passed first, and only then followed by the more verbose and less information-dense callback + deps args.    ## The Proposal  Allowing developers to add their custom hooks to the linting tool is genuinely useful, but it does come with the significant caveat that the effect and deps have to be used as the first two args. I propose either of the following revisions:    1. The additionalHooks rule be modified to alternatively accept an object of the form `{ [callbackArgIndex: number]: customHookRegex }`. For instance, adding a rule for `useImperativeHandle` would look like      2. Instead, the behavior of the rule should be altered to assume that the callback and the dependencies occupy the final two arguments of any given custom hook. This pattern seems consistent with how all native hooks with callback-deps patterns are defined, and so it seems to be a better \"default assumption\" over the current approach.     If this proposal is not moved forward with, I highly recommend that the documentation for the linting rule at least be updated to clarify that the linted callback and dependencies must occupy the first two arguments of any custom hook. Mine was failing silently and it took a deep dive into the implementation to understand what was going on!",
        "human_words_regrex": "# Background Currently, the `react-hooks/exhaustive-deps` linting rule allows developers to lint custom hooks. E.g.: While the  for this configuration states \"We suggest to use this option **very sparingly, if at all**\", there are nonetheless certain custom hook cases that necessitate such an approach. Consider the following scenario: (1) a callback needs to hook into an external system (thus requiring an effect), (2) the callback has dependencies on state / props and needs to reexecute when those change, (3) executing that callback can be arbitrarily expensive, so re-executing every render is not an option. # Motivation To meet this challenge, we have two options: (1) treat the callback reference as sufficiently reactive (by this I mean, referentially stable unless a dependency has changed) \u2014 in other words, we assume the user of the hook is passing in a callback that was defined via useCallback, with the appropriate dependencies; (2) accept dependencies in the custom hook itself, wrap the function in a `useEvent` / `useEventHandler` style hook for referential stability, apply the dependencies to whatever effect the function is then executed within. If we go with option (1) we have an obvious shortcoming \u2014 there's no way to ensure the user is wrapping their callback in useCallback. From personal experience on a large industry project with lots of developers, this is just not a viable option. Option (2) on the other hand meets all our needs, and via the `additionalHooks` config, we can ensure correctness by linting for exhaustive dependencies. # The Problem Great! We've met our challenge with a robust solution and easy to use solution, however...... what if our hook accepts a third, or fourth arg? Well, the  of exhaustive-deps only allows for the  seems to agree in the preferred structure for hooks that accept effectful callbacks with deps. In the case of useImperativeHandle, the most important, unique, and concise value \u2014 the `ref` \u2014 is passed first, and only then followed by the more verbose and less information-dense callback + deps args. ## The Proposal Allowing developers to add their custom hooks to the linting tool is genuinely useful, but it does come with the significant caveat that the effect and deps have to be used as the first two args. I propose either of the following revisions: 1. The additionalHooks rule be modified to alternatively accept an object of the form `{ [callbackArgIndex: number]: customHookRegex }`. For instance, adding a rule for `useImperativeHandle` would look like 2. Instead, the behavior of the rule should be altered to assume that the callback and the dependencies occupy the final two arguments of any given custom hook. This pattern seems consistent with how all native hooks with callback-deps patterns are defined, and so it seems to be a better \"default assumption\" over the current approach. If this proposal is not moved forward with, I highly recommend that the documentation for the linting rule at least be updated to clarify that the linted callback and dependencies must occupy the first two arguments of any custom hook. Mine was failing silently and it took a deep dive into the implementation to understand what was going on!",
        "human_words_stopwords_removal_lemmatization": "# background currently , ` react-hooks/exhaustive-deps ` linting rule allows developer lint custom hook . e.g . : configuration state `` suggest use option * * sparingly , * * '' , nonetheless certain custom hook case necessitate approach . consider following scenario : ( 1 ) callback need hook external system ( thus requiring effect ) , ( 2 ) callback dependency state / prop need reexecute change , ( 3 ) executing callback arbitrarily expensive , re-executing every render option . # motivation meet challenge , two option : ( 1 ) treat callback reference sufficiently reactive ( mean , referentially stable unless dependency changed ) \u2014 word , assume user hook passing callback defined via usecallback , appropriate dependency ; ( 2 ) accept dependency custom hook , wrap function ` useevent ` / ` useeventhandler ` style hook referential stability , apply dependency whatever effect function executed within . go option ( 1 ) obvious shortcoming \u2014 's way ensure user wrapping callback usecallback . personal experience large industry project lot developer , viable option . option ( 2 ) hand meet need , via ` additionalhooks ` config , ensure correctness linting exhaustive dependency . # problem great ! 've met challenge robust solution easy use solution , however ...... hook accepts third , fourth arg ? well , exhaustive-deps allows seems agree preferred structure hook accept effectful callback deps . case useimperativehandle , important , unique , concise value \u2014 ` ref ` \u2014 passed first , followed verbose le information-dense callback + deps args . # # proposal allowing developer add custom hook linting tool genuinely useful , come significant caveat effect deps used first two args . propose either following revision : 1. additionalhooks rule modified alternatively accept object form ` { [ callbackargindex : number ] : customhookregex } ` . instance , adding rule ` useimperativehandle ` would look like 2. instead , behavior rule altered assume callback dependency occupy final two argument given custom hook . pattern seems consistent native hook callback-deps pattern defined , seems better `` default assumption '' current approach . proposal moved forward , highly recommend documentation linting rule least updated clarify linted callback dependency must occupy first two argument custom hook . mine failing silently took deep dive implementation understand going !",
        "title_stopwords_removal_lemmatization": "[ feature request ] exhaustive-deps linting rule : allow custom hook specify index callback effect"
    },
    {
        "issue_id": 1393633204,
        "title": "eslint-plugin-react-hooks: lint rule to enforce that `useMemo` returns a value",
        "label": [
            "Type: Feature Request",
            "Component: ESLint Rules"
        ],
        "date": "2022-10-02T04:01:58Z",
        "status": "open",
        "description": "Nothing prevents developers from calling `useMemo` without a `return`:\r\n\r\n```ts\r\nimport { useMemo } from \"react\";\r\n\r\nuseMemo(() => {\r\n    console.log(\"Yippee!\");\r\n}, []);\r\n```\r\n\r\n[[TypeScript playground showing no errors](https://www.typescriptlang.org/play?#code/JYWwDg9gTgLgBAbzgVwM4FMCy6QTgXzgDMoIQ4AiKdAQwGMYKBuAWACh20scIAKXgJRwAvAD5E7OFLh0IAO1QQANugB0SiAHNeFAJrAwYdOgCEFAazb4ANHADaAXQtA)]\r\n\r\nCalling `useMemo` without a returned value is somewhat equivalent to calling `useEffect` without a returned value. Judging by the few times I've seen it happen, it's likely a case of a developer either confusing the two hooks or forgetting to `return` the memoized value.\r\n\r\nSuggestion: can we add a lint rule to flag `useMemo` calls that don't definitely return a value? It could have a _suggestion_ fixer to switch to `useEffect`.",
        "remove_template_description": "Nothing prevents developers from calling `useMemo` without a `return`:    ```ts  import { useMemo } from \"react\";    useMemo(() => {      console.log(\"Yippee!\");  }, []);  ```    [[TypeScript playground showing no errors](https://www.typescriptlang.org/play?#code/JYWwDg9gTgLgBAbzgVwM4FMCy6QTgXzgDMoIQ4AiKdAQwGMYKBuAWACh20scIAKXgJRwAvAD5E7OFLh0IAO1QQANugB0SiAHNeFAJrAwYdOgCEFAazb4ANHADaAXQtA)]    Calling `useMemo` without a returned value is somewhat equivalent to calling `useEffect` without a returned value. Judging by the few times I've seen it happen, it's likely a case of a developer either confusing the two hooks or forgetting to `return` the memoized value.    Suggestion: can we add a lint rule to flag `useMemo` calls that don't definitely return a value? It could have a _suggestion_ fixer to switch to `useEffect`.",
        "human_words": "Nothing prevents developers from calling `useMemo` without a `return`:        [[TypeScript playground showing no errors](https://www.typescriptlang.org/play?#code/JYWwDg9gTgLgBAbzgVwM4FMCy6QTgXzgDMoIQ4AiKdAQwGMYKBuAWACh20scIAKXgJRwAvAD5E7OFLh0IAO1QQANugB0SiAHNeFAJrAwYdOgCEFAazb4ANHADaAXQtA)]    Calling `useMemo` without a returned value is somewhat equivalent to calling `useEffect` without a returned value. Judging by the few times I've seen it happen, it's likely a case of a developer either confusing the two hooks or forgetting to `return` the memoized value.    Suggestion: can we add a lint rule to flag `useMemo` calls that don't definitely return a value? It could have a _suggestion_ fixer to switch to `useEffect`.",
        "human_words_regrex": "Nothing prevents developers from calling `useMemo` without a `return`: ] Calling `useMemo` without a returned value is somewhat equivalent to calling `useEffect` without a returned value. Judging by the few times I've seen it happen, it's likely a case of a developer either confusing the two hooks or forgetting to `return` the memoized value. Suggestion: can we add a lint rule to flag `useMemo` calls that don't definitely return a value? It could have a _suggestion_ fixer to switch to `useEffect`.",
        "human_words_stopwords_removal_lemmatization": "nothing prevents developer calling ` usememo ` without ` return ` : ] calling ` usememo ` without returned value somewhat equivalent calling ` useeffect ` without returned value . judging time 've seen happen , 's likely case developer either confusing two hook forgetting ` return ` memoized value . suggestion : add lint rule flag ` usememo ` call n't definitely return value ? could _suggestion_ fixer switch ` useeffect ` .",
        "title_stopwords_removal_lemmatization": "eslint-plugin-react-hooks : lint rule enforce ` usememo ` return value"
    },
    {
        "issue_id": 1328626249,
        "title": "[DevTools]: More compact rendering of deeply nested component trees when there is a single child",
        "label": [
            "Type: Feature Request",
            "Component: Developer Tools"
        ],
        "date": "2022-08-04T13:24:07Z",
        "status": "open",
        "description": "On Reddit.com:\r\n\r\n![Screen Shot 2022-08-04 at 2 43 29 pm](https://user-images.githubusercontent.com/281413/182850866-ce57cfdc-1f6c-4c72-b149-802d57fc05cb.png)\r\n\r\nIt's a very common pattern in React to have deep chains of components with only one single child.\r\n\r\n# Options\r\n\r\n## a. VSCode style\r\n\r\nThis problem is also enountered in Java project trees. \r\n\r\nVSCode does it like this:\r\n\r\n![image](https://user-images.githubusercontent.com/281413/182853632-ba1a9e91-6b78-46fb-beba-edea860b3a44.png)\r\n\r\nhttps://github.com/microsoft/vscode-docs/blob/vnext/release-notes/v1_41.md#compact-folders-in-explorer\r\n\r\nIntelliJ similar.\r\n\r\nMaybe we could do the same as VSCode?\r\n\r\n## b. No indent for single child\r\n\r\nAnother approach would be to just not indent when there is only one child.\r\n\r\n```\r\n  h\r\n  Context.Provider - {props: {foo: 1}}\r\n  I\r\n  Context.Provider\r\n  E\r\n  Context.Provider\r\n  Context.Provider\r\n  Context.Provider\r\n  l\r\n- Context.Provider (2 children - collapse all)\r\n\r\n    mg\r\n    d\r\n    Context.Provider\r\n  + Component (1 child - expand all)\r\n\r\n    vg\r\n    hg\r\n    Context.Provider\r\n  + hg (1 child - expand all)\r\n\r\n```\r\n\r\nWe could also indicate when there are multiple children and provide some controls to collapse all the children's children. This would help with https://github.com/facebook/react/issues/16463.\r\n\r\nAdvantage: As another feature I'd also be interested in adding some inline annotations to the right of each component to show some props to better identify components. Moving these nested trees horizontal would block this ability, so this approach works better.\r\n\r\nDesign decision: Where to place the arrow to toggle folding? At the first element with multiple children (indicated above)? Or at the top. Or maybe we can create a really tall button on hover to show.\r\n\r\nDesign decision: How to clearly and visually deliniate that the components are nested vs siblings. Maybe we need to add an extra space (as shown in example above). Maybe color coding as well. Or alternate grey shading.\r\n\r\n# Related\r\n\r\n- https://github.com/facebook/react/issues/16463\r\n- https://github.com/facebook/react/issues/16735\r\n\r\n\r\n",
        "remove_template_description": "On Reddit.com:    ![Screen Shot 2022-08-04 at 2 43 29 pm](https://user-images.githubusercontent.com/281413/182850866-ce57cfdc-1f6c-4c72-b149-802d57fc05cb.png)    It's a very common pattern in React to have deep chains of components with only one single child.    # Options    ## a. VSCode style    This problem is also enountered in Java project trees.     VSCode does it like this:    ![image](https://user-images.githubusercontent.com/281413/182853632-ba1a9e91-6b78-46fb-beba-edea860b3a44.png)    https://github.com/microsoft/vscode-docs/blob/vnext/release-notes/v1_41.md#compact-folders-in-explorer    IntelliJ similar.    Maybe we could do the same as VSCode?    ## b. No indent for single child    Another approach would be to just not indent when there is only one child.    ```    h    Context.Provider - {props: {foo: 1}}    I    Context.Provider    E    Context.Provider    Context.Provider    Context.Provider    l  - Context.Provider (2 children - collapse all)        mg      d      Context.Provider    + Component (1 child - expand all)        vg      hg      Context.Provider    + hg (1 child - expand all)    ```    We could also indicate when there are multiple children and provide some controls to collapse all the children's children. This would help with https://github.com/facebook/react/issues/16463.    Advantage: As another feature I'd also be interested in adding some inline annotations to the right of each component to show some props to better identify components. Moving these nested trees horizontal would block this ability, so this approach works better.    Design decision: Where to place the arrow to toggle folding? At the first element with multiple children (indicated above)? Or at the top. Or maybe we can create a really tall button on hover to show.    Design decision: How to clearly and visually deliniate that the components are nested vs siblings. Maybe we need to add an extra space (as shown in example above). Maybe color coding as well. Or alternate grey shading.    # Related    - https://github.com/facebook/react/issues/16463  - https://github.com/facebook/react/issues/16735",
        "human_words": "On Reddit.com:    ![Screen Shot 2022-08-04 at 2 43 29 pm](https://user-images.githubusercontent.com/281413/182850866-ce57cfdc-1f6c-4c72-b149-802d57fc05cb.png)    It's a very common pattern in React to have deep chains of components with only one single child.    # Options    ## a. VSCode style    This problem is also enountered in Java project trees.     VSCode does it like this:    ![image](https://user-images.githubusercontent.com/281413/182853632-ba1a9e91-6b78-46fb-beba-edea860b3a44.png)    https://github.com/microsoft/vscode-docs/blob/vnext/release-notes/v1_41.md#compact-folders-in-explorer    IntelliJ similar.    Maybe we could do the same as VSCode?    ## b. No indent for single child    Another approach would be to just not indent when there is only one child.        We could also indicate when there are multiple children and provide some controls to collapse all the children's children. This would help with https://github.com/facebook/react/issues/16463.    Advantage: As another feature I'd also be interested in adding some inline annotations to the right of each component to show some props to better identify components. Moving these nested trees horizontal would block this ability, so this approach works better.    Design decision: Where to place the arrow to toggle folding? At the first element with multiple children (indicated above)? Or at the top. Or maybe we can create a really tall button on hover to show.    Design decision: How to clearly and visually deliniate that the components are nested vs siblings. Maybe we need to add an extra space (as shown in example above). Maybe color coding as well. Or alternate grey shading.    # Related    - https://github.com/facebook/react/issues/16463  - https://github.com/facebook/react/issues/16735",
        "human_words_regrex": "On Reddit.com: ! It's a very common pattern in React to have deep chains of components with only one single child. # Options ## a. VSCode style This problem is also enountered in Java project trees. VSCode does it like this: !  IntelliJ similar. Maybe we could do the same as VSCode? ## b. No indent for single child Another approach would be to just not indent when there is only one child. We could also indicate when there are multiple children and provide some controls to collapse all the children's children. This would help with  Advantage: As another feature I'd also be interested in adding some inline annotations to the right of each component to show some props to better identify components. Moving these nested trees horizontal would block this ability, so this approach works better. Design decision: Where to place the arrow to toggle folding? At the first element with multiple children (indicated above)? Or at the top. Or maybe we can create a really tall button on hover to show. Design decision: How to clearly and visually deliniate that the components are nested vs siblings. Maybe we need to add an extra space (as shown in example above). Maybe color coding as well. Or alternate grey shading. # Related -  - ",
        "human_words_stopwords_removal_lemmatization": "reddit.com : ! 's common pattern react deep chain component one single child . # option # # a. vscode style problem also enountered java project tree . vscode like : ! intellij similar . maybe could vscode ? # # b. indent single child another approach would indent one child . could also indicate multiple child provide control collapse child 's child . would help advantage : another feature 'd also interested adding inline annotation right component show prop better identify component . moving nested tree horizontal would block ability , approach work better . design decision : place arrow toggle folding ? first element multiple child ( indicated ) ? top . maybe create really tall button hover show . design decision : clearly visually deliniate component nested v sibling . maybe need add extra space ( shown example ) . maybe color coding well . alternate grey shading . # related - -",
        "title_stopwords_removal_lemmatization": "[ devtools ] : compact rendering deeply nested component tree single child"
    },
    {
        "issue_id": 1285626431,
        "title": "[Devtools Feature]:[Open in Editor URL]Expect to add a switch to allow users to use GET requests",
        "label": [
            "Type: Feature Request",
            "Component: Developer Tools"
        ],
        "date": "2022-06-27T10:58:21Z",
        "status": "open",
        "description": "It is now requested by default using window.open.If you use it a lot, you will leave a lot of new tabs.\r\n\r\n### Config\r\n<img width=\"611\" alt=\"image\" src=\"https://user-images.githubusercontent.com/28336270/175926162-ec42baa3-b718-4259-8eae-055c150530aa.png\">\r\n\r\n\r\n<img width=\"1085\" alt=\"image\" src=\"https://user-images.githubusercontent.com/28336270/175926129-f87bfb81-e483-4237-9b89-a9ff6ff734c4.png\">\r\n\r\n### window.open\r\n<img width=\"1003\" alt=\"image\" src=\"https://user-images.githubusercontent.com/28336270/175925594-c23f3fdb-3f45-4c26-95d4-23e15f51426f.png\">\r\n\r\n**This problem can be avoided if GET request is used.**",
        "remove_template_description": "It is now requested by default using window.open.If you use it a lot, you will leave a lot of new tabs.    ### Config  <img width=\"611\" alt=\"image\" src=\"https://user-images.githubusercontent.com/28336270/175926162-ec42baa3-b718-4259-8eae-055c150530aa.png\">      <img width=\"1085\" alt=\"image\" src=\"https://user-images.githubusercontent.com/28336270/175926129-f87bfb81-e483-4237-9b89-a9ff6ff734c4.png\">    ### window.open  <img width=\"1003\" alt=\"image\" src=\"https://user-images.githubusercontent.com/28336270/175925594-c23f3fdb-3f45-4c26-95d4-23e15f51426f.png\">    **This problem can be avoided if GET request is used.**",
        "human_words": "It is now requested by default using window.open.If you use it a lot, you will leave a lot of new tabs.    ### Config  <img width=\"611\" alt=\"image\" src=\"https://user-images.githubusercontent.com/28336270/175926162-ec42baa3-b718-4259-8eae-055c150530aa.png\">      <img width=\"1085\" alt=\"image\" src=\"https://user-images.githubusercontent.com/28336270/175926129-f87bfb81-e483-4237-9b89-a9ff6ff734c4.png\">    ### window.open  <img width=\"1003\" alt=\"image\" src=\"https://user-images.githubusercontent.com/28336270/175925594-c23f3fdb-3f45-4c26-95d4-23e15f51426f.png\">    **This problem can be avoided if GET request is used.**",
        "human_words_regrex": "It is now requested by default using window.open.If you use it a lot, you will leave a lot of new tabs. ### Config <img width=\"611\" alt=\"image\" src=\" <img width=\"1085\" alt=\"image\" src=\" ### window.open <img width=\"1003\" alt=\"image\" src=\" **This problem can be avoided if GET request is used.**",
        "human_words_stopwords_removal_lemmatization": "requested default using window.open.if use lot , leave lot new tab . # # # config < img width= '' 611 '' alt= '' image '' src= '' < img width= '' 1085 '' alt= '' image '' src= '' # # # window.open < img width= '' 1003 '' alt= '' image '' src= '' * * problem avoided get request used . * *",
        "title_stopwords_removal_lemmatization": "[ devtools feature ] : [ open editor url ] expect add switch allow user use get request"
    },
    {
        "issue_id": 1276808514,
        "title": "[Devtools Feature]:let devtool component picker to spport custom renderer which runs on web",
        "label": [
            "Type: Feature Request",
            "Component: Developer Tools",
            "Component: Reconciler"
        ],
        "date": "2022-06-20T11:50:29Z",
        "status": "open",
        "description": "I develop a custom renderer `egreact`, it's a custom renderer for egret , egret is a game engine depend on canvas.\r\n\r\nThanks for `injectIntoDevTools` that users can view components tree by react devtool easily.But unfortunately, `injectIntoDevTools` does't provide an interface for picking a custom renderer component.\r\n\r\nTo support it, i read the source code of devtool and tried writing some inject code. Fortunately, it works well!\r\n\r\n![https://user-images.githubusercontent.com/48762792/174010546-94a2c99c-b0ea-402e-9d3b-2feb7c1ea104.gif](https://user-images.githubusercontent.com/48762792/174010546-94a2c99c-b0ea-402e-9d3b-2feb7c1ea104.gif)\r\n\r\n**Here is what i did mainly:**\r\n\r\n**1.intercept `window.listener`**\r\n\r\n```tsx\r\n// @link https://github.com/facebook/react/blob/c3d7a7e3d72937443ef75b7e29335c98ad0f1424/packages/react-devtools-shared/src/backend/views/Highlighter/index.js#L41\r\nfunction registerListenersOnWindow(window) {\r\n    // This plug-in may run in non-DOM environments (e.g. React Native).\r\n    if (window && typeof window.addEventListener === 'function') {\r\n      window.addEventListener('click', onClick, true);\r\n      window.addEventListener('mousedown', onMouseEvent, true);\r\n      window.addEventListener('mouseover', onMouseEvent, true);\r\n      window.addEventListener('mouseup', onMouseEvent, true);\r\n      window.addEventListener('pointerdown', onPointerDown, true);\r\n      window.addEventListener('pointerover', onPointerOver, true);\r\n      window.addEventListener('pointerup', onPointerUp, true);\r\n    }\r\n  }\r\n```\r\n\r\n [my code](https://github.com/xingxinglieo/egreact/blob/a6214979274e29f6252f8aaacb2a86806e688db3/packages/core/src/devtool.ts#L122), intercept `window.listener` to judge is the point  in the canvas, if true, mock an event which target is game engine instance.\r\n\r\n```tsx\r\nconst proxyHandler: EventHandler = function (e: MouseEvent) {\r\n        const { pageX: x, pageY: y } = e\r\n        const r = getCanvas().getBoundingClientRect()\r\n        r.x += window.scrollX\r\n        r.y += window.scrollY\r\n        // to judge is mouse envent ponit in canvas\r\n        if (x > r.x && x < r.x + r.width && y > r.y && y < r.y + r.height) {\r\n          const scale = caculateScale()\r\n          const target = findTargetByPosition(\r\n            egret.lifecycle.stage,\r\n            (x - r.x) / scale,\r\n            (y - r.y) / scale,\r\n          ) as any\r\n          // mock a new event, change target to egret instance, because e.target is read only\r\n          e = {\r\n            ...e,\r\n            preventDefault: e.preventDefault.bind(e),\r\n            stopPropagation: e.stopPropagation.bind(e),\r\n            target,\r\n          }\r\n}\r\n```\r\n\r\n**2.proxy `window.getComputedStyle`** \r\n\r\n```tsx\r\n/**\r\n * @description proxy window.getComputedStyle\uff0clet it can handle game engine instance\r\n * @link https://github.com/facebook/react/blob/29c2c633159cb2171bb04fe84b9caa09904388e8/packages/react-devtools-shared/src/backend/views/utils.js#L113\r\n */\r\nexport function proxyGetComputedStyle() {\r\n  window.getComputedStyle = function (el, pseudo) {\r\n    if (\r\n      Object.entries(catalogueMap).some(\r\n        ([n, catalogue]) => catalogue.__Class && el instanceof catalogue.__Class,\r\n      )\r\n    ) {\r\n      return emptyCSSStyleSheet\r\n    } else {\r\n      return getComputedStyle.call(this, el, pseudo)\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n**3.compliant dom attributes is used in devtool**\r\n\r\n```tsx\r\nif (process.env.NODE_ENV !== 'production') {\r\n    // devtool need to get rect of element\r\n    // https://github.com/facebook/react/blob/29c2c633159cb2171bb04fe84b9caa09904388e8/packages/react-devtools-shared/src/backend/views/utils.js#L108\r\n    instance.getBoundingClientRect = () => getBoundingClientRect(instance)\r\n\r\n    // https://github.com/facebook/react/blob/327e4a1f96fbb874001b17684fbb073046a84938/packages/react-devtools-shared/src/backend/views/Highlighter/Overlay.js#L193\r\n    instance.nodeType = 1\r\n\r\n    // https://github.com/facebook/react/blob/327e4a1f96fbb874001b17684fbb073046a84938/packages/react-devtools-shared/src/backend/views/Highlighter/Overlay.js#L233\r\n    instance.nodeName = instance.__class__\r\n\r\n    instance.ownerDocument = document\r\n  }\r\n```\r\n\r\nBased on this, I hope the `injectIntoDevTools` can provide the interface like this \r\n\r\n```tsx\r\ninterface InjectIntoDevToolsOptions {\r\n\t\t\t// to judge is the point in the range of custom renderer,\r\n\t\t\t// if true, return instance\r\n\t\t\tisInCustomRenderer: (Event) => instance | null \r\n\t\t\t// get left/top/width/height of instance\r\n\t\t\tgetBoundingClientRect: (instance) => any \r\n\t\t\t// get border/margin/padding/content of instance\r\n\t\t\tgetComputedStyle: (instance) => any\r\n\t\r\n}\r\n```",
        "remove_template_description": "I develop a custom renderer `egreact`, it's a custom renderer for egret , egret is a game engine depend on canvas.    Thanks for `injectIntoDevTools` that users can view components tree by react devtool easily.But unfortunately, `injectIntoDevTools` does't provide an interface for picking a custom renderer component.    To support it, i read the source code of devtool and tried writing some inject code. Fortunately, it works well!    ![https://user-images.githubusercontent.com/48762792/174010546-94a2c99c-b0ea-402e-9d3b-2feb7c1ea104.gif](https://user-images.githubusercontent.com/48762792/174010546-94a2c99c-b0ea-402e-9d3b-2feb7c1ea104.gif)    **Here is what i did mainly:**    **1.intercept `window.listener`**    ```tsx  // @link https://github.com/facebook/react/blob/c3d7a7e3d72937443ef75b7e29335c98ad0f1424/packages/react-devtools-shared/src/backend/views/Highlighter/index.js#L41  function registerListenersOnWindow(window) {      // This plug-in may run in non-DOM environments (e.g. React Native).      if (window && typeof window.addEventListener === 'function') {        window.addEventListener('click', onClick, true);        window.addEventListener('mousedown', onMouseEvent, true);        window.addEventListener('mouseover', onMouseEvent, true);        window.addEventListener('mouseup', onMouseEvent, true);        window.addEventListener('pointerdown', onPointerDown, true);        window.addEventListener('pointerover', onPointerOver, true);        window.addEventListener('pointerup', onPointerUp, true);      }    }  ```     [my code](https://github.com/xingxinglieo/egreact/blob/a6214979274e29f6252f8aaacb2a86806e688db3/packages/core/src/devtool.ts#L122), intercept `window.listener` to judge is the point  in the canvas, if true, mock an event which target is game engine instance.    ```tsx  const proxyHandler: EventHandler = function (e: MouseEvent) {          const { pageX: x, pageY: y } = e          const r = getCanvas().getBoundingClientRect()          r.x += window.scrollX          r.y += window.scrollY          // to judge is mouse envent ponit in canvas          if (x > r.x && x < r.x + r.width && y > r.y && y < r.y + r.height) {            const scale = caculateScale()            const target = findTargetByPosition(              egret.lifecycle.stage,              (x - r.x) / scale,              (y - r.y) / scale,            ) as any            // mock a new event, change target to egret instance, because e.target is read only            e = {              ...e,              preventDefault: e.preventDefault.bind(e),              stopPropagation: e.stopPropagation.bind(e),              target,            }  }  ```    **2.proxy `window.getComputedStyle`**     ```tsx  /**   * @description proxy window.getComputedStyle\uff0clet it can handle game engine instance   * @link https://github.com/facebook/react/blob/29c2c633159cb2171bb04fe84b9caa09904388e8/packages/react-devtools-shared/src/backend/views/utils.js#L113   */  export function proxyGetComputedStyle() {    window.getComputedStyle = function (el, pseudo) {      if (        Object.entries(catalogueMap).some(          ([n, catalogue]) => catalogue.__Class && el instanceof catalogue.__Class,        )      ) {        return emptyCSSStyleSheet      } else {        return getComputedStyle.call(this, el, pseudo)      }    }  }  ```    **3.compliant dom attributes is used in devtool**    ```tsx  if (process.env.NODE_ENV !== 'production') {      // devtool need to get rect of element      // https://github.com/facebook/react/blob/29c2c633159cb2171bb04fe84b9caa09904388e8/packages/react-devtools-shared/src/backend/views/utils.js#L108      instance.getBoundingClientRect = () => getBoundingClientRect(instance)        // https://github.com/facebook/react/blob/327e4a1f96fbb874001b17684fbb073046a84938/packages/react-devtools-shared/src/backend/views/Highlighter/Overlay.js#L193      instance.nodeType = 1        // https://github.com/facebook/react/blob/327e4a1f96fbb874001b17684fbb073046a84938/packages/react-devtools-shared/src/backend/views/Highlighter/Overlay.js#L233      instance.nodeName = instance.__class__        instance.ownerDocument = document    }  ```    Based on this, I hope the `injectIntoDevTools` can provide the interface like this     ```tsx  interface InjectIntoDevToolsOptions {  \t\t\t// to judge is the point in the range of custom renderer,  \t\t\t// if true, return instance  \t\t\tisInCustomRenderer: (Event) => instance | null   \t\t\t// get left/top/width/height of instance  \t\t\tgetBoundingClientRect: (instance) => any   \t\t\t// get border/margin/padding/content of instance  \t\t\tgetComputedStyle: (instance) => any  \t  }  ```",
        "human_words": "I develop a custom renderer `egreact`, it's a custom renderer for egret , egret is a game engine depend on canvas.    Thanks for `injectIntoDevTools` that users can view components tree by react devtool easily.But unfortunately, `injectIntoDevTools` does't provide an interface for picking a custom renderer component.    To support it, i read the source code of devtool and tried writing some inject code. Fortunately, it works well!    ![https://user-images.githubusercontent.com/48762792/174010546-94a2c99c-b0ea-402e-9d3b-2feb7c1ea104.gif](https://user-images.githubusercontent.com/48762792/174010546-94a2c99c-b0ea-402e-9d3b-2feb7c1ea104.gif)    **Here is what i did mainly:**    **1.intercept `window.listener`**         [my code](https://github.com/xingxinglieo/egreact/blob/a6214979274e29f6252f8aaacb2a86806e688db3/packages/core/src/devtool.ts#L122), intercept `window.listener` to judge is the point  in the canvas, if true, mock an event which target is game engine instance.        **2.proxy `window.getComputedStyle`**         **3.compliant dom attributes is used in devtool**        Based on this, I hope the `injectIntoDevTools` can provide the interface like this     ",
        "human_words_regrex": "I develop a custom renderer `egreact`, it's a custom renderer for egret , egret is a game engine depend on canvas. Thanks for `injectIntoDevTools` that users can view components tree by react devtool easily.But unfortunately, `injectIntoDevTools` does't provide an interface for picking a custom renderer component. To support it, i read the source code of devtool and tried writing some inject code. Fortunately, it works well! ! **Here is what i did mainly:** **1.intercept `window.listener`** , intercept `window.listener` to judge is the point in the canvas, if true, mock an event which target is game engine instance. **2.proxy `window.getComputedStyle`** **3.compliant dom attributes is used in devtool** Based on this, I hope the `injectIntoDevTools` can provide the interface like this ",
        "human_words_stopwords_removal_lemmatization": "develop custom renderer ` egreact ` , 's custom renderer egret , egret game engine depend canvas . thanks ` injectintodevtools ` user view component tree react devtool easily.but unfortunately , ` injectintodevtools ` does't provide interface picking custom renderer component . support , read source code devtool tried writing inject code . fortunately , work well ! ! * * mainly : * * * * 1.intercept ` window.listener ` * * , intercept ` window.listener ` judge point canvas , true , mock event target game engine instance . * * 2.proxy ` window.getcomputedstyle ` * * * * 3.compliant dom attribute used devtool * * based , hope ` injectintodevtools ` provide interface like",
        "title_stopwords_removal_lemmatization": "[ devtools feature ] : let devtool component picker spport custom renderer run web"
    },
    {
        "issue_id": 1270749463,
        "title": "New hook; useForwardRef",
        "label": [
            "Type: Feature Request",
            "Status: Unconfirmed"
        ],
        "date": "2022-06-14T12:43:25Z",
        "status": "open",
        "description": "When working with React.forwardRef it can be kind of a hassle to make it work, since it can be either a callback ref or object ref.\r\n\r\nI propose adding a new hook; useForwardRef that handles this.\r\n\r\nExample on how to implement it with React:\r\n\r\n```\r\nconst useForwardRef = <T,>(\r\n  ref: ForwardedRef<T>,\r\n  initialValue: any = null\r\n) => {\r\n  const targetRef = useRef<T>(initialValue);\r\n\r\n  useEffect(() => {\r\n    if (!ref) return;\r\n\r\n    if (typeof ref === 'function') {\r\n      ref(targetRef.current);\r\n    } else {\r\n      ref.current = targetRef.current;\r\n    }\r\n  }, [ref]);\r\n\r\n  return targetRef;\r\n};\r\n\r\nconst InputField = React.forwardRef<HTMLInputElement, InputFieldProps>(\r\n  (props, ref) => {\r\n   const forwardedRef = useForwardRef<HTMLInputElement>(ref);\r\n   // Cool code....\r\n  }\r\n );\r\n```\r\n\r\n\r\n\r\n",
        "remove_template_description": "When working with React.forwardRef it can be kind of a hassle to make it work, since it can be either a callback ref or object ref.    I propose adding a new hook; useForwardRef that handles this.    Example on how to implement it with React:    ```  const useForwardRef = <T,>(    ref: ForwardedRef<T>,    initialValue: any = null  ) => {    const targetRef = useRef<T>(initialValue);      useEffect(() => {      if (!ref) return;        if (typeof ref === 'function') {        ref(targetRef.current);      } else {        ref.current = targetRef.current;      }    }, [ref]);      return targetRef;  };    const InputField = React.forwardRef<HTMLInputElement, InputFieldProps>(    (props, ref) => {     const forwardedRef = useForwardRef<HTMLInputElement>(ref);     // Cool code....    }   );  ```",
        "human_words": "When working with React.forwardRef it can be kind of a hassle to make it work, since it can be either a callback ref or object ref.    I propose adding a new hook; useForwardRef that handles this.    Example on how to implement it with React:    ",
        "human_words_regrex": "When working with React.forwardRef it can be kind of a hassle to make it work, since it can be either a callback ref or object ref. I propose adding a new hook; useForwardRef that handles this. Example on how to implement it with React: ",
        "human_words_stopwords_removal_lemmatization": "working react.forwardref kind hassle make work , since either callback ref object ref . propose adding new hook ; useforwardref handle . example implement react :",
        "title_stopwords_removal_lemmatization": "new hook ; useforwardref"
    },
    {
        "issue_id": 1232970018,
        "title": "react-devtools standalone app is missing inspector (selector tool)",
        "label": [
            "Type: Feature Request",
            "Component: Developer Tools"
        ],
        "date": "2022-05-11T17:27:07Z",
        "status": "open",
        "description": "When running react-devtools as standalone app (not as chrome extension or in react-native), The app is missing the inspector/selector tool.\r\n\r\nIt is also missing the jump to code integration with vscode.",
        "remove_template_description": "When running react-devtools as standalone app (not as chrome extension or in react-native), The app is missing the inspector/selector tool.    It is also missing the jump to code integration with vscode.",
        "human_words": "When running react-devtools as standalone app (not as chrome extension or in react-native), The app is missing the inspector/selector tool.    It is also missing the jump to code integration with vscode.",
        "human_words_regrex": "When running react-devtools as standalone app (not as chrome extension or in react-native), The app is missing the inspector/selector tool. It is also missing the jump to code integration with vscode.",
        "human_words_stopwords_removal_lemmatization": "running react-devtools standalone app ( chrome extension react-native ) , app missing inspector/selector tool . also missing jump code integration vscode .",
        "title_stopwords_removal_lemmatization": "react-devtools standalone app missing inspector ( selector tool )"
    },
    {
        "issue_id": 1229643466,
        "title": "[DevTools] Manifest version 2 is deprecated",
        "label": [
            "Type: Feature Request",
            "Component: Developer Tools"
        ],
        "date": "2022-05-09T12:37:52Z",
        "status": "closed",
        "description": "### Website or app\n\nhttps://developer.chrome.com/blog/mv2-transition/\n\n### Repro steps\n\nUse latest React DevTools with Electron (Chromium) (18.2.0 / Chromium 100)\r\n\r\n```\r\n  (node:80082) ExtensionLoadWarning: Warnings loading extension at ./node_modules/electron-devtools-vendor/extensions/react-developer-tools:\r\n    Manifest version 2 is deprecated, and support will be removed in 2023. See https://developer.chrome.com/blog/mv2-transition/ for more details.\r\n```\n\n### How often does this bug happen?\n\nEvery time\n\n### DevTools package (automated)\n\n_No response_\n\n### DevTools version (automated)\n\n_No response_\n\n### Error message (automated)\n\n_No response_\n\n### Error call stack (automated)\n\n_No response_\n\n### Error component stack (automated)\n\n_No response_\n\n### GitHub query string (automated)\n\n_No response_",
        "remove_template_description": "https://developer.chrome.com/blog/mv2-transition/    Use latest React DevTools with Electron (Chromium) (18.2.0 / Chromium 100)    ```    (node:80082) ExtensionLoadWarning: Warnings loading extension at ./node_modules/electron-devtools-vendor/extensions/react-developer-tools:      Manifest version 2 is deprecated, and support will be removed in 2023. See https://developer.chrome.com/blog/mv2-transition/ for more details.  ```    Every time    __    __    __    __    __    __",
        "human_words": "https://developer.chrome.com/blog/mv2-transition/    Use latest React DevTools with Electron (Chromium) (18.2.0 / Chromium 100)        Every time    __    __    __    __    __    __",
        "human_words_regrex": " Use latest React DevTools with Electron (Chromium) (18.2.0 / Chromium 100) Every time __ __ __ __ __ __",
        "human_words_stopwords_removal_lemmatization": "use latest react devtools electron ( chromium ) ( 18.2.0 / chromium 100 ) every time __ __ __ __ __ __",
        "title_stopwords_removal_lemmatization": "[ devtools ] manifest version 2 deprecated"
    },
    {
        "issue_id": 1194172364,
        "title": "Suppress \"Download the React DevTools\" log for a better development experience",
        "label": [
            "Type: Feature Request",
            "Component: Developer Tools",
            "good first issue (taken)"
        ],
        "date": "2022-04-06T07:23:39Z",
        "status": "open",
        "description": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 18.0.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. open a remote debug chrome devtools window\r\n2. the message will show\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\n<img width=\"1440\" alt=\"image\" src=\"https://user-images.githubusercontent.com/41773861/161918579-8c7458a0-5568-4f3b-a1ad-cdb5da5cde87.png\">\r\n\r\n\r\n\r\n## The expected behavior\r\n\r\nNo this message. Chrome extension can't be used in remote debug window\r\n",
        "remove_template_description": "<!--    Please provide a clear and concise description of what the bug is. Include    screenshots if needed. Please test using the latest version of the relevant    React packages to make sure your issue has not already been fixed.  -->    React version: 18.0.0        1. open a remote debug chrome devtools window  2. the message will show    <!--    Your bug will get fixed much faster if we can run your code and it doesn't    have dependencies other than React. Issues without reproduction steps or    code examples may be immediately closed as not actionable.  -->    Link to code example:    <!--    Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a    repository on GitHub, or provide a minimal code example that reproduces the    problem. You may provide a screenshot of the application if you think it is    relevant to your bug report. Here are some tips for providing a minimal    example: https://stackoverflow.com/help/mcve.  -->        <img width=\"1440\" alt=\"image\" src=\"https://user-images.githubusercontent.com/41773861/161918579-8c7458a0-5568-4f3b-a1ad-cdb5da5cde87.png\">            No this message. Chrome extension can't be used in remote debug window",
        "human_words": "<!--    Please provide a clear and concise description of what the bug is. Include    screenshots if needed. Please test using the latest version of the relevant    React packages to make sure your issue has not already been fixed.  -->    React version: 18.0.0        1. open a remote debug chrome devtools window  2. the message will show    <!--    Your bug will get fixed much faster if we can run your code and it doesn't    have dependencies other than React. Issues without reproduction steps or    code examples may be immediately closed as not actionable.  -->    Link to code example:    <!--    Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a    repository on GitHub, or provide a minimal code example that reproduces the    problem. You may provide a screenshot of the application if you think it is    relevant to your bug report. Here are some tips for providing a minimal    example: https://stackoverflow.com/help/mcve.  -->        <img width=\"1440\" alt=\"image\" src=\"https://user-images.githubusercontent.com/41773861/161918579-8c7458a0-5568-4f3b-a1ad-cdb5da5cde87.png\">            No this message. Chrome extension can't be used in remote debug window",
        "human_words_regrex": " React version: 18.0.0 1. open a remote debug chrome devtools window 2. the message will show  Link to code example:  <img width=\"1440\" alt=\"image\" src=\" No this message. Chrome extension can't be used in remote debug window",
        "human_words_stopwords_removal_lemmatization": "react version : 18.0.0 1. open remote debug chrome devtools window 2. message show link code example : < img width= '' 1440 '' alt= '' image '' src= '' message . chrome extension ca n't used remote debug window",
        "title_stopwords_removal_lemmatization": "suppress `` download react devtools '' log better development experience"
    },
    {
        "issue_id": 1183111823,
        "title": "Standalone react-devtools: select component instances in iframe",
        "label": [
            "Type: Feature Request",
            "Component: Developer Tools"
        ],
        "date": "2022-03-28T08:56:52Z",
        "status": "open",
        "description": "Hi,\r\nin my setup I am using the standalone [react-devtools](https://github.com/facebook/react/tree/main/packages/react-devtools) to inspect a react app running inside an iframe of my main app. I am wondering if there is a way to select individual component instances in the browser view as is it normally possible when using the chrome devtools for a normal (not iframe) environment. Currently I can only select component instances by clicking the entries in the devtools tree.\r\n\r\n<h2>Setup</h2>\r\n\r\nMy react app is running in an iframe. I connect the standalone react-devtools by adding 'react-devtools' to my webpack configuration as described [here](https://github.com/facebook/react/tree/main/packages/react-devtools#usage-with-react-dom).\r\n\r\nThis all works as intended and the devtools are showing up with the tree of the iframe's react app\r\n\r\n<img width=\"971\" alt=\"Screenshot 2022-03-28 at 10 50 28\" src=\"https://user-images.githubusercontent.com/81635487/160361824-27b119b2-6310-44ad-9ac5-cc53099f166b.png\">\r\n\r\n<h2>Desired Behavior</h2>\r\n\r\nI'd like to select the component instances by clicking them in the browser view like it is possible when using the normal chrome react devtools on a regular (not iframe-nested) app:\r\n\r\n<img width=\"744\" alt=\"Screenshot 2022-03-28 at 10 49 15\" src=\"https://user-images.githubusercontent.com/81635487/160361744-6447059a-ae56-47fd-ba34-0ddde6cc32b9.png\">\r\n\r\nIs there currently a way to achieve this? Thank you a lot!\r\n\r\n\r\n\r\n\r\n\r\n",
        "remove_template_description": "Hi,  in my setup I am using the standalone [react-devtools](https://github.com/facebook/react/tree/main/packages/react-devtools) to inspect a react app running inside an iframe of my main app. I am wondering if there is a way to select individual component instances in the browser view as is it normally possible when using the chrome devtools for a normal (not iframe) environment. Currently I can only select component instances by clicking the entries in the devtools tree.    <h2>Setup</h2>    My react app is running in an iframe. I connect the standalone react-devtools by adding 'react-devtools' to my webpack configuration as described [here](https://github.com/facebook/react/tree/main/packages/react-devtools#usage-with-react-dom).    This all works as intended and the devtools are showing up with the tree of the iframe's react app    <img width=\"971\" alt=\"Screenshot 2022-03-28 at 10 50 28\" src=\"https://user-images.githubusercontent.com/81635487/160361824-27b119b2-6310-44ad-9ac5-cc53099f166b.png\">    <h2>Desired Behavior</h2>    I'd like to select the component instances by clicking them in the browser view like it is possible when using the normal chrome react devtools on a regular (not iframe-nested) app:    <img width=\"744\" alt=\"Screenshot 2022-03-28 at 10 49 15\" src=\"https://user-images.githubusercontent.com/81635487/160361744-6447059a-ae56-47fd-ba34-0ddde6cc32b9.png\">    Is there currently a way to achieve this? Thank you a lot!",
        "human_words": "Hi,  in my setup I am using the standalone [react-devtools](https://github.com/facebook/react/tree/main/packages/react-devtools) to inspect a react app running inside an iframe of my main app. I am wondering if there is a way to select individual component instances in the browser view as is it normally possible when using the chrome devtools for a normal (not iframe) environment. Currently I can only select component instances by clicking the entries in the devtools tree.    <h2>Setup</h2>    My react app is running in an iframe. I connect the standalone react-devtools by adding 'react-devtools' to my webpack configuration as described [here](https://github.com/facebook/react/tree/main/packages/react-devtools#usage-with-react-dom).    This all works as intended and the devtools are showing up with the tree of the iframe's react app    <img width=\"971\" alt=\"Screenshot 2022-03-28 at 10 50 28\" src=\"https://user-images.githubusercontent.com/81635487/160361824-27b119b2-6310-44ad-9ac5-cc53099f166b.png\">    <h2>Desired Behavior</h2>    I'd like to select the component instances by clicking them in the browser view like it is possible when using the normal chrome react devtools on a regular (not iframe-nested) app:    <img width=\"744\" alt=\"Screenshot 2022-03-28 at 10 49 15\" src=\"https://user-images.githubusercontent.com/81635487/160361744-6447059a-ae56-47fd-ba34-0ddde6cc32b9.png\">    Is there currently a way to achieve this? Thank you a lot!",
        "human_words_regrex": "Hi, in my setup I am using the standalone  to inspect a react app running inside an iframe of my main app. I am wondering if there is a way to select individual component instances in the browser view as is it normally possible when using the chrome devtools for a normal (not iframe) environment. Currently I can only select component instances by clicking the entries in the devtools tree. Setup My react app is running in an iframe. I connect the standalone react-devtools by adding 'react-devtools' to my webpack configuration as described . This all works as intended and the devtools are showing up with the tree of the iframe's react app Desired Behavior I'd like to select the component instances by clicking them in the browser view like it is possible when using the normal chrome react devtools on a regular (not iframe-nested) app: <img width=\"744\" alt=\"Screenshot 2022-03-28 at 10 49 15\" src=\" Is there currently a way to achieve this? Thank you a lot!",
        "human_words_stopwords_removal_lemmatization": "hi , setup using standalone inspect react app running inside iframe main app . wondering way select individual component instance browser view normally possible using chrome devtools normal ( iframe ) environment . currently select component instance clicking entry devtools tree . setup react app running iframe . connect standalone react-devtools adding 'react-devtools ' webpack configuration described . work intended devtools showing tree iframe 's react app desired behavior 'd like select component instance clicking browser view like possible using normal chrome react devtools regular ( iframe-nested ) app : < img width= '' 744 '' alt= '' screenshot 2022-03-28 10 49 15 '' src= '' currently way achieve ? thank lot !",
        "title_stopwords_removal_lemmatization": "standalone react-devtools : select component instance iframe"
    },
    {
        "issue_id": 1138462989,
        "title": "react-hooks/exhaustive-deps and useMemo(() => x, x)",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2022-02-15T10:08:21Z",
        "status": "open",
        "description": "I would like to memoize an array using `useMemo(() => x, x)`, where x.length is unknown but constant, and so think I have a legitimate use case to be able to disable the eslint warnings.\r\n\r\nI can find similar issues to this, including https://github.com/facebook/react/issues/18229#issuecomment-619569632, but not one where the length of the dependencies is unknown but constant.\r\n\r\nThis code creates a warning\r\n> React Hook useMemo has a missing dependency: 'x'. Either include it or remove the dependency array.\r\n\r\nand\r\n> React Hook useMemo was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.\r\n\r\nWhich links to an issue with the following comment\r\n> If you ... aren't sure your case is legit, file a new issue.\r\nhttps://github.com/facebook/react/issues/14920#issuecomment-472018817\r\n\r\nMy use case, without the useMemo, is as follows:\r\n\r\n```ts\r\n/**\r\n * When an array in `arrays` goes from length 0 to length > 0, call `callback`\r\n */\r\nexport const useCallbackWhenAnArrayPopulates = (\r\n  callback: () => void,\r\n  ...arrays: (readonly unknown[])[],\r\n) => {\r\n  //  const memoArrays = useMemo(() => arrays, arrays);\r\n  const prevArrays = useRef(arrays);\r\n\r\n  useEffect(() => {\r\n    if (prevArrays.current.length !== arrays.length) {\r\n      throw 'Unexpected array length change in useCallbackWhenArraysPopulate';\r\n    }\r\n    if (\r\n      prevArrays.current.some(\r\n        (value, index) => !value.length && arrays[index]?.length,\r\n      )\r\n    ) {\r\n      callback();\r\n    }\r\n    prevArrays.current = arrays;\r\n  }, [arrays, callback]);\r\n};\r\n```\r\n\r\nI would like to memoise `arrays`, which comes from spreading arguments passed to the hook, so that the useEffect is only called when one of these arguments changes. Ideally I'd do this with `useMemo(() => arrays, arrays)`.\r\n\r\nI know that [the dependency length for useMemo can't change](https://github.com/facebook/react/issues/18229), but though it's length is unknown, I would not expect it to change and prevent this from happening by throwing an error if it does.\r\n\r\nIs it safe to use `useMemo(() => arrays, arrays)` in this case, and disable the lint warning?\r\n\r\nExample usage:\r\n\r\nhttps://codesandbox.io/s/nervous-glade-qt4x2?file=/src/Counters.js\r\n\r\n(side note, not shown in this example are cases where the arrays could change together and you wouldn't want to call the callbacks twice when this happens)",
        "remove_template_description": "I would like to memoize an array using `useMemo(() => x, x)`, where x.length is unknown but constant, and so think I have a legitimate use case to be able to disable the eslint warnings.    I can find similar issues to this, including https://github.com/facebook/react/issues/18229#issuecomment-619569632, but not one where the length of the dependencies is unknown but constant.    This code creates a warning  > React Hook useMemo has a missing dependency: 'x'. Either include it or remove the dependency array.    and  > React Hook useMemo was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.    Which links to an issue with the following comment  > If you ... aren't sure your case is legit, file a new issue.  https://github.com/facebook/react/issues/14920#issuecomment-472018817    My use case, without the useMemo, is as follows:    ```ts  /**   * When an array in `arrays` goes from length 0 to length > 0, call `callback`   */  export const useCallbackWhenAnArrayPopulates = (    callback: () => void,    ...arrays: (readonly unknown[])[],  ) => {    //  const memoArrays = useMemo(() => arrays, arrays);    const prevArrays = useRef(arrays);      useEffect(() => {      if (prevArrays.current.length !== arrays.length) {        throw 'Unexpected array length change in useCallbackWhenArraysPopulate';      }      if (        prevArrays.current.some(          (value, index) => !value.length && arrays[index]?.length,        )      ) {        callback();      }      prevArrays.current = arrays;    }, [arrays, callback]);  };  ```    I would like to memoise `arrays`, which comes from spreading arguments passed to the hook, so that the useEffect is only called when one of these arguments changes. Ideally I'd do this with `useMemo(() => arrays, arrays)`.    I know that [the dependency length for useMemo can't change](https://github.com/facebook/react/issues/18229), but though it's length is unknown, I would not expect it to change and prevent this from happening by throwing an error if it does.    Is it safe to use `useMemo(() => arrays, arrays)` in this case, and disable the lint warning?    Example usage:    https://codesandbox.io/s/nervous-glade-qt4x2?file=/src/Counters.js    (side note, not shown in this example are cases where the arrays could change together and you wouldn't want to call the callbacks twice when this happens)",
        "human_words": "I would like to memoize an array using `useMemo(() => x, x)`, where x.length is unknown but constant, and so think I have a legitimate use case to be able to disable the eslint warnings.    I can find similar issues to this, including https://github.com/facebook/react/issues/18229#issuecomment-619569632, but not one where the length of the dependencies is unknown but constant.    This code creates a warning  > React Hook useMemo has a missing dependency: 'x'. Either include it or remove the dependency array.    and  > React Hook useMemo was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.    Which links to an issue with the following comment  > If you ... aren't sure your case is legit, file a new issue.  https://github.com/facebook/react/issues/14920#issuecomment-472018817    My use case, without the useMemo, is as follows:        I would like to memoise `arrays`, which comes from spreading arguments passed to the hook, so that the useEffect is only called when one of these arguments changes. Ideally I'd do this with `useMemo(() => arrays, arrays)`.    I know that [the dependency length for useMemo can't change](https://github.com/facebook/react/issues/18229), but though it's length is unknown, I would not expect it to change and prevent this from happening by throwing an error if it does.    Is it safe to use `useMemo(() => arrays, arrays)` in this case, and disable the lint warning?    Example usage:    https://codesandbox.io/s/nervous-glade-qt4x2?file=/src/Counters.js    (side note, not shown in this example are cases where the arrays could change together and you wouldn't want to call the callbacks twice when this happens)",
        "human_words_regrex": "I would like to memoize an array using `useMemo(() => x, x)`, where x.length is unknown but constant, and so think I have a legitimate use case to be able to disable the eslint warnings. I can find similar issues to this, including  but not one where the length of the dependencies is unknown but constant. This code creates a warning > React Hook useMemo has a missing dependency: 'x'. Either include it or remove the dependency array. and > React Hook useMemo was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies. Which links to an issue with the following comment > If you ... aren't sure your case is legit, file a new issue.  My use case, without the useMemo, is as follows: I would like to memoise `arrays`, which comes from spreading arguments passed to the hook, so that the useEffect is only called when one of these arguments changes. Ideally I'd do this with `useMemo(() => arrays, arrays)`. I know that , but though it's length is unknown, I would not expect it to change and prevent this from happening by throwing an error if it does. Is it safe to use `useMemo(() => arrays, arrays)` in this case, and disable the lint warning? Example usage:  (side note, not shown in this example are cases where the arrays could change together and you wouldn't want to call the callbacks twice when this happens)",
        "human_words_stopwords_removal_lemmatization": "would like memoize array using ` usememo ( ( ) = > x , x ) ` , x.length unknown constant , think legitimate use case able disable eslint warning . find similar issue , including one length dependency unknown constant . code creates warning > react hook usememo missing dependency : ' x ' . either include remove dependency array . > react hook usememo passed dependency list array literal . mean ca n't statically verify whether 've passed correct dependency . link issue following comment > ... n't sure case legit , file new issue . use case , without usememo , follows : would like memoise ` array ` , come spreading argument passed hook , useeffect called one argument change . ideally 'd ` usememo ( ( ) = > array , array ) ` . know , though 's length unknown , would expect change prevent happening throwing error . safe use ` usememo ( ( ) = > array , array ) ` case , disable lint warning ? example usage : ( side note , shown example case array could change together would n't want call callback twice happens )",
        "title_stopwords_removal_lemmatization": "react-hooks/exhaustive-deps usememo ( ( ) = > x , x )"
    },
    {
        "issue_id": 1126520438,
        "title": "Mechanism to customize rendering of state/props data types",
        "label": [
            "Type: Feature Request",
            "Component: Developer Tools"
        ],
        "date": "2022-02-07T21:30:53Z",
        "status": "open",
        "description": "When using React from transpiled languages, the way KeyValue.js renders state/props entries is pretty unusable for non-primitive types (int/string).  \r\n\r\nI was hoping dev-tools could check for existence of a function on Props/State (or some other mechanism, maybe toStringTag) that would allow app developer to provide a custom display for each entry in the Props/State.  If you provide a custom formatter, you give up the ability to edit those fields.",
        "remove_template_description": "When using React from transpiled languages, the way KeyValue.js renders state/props entries is pretty unusable for non-primitive types (int/string).      I was hoping dev-tools could check for existence of a function on Props/State (or some other mechanism, maybe toStringTag) that would allow app developer to provide a custom display for each entry in the Props/State.  If you provide a custom formatter, you give up the ability to edit those fields.",
        "human_words": "When using React from transpiled languages, the way KeyValue.js renders state/props entries is pretty unusable for non-primitive types (int/string).      I was hoping dev-tools could check for existence of a function on Props/State (or some other mechanism, maybe toStringTag) that would allow app developer to provide a custom display for each entry in the Props/State.  If you provide a custom formatter, you give up the ability to edit those fields.",
        "human_words_regrex": "When using React from transpiled languages, the way KeyValue.js renders state/props entries is pretty unusable for non-primitive types (int/string). I was hoping dev-tools could check for existence of a function on Props/State (or some other mechanism, maybe toStringTag) that would allow app developer to provide a custom display for each entry in the Props/State. If you provide a custom formatter, you give up the ability to edit those fields.",
        "human_words_stopwords_removal_lemmatization": "using react transpiled language , way keyvalue.js render state/props entry pretty unusable non-primitive type ( int/string ) . hoping dev-tools could check existence function props/state ( mechanism , maybe tostringtag ) would allow app developer provide custom display entry props/state . provide custom formatter , give ability edit field .",
        "title_stopwords_removal_lemmatization": "mechanism customize rendering state/props data type"
    },
    {
        "issue_id": 1120865231,
        "title": "[DevTools Bug]: Debugging on separate device is not working, because devtools provide websocket address of localhost",
        "label": [
            "Type: Feature Request",
            "Component: Developer Tools"
        ],
        "date": "2022-02-01T15:46:50Z",
        "status": "open",
        "description": "### Website or app\n\nhttps://github.com/fehergeri13/devtool-test\n\n### Repro steps\n\n## Steps to reproduce\r\n - On my laptop on my local network\r\n   - Create a react app with `npx create-react-app@latest` and start it with `npm start`\r\n   - Run the devtool with `npx react-devtools`\r\n   - Add the script the `<script src=\"http://192.168.1.149:8097\"></script>` to the `public/index.html`\r\n - On my tablet with the same local network\r\n   - Open the website on my tablet in safari  with the corresponding ip address: `192.168.1.149:3000`\r\n - On my laptop\r\n   - Devtool still not connected\r\n\r\n## Workaround:\r\n\r\nI copied the complete source of the `http://192.168.1.149:8097` into a js file, imported it in the header, and replaced the `localhost` on the last line of the file with the ip address of my laptop, and it was working.\r\n\r\n\r\n![proof1](https://user-images.githubusercontent.com/7180398/152001120-03f6ff56-84e3-4499-9053-31b74a976f64.png)\r\n![proof2](https://user-images.githubusercontent.com/7180398/152001128-011a0621-ab47-4288-b193-af109535a5df.png)\r\n\r\n\n\n### How often does this bug happen?\n\nEvery time\n\n### DevTools package (automated)\n\n_No response_\n\n### DevTools version (automated)\n\n_No response_\n\n### Error message (automated)\n\n_No response_\n\n### Error call stack (automated)\n\n_No response_\n\n### Error component stack (automated)\n\n_No response_\n\n### GitHub query string (automated)\n\n_No response_",
        "remove_template_description": "https://github.com/fehergeri13/devtool-test    ## Steps to reproduce   - On my laptop on my local network     - Create a react app with `npx create-react-app@latest` and start it with `npm start`     - Run the devtool with `npx react-devtools`     - Add the script the `<script src=\"http://192.168.1.149:8097\"></script>` to the `public/index.html`   - On my tablet with the same local network     - Open the website on my tablet in safari  with the corresponding ip address: `192.168.1.149:3000`   - On my laptop     - Devtool still not connected    ## Workaround:    I copied the complete source of the `http://192.168.1.149:8097` into a js file, imported it in the header, and replaced the `localhost` on the last line of the file with the ip address of my laptop, and it was working.      ![proof1](https://user-images.githubusercontent.com/7180398/152001120-03f6ff56-84e3-4499-9053-31b74a976f64.png)  ![proof2](https://user-images.githubusercontent.com/7180398/152001128-011a0621-ab47-4288-b193-af109535a5df.png)        Every time    __    __    __    __    __    __",
        "human_words": "https://github.com/fehergeri13/devtool-test    ## Steps to reproduce   - On my laptop on my local network     - Create a react app with `npx create-react-app@latest` and start it with `npm start`     - Run the devtool with `npx react-devtools`     - Add the script the `<script src=\"http://192.168.1.149:8097\"></script>` to the `public/index.html`   - On my tablet with the same local network     - Open the website on my tablet in safari  with the corresponding ip address: `192.168.1.149:3000`   - On my laptop     - Devtool still not connected    ## Workaround:    I copied the complete source of the `http://192.168.1.149:8097` into a js file, imported it in the header, and replaced the `localhost` on the last line of the file with the ip address of my laptop, and it was working.      ![proof1](https://user-images.githubusercontent.com/7180398/152001120-03f6ff56-84e3-4499-9053-31b74a976f64.png)  ![proof2](https://user-images.githubusercontent.com/7180398/152001128-011a0621-ab47-4288-b193-af109535a5df.png)        Every time    __    __    __    __    __    __",
        "human_words_regrex": " ## Steps to reproduce - On my laptop on my local network - Create a react app with `npx create-react-app@latest` and start it with `npm start` - Run the devtool with `npx react-devtools` - Add the script the `<script src=\" to the `public/index.html` - On my tablet with the same local network - Open the website on my tablet in safari with the corresponding ip address: `192.168.1.149:3000` - On my laptop - Devtool still not connected ## Workaround: I copied the complete source of the ` into a js file, imported it in the header, and replaced the `localhost` on the last line of the file with the ip address of my laptop, and it was working. ! ! Every time __ __ __ __ __ __",
        "human_words_stopwords_removal_lemmatization": "# # step reproduce - laptop local network - create react app ` npx create-react-app @ latest ` start ` npm start ` - run devtool ` npx react-devtools ` - add script ` < script src= '' ` public/index.html ` - tablet local network - open website tablet safari corresponding ip address : ` 192.168.1.149:3000 ` - laptop - devtool still connected # # workaround : copied complete source ` j file , imported header , replaced ` localhost ` last line file ip address laptop , working . ! ! every time __ __ __ __ __ __",
        "title_stopwords_removal_lemmatization": "[ devtools bug ] : debugging separate device working , devtools provide websocket address localhost"
    },
    {
        "issue_id": 1116718129,
        "title": "Profiler should support importing profiles without React being connected",
        "label": [
            "Type: Feature Request",
            "Component: Developer Tools"
        ],
        "date": "2022-01-27T20:42:12Z",
        "status": "open",
        "description": "A user has reported frustrations with being unable to import a profile/trace into React DevTools when no app was connected. (This applies to both the browser extension (React DOM) and standalone DevTools (React Native).\r\n\r\nWhile the UX for this ask is clear enough, we should consider the following:\r\n* Browser extension: Is it confusing to change React DevTools to show for non-React websites?\r\n* Standalone: Where will we show the connection instructions if we show the DevTools UI? (The splash UI is usually a page of instructions on how to connect.)\r\n* Does anything else break when the UI is shown without at least one connected renderer?",
        "remove_template_description": "A user has reported frustrations with being unable to import a profile/trace into React DevTools when no app was connected. (This applies to both the browser extension (React DOM) and standalone DevTools (React Native).    While the UX for this ask is clear enough, we should consider the following:  * Browser extension: Is it confusing to change React DevTools to show for non-React websites?  * Standalone: Where will we show the connection instructions if we show the DevTools UI? (The splash UI is usually a page of instructions on how to connect.)  * Does anything else break when the UI is shown without at least one connected renderer?",
        "human_words": "A user has reported frustrations with being unable to import a profile/trace into React DevTools when no app was connected. (This applies to both the browser extension (React DOM) and standalone DevTools (React Native).    While the UX for this ask is clear enough, we should consider the following:  * Browser extension: Is it confusing to change React DevTools to show for non-React websites?  * Standalone: Where will we show the connection instructions if we show the DevTools UI? (The splash UI is usually a page of instructions on how to connect.)  * Does anything else break when the UI is shown without at least one connected renderer?",
        "human_words_regrex": "A user has reported frustrations with being unable to import a profile/trace into React DevTools when no app was connected. (This applies to both the browser extension (React DOM) and standalone DevTools (React Native). While the UX for this ask is clear enough, we should consider the following: * Browser extension: Is it confusing to change React DevTools to show for non-React websites? * Standalone: Where will we show the connection instructions if we show the DevTools UI? (The splash UI is usually a page of instructions on how to connect.) * Does anything else break when the UI is shown without at least one connected renderer?",
        "human_words_stopwords_removal_lemmatization": "user reported frustration unable import profile/trace react devtools app connected . ( applies browser extension ( react dom ) standalone devtools ( react native ) . ux ask clear enough , consider following : * browser extension : confusing change react devtools show non-react website ? * standalone : show connection instruction show devtools ui ? ( splash ui usually page instruction connect . ) * anything else break ui shown without least one connected renderer ?",
        "title_stopwords_removal_lemmatization": "profiler support importing profile without react connected"
    },
    {
        "issue_id": 954160846,
        "title": "Bug: `onResize` media event is missing",
        "label": [
            "Type: Feature Request",
            "Component: DOM"
        ],
        "date": "2021-07-27T18:34:14Z",
        "status": "closed",
        "description": "Note: I\u2019m happy to make a pull request to fix this, I just wanted to log it first to ensure there\u2019s interest.\r\n\r\n---\r\n\r\nReact\u2019s [synthetic media events](https://reactjs.org/docs/events.html#media-events) contain several [existing media events](https://html.spec.whatwg.org/multipage/media.html#mediaevents), for instance `onLoadedMetadata` and `onVolumeChange`. But there is no `onResize` handler.\r\n\r\n[`resize` is a standard media event](https://html.spec.whatwg.org/multipage/media.html#event-media-resize) that triggers when one or both of the `videoWidth` and `videoHeight` attributes have just been updated. It\u2019s useful for responding to resolution changes in video players.\r\n\r\nReact version: 17.0.2 (latest release as of initial issue report)\r\n\r\n## Steps To Reproduce\r\n\r\n1. Create a `<video>` element with an `onResize` prop.\r\n2. Check the console for the following warning:\r\n\r\n```\r\n Warning: Unknown event handler property `onResize`. It will be ignored.\r\n```\r\n\r\nLink to code example: https://codesandbox.io/s/musing-snowflake-zb0qh?file=/src/App.js\r\n\r\n## The current behavior\r\n\r\n`onResize` handlers are ignored on `<video>` elements.\r\n\r\n## The expected behavior\r\n\r\n`onResize` handlers are valid on `<video>` elements.",
        "remove_template_description": "Note: I\u2019m happy to make a pull request to fix this, I just wanted to log it first to ensure there\u2019s interest.    ---    React\u2019s [synthetic media events](https://reactjs.org/docs/events.html#media-events) contain several [existing media events](https://html.spec.whatwg.org/multipage/media.html#mediaevents), for instance `onLoadedMetadata` and `onVolumeChange`. But there is no `onResize` handler.    [`resize` is a standard media event](https://html.spec.whatwg.org/multipage/media.html#event-media-resize) that triggers when one or both of the `videoWidth` and `videoHeight` attributes have just been updated. It\u2019s useful for responding to resolution changes in video players.    React version: 17.0.2 (latest release as of initial issue report)        1. Create a `<video>` element with an `onResize` prop.  2. Check the console for the following warning:    ```   Warning: Unknown event handler property `onResize`. It will be ignored.  ```    Link to code example: https://codesandbox.io/s/musing-snowflake-zb0qh?file=/src/App.js        `onResize` handlers are ignored on `<video>` elements.        `onResize` handlers are valid on `<video>` elements.",
        "human_words": "Note: I\u2019m happy to make a pull request to fix this, I just wanted to log it first to ensure there\u2019s interest.    ---    React\u2019s [synthetic media events](https://reactjs.org/docs/events.html#media-events) contain several [existing media events](https://html.spec.whatwg.org/multipage/media.html#mediaevents), for instance `onLoadedMetadata` and `onVolumeChange`. But there is no `onResize` handler.    [`resize` is a standard media event](https://html.spec.whatwg.org/multipage/media.html#event-media-resize) that triggers when one or both of the `videoWidth` and `videoHeight` attributes have just been updated. It\u2019s useful for responding to resolution changes in video players.    React version: 17.0.2 (latest release as of initial issue report)        1. Create a `<video>` element with an `onResize` prop.  2. Check the console for the following warning:        Link to code example: https://codesandbox.io/s/musing-snowflake-zb0qh?file=/src/App.js        `onResize` handlers are ignored on `<video>` elements.        `onResize` handlers are valid on `<video>` elements.",
        "human_words_regrex": "Note: I\u2019m happy to make a pull request to fix this, I just wanted to log it first to ensure there\u2019s interest. --- React\u2019s  contain several , for instance `onLoadedMetadata` and `onVolumeChange`. But there is no `onResize` handler.  that triggers when one or both of the `videoWidth` and `videoHeight` attributes have just been updated. It\u2019s useful for responding to resolution changes in video players. React version: 17.0.2 (latest release as of initial issue report) 1. Create a `` element with an `onResize` prop. 2. Check the console for the following warning: Link to code example:  `onResize` handlers are ignored on `` elements. `onResize` handlers are valid on `` elements.",
        "human_words_stopwords_removal_lemmatization": "note : \u2019 happy make pull request fix , wanted log first ensure \u2019 interest . -- - react \u2019 contain several , instance ` onloadedmetadata ` ` onvolumechange ` . ` onresize ` handler . trigger one ` videowidth ` ` videoheight ` attribute updated . \u2019 useful responding resolution change video player . react version : 17.0.2 ( latest release initial issue report ) 1. create `` element ` onresize ` prop . 2. check console following warning : link code example : ` onresize ` handler ignored `` element . ` onresize ` handler valid `` element .",
        "title_stopwords_removal_lemmatization": "bug : ` onresize ` medium event missing"
    },
    {
        "issue_id": 908452483,
        "title": "[eslint-plugin-react-hooks] New Rule Proposal: `no-unnecessary-setstate `",
        "label": [
            "Type: Feature Request",
            "Status: Unconfirmed",
            "Component: ESLint Rules"
        ],
        "date": "2021-06-01T15:58:17Z",
        "status": "open",
        "description": "Hi there!\r\n\r\nFirst of all, again want to extend thanks for your tireless work on creating this amazing library and supporting the ecosystem! Really big up to everyone involved! \ud83d\udcaf \ud83d\ude4c\r\n\r\nI wanted to see if the `eslint-plugin-react-hooks` project would accept a new rule: `no-unnecessary-setstate`.\r\n\r\nI have the feeling that this may be too opinionated for the plugin, but I was sent here by ljharb from `eslint-plugin-react` after proposing it over there: https://github.com/yannickcr/eslint-plugin-react/issues/2997\r\n\r\n---\r\n\r\nAnyway, here goes:\r\n\r\n**Rule proposal:** `no-unnecessary-setstate` - forbid setting state to the value of the existing state variable\r\n\r\nI've seen this pattern also a bunch from beginners learning React. And regardless of whether you're a beginner or not, this is probably not what you want to do (even if it's an object / array).\r\n\r\nExample of **incorrect** code:\r\n\r\n```jsx\r\nfunction Input (props) {\r\n  const [name, setName] = useState('');\t\r\n\r\n  return (\r\n    <input\r\n      value={name}\r\n      onChange={(event) => {\r\n        setName(event.currentTarget.value);\r\n        setName(name); // ESLint problem reported\r\n      }}\r\n    />\r\n  );\r\n}\r\n```\r\n\r\nExamples of **correct** code:\r\n\r\n```jsx\r\nfunction Input (props) {\r\n  const [name, setName] = useState('');\t\r\n\r\n  return (\r\n    <input\r\n      value={name}\r\n      onChange={(event) => {\r\n        setName(event.currentTarget.value);\r\n      }}\r\n    />\r\n  );\r\n}\r\n```\r\n\r\n```jsx\r\nfunction Input (props) {\r\n  const [name, setName] = useState('');\t\r\n\r\n  return (\r\n    <input\r\n      value={name}\r\n      onChange={(event) => {\r\n        const name = event.currentTarget.value; // Shadowing\r\n        setName(name);\r\n      }}\r\n    />\r\n  );\r\n}\r\n```\r\n\r\n---\r\n\r\ncc @gaearon ",
        "remove_template_description": "Hi there!    First of all, again want to extend thanks for your tireless work on creating this amazing library and supporting the ecosystem! Really big up to everyone involved! \ud83d\udcaf \ud83d\ude4c    I wanted to see if the `eslint-plugin-react-hooks` project would accept a new rule: `no-unnecessary-setstate`.    I have the feeling that this may be too opinionated for the plugin, but I was sent here by ljharb from `eslint-plugin-react` after proposing it over there: https://github.com/yannickcr/eslint-plugin-react/issues/2997    ---    Anyway, here goes:    **Rule proposal:** `no-unnecessary-setstate` - forbid setting state to the value of the existing state variable    I've seen this pattern also a bunch from beginners learning React. And regardless of whether you're a beginner or not, this is probably not what you want to do (even if it's an object / array).    Example of **incorrect** code:    ```jsx  function Input (props) {    const [name, setName] = useState('');\t      return (      <input        value={name}        onChange={(event) => {          setName(event.currentTarget.value);          setName(name); // ESLint problem reported        }}      />    );  }  ```    Examples of **correct** code:    ```jsx  function Input (props) {    const [name, setName] = useState('');\t      return (      <input        value={name}        onChange={(event) => {          setName(event.currentTarget.value);        }}      />    );  }  ```    ```jsx  function Input (props) {    const [name, setName] = useState('');\t      return (      <input        value={name}        onChange={(event) => {          const name = event.currentTarget.value; // Shadowing          setName(name);        }}      />    );  }  ```    ---    cc @gaearon",
        "human_words": "Hi there!    First of all, again want to extend thanks for your tireless work on creating this amazing library and supporting the ecosystem! Really big up to everyone involved! \ud83d\udcaf \ud83d\ude4c    I wanted to see if the `eslint-plugin-react-hooks` project would accept a new rule: `no-unnecessary-setstate`.    I have the feeling that this may be too opinionated for the plugin, but I was sent here by ljharb from `eslint-plugin-react` after proposing it over there: https://github.com/yannickcr/eslint-plugin-react/issues/2997    ---    Anyway, here goes:    **Rule proposal:** `no-unnecessary-setstate` - forbid setting state to the value of the existing state variable    I've seen this pattern also a bunch from beginners learning React. And regardless of whether you're a beginner or not, this is probably not what you want to do (even if it's an object / array).    Example of **incorrect** code:        Examples of **correct** code:            ---    cc @gaearon",
        "human_words_regrex": "Hi there! First of all, again want to extend thanks for your tireless work on creating this amazing library and supporting the ecosystem! Really big up to everyone involved! \ud83d\udcaf \ud83d\ude4c I wanted to see if the `eslint-plugin-react-hooks` project would accept a new rule: `no-unnecessary-setstate`. I have the feeling that this may be too opinionated for the plugin, but I was sent here by ljharb from `eslint-plugin-react` after proposing it over there:  --- Anyway, here goes: **Rule proposal:** `no-unnecessary-setstate` - forbid setting state to the value of the existing state variable I've seen this pattern also a bunch from beginners learning React. And regardless of whether you're a beginner or not, this is probably not what you want to do (even if it's an object / array). Example of **incorrect** code: Examples of **correct** code: --- cc @gaearon",
        "human_words_stopwords_removal_lemmatization": "hi ! first , want extend thanks tireless work creating amazing library supporting ecosystem ! really big everyone involved ! \ud83d\udcaf \ud83d\ude4c wanted see ` eslint-plugin-react-hooks ` project would accept new rule : ` no-unnecessary-setstate ` . feeling may opinionated plugin , sent ljharb ` eslint-plugin-react ` proposing : -- - anyway , go : * * rule proposal : * * ` no-unnecessary-setstate ` - forbid setting state value existing state variable 've seen pattern also bunch beginner learning react . regardless whether 're beginner , probably want ( even 's object / array ) . example * * incorrect * * code : example * * correct * * code : -- - cc @ gaearon",
        "title_stopwords_removal_lemmatization": "[ eslint-plugin-react-hooks ] new rule proposal : ` no-unnecessary-setstate `"
    },
    {
        "issue_id": 816523025,
        "title": "Component summary view by type",
        "label": [
            "Type: Feature Request",
            "Component: Developer Tools",
            "Resolution: Stale"
        ],
        "date": "2021-02-25T15:06:29Z",
        "status": "open",
        "description": "A DevTools user has requested the following feature (reworded by me):\r\nExpose an ordered table of all component types (names) along with the number of instances currently mounted. This would help identify the most impactful components to examine for memory related optimizations.\r\n\r\nThe Profiler isn't very useful in this scenario because it's too CPU-centric.\r\n\r\ncc @yungsters",
        "remove_template_description": "A DevTools user has requested the following feature (reworded by me):  Expose an ordered table of all component types (names) along with the number of instances currently mounted. This would help identify the most impactful components to examine for memory related optimizations.    The Profiler isn't very useful in this scenario because it's too CPU-centric.    cc @yungsters",
        "human_words": "A DevTools user has requested the following feature (reworded by me):  Expose an ordered table of all component types (names) along with the number of instances currently mounted. This would help identify the most impactful components to examine for memory related optimizations.    The Profiler isn't very useful in this scenario because it's too CPU-centric.    cc @yungsters",
        "human_words_regrex": "A DevTools user has requested the following feature (reworded by me): Expose an ordered table of all component types (names) along with the number of instances currently mounted. This would help identify the most impactful components to examine for memory related optimizations. The Profiler isn't very useful in this scenario because it's too CPU-centric. cc @yungsters",
        "human_words_stopwords_removal_lemmatization": "devtools user requested following feature ( reworded ) : expose ordered table component type ( name ) along number instance currently mounted . would help identify impactful component examine memory related optimization . profiler n't useful scenario 's cpu-centric . cc @ yungsters",
        "title_stopwords_removal_lemmatization": "component summary view type"
    },
    {
        "issue_id": 804990966,
        "title": "Scheduling profiler feedback",
        "label": [
            "Type: Feature Request",
            "Component: Developer Tools"
        ],
        "date": "2021-02-09T22:49:55Z",
        "status": "open",
        "description": "Some of this might not be possible or might be prohibitively difficult, but this was some user feedback/requests for the scheduling profiler:\r\n* Show lane labels instead of bitmap index\r\n* On hover for a batch of render work highlight update events that were related to that render batch\r\n* Show when tasks are scheduled (in the scheduler, any JavaScript, not just React\r\n* Find-in-page that shows number of results like Chrome and updates as you zoom and scroll\r\n* Show lane(s) state update get associated with in chart tooltip\r\n* Highlight batched updates on hover (hovering one item would update others)",
        "remove_template_description": "Some of this might not be possible or might be prohibitively difficult, but this was some user feedback/requests for the scheduling profiler:  * Show lane labels instead of bitmap index  * On hover for a batch of render work highlight update events that were related to that render batch  * Show when tasks are scheduled (in the scheduler, any JavaScript, not just React  * Find-in-page that shows number of results like Chrome and updates as you zoom and scroll  * Show lane(s) state update get associated with in chart tooltip  * Highlight batched updates on hover (hovering one item would update others)",
        "human_words": "Some of this might not be possible or might be prohibitively difficult, but this was some user feedback/requests for the scheduling profiler:  * Show lane labels instead of bitmap index  * On hover for a batch of render work highlight update events that were related to that render batch  * Show when tasks are scheduled (in the scheduler, any JavaScript, not just React  * Find-in-page that shows number of results like Chrome and updates as you zoom and scroll  * Show lane(s) state update get associated with in chart tooltip  * Highlight batched updates on hover (hovering one item would update others)",
        "human_words_regrex": "Some of this might not be possible or might be prohibitively difficult, but this was some user feedback/requests for the scheduling profiler: * Show lane labels instead of bitmap index * On hover for a batch of render work highlight update events that were related to that render batch * Show when tasks are scheduled (in the scheduler, any JavaScript, not just React * Find-in-page that shows number of results like Chrome and updates as you zoom and scroll * Show lane(s) state update get associated with in chart tooltip * Highlight batched updates on hover (hovering one item would update others)",
        "human_words_stopwords_removal_lemmatization": "might possible might prohibitively difficult , user feedback/requests scheduling profiler : * show lane label instead bitmap index * hover batch render work highlight update event related render batch * show task scheduled ( scheduler , javascript , react * find-in-page show number result like chrome update zoom scroll * show lane ( ) state update get associated chart tooltip * highlight batched update hover ( hovering one item would update others )",
        "title_stopwords_removal_lemmatization": "scheduling profiler feedback"
    },
    {
        "issue_id": 772076734,
        "title": "Bug: BigInt does not get toString()'d when rendered",
        "label": [
            "Type: Feature Request",
            "Component: DOM",
            "Status: Unconfirmed"
        ],
        "date": "2020-12-21T11:06:39Z",
        "status": "open",
        "description": "<div>{1n}</div> should render 1. Instead it renders ''.  \r\n\r\nIt looks like 'bigint' just needs adding here: https://github.com/facebook/react/blob/master/packages/react-dom/src/client/ToStringValue.js#L26. \r\n\r\nHappy to raise a PR or take guidance on a better approach.\r\n\r\nReact version: all\r\n\r\n## Steps To Reproduce\r\nLink to code example: https://codepen.io/boyne/pen/vYXJWVr\r\n\r\n\r\n## The current behavior\r\nRenders \"\"\r\n\r\n\r\n## The expected behavior\r\nRenders 1\r\n",
        "remove_template_description": "<div>{1n}</div> should render 1. Instead it renders ''.      It looks like 'bigint' just needs adding here: https://github.com/facebook/react/blob/master/packages/react-dom/src/client/ToStringValue.js#L26.     Happy to raise a PR or take guidance on a better approach.    React version: all      Link to code example: https://codepen.io/boyne/pen/vYXJWVr        Renders \"\"        Renders 1",
        "human_words": "<div>{1n}</div> should render 1. Instead it renders ''.      It looks like 'bigint' just needs adding here: https://github.com/facebook/react/blob/master/packages/react-dom/src/client/ToStringValue.js#L26.     Happy to raise a PR or take guidance on a better approach.    React version: all      Link to code example: https://codepen.io/boyne/pen/vYXJWVr        Renders \"\"        Renders 1",
        "human_words_regrex": "{1n} should render 1. Instead it renders ''. It looks like 'bigint' just needs adding here:  Happy to raise a PR or take guidance on a better approach. React version: all Link to code example:  Renders \"\" Renders 1",
        "human_words_stopwords_removal_lemmatization": "{ 1n } render 1. instead render `` . look like 'bigint ' need adding : happy raise pr take guidance better approach . react version : link code example : render `` '' render 1",
        "title_stopwords_removal_lemmatization": "bug : bigint get tostring ( ) 'd rendered"
    },
    {
        "issue_id": 765610427,
        "title": "Bug: react-devtools not working inside react based chrome extensions",
        "label": [
            "Type: Feature Request",
            "Component: Developer Tools",
            "Resolution: Expected Behavior"
        ],
        "date": "2020-12-13T19:26:42Z",
        "status": "closed",
        "description": "react-devtools not working inside react based chrome extensions\r\n\r\nReact version: 17.0.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. install react-devtools extension in chrome\r\n2. git clone https://github.com/lxieyang/chrome-extension-boilerplate-react\r\n3. cd into directory\r\n4. yarn install\r\n5. yarn build \r\n6. open chrome extensions page\r\n7. change to developer mode\r\n8. load unpacked, point to the directory build within chrome-extension-boilerplate-react directory\r\n9. click on react dev tools extension\r\n10. The following text is displayed \"This is a restricted browser page. React devtools cannot access this page.\"\r\n11. When inspecting the page, the tabs components and profiler are NOT shown\r\n\r\nLink to code example: https://github.com/lxieyang/chrome-extension-boilerplate-react\r\n\r\n## The current behavior\r\n1. When clicking on the react devtools chrome extension: \"This is a restricted browser page. React devtools cannot access this page.\"\r\n2. Also when inspecting the pages of the chrome extension, the tabs components and profiler are NOT shown\r\n\r\n## The expected behavior\r\n1. When clicking on the react devtools chrome extension: The devtools recognize that the page is using react\r\n2. when inspecting the pages of the chrome extension, the tabs components and profiler are shown and populated",
        "remove_template_description": "react-devtools not working inside react based chrome extensions    React version: 17.0.1        1. install react-devtools extension in chrome  2. git clone https://github.com/lxieyang/chrome-extension-boilerplate-react  3. cd into directory  4. yarn install  5. yarn build   6. open chrome extensions page  7. change to developer mode  8. load unpacked, point to the directory build within chrome-extension-boilerplate-react directory  9. click on react dev tools extension  10. The following text is displayed \"This is a restricted browser page. React devtools cannot access this page.\"  11. When inspecting the page, the tabs components and profiler are NOT shown    Link to code example: https://github.com/lxieyang/chrome-extension-boilerplate-react      1. When clicking on the react devtools chrome extension: \"This is a restricted browser page. React devtools cannot access this page.\"  2. Also when inspecting the pages of the chrome extension, the tabs components and profiler are NOT shown      1. When clicking on the react devtools chrome extension: The devtools recognize that the page is using react  2. when inspecting the pages of the chrome extension, the tabs components and profiler are shown and populated",
        "human_words": "react-devtools not working inside react based chrome extensions    React version: 17.0.1        1. install react-devtools extension in chrome  2. git clone https://github.com/lxieyang/chrome-extension-boilerplate-react  3. cd into directory  4. yarn install  5. yarn build   6. open chrome extensions page  7. change to developer mode  8. load unpacked, point to the directory build within chrome-extension-boilerplate-react directory  9. click on react dev tools extension  10. The following text is displayed \"This is a restricted browser page. React devtools cannot access this page.\"  11. When inspecting the page, the tabs components and profiler are NOT shown    Link to code example: https://github.com/lxieyang/chrome-extension-boilerplate-react      1. When clicking on the react devtools chrome extension: \"This is a restricted browser page. React devtools cannot access this page.\"  2. Also when inspecting the pages of the chrome extension, the tabs components and profiler are NOT shown      1. When clicking on the react devtools chrome extension: The devtools recognize that the page is using react  2. when inspecting the pages of the chrome extension, the tabs components and profiler are shown and populated",
        "human_words_regrex": "react-devtools not working inside react based chrome extensions React version: 17.0.1 1. install react-devtools extension in chrome 2. git clone  3. cd into directory 4. yarn install 5. yarn build 6. open chrome extensions page 7. change to developer mode 8. load unpacked, point to the directory build within chrome-extension-boilerplate-react directory 9. click on react dev tools extension 10. The following text is displayed \"This is a restricted browser page. React devtools cannot access this page.\" 11. When inspecting the page, the tabs components and profiler are NOT shown Link to code example:  1. When clicking on the react devtools chrome extension: \"This is a restricted browser page. React devtools cannot access this page.\" 2. Also when inspecting the pages of the chrome extension, the tabs components and profiler are NOT shown 1. When clicking on the react devtools chrome extension: The devtools recognize that the page is using react 2. when inspecting the pages of the chrome extension, the tabs components and profiler are shown and populated",
        "human_words_stopwords_removal_lemmatization": "react-devtools working inside react based chrome extension react version : 17.0.1 1. install react-devtools extension chrome 2. git clone 3. cd directory 4. yarn install 5. yarn build 6. open chrome extension page 7. change developer mode 8. load unpacked , point directory build within chrome-extension-boilerplate-react directory 9. click react dev tool extension 10. following text displayed `` restricted browser page . react devtools access page . '' 11. inspecting page , tab component profiler shown link code example : 1. clicking react devtools chrome extension : `` restricted browser page . react devtools access page . '' 2. also inspecting page chrome extension , tab component profiler shown 1. clicking react devtools chrome extension : devtools recognize page using react 2. inspecting page chrome extension , tab component profiler shown populated",
        "title_stopwords_removal_lemmatization": "bug : react-devtools working inside react based chrome extension"
    },
    {
        "issue_id": 762148789,
        "title": "Feature Request(devtools): `launch-editor` for selected component",
        "label": [
            "Type: Feature Request",
            "Component: Developer Tools"
        ],
        "date": "2020-12-11T09:37:45Z",
        "status": "closed",
        "description": "### Why: \r\n\r\nUser can open the source file in editor/ide by one-click.\r\n\r\nIt' is a useful feature in `vue-devtools`.\r\n\r\n---\r\n\r\n### How: \r\n\r\nAdd a click event on here:\r\n\r\nhttps://github.com/facebook/react/blob/cdfde3ae110844baf068706e7ed3fe97ec15f1d7/packages/react-devtools-shared/src/devtools/views/Components/InspectedElementView.js#L226-L228\r\n\r\ncall ```fetch(`/__open-in-editor?file=${fileName}:${lineNumber}`)```\r\n\r\nAdd [launch-editor-middleware](https://github.com/yyx990803/launch-editor) to dev-server(or any scaffold handle by himself)\r\n\r\n---\r\n\r\nBefore anyone(maybe me) sends a PR, I want to know how do the react-team thinks about it?",
        "remove_template_description": "### Why:     User can open the source file in editor/ide by one-click.    It' is a useful feature in `vue-devtools`.    ---    ### How:     Add a click event on here:    https://github.com/facebook/react/blob/cdfde3ae110844baf068706e7ed3fe97ec15f1d7/packages/react-devtools-shared/src/devtools/views/Components/InspectedElementView.js#L226-L228    call ```fetch(`/__open-in-editor?file=${fileName}:${lineNumber}`)```    Add [launch-editor-middleware](https://github.com/yyx990803/launch-editor) to dev-server(or any scaffold handle by himself)    ---    Before anyone(maybe me) sends a PR, I want to know how do the react-team thinks about it?",
        "human_words": "### Why:     User can open the source file in editor/ide by one-click.    It' is a useful feature in `vue-devtools`.    ---    ### How:     Add a click event on here:    https://github.com/facebook/react/blob/cdfde3ae110844baf068706e7ed3fe97ec15f1d7/packages/react-devtools-shared/src/devtools/views/Components/InspectedElementView.js#L226-L228    call     Add [launch-editor-middleware](https://github.com/yyx990803/launch-editor) to dev-server(or any scaffold handle by himself)    ---    Before anyone(maybe me) sends a PR, I want to know how do the react-team thinks about it?",
        "human_words_regrex": "### Why: User can open the source file in editor/ide by one-click. It' is a useful feature in `vue-devtools`. --- ### How: Add a click event on here:  call Add  to dev-server(or any scaffold handle by himself) --- Before anyone(maybe me) sends a PR, I want to know how do the react-team thinks about it?",
        "human_words_stopwords_removal_lemmatization": "# # # : user open source file editor/ide one-click . ' useful feature ` vue-devtools ` . -- - # # # : add click event : call add dev-server ( scaffold handle ) -- - anyone ( maybe ) sends pr , want know react-team think ?",
        "title_stopwords_removal_lemmatization": "feature request ( devtools ) : ` launch-editor ` selected component"
    },
    {
        "issue_id": 739323650,
        "title": "Feature suggestion: Allow custom list of hooks to ignore on exhaustive-deps",
        "label": [
            "Type: Feature Request",
            "Component: ESLint Rules"
        ],
        "date": "2020-11-09T20:01:11Z",
        "status": "open",
        "description": "The `exhaustive-deps` lint rule doesn't require setters from `useState`, dispatch from `useReducer`, and refs from `useRef` in dependencies, because we know for sure those will never change. I'd like to be able to add additional custom hooks to that \"safe list\". I understand this is potentially very dangerous, but we have a handful of hooks that simply wrap `useRef` with some logic. The returned result is essentially just a `useRef` result, so it's perfectly safe to ignore as a dependency.\r\n\r\nI'm imagining something like this in the eslint config:\r\n\r\n```\r\n{\r\n  \"rules\": {\r\n    // ...\r\n    \"react-hooks/exhaustive-deps\": [\"warn\", {\r\n      \"safeHooks\": \"(useRefWrapper|useOtherRefWrapper)\"\r\n    }]\r\n  }\r\n}\r\n```\r\n\r\nWhere `useRefWrapper` might look like so:\r\n\r\n```\r\nconst useRefWrapper = () => {\r\n  const ref = useRef();\r\n  if (ref.current) {\r\n    console.log('hi!');\r\n  }\r\n  return ref;\r\n}\r\n```\r\n\r\nDoes this seem like a reasonable option, assuming the documentation has a clear caveat mentioning the dangers? If so, I'm happy to work on implementation.",
        "remove_template_description": "The `exhaustive-deps` lint rule doesn't require setters from `useState`, dispatch from `useReducer`, and refs from `useRef` in dependencies, because we know for sure those will never change. I'd like to be able to add additional custom hooks to that \"safe list\". I understand this is potentially very dangerous, but we have a handful of hooks that simply wrap `useRef` with some logic. The returned result is essentially just a `useRef` result, so it's perfectly safe to ignore as a dependency.    I'm imagining something like this in the eslint config:    ```  {    \"rules\": {      // ...      \"react-hooks/exhaustive-deps\": [\"warn\", {        \"safeHooks\": \"(useRefWrapper|useOtherRefWrapper)\"      }]    }  }  ```    Where `useRefWrapper` might look like so:    ```  const useRefWrapper = () => {    const ref = useRef();    if (ref.current) {      console.log('hi!');    }    return ref;  }  ```    Does this seem like a reasonable option, assuming the documentation has a clear caveat mentioning the dangers? If so, I'm happy to work on implementation.",
        "human_words": "The `exhaustive-deps` lint rule doesn't require setters from `useState`, dispatch from `useReducer`, and refs from `useRef` in dependencies, because we know for sure those will never change. I'd like to be able to add additional custom hooks to that \"safe list\". I understand this is potentially very dangerous, but we have a handful of hooks that simply wrap `useRef` with some logic. The returned result is essentially just a `useRef` result, so it's perfectly safe to ignore as a dependency.    I'm imagining something like this in the eslint config:        Where `useRefWrapper` might look like so:        Does this seem like a reasonable option, assuming the documentation has a clear caveat mentioning the dangers? If so, I'm happy to work on implementation.",
        "human_words_regrex": "The `exhaustive-deps` lint rule doesn't require setters from `useState`, dispatch from `useReducer`, and refs from `useRef` in dependencies, because we know for sure those will never change. I'd like to be able to add additional custom hooks to that \"safe list\". I understand this is potentially very dangerous, but we have a handful of hooks that simply wrap `useRef` with some logic. The returned result is essentially just a `useRef` result, so it's perfectly safe to ignore as a dependency. I'm imagining something like this in the eslint config: Where `useRefWrapper` might look like so: Does this seem like a reasonable option, assuming the documentation has a clear caveat mentioning the dangers? If so, I'm happy to work on implementation.",
        "human_words_stopwords_removal_lemmatization": "` exhaustive-deps ` lint rule n't require setter ` usestate ` , dispatch ` usereducer ` , ref ` useref ` dependency , know sure never change . 'd like able add additional custom hook `` safe list '' . understand potentially dangerous , handful hook simply wrap ` useref ` logic . returned result essentially ` useref ` result , 's perfectly safe ignore dependency . 'm imagining something like eslint config : ` userefwrapper ` might look like : seem like reasonable option , assuming documentation clear caveat mentioning danger ? , 'm happy work implementation .",
        "title_stopwords_removal_lemmatization": "feature suggestion : allow custom list hook ignore exhaustive-deps"
    },
    {
        "issue_id": 728256832,
        "title": "Feature Request: Adding filter (search) to react DevTools Profiler",
        "label": [
            "Type: Feature Request",
            "Component: Developer Tools"
        ],
        "date": "2020-10-23T14:17:15Z",
        "status": "open",
        "description": "A few months ago, we added a tooltip to react DevTools Profiler (cc @bvaughn), so that for very small components, without clicking on them it is possible to see an overview of why they are re-rendered.\r\nHowever, still, for a not very big page, there can be tens of re-renders, so it is hard to find the component that you are looking for.\r\n\r\nAn easy solution for this to add some search bar, where the user can type down the name of the component, and find the component. \r\n\r\nIf this is something that you think we care about, I can pick it up and add the search field. \r\n\r\n<img src=\"https://user-images.githubusercontent.com/28848972/97014068-25bf7680-154a-11eb-8ba3-a07dd7a45d45.png\" width=\"250\">\r\n\r\n",
        "remove_template_description": "A few months ago, we added a tooltip to react DevTools Profiler (cc @bvaughn), so that for very small components, without clicking on them it is possible to see an overview of why they are re-rendered.  However, still, for a not very big page, there can be tens of re-renders, so it is hard to find the component that you are looking for.    An easy solution for this to add some search bar, where the user can type down the name of the component, and find the component.     If this is something that you think we care about, I can pick it up and add the search field.     <img src=\"https://user-images.githubusercontent.com/28848972/97014068-25bf7680-154a-11eb-8ba3-a07dd7a45d45.png\" width=\"250\">",
        "human_words": "A few months ago, we added a tooltip to react DevTools Profiler (cc @bvaughn), so that for very small components, without clicking on them it is possible to see an overview of why they are re-rendered.  However, still, for a not very big page, there can be tens of re-renders, so it is hard to find the component that you are looking for.    An easy solution for this to add some search bar, where the user can type down the name of the component, and find the component.     If this is something that you think we care about, I can pick it up and add the search field.     <img src=\"https://user-images.githubusercontent.com/28848972/97014068-25bf7680-154a-11eb-8ba3-a07dd7a45d45.png\" width=\"250\">",
        "human_words_regrex": "A few months ago, we added a tooltip to react DevTools Profiler (cc @bvaughn), so that for very small components, without clicking on them it is possible to see an overview of why they are re-rendered. However, still, for a not very big page, there can be tens of re-renders, so it is hard to find the component that you are looking for. An easy solution for this to add some search bar, where the user can type down the name of the component, and find the component. If this is something that you think we care about, I can pick it up and add the search field. ",
        "human_words_stopwords_removal_lemmatization": "month ago , added tooltip react devtools profiler ( cc @ bvaughn ) , small component , without clicking possible see overview re-rendered . however , still , big page , ten re-renders , hard find component looking . easy solution add search bar , user type name component , find component . something think care , pick add search field .",
        "title_stopwords_removal_lemmatization": "feature request : adding filter ( search ) react devtools profiler"
    },
    {
        "issue_id": 726301702,
        "title": "Feature request: A useLayoutEffect with read/write batching across a tree",
        "label": [
            "Type: Feature Request",
            "Component: Reconciler",
            "Component: Hooks"
        ],
        "date": "2020-10-21T09:24:35Z",
        "status": "open",
        "description": "Today, `useLayoutEffect` can be used for synchronous read/writes across the DOM.\r\n\r\n```javascript\r\nuseLayoutEffect(() => {\r\n  // Write\r\n  ref.current.style.transform = \"\"\r\n\r\n  // Read\r\n  const box = ref.current.getBoundingClientRect()\r\n})\r\n```\r\n\r\nFor a single instance of a single component, this works well. But if this code is repeated or reused anywhere in the tree, we trigger  [layout thrashing](https://developers.google.com/web/fundamentals/performance/rendering/avoid-large-complex-layouts-and-layout-thrashing). The severity of the layout thrashing scales linearly with the number of hooks/components featuring either this code or code like it.\r\n\r\nHooks and components are designed to be composable, yet it's this trivial to write one that isn't. \r\n\r\nInstead, what I'd like is a batched version of `useLayoutEffect` that provides `read` and `write` callbacks. These schedule callbacks that will be called:\r\n\r\n1. Synchronously before paint\r\n2. In \"parallel\" in reads/writes/reads etc\r\n3. After all child components in the tree have run `useLayoutEffect` - including those entering the tree (currently these don't mount until after other `useLayoutEffect`s have been called)\r\n\r\nIt could look like this, though I'm more interested in the above specs than actual API:\r\n\r\n```javascript\r\nuseBatchedLayoutEffect((read, write) => {\r\n  write(() =>  {\r\n    ref.current.style.transform = \"\"\r\n  })\r\n\r\n  read(() => {\r\n    const box = ref.current.getBoundingClientRect()\r\n  })\r\n})\r\n```\r\n\r\nThen, adhering the 3 specifications above, these callbacks are executed in order, so all `read`s from across the tree, then all `write`s, then all `read`s etc. There is no upper limit for the number of permitted ping-ponged reads/writes IMO as the amount of layout thrashing you could possibly suffer will never be worse than the single hungriest hook. In my experience I've never needed more than a read/write/read/write.\r\n\r\n## Measurement accuracy\r\n\r\nIn the given example, we're measuring a component after first resetting its `transform` because we want to snapshot its actual bounding box without any transforms applied. But if this component is [nested in itself](https://codesandbox.io/s/dazzling-varahamihira-2qiyw?file=/src/App.js), so both a parent and child are performing the same type of animation, we want to unset all the transforms before measuring any of the elements, otherwise the resulting measurements will be incorrect.\r\n\r\n## What about `requestAnimationFrame`?\r\n\r\nTheoretically it could be possible to implement this ourselves in userland by creating a batcher that executes on the next available frame. Sadly this isn't possible in practise. For whatever browser-internal reason it is necessary to run these reads and writes synchronously to prevent flashes of incorrectly-styled components.\r\n\r\nIf you play with this very simple layout animation implementation by clicking on the red box you'll see it suffers no flashes:\r\n\r\nhttps://codesandbox.io/s/broken-star-cycfz?file=/src/App.js:528-537\r\n\r\nBut if you uncomment the wrapping `requestAnimationFrame` within the `useLayoutEffect` you'll see it does randomly flash with the undesired styles.",
        "remove_template_description": "Today, `useLayoutEffect` can be used for synchronous read/writes across the DOM.    ```javascript  useLayoutEffect(() => {    // Write    ref.current.style.transform = \"\"      // Read    const box = ref.current.getBoundingClientRect()  })  ```    For a single instance of a single component, this works well. But if this code is repeated or reused anywhere in the tree, we trigger  [layout thrashing](https://developers.google.com/web/fundamentals/performance/rendering/avoid-large-complex-layouts-and-layout-thrashing). The severity of the layout thrashing scales linearly with the number of hooks/components featuring either this code or code like it.    Hooks and components are designed to be composable, yet it's this trivial to write one that isn't.     Instead, what I'd like is a batched version of `useLayoutEffect` that provides `read` and `write` callbacks. These schedule callbacks that will be called:    1. Synchronously before paint  2. In \"parallel\" in reads/writes/reads etc  3. After all child components in the tree have run `useLayoutEffect` - including those entering the tree (currently these don't mount until after other `useLayoutEffect`s have been called)    It could look like this, though I'm more interested in the above specs than actual API:    ```javascript  useBatchedLayoutEffect((read, write) => {    write(() =>  {      ref.current.style.transform = \"\"    })      read(() => {      const box = ref.current.getBoundingClientRect()    })  })  ```    Then, adhering the 3 specifications above, these callbacks are executed in order, so all `read`s from across the tree, then all `write`s, then all `read`s etc. There is no upper limit for the number of permitted ping-ponged reads/writes IMO as the amount of layout thrashing you could possibly suffer will never be worse than the single hungriest hook. In my experience I've never needed more than a read/write/read/write.    ## Measurement accuracy    In the given example, we're measuring a component after first resetting its `transform` because we want to snapshot its actual bounding box without any transforms applied. But if this component is [nested in itself](https://codesandbox.io/s/dazzling-varahamihira-2qiyw?file=/src/App.js), so both a parent and child are performing the same type of animation, we want to unset all the transforms before measuring any of the elements, otherwise the resulting measurements will be incorrect.    ## What about `requestAnimationFrame`?    Theoretically it could be possible to implement this ourselves in userland by creating a batcher that executes on the next available frame. Sadly this isn't possible in practise. For whatever browser-internal reason it is necessary to run these reads and writes synchronously to prevent flashes of incorrectly-styled components.    If you play with this very simple layout animation implementation by clicking on the red box you'll see it suffers no flashes:    https://codesandbox.io/s/broken-star-cycfz?file=/src/App.js:528-537    But if you uncomment the wrapping `requestAnimationFrame` within the `useLayoutEffect` you'll see it does randomly flash with the undesired styles.",
        "human_words": "Today, `useLayoutEffect` can be used for synchronous read/writes across the DOM.        For a single instance of a single component, this works well. But if this code is repeated or reused anywhere in the tree, we trigger  [layout thrashing](https://developers.google.com/web/fundamentals/performance/rendering/avoid-large-complex-layouts-and-layout-thrashing). The severity of the layout thrashing scales linearly with the number of hooks/components featuring either this code or code like it.    Hooks and components are designed to be composable, yet it's this trivial to write one that isn't.     Instead, what I'd like is a batched version of `useLayoutEffect` that provides `read` and `write` callbacks. These schedule callbacks that will be called:    1. Synchronously before paint  2. In \"parallel\" in reads/writes/reads etc  3. After all child components in the tree have run `useLayoutEffect` - including those entering the tree (currently these don't mount until after other `useLayoutEffect`s have been called)    It could look like this, though I'm more interested in the above specs than actual API:        Then, adhering the 3 specifications above, these callbacks are executed in order, so all `read`s from across the tree, then all `write`s, then all `read`s etc. There is no upper limit for the number of permitted ping-ponged reads/writes IMO as the amount of layout thrashing you could possibly suffer will never be worse than the single hungriest hook. In my experience I've never needed more than a read/write/read/write.    ## Measurement accuracy    In the given example, we're measuring a component after first resetting its `transform` because we want to snapshot its actual bounding box without any transforms applied. But if this component is [nested in itself](https://codesandbox.io/s/dazzling-varahamihira-2qiyw?file=/src/App.js), so both a parent and child are performing the same type of animation, we want to unset all the transforms before measuring any of the elements, otherwise the resulting measurements will be incorrect.    ## What about `requestAnimationFrame`?    Theoretically it could be possible to implement this ourselves in userland by creating a batcher that executes on the next available frame. Sadly this isn't possible in practise. For whatever browser-internal reason it is necessary to run these reads and writes synchronously to prevent flashes of incorrectly-styled components.    If you play with this very simple layout animation implementation by clicking on the red box you'll see it suffers no flashes:    https://codesandbox.io/s/broken-star-cycfz?file=/src/App.js:528-537    But if you uncomment the wrapping `requestAnimationFrame` within the `useLayoutEffect` you'll see it does randomly flash with the undesired styles.",
        "human_words_regrex": "Today, `useLayoutEffect` can be used for synchronous read/writes across the DOM. For a single instance of a single component, this works well. But if this code is repeated or reused anywhere in the tree, we trigger . The severity of the layout thrashing scales linearly with the number of hooks/components featuring either this code or code like it. Hooks and components are designed to be composable, yet it's this trivial to write one that isn't. Instead, what I'd like is a batched version of `useLayoutEffect` that provides `read` and `write` callbacks. These schedule callbacks that will be called: 1. Synchronously before paint 2. In \"parallel\" in reads/writes/reads etc 3. After all child components in the tree have run `useLayoutEffect` - including those entering the tree (currently these don't mount until after other `useLayoutEffect`s have been called) It could look like this, though I'm more interested in the above specs than actual API: Then, adhering the 3 specifications above, these callbacks are executed in order, so all `read`s from across the tree, then all `write`s, then all `read`s etc. There is no upper limit for the number of permitted ping-ponged reads/writes IMO as the amount of layout thrashing you could possibly suffer will never be worse than the single hungriest hook. In my experience I've never needed more than a read/write/read/write. ## Measurement accuracy In the given example, we're measuring a component after first resetting its `transform` because we want to snapshot its actual bounding box without any transforms applied. But if this component is , so both a parent and child are performing the same type of animation, we want to unset all the transforms before measuring any of the elements, otherwise the resulting measurements will be incorrect. ## What about `requestAnimationFrame`? Theoretically it could be possible to implement this ourselves in userland by creating a batcher that executes on the next available frame. Sadly this isn't possible in practise. For whatever browser-internal reason it is necessary to run these reads and writes synchronously to prevent flashes of incorrectly-styled components. If you play with this very simple layout animation implementation by clicking on the red box you'll see it suffers no flashes:  But if you uncomment the wrapping `requestAnimationFrame` within the `useLayoutEffect` you'll see it does randomly flash with the undesired styles.",
        "human_words_stopwords_removal_lemmatization": "today , ` uselayouteffect ` used synchronous read/writes across dom . single instance single component , work well . code repeated reused anywhere tree , trigger . severity layout thrashing scale linearly number hooks/components featuring either code code like . hook component designed composable , yet 's trivial write one n't . instead , 'd like batched version ` uselayouteffect ` provides ` read ` ` write ` callback . schedule callback called : 1. synchronously paint 2. `` parallel '' reads/writes/reads etc 3. child component tree run ` uselayouteffect ` - including entering tree ( currently n't mount ` uselayouteffect ` called ) could look like , though 'm interested spec actual api : , adhering 3 specification , callback executed order , ` read ` across tree , ` write ` , ` read ` etc . upper limit number permitted ping-ponged reads/writes imo amount layout thrashing could possibly suffer never worse single hungriest hook . experience 've never needed read/write/read/write . # # measurement accuracy given example , 're measuring component first resetting ` transform ` want snapshot actual bounding box without transforms applied . component , parent child performing type animation , want unset transforms measuring element , otherwise resulting measurement incorrect . # # ` requestanimationframe ` ? theoretically could possible implement userland creating batcher executes next available frame . sadly n't possible practise . whatever browser-internal reason necessary run read writes synchronously prevent flash incorrectly-styled component . play simple layout animation implementation clicking red box 'll see suffers flash : uncomment wrapping ` requestanimationframe ` within ` uselayouteffect ` 'll see randomly flash undesired style .",
        "title_stopwords_removal_lemmatization": "feature request : uselayouteffect read/write batching across tree"
    },
    {
        "issue_id": 676815872,
        "title": "DOM attribute stringification fixes",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2020-08-11T11:54:42Z",
        "status": "open",
        "description": "This is regarding the discussion in #17773. \r\n\r\nReact-DOM currently stringifies DOM attribute values  before passing them to `Element.setAttribute(NS)` functions. This might be unnecessary, as these functions implicitly stringify attribute values on their own (WebIDL attributes typed as `DOMString`). It also makes it difficult to enforce [Trusted Types](https://w3c.github.io/webappsec-trusted-types/dist/spec/) in React applications, as the trusted type objects would be stringified before values reach the DOM sinks.\r\n\r\nCurrently there is a `enableTrustedTypesIntegration` feature flag to disable stringification, but it seems like this behavior can be safely removed for modern browsers with no backwards-compatibility problems. Let me explain:\r\n\r\nAttribute stringification was introduced in https://github.com/facebook/react/commit/b0455f46709fca94da0b6126b719d6dd07605e65, at that time to workaround a [**jsdom**](https://github.com/jsdom/jsdom) limitation (jsdom's DOM emulation didn't stringify on its own). **IE 8/9** [have a similar issue](https://github.com/facebook/react/commit/3b94abcb3b2c05fc38406b02a501427e58377c44). If an object is passed to a DOM attribute, its value becomes `[object]`, ignoring any stringification rules defined in objects' `toString` function.\r\n\r\n- Jsdom does not have the issue anymore. Since at least 4.0.0 its `setAttribute` function does stringify the values via its IDL layer ([runkit demo](https://runkit.com/kkotowicz/jsdom-setattribute)).\r\n- React doesn't support IE 8 anymore.\r\n- The issue still exists for IE9 (contrary to https://github.com/facebook/react/issues/11735, my tests confirm that the bug still exists, but one needs to try a standard attribute, like `p.title`, and not one with a custom name).\r\n- All other browsers, even in their old versions (I tested IEs, Firefox, Chrome, Safari, Opera and a few mobile browsers ) correctly stringify.\r\n\r\nI propose to remove the stringification (similar to https://github.com/facebook/react/pull/17774) unless a browser bug is detected. \r\n\r\nThat way there is no spurious stringification, and the code branches with the workaround can be removed once buggy browsers stop being supported. My testing shows that only IE9 is affected. The change would be backwards-compatible. I'll send a PR with the proposed change.",
        "remove_template_description": "This is regarding the discussion in #17773.     React-DOM currently stringifies DOM attribute values  before passing them to `Element.setAttribute(NS)` functions. This might be unnecessary, as these functions implicitly stringify attribute values on their own (WebIDL attributes typed as `DOMString`). It also makes it difficult to enforce [Trusted Types](https://w3c.github.io/webappsec-trusted-types/dist/spec/) in React applications, as the trusted type objects would be stringified before values reach the DOM sinks.    Currently there is a `enableTrustedTypesIntegration` feature flag to disable stringification, but it seems like this behavior can be safely removed for modern browsers with no backwards-compatibility problems. Let me explain:    Attribute stringification was introduced in https://github.com/facebook/react/commit/b0455f46709fca94da0b6126b719d6dd07605e65, at that time to workaround a [**jsdom**](https://github.com/jsdom/jsdom) limitation (jsdom's DOM emulation didn't stringify on its own). **IE 8/9** [have a similar issue](https://github.com/facebook/react/commit/3b94abcb3b2c05fc38406b02a501427e58377c44). If an object is passed to a DOM attribute, its value becomes `[object]`, ignoring any stringification rules defined in objects' `toString` function.    - Jsdom does not have the issue anymore. Since at least 4.0.0 its `setAttribute` function does stringify the values via its IDL layer ([runkit demo](https://runkit.com/kkotowicz/jsdom-setattribute)).  - React doesn't support IE 8 anymore.  - The issue still exists for IE9 (contrary to https://github.com/facebook/react/issues/11735, my tests confirm that the bug still exists, but one needs to try a standard attribute, like `p.title`, and not one with a custom name).  - All other browsers, even in their old versions (I tested IEs, Firefox, Chrome, Safari, Opera and a few mobile browsers ) correctly stringify.    I propose to remove the stringification (similar to https://github.com/facebook/react/pull/17774) unless a browser bug is detected.     That way there is no spurious stringification, and the code branches with the workaround can be removed once buggy browsers stop being supported. My testing shows that only IE9 is affected. The change would be backwards-compatible. I'll send a PR with the proposed change.",
        "human_words": "This is regarding the discussion in #17773.     React-DOM currently stringifies DOM attribute values  before passing them to `Element.setAttribute(NS)` functions. This might be unnecessary, as these functions implicitly stringify attribute values on their own (WebIDL attributes typed as `DOMString`). It also makes it difficult to enforce [Trusted Types](https://w3c.github.io/webappsec-trusted-types/dist/spec/) in React applications, as the trusted type objects would be stringified before values reach the DOM sinks.    Currently there is a `enableTrustedTypesIntegration` feature flag to disable stringification, but it seems like this behavior can be safely removed for modern browsers with no backwards-compatibility problems. Let me explain:    Attribute stringification was introduced in https://github.com/facebook/react/commit/b0455f46709fca94da0b6126b719d6dd07605e65, at that time to workaround a [**jsdom**](https://github.com/jsdom/jsdom) limitation (jsdom's DOM emulation didn't stringify on its own). **IE 8/9** [have a similar issue](https://github.com/facebook/react/commit/3b94abcb3b2c05fc38406b02a501427e58377c44). If an object is passed to a DOM attribute, its value becomes `[object]`, ignoring any stringification rules defined in objects' `toString` function.    - Jsdom does not have the issue anymore. Since at least 4.0.0 its `setAttribute` function does stringify the values via its IDL layer ([runkit demo](https://runkit.com/kkotowicz/jsdom-setattribute)).  - React doesn't support IE 8 anymore.  - The issue still exists for IE9 (contrary to https://github.com/facebook/react/issues/11735, my tests confirm that the bug still exists, but one needs to try a standard attribute, like `p.title`, and not one with a custom name).  - All other browsers, even in their old versions (I tested IEs, Firefox, Chrome, Safari, Opera and a few mobile browsers ) correctly stringify.    I propose to remove the stringification (similar to https://github.com/facebook/react/pull/17774) unless a browser bug is detected.     That way there is no spurious stringification, and the code branches with the workaround can be removed once buggy browsers stop being supported. My testing shows that only IE9 is affected. The change would be backwards-compatible. I'll send a PR with the proposed change.",
        "human_words_regrex": "This is regarding the discussion in #17773. React-DOM currently stringifies DOM attribute values before passing them to `Element.setAttribute(NS)` functions. This might be unnecessary, as these functions implicitly stringify attribute values on their own (WebIDL attributes typed as `DOMString`). It also makes it difficult to enforce  in React applications, as the trusted type objects would be stringified before values reach the DOM sinks. Currently there is a `enableTrustedTypesIntegration` feature flag to disable stringification, but it seems like this behavior can be safely removed for modern browsers with no backwards-compatibility problems. Let me explain: Attribute stringification was introduced in  at that time to workaround a  limitation (jsdom's DOM emulation didn't stringify on its own). **IE 8/9** . If an object is passed to a DOM attribute, its value becomes `). - React doesn't support IE 8 anymore. - The issue still exists for IE9 (contrary to  my tests confirm that the bug still exists, but one needs to try a standard attribute, like `p.title`, and not one with a custom name). - All other browsers, even in their old versions (I tested IEs, Firefox, Chrome, Safari, Opera and a few mobile browsers ) correctly stringify. I propose to remove the stringification (similar to  unless a browser bug is detected. That way there is no spurious stringification, and the code branches with the workaround can be removed once buggy browsers stop being supported. My testing shows that only IE9 is affected. The change would be backwards-compatible. I'll send a PR with the proposed change.",
        "human_words_stopwords_removal_lemmatization": "regarding discussion # 17773. react-dom currently stringifies dom attribute value passing ` element.setattribute ( n ) ` function . might unnecessary , function implicitly stringify attribute value ( webidl attribute typed ` domstring ` ) . also make difficult enforce react application , trusted type object would stringified value reach dom sink . currently ` enabletrustedtypesintegration ` feature flag disable stringification , seems like behavior safely removed modern browser backwards-compatibility problem . let explain : attribute stringification introduced time workaround limitation ( jsdom 's dom emulation n't stringify ) . * * ie 8/9 * * . object passed dom attribute , value becomes ` ) . - react n't support ie 8 anymore . - issue still exists ie9 ( contrary test confirm bug still exists , one need try standard attribute , like ` p.title ` , one custom name ) . - browser , even old version ( tested y , firefox , chrome , safari , opera mobile browser ) correctly stringify . propose remove stringification ( similar unless browser bug detected . way spurious stringification , code branch workaround removed buggy browser stop supported . testing show ie9 affected . change would backwards-compatible . 'll send pr proposed change .",
        "title_stopwords_removal_lemmatization": "dom attribute stringification fix"
    },
    {
        "issue_id": 651421945,
        "title": "Suggestion: show HOC names in profiler",
        "label": [
            "Type: Feature Request",
            "Component: Developer Tools",
            "good first issue"
        ],
        "date": "2020-07-06T10:17:15Z",
        "status": "closed",
        "description": "(Deleted template as this is a suggestion, not a bug.)\r\n\r\nThe dev tools helpfully extracts HOC names and shows them in the components tree. [Example](https://react-devtools-tutorial.now.sh/higher-order-components):\r\n\r\n![image](https://user-images.githubusercontent.com/921609/86582724-03ddbc00-bf7a-11ea-83fb-f9d0a3902e5f.png)\r\n\r\nHowever, it doesn't give the same treatment to components in the profiler:\r\n\r\n![image](https://user-images.githubusercontent.com/921609/86582766-135d0500-bf7a-11ea-8e2a-520597150db6.png)\r\n\r\nIn large trees, it is very confusing to see two components with the same name, so it would be useful to show the HOC name here as well.\r\n\r\nAs a workaround for now, users can click through to the \"components\" tab from the profiler, when a component is selected in the profiler flamegraph, to see this extra information.",
        "remove_template_description": "(Deleted template as this is a suggestion, not a bug.)    The dev tools helpfully extracts HOC names and shows them in the components tree. [Example](https://react-devtools-tutorial.now.sh/higher-order-components):    ![image](https://user-images.githubusercontent.com/921609/86582724-03ddbc00-bf7a-11ea-83fb-f9d0a3902e5f.png)    However, it doesn't give the same treatment to components in the profiler:    ![image](https://user-images.githubusercontent.com/921609/86582766-135d0500-bf7a-11ea-8e2a-520597150db6.png)    In large trees, it is very confusing to see two components with the same name, so it would be useful to show the HOC name here as well.    As a workaround for now, users can click through to the \"components\" tab from the profiler, when a component is selected in the profiler flamegraph, to see this extra information.",
        "human_words": "(Deleted template as this is a suggestion, not a bug.)    The dev tools helpfully extracts HOC names and shows them in the components tree. [Example](https://react-devtools-tutorial.now.sh/higher-order-components):    ![image](https://user-images.githubusercontent.com/921609/86582724-03ddbc00-bf7a-11ea-83fb-f9d0a3902e5f.png)    However, it doesn't give the same treatment to components in the profiler:    ![image](https://user-images.githubusercontent.com/921609/86582766-135d0500-bf7a-11ea-8e2a-520597150db6.png)    In large trees, it is very confusing to see two components with the same name, so it would be useful to show the HOC name here as well.    As a workaround for now, users can click through to the \"components\" tab from the profiler, when a component is selected in the profiler flamegraph, to see this extra information.",
        "human_words_regrex": "(Deleted template as this is a suggestion, not a bug.) The dev tools helpfully extracts HOC names and shows them in the components tree. : ! However, it doesn't give the same treatment to components in the profiler: ! In large trees, it is very confusing to see two components with the same name, so it would be useful to show the HOC name here as well. As a workaround for now, users can click through to the \"components\" tab from the profiler, when a component is selected in the profiler flamegraph, to see this extra information.",
        "human_words_stopwords_removal_lemmatization": "( deleted template suggestion , bug . ) dev tool helpfully extract hoc name show component tree . : ! however , n't give treatment component profiler : ! large tree , confusing see two component name , would useful show hoc name well . workaround , user click `` component '' tab profiler , component selected profiler flamegraph , see extra information .",
        "title_stopwords_removal_lemmatization": "suggestion : show hoc name profiler"
    },
    {
        "issue_id": 650899420,
        "title": "Feature proposal: Hook equivalent to createSlice from Redux Toolkit?",
        "label": [
            "Type: Feature Request",
            "Component: Hooks"
        ],
        "date": "2020-07-04T14:22:02Z",
        "status": "closed",
        "description": "Would this be useful?\r\n\r\n> A function that accepts an initial state, an object full of reducer functions, and a \"slice name\", and automatically generates action creators and action types that correspond to the reducers and state.\r\n\r\nFrom [createSlice](https://redux-toolkit.js.org/api/createSlice).",
        "remove_template_description": "Would this be useful?    > A function that accepts an initial state, an object full of reducer functions, and a \"slice name\", and automatically generates action creators and action types that correspond to the reducers and state.    From [createSlice](https://redux-toolkit.js.org/api/createSlice).",
        "human_words": "Would this be useful?    > A function that accepts an initial state, an object full of reducer functions, and a \"slice name\", and automatically generates action creators and action types that correspond to the reducers and state.    From [createSlice](https://redux-toolkit.js.org/api/createSlice).",
        "human_words_regrex": "Would this be useful? > A function that accepts an initial state, an object full of reducer functions, and a \"slice name\", and automatically generates action creators and action types that correspond to the reducers and state. From .",
        "human_words_stopwords_removal_lemmatization": "would useful ? > function accepts initial state , object full reducer function , `` slice name '' , automatically generates action creator action type correspond reducer state . .",
        "title_stopwords_removal_lemmatization": "feature proposal : hook equivalent createslice redux toolkit ?"
    },
    {
        "issue_id": 635923470,
        "title": "Add https support to standalone DevTools",
        "label": [
            "Type: Feature Request",
            "Component: Developer Tools",
            "good first issue (taken)"
        ],
        "date": "2020-06-10T04:45:34Z",
        "status": "closed",
        "description": "I notice that the standalone react-devtools use http instead https like `\"<script src=\"http://192.1.2.3:8097\"></script>\"` ([src code](https://github.com/facebook/react/blob/4c7036e807fa18a3e21a5182983c7c0f05c5936e/packages/react-devtools/app.html#L186-L194))\uff0cbut my website is always https, so it will get broken because I cant change it to http if it's in `iframe`(it's diffcult to change the host environment/website protocol).\r\n\r\nI'm not familar with the react-devtools implementations, maybe something cause it can only use http to open the server, happy to hear the details, thanks!\r\n\r\nReact-devtools: 3.6.3\r\n\r\n",
        "remove_template_description": "I notice that the standalone react-devtools use http instead https like `\"<script src=\"http://192.1.2.3:8097\"></script>\"` ([src code](https://github.com/facebook/react/blob/4c7036e807fa18a3e21a5182983c7c0f05c5936e/packages/react-devtools/app.html#L186-L194))\uff0cbut my website is always https, so it will get broken because I cant change it to http if it's in `iframe`(it's diffcult to change the host environment/website protocol).    I'm not familar with the react-devtools implementations, maybe something cause it can only use http to open the server, happy to hear the details, thanks!    React-devtools: 3.6.3",
        "human_words": "I notice that the standalone react-devtools use http instead https like `\"<script src=\"http://192.1.2.3:8097\"></script>\"` ([src code](https://github.com/facebook/react/blob/4c7036e807fa18a3e21a5182983c7c0f05c5936e/packages/react-devtools/app.html#L186-L194))\uff0cbut my website is always https, so it will get broken because I cant change it to http if it's in `iframe`(it's diffcult to change the host environment/website protocol).    I'm not familar with the react-devtools implementations, maybe something cause it can only use http to open the server, happy to hear the details, thanks!    React-devtools: 3.6.3",
        "human_words_regrex": "I notice that the standalone react-devtools use http instead  like `\"<script src=\" ()\uff0cbut my website is always  so it will get broken because I cant change it to http if it's in `iframe`(it's diffcult to change the host environment/website protocol). I'm not familar with the react-devtools implementations, maybe something cause it can only use http to open the server, happy to hear the details, thanks! React-devtools: 3.6.3",
        "human_words_stopwords_removal_lemmatization": "notice standalone react-devtools use http instead like ` `` < script src= '' ( ) \uff0cbut website always get broken cant change http 's ` iframe ` ( 's diffcult change host environment/website protocol ) . 'm familar react-devtools implementation , maybe something cause use http open server , happy hear detail , thanks ! react-devtools : 3.6.3",
        "title_stopwords_removal_lemmatization": "add http support standalone devtools"
    },
    {
        "issue_id": 627457973,
        "title": "[DevTools Feature Request] Break on Warnings",
        "label": [
            "Type: Feature Request",
            "Status: New",
            "Component: Developer Tools"
        ],
        "date": "2020-05-29T18:28:30Z",
        "status": "closed",
        "description": "It'd be nice to have a toggle to pause the debugger when warnings fire so you can inspect the stack as it's happening.\r\n\r\n```\r\nconsole.error = function() {\r\n  ...\r\n  if (isBreakOn) {\r\n    debugger;\r\n  }\r\n}\r\n```\r\n\r\nSee https://github.com/facebook/react/pull/19044",
        "remove_template_description": "It'd be nice to have a toggle to pause the debugger when warnings fire so you can inspect the stack as it's happening.    ```  console.error = function() {    ...    if (isBreakOn) {      debugger;    }  }  ```    See https://github.com/facebook/react/pull/19044",
        "human_words": "It'd be nice to have a toggle to pause the debugger when warnings fire so you can inspect the stack as it's happening.        See https://github.com/facebook/react/pull/19044",
        "human_words_regrex": "It'd be nice to have a toggle to pause the debugger when warnings fire so you can inspect the stack as it's happening. See ",
        "human_words_stopwords_removal_lemmatization": "'d nice toggle pause debugger warning fire inspect stack 's happening . see",
        "title_stopwords_removal_lemmatization": "[ devtools feature request ] break warning"
    },
    {
        "issue_id": 612218315,
        "title": "Add devtools \"Inspect React component\" to right-click menu",
        "label": [
            "Type: Feature Request",
            "Component: Developer Tools"
        ],
        "date": "2020-05-04T22:50:47Z",
        "status": "open",
        "description": "Noticed today that Vue's devtools have an awesome \"Inspect Vue component\" option when right-clicking on a webpage (added in https://github.com/vuejs/vue-devtools/pull/479).\r\n\r\nThe React devtools should have the same feature! It would be useful when debugging for sure.\r\n",
        "remove_template_description": "Noticed today that Vue's devtools have an awesome \"Inspect Vue component\" option when right-clicking on a webpage (added in https://github.com/vuejs/vue-devtools/pull/479).    The React devtools should have the same feature! It would be useful when debugging for sure.",
        "human_words": "Noticed today that Vue's devtools have an awesome \"Inspect Vue component\" option when right-clicking on a webpage (added in https://github.com/vuejs/vue-devtools/pull/479).    The React devtools should have the same feature! It would be useful when debugging for sure.",
        "human_words_regrex": "Noticed today that Vue's devtools have an awesome \"Inspect Vue component\" option when right-clicking on a webpage (added in  The React devtools should have the same feature! It would be useful when debugging for sure.",
        "human_words_stopwords_removal_lemmatization": "noticed today vue 's devtools awesome `` inspect vue component '' option right-clicking webpage ( added react devtools feature ! would useful debugging sure .",
        "title_stopwords_removal_lemmatization": "add devtools `` inspect react component '' right-click menu"
    },
    {
        "issue_id": 601216337,
        "title": "Allow opting out of invokeGuardedCallbackDev",
        "label": [
            "Type: Feature Request",
            "Component: Test Utils",
            "Resolution: Stale"
        ],
        "date": "2020-04-16T16:13:34Z",
        "status": "closed",
        "description": "At the moment, when in development mode, React uses a special workflow for callbacks, to avoid using `try...catch`.\r\n\r\nIt works well. So well that several testing frameworks also get their uncaught exception handling triggered.\r\n\r\n**Example with mocha:**\r\n```js\r\nimport React from 'react';\r\nimport { render } from '@testing-library/react';\r\n\r\nfunction MyComponent({ doThrow }) {\r\n    if (doThrow) { throw new Error('I'm bad'); }\r\n    return <div></div>;\r\n}\r\n\r\nit('should throw', function () {\r\n    expect(() => {\r\n        render(<MyComponent doThrow/>);\r\n    }).to.throw();\r\n});\r\n```\r\n**Behavior:**\r\n- When running the test with the production build of react/react-dom, the test passes (with the usual warning of act being unsupported in prod build).\r\n- When running the test with the development build of react-/react-dom, the test fails with `Error: Uncaught Error: I'm bad`.\r\n\r\nThe root cause is `invokeGuardedCallbackDev` runs the callback in an event to avoid using a `try...catch` block\u2026 and trips Mocha.js uncaught exception detector.\r\n\r\n*Note: I am aware of error boundaries, I removed it from the example because the behavior is identical with it.*\r\n\r\n*Note: I used testing-library for clarity, but using `act` and `RenderDOM` manually yields the same result.*\r\n\r\n**Expected behavior:**\r\n- Either make it work out of the box, or have the possibility to opt out of `invokeGuardedCallbackDev` and force the use of the regular `try...catch` implementation in development too.\r\n",
        "remove_template_description": "At the moment, when in development mode, React uses a special workflow for callbacks, to avoid using `try...catch`.    It works well. So well that several testing frameworks also get their uncaught exception handling triggered.    **Example with mocha:**  ```js  import React from 'react';  import { render } from '@testing-library/react';    function MyComponent({ doThrow }) {      if (doThrow) { throw new Error('I'm bad'); }      return <div></div>;  }    it('should throw', function () {      expect(() => {          render(<MyComponent doThrow/>);      }).to.throw();  });  ```  **Behavior:**  - When running the test with the production build of react/react-dom, the test passes (with the usual warning of act being unsupported in prod build).  - When running the test with the development build of react-/react-dom, the test fails with `Error: Uncaught Error: I'm bad`.    The root cause is `invokeGuardedCallbackDev` runs the callback in an event to avoid using a `try...catch` block\u2026 and trips Mocha.js uncaught exception detector.    *Note: I am aware of error boundaries, I removed it from the example because the behavior is identical with it.*    *Note: I used testing-library for clarity, but using `act` and `RenderDOM` manually yields the same result.*    **Expected behavior:**  - Either make it work out of the box, or have the possibility to opt out of `invokeGuardedCallbackDev` and force the use of the regular `try...catch` implementation in development too.",
        "human_words": "At the moment, when in development mode, React uses a special workflow for callbacks, to avoid using `try...catch`.    It works well. So well that several testing frameworks also get their uncaught exception handling triggered.    **Example with mocha:**    **Behavior:**  - When running the test with the production build of react/react-dom, the test passes (with the usual warning of act being unsupported in prod build).  - When running the test with the development build of react-/react-dom, the test fails with `Error: Uncaught Error: I'm bad`.    The root cause is `invokeGuardedCallbackDev` runs the callback in an event to avoid using a `try...catch` block\u2026 and trips Mocha.js uncaught exception detector.    *Note: I am aware of error boundaries, I removed it from the example because the behavior is identical with it.*    *Note: I used testing-library for clarity, but using `act` and `RenderDOM` manually yields the same result.*    **Expected behavior:**  - Either make it work out of the box, or have the possibility to opt out of `invokeGuardedCallbackDev` and force the use of the regular `try...catch` implementation in development too.",
        "human_words_regrex": "At the moment, when in development mode, React uses a special workflow for callbacks, to avoid using `try...catch`. It works well. So well that several testing frameworks also get their uncaught exception handling triggered. **Example with mocha:** **Behavior:** - When running the test with the production build of react/react-dom, the test passes (with the usual warning of act being unsupported in prod build). - When running the test with the development build of react-/react-dom, the test fails with `Error: Uncaught Error: I'm bad`. The root cause is `invokeGuardedCallbackDev` runs the callback in an event to avoid using a `try...catch` block\u2026 and trips Mocha.js uncaught exception detector. *Note: I am aware of error boundaries, I removed it from the example because the behavior is identical with it.* *Note: I used testing-library for clarity, but using `act` and `RenderDOM` manually yields the same result.* **Expected behavior:** - Either make it work out of the box, or have the possibility to opt out of `invokeGuardedCallbackDev` and force the use of the regular `try...catch` implementation in development too.",
        "human_words_stopwords_removal_lemmatization": "moment , development mode , react us special workflow callback , avoid using ` try ... catch ` . work well . well several testing framework also get uncaught exception handling triggered . * * example mocha : * * * * behavior : * * - running test production build react/react-dom , test pass ( usual warning act unsupported prod build ) . - running test development build react-/react-dom , test fails ` error : uncaught error : 'm bad ` . root cause ` invokeguardedcallbackdev ` run callback event avoid using ` try ... catch ` block\u2026 trip mocha.js uncaught exception detector . * note : aware error boundary , removed example behavior identical . * * note : used testing-library clarity , using ` act ` ` renderdom ` manually yield result . * * * expected behavior : * * - either make work box , possibility opt ` invokeguardedcallbackdev ` force use regular ` try ... catch ` implementation development .",
        "title_stopwords_removal_lemmatization": "allow opting invokeguardedcallbackdev"
    },
    {
        "issue_id": 595060980,
        "title": "Expose API like `createStyles` for converting style object to CSS string",
        "label": [
            "Type: Feature Request",
            "Resolution: Stale"
        ],
        "date": "2020-04-06T12:08:53Z",
        "status": "closed",
        "description": "## Feature Request\r\n\r\nprovide API on react-dom to convert style object to CSS string. the API could be used to build dynamic CSS easily.\r\n\r\n### Approach 1\r\n\r\n```js\r\nimport {createCSS} from 'react-dom'\r\n\r\nconst inlineStyleString = createCSS({\r\n  overflow: 'hidden', \r\n  display: '-webkit-box',\r\n  WebkitLineClamp: 2,\r\n})\r\n\r\nreturn <style>{`.clamp-text { ${inlineStyleString} }`}</style>\r\n```\r\n\r\n### Approach 2\r\n\r\nAnother approach is to only map the key and value from the original style object, and let user play with it.\r\n\r\n```js\r\nimport {createStyles} from 'react-dom'\r\n\r\n// return a object with key-value pairs of css rules\r\nconst cssStyleObject = createCSS({\r\n  WebkitTransform: 'scale(2)',\r\n})\r\n// return { '-webkit-transform': 'scale(2)'  }\r\n\r\nconst inlineStyleString = Object.keys(cssStyleObject).reduce((serialized, key) => {\r\n  serialized += `${key}: ${cssStyleObject[key]};`\r\n  return serialized\r\n}, '')\r\n\r\nreturn <style>{`.clamp-text { ${inlineStyleString} }`}</style>\r\n```\r\n\r\n\r\n## Why\r\n\r\nSee other react styling library like **radium**, the way to build css is quite similar with react inline style if they need anything aligned with react like browser prefix such as `Webkit` or detect the unit less number for some special rule such as `line-height`, they have to re-implement the logic.\r\n\r\nthe style object in react is quite convenient, but it's can only used for inline style. hope react team could consider to expose it in the react-dom. might not the origin function name, but the same functionality.",
        "remove_template_description": "## Feature Request    provide API on react-dom to convert style object to CSS string. the API could be used to build dynamic CSS easily.    ### Approach 1    ```js  import {createCSS} from 'react-dom'    const inlineStyleString = createCSS({    overflow: 'hidden',     display: '-webkit-box',    WebkitLineClamp: 2,  })    return <style>{`.clamp-text { ${inlineStyleString} }`}</style>  ```    ### Approach 2    Another approach is to only map the key and value from the original style object, and let user play with it.    ```js  import {createStyles} from 'react-dom'    // return a object with key-value pairs of css rules  const cssStyleObject = createCSS({    WebkitTransform: 'scale(2)',  })  // return { '-webkit-transform': 'scale(2)'  }    const inlineStyleString = Object.keys(cssStyleObject).reduce((serialized, key) => {    serialized += `${key}: ${cssStyleObject[key]};`    return serialized  }, '')    return <style>{`.clamp-text { ${inlineStyleString} }`}</style>  ```      ## Why    See other react styling library like **radium**, the way to build css is quite similar with react inline style if they need anything aligned with react like browser prefix such as `Webkit` or detect the unit less number for some special rule such as `line-height`, they have to re-implement the logic.    the style object in react is quite convenient, but it's can only used for inline style. hope react team could consider to expose it in the react-dom. might not the origin function name, but the same functionality.",
        "human_words": "## Feature Request    provide API on react-dom to convert style object to CSS string. the API could be used to build dynamic CSS easily.    ### Approach 1        ### Approach 2    Another approach is to only map the key and value from the original style object, and let user play with it.          ## Why    See other react styling library like **radium**, the way to build css is quite similar with react inline style if they need anything aligned with react like browser prefix such as `Webkit` or detect the unit less number for some special rule such as `line-height`, they have to re-implement the logic.    the style object in react is quite convenient, but it's can only used for inline style. hope react team could consider to expose it in the react-dom. might not the origin function name, but the same functionality.",
        "human_words_regrex": "## Feature Request provide API on react-dom to convert style object to CSS string. the API could be used to build dynamic CSS easily. ### Approach 1 ### Approach 2 Another approach is to only map the key and value from the original style object, and let user play with it. ## Why See other react styling library like **radium**, the way to build css is quite similar with react inline style if they need anything aligned with react like browser prefix such as `Webkit` or detect the unit less number for some special rule such as `line-height`, they have to re-implement the logic. the style object in react is quite convenient, but it's can only used for inline style. hope react team could consider to expose it in the react-dom. might not the origin function name, but the same functionality.",
        "human_words_stopwords_removal_lemmatization": "# # feature request provide api react-dom convert style object cs string . api could used build dynamic cs easily . # # # approach 1 # # # approach 2 another approach map key value original style object , let user play . # # see react styling library like * * radium * * , way build cs quite similar react inline style need anything aligned react like browser prefix ` webkit ` detect unit le number special rule ` line-height ` , re-implement logic . style object react quite convenient , 's used inline style . hope react team could consider expose react-dom . might origin function name , functionality .",
        "title_stopwords_removal_lemmatization": "expose api like ` createstyles ` converting style object cs string"
    },
    {
        "issue_id": 592973028,
        "title": "DevTools: Hovering \"Rendered by\" list should highlight elements",
        "label": [
            "Type: Feature Request",
            "Component: Developer Tools"
        ],
        "date": "2020-04-02T23:13:49Z",
        "status": "closed",
        "description": "This list is pretty awesome:\r\n\r\n<img width=\"390\" alt=\"Screenshot 2020-04-03 at 00 12 08\" src=\"https://user-images.githubusercontent.com/810438/78308234-e0047780-753f-11ea-9d4f-1e2d31e5baa0.png\">\r\n\r\nBut always struggle to guess which component in the owner list I need to jump to.\r\n\r\nWe should make hovering the owner list highlight components, just like the main tree view does.\r\n\r\n@hristo-kanchev, interested?",
        "remove_template_description": "This list is pretty awesome:    <img width=\"390\" alt=\"Screenshot 2020-04-03 at 00 12 08\" src=\"https://user-images.githubusercontent.com/810438/78308234-e0047780-753f-11ea-9d4f-1e2d31e5baa0.png\">    But always struggle to guess which component in the owner list I need to jump to.    We should make hovering the owner list highlight components, just like the main tree view does.    @hristo-kanchev, interested?",
        "human_words": "This list is pretty awesome:    <img width=\"390\" alt=\"Screenshot 2020-04-03 at 00 12 08\" src=\"https://user-images.githubusercontent.com/810438/78308234-e0047780-753f-11ea-9d4f-1e2d31e5baa0.png\">    But always struggle to guess which component in the owner list I need to jump to.    We should make hovering the owner list highlight components, just like the main tree view does.    @hristo-kanchev, interested?",
        "human_words_regrex": "This list is pretty awesome: <img width=\"390\" alt=\"Screenshot 2020-04-03 at 00 12 08\" src=\" But always struggle to guess which component in the owner list I need to jump to. We should make hovering the owner list highlight components, just like the main tree view does. @hristo-kanchev, interested?",
        "human_words_stopwords_removal_lemmatization": "list pretty awesome : < img width= '' 390 '' alt= '' screenshot 2020-04-03 00 12 08 '' src= '' always struggle guess component owner list need jump . make hovering owner list highlight component , like main tree view . @ hristo-kanchev , interested ?",
        "title_stopwords_removal_lemmatization": "devtools : hovering `` rendered '' list highlight element"
    },
    {
        "issue_id": 589559997,
        "title": "Devtools: Allow editing context",
        "label": [
            "Type: Feature Request",
            "Component: Developer Tools"
        ],
        "date": "2020-03-28T11:37:38Z",
        "status": "open",
        "description": "React version: 16.13 and `0.0.0-experimental-aae83a4b9\r\n\r\n## Steps To Reproduce\r\n\r\n1. Goto https://codesandbox.io/s/xenodochial-field-rfdjz\r\n2. Try editing value of `MessageListContext.Provider`\r\n\r\nLink to code example: https://codesandbox.io/s/xenodochial-field-rfdjz\r\n\r\n## The current behavior\r\n\r\nContext from `createContext` can't be edited in the current devtools (provider, consumer, hooks)\r\n\r\n## The expected behavior\r\n\r\nContext value should be editable. I already proposed an implementation for [Provider](https://github.com/facebook/react/pull/18255) and [Consumer](https://github.com/facebook/react/pull/18257).\r\n",
        "remove_template_description": "React version: 16.13 and `0.0.0-experimental-aae83a4b9        1. Goto https://codesandbox.io/s/xenodochial-field-rfdjz  2. Try editing value of `MessageListContext.Provider`    Link to code example: https://codesandbox.io/s/xenodochial-field-rfdjz        Context from `createContext` can't be edited in the current devtools (provider, consumer, hooks)        Context value should be editable. I already proposed an implementation for [Provider](https://github.com/facebook/react/pull/18255) and [Consumer](https://github.com/facebook/react/pull/18257).",
        "human_words": "React version: 16.13 and `0.0.0-experimental-aae83a4b9        1. Goto https://codesandbox.io/s/xenodochial-field-rfdjz  2. Try editing value of `MessageListContext.Provider`    Link to code example: https://codesandbox.io/s/xenodochial-field-rfdjz        Context from `createContext` can't be edited in the current devtools (provider, consumer, hooks)        Context value should be editable. I already proposed an implementation for [Provider](https://github.com/facebook/react/pull/18255) and [Consumer](https://github.com/facebook/react/pull/18257).",
        "human_words_regrex": "React version: 16.13 and `0.0.0-experimental-aae83a4b9 1. Goto  2. Try editing value of `MessageListContext.Provider` Link to code example:  Context from `createContext` can't be edited in the current devtools (provider, consumer, hooks) Context value should be editable. I already proposed an implementation for  and .",
        "human_words_stopwords_removal_lemmatization": "react version : 16.13 ` 0.0.0-experimental-aae83a4b9 1. goto 2. try editing value ` messagelistcontext.provider ` link code example : context ` createcontext ` ca n't edited current devtools ( provider , consumer , hook ) context value editable . already proposed implementation .",
        "title_stopwords_removal_lemmatization": "devtools : allow editing context"
    },
    {
        "issue_id": 557123038,
        "title": "Profiler should highlight host components (e.g. DOM elements) on mouseover",
        "label": [
            "Type: Feature Request",
            "Component: Developer Tools",
            "good first issue (taken)"
        ],
        "date": "2020-01-29T21:21:56Z",
        "status": "closed",
        "description": "Feature request from a DevTools user at Faceook:\r\n> If I mouse over a node in the flame graph if you can highlight it in the view like the inspector that would be really amazing!",
        "remove_template_description": "Feature request from a DevTools user at Faceook:  > If I mouse over a node in the flame graph if you can highlight it in the view like the inspector that would be really amazing!",
        "human_words": "Feature request from a DevTools user at Faceook:  > If I mouse over a node in the flame graph if you can highlight it in the view like the inspector that would be really amazing!",
        "human_words_regrex": "Feature request from a DevTools user at Faceook: > If I mouse over a node in the flame graph if you can highlight it in the view like the inspector that would be really amazing!",
        "human_words_stopwords_removal_lemmatization": "feature request devtools user faceook : > mouse node flame graph highlight view like inspector would really amazing !",
        "title_stopwords_removal_lemmatization": "profiler highlight host component ( e.g . dom element ) mouseover"
    },
    {
        "issue_id": 543398058,
        "title": "Add colors to component's name ( in Component tree ) for visual feedback about type of Component or Node",
        "label": [
            "Type: Feature Request",
            "Component: Developer Tools"
        ],
        "date": "2019-12-29T13:28:56Z",
        "status": "closed",
        "description": "**What is the current behavior?**\r\n\r\nAll the components name  in the Component tree are of the same color\r\n\r\n**What is the expected behavior?**\r\n\r\nIt would be helpful if they have different colors indicating the type of Component (whether its native HTML node or Contexts or simple react component) I know we can filter it, but visual indication will be helpful too.\r\n",
        "remove_template_description": "**What is the current behavior?**    All the components name  in the Component tree are of the same color    **What is the expected behavior?**    It would be helpful if they have different colors indicating the type of Component (whether its native HTML node or Contexts or simple react component) I know we can filter it, but visual indication will be helpful too.",
        "human_words": "**What is the current behavior?**    All the components name  in the Component tree are of the same color    **What is the expected behavior?**    It would be helpful if they have different colors indicating the type of Component (whether its native HTML node or Contexts or simple react component) I know we can filter it, but visual indication will be helpful too.",
        "human_words_regrex": "**What is the current behavior?** All the components name in the Component tree are of the same color **What is the expected behavior?** It would be helpful if they have different colors indicating the type of Component (whether its native HTML node or Contexts or simple react component) I know we can filter it, but visual indication will be helpful too.",
        "human_words_stopwords_removal_lemmatization": "* * current behavior ? * * component name component tree color * * expected behavior ? * * would helpful different color indicating type component ( whether native html node context simple react component ) know filter , visual indication helpful .",
        "title_stopwords_removal_lemmatization": "add color component 's name ( component tree ) visual feedback type component node"
    },
    {
        "issue_id": 521883191,
        "title": "Possibility to set min duration of Suspense fallback",
        "label": [
            "Type: Feature Request",
            "Component: Concurrent Features",
            "Resolution: Backlog"
        ],
        "date": "2019-11-13T00:33:43Z",
        "status": "open",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\n**What is the current behavior?**\r\nI have played a bit with Concurrent Mode and the Suspense API.\r\nReally exiting features and I look forward to use them in a stable release. Thank you for everything you are doing!\r\n\r\nRegarding the `Suspense` component, could it be nice to have a property (both in Concurrent Mode and in \"normal/synchronous\" mode) which would allow us to set the minimum duration of the `Suspense` fallback UI in case the fallback UI ever gets rendered?\r\n\r\n**What is the expected behavior?**\r\nLet me do an example. Try clicking on the `Next` button in this codesandbox: \r\nhttps://codesandbox.io/s/cold-monad-ifr29.\r\n\r\nYou will see that the `Suspense` fallback UI is rendered and stays in the tree just for a little moment (`~200ms`) because both promises resolve in `1200ms`, while `useTransition` has a `timeoutMs` of 1 second.\r\nIn my opinion, this is a bit unpleasant to the eye.\r\n\r\nWouldn't it be nicer if we could tell the `Suspense` component something like \"If you ever render the fallback, show it for at least N millisec.\"? E.g.:\r\n\r\n```jsx\r\n...\r\nfunction ProfilePage({ resource }) {\r\n  return (\r\n    <Suspense fallback={<h1>Loading profile...</h1>}\r\n      // If the fallback ever gets rendered,\r\n      // it will be shown for at least 1500 millisec.,\r\n      // even if the promise resolves right after rendering the fallback.\r\n      fallbackMinDurationMs={1500}>\r\n      <ProfileDetails resource={resource} />\r\n      <Suspense fallback={<h1>Loading posts...</h1>}>\r\n        <ProfileTimeline resource={resource} />\r\n      </Suspense>\r\n    </Suspense>\r\n  );\r\n}\r\n...\r\n```\r\n\r\nConsider an animated spinner used as a fallback of `Suspense`, if it happens that the promise resolves just a few milliseconds after rendering the fallback like above, the spinner will be rendered and suddenly disappear, without completing its animation cycle and showing an incomplete animation.\r\n\r\nWhereas, if we could keep the spinner in the tree for at least `fallbackMinDurationMs` millisec. once rendered, we could improve its appearance in such cases.\r\n\r\nThe `Suspense` component responsible for rendering the fallback would have to wrap the caught Promise in a promise which would look something like this:\r\n\r\n```js\r\nfunction maxDelayFallbackPromise({\r\n  promise,\r\n  timeoutMs, // ---> This would be the value of `useTransition`'s `timeoutMs`\r\n  onFallback = () => {}, // ---> This code would run in case `timeoutMs` exceeds (i.e. when `Suspense`'s fallback UI is rendered)\r\n  fallbackMinDurationMs\r\n} = {}) {\r\n  // Generate a unique identifier, like a string, a number, in order to identify which promise resolves first...\r\n  const uniqueIdentifier = `promise_value_${Math.random()}`\r\n  return Promise.race([\r\n    promise,\r\n    timeout(timeoutMs).then(() => uniqueIdentifier)\r\n  ]).then(value => {\r\n    if (value === uniqueIdentifier) {\r\n      onFallback()\r\n      return minDelayPromise(promise, fallbackMinDurationMs)\r\n    }\r\n    else {\r\n      return value\r\n    }\r\n  })\r\n}\r\n```\r\n\r\nWhere `timeout` and `minDelayPromise` are:\r\n\r\n```js\r\nfunction timeout(delayMs) {\r\n  return new Promise(resolve => setTimeout(resolve, delayMs))\r\n}\r\n\r\nfunction minDelayPromise(promise, minDelay) {\r\n  return Promise.all([\r\n    promise,\r\n    timeout(minDelay)\r\n  ]).then(([value]) => {\r\n    return value\r\n  })\r\n}\r\n```\r\n\r\nThis could also apply to the `isPending` flag of `useTransition`...\r\n\r\nDo you think such a feature could improve the UX in such cases?\r\n\r\n**UPDATE - 04/09/2022** - For anyone looking at this issue, there is a workaround to achieve this fallback min duration behaviour in React 17 \ud83c\udf89 , described here: https://github.com/facebook/react/issues/17351#issuecomment-1236303278\r\n",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**  Feature    **What is the current behavior?**  I have played a bit with Concurrent Mode and the Suspense API.  Really exiting features and I look forward to use them in a stable release. Thank you for everything you are doing!    Regarding the `Suspense` component, could it be nice to have a property (both in Concurrent Mode and in \"normal/synchronous\" mode) which would allow us to set the minimum duration of the `Suspense` fallback UI in case the fallback UI ever gets rendered?    **What is the expected behavior?**  Let me do an example. Try clicking on the `Next` button in this codesandbox:   https://codesandbox.io/s/cold-monad-ifr29.    You will see that the `Suspense` fallback UI is rendered and stays in the tree just for a little moment (`~200ms`) because both promises resolve in `1200ms`, while `useTransition` has a `timeoutMs` of 1 second.  In my opinion, this is a bit unpleasant to the eye.    Wouldn't it be nicer if we could tell the `Suspense` component something like \"If you ever render the fallback, show it for at least N millisec.\"? E.g.:    ```jsx  ...  function ProfilePage({ resource }) {    return (      <Suspense fallback={<h1>Loading profile...</h1>}        // If the fallback ever gets rendered,        // it will be shown for at least 1500 millisec.,        // even if the promise resolves right after rendering the fallback.        fallbackMinDurationMs={1500}>        <ProfileDetails resource={resource} />        <Suspense fallback={<h1>Loading posts...</h1>}>          <ProfileTimeline resource={resource} />        </Suspense>      </Suspense>    );  }  ...  ```    Consider an animated spinner used as a fallback of `Suspense`, if it happens that the promise resolves just a few milliseconds after rendering the fallback like above, the spinner will be rendered and suddenly disappear, without completing its animation cycle and showing an incomplete animation.    Whereas, if we could keep the spinner in the tree for at least `fallbackMinDurationMs` millisec. once rendered, we could improve its appearance in such cases.    The `Suspense` component responsible for rendering the fallback would have to wrap the caught Promise in a promise which would look something like this:    ```js  function maxDelayFallbackPromise({    promise,    timeoutMs, // ---> This would be the value of `useTransition`'s `timeoutMs`    onFallback = () => {}, // ---> This code would run in case `timeoutMs` exceeds (i.e. when `Suspense`'s fallback UI is rendered)    fallbackMinDurationMs  } = {}) {    // Generate a unique identifier, like a string, a number, in order to identify which promise resolves first...    const uniqueIdentifier = `promise_value_${Math.random()}`    return Promise.race([      promise,      timeout(timeoutMs).then(() => uniqueIdentifier)    ]).then(value => {      if (value === uniqueIdentifier) {        onFallback()        return minDelayPromise(promise, fallbackMinDurationMs)      }      else {        return value      }    })  }  ```    Where `timeout` and `minDelayPromise` are:    ```js  function timeout(delayMs) {    return new Promise(resolve => setTimeout(resolve, delayMs))  }    function minDelayPromise(promise, minDelay) {    return Promise.all([      promise,      timeout(minDelay)    ]).then(([value]) => {      return value    })  }  ```    This could also apply to the `isPending` flag of `useTransition`...    Do you think such a feature could improve the UX in such cases?    **UPDATE - 04/09/2022** - For anyone looking at this issue, there is a workaround to achieve this fallback min duration behaviour in React 17 \ud83c\udf89 , described here: https://github.com/facebook/react/issues/17351#issuecomment-1236303278",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**  Feature    **What is the current behavior?**  I have played a bit with Concurrent Mode and the Suspense API.  Really exiting features and I look forward to use them in a stable release. Thank you for everything you are doing!    Regarding the `Suspense` component, could it be nice to have a property (both in Concurrent Mode and in \"normal/synchronous\" mode) which would allow us to set the minimum duration of the `Suspense` fallback UI in case the fallback UI ever gets rendered?    **What is the expected behavior?**  Let me do an example. Try clicking on the `Next` button in this codesandbox:   https://codesandbox.io/s/cold-monad-ifr29.    You will see that the `Suspense` fallback UI is rendered and stays in the tree just for a little moment (`~200ms`) because both promises resolve in `1200ms`, while `useTransition` has a `timeoutMs` of 1 second.  In my opinion, this is a bit unpleasant to the eye.    Wouldn't it be nicer if we could tell the `Suspense` component something like \"If you ever render the fallback, show it for at least N millisec.\"? E.g.:        Consider an animated spinner used as a fallback of `Suspense`, if it happens that the promise resolves just a few milliseconds after rendering the fallback like above, the spinner will be rendered and suddenly disappear, without completing its animation cycle and showing an incomplete animation.    Whereas, if we could keep the spinner in the tree for at least `fallbackMinDurationMs` millisec. once rendered, we could improve its appearance in such cases.    The `Suspense` component responsible for rendering the fallback would have to wrap the caught Promise in a promise which would look something like this:        Where `timeout` and `minDelayPromise` are:        This could also apply to the `isPending` flag of `useTransition`...    Do you think such a feature could improve the UX in such cases?    **UPDATE - 04/09/2022** - For anyone looking at this issue, there is a workaround to achieve this fallback min duration behaviour in React 17 \ud83c\udf89 , described here: https://github.com/facebook/react/issues/17351#issuecomment-1236303278",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** Feature **What is the current behavior?** I have played a bit with Concurrent Mode and the Suspense API. Really exiting features and I look forward to use them in a stable release. Thank you for everything you are doing! Regarding the `Suspense` component, could it be nice to have a property (both in Concurrent Mode and in \"normal/synchronous\" mode) which would allow us to set the minimum duration of the `Suspense` fallback UI in case the fallback UI ever gets rendered? **What is the expected behavior?** Let me do an example. Try clicking on the `Next` button in this codesandbox:  You will see that the `Suspense` fallback UI is rendered and stays in the tree just for a little moment (`~200ms`) because both promises resolve in `1200ms`, while `useTransition` has a `timeoutMs` of 1 second. In my opinion, this is a bit unpleasant to the eye. Wouldn't it be nicer if we could tell the `Suspense` component something like \"If you ever render the fallback, show it for at least N millisec.\"? E.g.: Consider an animated spinner used as a fallback of `Suspense`, if it happens that the promise resolves just a few milliseconds after rendering the fallback like above, the spinner will be rendered and suddenly disappear, without completing its animation cycle and showing an incomplete animation. Whereas, if we could keep the spinner in the tree for at least `fallbackMinDurationMs` millisec. once rendered, we could improve its appearance in such cases. The `Suspense` component responsible for rendering the fallback would have to wrap the caught Promise in a promise which would look something like this: Where `timeout` and `minDelayPromise` are: This could also apply to the `isPending` flag of `useTransition`... Do you think such a feature could improve the UX in such cases? **UPDATE - 04/09/2022** - For anyone looking at this issue, there is a workaround to achieve this fallback min duration behaviour in React 17 \ud83c\udf89 , described here: ",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * feature * * current behavior ? * * played bit concurrent mode suspense api . really exiting feature look forward use stable release . thank everything ! regarding ` suspense ` component , could nice property ( concurrent mode `` normal/synchronous '' mode ) would allow u set minimum duration ` suspense ` fallback ui case fallback ui ever get rendered ? * * expected behavior ? * * let example . try clicking ` next ` button codesandbox : see ` suspense ` fallback ui rendered stay tree little moment ( ` ~200ms ` ) promise resolve ` 1200ms ` , ` usetransition ` ` timeoutms ` 1 second . opinion , bit unpleasant eye . would n't nicer could tell ` suspense ` component something like `` ever render fallback , show least n millisec. '' ? e.g . : consider animated spinner used fallback ` suspense ` , happens promise resolve millisecond rendering fallback like , spinner rendered suddenly disappear , without completing animation cycle showing incomplete animation . whereas , could keep spinner tree least ` fallbackmindurationms ` millisec . rendered , could improve appearance case . ` suspense ` component responsible rendering fallback would wrap caught promise promise would look something like : ` timeout ` ` mindelaypromise ` : could also apply ` ispending ` flag ` usetransition ` ... think feature could improve ux case ? * * update - 04/09/2022 * * - anyone looking issue , workaround achieve fallback min duration behaviour react 17 \ud83c\udf89 , described :",
        "title_stopwords_removal_lemmatization": "possibility set min duration suspense fallback"
    },
    {
        "issue_id": 519047645,
        "title": "Hotkey for \"Select an element in the page to inspect it\" in Chrome extension",
        "label": [
            "Type: Feature Request",
            "Component: Developer Tools"
        ],
        "date": "2019-11-07T05:20:54Z",
        "status": "open",
        "description": "Reopening https://github.com/facebook/react-devtools/issues/966 as I feel it'd still be a great feature to have.\r\n\r\nTo reiterate, it'd be great to have a hotkey to trigger the \"Select an element in the page to inspect it\" functionality, similar to how `Ctrl` + `Shift` + `C` triggers Chrome's element inspector mode.",
        "remove_template_description": "Reopening https://github.com/facebook/react-devtools/issues/966 as I feel it'd still be a great feature to have.    To reiterate, it'd be great to have a hotkey to trigger the \"Select an element in the page to inspect it\" functionality, similar to how `Ctrl` + `Shift` + `C` triggers Chrome's element inspector mode.",
        "human_words": "Reopening https://github.com/facebook/react-devtools/issues/966 as I feel it'd still be a great feature to have.    To reiterate, it'd be great to have a hotkey to trigger the \"Select an element in the page to inspect it\" functionality, similar to how `Ctrl` + `Shift` + `C` triggers Chrome's element inspector mode.",
        "human_words_regrex": "Reopening  as I feel it'd still be a great feature to have. To reiterate, it'd be great to have a hotkey to trigger the \"Select an element in the page to inspect it\" functionality, similar to how `Ctrl` + `Shift` + `C` triggers Chrome's element inspector mode.",
        "human_words_stopwords_removal_lemmatization": "reopening feel 'd still great feature . reiterate , 'd great hotkey trigger `` select element page inspect '' functionality , similar ` ctrl ` + ` shift ` + ` c ` trigger chrome 's element inspector mode .",
        "title_stopwords_removal_lemmatization": "hotkey `` select element page inspect '' chrome extension"
    },
    {
        "issue_id": 518988866,
        "title": "Adding visible state to Suspense Fallback component to enhance CSS transitions.",
        "label": [
            "Type: Feature Request",
            "Component: Suspense"
        ],
        "date": "2019-11-07T01:41:48Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nFeature I suppose.\r\n\r\n**What is the current behavior?**\r\nSuspense fallback component flashes on and immediately unmounts (flashes off) when fetching is complete. See similar discussions [here](https://stackoverflow.com/questions/57404653/react-suspense-prevent-flashing-of-fallback-spinner) and [here](https://stackoverflow.com/questions/54158994/react-suspense-lazy-delay).\r\n\r\n**What is the expected behavior?**\r\nIt would be ideal to add better transitions to the fallback component when it mounts and unmounts, but doing so requires using something like [TransitionGroup](https://reactcommunity.org/react-transition-group/transition-group) or [Framer Motion](https://www.framer.com/api/motion/animate-presence/), which require a prop to listen to know when to mount and unmount. If we could somehow have the fallback component receive some kind of state from Suspense on when it is mounting and unmounting the fallback component, that would be great.\r\n",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**  Feature I suppose.    **What is the current behavior?**  Suspense fallback component flashes on and immediately unmounts (flashes off) when fetching is complete. See similar discussions [here](https://stackoverflow.com/questions/57404653/react-suspense-prevent-flashing-of-fallback-spinner) and [here](https://stackoverflow.com/questions/54158994/react-suspense-lazy-delay).    **What is the expected behavior?**  It would be ideal to add better transitions to the fallback component when it mounts and unmounts, but doing so requires using something like [TransitionGroup](https://reactcommunity.org/react-transition-group/transition-group) or [Framer Motion](https://www.framer.com/api/motion/animate-presence/), which require a prop to listen to know when to mount and unmount. If we could somehow have the fallback component receive some kind of state from Suspense on when it is mounting and unmounting the fallback component, that would be great.",
        "human_words": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**  Feature I suppose.    **What is the current behavior?**  Suspense fallback component flashes on and immediately unmounts (flashes off) when fetching is complete. See similar discussions [here](https://stackoverflow.com/questions/57404653/react-suspense-prevent-flashing-of-fallback-spinner) and [here](https://stackoverflow.com/questions/54158994/react-suspense-lazy-delay).    **What is the expected behavior?**  It would be ideal to add better transitions to the fallback component when it mounts and unmounts, but doing so requires using something like [TransitionGroup](https://reactcommunity.org/react-transition-group/transition-group) or [Framer Motion](https://www.framer.com/api/motion/animate-presence/), which require a prop to listen to know when to mount and unmount. If we could somehow have the fallback component receive some kind of state from Suspense on when it is mounting and unmounting the fallback component, that would be great.",
        "human_words_regrex": " **Do you want to request a *feature* or report a *bug*?** Feature I suppose. **What is the current behavior?** Suspense fallback component flashes on and immediately unmounts (flashes off) when fetching is complete. See similar discussions  and . **What is the expected behavior?** It would be ideal to add better transitions to the fallback component when it mounts and unmounts, but doing so requires using something like  or , which require a prop to listen to know when to mount and unmount. If we could somehow have the fallback component receive some kind of state from Suspense on when it is mounting and unmounting the fallback component, that would be great.",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * feature suppose . * * current behavior ? * * suspense fallback component flash immediately unmounts ( flash ) fetching complete . see similar discussion . * * expected behavior ? * * would ideal add better transition fallback component mount unmounts , requires using something like , require prop listen know mount unmount . could somehow fallback component receive kind state suspense mounting unmounting fallback component , would great .",
        "title_stopwords_removal_lemmatization": "adding visible state suspense fallback component enhance cs transition ."
    },
    {
        "issue_id": 515400936,
        "title": "react-refresh: add options to override $RefreshReg$ and $RefreshSig$ for better System.js integration",
        "label": [
            "Type: Feature Request",
            "Component: Fast Refresh"
        ],
        "date": "2019-10-31T12:41:06Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\nRight now babel plugin emits globals: https://github.com/facebook/react/issues/16604\r\n\r\n```js\r\nwindow.$RefreshReg$ = () => {};\r\nwindow.$RefreshSig$ = () => type => type;\r\n```\r\n\r\nIt would be nice to have them configurable. That would allow to use `import.meta` in environments like SystemJS and have simpler implementation:\r\n\r\n```js\r\nimport runtime from 'react-refresh/runtime'\r\nruntime.injectIntoGlobalHook(window)\r\n\r\nSystem.constructor.prototype.createContext = function (url) {\r\n  return {\r\n    url,\r\n    $RefreshSig$: runtime.createSignatureFunctionForTransform,\r\n    $RefreshReg$: (type, id) => {\r\n      id = url + ' ' + id\r\n      runtime.register(type, id)\r\n    }\r\n  };\r\n};\r\n```\r\n\r\nIf you don't mind I could create PR with changes to react-refresh/babel next week.\r\n\r\nenvironment:\r\n```js\r\n{\r\n    \"systemjs\": \"^6.1.4\",\r\n    \"react\": \"^16.11.0\",\r\n    \"react-dom\": \"^16.11.0\",\r\n    \"react-refresh\": \"^0.6.0\"\r\n }\r\n```",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**  Feature    Right now babel plugin emits globals: https://github.com/facebook/react/issues/16604    ```js  window.$RefreshReg$ = () => {};  window.$RefreshSig$ = () => type => type;  ```    It would be nice to have them configurable. That would allow to use `import.meta` in environments like SystemJS and have simpler implementation:    ```js  import runtime from 'react-refresh/runtime'  runtime.injectIntoGlobalHook(window)    System.constructor.prototype.createContext = function (url) {    return {      url,      $RefreshSig$: runtime.createSignatureFunctionForTransform,      $RefreshReg$: (type, id) => {        id = url + ' ' + id        runtime.register(type, id)      }    };  };  ```    If you don't mind I could create PR with changes to react-refresh/babel next week.    environment:  ```js  {      \"systemjs\": \"^6.1.4\",      \"react\": \"^16.11.0\",      \"react-dom\": \"^16.11.0\",      \"react-refresh\": \"^0.6.0\"   }  ```",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**  Feature    Right now babel plugin emits globals: https://github.com/facebook/react/issues/16604        It would be nice to have them configurable. That would allow to use `import.meta` in environments like SystemJS and have simpler implementation:        If you don't mind I could create PR with changes to react-refresh/babel next week.    environment:  ",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** Feature Right now babel plugin emits globals:  It would be nice to have them configurable. That would allow to use `import.meta` in environments like SystemJS and have simpler implementation: If you don't mind I could create PR with changes to react-refresh/babel next week. environment: ",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * feature right babel plugin emits globals : would nice configurable . would allow use ` import.meta ` environment like systemjs simpler implementation : n't mind could create pr change react-refresh/babel next week . environment :",
        "title_stopwords_removal_lemmatization": "react-refresh : add option override $ refreshreg $ $ refreshsig $ better system.js integration"
    },
    {
        "issue_id": 505037687,
        "title": "Make it easier to debug (undefined components) in production",
        "label": [
            "Type: Feature Request",
            "Resolution: Stale"
        ],
        "date": "2019-10-10T05:08:30Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?** Feature\r\n\r\n**What is the current behavior?**\r\n\r\nSo for whatever reason, terser/minification causes a bug where one of my components is undefined during render. What I get is the standard production mode minified error.\r\n\r\nFor some reason this time, I can't seem to do *any* of the following:\r\n\r\n1. See any stack information for the component (React just says \"something somewhere is undefined\")\r\n2. Set a breakpoint on the error point (for some reason with webpack + devtool sourcemap, chrome isn't letting me do a mid-line breakpoint at any place above the error)\r\n3. Disable Reacts error catching temporarily so I can pause on the actual error\r\n4. Use a development version of React with any ease but with the prod settings (I tried turning off both process.env.NODE_ENV checks but then you get an error `It is not supported to run the profiling version of a renderer (for example, react-dom/profiling) without also replacing the scheduler/tracing)`\r\n\r\nA big upgrade here would be to fix all of these (except 2, which is either a Webpack or Chrome bug). Can we get better stacks in production mode? That's the ideal. That with number 3 would be the most helpful: a query like `?disableNiceErrors=true` that prevents React from catching/re-throwing the error later would make it so much easier.\r\n\r\nAs it is now, it's incredibly painful to debug (already an hour into it and without the breakpoints working on minified React it's hard to really even figure out where besides manual code commenting).\r\n\r\nEdit: A fifth would be source maps for react itself in production bundles which may work.",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?** Feature    **What is the current behavior?**    So for whatever reason, terser/minification causes a bug where one of my components is undefined during render. What I get is the standard production mode minified error.    For some reason this time, I can't seem to do *any* of the following:    1. See any stack information for the component (React just says \"something somewhere is undefined\")  2. Set a breakpoint on the error point (for some reason with webpack + devtool sourcemap, chrome isn't letting me do a mid-line breakpoint at any place above the error)  3. Disable Reacts error catching temporarily so I can pause on the actual error  4. Use a development version of React with any ease but with the prod settings (I tried turning off both process.env.NODE_ENV checks but then you get an error `It is not supported to run the profiling version of a renderer (for example, react-dom/profiling) without also replacing the scheduler/tracing)`    A big upgrade here would be to fix all of these (except 2, which is either a Webpack or Chrome bug). Can we get better stacks in production mode? That's the ideal. That with number 3 would be the most helpful: a query like `?disableNiceErrors=true` that prevents React from catching/re-throwing the error later would make it so much easier.    As it is now, it's incredibly painful to debug (already an hour into it and without the breakpoints working on minified React it's hard to really even figure out where besides manual code commenting).    Edit: A fifth would be source maps for react itself in production bundles which may work.",
        "human_words": "**Do you want to request a *feature* or report a *bug*?** Feature    **What is the current behavior?**    So for whatever reason, terser/minification causes a bug where one of my components is undefined during render. What I get is the standard production mode minified error.    For some reason this time, I can't seem to do *any* of the following:    1. See any stack information for the component (React just says \"something somewhere is undefined\")  2. Set a breakpoint on the error point (for some reason with webpack + devtool sourcemap, chrome isn't letting me do a mid-line breakpoint at any place above the error)  3. Disable Reacts error catching temporarily so I can pause on the actual error  4. Use a development version of React with any ease but with the prod settings (I tried turning off both process.env.NODE_ENV checks but then you get an error `It is not supported to run the profiling version of a renderer (for example, react-dom/profiling) without also replacing the scheduler/tracing)`    A big upgrade here would be to fix all of these (except 2, which is either a Webpack or Chrome bug). Can we get better stacks in production mode? That's the ideal. That with number 3 would be the most helpful: a query like `?disableNiceErrors=true` that prevents React from catching/re-throwing the error later would make it so much easier.    As it is now, it's incredibly painful to debug (already an hour into it and without the breakpoints working on minified React it's hard to really even figure out where besides manual code commenting).    Edit: A fifth would be source maps for react itself in production bundles which may work.",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** Feature **What is the current behavior?** So for whatever reason, terser/minification causes a bug where one of my components is undefined during render. What I get is the standard production mode minified error. For some reason this time, I can't seem to do *any* of the following: 1. See any stack information for the component (React just says \"something somewhere is undefined\") 2. Set a breakpoint on the error point (for some reason with webpack + devtool sourcemap, chrome isn't letting me do a mid-line breakpoint at any place above the error) 3. Disable Reacts error catching temporarily so I can pause on the actual error 4. Use a development version of React with any ease but with the prod settings (I tried turning off both process.env.NODE_ENV checks but then you get an error `It is not supported to run the profiling version of a renderer (for example, react-dom/profiling) without also replacing the scheduler/tracing)` A big upgrade here would be to fix all of these (except 2, which is either a Webpack or Chrome bug). Can we get better stacks in production mode? That's the ideal. That with number 3 would be the most helpful: a query like `?disableNiceErrors=true` that prevents React from catching/re-throwing the error later would make it so much easier. As it is now, it's incredibly painful to debug (already an hour into it and without the breakpoints working on minified React it's hard to really even figure out where besides manual code commenting). Edit: A fifth would be source maps for react itself in production bundles which may work.",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * feature * * current behavior ? * * whatever reason , terser/minification cause bug one component undefined render . get standard production mode minified error . reason time , ca n't seem * * following : 1. see stack information component ( react say `` something somewhere undefined '' ) 2. set breakpoint error point ( reason webpack + devtool sourcemap , chrome n't letting mid-line breakpoint place error ) 3. disable reacts error catching temporarily pause actual error 4. use development version react ease prod setting ( tried turning process.env.node_env check get error ` supported run profiling version renderer ( example , react-dom/profiling ) without also replacing scheduler/tracing ) ` big upgrade would fix ( except 2 , either webpack chrome bug ) . get better stack production mode ? 's ideal . number 3 would helpful : query like ` ? disableniceerrors=true ` prevents react catching/re-throwing error later would make much easier . , 's incredibly painful debug ( already hour without breakpoints working minified react 's hard really even figure besides manual code commenting ) . edit : fifth would source map react production bundle may work .",
        "title_stopwords_removal_lemmatization": "make easier debug ( undefined component ) production"
    },
    {
        "issue_id": 504039243,
        "title": "Apply props/state/hooks edits on blur",
        "label": [
            "Type: Feature Request",
            "Component: Developer Tools",
            "Resolution: Stale"
        ],
        "date": "2019-10-08T13:18:53Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\nfeature\r\n**What is the current behavior?**\r\ntrigger by press enter button\r\n**What is the expected behavior?**\r\ntrigger by out of focus or pressing enter button\r\n",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**  feature  **What is the current behavior?**  trigger by press enter button  **What is the expected behavior?**  trigger by out of focus or pressing enter button",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**  feature  **What is the current behavior?**  trigger by press enter button  **What is the expected behavior?**  trigger by out of focus or pressing enter button",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** feature **What is the current behavior?** trigger by press enter button **What is the expected behavior?** trigger by out of focus or pressing enter button",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * feature * * current behavior ? * * trigger press enter button * * expected behavior ? * * trigger focus pressing enter button",
        "title_stopwords_removal_lemmatization": "apply props/state/hooks edits blur"
    },
    {
        "issue_id": 503878186,
        "title": "Add \"search\" functionality to Profiler graphs",
        "label": [
            "Type: Feature Request",
            "Component: Developer Tools",
            "Resolution: Stale"
        ],
        "date": "2019-10-08T07:34:07Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nfeature\r\n**What is the current behavior?**\r\nit\u2018s hard for me to find a component in the profiler tab\r\n**What is the expected behavior?**\r\nadd a search function,just like components tab\r\n\r\n",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**  feature  **What is the current behavior?**  it\u2018s hard for me to find a component in the profiler tab  **What is the expected behavior?**  add a search function,just like components tab",
        "human_words": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**  feature  **What is the current behavior?**  it\u2018s hard for me to find a component in the profiler tab  **What is the expected behavior?**  add a search function,just like components tab",
        "human_words_regrex": " **Do you want to request a *feature* or report a *bug*?** feature **What is the current behavior?** it\u2018s hard for me to find a component in the profiler tab **What is the expected behavior?** add a search function,just like components tab",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * feature * * current behavior ? * * \u2018 hard find component profiler tab * * expected behavior ? * * add search function , like component tab",
        "title_stopwords_removal_lemmatization": "add `` search '' functionality profiler graph"
    },
    {
        "issue_id": 500648882,
        "title": "React DevTools force re-render button",
        "label": [
            "Type: Feature Request",
            "Component: Developer Tools",
            "good first issue (taken)"
        ],
        "date": "2019-10-01T04:14:04Z",
        "status": "closed",
        "description": "I'd like to have a button that forces a re-render of the selected component when clicked. For example, adding a button like this on the right of the component controls:\r\n\r\n![image](https://user-images.githubusercontent.com/1500684/65933573-35b06980-e3cf-11e9-8245-e5bedac5c552.png)\r\n\r\nThis can be accomplished today by adding a new prop and changing the prop, but it's more work than I want to do.\r\n\r\nThis would be useful for use while profiling how a component performs with unnecessary re-renders. Right now I just have a button that's tied to a \"forceRender\" function:\r\n\r\n```jsx\r\nfunction useForceRerender() {\r\n  const [, set] = React.useState()\r\n  return React.useCallback(() => set({}), [])\r\n}\r\n\r\nfunction FilterComponent() {\r\n  const forceRerender = useForceRerender()\r\n \r\n  return (\r\n    <>\r\n      <button onClick={forceRerender}>force rerender</button>\r\n      {/* more JSX */}\r\n    </>\r\n  )\r\n}\r\n```\r\n\r\nWould be cool to have this built-in :)",
        "remove_template_description": "I'd like to have a button that forces a re-render of the selected component when clicked. For example, adding a button like this on the right of the component controls:    ![image](https://user-images.githubusercontent.com/1500684/65933573-35b06980-e3cf-11e9-8245-e5bedac5c552.png)    This can be accomplished today by adding a new prop and changing the prop, but it's more work than I want to do.    This would be useful for use while profiling how a component performs with unnecessary re-renders. Right now I just have a button that's tied to a \"forceRender\" function:    ```jsx  function useForceRerender() {    const [, set] = React.useState()    return React.useCallback(() => set({}), [])  }    function FilterComponent() {    const forceRerender = useForceRerender()       return (      <>        <button onClick={forceRerender}>force rerender</button>        {/* more JSX */}      </>    )  }  ```    Would be cool to have this built-in :)",
        "human_words": "I'd like to have a button that forces a re-render of the selected component when clicked. For example, adding a button like this on the right of the component controls:    ![image](https://user-images.githubusercontent.com/1500684/65933573-35b06980-e3cf-11e9-8245-e5bedac5c552.png)    This can be accomplished today by adding a new prop and changing the prop, but it's more work than I want to do.    This would be useful for use while profiling how a component performs with unnecessary re-renders. Right now I just have a button that's tied to a \"forceRender\" function:        Would be cool to have this built-in :)",
        "human_words_regrex": "I'd like to have a button that forces a re-render of the selected component when clicked. For example, adding a button like this on the right of the component controls: ! This can be accomplished today by adding a new prop and changing the prop, but it's more work than I want to do. This would be useful for use while profiling how a component performs with unnecessary re-renders. Right now I just have a button that's tied to a \"forceRender\" function: Would be cool to have this built-in :)",
        "human_words_stopwords_removal_lemmatization": "'d like button force re-render selected component clicked . example , adding button like right component control : ! accomplished today adding new prop changing prop , 's work want . would useful use profiling component performs unnecessary re-renders . right button 's tied `` forcerender '' function : would cool built-in : )",
        "title_stopwords_removal_lemmatization": "react devtools force re-render button"
    },
    {
        "issue_id": 499405719,
        "title": "react-devtools: tiny feature request (copy to clipboard related)",
        "label": [
            "Type: Feature Request",
            "Component: Developer Tools",
            "good first issue (taken)",
            "Resolution: Stale"
        ],
        "date": "2019-09-27T12:02:35Z",
        "status": "closed",
        "description": "Hey guys, great job with the new devtools \ud83d\udcaf perhaps this request can be put in the backlog for a future release as I think it could be quite useful and could save a few steps for developers. \r\n\r\n**What is the current behavior?**\r\n- Copying data to clipboard stringifies all key-value pairs of an object\r\n- When the keys' values happen to be objects or arrays, the values are given in constructor form rather than seeing the contents of that object/array\r\n\r\nThis is what was copied:\r\n<img width=\"369\" alt=\"Screen Shot 2019-09-27 at 12 24 19\" src=\"https://user-images.githubusercontent.com/30755017/65767498-f4496100-e125-11e9-8f8b-3faa4516d0c2.png\">\r\n\r\nThis is a pasted version in VSCode:\r\n<img width=\"399\" alt=\"Screen Shot 2019-09-27 at 12 24 48\" src=\"https://user-images.githubusercontent.com/30755017/65767486-ee538000-e125-11e9-9886-7dcd165c19db.png\">\r\n\r\n**What is the desired behavior?**\r\n- When I click on \"Copy to clipboard\" in react-devtools, my copied object's data _keys_ and _values_ are in an unstringified format, or at least, I am presented the option to have this copied in an unstringified format\r\n- The _values_ of each key is readable, e.g: if the value is an object, I can see the expanded object and all its key-value pairs clearly as shown here (this is logged into Chrome console from react-devtools)\r\n<img width=\"311\" alt=\"Screen Shot 2019-09-27 at 12 29 11\" src=\"https://user-images.githubusercontent.com/30755017/65767365-99176e80-e125-11e9-98d3-98fd9c4889f9.png\">\r\n\r\n",
        "remove_template_description": "Hey guys, great job with the new devtools \ud83d\udcaf perhaps this request can be put in the backlog for a future release as I think it could be quite useful and could save a few steps for developers.     **What is the current behavior?**  - Copying data to clipboard stringifies all key-value pairs of an object  - When the keys' values happen to be objects or arrays, the values are given in constructor form rather than seeing the contents of that object/array    This is what was copied:  <img width=\"369\" alt=\"Screen Shot 2019-09-27 at 12 24 19\" src=\"https://user-images.githubusercontent.com/30755017/65767498-f4496100-e125-11e9-8f8b-3faa4516d0c2.png\">    This is a pasted version in VSCode:  <img width=\"399\" alt=\"Screen Shot 2019-09-27 at 12 24 48\" src=\"https://user-images.githubusercontent.com/30755017/65767486-ee538000-e125-11e9-9886-7dcd165c19db.png\">    **What is the desired behavior?**  - When I click on \"Copy to clipboard\" in react-devtools, my copied object's data _keys_ and _values_ are in an unstringified format, or at least, I am presented the option to have this copied in an unstringified format  - The _values_ of each key is readable, e.g: if the value is an object, I can see the expanded object and all its key-value pairs clearly as shown here (this is logged into Chrome console from react-devtools)  <img width=\"311\" alt=\"Screen Shot 2019-09-27 at 12 29 11\" src=\"https://user-images.githubusercontent.com/30755017/65767365-99176e80-e125-11e9-98d3-98fd9c4889f9.png\">",
        "human_words": "Hey guys, great job with the new devtools \ud83d\udcaf perhaps this request can be put in the backlog for a future release as I think it could be quite useful and could save a few steps for developers.     **What is the current behavior?**  - Copying data to clipboard stringifies all key-value pairs of an object  - When the keys' values happen to be objects or arrays, the values are given in constructor form rather than seeing the contents of that object/array    This is what was copied:  <img width=\"369\" alt=\"Screen Shot 2019-09-27 at 12 24 19\" src=\"https://user-images.githubusercontent.com/30755017/65767498-f4496100-e125-11e9-8f8b-3faa4516d0c2.png\">    This is a pasted version in VSCode:  <img width=\"399\" alt=\"Screen Shot 2019-09-27 at 12 24 48\" src=\"https://user-images.githubusercontent.com/30755017/65767486-ee538000-e125-11e9-9886-7dcd165c19db.png\">    **What is the desired behavior?**  - When I click on \"Copy to clipboard\" in react-devtools, my copied object's data _keys_ and _values_ are in an unstringified format, or at least, I am presented the option to have this copied in an unstringified format  - The _values_ of each key is readable, e.g: if the value is an object, I can see the expanded object and all its key-value pairs clearly as shown here (this is logged into Chrome console from react-devtools)  <img width=\"311\" alt=\"Screen Shot 2019-09-27 at 12 29 11\" src=\"https://user-images.githubusercontent.com/30755017/65767365-99176e80-e125-11e9-98d3-98fd9c4889f9.png\">",
        "human_words_regrex": "Hey guys, great job with the new devtools \ud83d\udcaf perhaps this request can be put in the backlog for a future release as I think it could be quite useful and could save a few steps for developers. **What is the current behavior?** - Copying data to clipboard stringifies all key-value pairs of an object - When the keys' values happen to be objects or arrays, the values are given in constructor form rather than seeing the contents of that object/array This is what was copied: <img width=\"369\" alt=\"Screen Shot 2019-09-27 at 12 24 19\" src=\" This is a pasted version in VSCode: <img width=\"399\" alt=\"Screen Shot 2019-09-27 at 12 24 48\" src=\" **What is the desired behavior?** - When I click on \"Copy to clipboard\" in react-devtools, my copied object's data _keys_ and _values_ are in an unstringified format, or at least, I am presented the option to have this copied in an unstringified format - The _values_ of each key is readable, e.g: if the value is an object, I can see the expanded object and all its key-value pairs clearly as shown here (this is logged into Chrome console from react-devtools) <img width=\"311\" alt=\"Screen Shot 2019-09-27 at 12 29 11\" src=\"",
        "human_words_stopwords_removal_lemmatization": "hey guy , great job new devtools \ud83d\udcaf perhaps request put backlog future release think could quite useful could save step developer . * * current behavior ? * * - copying data clipboard stringifies key-value pair object - key ' value happen object array , value given constructor form rather seeing content object/array copied : < img width= '' 369 '' alt= '' screen shot 2019-09-27 12 24 19 '' src= '' pasted version vscode : < img width= '' 399 '' alt= '' screen shot 2019-09-27 12 24 48 '' src= '' * * desired behavior ? * * - click `` copy clipboard '' react-devtools , copied object 's data _keys_ _values_ unstringified format , least , presented option copied unstringified format - _values_ key readable , e.g : value object , see expanded object key-value pair clearly shown ( logged chrome console react-devtools ) < img width= '' 311 '' alt= '' screen shot 2019-09-27 12 29 11 '' src= ''",
        "title_stopwords_removal_lemmatization": "react-devtools : tiny feature request ( copy clipboard related )"
    },
    {
        "issue_id": 487545630,
        "title": "Enhance React DevTools \"Why did this render?\" for values nested in prop objects",
        "label": [
            "Type: Feature Request",
            "Component: Developer Tools"
        ],
        "date": "2019-08-30T15:30:57Z",
        "status": "closed",
        "description": "\r\n**Do you want to request a *feature* or report a *bug*?**\r\n*feature*\r\n\r\n**What is the current behavior?**\r\n[as demonstrated here, \"Why did this render?\"](https://github.com/facebook/react/issues/16437#issuecomment-524892514) does a great job reporting what prop changed, but it does not yet report which _nested_ value changed for props that are comprised of nested objects.\r\n\r\n**What is the expected behavior?**\r\nThe \"why did this render?\" shows a collapsible tree with the \"leaf\" value that changed inside the prop object displayed.\r\n\r\nA couple use cases this would benefit:\r\nIn some cases, it is most convenient creating props that are nested objects. For instance, maybe you need to pass an object to a library, and you'd like to avoid storing the individual object items as separate prop variables such that you don't need to redefine them together as a dict later on, but changes are due to a single element in the dict that you'd like visibility on in react devTools.\r\n\r\nIn rarer cases, it is unavoidable having props that aren't nested objects. For instance, how could I preserve the `.prototype` key of my `props` object without react stripping it? If I wrap my props inside an object, that key can be preserved. But now *all* my props are considered 1 prop to the profiler and I have no visibility on which prop changed. With this change, I could expand the tree and drill down to which individual values changed.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nNew feature never before released in React DevTools. I am using `16.8.6`\r\n",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**  *feature*    **What is the current behavior?**  [as demonstrated here, \"Why did this render?\"](https://github.com/facebook/react/issues/16437#issuecomment-524892514) does a great job reporting what prop changed, but it does not yet report which _nested_ value changed for props that are comprised of nested objects.    **What is the expected behavior?**  The \"why did this render?\" shows a collapsible tree with the \"leaf\" value that changed inside the prop object displayed.    A couple use cases this would benefit:  In some cases, it is most convenient creating props that are nested objects. For instance, maybe you need to pass an object to a library, and you'd like to avoid storing the individual object items as separate prop variables such that you don't need to redefine them together as a dict later on, but changes are due to a single element in the dict that you'd like visibility on in react devTools.    In rarer cases, it is unavoidable having props that aren't nested objects. For instance, how could I preserve the `.prototype` key of my `props` object without react stripping it? If I wrap my props inside an object, that key can be preserved. But now *all* my props are considered 1 prop to the profiler and I have no visibility on which prop changed. With this change, I could expand the tree and drill down to which individual values changed.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    New feature never before released in React DevTools. I am using `16.8.6`",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**  *feature*    **What is the current behavior?**  [as demonstrated here, \"Why did this render?\"](https://github.com/facebook/react/issues/16437#issuecomment-524892514) does a great job reporting what prop changed, but it does not yet report which _nested_ value changed for props that are comprised of nested objects.    **What is the expected behavior?**  The \"why did this render?\" shows a collapsible tree with the \"leaf\" value that changed inside the prop object displayed.    A couple use cases this would benefit:  In some cases, it is most convenient creating props that are nested objects. For instance, maybe you need to pass an object to a library, and you'd like to avoid storing the individual object items as separate prop variables such that you don't need to redefine them together as a dict later on, but changes are due to a single element in the dict that you'd like visibility on in react devTools.    In rarer cases, it is unavoidable having props that aren't nested objects. For instance, how could I preserve the `.prototype` key of my `props` object without react stripping it? If I wrap my props inside an object, that key can be preserved. But now *all* my props are considered 1 prop to the profiler and I have no visibility on which prop changed. With this change, I could expand the tree and drill down to which individual values changed.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    New feature never before released in React DevTools. I am using `16.8.6`",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** *feature* **What is the current behavior?**  does a great job reporting what prop changed, but it does not yet report which _nested_ value changed for props that are comprised of nested objects. **What is the expected behavior?** The \"why did this render?\" shows a collapsible tree with the \"leaf\" value that changed inside the prop object displayed. A couple use cases this would benefit: In some cases, it is most convenient creating props that are nested objects. For instance, maybe you need to pass an object to a library, and you'd like to avoid storing the individual object items as separate prop variables such that you don't need to redefine them together as a dict later on, but changes are due to a single element in the dict that you'd like visibility on in react devTools. In rarer cases, it is unavoidable having props that aren't nested objects. For instance, how could I preserve the `.prototype` key of my `props` object without react stripping it? If I wrap my props inside an object, that key can be preserved. But now *all* my props are considered 1 prop to the profiler and I have no visibility on which prop changed. With this change, I could expand the tree and drill down to which individual values changed. **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** New feature never before released in React DevTools. I am using `16.8.6`",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * * feature * * * current behavior ? * * great job reporting prop changed , yet report _nested_ value changed prop comprised nested object . * * expected behavior ? * * `` render ? '' show collapsible tree `` leaf '' value changed inside prop object displayed . couple use case would benefit : case , convenient creating prop nested object . instance , maybe need pas object library , 'd like avoid storing individual object item separate prop variable n't need redefine together dict later , change due single element dict 'd like visibility react devtools . rarer case , unavoidable prop n't nested object . instance , could preserve ` .prototype ` key ` prop ` object without react stripping ? wrap prop inside object , key preserved . * * prop considered 1 prop profiler visibility prop changed . change , could expand tree drill individual value changed . * * version react , browser / o affected issue ? work previous version react ? * * new feature never released react devtools . using ` 16.8.6 `",
        "title_stopwords_removal_lemmatization": "enhance react devtools `` render ? '' value nested prop object"
    },
    {
        "issue_id": 484103767,
        "title": "Devtools: Impossible to debug firefox webextension moz-extension: pages due to strict CSP",
        "label": [
            "Type: Feature Request",
            "Component: Developer Tools",
            "Resolution: Stale"
        ],
        "date": "2019-08-22T16:46:40Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\n* feature request\r\n* Original issue is: https://github.com/facebook/react-devtools/issues/922\r\n   * There are more details.\r\n* Mozilla's Bugzilla: https://bugzilla.mozilla.org/show_bug.cgi?id=1573027\r\n\r\n**What is the current behavior?**\r\n\r\nThe react-devtools toolbar button does not light up and clicking on it says \"This page does not appear to be using react\". This is probably since extensions are not allowed to inject scripts into other extensions' pages.\r\n\r\n**What is the expected behavior?**\r\n\r\nThe react-devtools toolbar button should light up and the addon should be able to debug the page\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nThis is still reproducible\r\n\r\n* Firefox v68~\r\n* react devtools v4.0.5\r\n* react v16.9\r\n",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**    * feature request  * Original issue is: https://github.com/facebook/react-devtools/issues/922     * There are more details.  * Mozilla's Bugzilla: https://bugzilla.mozilla.org/show_bug.cgi?id=1573027    **What is the current behavior?**    The react-devtools toolbar button does not light up and clicking on it says \"This page does not appear to be using react\". This is probably since extensions are not allowed to inject scripts into other extensions' pages.    **What is the expected behavior?**    The react-devtools toolbar button should light up and the addon should be able to debug the page    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    This is still reproducible    * Firefox v68~  * react devtools v4.0.5  * react v16.9",
        "human_words": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**    * feature request  * Original issue is: https://github.com/facebook/react-devtools/issues/922     * There are more details.  * Mozilla's Bugzilla: https://bugzilla.mozilla.org/show_bug.cgi?id=1573027    **What is the current behavior?**    The react-devtools toolbar button does not light up and clicking on it says \"This page does not appear to be using react\". This is probably since extensions are not allowed to inject scripts into other extensions' pages.    **What is the expected behavior?**    The react-devtools toolbar button should light up and the addon should be able to debug the page    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    This is still reproducible    * Firefox v68~  * react devtools v4.0.5  * react v16.9",
        "human_words_regrex": " **Do you want to request a *feature* or report a *bug*?** * feature request * Original issue is:  * There are more details. * Mozilla's Bugzilla:  **What is the current behavior?** The react-devtools toolbar button does not light up and clicking on it says \"This page does not appear to be using react\". This is probably since extensions are not allowed to inject scripts into other extensions' pages. **What is the expected behavior?** The react-devtools toolbar button should light up and the addon should be able to debug the page **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** This is still reproducible * Firefox v68~ * react devtools v4.0.5 * react v16.9",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * * feature request * original issue : * detail . * mozilla 's bugzilla : * * current behavior ? * * react-devtools toolbar button light clicking say `` page appear using react '' . probably since extension allowed inject script extension ' page . * * expected behavior ? * * react-devtools toolbar button light addon able debug page * * version react , browser / o affected issue ? work previous version react ? * * still reproducible * firefox v68~ * react devtools v4.0.5 * react v16.9",
        "title_stopwords_removal_lemmatization": "devtools : impossible debug firefox webextension moz-extension : page due strict csp"
    },
    {
        "issue_id": 484034081,
        "title": "Show property type of value (string,int,etc) on state/props.",
        "label": [
            "Resolution: Duplicate",
            "Type: Feature Request",
            "Component: Developer Tools"
        ],
        "date": "2019-08-22T14:37:38Z",
        "status": "closed",
        "description": "**feature**\r\n\r\n**What is the current behavior?**\r\nOn the new developer tool you are unable to see what property type the value. You used to be able to see if the value was a string or int because of the quotation marks (for example id: \"1\" (string) or id: 1 (int)). Both string and int are shown without quotes.\r\n\r\n**What is the expected behavior?**\r\nI want to see if the value inside the prop or state is an string or integer by using quotation marks on the value.\r\n`id: \"1\"`\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nI'm using version:\r\n4.0.5 (8/19/2019)\r\n\r\nDid this work in previous versions of React?\r\nYes, 3.*",
        "remove_template_description": "**feature**    **What is the current behavior?**  On the new developer tool you are unable to see what property type the value. You used to be able to see if the value was a string or int because of the quotation marks (for example id: \"1\" (string) or id: 1 (int)). Both string and int are shown without quotes.    **What is the expected behavior?**  I want to see if the value inside the prop or state is an string or integer by using quotation marks on the value.  `id: \"1\"`    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  I'm using version:  4.0.5 (8/19/2019)    Did this work in previous versions of React?  Yes, 3.*",
        "human_words": "**feature**    **What is the current behavior?**  On the new developer tool you are unable to see what property type the value. You used to be able to see if the value was a string or int because of the quotation marks (for example id: \"1\" (string) or id: 1 (int)). Both string and int are shown without quotes.    **What is the expected behavior?**  I want to see if the value inside the prop or state is an string or integer by using quotation marks on the value.  `id: \"1\"`    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  I'm using version:  4.0.5 (8/19/2019)    Did this work in previous versions of React?  Yes, 3.*",
        "human_words_regrex": "**feature** **What is the current behavior?** On the new developer tool you are unable to see what property type the value. You used to be able to see if the value was a string or int because of the quotation marks (for example id: \"1\" (string) or id: 1 (int)). Both string and int are shown without quotes. **What is the expected behavior?** I want to see if the value inside the prop or state is an string or integer by using quotation marks on the value. `id: \"1\"` **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** I'm using version: 4.0.5 (8/19/2019) Did this work in previous versions of React? Yes, 3.*",
        "human_words_stopwords_removal_lemmatization": "* * feature * * * * current behavior ? * * new developer tool unable see property type value . used able see value string int quotation mark ( example id : `` 1 '' ( string ) id : 1 ( int ) ) . string int shown without quote . * * expected behavior ? * * want see value inside prop state string integer using quotation mark value . ` id : `` 1 '' ` * * version react , browser / o affected issue ? work previous version react ? * * 'm using version : 4.0.5 ( 8/19/2019 ) work previous version react ? yes , 3 . *",
        "title_stopwords_removal_lemmatization": "show property type value ( string , int , etc ) state/props ."
    },
    {
        "issue_id": 483964734,
        "title": "DevTools: Ability to save inspected values as global variable (as it was in previous version)",
        "label": [
            "Type: Feature Request",
            "Component: Developer Tools",
            "Resolution: Stale"
        ],
        "date": "2019-08-22T12:29:14Z",
        "status": "closed",
        "description": "Hi, I really like new dev tools (4.0.5), but I would like to request one useful feature.\r\n\r\nIn previous version it was possible to save inspected value (prop/state/context) and its parts as a global variable using context menu->store as global variable, so it can be easily be accessed through console using `$tmp{n}`. In current version this is behaviour was replaced be creating new \"bug\" button which will just print all values in console. Unfortunately it's hard to navigate through this object, because $_ in console will return undefined. And in order to access it you need to expand group, find desired property and open context menu->store as global variable. \r\nIt would be perfect if you combine these 2 approaches so it would be possible to both print values using \"bug\" button and opening context menu directly in react dev tools panel wihtout need of intermediate step. \r\n\r\nThanks! \r\n\r\n",
        "remove_template_description": "Hi, I really like new dev tools (4.0.5), but I would like to request one useful feature.    In previous version it was possible to save inspected value (prop/state/context) and its parts as a global variable using context menu->store as global variable, so it can be easily be accessed through console using `$tmp{n}`. In current version this is behaviour was replaced be creating new \"bug\" button which will just print all values in console. Unfortunately it's hard to navigate through this object, because $_ in console will return undefined. And in order to access it you need to expand group, find desired property and open context menu->store as global variable.   It would be perfect if you combine these 2 approaches so it would be possible to both print values using \"bug\" button and opening context menu directly in react dev tools panel wihtout need of intermediate step.     Thanks!",
        "human_words": "Hi, I really like new dev tools (4.0.5), but I would like to request one useful feature.    In previous version it was possible to save inspected value (prop/state/context) and its parts as a global variable using context menu->store as global variable, so it can be easily be accessed through console using `$tmp{n}`. In current version this is behaviour was replaced be creating new \"bug\" button which will just print all values in console. Unfortunately it's hard to navigate through this object, because $_ in console will return undefined. And in order to access it you need to expand group, find desired property and open context menu->store as global variable.   It would be perfect if you combine these 2 approaches so it would be possible to both print values using \"bug\" button and opening context menu directly in react dev tools panel wihtout need of intermediate step.     Thanks!",
        "human_words_regrex": "Hi, I really like new dev tools (4.0.5), but I would like to request one useful feature. In previous version it was possible to save inspected value (prop/state/context) and its parts as a global variable using context menu->store as global variable, so it can be easily be accessed through console using `$tmp{n}`. In current version this is behaviour was replaced be creating new \"bug\" button which will just print all values in console. Unfortunately it's hard to navigate through this object, because $_ in console will return undefined. And in order to access it you need to expand group, find desired property and open context menu->store as global variable. It would be perfect if you combine these 2 approaches so it would be possible to both print values using \"bug\" button and opening context menu directly in react dev tools panel wihtout need of intermediate step. Thanks!",
        "human_words_stopwords_removal_lemmatization": "hi , really like new dev tool ( 4.0.5 ) , would like request one useful feature . previous version possible save inspected value ( prop/state/context ) part global variable using context menu- > store global variable , easily accessed console using ` $ tmp { n } ` . current version behaviour replaced creating new `` bug '' button print value console . unfortunately 's hard navigate object , $ _ console return undefined . order access need expand group , find desired property open context menu- > store global variable . would perfect combine 2 approach would possible print value using `` bug '' button opening context menu directly react dev tool panel wihtout need intermediate step . thanks !",
        "title_stopwords_removal_lemmatization": "devtools : ability save inspected value global variable ( previous version )"
    },
    {
        "issue_id": 481769358,
        "title": "New React Developer Tools does not clearly indicate empty object or array",
        "label": [
            "Type: Feature Request",
            "Component: Developer Tools"
        ],
        "date": "2019-08-16T20:16:56Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug/unexpected behavior.\r\n\r\n**What is the current behavior?**\r\n\r\nWhen an object or array is empty, there's no arrow to expand and see that it's empty, nor is there an `(empty)` indication. Initially, I was concerned that I couldn't expand any object or array from the new React DevTools due to this.\r\n\r\n![Screen Shot 2019-08-16 at 3 11 35 PM](https://user-images.githubusercontent.com/11951801/63195539-7aa75900-c038-11e9-95fe-4754f7d14693.png)\r\n\r\n**What is the expected behavior?**\r\n\r\nI would expect to either be able to expand the empty object, or to see `(empty)` next to the non-expandable object.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nChrome version: 76.0.3809.100 (Official Build) (64-bit)\r\nReact Developer Tools Version: 4.0.2 (8/15/2019)\r\n\r\n[Reference discussion on Twitter](https://twitter.com/taniarascia/status/1162441422496325633)\r\n",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**    Bug/unexpected behavior.    **What is the current behavior?**    When an object or array is empty, there's no arrow to expand and see that it's empty, nor is there an `(empty)` indication. Initially, I was concerned that I couldn't expand any object or array from the new React DevTools due to this.    ![Screen Shot 2019-08-16 at 3 11 35 PM](https://user-images.githubusercontent.com/11951801/63195539-7aa75900-c038-11e9-95fe-4754f7d14693.png)    **What is the expected behavior?**    I would expect to either be able to expand the empty object, or to see `(empty)` next to the non-expandable object.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    Chrome version: 76.0.3809.100 (Official Build) (64-bit)  React Developer Tools Version: 4.0.2 (8/15/2019)    [Reference discussion on Twitter](https://twitter.com/taniarascia/status/1162441422496325633)",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**    Bug/unexpected behavior.    **What is the current behavior?**    When an object or array is empty, there's no arrow to expand and see that it's empty, nor is there an `(empty)` indication. Initially, I was concerned that I couldn't expand any object or array from the new React DevTools due to this.    ![Screen Shot 2019-08-16 at 3 11 35 PM](https://user-images.githubusercontent.com/11951801/63195539-7aa75900-c038-11e9-95fe-4754f7d14693.png)    **What is the expected behavior?**    I would expect to either be able to expand the empty object, or to see `(empty)` next to the non-expandable object.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    Chrome version: 76.0.3809.100 (Official Build) (64-bit)  React Developer Tools Version: 4.0.2 (8/15/2019)    [Reference discussion on Twitter](https://twitter.com/taniarascia/status/1162441422496325633)",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** Bug/unexpected behavior. **What is the current behavior?** When an object or array is empty, there's no arrow to expand and see that it's empty, nor is there an `(empty)` indication. Initially, I was concerned that I couldn't expand any object or array from the new React DevTools due to this. ! **What is the expected behavior?** I would expect to either be able to expand the empty object, or to see `(empty)` next to the non-expandable object. **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** Chrome version: 76.0.3809.100 (Official Build) (64-bit) React Developer Tools Version: 4.0.2 (8/15/2019) ",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * bug/unexpected behavior . * * current behavior ? * * object array empty , 's arrow expand see 's empty , ` ( empty ) ` indication . initially , concerned could n't expand object array new react devtools due . ! * * expected behavior ? * * would expect either able expand empty object , see ` ( empty ) ` next non-expandable object . * * version react , browser / o affected issue ? work previous version react ? * * chrome version : 76.0.3809.100 ( official build ) ( 64-bit ) react developer tool version : 4.0.2 ( 8/15/2019 )",
        "title_stopwords_removal_lemmatization": "new react developer tool clearly indicate empty object array"
    },
    {
        "issue_id": 481763401,
        "title": "New Devtools Cannot Expand Obervables",
        "label": [
            "Type: Feature Request",
            "Component: Developer Tools"
        ],
        "date": "2019-08-16T19:59:04Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nDevtools used to be able to expand observables created by Mobx. With the new update that is no longer possible.\r\n![image](https://user-images.githubusercontent.com/3083189/63194767-18495b00-c02e-11e9-95d2-1c83edbf2f26.png)\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\nhttps://codesandbox.io/embed/clever-blackwell-h0nzb\r\n\r\nCheck the props of the wrappedComponent in devtools. store.things does not expand.\r\n\r\n**What is the expected behavior?**\r\nDevtools should expand Observables as it does any other object.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nThis only seems to be an issue with Observables created by Mob v4. v5 works as expected.\r\n",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**  Bug    **What is the current behavior?**  Devtools used to be able to expand observables created by Mobx. With the new update that is no longer possible.  ![image](https://user-images.githubusercontent.com/3083189/63194767-18495b00-c02e-11e9-95d2-1c83edbf2f26.png)    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**  https://codesandbox.io/embed/clever-blackwell-h0nzb    Check the props of the wrappedComponent in devtools. store.things does not expand.    **What is the expected behavior?**  Devtools should expand Observables as it does any other object.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  This only seems to be an issue with Observables created by Mob v4. v5 works as expected.",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**  Bug    **What is the current behavior?**  Devtools used to be able to expand observables created by Mobx. With the new update that is no longer possible.  ![image](https://user-images.githubusercontent.com/3083189/63194767-18495b00-c02e-11e9-95d2-1c83edbf2f26.png)    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**  https://codesandbox.io/embed/clever-blackwell-h0nzb    Check the props of the wrappedComponent in devtools. store.things does not expand.    **What is the expected behavior?**  Devtools should expand Observables as it does any other object.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  This only seems to be an issue with Observables created by Mob v4. v5 works as expected.",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** Bug **What is the current behavior?** Devtools used to be able to expand observables created by Mobx. With the new update that is no longer possible. ! **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle ( or CodeSandbox ( example below:**  Check the props of the wrappedComponent in devtools. store.things does not expand. **What is the expected behavior?** Devtools should expand Observables as it does any other object. **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** This only seems to be an issue with Observables created by Mob v4. v5 works as expected.",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * bug * * current behavior ? * * devtools used able expand observables created mobx . new update longer possible . ! * * current behavior bug , please provide step reproduce possible minimal demo problem . bug get fixed much faster run code n't dependency react . paste link jsfiddle ( codesandbox ( example : * * check prop wrappedcomponent devtools . store.things expand . * * expected behavior ? * * devtools expand observables object . * * version react , browser / o affected issue ? work previous version react ? * * seems issue observables created mob v4 . v5 work expected .",
        "title_stopwords_removal_lemmatization": "new devtools expand obervables"
    },
    {
        "issue_id": 481669723,
        "title": "New React DevTools can't access immutable.js objects?",
        "label": [
            "Type: Feature Request",
            "Component: Developer Tools"
        ],
        "date": "2019-08-16T15:42:33Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nWhen the state or props are formed by Immutable.js objects, react devtools cannot expand it nor copy to temporal variable anymore.\r\n![Screenshot from 2019-08-16 16-18-09](https://user-images.githubusercontent.com/28344917/63174215-c90d2580-c041-11e9-847c-7bbd153399f9.png)\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://codesandbox.io/s/withered-cherry-h3dfh\r\n\r\n**What is the expected behavior?**\r\nBe able to inspect the value of the immutable object or at least, copy it into a temporal variable.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact 16.8.6\r\nChrome Version 70.0.3538.77 (Official Build) (64-bit)",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**  Bug    **What is the current behavior?**  When the state or props are formed by Immutable.js objects, react devtools cannot expand it nor copy to temporal variable anymore.  ![Screenshot from 2019-08-16 16-18-09](https://user-images.githubusercontent.com/28344917/63174215-c90d2580-c041-11e9-847c-7bbd153399f9.png)    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**    https://codesandbox.io/s/withered-cherry-h3dfh    **What is the expected behavior?**  Be able to inspect the value of the immutable object or at least, copy it into a temporal variable.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  React 16.8.6  Chrome Version 70.0.3538.77 (Official Build) (64-bit)",
        "human_words": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**  Bug    **What is the current behavior?**  When the state or props are formed by Immutable.js objects, react devtools cannot expand it nor copy to temporal variable anymore.  ![Screenshot from 2019-08-16 16-18-09](https://user-images.githubusercontent.com/28344917/63174215-c90d2580-c041-11e9-847c-7bbd153399f9.png)    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**    https://codesandbox.io/s/withered-cherry-h3dfh    **What is the expected behavior?**  Be able to inspect the value of the immutable object or at least, copy it into a temporal variable.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  React 16.8.6  Chrome Version 70.0.3538.77 (Official Build) (64-bit)",
        "human_words_regrex": " **Do you want to request a *feature* or report a *bug*?** Bug **What is the current behavior?** When the state or props are formed by Immutable.js objects, react devtools cannot expand it nor copy to temporal variable anymore. ! **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle ( or CodeSandbox ( example below:**  **What is the expected behavior?** Be able to inspect the value of the immutable object or at least, copy it into a temporal variable. **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** React 16.8.6 Chrome Version 70.0.3538.77 (Official Build) (64-bit)",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * bug * * current behavior ? * * state prop formed immutable.js object , react devtools expand copy temporal variable anymore . ! * * current behavior bug , please provide step reproduce possible minimal demo problem . bug get fixed much faster run code n't dependency react . paste link jsfiddle ( codesandbox ( example : * * * * expected behavior ? * * able inspect value immutable object least , copy temporal variable . * * version react , browser / o affected issue ? work previous version react ? * * react 16.8.6 chrome version 70.0.3538.77 ( official build ) ( 64-bit )",
        "title_stopwords_removal_lemmatization": "new react devtools ca n't access immutable.js object ?"
    },
    {
        "issue_id": 478550295,
        "title": "[Feature Request] Finish/normalize Portal API",
        "label": [
            "Type: Feature Request",
            "Resolution: Stale"
        ],
        "date": "2019-08-08T15:43:18Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nfeature\r\n\r\n**What is the expected behavior?**\r\n\r\nPortals are in a weird state. The core `react` knows about them but you can only create them from other libs (e.g. `ReactDOM`). You have to branch your code because they can\u2019t be server-side rendered. And so on.\r\n\r\nThis is just a pre-RFC to brainstorm ways that Portals can become first-class citizens:\r\n\r\n* Extend `React.createRef()` to allow an optional renderer-specific argument (e.g. the DOM element), matching `useRef()`\r\n* Add `React.createPortal(child, ref)` (*note the use of `ref` rather than a e.g. a direct DOM element*)\r\n* Deprecate `ReactDOM.createPortal()`\r\n\r\nNow with some thought into the structure of your app with modals, they could be e.g. server-side rendered with:\r\n\r\n```\r\nfunction App(props) {\r\n  const modal = useRef(null)\r\n  return (\r\n    <div>\r\n      <ModalContext.Provider value={modal}>\r\n        <div>{props.content}</div>\r\n      </ModalContext.Provider>\r\n      <div ref={modal} />\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction Modal(props) {\r\n  const modal = useContext(ModalContext)\r\n  return React.createPortal(\r\n    props.children,\r\n    modal,\r\n  )\r\n}\r\n\r\n// Somewhere in {props.content} tree...\r\nreturn (\r\n  <>\r\n    {visible && (\r\n      <Modal>\r\n        Hello, World!\r\n      </Modal>\r\n    )}\r\n  </>\r\n)\r\n```\r\n\r\nAfter `ReactDOM.createPortal(...)` is deprecated, legacy web or those with no need to SSR portals can simply upgrade with:\r\n\r\n```\r\nthis.el = React.createRef(document.createElement('div'))\r\n```\r\n\r\nfor the same behavior.\r\n\r\nAs an initial version, React can error if `ref.current` is null when it goes to mount the portal. Some sort of dirty flag could be considered separately if proven necessary, but with the pattern proposed above, it shouldn\u2019t be necessary as the portal host would *always* be mounted first as a natural consequence of how React works.",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**    feature    **What is the expected behavior?**    Portals are in a weird state. The core `react` knows about them but you can only create them from other libs (e.g. `ReactDOM`). You have to branch your code because they can\u2019t be server-side rendered. And so on.    This is just a pre-RFC to brainstorm ways that Portals can become first-class citizens:    * Extend `React.createRef()` to allow an optional renderer-specific argument (e.g. the DOM element), matching `useRef()`  * Add `React.createPortal(child, ref)` (*note the use of `ref` rather than a e.g. a direct DOM element*)  * Deprecate `ReactDOM.createPortal()`    Now with some thought into the structure of your app with modals, they could be e.g. server-side rendered with:    ```  function App(props) {    const modal = useRef(null)    return (      <div>        <ModalContext.Provider value={modal}>          <div>{props.content}</div>        </ModalContext.Provider>        <div ref={modal} />      </div>    )  }    function Modal(props) {    const modal = useContext(ModalContext)    return React.createPortal(      props.children,      modal,    )  }    // Somewhere in {props.content} tree...  return (    <>      {visible && (        <Modal>          Hello, World!        </Modal>      )}    </>  )  ```    After `ReactDOM.createPortal(...)` is deprecated, legacy web or those with no need to SSR portals can simply upgrade with:    ```  this.el = React.createRef(document.createElement('div'))  ```    for the same behavior.    As an initial version, React can error if `ref.current` is null when it goes to mount the portal. Some sort of dirty flag could be considered separately if proven necessary, but with the pattern proposed above, it shouldn\u2019t be necessary as the portal host would *always* be mounted first as a natural consequence of how React works.",
        "human_words": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**    feature    **What is the expected behavior?**    Portals are in a weird state. The core `react` knows about them but you can only create them from other libs (e.g. `ReactDOM`). You have to branch your code because they can\u2019t be server-side rendered. And so on.    This is just a pre-RFC to brainstorm ways that Portals can become first-class citizens:    * Extend `React.createRef()` to allow an optional renderer-specific argument (e.g. the DOM element), matching `useRef()`  * Add `React.createPortal(child, ref)` (*note the use of `ref` rather than a e.g. a direct DOM element*)  * Deprecate `ReactDOM.createPortal()`    Now with some thought into the structure of your app with modals, they could be e.g. server-side rendered with:        After `ReactDOM.createPortal(...)` is deprecated, legacy web or those with no need to SSR portals can simply upgrade with:        for the same behavior.    As an initial version, React can error if `ref.current` is null when it goes to mount the portal. Some sort of dirty flag could be considered separately if proven necessary, but with the pattern proposed above, it shouldn\u2019t be necessary as the portal host would *always* be mounted first as a natural consequence of how React works.",
        "human_words_regrex": " **Do you want to request a *feature* or report a *bug*?** feature **What is the expected behavior?** Portals are in a weird state. The core `react` knows about them but you can only create them from other libs (e.g. `ReactDOM`). You have to branch your code because they can\u2019t be server-side rendered. And so on. This is just a pre-RFC to brainstorm ways that Portals can become first-class citizens: * Extend `React.createRef()` to allow an optional renderer-specific argument (e.g. the DOM element), matching `useRef()` * Add `React.createPortal(child, ref)` (*note the use of `ref` rather than a e.g. a direct DOM element*) * Deprecate `ReactDOM.createPortal()` Now with some thought into the structure of your app with modals, they could be e.g. server-side rendered with: After `ReactDOM.createPortal(...)` is deprecated, legacy web or those with no need to SSR portals can simply upgrade with: for the same behavior. As an initial version, React can error if `ref.current` is null when it goes to mount the portal. Some sort of dirty flag could be considered separately if proven necessary, but with the pattern proposed above, it shouldn\u2019t be necessary as the portal host would *always* be mounted first as a natural consequence of how React works.",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * feature * * expected behavior ? * * portal weird state . core ` react ` know create libs ( e.g . ` reactdom ` ) . branch code \u2019 server-side rendered . . pre-rfc brainstorm way portal become first-class citizen : * extend ` react.createref ( ) ` allow optional renderer-specific argument ( e.g . dom element ) , matching ` useref ( ) ` * add ` react.createportal ( child , ref ) ` ( * note use ` ref ` rather e.g . direct dom element * ) * deprecate ` reactdom.createportal ( ) ` thought structure app modal , could e.g . server-side rendered : ` reactdom.createportal ( ... ) ` deprecated , legacy web need ssr portal simply upgrade : behavior . initial version , react error ` ref.current ` null go mount portal . sort dirty flag could considered separately proven necessary , pattern proposed , \u2019 necessary portal host would * always * mounted first natural consequence react work .",
        "title_stopwords_removal_lemmatization": "[ feature request ] finish/normalize portal api"
    },
    {
        "issue_id": 460540822,
        "title": "Collapsible Error Dialogs for the Ecosystem",
        "label": [
            "Type: Feature Request",
            "Component: Developer Tools",
            "React Core Team"
        ],
        "date": "2019-06-25T17:09:07Z",
        "status": "open",
        "description": "Spinoff from https://github.com/facebook/react/pull/15797#issuecomment-504782329.\r\n\r\nBoth in React Native and Create React App, redboxes are full screen. But in React, most errors are recoverable. Even with accidental runtime crashes it's useful to look \"underneath\" to see whether your boundary worked as expected, and to have an idea of the end user experience.\r\n\r\nWe could solve this with a collapsed-by-default floating error panel that just shows a list of messages. You can click to expand. We could also use this as an opportunity to unify the RN and web designs.",
        "remove_template_description": "Spinoff from https://github.com/facebook/react/pull/15797#issuecomment-504782329.    Both in React Native and Create React App, redboxes are full screen. But in React, most errors are recoverable. Even with accidental runtime crashes it's useful to look \"underneath\" to see whether your boundary worked as expected, and to have an idea of the end user experience.    We could solve this with a collapsed-by-default floating error panel that just shows a list of messages. You can click to expand. We could also use this as an opportunity to unify the RN and web designs.",
        "human_words": "Spinoff from https://github.com/facebook/react/pull/15797#issuecomment-504782329.    Both in React Native and Create React App, redboxes are full screen. But in React, most errors are recoverable. Even with accidental runtime crashes it's useful to look \"underneath\" to see whether your boundary worked as expected, and to have an idea of the end user experience.    We could solve this with a collapsed-by-default floating error panel that just shows a list of messages. You can click to expand. We could also use this as an opportunity to unify the RN and web designs.",
        "human_words_regrex": "Spinoff from  Both in React Native and Create React App, redboxes are full screen. But in React, most errors are recoverable. Even with accidental runtime crashes it's useful to look \"underneath\" to see whether your boundary worked as expected, and to have an idea of the end user experience. We could solve this with a collapsed-by-default floating error panel that just shows a list of messages. You can click to expand. We could also use this as an opportunity to unify the RN and web designs.",
        "human_words_stopwords_removal_lemmatization": "spinoff react native create react app , redboxes full screen . react , error recoverable . even accidental runtime crash 's useful look `` underneath '' see whether boundary worked expected , idea end user experience . could solve collapsed-by-default floating error panel show list message . click expand . could also use opportunity unify rn web design .",
        "title_stopwords_removal_lemmatization": "collapsible error dialog ecosystem"
    },
    {
        "issue_id": 460539339,
        "title": "getDerivedStateFromError for Control Flow",
        "label": [
            "Type: Feature Request",
            "Component: Reconciler",
            "React Core Team"
        ],
        "date": "2019-06-25T17:05:13Z",
        "status": "open",
        "description": "Spinoff from https://github.com/facebook/react/pull/15797#issuecomment-504782329.\r\n\r\nWe might want to offer a way to \"bubble\" control flow up the tree a la Algebraic Effects. `throw Redirect()` is a canonical example. However, we want them to bypass the normal error boundaries. So it probably needs to be a first-class API.",
        "remove_template_description": "Spinoff from https://github.com/facebook/react/pull/15797#issuecomment-504782329.    We might want to offer a way to \"bubble\" control flow up the tree a la Algebraic Effects. `throw Redirect()` is a canonical example. However, we want them to bypass the normal error boundaries. So it probably needs to be a first-class API.",
        "human_words": "Spinoff from https://github.com/facebook/react/pull/15797#issuecomment-504782329.    We might want to offer a way to \"bubble\" control flow up the tree a la Algebraic Effects. `throw Redirect()` is a canonical example. However, we want them to bypass the normal error boundaries. So it probably needs to be a first-class API.",
        "human_words_regrex": "Spinoff from  We might want to offer a way to \"bubble\" control flow up the tree a la Algebraic Effects. `throw Redirect()` is a canonical example. However, we want them to bypass the normal error boundaries. So it probably needs to be a first-class API.",
        "human_words_stopwords_removal_lemmatization": "spinoff might want offer way `` bubble '' control flow tree la algebraic effect . ` throw redirect ( ) ` canonical example . however , want bypass normal error boundary . probably need first-class api .",
        "title_stopwords_removal_lemmatization": "getderivedstatefromerror control flow"
    },
    {
        "issue_id": 449943266,
        "title": "DevTools in production environment ",
        "label": [
            "Type: Feature Request",
            "Resolution: Needs More Information",
            "Component: Developer Tools"
        ],
        "date": "2019-05-29T17:56:31Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n![2019-05-29_13-00](https://user-images.githubusercontent.com/33522235/58580030-d3254200-8211-11e9-882d-85da2664a3b2.png)\r\n\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nI think the production environment, React Devtools you should not show any information about the state or components. similar to redux Devtools. \r\n**What is the current behavior?**\r\nJust now I can Edit some information with React DevTools in the production environment\r\n\r\n",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->  ![2019-05-29_13-00](https://user-images.githubusercontent.com/33522235/58580030-d3254200-8211-11e9-882d-85da2664a3b2.png)      **Do you want to request a *feature* or report a *bug*?**  I think the production environment, React Devtools you should not show any information about the state or components. similar to redux Devtools.   **What is the current behavior?**  Just now I can Edit some information with React DevTools in the production environment",
        "human_words": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->  ![2019-05-29_13-00](https://user-images.githubusercontent.com/33522235/58580030-d3254200-8211-11e9-882d-85da2664a3b2.png)      **Do you want to request a *feature* or report a *bug*?**  I think the production environment, React Devtools you should not show any information about the state or components. similar to redux Devtools.   **What is the current behavior?**  Just now I can Edit some information with React DevTools in the production environment",
        "human_words_regrex": " ! **Do you want to request a *feature* or report a *bug*?** I think the production environment, React Devtools you should not show any information about the state or components. similar to redux Devtools. **What is the current behavior?** Just now I can Edit some information with React DevTools in the production environment",
        "human_words_stopwords_removal_lemmatization": "! * * want request * feature * report * bug * ? * * think production environment , react devtools show information state component . similar redux devtools . * * current behavior ? * * edit information react devtools production environment",
        "title_stopwords_removal_lemmatization": "devtools production environment"
    },
    {
        "issue_id": 437759455,
        "title": "Allow ReactNode as a type for the child of <option/>",
        "label": [
            "Type: Feature Request",
            "Resolution: Stale"
        ],
        "date": "2019-04-26T16:51:51Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\n**What is the current behavior?**\r\nCurrently, the options element only allows types number and string. \r\n\r\n**What is the expected behavior?**\r\nAn option should allow for a ReactNode as a child in addition to a number + string. \r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nAll versions.\r\nAll browser types.\r\nTo the best of my knowledge, no.\r\n\r\np.s. This is my first feature request here, so let me know if I need to adjust the feature request in any way. ",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**  Feature    **What is the current behavior?**  Currently, the options element only allows types number and string.     **What is the expected behavior?**  An option should allow for a ReactNode as a child in addition to a number + string.     **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  All versions.  All browser types.  To the best of my knowledge, no.    p.s. This is my first feature request here, so let me know if I need to adjust the feature request in any way.",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**  Feature    **What is the current behavior?**  Currently, the options element only allows types number and string.     **What is the expected behavior?**  An option should allow for a ReactNode as a child in addition to a number + string.     **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  All versions.  All browser types.  To the best of my knowledge, no.    p.s. This is my first feature request here, so let me know if I need to adjust the feature request in any way.",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** Feature **What is the current behavior?** Currently, the options element only allows types number and string. **What is the expected behavior?** An option should allow for a ReactNode as a child in addition to a number + string. **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** All versions. All browser types. To the best of my knowledge, no. p.s. This is my first feature request here, so let me know if I need to adjust the feature request in any way.",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * feature * * current behavior ? * * currently , option element allows type number string . * * expected behavior ? * * option allow reactnode child addition number + string . * * version react , browser / o affected issue ? work previous version react ? * * version . browser type . best knowledge , . p.s . first feature request , let know need adjust feature request way .",
        "title_stopwords_removal_lemmatization": "allow reactnode type child < option/ >"
    },
    {
        "issue_id": 434688004,
        "title": "act() should warn in testing frameworks besides jest ",
        "label": [
            "Type: Feature Request",
            "Component: Test Utils",
            "React Core Team"
        ],
        "date": "2019-04-18T09:59:04Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nfeature request\r\n\r\n**What is the current behavior?**\r\n\r\nThe warnings for missing act() warnings around updates only happen in jest. \r\n\r\n**What is the expected behavior?**\r\n\r\nWe should support other test runners/frameworks as well (like jasmine, karma, etc)\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.8.0+",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**    feature request    **What is the current behavior?**    The warnings for missing act() warnings around updates only happen in jest.     **What is the expected behavior?**    We should support other test runners/frameworks as well (like jasmine, karma, etc)    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    16.8.0+",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**    feature request    **What is the current behavior?**    The warnings for missing act() warnings around updates only happen in jest.     **What is the expected behavior?**    We should support other test runners/frameworks as well (like jasmine, karma, etc)    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    16.8.0+",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** feature request **What is the current behavior?** The warnings for missing act() warnings around updates only happen in jest. **What is the expected behavior?** We should support other test runners/frameworks as well (like jasmine, karma, etc) **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** 16.8.0+",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * feature request * * current behavior ? * * warning missing act ( ) warning around update happen jest . * * expected behavior ? * * support test runners/frameworks well ( like jasmine , karma , etc ) * * version react , browser / o affected issue ? work previous version react ? * * 16.8.0+",
        "title_stopwords_removal_lemmatization": "act ( ) warn testing framework besides jest"
    },
    {
        "issue_id": 432315511,
        "title": "Provide withHooks HOC to decouple hooks and components",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2019-04-11T23:18:44Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\n**What is the current behavior?**\r\nCurrently the recommended way to use hooks involves coupling them with components. By this I mean that components are aware of the hooks they consume and depend on them explicitly.\r\nThis [issue thread on the recompose repo](https://github.com/acdlite/recompose/issues/756) discusses this issue in some detail and how recompose favored keeping components dumb, but wraps them in HOC's to make them smart. Hooks promote baking the smartness right into the component itself.\r\n\r\n**What is the expected behavior?**\r\nReact should offer a way to decouple components from the hooks they consume. I suggest a `withHooks` HOC that maps hooks to props. This will be a familiar model for those who have used redux with react.\r\n\r\n```jsx\r\nconst withHooks = mapHooksToProps => WrappedComponent => {\r\n  return props => {\r\n    let hookProps = mapHooksToProps(props);\r\n    return <WrappedComponent {...hookProps} {...props} />;\r\n  };\r\n};\r\n\r\nconst Counter = props => {\r\n  return (\r\n    <div>\r\n      <div>Counter: {props.counter}</div>\r\n      <button onClick={props.increment}>Increment</button>\r\n      <button onClick={props.decrement}>Decrement</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapHooksToProps = props => {\r\n  let [counter, setCounter] = useState(0);\r\n\r\n  return {\r\n    counter,\r\n    increment: () => setCounter(prev => prev + 1),\r\n    decrement: () => setCounter(prev => prev - 1)\r\n  };\r\n};\r\n\r\nconst EnhancedCounter = withHooks(mapHooksToProps)(Counter);\r\n```\r\n\r\nDemo:\r\nhttps://codesandbox.io/s/ympq0rlv79\r\n\r\nSome reasons why this is nice:\r\n\r\n1) It decouples components from the things that make them smart. Some examples of things that could make dumb components smart include hooks, redux, and good ol' parent components. By mapping hooks to props, we make it very easy to swap a dumb component's hook-powered 'brain' for a new 'brain', say a redux-powered 'brain'.\r\n\r\n2) Not sure if it's a good idea, but i know several people trying to replace redux with hooks in their applications. For these people, migrations from redux to hooks would be dead simple because they could replace `mapStateToProps` and `mapDispatchToProps` with `mapHooksToProps` and wouldn't have to worry about touching the underlying component.\r\n \r\n3) Testing is also easier because we can test the component in isolation without the hooks baked in.\r\n\r\n4) It makes prop overrides possible. In the case of our EnhancedCounter, we could override the counter prop by doing `<EnhancedCounter counter={10} />`. A real world example of hooks making things harder to override includes material-ui's [new styling approach via hooks](https://material-ui.com/css-in-js/basics/#hook-api). Because classes are provided via hook and no longer via props, we would need custom logic to override classes via props with the new hook-based approach:\r\n```jsx\r\nexport default function Hook(props) {\r\n  let classes = useStyles();\r\n  classes = {...classes, ...props.classes};\r\n  return <Button className={classes.root}>Hook</Button>;\r\n}\r\n```\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nFor versions of react >= 16.8",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**  Feature    **What is the current behavior?**  Currently the recommended way to use hooks involves coupling them with components. By this I mean that components are aware of the hooks they consume and depend on them explicitly.  This [issue thread on the recompose repo](https://github.com/acdlite/recompose/issues/756) discusses this issue in some detail and how recompose favored keeping components dumb, but wraps them in HOC's to make them smart. Hooks promote baking the smartness right into the component itself.    **What is the expected behavior?**  React should offer a way to decouple components from the hooks they consume. I suggest a `withHooks` HOC that maps hooks to props. This will be a familiar model for those who have used redux with react.    ```jsx  const withHooks = mapHooksToProps => WrappedComponent => {    return props => {      let hookProps = mapHooksToProps(props);      return <WrappedComponent {...hookProps} {...props} />;    };  };    const Counter = props => {    return (      <div>        <div>Counter: {props.counter}</div>        <button onClick={props.increment}>Increment</button>        <button onClick={props.decrement}>Decrement</button>      </div>    );  };    const mapHooksToProps = props => {    let [counter, setCounter] = useState(0);      return {      counter,      increment: () => setCounter(prev => prev + 1),      decrement: () => setCounter(prev => prev - 1)    };  };    const EnhancedCounter = withHooks(mapHooksToProps)(Counter);  ```    Demo:  https://codesandbox.io/s/ympq0rlv79    Some reasons why this is nice:    1) It decouples components from the things that make them smart. Some examples of things that could make dumb components smart include hooks, redux, and good ol' parent components. By mapping hooks to props, we make it very easy to swap a dumb component's hook-powered 'brain' for a new 'brain', say a redux-powered 'brain'.    2) Not sure if it's a good idea, but i know several people trying to replace redux with hooks in their applications. For these people, migrations from redux to hooks would be dead simple because they could replace `mapStateToProps` and `mapDispatchToProps` with `mapHooksToProps` and wouldn't have to worry about touching the underlying component.     3) Testing is also easier because we can test the component in isolation without the hooks baked in.    4) It makes prop overrides possible. In the case of our EnhancedCounter, we could override the counter prop by doing `<EnhancedCounter counter={10} />`. A real world example of hooks making things harder to override includes material-ui's [new styling approach via hooks](https://material-ui.com/css-in-js/basics/#hook-api). Because classes are provided via hook and no longer via props, we would need custom logic to override classes via props with the new hook-based approach:  ```jsx  export default function Hook(props) {    let classes = useStyles();    classes = {...classes, ...props.classes};    return <Button className={classes.root}>Hook</Button>;  }  ```  **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  For versions of react >= 16.8",
        "human_words": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**  Feature    **What is the current behavior?**  Currently the recommended way to use hooks involves coupling them with components. By this I mean that components are aware of the hooks they consume and depend on them explicitly.  This [issue thread on the recompose repo](https://github.com/acdlite/recompose/issues/756) discusses this issue in some detail and how recompose favored keeping components dumb, but wraps them in HOC's to make them smart. Hooks promote baking the smartness right into the component itself.    **What is the expected behavior?**  React should offer a way to decouple components from the hooks they consume. I suggest a `withHooks` HOC that maps hooks to props. This will be a familiar model for those who have used redux with react.        Demo:  https://codesandbox.io/s/ympq0rlv79    Some reasons why this is nice:    1) It decouples components from the things that make them smart. Some examples of things that could make dumb components smart include hooks, redux, and good ol' parent components. By mapping hooks to props, we make it very easy to swap a dumb component's hook-powered 'brain' for a new 'brain', say a redux-powered 'brain'.    2) Not sure if it's a good idea, but i know several people trying to replace redux with hooks in their applications. For these people, migrations from redux to hooks would be dead simple because they could replace `mapStateToProps` and `mapDispatchToProps` with `mapHooksToProps` and wouldn't have to worry about touching the underlying component.     3) Testing is also easier because we can test the component in isolation without the hooks baked in.    4) It makes prop overrides possible. In the case of our EnhancedCounter, we could override the counter prop by doing `<EnhancedCounter counter={10} />`. A real world example of hooks making things harder to override includes material-ui's [new styling approach via hooks](https://material-ui.com/css-in-js/basics/#hook-api). Because classes are provided via hook and no longer via props, we would need custom logic to override classes via props with the new hook-based approach:    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  For versions of react >= 16.8",
        "human_words_regrex": " **Do you want to request a *feature* or report a *bug*?** Feature **What is the current behavior?** Currently the recommended way to use hooks involves coupling them with components. By this I mean that components are aware of the hooks they consume and depend on them explicitly. This  discusses this issue in some detail and how recompose favored keeping components dumb, but wraps them in HOC's to make them smart. Hooks promote baking the smartness right into the component itself. **What is the expected behavior?** React should offer a way to decouple components from the hooks they consume. I suggest a `withHooks` HOC that maps hooks to props. This will be a familiar model for those who have used redux with react. Demo:  Some reasons why this is nice: 1) It decouples components from the things that make them smart. Some examples of things that could make dumb components smart include hooks, redux, and good ol' parent components. By mapping hooks to props, we make it very easy to swap a dumb component's hook-powered 'brain' for a new 'brain', say a redux-powered 'brain'. 2) Not sure if it's a good idea, but i know several people trying to replace redux with hooks in their applications. For these people, migrations from redux to hooks would be dead simple because they could replace `mapStateToProps` and `mapDispatchToProps` with `mapHooksToProps` and wouldn't have to worry about touching the underlying component. 3) Testing is also easier because we can test the component in isolation without the hooks baked in. 4) It makes prop overrides possible. In the case of our EnhancedCounter, we could override the counter prop by doing ``. A real world example of hooks making things harder to override includes material-ui's . Because classes are provided via hook and no longer via props, we would need custom logic to override classes via props with the new hook-based approach: **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** For versions of react >= 16.8",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * feature * * current behavior ? * * currently recommended way use hook involves coupling component . mean component aware hook consume depend explicitly . discus issue detail recompose favored keeping component dumb , wrap hoc 's make smart . hook promote baking smartness right component . * * expected behavior ? * * react offer way decouple component hook consume . suggest ` withhooks ` hoc map hook prop . familiar model used redux react . demo : reason nice : 1 ) decouples component thing make smart . example thing could make dumb component smart include hook , redux , good ol ' parent component . mapping hook prop , make easy swap dumb component 's hook-powered 'brain ' new 'brain ' , say redux-powered 'brain ' . 2 ) sure 's good idea , know several people trying replace redux hook application . people , migration redux hook would dead simple could replace ` mapstatetoprops ` ` mapdispatchtoprops ` ` maphookstoprops ` would n't worry touching underlying component . 3 ) testing also easier test component isolation without hook baked . 4 ) make prop override possible . case enhancedcounter , could override counter prop `` . real world example hook making thing harder override includes material-ui 's . class provided via hook longer via prop , would need custom logic override class via prop new hook-based approach : * * version react , browser / o affected issue ? work previous version react ? * * version react > = 16.8",
        "title_stopwords_removal_lemmatization": "provide withhooks hoc decouple hook component"
    },
    {
        "issue_id": 431036802,
        "title": "allow to disable style hydration missmatch warning",
        "label": [
            "Type: Feature Request",
            "Component: DOM",
            "Resolution: Stale"
        ],
        "date": "2019-04-09T15:36:48Z",
        "status": "closed",
        "description": "some background:\r\n\r\nwhen dealing with inline styles (e.g. radium), SSR and caching of SSR results, you might run into problems because of differences in vendor prefixes. Best tradeof is to render always with all vendor prefixes on the server. But this will lead to style missmatches on hydration. You can use `suppressHydrationWarning`, but then you have to add this property to every element that receives these styles, which is not practical.\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nfeature\r\n\r\n**What is the current behavior?**\r\n\r\nstyle missmatch causes a warning on development. \r\n\r\n**What is the expected behavior?**\r\n\r\nyou can set a global flag to supress style missmatch warnings\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.8",
        "remove_template_description": "some background:    when dealing with inline styles (e.g. radium), SSR and caching of SSR results, you might run into problems because of differences in vendor prefixes. Best tradeof is to render always with all vendor prefixes on the server. But this will lead to style missmatches on hydration. You can use `suppressHydrationWarning`, but then you have to add this property to every element that receives these styles, which is not practical.    **Do you want to request a *feature* or report a *bug*?**    feature    **What is the current behavior?**    style missmatch causes a warning on development.     **What is the expected behavior?**    you can set a global flag to supress style missmatch warnings    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    React 16.8",
        "human_words": "some background:    when dealing with inline styles (e.g. radium), SSR and caching of SSR results, you might run into problems because of differences in vendor prefixes. Best tradeof is to render always with all vendor prefixes on the server. But this will lead to style missmatches on hydration. You can use `suppressHydrationWarning`, but then you have to add this property to every element that receives these styles, which is not practical.    **Do you want to request a *feature* or report a *bug*?**    feature    **What is the current behavior?**    style missmatch causes a warning on development.     **What is the expected behavior?**    you can set a global flag to supress style missmatch warnings    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    React 16.8",
        "human_words_regrex": "some background: when dealing with inline styles (e.g. radium), SSR and caching of SSR results, you might run into problems because of differences in vendor prefixes. Best tradeof is to render always with all vendor prefixes on the server. But this will lead to style missmatches on hydration. You can use `suppressHydrationWarning`, but then you have to add this property to every element that receives these styles, which is not practical. **Do you want to request a *feature* or report a *bug*?** feature **What is the current behavior?** style missmatch causes a warning on development. **What is the expected behavior?** you can set a global flag to supress style missmatch warnings **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** React 16.8",
        "human_words_stopwords_removal_lemmatization": "background : dealing inline style ( e.g . radium ) , ssr caching ssr result , might run problem difference vendor prefix . best tradeof render always vendor prefix server . lead style missmatches hydration . use ` suppresshydrationwarning ` , add property every element receives style , practical . * * want request * feature * report * bug * ? * * feature * * current behavior ? * * style missmatch cause warning development . * * expected behavior ? * * set global flag supress style missmatch warning * * version react , browser / o affected issue ? work previous version react ? * * react 16.8",
        "title_stopwords_removal_lemmatization": "allow disable style hydration missmatch warning"
    },
    {
        "issue_id": 430089125,
        "title": "useReducer's dispatch should return a promise which resolves once its action has been delivered",
        "label": [
            "Type: Feature Request",
            "Component: Hooks"
        ],
        "date": "2019-04-07T00:04:45Z",
        "status": "open",
        "description": "(This is a spinoff from [this thread](https://github.com/facebook/react/issues/15240).)\r\n\r\nIt's sometimes useful to be able to dispatch an action from within an async function, wait for the action to transform the state, and then use the resulting state to determine possible further async work to do. For this purpose it's possible to define a `useNext` hook which returns a promise of the next value:\r\n\r\n```js\r\nfunction useNext(value) {\r\n  const valueRef = useRef(value);\r\n  const resolvesRef = useRef([]);\r\n  useEffect(() => {\r\n    if (valueRef.current !== value) {\r\n      for (const resolve of resolvesRef.current) {\r\n        resolve(value);\r\n      }\r\n      resolvesRef.current = [];\r\n      valueRef.current = value;\r\n    }\r\n  }, [value]);\r\n  return () => new Promise(resolve => {\r\n    resolvesRef.current.push(resolve);\r\n  });\r\n}\r\n```\r\n\r\nand use it like so:\r\n\r\n```js\r\nconst nextState = useNext(state);\r\n\r\nuseEffect(() => {\r\n  fetchStuff(state);\r\n}, []);\r\n\r\nasync function fetchStuff(state) {\r\n  dispatch({ type: 'START_LOADING' });\r\n  \r\n  let data = await xhr.post('/api/data');\r\n  dispatch({ type: 'RECEIVE_DATA', data });\r\n  \r\n  // get the new state after the action has taken effect\r\n  state = await nextState();\r\n\r\n  if (!state.needsMoreData) return;\r\n\r\n  data = await xhr.post('/api/more-data');\r\n  dispatch({ type: 'RECEIVE_MORE_DATA', data });\r\n}\r\n```\r\n\r\n\r\nThis is all well and good, but `useNext` has a fundamental limitation: it only resolves promises when the state _changes_... so if dispatching an action resulted in the same state (thus causing `useReducer` to [bail out](https://reactjs.org/docs/hooks-reference.html#bailing-out-of-a-state-update)), our async function would hang waiting for an update that wasn't coming.\r\n\r\nWhat we _really_ want here is a way to obtain the state after the last dispatch has taken effect, whether or not it resulted in the state changing. Currently I'm not aware of a foolproof way to implement this in userland (happy to be corrected on this point). But it seems like it could be a very useful feature of `useReducer`'s `dispatch` function itself to return a promise of the state resulting from reducing by the action. Then we could rewrite the preceding example as\r\n\r\n```js\r\nuseEffect(() => {\r\n  fetchStuff(state);\r\n}, []);\r\n\r\nasync function fetchStuff(state) {\r\n  dispatch({ type: 'START_LOADING' });\r\n  \r\n  let data = await xhr.post('/api/data');\r\n  state = await dispatch({ type: 'RECEIVE_DATA', data });\r\n  \r\n  if (!state.needsMoreData) return;\r\n\r\n  data = await xhr.post('/api/more-data');\r\n  dispatch({ type: 'RECEIVE_MORE_DATA', data });\r\n}\r\n```\r\n\r\n## EDIT\r\n\r\nThinking about this a little more, the promise returned from `dispatch` doesn't need to carry the next state, because there are other situations where you want to obtain the latest state too and we can already solve that with a simple ref. The narrowly-defined problem is: we need to be able to wait until after a `dispatch()` has taken affect. So `dispatch` could just return a `Promise<void>`:\r\n\r\n```js\r\nconst stateRef = useRef(state);\r\nuseEffect(() => {\r\n  stateRef.current = state;\r\n}, [state]);\r\n\r\nuseEffect(() => {\r\n  fetchStuff();\r\n}, []);\r\n\r\nasync function fetchStuff() {\r\n  dispatch({ type: 'START_LOADING' });\r\n  \r\n  let data = await xhr.post('/api/data');\r\n\r\n  // can look at current state here too\r\n  if (!stateRef.current.shouldReceiveData) return;\r\n  \r\n  await dispatch({ type: 'RECEIVE_DATA', data });\r\n\r\n  if (!stateRef.current.needsMoreData) return;\r\n\r\n  data = await xhr.post('/api/more-data');\r\n  dispatch({ type: 'RECEIVE_MORE_DATA', data });\r\n}\r\n```",
        "remove_template_description": "(This is a spinoff from [this thread](https://github.com/facebook/react/issues/15240).)    It's sometimes useful to be able to dispatch an action from within an async function, wait for the action to transform the state, and then use the resulting state to determine possible further async work to do. For this purpose it's possible to define a `useNext` hook which returns a promise of the next value:    ```js  function useNext(value) {    const valueRef = useRef(value);    const resolvesRef = useRef([]);    useEffect(() => {      if (valueRef.current !== value) {        for (const resolve of resolvesRef.current) {          resolve(value);        }        resolvesRef.current = [];        valueRef.current = value;      }    }, [value]);    return () => new Promise(resolve => {      resolvesRef.current.push(resolve);    });  }  ```    and use it like so:    ```js  const nextState = useNext(state);    useEffect(() => {    fetchStuff(state);  }, []);    async function fetchStuff(state) {    dispatch({ type: 'START_LOADING' });        let data = await xhr.post('/api/data');    dispatch({ type: 'RECEIVE_DATA', data });        // get the new state after the action has taken effect    state = await nextState();      if (!state.needsMoreData) return;      data = await xhr.post('/api/more-data');    dispatch({ type: 'RECEIVE_MORE_DATA', data });  }  ```      This is all well and good, but `useNext` has a fundamental limitation: it only resolves promises when the state _changes_... so if dispatching an action resulted in the same state (thus causing `useReducer` to [bail out](https://reactjs.org/docs/hooks-reference.html#bailing-out-of-a-state-update)), our async function would hang waiting for an update that wasn't coming.    What we _really_ want here is a way to obtain the state after the last dispatch has taken effect, whether or not it resulted in the state changing. Currently I'm not aware of a foolproof way to implement this in userland (happy to be corrected on this point). But it seems like it could be a very useful feature of `useReducer`'s `dispatch` function itself to return a promise of the state resulting from reducing by the action. Then we could rewrite the preceding example as    ```js  useEffect(() => {    fetchStuff(state);  }, []);    async function fetchStuff(state) {    dispatch({ type: 'START_LOADING' });        let data = await xhr.post('/api/data');    state = await dispatch({ type: 'RECEIVE_DATA', data });        if (!state.needsMoreData) return;      data = await xhr.post('/api/more-data');    dispatch({ type: 'RECEIVE_MORE_DATA', data });  }  ```    ## EDIT    Thinking about this a little more, the promise returned from `dispatch` doesn't need to carry the next state, because there are other situations where you want to obtain the latest state too and we can already solve that with a simple ref. The narrowly-defined problem is: we need to be able to wait until after a `dispatch()` has taken affect. So `dispatch` could just return a `Promise<void>`:    ```js  const stateRef = useRef(state);  useEffect(() => {    stateRef.current = state;  }, [state]);    useEffect(() => {    fetchStuff();  }, []);    async function fetchStuff() {    dispatch({ type: 'START_LOADING' });        let data = await xhr.post('/api/data');      // can look at current state here too    if (!stateRef.current.shouldReceiveData) return;        await dispatch({ type: 'RECEIVE_DATA', data });      if (!stateRef.current.needsMoreData) return;      data = await xhr.post('/api/more-data');    dispatch({ type: 'RECEIVE_MORE_DATA', data });  }  ```",
        "human_words": "(This is a spinoff from [this thread](https://github.com/facebook/react/issues/15240).)    It's sometimes useful to be able to dispatch an action from within an async function, wait for the action to transform the state, and then use the resulting state to determine possible further async work to do. For this purpose it's possible to define a `useNext` hook which returns a promise of the next value:        and use it like so:          This is all well and good, but `useNext` has a fundamental limitation: it only resolves promises when the state _changes_... so if dispatching an action resulted in the same state (thus causing `useReducer` to [bail out](https://reactjs.org/docs/hooks-reference.html#bailing-out-of-a-state-update)), our async function would hang waiting for an update that wasn't coming.    What we _really_ want here is a way to obtain the state after the last dispatch has taken effect, whether or not it resulted in the state changing. Currently I'm not aware of a foolproof way to implement this in userland (happy to be corrected on this point). But it seems like it could be a very useful feature of `useReducer`'s `dispatch` function itself to return a promise of the state resulting from reducing by the action. Then we could rewrite the preceding example as        ## EDIT    Thinking about this a little more, the promise returned from `dispatch` doesn't need to carry the next state, because there are other situations where you want to obtain the latest state too and we can already solve that with a simple ref. The narrowly-defined problem is: we need to be able to wait until after a `dispatch()` has taken affect. So `dispatch` could just return a `Promise<void>`:    ",
        "human_words_regrex": "(This is a spinoff from .) It's sometimes useful to be able to dispatch an action from within an async function, wait for the action to transform the state, and then use the resulting state to determine possible further async work to do. For this purpose it's possible to define a `useNext` hook which returns a promise of the next value: and use it like so: This is all well and good, but `useNext` has a fundamental limitation: it only resolves promises when the state _changes_... so if dispatching an action resulted in the same state (thus causing `useReducer` to ), our async function would hang waiting for an update that wasn't coming. What we _really_ want here is a way to obtain the state after the last dispatch has taken effect, whether or not it resulted in the state changing. Currently I'm not aware of a foolproof way to implement this in userland (happy to be corrected on this point). But it seems like it could be a very useful feature of `useReducer`'s `dispatch` function itself to return a promise of the state resulting from reducing by the action. Then we could rewrite the preceding example as ## EDIT Thinking about this a little more, the promise returned from `dispatch` doesn't need to carry the next state, because there are other situations where you want to obtain the latest state too and we can already solve that with a simple ref. The narrowly-defined problem is: we need to be able to wait until after a `dispatch()` has taken affect. So `dispatch` could just return a `Promise`: ",
        "human_words_stopwords_removal_lemmatization": "( spinoff . ) 's sometimes useful able dispatch action within async function , wait action transform state , use resulting state determine possible async work . purpose 's possible define ` usenext ` hook return promise next value : use like : well good , ` usenext ` fundamental limitation : resolve promise state _changes_ ... dispatching action resulted state ( thus causing ` usereducer ` ) , async function would hang waiting update n't coming . _really_ want way obtain state last dispatch taken effect , whether resulted state changing . currently 'm aware foolproof way implement userland ( happy corrected point ) . seems like could useful feature ` usereducer ` 's ` dispatch ` function return promise state resulting reducing action . could rewrite preceding example # # edit thinking little , promise returned ` dispatch ` n't need carry next state , situation want obtain latest state already solve simple ref . narrowly-defined problem : need able wait ` dispatch ( ) ` taken affect . ` dispatch ` could return ` promise ` :",
        "title_stopwords_removal_lemmatization": "usereducer 's dispatch return promise resolve action delivered"
    },
    {
        "issue_id": 429552901,
        "title": "feature request: export of ReactDOM libraries",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2019-04-05T02:01:02Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nit's a *feature*.\r\n\r\n**What is the current behavior?**\r\n\r\n[Internal shared libraries of ReactDOM](https://github.com/facebook/react/tree/master/packages/react-dom/src/shared) is not exported.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nn/a\r\n\r\n**What is the expected behavior?**\r\n\r\nIt is great that some shared libraries such as [`isCustomComponent`](https://github.com/facebook/react/blob/master/packages/react-dom/src/shared/isCustomComponent.js) or [`DOMNamespaces`](https://github.com/facebook/react/blob/master/packages/react-dom/src/shared/DOMNamespaces.js) are exported from `react-dom` and available externally.\r\n\r\nThey are useful to know what types of HTML tags are regarded to be valid one by React, for example, with static analysis issued at https://github.com/yannickcr/eslint-plugin-react/issues/1752.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nn/a",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**    it's a *feature*.    **What is the current behavior?**    [Internal shared libraries of ReactDOM](https://github.com/facebook/react/tree/master/packages/react-dom/src/shared) is not exported.    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**    n/a    **What is the expected behavior?**    It is great that some shared libraries such as [`isCustomComponent`](https://github.com/facebook/react/blob/master/packages/react-dom/src/shared/isCustomComponent.js) or [`DOMNamespaces`](https://github.com/facebook/react/blob/master/packages/react-dom/src/shared/DOMNamespaces.js) are exported from `react-dom` and available externally.    They are useful to know what types of HTML tags are regarded to be valid one by React, for example, with static analysis issued at https://github.com/yannickcr/eslint-plugin-react/issues/1752.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    n/a",
        "human_words": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**    it's a *feature*.    **What is the current behavior?**    [Internal shared libraries of ReactDOM](https://github.com/facebook/react/tree/master/packages/react-dom/src/shared) is not exported.    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**    n/a    **What is the expected behavior?**    It is great that some shared libraries such as [`isCustomComponent`](https://github.com/facebook/react/blob/master/packages/react-dom/src/shared/isCustomComponent.js) or [`DOMNamespaces`](https://github.com/facebook/react/blob/master/packages/react-dom/src/shared/DOMNamespaces.js) are exported from `react-dom` and available externally.    They are useful to know what types of HTML tags are regarded to be valid one by React, for example, with static analysis issued at https://github.com/yannickcr/eslint-plugin-react/issues/1752.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    n/a",
        "human_words_regrex": " **Do you want to request a *feature* or report a *bug*?** it's a *feature*. **What is the current behavior?**  is not exported. **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle ( or CodeSandbox ( example below:** n/a **What is the expected behavior?** It is great that some shared libraries such as  or  are exported from `react-dom` and available externally. They are useful to know what types of HTML tags are regarded to be valid one by React, for example, with static analysis issued at  **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** n/a",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * 's * feature * . * * current behavior ? * * exported . * * current behavior bug , please provide step reproduce possible minimal demo problem . bug get fixed much faster run code n't dependency react . paste link jsfiddle ( codesandbox ( example : * * n/a * * expected behavior ? * * great shared library exported ` react-dom ` available externally . useful know type html tag regarded valid one react , example , static analysis issued * * version react , browser / o affected issue ? work previous version react ? * * n/a",
        "title_stopwords_removal_lemmatization": "feature request : export reactdom library"
    },
    {
        "issue_id": 427511908,
        "title": "useRef eslint rule proposal",
        "label": [
            "Type: Feature Request",
            "Component: ESLint Rules",
            "Resolution: Stale"
        ],
        "date": "2019-04-01T04:57:23Z",
        "status": "closed",
        "description": "Proposal: Ensure that all reads from a `ref` use `.current`.\r\n\r\n```js\r\nexport function MyComponent() {\r\n  const isActiveRef = useRef<boolean>(false);\r\n\r\n  // Proposal: this should be a linting violation\r\n  if (isActiveRef) {\r\n    console.log('will always be true');\r\n  }\r\n\r\n  // Reads need to be done from .current\r\n  if (isActiveRef.current) {\r\n    console.log('correct usage');\r\n  }\r\n}\r\n```\r\n\r\nI often find myself doing boolean checks based on the `.current` value of a `ref`. I am paranoid that if I leave the `.current` off then I am creating a bug",
        "remove_template_description": "Proposal: Ensure that all reads from a `ref` use `.current`.    ```js  export function MyComponent() {    const isActiveRef = useRef<boolean>(false);      // Proposal: this should be a linting violation    if (isActiveRef) {      console.log('will always be true');    }      // Reads need to be done from .current    if (isActiveRef.current) {      console.log('correct usage');    }  }  ```    I often find myself doing boolean checks based on the `.current` value of a `ref`. I am paranoid that if I leave the `.current` off then I am creating a bug",
        "human_words": "Proposal: Ensure that all reads from a `ref` use `.current`.        I often find myself doing boolean checks based on the `.current` value of a `ref`. I am paranoid that if I leave the `.current` off then I am creating a bug",
        "human_words_regrex": "Proposal: Ensure that all reads from a `ref` use `.current`. I often find myself doing boolean checks based on the `.current` value of a `ref`. I am paranoid that if I leave the `.current` off then I am creating a bug",
        "human_words_stopwords_removal_lemmatization": "proposal : ensure read ` ref ` use ` .current ` . often find boolean check based ` .current ` value ` ref ` . paranoid leave ` .current ` creating bug",
        "title_stopwords_removal_lemmatization": "useref eslint rule proposal"
    },
    {
        "issue_id": 427347008,
        "title": "Add option in shallow renderer to run effects/componentDidUpdate/componentDidMount",
        "label": [
            "Type: Feature Request",
            "Component: Shallow Renderer"
        ],
        "date": "2019-03-31T01:39:03Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\nfeature\r\n\r\n**What is the current behavior?**\r\nthe shallow renderer does not run componentDidUpdate, componentDidMount, or useEffect functions. (I'll call them effect functions for short)\r\n\r\n**What is the expected behavior?**\r\nSee [this enzyme issue](https://github.com/airbnb/enzyme/issues/1938#issuecomment-476137018) for more details about where this request is coming from. But the general idea is that it is often nice to run effect functions even when shallow rendering, rather than having to use full rendering on those specific tests. \r\n\r\nIf the shallow renderer provided an option to run the effect functions, it would allow people who test with shallow rendering to more easily test their components. Enzyme currently supports this in class components by calling componentDidUpdate/mount directly on the component instance, but this would be a much harder thing to do for hooks, since they are usually anonymous.\r\n\r\nEnzyme used to not allow this at all, but then added an option to turn on this behavior in their shallow renderer, before finally turning it on by default and then adding an option to turn it off. It didn't seem to cause too many issues for them, so I think this approach could work well for the React shallow renderer as well. Obviously I'm only asking for an option to turn it on now, not to change the default or anything.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nAll and no it was never supported AFAIK",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**  feature    **What is the current behavior?**  the shallow renderer does not run componentDidUpdate, componentDidMount, or useEffect functions. (I'll call them effect functions for short)    **What is the expected behavior?**  See [this enzyme issue](https://github.com/airbnb/enzyme/issues/1938#issuecomment-476137018) for more details about where this request is coming from. But the general idea is that it is often nice to run effect functions even when shallow rendering, rather than having to use full rendering on those specific tests.     If the shallow renderer provided an option to run the effect functions, it would allow people who test with shallow rendering to more easily test their components. Enzyme currently supports this in class components by calling componentDidUpdate/mount directly on the component instance, but this would be a much harder thing to do for hooks, since they are usually anonymous.    Enzyme used to not allow this at all, but then added an option to turn on this behavior in their shallow renderer, before finally turning it on by default and then adding an option to turn it off. It didn't seem to cause too many issues for them, so I think this approach could work well for the React shallow renderer as well. Obviously I'm only asking for an option to turn it on now, not to change the default or anything.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  All and no it was never supported AFAIK",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**  feature    **What is the current behavior?**  the shallow renderer does not run componentDidUpdate, componentDidMount, or useEffect functions. (I'll call them effect functions for short)    **What is the expected behavior?**  See [this enzyme issue](https://github.com/airbnb/enzyme/issues/1938#issuecomment-476137018) for more details about where this request is coming from. But the general idea is that it is often nice to run effect functions even when shallow rendering, rather than having to use full rendering on those specific tests.     If the shallow renderer provided an option to run the effect functions, it would allow people who test with shallow rendering to more easily test their components. Enzyme currently supports this in class components by calling componentDidUpdate/mount directly on the component instance, but this would be a much harder thing to do for hooks, since they are usually anonymous.    Enzyme used to not allow this at all, but then added an option to turn on this behavior in their shallow renderer, before finally turning it on by default and then adding an option to turn it off. It didn't seem to cause too many issues for them, so I think this approach could work well for the React shallow renderer as well. Obviously I'm only asking for an option to turn it on now, not to change the default or anything.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  All and no it was never supported AFAIK",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** feature **What is the current behavior?** the shallow renderer does not run componentDidUpdate, componentDidMount, or useEffect functions. (I'll call them effect functions for short) **What is the expected behavior?** See  for more details about where this request is coming from. But the general idea is that it is often nice to run effect functions even when shallow rendering, rather than having to use full rendering on those specific tests. If the shallow renderer provided an option to run the effect functions, it would allow people who test with shallow rendering to more easily test their components. Enzyme currently supports this in class components by calling componentDidUpdate/mount directly on the component instance, but this would be a much harder thing to do for hooks, since they are usually anonymous. Enzyme used to not allow this at all, but then added an option to turn on this behavior in their shallow renderer, before finally turning it on by default and then adding an option to turn it off. It didn't seem to cause too many issues for them, so I think this approach could work well for the React shallow renderer as well. Obviously I'm only asking for an option to turn it on now, not to change the default or anything. **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** All and no it was never supported AFAIK",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * feature * * current behavior ? * * shallow renderer run componentdidupdate , componentdidmount , useeffect function . ( 'll call effect function short ) * * expected behavior ? * * see detail request coming . general idea often nice run effect function even shallow rendering , rather use full rendering specific test . shallow renderer provided option run effect function , would allow people test shallow rendering easily test component . enzyme currently support class component calling componentdidupdate/mount directly component instance , would much harder thing hook , since usually anonymous . enzyme used allow , added option turn behavior shallow renderer , finally turning default adding option turn . n't seem cause many issue , think approach could work well react shallow renderer well . obviously 'm asking option turn , change default anything . * * version react , browser / o affected issue ? work previous version react ? * * never supported afaik",
        "title_stopwords_removal_lemmatization": "add option shallow renderer run effects/componentdidupdate/componentdidmount"
    },
    {
        "issue_id": 425733192,
        "title": "Hook equivalent for `getSnapshotBeforeUpdate`",
        "label": [
            "Type: Feature Request",
            "Resolution: Backlog"
        ],
        "date": "2019-03-27T02:29:09Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature\r\n\r\n**What is the current behavior?**\r\n\r\nThere is no hook based equivalent for `getSnapshotBeforeUpdate`. The docs state:\r\n> Our goal is for Hooks to cover all use cases for classes as soon as possible. There are no Hook equivalents to the uncommon getSnapshotBeforeUpdate and componentDidCatch lifecycles yet, but we plan to add them soon.\r\n\r\n**What is the expected behavior?**\r\n\r\nThere is a hook based equivalent for `getSnapshotBeforeUpdate`, maybe something like:\r\n\r\n```js\r\nfunction ScrollingList(props) {\r\n  const lengthRef = React.useRef(0);\r\n  const listRef = React.useRef(null);\r\n\r\n  const prevHeight = React.useSnapshot(() => {\r\n    if (lengthRef.current < props.list.length) {\r\n      const list = listRef.current;\r\n      return list.scrollHeight - list.scrollTop;\r\n    }\r\n  }); \r\n\r\n  React.useEffect(() => {\r\n    lengthRef.current = props.list.length;\r\n  }, [props.list.length]);\r\n\r\n  React.useEffect(() => {\r\n    if (prevHeight != null) {\r\n      const list = listRef.current;\r\n      list.scrollTop = list.scrollHeight - prevHeight;\r\n    }\r\n  }, [prevHeight]);\r\n  return (\r\n    <div ref={listRef}>{/* ... */}</div>\r\n  );\r\n}\r\n```\r\n\r\nThis code probably is bug-ridden and not the best use of hooks but you get the idea.\r\n\r\nI\u2019d like to know:\r\n1. If this feature is planned or on the roadmap.\r\n2. What the proposed API will be.\r\n3. If anyone is working on this.\r\n\r\nSorry, if this is being tracked somewhere and I haven\u2019t seen it. I\u2019m planning an intense component which will use `getSnapshotBeforeUpdate` and I\u2019d love some guidance about the future of this lifecycle method.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact v16.8.0 and later. All browsers and OSes.\r\n\r\n",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**    Feature    **What is the current behavior?**    There is no hook based equivalent for `getSnapshotBeforeUpdate`. The docs state:  > Our goal is for Hooks to cover all use cases for classes as soon as possible. There are no Hook equivalents to the uncommon getSnapshotBeforeUpdate and componentDidCatch lifecycles yet, but we plan to add them soon.    **What is the expected behavior?**    There is a hook based equivalent for `getSnapshotBeforeUpdate`, maybe something like:    ```js  function ScrollingList(props) {    const lengthRef = React.useRef(0);    const listRef = React.useRef(null);      const prevHeight = React.useSnapshot(() => {      if (lengthRef.current < props.list.length) {        const list = listRef.current;        return list.scrollHeight - list.scrollTop;      }    });       React.useEffect(() => {      lengthRef.current = props.list.length;    }, [props.list.length]);      React.useEffect(() => {      if (prevHeight != null) {        const list = listRef.current;        list.scrollTop = list.scrollHeight - prevHeight;      }    }, [prevHeight]);    return (      <div ref={listRef}>{/* ... */}</div>    );  }  ```    This code probably is bug-ridden and not the best use of hooks but you get the idea.    I\u2019d like to know:  1. If this feature is planned or on the roadmap.  2. What the proposed API will be.  3. If anyone is working on this.    Sorry, if this is being tracked somewhere and I haven\u2019t seen it. I\u2019m planning an intense component which will use `getSnapshotBeforeUpdate` and I\u2019d love some guidance about the future of this lifecycle method.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    React v16.8.0 and later. All browsers and OSes.",
        "human_words": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**    Feature    **What is the current behavior?**    There is no hook based equivalent for `getSnapshotBeforeUpdate`. The docs state:  > Our goal is for Hooks to cover all use cases for classes as soon as possible. There are no Hook equivalents to the uncommon getSnapshotBeforeUpdate and componentDidCatch lifecycles yet, but we plan to add them soon.    **What is the expected behavior?**    There is a hook based equivalent for `getSnapshotBeforeUpdate`, maybe something like:        This code probably is bug-ridden and not the best use of hooks but you get the idea.    I\u2019d like to know:  1. If this feature is planned or on the roadmap.  2. What the proposed API will be.  3. If anyone is working on this.    Sorry, if this is being tracked somewhere and I haven\u2019t seen it. I\u2019m planning an intense component which will use `getSnapshotBeforeUpdate` and I\u2019d love some guidance about the future of this lifecycle method.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    React v16.8.0 and later. All browsers and OSes.",
        "human_words_regrex": " **Do you want to request a *feature* or report a *bug*?** Feature **What is the current behavior?** There is no hook based equivalent for `getSnapshotBeforeUpdate`. The docs state: > Our goal is for Hooks to cover all use cases for classes as soon as possible. There are no Hook equivalents to the uncommon getSnapshotBeforeUpdate and componentDidCatch lifecycles yet, but we plan to add them soon. **What is the expected behavior?** There is a hook based equivalent for `getSnapshotBeforeUpdate`, maybe something like: This code probably is bug-ridden and not the best use of hooks but you get the idea. I\u2019d like to know: 1. If this feature is planned or on the roadmap. 2. What the proposed API will be. 3. If anyone is working on this. Sorry, if this is being tracked somewhere and I haven\u2019t seen it. I\u2019m planning an intense component which will use `getSnapshotBeforeUpdate` and I\u2019d love some guidance about the future of this lifecycle method. **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** React v16.8.0 and later. All browsers and OSes.",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * feature * * current behavior ? * * hook based equivalent ` getsnapshotbeforeupdate ` . doc state : > goal hook cover use case class soon possible . hook equivalent uncommon getsnapshotbeforeupdate componentdidcatch lifecycles yet , plan add soon . * * expected behavior ? * * hook based equivalent ` getsnapshotbeforeupdate ` , maybe something like : code probably bug-ridden best use hook get idea . \u2019 like know : 1. feature planned roadmap . 2. proposed api . 3. anyone working . sorry , tracked somewhere \u2019 seen . \u2019 planning intense component use ` getsnapshotbeforeupdate ` \u2019 love guidance future lifecycle method . * * version react , browser / o affected issue ? work previous version react ? * * react v16.8.0 later . browser os .",
        "title_stopwords_removal_lemmatization": "hook equivalent ` getsnapshotbeforeupdate `"
    },
    {
        "issue_id": 425003749,
        "title": "Using context to pass down mount order to children with concurrent",
        "label": [
            "Type: Feature Request",
            "Resolution: Stale"
        ],
        "date": "2019-03-25T16:40:16Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature / use case\r\n\r\n**What is the current behavior?**\r\n\r\nIt seems currently there is no way to get the order of children from the children themselves with context.\r\n\r\n**What is the expected behavior?**\r\n\r\nI've run into this now in three use cases when building a style system: Breadcrumbs, Segmented views, and Text rhythm/spacing.\r\n\r\nExample 1, breadcrumbs. You want to show an arrow on all but the last breadcrumb, but they may be deeply nested:\r\n\r\n```ts\r\nlet BreadcrumbOrder = createContext({ index: -1, total: -1 })\r\n\r\nlet Button = props => {\r\n  let order = useContext(BreadcrumbOrder)\r\n  return <div style={{ borderRight: order.index > total ? '1px solid red' : 'none' }} {...props} />\r\n}\r\n\r\nlet MyView = () => {\r\n  return (\r\n    <BreadcrumbProvider>\r\n      <Button />\r\n      <Button />\r\n      <div><Button /></div>\r\n    </BreadcrumbProvider>\r\n  )\r\n}\r\n```\r\n\r\nWhere MyView should provide the ordering so that the sub-views can access `total` and `index` and properly style.\r\n\r\nThe other use cases are basically identical, but for different patterns. One is for joining together buttons that are in a row in the interface (Segmented), and the other is for collapsing margins when you have text elements in a vertical column.\r\n\r\nReally this ticket encompasses more of a question or request for documentation clarity here. I'm not sure how it is not pre-concurrent, but I'm assuming mount-order will be non-deterministic if not now then shortly. Is there any reference to a pattern that works for this use case?\r\n\r\nNamely: how children can access their mount order / total children. I can do it now useReducer/context, but I've seen it mount in a weird order at least once and think it was due to a suspense type thing, and would be curious a better practice for this.",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**    Feature / use case    **What is the current behavior?**    It seems currently there is no way to get the order of children from the children themselves with context.    **What is the expected behavior?**    I've run into this now in three use cases when building a style system: Breadcrumbs, Segmented views, and Text rhythm/spacing.    Example 1, breadcrumbs. You want to show an arrow on all but the last breadcrumb, but they may be deeply nested:    ```ts  let BreadcrumbOrder = createContext({ index: -1, total: -1 })    let Button = props => {    let order = useContext(BreadcrumbOrder)    return <div style={{ borderRight: order.index > total ? '1px solid red' : 'none' }} {...props} />  }    let MyView = () => {    return (      <BreadcrumbProvider>        <Button />        <Button />        <div><Button /></div>      </BreadcrumbProvider>    )  }  ```    Where MyView should provide the ordering so that the sub-views can access `total` and `index` and properly style.    The other use cases are basically identical, but for different patterns. One is for joining together buttons that are in a row in the interface (Segmented), and the other is for collapsing margins when you have text elements in a vertical column.    Really this ticket encompasses more of a question or request for documentation clarity here. I'm not sure how it is not pre-concurrent, but I'm assuming mount-order will be non-deterministic if not now then shortly. Is there any reference to a pattern that works for this use case?    Namely: how children can access their mount order / total children. I can do it now useReducer/context, but I've seen it mount in a weird order at least once and think it was due to a suspense type thing, and would be curious a better practice for this.",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**    Feature / use case    **What is the current behavior?**    It seems currently there is no way to get the order of children from the children themselves with context.    **What is the expected behavior?**    I've run into this now in three use cases when building a style system: Breadcrumbs, Segmented views, and Text rhythm/spacing.    Example 1, breadcrumbs. You want to show an arrow on all but the last breadcrumb, but they may be deeply nested:        Where MyView should provide the ordering so that the sub-views can access `total` and `index` and properly style.    The other use cases are basically identical, but for different patterns. One is for joining together buttons that are in a row in the interface (Segmented), and the other is for collapsing margins when you have text elements in a vertical column.    Really this ticket encompasses more of a question or request for documentation clarity here. I'm not sure how it is not pre-concurrent, but I'm assuming mount-order will be non-deterministic if not now then shortly. Is there any reference to a pattern that works for this use case?    Namely: how children can access their mount order / total children. I can do it now useReducer/context, but I've seen it mount in a weird order at least once and think it was due to a suspense type thing, and would be curious a better practice for this.",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** Feature / use case **What is the current behavior?** It seems currently there is no way to get the order of children from the children themselves with context. **What is the expected behavior?** I've run into this now in three use cases when building a style system: Breadcrumbs, Segmented views, and Text rhythm/spacing. Example 1, breadcrumbs. You want to show an arrow on all but the last breadcrumb, but they may be deeply nested: Where MyView should provide the ordering so that the sub-views can access `total` and `index` and properly style. The other use cases are basically identical, but for different patterns. One is for joining together buttons that are in a row in the interface (Segmented), and the other is for collapsing margins when you have text elements in a vertical column. Really this ticket encompasses more of a question or request for documentation clarity here. I'm not sure how it is not pre-concurrent, but I'm assuming mount-order will be non-deterministic if not now then shortly. Is there any reference to a pattern that works for this use case? Namely: how children can access their mount order / total children. I can do it now useReducer/context, but I've seen it mount in a weird order at least once and think it was due to a suspense type thing, and would be curious a better practice for this.",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * feature / use case * * current behavior ? * * seems currently way get order child child context . * * expected behavior ? * * 've run three use case building style system : breadcrumb , segmented view , text rhythm/spacing . example 1 , breadcrumb . want show arrow last breadcrumb , may deeply nested : myview provide ordering sub-views access ` total ` ` index ` properly style . use case basically identical , different pattern . one joining together button row interface ( segmented ) , collapsing margin text element vertical column . really ticket encompasses question request documentation clarity . 'm sure pre-concurrent , 'm assuming mount-order non-deterministic shortly . reference pattern work use case ? namely : child access mount order / total child . usereducer/context , 've seen mount weird order least think due suspense type thing , would curious better practice .",
        "title_stopwords_removal_lemmatization": "using context pas mount order child concurrent"
    },
    {
        "issue_id": 423567338,
        "title": "[eslint-plugin-react-hooks] Add option to require functions from core hooks in dependencies",
        "label": [
            "Type: Feature Request",
            "Resolution: Stale"
        ],
        "date": "2019-03-21T04:21:58Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nfeature\r\n\r\n**What is the current behavior?**\r\n\r\nThe `react-hooks/exhaustive-deps` will currently accept either (and fix neither) of the following:\r\n\r\n```javascript\r\n// Scenario A: Function returned by core hook IS NOT specified as a dependency.\r\nconst [value, setValue] = useState(initialValue);\r\nconst toggle = useCallback(() => setValue(v => !v), []);\r\n```\r\n\r\n```javascript\r\n// Scenario B: Function returned by core hook IS specified as a dependency.\r\nconst [value, setValue] = useState(initialValue);\r\nconst toggle = useCallback(() => setValue(v => !v), [setValue]);\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nIf we add the following to our `.eslintrc.js`\r\n\r\n```\r\n// Introduces a `requireCoreFunctions` config option.\r\n'react-hooks/exhaustive-deps': ['error', { requireCoreFunctions: true }]\r\n```\r\nthen the rule should fail in scenario A, and fixing should result in scenario B.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nn/a",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**    feature    **What is the current behavior?**    The `react-hooks/exhaustive-deps` will currently accept either (and fix neither) of the following:    ```javascript  // Scenario A: Function returned by core hook IS NOT specified as a dependency.  const [value, setValue] = useState(initialValue);  const toggle = useCallback(() => setValue(v => !v), []);  ```    ```javascript  // Scenario B: Function returned by core hook IS specified as a dependency.  const [value, setValue] = useState(initialValue);  const toggle = useCallback(() => setValue(v => !v), [setValue]);  ```    **What is the expected behavior?**    If we add the following to our `.eslintrc.js`    ```  // Introduces a `requireCoreFunctions` config option.  'react-hooks/exhaustive-deps': ['error', { requireCoreFunctions: true }]  ```  then the rule should fail in scenario A, and fixing should result in scenario B.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    n/a",
        "human_words": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**    feature    **What is the current behavior?**    The `react-hooks/exhaustive-deps` will currently accept either (and fix neither) of the following:            **What is the expected behavior?**    If we add the following to our `.eslintrc.js`      then the rule should fail in scenario A, and fixing should result in scenario B.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    n/a",
        "human_words_regrex": " **Do you want to request a *feature* or report a *bug*?** feature **What is the current behavior?** The `react-hooks/exhaustive-deps` will currently accept either (and fix neither) of the following: **What is the expected behavior?** If we add the following to our `.eslintrc.js` then the rule should fail in scenario A, and fixing should result in scenario B. **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** n/a",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * feature * * current behavior ? * * ` react-hooks/exhaustive-deps ` currently accept either ( fix neither ) following : * * expected behavior ? * * add following ` .eslintrc.js ` rule fail scenario , fixing result scenario b . * * version react , browser / o affected issue ? work previous version react ? * * n/a",
        "title_stopwords_removal_lemmatization": "[ eslint-plugin-react-hooks ] add option require function core hook dependency"
    },
    {
        "issue_id": 423091922,
        "title": "[useContext] Throw error if 'useContext' is used outside function components",
        "label": [
            "Type: Feature Request",
            "Resolution: Needs More Information"
        ],
        "date": "2019-03-20T06:42:44Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\nFeature (need better errors)\r\n\r\n**What is the current behavior?**\r\nConsider the following functional component\r\n```\r\nimport React, { useContext } from \"React\"\r\n\r\nconst myFunctionComponent = props => <div>Hello useContext</div>\r\n```\r\n\r\nThe immediate reaction for most of us (newbies to hooks) to refactor the above code to accomodate `useContext` is as follows\r\n\r\n```\r\nimport React, { useContext } from \"React\"\r\nimport MyContext from \"./MyContext\"\r\n\r\n// React does not throw error\r\nconst { myContextValue } = useContext(MyContext)\r\n\r\nconst myFunctionComponent = props => <div>Hello useContext - {myContextValue}</div>\r\n```\r\n\r\nThe way to actually refactor is to explictly convert the arrow function return expression into a function body and then accomodate `useContext` inside along with a return statement, like this\r\n\r\n```\r\nimport React, { useContext } from \"React\"\r\nimport MyContext from \"./MyContext\"\r\n\r\nconst myFunctionComponent = props => {\r\n const { myContextValue } = useContext(MyContext)\r\n return (<div>Hello useContext - {myContextValue}</div>)\r\n}\r\n```\r\n\r\nNot only, react **does not throw error**, React app actually compiles, while the component in question fails to load with no information. This is very difficult to pin the reason to this specific issue.\r\n\r\n\r\n**What is the expected behavior?**\r\n\r\nReact should ideally throw some kind of error, when `useContext` is used outside of function components. This lack of error really bites us for people who are refactoring function components without a return statement.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact `16.8.x` with hooks support\r\n",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**  Feature (need better errors)    **What is the current behavior?**  Consider the following functional component  ```  import React, { useContext } from \"React\"    const myFunctionComponent = props => <div>Hello useContext</div>  ```    The immediate reaction for most of us (newbies to hooks) to refactor the above code to accomodate `useContext` is as follows    ```  import React, { useContext } from \"React\"  import MyContext from \"./MyContext\"    // React does not throw error  const { myContextValue } = useContext(MyContext)    const myFunctionComponent = props => <div>Hello useContext - {myContextValue}</div>  ```    The way to actually refactor is to explictly convert the arrow function return expression into a function body and then accomodate `useContext` inside along with a return statement, like this    ```  import React, { useContext } from \"React\"  import MyContext from \"./MyContext\"    const myFunctionComponent = props => {   const { myContextValue } = useContext(MyContext)   return (<div>Hello useContext - {myContextValue}</div>)  }  ```    Not only, react **does not throw error**, React app actually compiles, while the component in question fails to load with no information. This is very difficult to pin the reason to this specific issue.      **What is the expected behavior?**    React should ideally throw some kind of error, when `useContext` is used outside of function components. This lack of error really bites us for people who are refactoring function components without a return statement.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    React `16.8.x` with hooks support",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**  Feature (need better errors)    **What is the current behavior?**  Consider the following functional component      The immediate reaction for most of us (newbies to hooks) to refactor the above code to accomodate `useContext` is as follows        The way to actually refactor is to explictly convert the arrow function return expression into a function body and then accomodate `useContext` inside along with a return statement, like this        Not only, react **does not throw error**, React app actually compiles, while the component in question fails to load with no information. This is very difficult to pin the reason to this specific issue.      **What is the expected behavior?**    React should ideally throw some kind of error, when `useContext` is used outside of function components. This lack of error really bites us for people who are refactoring function components without a return statement.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    React `16.8.x` with hooks support",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** Feature (need better errors) **What is the current behavior?** Consider the following functional component The immediate reaction for most of us (newbies to hooks) to refactor the above code to accomodate `useContext` is as follows The way to actually refactor is to explictly convert the arrow function return expression into a function body and then accomodate `useContext` inside along with a return statement, like this Not only, react **does not throw error**, React app actually compiles, while the component in question fails to load with no information. This is very difficult to pin the reason to this specific issue. **What is the expected behavior?** React should ideally throw some kind of error, when `useContext` is used outside of function components. This lack of error really bites us for people who are refactoring function components without a return statement. **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** React `16.8.x` with hooks support",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * feature ( need better error ) * * current behavior ? * * consider following functional component immediate reaction u ( newbie hook ) refactor code accomodate ` usecontext ` follows way actually refactor explictly convert arrow function return expression function body accomodate ` usecontext ` inside along return statement , like , react * * throw error * * , react app actually compiles , component question fails load information . difficult pin reason specific issue . * * expected behavior ? * * react ideally throw kind error , ` usecontext ` used outside function component . lack error really bite u people refactoring function component without return statement . * * version react , browser / o affected issue ? work previous version react ? * * react ` 16.8.x ` hook support",
        "title_stopwords_removal_lemmatization": "[ usecontext ] throw error 'usecontext ' used outside function component"
    },
    {
        "issue_id": 419269091,
        "title": "eslint-react-hooks: should we enforce to use React.useMemo if there is no state hooks?",
        "label": [
            "Type: Feature Request",
            "Resolution: Needs More Information"
        ],
        "date": "2019-03-11T02:26:13Z",
        "status": "closed",
        "description": "1. Regarding the performance optimization, should we always use React.useMemo in case there is no state hooks inside a function component?\r\n2. If the answer is yes, can we use some eslint rules to make sure everyone do it?",
        "remove_template_description": "1. Regarding the performance optimization, should we always use React.useMemo in case there is no state hooks inside a function component?  2. If the answer is yes, can we use some eslint rules to make sure everyone do it?",
        "human_words": "1. Regarding the performance optimization, should we always use React.useMemo in case there is no state hooks inside a function component?  2. If the answer is yes, can we use some eslint rules to make sure everyone do it?",
        "human_words_regrex": "1. Regarding the performance optimization, should we always use React.useMemo in case there is no state hooks inside a function component? 2. If the answer is yes, can we use some eslint rules to make sure everyone do it?",
        "human_words_stopwords_removal_lemmatization": "1. regarding performance optimization , always use react.usememo case state hook inside function component ? 2. answer yes , use eslint rule make sure everyone ?",
        "title_stopwords_removal_lemmatization": "eslint-react-hooks : enforce use react.usememo state hook ?"
    },
    {
        "issue_id": 418939990,
        "title": "Can an error boundary prevent React's error logging?",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2019-03-08T20:11:45Z",
        "status": "open",
        "description": "I noticed [this unconditional `console.error`](https://github.com/facebook/react/blob/d0289c7e3a2dfc349dcce7f9eb3dee22464e97bd/packages/react-reconciler/src/ReactFiberErrorLogger.js#L86) which I'd like to prevent to keep the console clean from errors that are already \"caught\" in an error boundary.\r\n\r\nMaybe a condition on `capturedError.errorBoundaryFound` could prevent this logging?",
        "remove_template_description": "I noticed [this unconditional `console.error`](https://github.com/facebook/react/blob/d0289c7e3a2dfc349dcce7f9eb3dee22464e97bd/packages/react-reconciler/src/ReactFiberErrorLogger.js#L86) which I'd like to prevent to keep the console clean from errors that are already \"caught\" in an error boundary.    Maybe a condition on `capturedError.errorBoundaryFound` could prevent this logging?",
        "human_words": "I noticed [this unconditional `console.error`](https://github.com/facebook/react/blob/d0289c7e3a2dfc349dcce7f9eb3dee22464e97bd/packages/react-reconciler/src/ReactFiberErrorLogger.js#L86) which I'd like to prevent to keep the console clean from errors that are already \"caught\" in an error boundary.    Maybe a condition on `capturedError.errorBoundaryFound` could prevent this logging?",
        "human_words_regrex": "I noticed  which I'd like to prevent to keep the console clean from errors that are already \"caught\" in an error boundary. Maybe a condition on `capturedError.errorBoundaryFound` could prevent this logging?",
        "human_words_stopwords_removal_lemmatization": "noticed 'd like prevent keep console clean error already `` caught '' error boundary . maybe condition ` capturederror.errorboundaryfound ` could prevent logging ?",
        "title_stopwords_removal_lemmatization": "error boundary prevent react 's error logging ?"
    },
    {
        "issue_id": 414560911,
        "title": "[ESLint] Hardcore rule allowing default hooks using only inside custom ones",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2019-02-26T11:20:48Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nfeature\r\n\r\n**What is the current behavior?**\r\nThere is no rule\r\n\r\n**What is the expected behavior?**\r\nWe have some hardcore plugins like `eslint-plugin-lodash-fp`.\r\nWhy not have ESLint hardcore rule allowing default hooks using only inside custom ones?\r\n",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**  feature    **What is the current behavior?**  There is no rule    **What is the expected behavior?**  We have some hardcore plugins like `eslint-plugin-lodash-fp`.  Why not have ESLint hardcore rule allowing default hooks using only inside custom ones?",
        "human_words": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**  feature    **What is the current behavior?**  There is no rule    **What is the expected behavior?**  We have some hardcore plugins like `eslint-plugin-lodash-fp`.  Why not have ESLint hardcore rule allowing default hooks using only inside custom ones?",
        "human_words_regrex": " **Do you want to request a *feature* or report a *bug*?** feature **What is the current behavior?** There is no rule **What is the expected behavior?** We have some hardcore plugins like `eslint-plugin-lodash-fp`. Why not have ESLint hardcore rule allowing default hooks using only inside custom ones?",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * feature * * current behavior ? * * rule * * expected behavior ? * * hardcore plugins like ` eslint-plugin-lodash-fp ` . eslint hardcore rule allowing default hook using inside custom one ?",
        "title_stopwords_removal_lemmatization": "[ eslint ] hardcore rule allowing default hook using inside custom one"
    },
    {
        "issue_id": 414335006,
        "title": "Collapse forwardRef and other wrappers in React error stacks",
        "label": [
            "Type: Feature Request",
            "Resolution: Stale"
        ],
        "date": "2019-02-25T22:20:17Z",
        "status": "closed",
        "description": "**Feature**\r\n\r\n**What is the current behavior?**\r\n\r\nWith a UI kit that uses forwardRefs, I get error messages like this:\r\n\r\n![image](https://user-images.githubusercontent.com/12100/53372321-61ceae00-3907-11e9-9d20-190315cc7f06.png)\r\n\r\n**What is the expected behavior?**\r\n\r\nIt would look a lot better if forwardRefs were a bit less obtrusive, and if they picked up the functions displayName rather than just the name of the function they wrap.\r\n\r\nIn our UI Kit we have a pattern like:\r\n\r\n```\r\nconst View = forwardRef(function UIView(){ return <div /> })\r\nView.displayName = 'SomeDisplayName'\r\n```\r\n\r\nFor some reason it's not showing that, just showing the inner one. Further the \"bigness\" of ForwardRef() makes it hard to see visually when scanning. Perhaps something more like this would help:\r\n\r\n```\r\nWarning: Encountered two children with the same key, `confluence`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.\r\n    in div (created by ForwardRef(Gloss))\r\n    in Gloss (ForwardRef)\r\n    in Gloss (ForwardRef) (created by OnboardMain)\r\n    in div (created by Gloss (ForwardRef))\r\n    in Gloss (ForwardRef)\r\n    in Gloss (ForwardRef) (created by SliderPane)\r\n```\r\n\r\nFurther, the `created by` information is often more useful to me, but it's never aligned nicely. Could do something like:\r\n\r\n```\r\nWarning: Encountered two children with the same key, `confluence`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.\r\n      in div (created by ForwardRef(Gloss))\r\n      in Gloss (ForwardRef)\r\n    from OnboardMain:\r\n      in Gloss (ForwardRef)\r\n   from Gloss (ForwardRef):\r\n      in div\r\n      in Gloss (ForwardRef)\r\n   from SliderPane:\r\n      in Gloss (ForwardRef)\r\n```\r\n\r\nAll together, if it would pick up displayNames, the stack would be far more readable for me:\r\n\r\n\r\n```\r\nWarning: Encountered two children with the same key, `confluence`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.\r\n      in div (created by Row)\r\n      in View (forwardRef)\r\n    from OnboardMain:\r\n      in Row (forwardRef)\r\n   from Col (forwardRef):\r\n      in div\r\n      in Grid (forwardRef)\r\n   from SliderPane:\r\n      in View (forwardRef)\r\n```\r\n",
        "remove_template_description": "**Feature**    **What is the current behavior?**    With a UI kit that uses forwardRefs, I get error messages like this:    ![image](https://user-images.githubusercontent.com/12100/53372321-61ceae00-3907-11e9-9d20-190315cc7f06.png)    **What is the expected behavior?**    It would look a lot better if forwardRefs were a bit less obtrusive, and if they picked up the functions displayName rather than just the name of the function they wrap.    In our UI Kit we have a pattern like:    ```  const View = forwardRef(function UIView(){ return <div /> })  View.displayName = 'SomeDisplayName'  ```    For some reason it's not showing that, just showing the inner one. Further the \"bigness\" of ForwardRef() makes it hard to see visually when scanning. Perhaps something more like this would help:    ```  Warning: Encountered two children with the same key, `confluence`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.      in div (created by ForwardRef(Gloss))      in Gloss (ForwardRef)      in Gloss (ForwardRef) (created by OnboardMain)      in div (created by Gloss (ForwardRef))      in Gloss (ForwardRef)      in Gloss (ForwardRef) (created by SliderPane)  ```    Further, the `created by` information is often more useful to me, but it's never aligned nicely. Could do something like:    ```  Warning: Encountered two children with the same key, `confluence`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.        in div (created by ForwardRef(Gloss))        in Gloss (ForwardRef)      from OnboardMain:        in Gloss (ForwardRef)     from Gloss (ForwardRef):        in div        in Gloss (ForwardRef)     from SliderPane:        in Gloss (ForwardRef)  ```    All together, if it would pick up displayNames, the stack would be far more readable for me:      ```  Warning: Encountered two children with the same key, `confluence`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.        in div (created by Row)        in View (forwardRef)      from OnboardMain:        in Row (forwardRef)     from Col (forwardRef):        in div        in Grid (forwardRef)     from SliderPane:        in View (forwardRef)  ```",
        "human_words": "**Feature**    **What is the current behavior?**    With a UI kit that uses forwardRefs, I get error messages like this:    ![image](https://user-images.githubusercontent.com/12100/53372321-61ceae00-3907-11e9-9d20-190315cc7f06.png)    **What is the expected behavior?**    It would look a lot better if forwardRefs were a bit less obtrusive, and if they picked up the functions displayName rather than just the name of the function they wrap.    In our UI Kit we have a pattern like:        For some reason it's not showing that, just showing the inner one. Further the \"bigness\" of ForwardRef() makes it hard to see visually when scanning. Perhaps something more like this would help:        Further, the `created by` information is often more useful to me, but it's never aligned nicely. Could do something like:        All together, if it would pick up displayNames, the stack would be far more readable for me:      ",
        "human_words_regrex": "**Feature** **What is the current behavior?** With a UI kit that uses forwardRefs, I get error messages like this: ! **What is the expected behavior?** It would look a lot better if forwardRefs were a bit less obtrusive, and if they picked up the functions displayName rather than just the name of the function they wrap. In our UI Kit we have a pattern like: For some reason it's not showing that, just showing the inner one. Further the \"bigness\" of ForwardRef() makes it hard to see visually when scanning. Perhaps something more like this would help: Further, the `created by` information is often more useful to me, but it's never aligned nicely. Could do something like: All together, if it would pick up displayNames, the stack would be far more readable for me: ",
        "human_words_stopwords_removal_lemmatization": "* * feature * * * * current behavior ? * * ui kit us forwardrefs , get error message like : ! * * expected behavior ? * * would look lot better forwardrefs bit le obtrusive , picked function displayname rather name function wrap . ui kit pattern like : reason 's showing , showing inner one . `` bigness '' forwardref ( ) make hard see visually scanning . perhaps something like would help : , ` created ` information often useful , 's never aligned nicely . could something like : together , would pick displaynames , stack would far readable :",
        "title_stopwords_removal_lemmatization": "collapse forwardref wrapper react error stack"
    },
    {
        "issue_id": 409314995,
        "title": "Pass dependencies to `useMemo` callback as arguments",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2019-02-12T14:02:43Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature\r\n\r\n**What is the current behavior?**\r\n\r\nThe `useMemo` factory function does not receive any arguments.\r\n\r\n**What is the desired behavior?**\r\n\r\nThe `useMemo` factory function would receive the dependencies as arguments.\r\n\r\n**Why?**\r\n\r\nThis would allow more compact syntax for memoizing components because of implicit returns and desctructuring. This came to mind after experiencing some of the issues in #14110. There may be other potential use cases too \r\n\r\n**Example of current behavior**\r\n\r\n```jsx\r\nconst Avatar = () => {\r\n  const [src] = useSomeGlobalState([\r\n    state => state.user.avatar.src\r\n  ]);\r\n  return useMemo(() => <img src={src} />, [src])\r\n}\r\n```\r\n\r\n**Example of proposed behavior**\r\n\r\n```jsx\r\nconst Avatar = () => \r\n  useMemo(\r\n    (src) => <img src={src} />,\r\n    useSomeGlobalState([state => state.user.avatar.src])\r\n  );\r\n```\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.8.1\r\n",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**    Feature    **What is the current behavior?**    The `useMemo` factory function does not receive any arguments.    **What is the desired behavior?**    The `useMemo` factory function would receive the dependencies as arguments.    **Why?**    This would allow more compact syntax for memoizing components because of implicit returns and desctructuring. This came to mind after experiencing some of the issues in #14110. There may be other potential use cases too     **Example of current behavior**    ```jsx  const Avatar = () => {    const [src] = useSomeGlobalState([      state => state.user.avatar.src    ]);    return useMemo(() => <img src={src} />, [src])  }  ```    **Example of proposed behavior**    ```jsx  const Avatar = () =>     useMemo(      (src) => <img src={src} />,      useSomeGlobalState([state => state.user.avatar.src])    );  ```    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    React 16.8.1",
        "human_words": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**    Feature    **What is the current behavior?**    The `useMemo` factory function does not receive any arguments.    **What is the desired behavior?**    The `useMemo` factory function would receive the dependencies as arguments.    **Why?**    This would allow more compact syntax for memoizing components because of implicit returns and desctructuring. This came to mind after experiencing some of the issues in #14110. There may be other potential use cases too     **Example of current behavior**        **Example of proposed behavior**        **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    React 16.8.1",
        "human_words_regrex": " **Do you want to request a *feature* or report a *bug*?** Feature **What is the current behavior?** The `useMemo` factory function does not receive any arguments. **What is the desired behavior?** The `useMemo` factory function would receive the dependencies as arguments. **Why?** This would allow more compact syntax for memoizing components because of implicit returns and desctructuring. This came to mind after experiencing some of the issues in #14110. There may be other potential use cases too **Example of current behavior** **Example of proposed behavior** **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** React 16.8.1",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * feature * * current behavior ? * * ` usememo ` factory function receive argument . * * desired behavior ? * * ` usememo ` factory function would receive dependency argument . * * ? * * would allow compact syntax memoizing component implicit return desctructuring . came mind experiencing issue # 14110. may potential use case * * example current behavior * * * * example proposed behavior * * * * version react , browser / o affected issue ? work previous version react ? * * react 16.8.1",
        "title_stopwords_removal_lemmatization": "pas dependency ` usememo ` callback argument"
    },
    {
        "issue_id": 408412362,
        "title": "Shallow renderer does not support React.memo",
        "label": [
            "Type: Feature Request",
            "Component: Shallow Renderer"
        ],
        "date": "2019-02-09T08:44:57Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n**What is the current behavior?**\r\nIn normal rendering, you can memoize a class-based component: https://jsfiddle.net/586ea3cx/\r\n\r\nWith the shallow renderer, it seems like you can't: https://jsfiddle.net/odj217Lv/1/\r\n\r\nThis might be blocking https://github.com/airbnb/enzyme/pull/1914, in which tests are failing with `Cannot call a class as a function`. (it's tough to repro stuff with the shallow renderer)",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**  bug    **What is the current behavior?**  In normal rendering, you can memoize a class-based component: https://jsfiddle.net/586ea3cx/    With the shallow renderer, it seems like you can't: https://jsfiddle.net/odj217Lv/1/    This might be blocking https://github.com/airbnb/enzyme/pull/1914, in which tests are failing with `Cannot call a class as a function`. (it's tough to repro stuff with the shallow renderer)",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**  bug    **What is the current behavior?**  In normal rendering, you can memoize a class-based component: https://jsfiddle.net/586ea3cx/    With the shallow renderer, it seems like you can't: https://jsfiddle.net/odj217Lv/1/    This might be blocking https://github.com/airbnb/enzyme/pull/1914, in which tests are failing with `Cannot call a class as a function`. (it's tough to repro stuff with the shallow renderer)",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** bug **What is the current behavior?** In normal rendering, you can memoize a class-based component:  With the shallow renderer, it seems like you can't:  This might be blocking  in which tests are failing with `Cannot call a class as a function`. (it's tough to repro stuff with the shallow renderer)",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * bug * * current behavior ? * * normal rendering , memoize class-based component : shallow renderer , seems like ca n't : might blocking test failing ` call class function ` . ( 's tough repro stuff shallow renderer )",
        "title_stopwords_removal_lemmatization": "shallow renderer support react.memo"
    },
    {
        "issue_id": 407286740,
        "title": "Unhelpful warning for `act` for react-dom@16.8",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2019-02-06T15:22:53Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature/Improvement\r\n\r\n**What is the current behavior?**\r\n\r\nIf there is test code that should be wrapped in `act(...)` then the current warning is given:\r\n\r\n```\r\n console.error node_modules/react-dom/cjs/react-dom.development.js:506\r\n    Warning: An update to null inside a test was not wrapped in act(...).\r\n\r\n    When testing, code that causes React state updates should be wrapped into act(...):\r\n\r\n    act(() => {\r\n      /* fire events that update state */\r\n    });\r\n    /* assert on the output */\r\n\r\n    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://fb.me/react-wrap-tests-with-act\r\n```\r\n\r\nWhen upgrading a large code base, this is basically useless.\r\n\r\n**What is the expected behavior?**\r\n\r\nProvide at least the test name if not the line number of code that triggered the warning.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nreact@16.8.0\r\nreact-dom@16.8.0",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**    Feature/Improvement    **What is the current behavior?**    If there is test code that should be wrapped in `act(...)` then the current warning is given:    ```   console.error node_modules/react-dom/cjs/react-dom.development.js:506      Warning: An update to null inside a test was not wrapped in act(...).        When testing, code that causes React state updates should be wrapped into act(...):        act(() => {        /* fire events that update state */      });      /* assert on the output */        This ensures that you're testing the behavior the user would see in the browser. Learn more at https://fb.me/react-wrap-tests-with-act  ```    When upgrading a large code base, this is basically useless.    **What is the expected behavior?**    Provide at least the test name if not the line number of code that triggered the warning.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    react@16.8.0  react-dom@16.8.0",
        "human_words": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**    Feature/Improvement    **What is the current behavior?**    If there is test code that should be wrapped in `act(...)` then the current warning is given:        When upgrading a large code base, this is basically useless.    **What is the expected behavior?**    Provide at least the test name if not the line number of code that triggered the warning.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    react@16.8.0  react-dom@16.8.0",
        "human_words_regrex": " **Do you want to request a *feature* or report a *bug*?** Feature/Improvement **What is the current behavior?** If there is test code that should be wrapped in `act(...)` then the current warning is given: When upgrading a large code base, this is basically useless. **What is the expected behavior?** Provide at least the test name if not the line number of code that triggered the warning. **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** react@16.8.0 react-dom@16.8.0",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * feature/improvement * * current behavior ? * * test code wrapped ` act ( ... ) ` current warning given : upgrading large code base , basically useless . * * expected behavior ? * * provide least test name line number code triggered warning . * * version react , browser / o affected issue ? work previous version react ? * * react @ 16.8.0 react-dom @ 16.8.0",
        "title_stopwords_removal_lemmatization": "unhelpful warning ` act ` react-dom @ 16.8"
    },
    {
        "issue_id": 406046695,
        "title": "Simultaneous key events in effect handled out of order",
        "label": [
            "Type: Feature Request",
            "Resolution: Backlog"
        ],
        "date": "2019-02-03T02:57:23Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nReport a bug.\r\n\r\n**What is the current behavior?**\r\n\r\nI have an app that's registering event listeners for `window`'s key events (via `useEffect`). Those event listeners are triggering state updates (via `useState`). I think I have found a bug where simultaneous key events occurring in the same frame (whether down or up) will be handled out of order, causing state to becoming out of sync.\r\n\r\nTake the following simple app (https://codesandbox.io/s/1z3v9zrk4j). I've kept this as keyup only for simplicity.\r\n\r\n```\r\nfunction App() {\r\n  const [keys, setKeys] = useState([]);\r\n\r\n  console.log('App', keys);\r\n\r\n  const onKeyUp = function (event) {\r\n    console.log('onKeyUp', event.key, keys);\r\n\r\n    setKeys([...keys, event.key]);\r\n  };\r\n\r\n  useEffect(function () {\r\n    console.log('effect', keys);\r\n\r\n    window.addEventListener('keyup', onKeyUp);\r\n\r\n    return function () {\r\n      console.log('removing event listener', keys);\r\n\r\n      window.removeEventListener('keyup', onKeyUp);\r\n    };\r\n  });\r\n\r\n  return <p>{keys.join(', ')}</p>;\r\n}\r\n```\r\n\r\nIf I press down any two keys, e.g. the \"q\" and \"w\" keys, and then release them at precisely the same time, the following happens:\r\n\r\n- The `keyup` event listener for `w` is called, which in turn calls `setKeys` with `['w']`\r\n- `App` is re-rendered with `keys === ['w']`\r\n- The `keyup` event listener for `q` is called, which in turn calls `setKeys` with `['q']`\r\n- The effect's cleanup function is called, removing the event listener with `keys === []`\r\n- The effect is run again, the event listener being added with `keys === ['w']`\r\n- `App` is re-rendered with `keys === ['q']`\r\n- The effect's cleanup function is called, removing the event listener with `keys ===['w']`\r\n- The effect is run again, the event listener being added with `keys === ['q']`\r\n\r\nThis results in `keys === ['q']`. The render with `w` has been lost.\r\n\r\nWith three keys, only two keys are reliably shown. Four keys - only two are reliably shown.\r\n\r\nIf I add another `useState` call, the first `useState` has no issues - all keys are reliably detected. See https://codesandbox.io/s/0yo51n5wv:\r\n\r\n```\r\nfunction App() {\r\n  const [keys, setKeys] = useState([]); \r\n  const [dummy, setDummy] = useState('foo');\r\n\r\n  console.log(\"rendering App\", keys);\r\n\r\n  const onKeyUp = function(event) {\r\n    console.log(\"onKeyUp event received\", event.key, keys);\r\n\r\n    setKeys([...keys, event.key]);\r\n    setDummy('foo');\r\n  };\r\n\r\n  useEffect(function() {\r\n    console.log(\"adding event listener\", keys);\r\n\r\n    window.addEventListener(\"keyup\", onKeyUp);\r\n\r\n    return function() {\r\n      console.log(\"removing event listener\", keys);\r\n\r\n      window.removeEventListener(\"keyup\", onKeyUp);\r\n    };\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <p>Keyups received:</p>\r\n      <p>{keys.join(\", \")}</p>\r\n      <button onClick={() => setKeys([])}>Reset</button>\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nI would expect the final state array to contain all keys released, in order. There are a few workarounds for this issue (e.g. passing a function to `setState` to retrieve the current value instead of using the rendered value), but from the documentation it seems that is an escape hatch for use when the effect's callback is not renewed on each state change, and should not be necessary in this case (unless I've misunderstood).\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nIt happens on both versions that support hooks - `16.8.0-alpha.0` and `16.8.0-alpha.1`. This is on Chrome/Safari/Firefox on MacOS Mojave.\r\n",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**    Report a bug.    **What is the current behavior?**    I have an app that's registering event listeners for `window`'s key events (via `useEffect`). Those event listeners are triggering state updates (via `useState`). I think I have found a bug where simultaneous key events occurring in the same frame (whether down or up) will be handled out of order, causing state to becoming out of sync.    Take the following simple app (https://codesandbox.io/s/1z3v9zrk4j). I've kept this as keyup only for simplicity.    ```  function App() {    const [keys, setKeys] = useState([]);      console.log('App', keys);      const onKeyUp = function (event) {      console.log('onKeyUp', event.key, keys);        setKeys([...keys, event.key]);    };      useEffect(function () {      console.log('effect', keys);        window.addEventListener('keyup', onKeyUp);        return function () {        console.log('removing event listener', keys);          window.removeEventListener('keyup', onKeyUp);      };    });      return <p>{keys.join(', ')}</p>;  }  ```    If I press down any two keys, e.g. the \"q\" and \"w\" keys, and then release them at precisely the same time, the following happens:    - The `keyup` event listener for `w` is called, which in turn calls `setKeys` with `['w']`  - `App` is re-rendered with `keys === ['w']`  - The `keyup` event listener for `q` is called, which in turn calls `setKeys` with `['q']`  - The effect's cleanup function is called, removing the event listener with `keys === []`  - The effect is run again, the event listener being added with `keys === ['w']`  - `App` is re-rendered with `keys === ['q']`  - The effect's cleanup function is called, removing the event listener with `keys ===['w']`  - The effect is run again, the event listener being added with `keys === ['q']`    This results in `keys === ['q']`. The render with `w` has been lost.    With three keys, only two keys are reliably shown. Four keys - only two are reliably shown.    If I add another `useState` call, the first `useState` has no issues - all keys are reliably detected. See https://codesandbox.io/s/0yo51n5wv:    ```  function App() {    const [keys, setKeys] = useState([]);     const [dummy, setDummy] = useState('foo');      console.log(\"rendering App\", keys);      const onKeyUp = function(event) {      console.log(\"onKeyUp event received\", event.key, keys);        setKeys([...keys, event.key]);      setDummy('foo');    };      useEffect(function() {      console.log(\"adding event listener\", keys);        window.addEventListener(\"keyup\", onKeyUp);        return function() {        console.log(\"removing event listener\", keys);          window.removeEventListener(\"keyup\", onKeyUp);      };    });      return (      <div>        <p>Keyups received:</p>        <p>{keys.join(\", \")}</p>        <button onClick={() => setKeys([])}>Reset</button>      </div>    );  }  ```    **What is the expected behavior?**    I would expect the final state array to contain all keys released, in order. There are a few workarounds for this issue (e.g. passing a function to `setState` to retrieve the current value instead of using the rendered value), but from the documentation it seems that is an escape hatch for use when the effect's callback is not renewed on each state change, and should not be necessary in this case (unless I've misunderstood).    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    It happens on both versions that support hooks - `16.8.0-alpha.0` and `16.8.0-alpha.1`. This is on Chrome/Safari/Firefox on MacOS Mojave.",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**    Report a bug.    **What is the current behavior?**    I have an app that's registering event listeners for `window`'s key events (via `useEffect`). Those event listeners are triggering state updates (via `useState`). I think I have found a bug where simultaneous key events occurring in the same frame (whether down or up) will be handled out of order, causing state to becoming out of sync.    Take the following simple app (https://codesandbox.io/s/1z3v9zrk4j). I've kept this as keyup only for simplicity.        If I press down any two keys, e.g. the \"q\" and \"w\" keys, and then release them at precisely the same time, the following happens:    - The `keyup` event listener for `w` is called, which in turn calls `setKeys` with `['w']`  - `App` is re-rendered with `keys === ['w']`  - The `keyup` event listener for `q` is called, which in turn calls `setKeys` with `['q']`  - The effect's cleanup function is called, removing the event listener with `keys === []`  - The effect is run again, the event listener being added with `keys === ['w']`  - `App` is re-rendered with `keys === ['q']`  - The effect's cleanup function is called, removing the event listener with `keys ===['w']`  - The effect is run again, the event listener being added with `keys === ['q']`    This results in `keys === ['q']`. The render with `w` has been lost.    With three keys, only two keys are reliably shown. Four keys - only two are reliably shown.    If I add another `useState` call, the first `useState` has no issues - all keys are reliably detected. See https://codesandbox.io/s/0yo51n5wv:        **What is the expected behavior?**    I would expect the final state array to contain all keys released, in order. There are a few workarounds for this issue (e.g. passing a function to `setState` to retrieve the current value instead of using the rendered value), but from the documentation it seems that is an escape hatch for use when the effect's callback is not renewed on each state change, and should not be necessary in this case (unless I've misunderstood).    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    It happens on both versions that support hooks - `16.8.0-alpha.0` and `16.8.0-alpha.1`. This is on Chrome/Safari/Firefox on MacOS Mojave.",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** Report a bug. **What is the current behavior?** I have an app that's registering event listeners for `window`'s key events (via `useEffect`). Those event listeners are triggering state updates (via `useState`). I think I have found a bug where simultaneous key events occurring in the same frame (whether down or up) will be handled out of order, causing state to becoming out of sync. Take the following simple app ( I've kept this as keyup only for simplicity. If I press down any two keys, e.g. the \"q\" and \"w\" keys, and then release them at precisely the same time, the following happens: - The `keyup` event listener for `w` is called, which in turn calls `setKeys` with `['w']` - `App` is re-rendered with `keys === ['w']` - The `keyup` event listener for `q` is called, which in turn calls `setKeys` with `['q']` - The effect's cleanup function is called, removing the event listener with `keys === []` - The effect is run again, the event listener being added with `keys === ['w']` - `App` is re-rendered with `keys === ['q']` - The effect's cleanup function is called, removing the event listener with `keys ===['w']` - The effect is run again, the event listener being added with `keys === ['q']` This results in `keys === ['q']`. The render with `w` has been lost. With three keys, only two keys are reliably shown. Four keys - only two are reliably shown. If I add another `useState` call, the first `useState` has no issues - all keys are reliably detected. See  **What is the expected behavior?** I would expect the final state array to contain all keys released, in order. There are a few workarounds for this issue (e.g. passing a function to `setState` to retrieve the current value instead of using the rendered value), but from the documentation it seems that is an escape hatch for use when the effect's callback is not renewed on each state change, and should not be necessary in this case (unless I've misunderstood). **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** It happens on both versions that support hooks - `16.8.0-alpha.0` and `16.8.0-alpha.1`. This is on Chrome/Safari/Firefox on MacOS Mojave.",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * report bug . * * current behavior ? * * app 's registering event listener ` window ` 's key event ( via ` useeffect ` ) . event listener triggering state update ( via ` usestate ` ) . think found bug simultaneous key event occurring frame ( whether ) handled order , causing state becoming sync . take following simple app ( 've kept keyup simplicity . press two key , e.g . `` q '' `` w '' key , release precisely time , following happens : - ` keyup ` event listener ` w ` called , turn call ` setkeys ` ` [ ' w ' ] ` - ` app ` re-rendered ` key === [ ' w ' ] ` - ` keyup ` event listener ` q ` called , turn call ` setkeys ` ` [ ' q ' ] ` - effect 's cleanup function called , removing event listener ` key === [ ] ` - effect run , event listener added ` key === [ ' w ' ] ` - ` app ` re-rendered ` key === [ ' q ' ] ` - effect 's cleanup function called , removing event listener ` key === [ ' w ' ] ` - effect run , event listener added ` key === [ ' q ' ] ` result ` key === [ ' q ' ] ` . render ` w ` lost . three key , two key reliably shown . four key - two reliably shown . add another ` usestate ` call , first ` usestate ` issue - key reliably detected . see * * expected behavior ? * * would expect final state array contain key released , order . workarounds issue ( e.g . passing function ` setstate ` retrieve current value instead using rendered value ) , documentation seems escape hatch use effect 's callback renewed state change , necessary case ( unless 've misunderstood ) . * * version react , browser / o affected issue ? work previous version react ? * * happens version support hook - ` 16.8.0-alpha.0 ` ` 16.8.0-alpha.1 ` . chrome/safari/firefox macos mojave .",
        "title_stopwords_removal_lemmatization": "simultaneous key event effect handled order"
    },
    {
        "issue_id": 406039435,
        "title": "adding if directive ",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2019-02-03T00:52:14Z",
        "status": "closed",
        "description": "if you added if directive to any element for showing the element or not that would be better than making a js expression in my opinion \r\n\r\n**regular way**\r\n```js\r\nconst App = (props) => {reactif={true}\r\n    let name = props.name;\r\n    return (\r\n        <div >\r\n            {name === 'koko' ? <div className=\"yousef\">{name}</div> : null}\r\n        </div>\r\n    )\r\n}\r\n\r\nReactDOM.render(<App name=\"koko\" />, document.getElementById('app'))\r\n```\r\n**my way** ( i edited the react file btw and it worked )\r\n```js\r\nconst App = (props) => {\r\n    let name = props.name;\r\n    return (\r\n        <div >\r\n            <div className=\"yousef\" reactif={name === 'koko'}>{name}</div> \r\n        </div>\r\n    )\r\n}\r\n\r\nReactDOM.render(<App name=\"koko\" />, document.getElementById('app'))\r\n```\r\n**mmm**\r\ni hope you talk that into consideration \r\ni mean less than 1kb will not make difference :\"D\r\n\r\n**React code**\r\n```js\r\nvar RESERVED_PROPS = {\r\n  key: true,\r\n  ref: true,\r\n  __self: true,\r\n  __source: true,\r\n  reactif: true\r\n};\r\n\r\nif (config != null) {\r\n    if (hasValidRef(config)) {\r\n      ref = config.ref;\r\n    }\r\n    if (hasValidKey(config)) {\r\n      key = '' + config.key;\r\n    }\r\n    // i added that\r\n    if (config.reactif){\r\n      reactif = config.reactif\r\n      if (reactif === false){\r\n        return null\r\n      } else if (reactif !== true || reactif !== false){\r\n        console.error('reactif expression didn\\'t return bolean value')\r\n      }\r\n    }\r\n\r\n    self = config.__self === undefined ? null : config.__self;\r\n    source = config.__source === undefined ? null : config.__source;\r\n    // Remaining properties are added to a new props object\r\n    for (propName in config) {\r\n      if (hasOwnProperty$1.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\r\n        props[propName] = config[propName];\r\n      }\r\n    }\r\n }\r\n```",
        "remove_template_description": "if you added if directive to any element for showing the element or not that would be better than making a js expression in my opinion     **regular way**  ```js  const App = (props) => {reactif={true}      let name = props.name;      return (          <div >              {name === 'koko' ? <div className=\"yousef\">{name}</div> : null}          </div>      )  }    ReactDOM.render(<App name=\"koko\" />, document.getElementById('app'))  ```  **my way** ( i edited the react file btw and it worked )  ```js  const App = (props) => {      let name = props.name;      return (          <div >              <div className=\"yousef\" reactif={name === 'koko'}>{name}</div>           </div>      )  }    ReactDOM.render(<App name=\"koko\" />, document.getElementById('app'))  ```  **mmm**  i hope you talk that into consideration   i mean less than 1kb will not make difference :\"D    **React code**  ```js  var RESERVED_PROPS = {    key: true,    ref: true,    __self: true,    __source: true,    reactif: true  };    if (config != null) {      if (hasValidRef(config)) {        ref = config.ref;      }      if (hasValidKey(config)) {        key = '' + config.key;      }      // i added that      if (config.reactif){        reactif = config.reactif        if (reactif === false){          return null        } else if (reactif !== true || reactif !== false){          console.error('reactif expression didn\\'t return bolean value')        }      }        self = config.__self === undefined ? null : config.__self;      source = config.__source === undefined ? null : config.__source;      // Remaining properties are added to a new props object      for (propName in config) {        if (hasOwnProperty$1.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {          props[propName] = config[propName];        }      }   }  ```",
        "human_words": "if you added if directive to any element for showing the element or not that would be better than making a js expression in my opinion     **regular way**    **my way** ( i edited the react file btw and it worked )    **mmm**  i hope you talk that into consideration   i mean less than 1kb will not make difference :\"D    **React code**  ",
        "human_words_regrex": "if you added if directive to any element for showing the element or not that would be better than making a js expression in my opinion **regular way** **my way** ( i edited the react file btw and it worked ) **mmm** i hope you talk that into consideration i mean less than 1kb will not make difference :\"D **React code** ",
        "human_words_stopwords_removal_lemmatization": "added directive element showing element would better making j expression opinion * * regular way * * * * way * * ( edited react file btw worked ) * * mmm * * hope talk consideration mean le 1kb make difference : '' * * react code * *",
        "title_stopwords_removal_lemmatization": "adding directive"
    },
    {
        "issue_id": 404708642,
        "title": "Allow the same DOM node to use both a callback and a RefObject in its ref prop",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2019-01-30T10:43:37Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?** Feature\r\n\r\n**What is the current behavior?**\r\n\r\nThe `ref` attribute passed to a DOM node can be either a callback or a `RefObject`, but not both. Sometimes, that's exactly what's required: for example, a library like [react-pose](https://popmotion.io/pose/api/posed/#posed-usage-create-a-posed-component-existing-components) demands ref forwarding to work with a React Component, but you'd also like to retain a reference to the _same_ parent DOM node within that component itself for a different reason. It's often not possible to nest DOM nodes to achieve a similar thing using two different ref attributes as that breaks layout.\r\n\r\nHere's a link to a naive attempt to achieve this: https://codesandbox.io/s/4jyw3q3v57\r\n\r\nI'm not surprised this doesn't work as there's no reason for the parent ref callback to fire, but I don't know how else to go about it.\r\n\r\n**What is the expected behavior?**\r\n\r\nThe callback provides the component with its own reference to the parent DOM node, whilst also providing it to the parent component via the passed `RefObject`.\r\n",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?** Feature    **What is the current behavior?**    The `ref` attribute passed to a DOM node can be either a callback or a `RefObject`, but not both. Sometimes, that's exactly what's required: for example, a library like [react-pose](https://popmotion.io/pose/api/posed/#posed-usage-create-a-posed-component-existing-components) demands ref forwarding to work with a React Component, but you'd also like to retain a reference to the _same_ parent DOM node within that component itself for a different reason. It's often not possible to nest DOM nodes to achieve a similar thing using two different ref attributes as that breaks layout.    Here's a link to a naive attempt to achieve this: https://codesandbox.io/s/4jyw3q3v57    I'm not surprised this doesn't work as there's no reason for the parent ref callback to fire, but I don't know how else to go about it.    **What is the expected behavior?**    The callback provides the component with its own reference to the parent DOM node, whilst also providing it to the parent component via the passed `RefObject`.",
        "human_words": "**Do you want to request a *feature* or report a *bug*?** Feature    **What is the current behavior?**    The `ref` attribute passed to a DOM node can be either a callback or a `RefObject`, but not both. Sometimes, that's exactly what's required: for example, a library like [react-pose](https://popmotion.io/pose/api/posed/#posed-usage-create-a-posed-component-existing-components) demands ref forwarding to work with a React Component, but you'd also like to retain a reference to the _same_ parent DOM node within that component itself for a different reason. It's often not possible to nest DOM nodes to achieve a similar thing using two different ref attributes as that breaks layout.    Here's a link to a naive attempt to achieve this: https://codesandbox.io/s/4jyw3q3v57    I'm not surprised this doesn't work as there's no reason for the parent ref callback to fire, but I don't know how else to go about it.    **What is the expected behavior?**    The callback provides the component with its own reference to the parent DOM node, whilst also providing it to the parent component via the passed `RefObject`.",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** Feature **What is the current behavior?** The `ref` attribute passed to a DOM node can be either a callback or a `RefObject`, but not both. Sometimes, that's exactly what's required: for example, a library like  demands ref forwarding to work with a React Component, but you'd also like to retain a reference to the _same_ parent DOM node within that component itself for a different reason. It's often not possible to nest DOM nodes to achieve a similar thing using two different ref attributes as that breaks layout. Here's a link to a naive attempt to achieve this:  I'm not surprised this doesn't work as there's no reason for the parent ref callback to fire, but I don't know how else to go about it. **What is the expected behavior?** The callback provides the component with its own reference to the parent DOM node, whilst also providing it to the parent component via the passed `RefObject`.",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * feature * * current behavior ? * * ` ref ` attribute passed dom node either callback ` refobject ` , . sometimes , 's exactly 's required : example , library like demand ref forwarding work react component , 'd also like retain reference _same_ parent dom node within component different reason . 's often possible nest dom node achieve similar thing using two different ref attribute break layout . 's link naive attempt achieve : 'm surprised n't work 's reason parent ref callback fire , n't know else go . * * expected behavior ? * * callback provides component reference parent dom node , whilst also providing parent component via passed ` refobject ` .",
        "title_stopwords_removal_lemmatization": "allow dom node use callback refobject ref prop"
    },
    {
        "issue_id": 403518821,
        "title": "Support Proxy as child",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2019-01-27T06:20:31Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\n**What is the current behavior?**\r\nObjects are not valid as a React child\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\nN/A\r\n\r\n**What is the expected behavior?**\r\nI'm trying to build a system that auto-detects if data is used in a React component. To do this, I detect usage during `render()` by using Proxies, which can register all access. This data, in turn, is used to prevent needless re-renders.\r\n\r\nA parent component can pass a Proxy which represents a string, for example, to a child component, which, without knowing it is a Proxy, can use this value in a calculation (e.g. `props.value + 1` or `` `The value is ${props.value}` ``). This can be handled with `proxy[Symbol.toPrimitive]()`, which is called by JS automatically when used in this sort of expression.\r\n\r\nHowever, this doesn't work if the child now passes the proxy directly to React as a child:\r\n```jsx\r\n  return (<span>{this.props.childValue</span>);\r\n```\r\nReact will do a `typeof` on the child, find it is an object, and report `Objects are not valid as a React child`. Unfortunately, `typeof` cannot be spoofed with Proxy, and it will always return `'object'`.\r\n\r\nThe relevant code is found [here](https://github.com/facebook/react/blob/b87aabdfe1b7461e7331abb3601d9e6bb27544bc/packages/react/src/ReactChildren.js#L189-L204). The alternative could be for React to check if there's a `child[Symbol.tpPrimitive]` and, if so, evaluate it to find the intended value, and to retry with this value as the child.\r\nIt could be as simple as inserting the following code [here](https://github.com/facebook/react/blob/b87aabdfe1b7461e7331abb3601d9e6bb27544bc/packages/react/src/ReactChildren.js#L189):\r\n```js\r\n  if (typeof Symbol !== 'undefined') {\r\n    const toPrimitive = children[Symbol.toPrimitive];\r\n    if (toPrimitive) {\r\n      const value = toPrimitive('string');\r\n      if (typeof value !== 'object') {\r\n\t\treturn traverseAllChildrenImpl(\r\n\t\t  value,\r\n\t\t  nameSoFar,\r\n\t\t  callback,\r\n\t\t  traverseContext,\r\n\t\t)\r\n      }\r\n    }\r\n  }\r\n```\r\n\r\nIt would be great if React would support this use-case. The alternative is for parent components to resolve the value, which would attribute the access to the parent component, instead of the child, where it's really being used. This in turn would cause the parent to be rerendered when only the child is being changed.\r\n\r\nIf the child is aware it may be receiving Proxy objects, it can resolve the value itself. However, the whole point of using Proxies is to automate all the refresh logic (like `shouldComponentUpdate`). Also, not needing to resolve the value would allow the value to propagate through to descendant components which may be wholly unaware of the proxy. \r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nAll version, never worked before.",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**  Feature    **What is the current behavior?**  Objects are not valid as a React child    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**  N/A    **What is the expected behavior?**  I'm trying to build a system that auto-detects if data is used in a React component. To do this, I detect usage during `render()` by using Proxies, which can register all access. This data, in turn, is used to prevent needless re-renders.    A parent component can pass a Proxy which represents a string, for example, to a child component, which, without knowing it is a Proxy, can use this value in a calculation (e.g. `props.value + 1` or `` `The value is ${props.value}` ``). This can be handled with `proxy[Symbol.toPrimitive]()`, which is called by JS automatically when used in this sort of expression.    However, this doesn't work if the child now passes the proxy directly to React as a child:  ```jsx    return (<span>{this.props.childValue</span>);  ```  React will do a `typeof` on the child, find it is an object, and report `Objects are not valid as a React child`. Unfortunately, `typeof` cannot be spoofed with Proxy, and it will always return `'object'`.    The relevant code is found [here](https://github.com/facebook/react/blob/b87aabdfe1b7461e7331abb3601d9e6bb27544bc/packages/react/src/ReactChildren.js#L189-L204). The alternative could be for React to check if there's a `child[Symbol.tpPrimitive]` and, if so, evaluate it to find the intended value, and to retry with this value as the child.  It could be as simple as inserting the following code [here](https://github.com/facebook/react/blob/b87aabdfe1b7461e7331abb3601d9e6bb27544bc/packages/react/src/ReactChildren.js#L189):  ```js    if (typeof Symbol !== 'undefined') {      const toPrimitive = children[Symbol.toPrimitive];      if (toPrimitive) {        const value = toPrimitive('string');        if (typeof value !== 'object') {  \t\treturn traverseAllChildrenImpl(  \t\t  value,  \t\t  nameSoFar,  \t\t  callback,  \t\t  traverseContext,  \t\t)        }      }    }  ```    It would be great if React would support this use-case. The alternative is for parent components to resolve the value, which would attribute the access to the parent component, instead of the child, where it's really being used. This in turn would cause the parent to be rerendered when only the child is being changed.    If the child is aware it may be receiving Proxy objects, it can resolve the value itself. However, the whole point of using Proxies is to automate all the refresh logic (like `shouldComponentUpdate`). Also, not needing to resolve the value would allow the value to propagate through to descendant components which may be wholly unaware of the proxy.     **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  All version, never worked before.",
        "human_words": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**  Feature    **What is the current behavior?**  Objects are not valid as a React child    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**  N/A    **What is the expected behavior?**  I'm trying to build a system that auto-detects if data is used in a React component. To do this, I detect usage during `render()` by using Proxies, which can register all access. This data, in turn, is used to prevent needless re-renders.    A parent component can pass a Proxy which represents a string, for example, to a child component, which, without knowing it is a Proxy, can use this value in a calculation (e.g. `props.value + 1` or `` `The value is ${props.value}` ``). This can be handled with `proxy[Symbol.toPrimitive]()`, which is called by JS automatically when used in this sort of expression.    However, this doesn't work if the child now passes the proxy directly to React as a child:    React will do a `typeof` on the child, find it is an object, and report `Objects are not valid as a React child`. Unfortunately, `typeof` cannot be spoofed with Proxy, and it will always return `'object'`.    The relevant code is found [here](https://github.com/facebook/react/blob/b87aabdfe1b7461e7331abb3601d9e6bb27544bc/packages/react/src/ReactChildren.js#L189-L204). The alternative could be for React to check if there's a `child[Symbol.tpPrimitive]` and, if so, evaluate it to find the intended value, and to retry with this value as the child.  It could be as simple as inserting the following code [here](https://github.com/facebook/react/blob/b87aabdfe1b7461e7331abb3601d9e6bb27544bc/packages/react/src/ReactChildren.js#L189):      It would be great if React would support this use-case. The alternative is for parent components to resolve the value, which would attribute the access to the parent component, instead of the child, where it's really being used. This in turn would cause the parent to be rerendered when only the child is being changed.    If the child is aware it may be receiving Proxy objects, it can resolve the value itself. However, the whole point of using Proxies is to automate all the refresh logic (like `shouldComponentUpdate`). Also, not needing to resolve the value would allow the value to propagate through to descendant components which may be wholly unaware of the proxy.     **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  All version, never worked before.",
        "human_words_regrex": " **Do you want to request a *feature* or report a *bug*?** Feature **What is the current behavior?** Objects are not valid as a React child **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle ( or CodeSandbox ( example below:** N/A **What is the expected behavior?** I'm trying to build a system that auto-detects if data is used in a React component. To do this, I detect usage during `render()` by using Proxies, which can register all access. This data, in turn, is used to prevent needless re-renders. A parent component can pass a Proxy which represents a string, for example, to a child component, which, without knowing it is a Proxy, can use this value in a calculation (e.g. `props.value + 1` or `` `The value is ${props.value}` ``). This can be handled with `proxy`, which is called by JS automatically when used in this sort of expression. However, this doesn't work if the child now passes the proxy directly to React as a child: React will do a `typeof` on the child, find it is an object, and report `Objects are not valid as a React child`. Unfortunately, `typeof` cannot be spoofed with Proxy, and it will always return `'object'`. The relevant code is found . The alternative could be for React to check if there's a `child: It would be great if React would support this use-case. The alternative is for parent components to resolve the value, which would attribute the access to the parent component, instead of the child, where it's really being used. This in turn would cause the parent to be rerendered when only the child is being changed. If the child is aware it may be receiving Proxy objects, it can resolve the value itself. However, the whole point of using Proxies is to automate all the refresh logic (like `shouldComponentUpdate`). Also, not needing to resolve the value would allow the value to propagate through to descendant components which may be wholly unaware of the proxy. **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** All version, never worked before.",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * feature * * current behavior ? * * object valid react child * * current behavior bug , please provide step reproduce possible minimal demo problem . bug get fixed much faster run code n't dependency react . paste link jsfiddle ( codesandbox ( example : * * n/a * * expected behavior ? * * 'm trying build system auto-detects data used react component . , detect usage ` render ( ) ` using proxy , register access . data , turn , used prevent needle re-renders . parent component pas proxy represents string , example , child component , , without knowing proxy , use value calculation ( e.g . ` props.value + 1 ` `` ` value $ { props.value } ` `` ) . handled ` proxy ` , called j automatically used sort expression . however , n't work child pass proxy directly react child : react ` typeof ` child , find object , report ` object valid react child ` . unfortunately , ` typeof ` spoofed proxy , always return ` 'object ' ` . relevant code found . alternative could react check 's ` child : would great react would support use-case . alternative parent component resolve value , would attribute access parent component , instead child , 's really used . turn would cause parent rerendered child changed . child aware may receiving proxy object , resolve value . however , whole point using proxy automate refresh logic ( like ` shouldcomponentupdate ` ) . also , needing resolve value would allow value propagate descendant component may wholly unaware proxy . * * version react , browser / o affected issue ? work previous version react ? * * version , never worked .",
        "title_stopwords_removal_lemmatization": "support proxy child"
    },
    {
        "issue_id": 396340261,
        "title": "Nested portals should be discoverable",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2019-01-07T04:02:48Z",
        "status": "open",
        "description": "This is more about a bridge between actual DOM Tree and React Tree.\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nfeature\r\n\r\n**What is the current behavior?**\r\nYou can _portal_ a part of your rendering tree to another place in Dom Tree, and React would handle events, including events on Capture Phase like there were no portals - events could dive through all the _react_ parents, and bubble up through all the _react_ parents.\r\n\r\nThis is quite useful, as long as portal is an implementation detail, but useful only for normal events; there are more cases around it.\r\n\r\n**What is the expected behavior?**\r\n\r\nIt's better to explain it by example\r\n- you have a Modal Dialog and it uses a Focus Lock, ie focus could not leave it.\r\n- inside Modal you have a Custom Select, with Dropdown menu rendered via a portal.\r\n- you could not use it, as long as from DOM prospective `ModalNode.contains(DropDownNode)` is always false, and Focus Lock will prevent focusing.\r\n\r\nIt's a real issue - https://github.com/reach/reach-ui/issues/83, https://github.com/theKashey/react-focus-lock/issues/19.\r\n\r\nProposed solution:\r\n- `containsNode(domNode):boolean` - _React-aware_ version of DOM API `node.contains(anotherNode)`.\r\n- `getHostNodes():Nodes[]` - returns a list of all root nodes inside \"current component\" including direct children and portals. Similar to `ReactDom.findDomNode`, and (proposed)refs attached to React.Fragment. It just finds all nodes \"you are consists of\". As a result you will be able to `tab` from one `piece` of you to another, making focus management independed of implementation details.\r\n\r\nCons:\r\n- requires Component to access fiber, DOM node to access fiber thought node, or an new `hook` to do it in a functional way.\r\n- does twice dreadfull things than deprecated `findDomNode`\r\n- usage scope is very narrow.\r\n\r\nPros:\r\n- _my_ use case requires _momentum_ access to a rendered tree, and does not suffer async stuff as `findDomNode`, where underlaying node might not be yet created. Stuff like \"_does something `containsNode` right now_\", or _\"`getHostNodes` I consist from right now\"_ are sync, and the question asked about actual DOM tree structure.\r\n\r\nExample using [react-dom-reflection](https://github.com/theKashey/react-dom-reflection), which implements required API - https://codesandbox.io/s/1or60v506l\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nNever worked",
        "remove_template_description": "This is more about a bridge between actual DOM Tree and React Tree.    **Do you want to request a *feature* or report a *bug*?**  feature    **What is the current behavior?**  You can _portal_ a part of your rendering tree to another place in Dom Tree, and React would handle events, including events on Capture Phase like there were no portals - events could dive through all the _react_ parents, and bubble up through all the _react_ parents.    This is quite useful, as long as portal is an implementation detail, but useful only for normal events; there are more cases around it.    **What is the expected behavior?**    It's better to explain it by example  - you have a Modal Dialog and it uses a Focus Lock, ie focus could not leave it.  - inside Modal you have a Custom Select, with Dropdown menu rendered via a portal.  - you could not use it, as long as from DOM prospective `ModalNode.contains(DropDownNode)` is always false, and Focus Lock will prevent focusing.    It's a real issue - https://github.com/reach/reach-ui/issues/83, https://github.com/theKashey/react-focus-lock/issues/19.    Proposed solution:  - `containsNode(domNode):boolean` - _React-aware_ version of DOM API `node.contains(anotherNode)`.  - `getHostNodes():Nodes[]` - returns a list of all root nodes inside \"current component\" including direct children and portals. Similar to `ReactDom.findDomNode`, and (proposed)refs attached to React.Fragment. It just finds all nodes \"you are consists of\". As a result you will be able to `tab` from one `piece` of you to another, making focus management independed of implementation details.    Cons:  - requires Component to access fiber, DOM node to access fiber thought node, or an new `hook` to do it in a functional way.  - does twice dreadfull things than deprecated `findDomNode`  - usage scope is very narrow.    Pros:  - _my_ use case requires _momentum_ access to a rendered tree, and does not suffer async stuff as `findDomNode`, where underlaying node might not be yet created. Stuff like \"_does something `containsNode` right now_\", or _\"`getHostNodes` I consist from right now\"_ are sync, and the question asked about actual DOM tree structure.    Example using [react-dom-reflection](https://github.com/theKashey/react-dom-reflection), which implements required API - https://codesandbox.io/s/1or60v506l    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    Never worked",
        "human_words": "This is more about a bridge between actual DOM Tree and React Tree.    **Do you want to request a *feature* or report a *bug*?**  feature    **What is the current behavior?**  You can _portal_ a part of your rendering tree to another place in Dom Tree, and React would handle events, including events on Capture Phase like there were no portals - events could dive through all the _react_ parents, and bubble up through all the _react_ parents.    This is quite useful, as long as portal is an implementation detail, but useful only for normal events; there are more cases around it.    **What is the expected behavior?**    It's better to explain it by example  - you have a Modal Dialog and it uses a Focus Lock, ie focus could not leave it.  - inside Modal you have a Custom Select, with Dropdown menu rendered via a portal.  - you could not use it, as long as from DOM prospective `ModalNode.contains(DropDownNode)` is always false, and Focus Lock will prevent focusing.    It's a real issue - https://github.com/reach/reach-ui/issues/83, https://github.com/theKashey/react-focus-lock/issues/19.    Proposed solution:  - `containsNode(domNode):boolean` - _React-aware_ version of DOM API `node.contains(anotherNode)`.  - `getHostNodes():Nodes[]` - returns a list of all root nodes inside \"current component\" including direct children and portals. Similar to `ReactDom.findDomNode`, and (proposed)refs attached to React.Fragment. It just finds all nodes \"you are consists of\". As a result you will be able to `tab` from one `piece` of you to another, making focus management independed of implementation details.    Cons:  - requires Component to access fiber, DOM node to access fiber thought node, or an new `hook` to do it in a functional way.  - does twice dreadfull things than deprecated `findDomNode`  - usage scope is very narrow.    Pros:  - _my_ use case requires _momentum_ access to a rendered tree, and does not suffer async stuff as `findDomNode`, where underlaying node might not be yet created. Stuff like \"_does something `containsNode` right now_\", or _\"`getHostNodes` I consist from right now\"_ are sync, and the question asked about actual DOM tree structure.    Example using [react-dom-reflection](https://github.com/theKashey/react-dom-reflection), which implements required API - https://codesandbox.io/s/1or60v506l    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    Never worked",
        "human_words_regrex": "This is more about a bridge between actual DOM Tree and React Tree. **Do you want to request a *feature* or report a *bug*?** feature **What is the current behavior?** You can _portal_ a part of your rendering tree to another place in Dom Tree, and React would handle events, including events on Capture Phase like there were no portals - events could dive through all the _react_ parents, and bubble up through all the _react_ parents. This is quite useful, as long as portal is an implementation detail, but useful only for normal events; there are more cases around it. **What is the expected behavior?** It's better to explain it by example - you have a Modal Dialog and it uses a Focus Lock, ie focus could not leave it. - inside Modal you have a Custom Select, with Dropdown menu rendered via a portal. - you could not use it, as long as from DOM prospective `ModalNode.contains(DropDownNode)` is always false, and Focus Lock will prevent focusing. It's a real issue -   Proposed solution: - `containsNode(domNode):boolean` - _React-aware_ version of DOM API `node.contains(anotherNode)`. - `getHostNodes():Nodes, which implements required API -  **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** Never worked",
        "human_words_stopwords_removal_lemmatization": "bridge actual dom tree react tree . * * want request * feature * report * bug * ? * * feature * * current behavior ? * * _portal_ part rendering tree another place dom tree , react would handle event , including event capture phase like portal - event could dive _react_ parent , bubble _react_ parent . quite useful , long portal implementation detail , useful normal event ; case around . * * expected behavior ? * * 's better explain example - modal dialog us focus lock , ie focus could leave . - inside modal custom select , dropdown menu rendered via portal . - could use , long dom prospective ` modalnode.contains ( dropdownnode ) ` always false , focus lock prevent focusing . 's real issue - proposed solution : - ` containsnode ( domnode ) : boolean ` - _react-aware_ version dom api ` node.contains ( anothernode ) ` . - ` gethostnodes ( ) : node , implement required api - * * version react , browser / o affected issue ? work previous version react ? * * never worked",
        "title_stopwords_removal_lemmatization": "nested portal discoverable"
    },
    {
        "issue_id": 396204834,
        "title": "React.Suspense provide a lifecycle so components can handle the `display:none` removal",
        "label": [
            "Type: Feature Request",
            "Component: Suspense",
            "Resolution: Stale"
        ],
        "date": "2019-01-05T22:14:39Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nIt's a feature. \r\n\r\n**What is the current behavior?**\r\n\r\nReact.Suspense mounts its children with a `display: none` style if a promise is thrown. Once the thrown promise is resolved, React removes the `display: none` style.\r\n\r\n**What is the expected behavior?**\r\n\r\nThe children components have no easy way to know when the `display: none` style is removed by React. This is problematic when one child component needs to read from the DOM layout to correctly display its elements. Most people wait for the `componentDidMount` callback to trigger, but because the element is `display: none`, it can't read any value from the DOM layout.\r\n\r\nThe issue was discovered in https://github.com/mui-org/material-ui/issues/14077. I believe that React should provide a lifecycle so the children components know when they are visible, that it's safe to do layout computations. \r\n\r\nThe best workaround I'm aware of it to use the [Intersection Observer API](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API) but it requires a polyfill on IE 11 and Safari.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nVersion: 16.7.0-alpha.2",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**    It's a feature.     **What is the current behavior?**    React.Suspense mounts its children with a `display: none` style if a promise is thrown. Once the thrown promise is resolved, React removes the `display: none` style.    **What is the expected behavior?**    The children components have no easy way to know when the `display: none` style is removed by React. This is problematic when one child component needs to read from the DOM layout to correctly display its elements. Most people wait for the `componentDidMount` callback to trigger, but because the element is `display: none`, it can't read any value from the DOM layout.    The issue was discovered in https://github.com/mui-org/material-ui/issues/14077. I believe that React should provide a lifecycle so the children components know when they are visible, that it's safe to do layout computations.     The best workaround I'm aware of it to use the [Intersection Observer API](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API) but it requires a polyfill on IE 11 and Safari.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    Version: 16.7.0-alpha.2",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**    It's a feature.     **What is the current behavior?**    React.Suspense mounts its children with a `display: none` style if a promise is thrown. Once the thrown promise is resolved, React removes the `display: none` style.    **What is the expected behavior?**    The children components have no easy way to know when the `display: none` style is removed by React. This is problematic when one child component needs to read from the DOM layout to correctly display its elements. Most people wait for the `componentDidMount` callback to trigger, but because the element is `display: none`, it can't read any value from the DOM layout.    The issue was discovered in https://github.com/mui-org/material-ui/issues/14077. I believe that React should provide a lifecycle so the children components know when they are visible, that it's safe to do layout computations.     The best workaround I'm aware of it to use the [Intersection Observer API](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API) but it requires a polyfill on IE 11 and Safari.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    Version: 16.7.0-alpha.2",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** It's a feature. **What is the current behavior?** React.Suspense mounts its children with a `display: none` style if a promise is thrown. Once the thrown promise is resolved, React removes the `display: none` style. **What is the expected behavior?** The children components have no easy way to know when the `display: none` style is removed by React. This is problematic when one child component needs to read from the DOM layout to correctly display its elements. Most people wait for the `componentDidMount` callback to trigger, but because the element is `display: none`, it can't read any value from the DOM layout. The issue was discovered in  I believe that React should provide a lifecycle so the children components know when they are visible, that it's safe to do layout computations. The best workaround I'm aware of it to use the  but it requires a polyfill on IE 11 and Safari. **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** Version: 16.7.0-alpha.2",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * 's feature . * * current behavior ? * * react.suspense mount child ` display : none ` style promise thrown . thrown promise resolved , react remove ` display : none ` style . * * expected behavior ? * * child component easy way know ` display : none ` style removed react . problematic one child component need read dom layout correctly display element . people wait ` componentdidmount ` callback trigger , element ` display : none ` , ca n't read value dom layout . issue discovered believe react provide lifecycle child component know visible , 's safe layout computation . best workaround 'm aware use requires polyfill ie 11 safari . * * version react , browser / o affected issue ? work previous version react ? * * version : 16.7.0-alpha.2",
        "title_stopwords_removal_lemmatization": "react.suspense provide lifecycle component handle ` display : none ` removal"
    },
    {
        "issue_id": 394826156,
        "title": "Make it easier to debug when Context uses defaultValue accidentally due to no provider",
        "label": [
            "Type: Feature Request",
            "Resolution: Stale"
        ],
        "date": "2018-12-29T21:32:16Z",
        "status": "closed",
        "description": "I just spend several hours debugging app blaming everything except me ofc.\r\nI am using this useTheme Hook.\r\n\r\n```ts\r\nimport React from 'react';\r\nimport ThemeContext from '../contexts/ThemeContext';\r\n\r\nconst useTheme = () => {\r\n  const theme = React.useContext(ThemeContext);\r\n  //if (theme == null)\r\n  //  throw Error('useTheme: Please provide ThemeContext value.');\r\n  return theme;\r\n};\r\n\r\nexport default useTheme;\r\n```\r\n\r\nSome styles were light while other dark. Very strange.\r\nThen I found the bug in my code, `ThemeContext.Provider` was sometimes used after using useTheme.\r\nThemeContext had an initial value different than provided.\r\n\r\nWhile it's probably fine that React allows us to use default context value without a parent provider, it can lead to hard to find bugs.\r\n\r\nTherefore, I decided to never provide default context value and throw an exception in useFooContext hook to warn about it.\r\n\r\nBecause of DX, React should reconsider default / initial context values. In my humble opinion.\r\n\r\n\r\n",
        "remove_template_description": "I just spend several hours debugging app blaming everything except me ofc.  I am using this useTheme Hook.    ```ts  import React from 'react';  import ThemeContext from '../contexts/ThemeContext';    const useTheme = () => {    const theme = React.useContext(ThemeContext);    //if (theme == null)    //  throw Error('useTheme: Please provide ThemeContext value.');    return theme;  };    export default useTheme;  ```    Some styles were light while other dark. Very strange.  Then I found the bug in my code, `ThemeContext.Provider` was sometimes used after using useTheme.  ThemeContext had an initial value different than provided.    While it's probably fine that React allows us to use default context value without a parent provider, it can lead to hard to find bugs.    Therefore, I decided to never provide default context value and throw an exception in useFooContext hook to warn about it.    Because of DX, React should reconsider default / initial context values. In my humble opinion.",
        "human_words": "I just spend several hours debugging app blaming everything except me ofc.  I am using this useTheme Hook.        Some styles were light while other dark. Very strange.  Then I found the bug in my code, `ThemeContext.Provider` was sometimes used after using useTheme.  ThemeContext had an initial value different than provided.    While it's probably fine that React allows us to use default context value without a parent provider, it can lead to hard to find bugs.    Therefore, I decided to never provide default context value and throw an exception in useFooContext hook to warn about it.    Because of DX, React should reconsider default / initial context values. In my humble opinion.",
        "human_words_regrex": "I just spend several hours debugging app blaming everything except me ofc. I am using this useTheme Hook. Some styles were light while other dark. Very strange. Then I found the bug in my code, `ThemeContext.Provider` was sometimes used after using useTheme. ThemeContext had an initial value different than provided. While it's probably fine that React allows us to use default context value without a parent provider, it can lead to hard to find bugs. Therefore, I decided to never provide default context value and throw an exception in useFooContext hook to warn about it. Because of DX, React should reconsider default / initial context values. In my humble opinion.",
        "human_words_stopwords_removal_lemmatization": "spend several hour debugging app blaming everything except ofc . using usetheme hook . style light dark . strange . found bug code , ` themecontext.provider ` sometimes used using usetheme . themecontext initial value different provided . 's probably fine react allows u use default context value without parent provider , lead hard find bug . therefore , decided never provide default context value throw exception usefoocontext hook warn . dx , react reconsider default / initial context value . humble opinion .",
        "title_stopwords_removal_lemmatization": "make easier debug context us defaultvalue accidentally due provider"
    },
    {
        "issue_id": 391411153,
        "title": "[Hooks] Proposal: expose info about current component for custom hooks",
        "label": [
            "Type: Feature Request",
            "Component: Hooks",
            "Resolution: Stale"
        ],
        "date": "2018-12-15T20:58:16Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nfeature\r\n\r\n**What is the current behavior?**\r\nThe core built-in hooks \u2013 `useRef`, `useMemo`, etc. \u2013 rely on internal React state which is not exposed, namely the current rendering component. This means that these hooks cannot be implemented in user-land. Similar hooks cannot be implemented either.\r\n\r\nI'm proposing adding a built-in hook which would provide information about the current rendering component. This would enable more advanced hooks to be implementable in user-land.\r\n\r\nI have a use case which is a perfect example. I need a hook similar to `useMemo`, but where the computed value is shared across all components of the same type. I\u2019m calling it `useSharedMemo`.\r\n\r\nThe ideal API would look something like this:\r\n\r\n```typescript\r\nconst Component = ({cacheKey}) => {\r\n  const value1 = useSharedMemo(() => /* expensive computation 1 */, [cacheKey]);\r\n  const value2 = useSharedMemo(() => /* expensive computation 2 */, [cacheKey]);\r\n  return <>{value1} {value2}</>;\r\n};\r\n```\r\n\r\nIn the code above, every instance of `Component` would get the same values for `value1` and `value2`, provided `cacheKey` is the same. When `cacheKey` changes, the two values would recompute once and the new values would be returned to all instances as they re-render. (The actual use case in my app is styles that need to update only when the theme changes.)\r\n\r\nI have a [hacky implementation](https://codesandbox.io/s/jplyz2pkr9) of this hook that works, but it requires changing the API to the following:\r\n\r\n```typescript\r\nconst useSharedMemo = createUseSharedMemo();\r\n\r\nconst Component = ({cacheKey}) => {\r\n  const ref = React.useRef();\r\n  const value1 = useSharedMemo(ref, () => /* expensive computation 1 */, [cacheKey]);\r\n  const value2 = useSharedMemo(ref, () => /* expensive computation 2 */, [cacheKey]);\r\n  return <>{value1} {value2}</>;\r\n};\r\n```\r\n\r\nFor this to work, the [implementation](https://codesandbox.io/s/jplyz2pkr9) has to keep a counter of calls that resets every time a component\u2019s render call starts or ends. This would be trivial if there were a way to know which component is currently rendering. Since there is no way, the implementation has to make up for it by requiring a `ref` be passed in. Since it has no information about the type of the current component, it also requires that a `useSharedMemo` \u201cinstance\u201d be created in the component definition\u2019s enclosing scope.\r\n\r\nWorse, the implementation uses `useLayoutEffect` to detect when the render is done, which might break with concurrent mode or with future React changes.\r\n\r\n**What is the expected behavior?**\r\n\r\nIf React provided information about the current rendering component, the implementation of `useSharedMemo` would be much easier and less brittle.\r\n\r\nA possible solution is a hook like the following:\r\n\r\n```typescript\r\nconst [currentType, currentRef] = React.useCurrentComponent();\r\n```\r\n\r\nWith this information, we can implement the ideal API above and we do not have to rely on `useLayoutEffect`:\r\n\r\n```typescript\r\nlet values = new WeakMap();\r\nlet cacheKeys = new WeakMap();\r\nlet lastRef = null;\r\nlet callIndex = 0;\r\n\r\nfunction useSharedMemo(fn, keys) {\r\n  const [currentType, currentRef] = React.useCurrentComponent();\r\n  if (currentRef !== lastRef) {\r\n    callIndex = 0;\r\n  }\r\n  const index = callIndex;\r\n  callIndex++;\r\n  const typeValues = values.get(currentType) || [];\r\n  const typeCacheKeys = cacheKeys.get(currentType) || [];\r\n  if (!typeValues[index] || !compareKeys(keys, typeCacheKeys[index])) {\r\n    typeValues[index] = fn();\r\n    typeCacheKeys[index] = keys;\r\n    values.set(currentType, typeValues);\r\n    cacheKeys.set(currentType, typeCacheKeys);\r\n  }\r\n  return typeValues[index];\r\n}\r\n```\r\n\r\n(Note that I\u2019m treating `currentType` and `currentRef` as opaque values, so for my purposes it doesn\u2019t matter if they are the actual type and an actual ref to the component instance. I imagine having them be accurate would be a more powerful API, but the implementation might require them to be opaque values.)\r\n\r\nP.S. - A common use case that would benefit from `useSharedMemo` is `useCallback`. 99% of the time callbacks are identical across components of the same type. It\u2019s wasteful not to share the cache.\r\n\r\n**Demo**\r\nhttps://codesandbox.io/s/jplyz2pkr9\r\n",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**  feature    **What is the current behavior?**  The core built-in hooks \u2013 `useRef`, `useMemo`, etc. \u2013 rely on internal React state which is not exposed, namely the current rendering component. This means that these hooks cannot be implemented in user-land. Similar hooks cannot be implemented either.    I'm proposing adding a built-in hook which would provide information about the current rendering component. This would enable more advanced hooks to be implementable in user-land.    I have a use case which is a perfect example. I need a hook similar to `useMemo`, but where the computed value is shared across all components of the same type. I\u2019m calling it `useSharedMemo`.    The ideal API would look something like this:    ```typescript  const Component = ({cacheKey}) => {    const value1 = useSharedMemo(() => /* expensive computation 1 */, [cacheKey]);    const value2 = useSharedMemo(() => /* expensive computation 2 */, [cacheKey]);    return <>{value1} {value2}</>;  };  ```    In the code above, every instance of `Component` would get the same values for `value1` and `value2`, provided `cacheKey` is the same. When `cacheKey` changes, the two values would recompute once and the new values would be returned to all instances as they re-render. (The actual use case in my app is styles that need to update only when the theme changes.)    I have a [hacky implementation](https://codesandbox.io/s/jplyz2pkr9) of this hook that works, but it requires changing the API to the following:    ```typescript  const useSharedMemo = createUseSharedMemo();    const Component = ({cacheKey}) => {    const ref = React.useRef();    const value1 = useSharedMemo(ref, () => /* expensive computation 1 */, [cacheKey]);    const value2 = useSharedMemo(ref, () => /* expensive computation 2 */, [cacheKey]);    return <>{value1} {value2}</>;  };  ```    For this to work, the [implementation](https://codesandbox.io/s/jplyz2pkr9) has to keep a counter of calls that resets every time a component\u2019s render call starts or ends. This would be trivial if there were a way to know which component is currently rendering. Since there is no way, the implementation has to make up for it by requiring a `ref` be passed in. Since it has no information about the type of the current component, it also requires that a `useSharedMemo` \u201cinstance\u201d be created in the component definition\u2019s enclosing scope.    Worse, the implementation uses `useLayoutEffect` to detect when the render is done, which might break with concurrent mode or with future React changes.    **What is the expected behavior?**    If React provided information about the current rendering component, the implementation of `useSharedMemo` would be much easier and less brittle.    A possible solution is a hook like the following:    ```typescript  const [currentType, currentRef] = React.useCurrentComponent();  ```    With this information, we can implement the ideal API above and we do not have to rely on `useLayoutEffect`:    ```typescript  let values = new WeakMap();  let cacheKeys = new WeakMap();  let lastRef = null;  let callIndex = 0;    function useSharedMemo(fn, keys) {    const [currentType, currentRef] = React.useCurrentComponent();    if (currentRef !== lastRef) {      callIndex = 0;    }    const index = callIndex;    callIndex++;    const typeValues = values.get(currentType) || [];    const typeCacheKeys = cacheKeys.get(currentType) || [];    if (!typeValues[index] || !compareKeys(keys, typeCacheKeys[index])) {      typeValues[index] = fn();      typeCacheKeys[index] = keys;      values.set(currentType, typeValues);      cacheKeys.set(currentType, typeCacheKeys);    }    return typeValues[index];  }  ```    (Note that I\u2019m treating `currentType` and `currentRef` as opaque values, so for my purposes it doesn\u2019t matter if they are the actual type and an actual ref to the component instance. I imagine having them be accurate would be a more powerful API, but the implementation might require them to be opaque values.)    P.S. - A common use case that would benefit from `useSharedMemo` is `useCallback`. 99% of the time callbacks are identical across components of the same type. It\u2019s wasteful not to share the cache.    **Demo**  https://codesandbox.io/s/jplyz2pkr9",
        "human_words": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**  feature    **What is the current behavior?**  The core built-in hooks \u2013 `useRef`, `useMemo`, etc. \u2013 rely on internal React state which is not exposed, namely the current rendering component. This means that these hooks cannot be implemented in user-land. Similar hooks cannot be implemented either.    I'm proposing adding a built-in hook which would provide information about the current rendering component. This would enable more advanced hooks to be implementable in user-land.    I have a use case which is a perfect example. I need a hook similar to `useMemo`, but where the computed value is shared across all components of the same type. I\u2019m calling it `useSharedMemo`.    The ideal API would look something like this:        In the code above, every instance of `Component` would get the same values for `value1` and `value2`, provided `cacheKey` is the same. When `cacheKey` changes, the two values would recompute once and the new values would be returned to all instances as they re-render. (The actual use case in my app is styles that need to update only when the theme changes.)    I have a [hacky implementation](https://codesandbox.io/s/jplyz2pkr9) of this hook that works, but it requires changing the API to the following:        For this to work, the [implementation](https://codesandbox.io/s/jplyz2pkr9) has to keep a counter of calls that resets every time a component\u2019s render call starts or ends. This would be trivial if there were a way to know which component is currently rendering. Since there is no way, the implementation has to make up for it by requiring a `ref` be passed in. Since it has no information about the type of the current component, it also requires that a `useSharedMemo` \u201cinstance\u201d be created in the component definition\u2019s enclosing scope.    Worse, the implementation uses `useLayoutEffect` to detect when the render is done, which might break with concurrent mode or with future React changes.    **What is the expected behavior?**    If React provided information about the current rendering component, the implementation of `useSharedMemo` would be much easier and less brittle.    A possible solution is a hook like the following:        With this information, we can implement the ideal API above and we do not have to rely on `useLayoutEffect`:        (Note that I\u2019m treating `currentType` and `currentRef` as opaque values, so for my purposes it doesn\u2019t matter if they are the actual type and an actual ref to the component instance. I imagine having them be accurate would be a more powerful API, but the implementation might require them to be opaque values.)    P.S. - A common use case that would benefit from `useSharedMemo` is `useCallback`. 99% of the time callbacks are identical across components of the same type. It\u2019s wasteful not to share the cache.    **Demo**  https://codesandbox.io/s/jplyz2pkr9",
        "human_words_regrex": " **Do you want to request a *feature* or report a *bug*?** feature **What is the current behavior?** The core built-in hooks \u2013 `useRef`, `useMemo`, etc. \u2013 rely on internal React state which is not exposed, namely the current rendering component. This means that these hooks cannot be implemented in user-land. Similar hooks cannot be implemented either. I'm proposing adding a built-in hook which would provide information about the current rendering component. This would enable more advanced hooks to be implementable in user-land. I have a use case which is a perfect example. I need a hook similar to `useMemo`, but where the computed value is shared across all components of the same type. I\u2019m calling it `useSharedMemo`. The ideal API would look something like this: In the code above, every instance of `Component` would get the same values for `value1` and `value2`, provided `cacheKey` is the same. When `cacheKey` changes, the two values would recompute once and the new values would be returned to all instances as they re-render. (The actual use case in my app is styles that need to update only when the theme changes.) I have a  of this hook that works, but it requires changing the API to the following: For this to work, the  has to keep a counter of calls that resets every time a component\u2019s render call starts or ends. This would be trivial if there were a way to know which component is currently rendering. Since there is no way, the implementation has to make up for it by requiring a `ref` be passed in. Since it has no information about the type of the current component, it also requires that a `useSharedMemo` \u201cinstance\u201d be created in the component definition\u2019s enclosing scope. Worse, the implementation uses `useLayoutEffect` to detect when the render is done, which might break with concurrent mode or with future React changes. **What is the expected behavior?** If React provided information about the current rendering component, the implementation of `useSharedMemo` would be much easier and less brittle. A possible solution is a hook like the following: With this information, we can implement the ideal API above and we do not have to rely on `useLayoutEffect`: (Note that I\u2019m treating `currentType` and `currentRef` as opaque values, so for my purposes it doesn\u2019t matter if they are the actual type and an actual ref to the component instance. I imagine having them be accurate would be a more powerful API, but the implementation might require them to be opaque values.) P.S. - A common use case that would benefit from `useSharedMemo` is `useCallback`. 99% of the time callbacks are identical across components of the same type. It\u2019s wasteful not to share the cache. **Demo** ",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * feature * * current behavior ? * * core built-in hook \u2013 ` useref ` , ` usememo ` , etc . \u2013 rely internal react state exposed , namely current rendering component . mean hook implemented user-land . similar hook implemented either . 'm proposing adding built-in hook would provide information current rendering component . would enable advanced hook implementable user-land . use case perfect example . need hook similar ` usememo ` , computed value shared across component type . \u2019 calling ` usesharedmemo ` . ideal api would look something like : code , every instance ` component ` would get value ` value1 ` ` value2 ` , provided ` cachekey ` . ` cachekey ` change , two value would recompute new value would returned instance re-render . ( actual use case app style need update theme change . ) hook work , requires changing api following : work , keep counter call reset every time component \u2019 render call start end . would trivial way know component currently rendering . since way , implementation make requiring ` ref ` passed . since information type current component , also requires ` usesharedmemo ` \u201c instance \u201d created component definition \u2019 enclosing scope . worse , implementation us ` uselayouteffect ` detect render done , might break concurrent mode future react change . * * expected behavior ? * * react provided information current rendering component , implementation ` usesharedmemo ` would much easier le brittle . possible solution hook like following : information , implement ideal api rely ` uselayouteffect ` : ( note \u2019 treating ` currenttype ` ` currentref ` opaque value , purpose \u2019 matter actual type actual ref component instance . imagine accurate would powerful api , implementation might require opaque value . ) p.s . - common use case would benefit ` usesharedmemo ` ` usecallback ` . 99 % time callback identical across component type . \u2019 wasteful share cache . * * demo * *",
        "title_stopwords_removal_lemmatization": "[ hook ] proposal : expose info current component custom hook"
    },
    {
        "issue_id": 388884277,
        "title": "eslint-plugin-react-hooks should report errors inside unnamed functions",
        "label": [
            "Type: Feature Request",
            "Component: Hooks",
            "Resolution: Stale"
        ],
        "date": "2018-12-08T04:31:01Z",
        "status": "closed",
        "description": "I want to report a bug for the hooks plugin.\r\n\r\n**What is the current behavior?**\r\nThere was no error report after running eslint, but the component failed when running in the browser.\r\nFrom the chrome dev console it reported \"Uncaught Error: Rendered fewer hooks than expected. This may be caused by an accidental early return statement.\" \r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React.\r\nHere is a link to the github repo:\r\nhttps://github.com/paboulos/react-hooks-eslint\r\n\r\n**What is the expected behavior?**\r\nFollowed The Hooks API guide which says React hooks provides a linter plugin to enforce these rules automatically.Therefore it should have reported a usage violation when the eslint hooks plugin is specified. \r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nUsing window 10 OS and Chrome browser.\r\n1. First ran npx create-react-app Hooks\r\n2. Installed react 16.7.0-alpha.2 and react-dom 16.7.0-alpha.2\r\n3. Installed eslint dev dependencies:\r\n \"babel-eslint\": \"9.0.0\",\r\n    \"babel-loader\": \"8.0.4\",\r\n    \"eslint\": \"5.9.0\",\r\n    \"eslint-config-airbnb\": \"17.1.0\",\r\n    \"eslint-loader\": \"2.1.1\",\r\n    \"eslint-plugin-import\": \"2.14.0\",\r\n    \"eslint-plugin-jsx-a11y\": \"6.1.2\",\r\n    \"eslint-plugin-react\": \"7.11.1\",\r\n    \"eslint-plugin-react-hooks\": \"0.0.0\"\r\n4. Created the .eslintrc.json following the instructions from the Hooks API Doc\r\nThen ran package script lint as follows: \"npm run lint\"\r\nno errors reported.\r\nThen ran package script start as follows: \"npm start\"\r\nThe React component CountHooks calls useState incorrectly and reports error in the browser dev console.",
        "remove_template_description": "I want to report a bug for the hooks plugin.    **What is the current behavior?**  There was no error report after running eslint, but the component failed when running in the browser.  From the chrome dev console it reported \"Uncaught Error: Rendered fewer hooks than expected. This may be caused by an accidental early return statement.\"     **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React.  Here is a link to the github repo:  https://github.com/paboulos/react-hooks-eslint    **What is the expected behavior?**  Followed The Hooks API guide which says React hooks provides a linter plugin to enforce these rules automatically.Therefore it should have reported a usage violation when the eslint hooks plugin is specified.   **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  Using window 10 OS and Chrome browser.  1. First ran npx create-react-app Hooks  2. Installed react 16.7.0-alpha.2 and react-dom 16.7.0-alpha.2  3. Installed eslint dev dependencies:   \"babel-eslint\": \"9.0.0\",      \"babel-loader\": \"8.0.4\",      \"eslint\": \"5.9.0\",      \"eslint-config-airbnb\": \"17.1.0\",      \"eslint-loader\": \"2.1.1\",      \"eslint-plugin-import\": \"2.14.0\",      \"eslint-plugin-jsx-a11y\": \"6.1.2\",      \"eslint-plugin-react\": \"7.11.1\",      \"eslint-plugin-react-hooks\": \"0.0.0\"  4. Created the .eslintrc.json following the instructions from the Hooks API Doc  Then ran package script lint as follows: \"npm run lint\"  no errors reported.  Then ran package script start as follows: \"npm start\"  The React component CountHooks calls useState incorrectly and reports error in the browser dev console.",
        "human_words": "I want to report a bug for the hooks plugin.    **What is the current behavior?**  There was no error report after running eslint, but the component failed when running in the browser.  From the chrome dev console it reported \"Uncaught Error: Rendered fewer hooks than expected. This may be caused by an accidental early return statement.\"     **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React.  Here is a link to the github repo:  https://github.com/paboulos/react-hooks-eslint    **What is the expected behavior?**  Followed The Hooks API guide which says React hooks provides a linter plugin to enforce these rules automatically.Therefore it should have reported a usage violation when the eslint hooks plugin is specified.   **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  Using window 10 OS and Chrome browser.  1. First ran npx create-react-app Hooks  2. Installed react 16.7.0-alpha.2 and react-dom 16.7.0-alpha.2  3. Installed eslint dev dependencies:   \"babel-eslint\": \"9.0.0\",      \"babel-loader\": \"8.0.4\",      \"eslint\": \"5.9.0\",      \"eslint-config-airbnb\": \"17.1.0\",      \"eslint-loader\": \"2.1.1\",      \"eslint-plugin-import\": \"2.14.0\",      \"eslint-plugin-jsx-a11y\": \"6.1.2\",      \"eslint-plugin-react\": \"7.11.1\",      \"eslint-plugin-react-hooks\": \"0.0.0\"  4. Created the .eslintrc.json following the instructions from the Hooks API Doc  Then ran package script lint as follows: \"npm run lint\"  no errors reported.  Then ran package script start as follows: \"npm start\"  The React component CountHooks calls useState incorrectly and reports error in the browser dev console.",
        "human_words_regrex": "I want to report a bug for the hooks plugin. **What is the current behavior?** There was no error report after running eslint, but the component failed when running in the browser. From the chrome dev console it reported \"Uncaught Error: Rendered fewer hooks than expected. This may be caused by an accidental early return statement.\" **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Here is a link to the github repo:  **What is the expected behavior?** Followed The Hooks API guide which says React hooks provides a linter plugin to enforce these rules automatically.Therefore it should have reported a usage violation when the eslint hooks plugin is specified. **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** Using window 10 OS and Chrome browser. 1. First ran npx create-react-app Hooks 2. Installed react 16.7.0-alpha.2 and react-dom 16.7.0-alpha.2 3. Installed eslint dev dependencies: \"babel-eslint\": \"9.0.0\", \"babel-loader\": \"8.0.4\", \"eslint\": \"5.9.0\", \"eslint-config-airbnb\": \"17.1.0\", \"eslint-loader\": \"2.1.1\", \"eslint-plugin-import\": \"2.14.0\", \"eslint-plugin-jsx-a11y\": \"6.1.2\", \"eslint-plugin-react\": \"7.11.1\", \"eslint-plugin-react-hooks\": \"0.0.0\" 4. Created the .eslintrc.json following the instructions from the Hooks API Doc Then ran package script lint as follows: \"npm run lint\" no errors reported. Then ran package script start as follows: \"npm start\" The React component CountHooks calls useState incorrectly and reports error in the browser dev console.",
        "human_words_stopwords_removal_lemmatization": "want report bug hook plugin . * * current behavior ? * * error report running eslint , component failed running browser . chrome dev console reported `` uncaught error : rendered fewer hook expected . may caused accidental early return statement . '' * * current behavior bug , please provide step reproduce possible minimal demo problem . bug get fixed much faster run code n't dependency react . link github repo : * * expected behavior ? * * followed hook api guide say react hook provides linter plugin enforce rule automatically.therefore reported usage violation eslint hook plugin specified . * * version react , browser / o affected issue ? work previous version react ? * * using window 10 o chrome browser . 1. first ran npx create-react-app hook 2. installed react 16.7.0-alpha.2 react-dom 16.7.0-alpha.2 3. installed eslint dev dependency : `` babel-eslint '' : `` 9.0.0 '' , `` babel-loader '' : `` 8.0.4 '' , `` eslint '' : `` 5.9.0 '' , `` eslint-config-airbnb '' : `` 17.1.0 '' , `` eslint-loader '' : `` 2.1.1 '' , `` eslint-plugin-import '' : `` 2.14.0 '' , `` eslint-plugin-jsx-a11y '' : `` 6.1.2 '' , `` eslint-plugin-react '' : `` 7.11.1 '' , `` eslint-plugin-react-hooks '' : `` 0.0.0 '' 4. created .eslintrc.json following instruction hook api doc ran package script lint follows : `` npm run lint '' error reported . ran package script start follows : `` npm start '' react component counthooks call usestate incorrectly report error browser dev console .",
        "title_stopwords_removal_lemmatization": "eslint-plugin-react-hooks report error inside unnamed function"
    },
    {
        "issue_id": 388264035,
        "title": "calculating context changes in componentDidUpdate",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2018-12-06T15:26:50Z",
        "status": "open",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nThere is no way to see if `componentDidMount` was caused by a context change\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n```typescript\r\nimport React from 'react';\r\n\r\ninterface ExampleContext {\r\n    param: string;\r\n}\r\n\r\nconst ExampleContext = React.createContext<ExampleContext>({\r\n    param: 'foo',\r\n});\r\n\r\ninterface ExampleState {\r\n    data: any;\r\n}\r\n\r\nclass Example extends React.Component<{}, ExampleState> {\r\n    static contextType = ExampleContext;\r\n    context!: ExampleContext;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            data: [],\r\n        };\r\n    }\r\n\r\n    fetchData(param: string): void {\r\n        // whatever\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchData(this.context.param);\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        // ???        \r\n    }\r\n}\r\n```\r\n**What is the expected behavior?**\r\nA 4th parameter for `previousContext`\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n16.6",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**  Bug    **What is the current behavior?**  There is no way to see if `componentDidMount` was caused by a context change    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**  ```typescript  import React from 'react';    interface ExampleContext {      param: string;  }    const ExampleContext = React.createContext<ExampleContext>({      param: 'foo',  });    interface ExampleState {      data: any;  }    class Example extends React.Component<{}, ExampleState> {      static contextType = ExampleContext;      context!: ExampleContext;        constructor(props) {          super(props);            this.state = {              data: [],          };      }        fetchData(param: string): void {          // whatever      }        componentDidMount() {          this.fetchData(this.context.param);      }        componentDidUpdate() {          // ???              }  }  ```  **What is the expected behavior?**  A 4th parameter for `previousContext`    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  16.6",
        "human_words": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**  Bug    **What is the current behavior?**  There is no way to see if `componentDidMount` was caused by a context change    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**    **What is the expected behavior?**  A 4th parameter for `previousContext`    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  16.6",
        "human_words_regrex": " **Do you want to request a *feature* or report a *bug*?** Bug **What is the current behavior?** There is no way to see if `componentDidMount` was caused by a context change **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle ( or CodeSandbox ( example below:** **What is the expected behavior?** A 4th parameter for `previousContext` **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** 16.6",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * bug * * current behavior ? * * way see ` componentdidmount ` caused context change * * current behavior bug , please provide step reproduce possible minimal demo problem . bug get fixed much faster run code n't dependency react . paste link jsfiddle ( codesandbox ( example : * * * * expected behavior ? * * 4th parameter ` previouscontext ` * * version react , browser / o affected issue ? work previous version react ? * * 16.6",
        "title_stopwords_removal_lemmatization": "calculating context change componentdidupdate"
    },
    {
        "issue_id": 386623497,
        "title": "[Scheduler] Add support for delayed scheduling of callbacks.",
        "label": [
            "Type: Feature Request",
            "Component: Scheduler",
            "Resolution: Stale"
        ],
        "date": "2018-12-03T01:04:57Z",
        "status": "closed",
        "description": "Has the React team considered adding the ability to specify a time delay when scheduling callbacks on Scheduler. This would be useful to enable using Scheduler as a general scheduling solution in a JS environment, removing the need to use and manage setTimeouts/setInterval calls. ",
        "remove_template_description": "Has the React team considered adding the ability to specify a time delay when scheduling callbacks on Scheduler. This would be useful to enable using Scheduler as a general scheduling solution in a JS environment, removing the need to use and manage setTimeouts/setInterval calls.",
        "human_words": "Has the React team considered adding the ability to specify a time delay when scheduling callbacks on Scheduler. This would be useful to enable using Scheduler as a general scheduling solution in a JS environment, removing the need to use and manage setTimeouts/setInterval calls.",
        "human_words_regrex": "Has the React team considered adding the ability to specify a time delay when scheduling callbacks on Scheduler. This would be useful to enable using Scheduler as a general scheduling solution in a JS environment, removing the need to use and manage setTimeouts/setInterval calls.",
        "human_words_stopwords_removal_lemmatization": "react team considered adding ability specify time delay scheduling callback scheduler . would useful enable using scheduler general scheduling solution j environment , removing need use manage settimeouts/setinterval call .",
        "title_stopwords_removal_lemmatization": "[ scheduler ] add support delayed scheduling callback ."
    },
    {
        "issue_id": 385816884,
        "title": "findDOMNode deprecation",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2018-11-29T16:24:15Z",
        "status": "open",
        "description": "## Timeline\r\n1. <= 16.3: `findDOMNode` is *discouraged* but accepted for certain use cases\r\n2. 16.3 (2018-03-28): `forwardRef` is introduced:\r\n  It can be used in HOCs to avoid using `findDOMNode` on the enhanced component\r\n3. 16.6 (2018-10-23): `findDOMNode` is deprecated in `React.StrictMode`\r\n4. 16.7.alpha (2018-10-24): `React.Concurrent` mode is released:\r\n  This mode *extends* `React.StrictMode` in a way that `findDOMNode` is deprecated in that mode too.\r\n5. 16.8 (Q2 2019): stable `React.Concurrent` mode\r\n  \r\n## findDOMNode use cases\r\nIf you have more use cases please let me know. I only started with some examples from `mui-org/material-ui`.\r\n### with a planned alternative\r\n- focus handling (React Fire, \"exploratory phase\") \r\n- passive event listeners ([facebook/react#6436]). \"Passive events will likely be a part of [React Fire].\" - [facebook/react#13525]\r\n\r\n## State of `forwardRef`\r\n`react` has 3.4M downloads/week.\r\n\r\n### `hoist-non-react-statics` (3.9M downloads/week; not clear what percentage is 2.x)\r\nA utility mainly used in HOCs and [encouraged to use in the official react docs](https://reactjs.org/docs/higher-order-components.html#static-methods-must-be-copied-over). However everyone stuck at `2.x` will likely encounter issues with `forwardRef` since that version\r\ndoes not handle any `react@^16.3` features. ^3.2.0 should have no issues apart from some minor\r\nissues with propTypes hoisting from `forwardRef` to `forwardRef`. The latest stable from zeit/next still uses that outdated version. However the latest canary for 7.0.3 does not.\r\n\r\n### react-docgen (400k downloads/week)\r\nNot recognized as a valid component definition. PR open at [reactjs/react-docgen#311].\r\n\r\n### react-redux (1.4M downloads/week)\r\n`connect` does properly forward their refs in the beta release of 6.x. No timeline for stable release given\r\nhowever 3 betas have already been released so it's probably soon.\r\n\r\n### react-router (1.4M downloads/week)\r\n`withRouter` is planned to forward refs ([ReactTraining/react-router#6056#issuecomment-435524678]).\r\nHowever no comment about the other components and no major release candidate is published.\r\n\r\n### display name\r\n`React.forwardRef` components are recognized by `react-devtools`. However when wrapped\r\nin a HOC it's very likely that the display name is lost. See [facebook/react#14319]\r\n\r\n### The issue\r\n**Assumptions:**\r\n- you are not in control of your whole component tree i.e. you use components from 3rd party libraries\r\n- you want to use `React.ConcurrentMode`\r\n- Usable includes production and development. It specifically means for development that deprecation warnings in a component\r\n  make that component not usable in development mode because of all the *noise* it adds in those cases.\r\n  *Noise* because it's not actionable if that component is from a 3rd party library.\r\n\r\nIf none of those applies to you then you probably don't have an issue with `findDOMNode` deprecation.\r\n\r\nThe mode of a partial tree can only be made more restrictive but not loosened up. If\r\nyou wrap your tree in `React.StrictMode` and use a component from a 3rd party library\r\nthat 3rd party library has to be `React.StrictMode` compliant too. \r\n\r\nThis means that you can't use `React.StrictMode` effectiveley. This might be ok since it's for development only anyway and has no implications for production. However Concurrent mode can have actual implications for production.  Since it is new and the community wants to use new things libraries have to make sure that they are strict mode compliant too.\r\n\r\nIn addition between the relase of an alternative in the form of `React.forwardRef` and the deprecation only 7 months have passed. One could argue that this is plenty of time but (at least from my perspective) the work on migrating from `findDOMNode` to refs and `forwardRef` was postponed because `findDOMNode` was not deprecated yet.  However the actual deprecation happened one day before the release of `unstable_ConcurrentMode` virtually giving no time to migrate. ~We'll have to see when a stable `16.7` release will happen but assuming this happens today only a month has passed between deprecation and *virtual* removal.~ [React 16.x Roadmap] was release pointing towards Q2 2019 as a release date of stable `React.Concurrent` mode. This relaxes pressure for library maintainers quite a bit IMO.\r\n\r\n### Conclusion\r\nRefs are not a viable upgrade path to replace `findDOMNode` yet. \r\nUntil refs are usable without headaches from forwarding refs `findDOMNode` should be undeprecated.\r\n\r\n## Releated\r\n- [forwarding Refs guide on official react docs](https://reactjs.org/docs/forwarding-refs.html)\r\n- [findDOMNode API documentation](https://reactjs.org/docs/react-dom.html#finddomnode) (includes arguments against usage)\r\n- [pull request that deprecated findDOMNode](https://github.com/facebook/react/pull/13841)\r\n\r\n[facebook/react#6436]: https://github.com/facebook/react/issues/6436\r\n[facebook/react#13525]: https://github.com/facebook/react/issues/13525\r\n[facebook/react#14319]: https://github.com/facebook/react/issues/14319\r\n[reactjs/react-docgen#311]: https://github.com/reactjs/react-docgen/pull/311\r\n[ReactTraining/react-router#6056#issuecomment-435524678]: https://github.com/ReactTraining/react-router/issues/6056#issuecomment-435524678\r\n[React 16.x Roadmap]: https://reactjs.org/blog/2018/11/27/react-16-roadmap.html",
        "remove_template_description": "## Timeline  1. <= 16.3: `findDOMNode` is *discouraged* but accepted for certain use cases  2. 16.3 (2018-03-28): `forwardRef` is introduced:    It can be used in HOCs to avoid using `findDOMNode` on the enhanced component  3. 16.6 (2018-10-23): `findDOMNode` is deprecated in `React.StrictMode`  4. 16.7.alpha (2018-10-24): `React.Concurrent` mode is released:    This mode *extends* `React.StrictMode` in a way that `findDOMNode` is deprecated in that mode too.  5. 16.8 (Q2 2019): stable `React.Concurrent` mode      ## findDOMNode use cases  If you have more use cases please let me know. I only started with some examples from `mui-org/material-ui`.  ### with a planned alternative  - focus handling (React Fire, \"exploratory phase\")   - passive event listeners ([facebook/react#6436]). \"Passive events will likely be a part of [React Fire].\" - [facebook/react#13525]    ## State of `forwardRef`  `react` has 3.4M downloads/week.    ### `hoist-non-react-statics` (3.9M downloads/week; not clear what percentage is 2.x)  A utility mainly used in HOCs and [encouraged to use in the official react docs](https://reactjs.org/docs/higher-order-components.html#static-methods-must-be-copied-over). However everyone stuck at `2.x` will likely encounter issues with `forwardRef` since that version  does not handle any `react@^16.3` features. ^3.2.0 should have no issues apart from some minor  issues with propTypes hoisting from `forwardRef` to `forwardRef`. The latest stable from zeit/next still uses that outdated version. However the latest canary for 7.0.3 does not.    ### react-docgen (400k downloads/week)  Not recognized as a valid component definition. PR open at [reactjs/react-docgen#311].    ### react-redux (1.4M downloads/week)  `connect` does properly forward their refs in the beta release of 6.x. No timeline for stable release given  however 3 betas have already been released so it's probably soon.    ### react-router (1.4M downloads/week)  `withRouter` is planned to forward refs ([ReactTraining/react-router#6056#issuecomment-435524678]).  However no comment about the other components and no major release candidate is published.    ### display name  `React.forwardRef` components are recognized by `react-devtools`. However when wrapped  in a HOC it's very likely that the display name is lost. See [facebook/react#14319]    ### The issue  **Assumptions:**  - you are not in control of your whole component tree i.e. you use components from 3rd party libraries  - you want to use `React.ConcurrentMode`  - Usable includes production and development. It specifically means for development that deprecation warnings in a component    make that component not usable in development mode because of all the *noise* it adds in those cases.    *Noise* because it's not actionable if that component is from a 3rd party library.    If none of those applies to you then you probably don't have an issue with `findDOMNode` deprecation.    The mode of a partial tree can only be made more restrictive but not loosened up. If  you wrap your tree in `React.StrictMode` and use a component from a 3rd party library  that 3rd party library has to be `React.StrictMode` compliant too.     This means that you can't use `React.StrictMode` effectiveley. This might be ok since it's for development only anyway and has no implications for production. However Concurrent mode can have actual implications for production.  Since it is new and the community wants to use new things libraries have to make sure that they are strict mode compliant too.    In addition between the relase of an alternative in the form of `React.forwardRef` and the deprecation only 7 months have passed. One could argue that this is plenty of time but (at least from my perspective) the work on migrating from `findDOMNode` to refs and `forwardRef` was postponed because `findDOMNode` was not deprecated yet.  However the actual deprecation happened one day before the release of `unstable_ConcurrentMode` virtually giving no time to migrate. ~We'll have to see when a stable `16.7` release will happen but assuming this happens today only a month has passed between deprecation and *virtual* removal.~ [React 16.x Roadmap] was release pointing towards Q2 2019 as a release date of stable `React.Concurrent` mode. This relaxes pressure for library maintainers quite a bit IMO.    ### Conclusion  Refs are not a viable upgrade path to replace `findDOMNode` yet.   Until refs are usable without headaches from forwarding refs `findDOMNode` should be undeprecated.    ## Releated  - [forwarding Refs guide on official react docs](https://reactjs.org/docs/forwarding-refs.html)  - [findDOMNode API documentation](https://reactjs.org/docs/react-dom.html#finddomnode) (includes arguments against usage)  - [pull request that deprecated findDOMNode](https://github.com/facebook/react/pull/13841)    [facebook/react#6436]: https://github.com/facebook/react/issues/6436  [facebook/react#13525]: https://github.com/facebook/react/issues/13525  [facebook/react#14319]: https://github.com/facebook/react/issues/14319  [reactjs/react-docgen#311]: https://github.com/reactjs/react-docgen/pull/311  [ReactTraining/react-router#6056#issuecomment-435524678]: https://github.com/ReactTraining/react-router/issues/6056#issuecomment-435524678  [React 16.x Roadmap]: https://reactjs.org/blog/2018/11/27/react-16-roadmap.html",
        "human_words": "## Timeline  1. <= 16.3: `findDOMNode` is *discouraged* but accepted for certain use cases  2. 16.3 (2018-03-28): `forwardRef` is introduced:    It can be used in HOCs to avoid using `findDOMNode` on the enhanced component  3. 16.6 (2018-10-23): `findDOMNode` is deprecated in `React.StrictMode`  4. 16.7.alpha (2018-10-24): `React.Concurrent` mode is released:    This mode *extends* `React.StrictMode` in a way that `findDOMNode` is deprecated in that mode too.  5. 16.8 (Q2 2019): stable `React.Concurrent` mode      ## findDOMNode use cases  If you have more use cases please let me know. I only started with some examples from `mui-org/material-ui`.  ### with a planned alternative  - focus handling (React Fire, \"exploratory phase\")   - passive event listeners ([facebook/react#6436]). \"Passive events will likely be a part of [React Fire].\" - [facebook/react#13525]    ## State of `forwardRef`  `react` has 3.4M downloads/week.    ### `hoist-non-react-statics` (3.9M downloads/week; not clear what percentage is 2.x)  A utility mainly used in HOCs and [encouraged to use in the official react docs](https://reactjs.org/docs/higher-order-components.html#static-methods-must-be-copied-over). However everyone stuck at `2.x` will likely encounter issues with `forwardRef` since that version  does not handle any `react@^16.3` features. ^3.2.0 should have no issues apart from some minor  issues with propTypes hoisting from `forwardRef` to `forwardRef`. The latest stable from zeit/next still uses that outdated version. However the latest canary for 7.0.3 does not.    ### react-docgen (400k downloads/week)  Not recognized as a valid component definition. PR open at [reactjs/react-docgen#311].    ### react-redux (1.4M downloads/week)  `connect` does properly forward their refs in the beta release of 6.x. No timeline for stable release given  however 3 betas have already been released so it's probably soon.    ### react-router (1.4M downloads/week)  `withRouter` is planned to forward refs ([ReactTraining/react-router#6056#issuecomment-435524678]).  However no comment about the other components and no major release candidate is published.    ### display name  `React.forwardRef` components are recognized by `react-devtools`. However when wrapped  in a HOC it's very likely that the display name is lost. See [facebook/react#14319]    ### The issue  **Assumptions:**  - you are not in control of your whole component tree i.e. you use components from 3rd party libraries  - you want to use `React.ConcurrentMode`  - Usable includes production and development. It specifically means for development that deprecation warnings in a component    make that component not usable in development mode because of all the *noise* it adds in those cases.    *Noise* because it's not actionable if that component is from a 3rd party library.    If none of those applies to you then you probably don't have an issue with `findDOMNode` deprecation.    The mode of a partial tree can only be made more restrictive but not loosened up. If  you wrap your tree in `React.StrictMode` and use a component from a 3rd party library  that 3rd party library has to be `React.StrictMode` compliant too.     This means that you can't use `React.StrictMode` effectiveley. This might be ok since it's for development only anyway and has no implications for production. However Concurrent mode can have actual implications for production.  Since it is new and the community wants to use new things libraries have to make sure that they are strict mode compliant too.    In addition between the relase of an alternative in the form of `React.forwardRef` and the deprecation only 7 months have passed. One could argue that this is plenty of time but (at least from my perspective) the work on migrating from `findDOMNode` to refs and `forwardRef` was postponed because `findDOMNode` was not deprecated yet.  However the actual deprecation happened one day before the release of `unstable_ConcurrentMode` virtually giving no time to migrate. ~We'll have to see when a stable `16.7` release will happen but assuming this happens today only a month has passed between deprecation and *virtual* removal.~ [React 16.x Roadmap] was release pointing towards Q2 2019 as a release date of stable `React.Concurrent` mode. This relaxes pressure for library maintainers quite a bit IMO.    ### Conclusion  Refs are not a viable upgrade path to replace `findDOMNode` yet.   Until refs are usable without headaches from forwarding refs `findDOMNode` should be undeprecated.    ## Releated  - [forwarding Refs guide on official react docs](https://reactjs.org/docs/forwarding-refs.html)  - [findDOMNode API documentation](https://reactjs.org/docs/react-dom.html#finddomnode) (includes arguments against usage)  - [pull request that deprecated findDOMNode](https://github.com/facebook/react/pull/13841)    [facebook/react#6436]: https://github.com/facebook/react/issues/6436  [facebook/react#13525]: https://github.com/facebook/react/issues/13525  [facebook/react#14319]: https://github.com/facebook/react/issues/14319  [reactjs/react-docgen#311]: https://github.com/reactjs/react-docgen/pull/311  [ReactTraining/react-router#6056#issuecomment-435524678]: https://github.com/ReactTraining/react-router/issues/6056#issuecomment-435524678  [React 16.x Roadmap]: https://reactjs.org/blog/2018/11/27/react-16-roadmap.html",
        "human_words_regrex": "## Timeline 1. <= 16.3: `findDOMNode` is *discouraged* but accepted for certain use cases 2. 16.3 (2018-03-28): `forwardRef` is introduced: It can be used in HOCs to avoid using `findDOMNode` on the enhanced component 3. 16.6 (2018-10-23): `findDOMNode` is deprecated in `React.StrictMode` 4. 16.7.alpha (2018-10-24): `React.Concurrent` mode is released: This mode *extends* `React.StrictMode` in a way that `findDOMNode` is deprecated in that mode too. 5. 16.8 (Q2 2019): stable `React.Concurrent` mode ## findDOMNode use cases If you have more use cases please let me know. I only started with some examples from `mui-org/material-ui`. ### with a planned alternative - focus handling (React Fire, \"exploratory phase\") - passive event listeners (. However everyone stuck at `2.x` will likely encounter issues with `forwardRef` since that version does not handle any `react@^16.3` features. ^3.2.0 should have no issues apart from some minor issues with propTypes hoisting from `forwardRef` to `forwardRef`. The latest stable from zeit/next still uses that outdated version. However the latest canary for 7.0.3 does not. ### react-docgen (400k downloads/week) Not recognized as a valid component definition. PR open at  -  (includes arguments against usage) -  [facebook/react#6436]:  [facebook/react#13525]:  [facebook/react#14319]:  [reactjs/react-docgen#311]:  [ReactTraining/react-router#6056#issuecomment-435524678]:  [React 16.x Roadmap]: ",
        "human_words_stopwords_removal_lemmatization": "# # timeline 1 . < = 16.3 : ` finddomnode ` * discouraged * accepted certain use case 2 . 16.3 ( 2018-03-28 ) : ` forwardref ` introduced : used hocs avoid using ` finddomnode ` enhanced component 3 . 16.6 ( 2018-10-23 ) : ` finddomnode ` deprecated ` react.strictmode ` 4 . 16.7.alpha ( 2018-10-24 ) : ` react.concurrent ` mode released : mode * extends * ` react.strictmode ` way ` finddomnode ` deprecated mode . 5 . 16.8 ( q2 2019 ) : stable ` react.concurrent ` mode # # finddomnode use case use case please let know . started example ` mui-org/material-ui ` . # # # planned alternative - focus handling ( react fire , `` exploratory phase '' ) - passive event listener ( . however everyone stuck ` 2.x ` likely encounter issue ` forwardref ` since version handle ` react @ ^16.3 ` feature . ^3.2.0 issue apart minor issue proptypes hoisting ` forwardref ` ` forwardref ` . latest stable zeit/next still us outdated version . however latest canary 7.0.3 . # # # react-docgen ( 400k downloads/week ) recognized valid component definition . pr open - ( includes argument usage ) - [ facebook/react # 6436 ] : [ facebook/react # 13525 ] : [ facebook/react # 14319 ] : [ reactjs/react-docgen # 311 ] : [ reacttraining/react-router # 6056 # issuecomment-435524678 ] : [ react 16.x roadmap ] :",
        "title_stopwords_removal_lemmatization": "finddomnode deprecation"
    },
    {
        "issue_id": 385270279,
        "title": "Feature Idea: useError hook",
        "label": [
            "Type: Feature Request",
            "Component: Hooks"
        ],
        "date": "2018-11-28T13:34:22Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?** \r\n\r\nFeature idea\r\n\r\n**What is the current behavior?**\r\n\r\nCurrently there is no hook for dealing with errors in a component's sub-tree.\r\n\r\n**What is the expected behavior?**\r\n\r\nHave a hook that allows for functional components to act as Error Boundaries.\r\n\r\nExample:\r\n\r\n```\r\nfunction myErrorBoundary() {\r\n  const caughtError = useErrorCatching();\r\n  if (caughtError !== null) { return <ErrorHandler error={caughtError} />; }\r\n  return <RegularContent />;\r\n}\r\n```\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nn/a",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**     Feature idea    **What is the current behavior?**    Currently there is no hook for dealing with errors in a component's sub-tree.    **What is the expected behavior?**    Have a hook that allows for functional components to act as Error Boundaries.    Example:    ```  function myErrorBoundary() {    const caughtError = useErrorCatching();    if (caughtError !== null) { return <ErrorHandler error={caughtError} />; }    return <RegularContent />;  }  ```    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  n/a",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**     Feature idea    **What is the current behavior?**    Currently there is no hook for dealing with errors in a component's sub-tree.    **What is the expected behavior?**    Have a hook that allows for functional components to act as Error Boundaries.    Example:        **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  n/a",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** Feature idea **What is the current behavior?** Currently there is no hook for dealing with errors in a component's sub-tree. **What is the expected behavior?** Have a hook that allows for functional components to act as Error Boundaries. Example: **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** n/a",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * feature idea * * current behavior ? * * currently hook dealing error component 's sub-tree . * * expected behavior ? * * hook allows functional component act error boundary . example : * * version react , browser / o affected issue ? work previous version react ? * * n/a",
        "title_stopwords_removal_lemmatization": "feature idea : useerror hook"
    },
    {
        "issue_id": 384019382,
        "title": "API for display name on forwardRef, memo and potential future exotic components",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2018-11-24T20:28:16Z",
        "status": "open",
        "description": "TL;DR: Can you expose [shared/getComponentName](https://github.com/facebook/react/blob/master/packages/shared/getComponentName.js)?\r\n\r\n<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nExpose an API to get the display name of every component (in `__DEV__` only).\r\n\r\n**What is the current behavior?**\r\nMost of the ecosystem still uses `Component.displayName || Component.name || someFallbackName` \r\n (with some branching depending on the type of `Component`) when setting the display name of an enhanced component i.e. `connect()(WrappedComponent)` will result in `\"connect(WrappedComponent)\"` as a `displayName`.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\nSince components created by `forwardRef` or `memo` are not actual functions these higher-order components are not able to determine a proper display name while `react-devtools` is able to:\r\n\r\nhttps://codesandbox.io/s/zqj9v50243\r\n\r\n- `react-redux` creates `\"connect(Component)\"`\r\n- `react-router` creates `\"withRouter(undefined)\"`\r\n\r\n**What is the expected behavior?**\r\nThe new \"exotic-components\" should work with the existing 3rd party libraries WRT to `displayName`.\r\n\r\nNow there are a couple of solutions to this issue:\r\n1. **Edit:** Expose [shared/getComponentName](https://github.com/facebook/react/blob/master/packages/shared/getComponentName.js)\r\n2. This is the responsibility of the ecosystem. It should provide a solution and maintain it. Somewhat blocked by #12882, related: #12932\r\n3. Grant access to the functionality used in `react-devtools` (or would this only work on the fibers?)\r\n4. Set a `name` (or `displayName` no preference here) property on those \"exotic-components\" (don't know how to call them). Naive implementation e.g.: `name: 'ForwardRef(' + fn.name + ')'`.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nI guess this started with `forwardRef` in 16.3.\r\n",
        "remove_template_description": "TL;DR: Can you expose [shared/getComponentName](https://github.com/facebook/react/blob/master/packages/shared/getComponentName.js)?    <!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**  Expose an API to get the display name of every component (in `__DEV__` only).    **What is the current behavior?**  Most of the ecosystem still uses `Component.displayName || Component.name || someFallbackName`    (with some branching depending on the type of `Component`) when setting the display name of an enhanced component i.e. `connect()(WrappedComponent)` will result in `\"connect(WrappedComponent)\"` as a `displayName`.    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**  Since components created by `forwardRef` or `memo` are not actual functions these higher-order components are not able to determine a proper display name while `react-devtools` is able to:    https://codesandbox.io/s/zqj9v50243    - `react-redux` creates `\"connect(Component)\"`  - `react-router` creates `\"withRouter(undefined)\"`    **What is the expected behavior?**  The new \"exotic-components\" should work with the existing 3rd party libraries WRT to `displayName`.    Now there are a couple of solutions to this issue:  1. **Edit:** Expose [shared/getComponentName](https://github.com/facebook/react/blob/master/packages/shared/getComponentName.js)  2. This is the responsibility of the ecosystem. It should provide a solution and maintain it. Somewhat blocked by #12882, related: #12932  3. Grant access to the functionality used in `react-devtools` (or would this only work on the fibers?)  4. Set a `name` (or `displayName` no preference here) property on those \"exotic-components\" (don't know how to call them). Naive implementation e.g.: `name: 'ForwardRef(' + fn.name + ')'`.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  I guess this started with `forwardRef` in 16.3.",
        "human_words": "TL;DR: Can you expose [shared/getComponentName](https://github.com/facebook/react/blob/master/packages/shared/getComponentName.js)?    <!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**  Expose an API to get the display name of every component (in `__DEV__` only).    **What is the current behavior?**  Most of the ecosystem still uses `Component.displayName || Component.name || someFallbackName`    (with some branching depending on the type of `Component`) when setting the display name of an enhanced component i.e. `connect()(WrappedComponent)` will result in `\"connect(WrappedComponent)\"` as a `displayName`.    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**  Since components created by `forwardRef` or `memo` are not actual functions these higher-order components are not able to determine a proper display name while `react-devtools` is able to:    https://codesandbox.io/s/zqj9v50243    - `react-redux` creates `\"connect(Component)\"`  - `react-router` creates `\"withRouter(undefined)\"`    **What is the expected behavior?**  The new \"exotic-components\" should work with the existing 3rd party libraries WRT to `displayName`.    Now there are a couple of solutions to this issue:  1. **Edit:** Expose [shared/getComponentName](https://github.com/facebook/react/blob/master/packages/shared/getComponentName.js)  2. This is the responsibility of the ecosystem. It should provide a solution and maintain it. Somewhat blocked by #12882, related: #12932  3. Grant access to the functionality used in `react-devtools` (or would this only work on the fibers?)  4. Set a `name` (or `displayName` no preference here) property on those \"exotic-components\" (don't know how to call them). Naive implementation e.g.: `name: 'ForwardRef(' + fn.name + ')'`.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  I guess this started with `forwardRef` in 16.3.",
        "human_words_regrex": "TL;DR: Can you expose ?  **Do you want to request a *feature* or report a *bug*?** Expose an API to get the display name of every component (in `__DEV__` only). **What is the current behavior?** Most of the ecosystem still uses `Component.displayName || Component.name || someFallbackName` (with some branching depending on the type of `Component`) when setting the display name of an enhanced component i.e. `connect()(WrappedComponent)` will result in `\"connect(WrappedComponent)\"` as a `displayName`. **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle ( or CodeSandbox ( example below:** Since components created by `forwardRef` or `memo` are not actual functions these higher-order components are not able to determine a proper display name while `react-devtools` is able to:  - `react-redux` creates `\"connect(Component)\"` - `react-router` creates `\"withRouter(undefined)\"` **What is the expected behavior?** The new \"exotic-components\" should work with the existing 3rd party libraries WRT to `displayName`. Now there are a couple of solutions to this issue: 1. **Edit:** Expose  2. This is the responsibility of the ecosystem. It should provide a solution and maintain it. Somewhat blocked by #12882, related: #12932 3. Grant access to the functionality used in `react-devtools` (or would this only work on the fibers?) 4. Set a `name` (or `displayName` no preference here) property on those \"exotic-components\" (don't know how to call them). Naive implementation e.g.: `name: 'ForwardRef(' + fn.name + ')'`. **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** I guess this started with `forwardRef` in 16.3.",
        "human_words_stopwords_removal_lemmatization": "tl ; dr : expose ? * * want request * feature * report * bug * ? * * expose api get display name every component ( ` __dev__ ` ) . * * current behavior ? * * ecosystem still us ` component.displayname || component.name || somefallbackname ` ( branching depending type ` component ` ) setting display name enhanced component i.e . ` connect ( ) ( wrappedcomponent ) ` result ` `` connect ( wrappedcomponent ) '' ` ` displayname ` . * * current behavior bug , please provide step reproduce possible minimal demo problem . bug get fixed much faster run code n't dependency react . paste link jsfiddle ( codesandbox ( example : * * since component created ` forwardref ` ` memo ` actual function higher-order component able determine proper display name ` react-devtools ` able : - ` react-redux ` creates ` `` connect ( component ) '' ` - ` react-router ` creates ` `` withrouter ( undefined ) '' ` * * expected behavior ? * * new `` exotic-components '' work existing 3rd party library wrt ` displayname ` . couple solution issue : 1 . * * edit : * * expose 2. responsibility ecosystem . provide solution maintain . somewhat blocked # 12882 , related : # 12932 3. grant access functionality used ` react-devtools ` ( would work fiber ? ) 4. set ` name ` ( ` displayname ` preference ) property `` exotic-components '' ( n't know call ) . naive implementation e.g . : ` name : 'forwardref ( ' + fn.name + ' ) ' ` . * * version react , browser / o affected issue ? work previous version react ? * * guess started ` forwardref ` 16.3 .",
        "title_stopwords_removal_lemmatization": "api display name forwardref , memo potential future exotic component"
    },
    {
        "issue_id": 382670740,
        "title": "Provide a way to pass context to renderToStaticMarkup on the client",
        "label": [
            "Type: Feature Request",
            "Component: Reconciler",
            "React Core Team"
        ],
        "date": "2018-11-20T13:47:08Z",
        "status": "closed",
        "description": "See https://github.com/facebook/react/issues/14287#issuecomment-440277999 and https://github.com/facebook/react/pull/14182#issuecomment-440125029. This accidentally worked for a few releases but was a bug. However we might want to consider actually supporting this with an opt-in API.",
        "remove_template_description": "See https://github.com/facebook/react/issues/14287#issuecomment-440277999 and https://github.com/facebook/react/pull/14182#issuecomment-440125029. This accidentally worked for a few releases but was a bug. However we might want to consider actually supporting this with an opt-in API.",
        "human_words": "See https://github.com/facebook/react/issues/14287#issuecomment-440277999 and https://github.com/facebook/react/pull/14182#issuecomment-440125029. This accidentally worked for a few releases but was a bug. However we might want to consider actually supporting this with an opt-in API.",
        "human_words_regrex": "See  and  This accidentally worked for a few releases but was a bug. However we might want to consider actually supporting this with an opt-in API.",
        "human_words_stopwords_removal_lemmatization": "see accidentally worked release bug . however might want consider actually supporting opt-in api .",
        "title_stopwords_removal_lemmatization": "provide way pas context rendertostaticmarkup client"
    },
    {
        "issue_id": 382380727,
        "title": "react-is memo",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2018-11-19T20:28:56Z",
        "status": "closed",
        "description": "Feature request\r\n\r\n**What is the current behavior?**\r\n`react-is` now doesn't have method to check if element is `memo`(like `isForwardRef`).\r\nMaybe there are some reasons why it's not implemented?\r\n",
        "remove_template_description": "Feature request    **What is the current behavior?**  `react-is` now doesn't have method to check if element is `memo`(like `isForwardRef`).  Maybe there are some reasons why it's not implemented?",
        "human_words": "Feature request    **What is the current behavior?**  `react-is` now doesn't have method to check if element is `memo`(like `isForwardRef`).  Maybe there are some reasons why it's not implemented?",
        "human_words_regrex": "Feature request **What is the current behavior?** `react-is` now doesn't have method to check if element is `memo`(like `isForwardRef`). Maybe there are some reasons why it's not implemented?",
        "human_words_stopwords_removal_lemmatization": "feature request * * current behavior ? * * ` react-is ` n't method check element ` memo ` ( like ` isforwardref ` ) . maybe reason 's implemented ?",
        "title_stopwords_removal_lemmatization": "react-is memo"
    },
    {
        "issue_id": 381703313,
        "title": "React.lazy does not allow retrying a rejected promise",
        "label": [
            "Type: Feature Request",
            "Component: Reconciler",
            "Resolution: Stale"
        ],
        "date": "2018-11-16T18:02:00Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nIt can be seen as a feature or a bug, depending on angle. Let's say it's an enhancement to how `lazy` works.\r\n\r\n**What is the current behavior?**\r\n\r\nWhen using `React.lazy`, if the given promise rejects while trying to asynchronously load a component, it's no longer possible to retry loading the component chunk because `lazy` internally caches the promise rejection.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nThis does not seem to work great in CodeSandbox because it's using service workers, which get in the way when simulating offline mode, yet this small app illustrates the issue: https://codesandbox.io/s/v8921j642l\r\n\r\n**What is the expected behavior?**\r\n\r\nA promise rejection should not be cached by `lazy` and another attempt to render the component should call the function again, giving it the chance to return a new promise.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nAFAIK all version of React that include `lazy`.\r\n",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**    It can be seen as a feature or a bug, depending on angle. Let's say it's an enhancement to how `lazy` works.    **What is the current behavior?**    When using `React.lazy`, if the given promise rejects while trying to asynchronously load a component, it's no longer possible to retry loading the component chunk because `lazy` internally caches the promise rejection.    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**    This does not seem to work great in CodeSandbox because it's using service workers, which get in the way when simulating offline mode, yet this small app illustrates the issue: https://codesandbox.io/s/v8921j642l    **What is the expected behavior?**    A promise rejection should not be cached by `lazy` and another attempt to render the component should call the function again, giving it the chance to return a new promise.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    AFAIK all version of React that include `lazy`.",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**    It can be seen as a feature or a bug, depending on angle. Let's say it's an enhancement to how `lazy` works.    **What is the current behavior?**    When using `React.lazy`, if the given promise rejects while trying to asynchronously load a component, it's no longer possible to retry loading the component chunk because `lazy` internally caches the promise rejection.    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**    This does not seem to work great in CodeSandbox because it's using service workers, which get in the way when simulating offline mode, yet this small app illustrates the issue: https://codesandbox.io/s/v8921j642l    **What is the expected behavior?**    A promise rejection should not be cached by `lazy` and another attempt to render the component should call the function again, giving it the chance to return a new promise.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    AFAIK all version of React that include `lazy`.",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** It can be seen as a feature or a bug, depending on angle. Let's say it's an enhancement to how `lazy` works. **What is the current behavior?** When using `React.lazy`, if the given promise rejects while trying to asynchronously load a component, it's no longer possible to retry loading the component chunk because `lazy` internally caches the promise rejection. **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle ( or CodeSandbox ( example below:** This does not seem to work great in CodeSandbox because it's using service workers, which get in the way when simulating offline mode, yet this small app illustrates the issue:  **What is the expected behavior?** A promise rejection should not be cached by `lazy` and another attempt to render the component should call the function again, giving it the chance to return a new promise. **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** AFAIK all version of React that include `lazy`.",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * seen feature bug , depending angle . let 's say 's enhancement ` lazy ` work . * * current behavior ? * * using ` react.lazy ` , given promise reject trying asynchronously load component , 's longer possible retry loading component chunk ` lazy ` internally cache promise rejection . * * current behavior bug , please provide step reproduce possible minimal demo problem . bug get fixed much faster run code n't dependency react . paste link jsfiddle ( codesandbox ( example : * * seem work great codesandbox 's using service worker , get way simulating offline mode , yet small app illustrates issue : * * expected behavior ? * * promise rejection cached ` lazy ` another attempt render component call function , giving chance return new promise . * * version react , browser / o affected issue ? work previous version react ? * * afaik version react include ` lazy ` .",
        "title_stopwords_removal_lemmatization": "react.lazy allow retrying rejected promise"
    },
    {
        "issue_id": 381380765,
        "title": "Support reporting Suspense loading indicator outside of the suspended tree",
        "label": [
            "Type: Feature Request",
            "Component: Suspense",
            "Resolution: Stale"
        ],
        "date": "2018-11-15T23:18:21Z",
        "status": "closed",
        "description": "Cryptic title I can imagine, but I am not aware that something like this would have been mentioned anywhere so far.\r\n\r\nI have a page showing some statistics and it's split into two even panels. The left panel is showing some numbers and contains a form to set necessary filters. The right panel is showing some other details about filtered data. Initially, only filter form is visible, nothing else.\r\n\r\nThe user sets the filter and hits the \"filter\" button to send out a request. There is a requirement to show a text loader in the left panel and the right panel should be showing content loader animation. Too many loaders perhaps? Well, it kinda makes sense in this context :)\r\n\r\nNow my confusion is how to achieve that. Obviously, I don't want each panel to run the same query on its own. I would like to do that once in the upper level. I can surely pass down the `isLoading` prop to both panels. However, I am not too happy about it, because once there will be a fully fledged data fetching relying on the Suspense, it would mean that for such scenarios I will need to fall back to a regular solution. Am I misunderstanding something in here?",
        "remove_template_description": "Cryptic title I can imagine, but I am not aware that something like this would have been mentioned anywhere so far.    I have a page showing some statistics and it's split into two even panels. The left panel is showing some numbers and contains a form to set necessary filters. The right panel is showing some other details about filtered data. Initially, only filter form is visible, nothing else.    The user sets the filter and hits the \"filter\" button to send out a request. There is a requirement to show a text loader in the left panel and the right panel should be showing content loader animation. Too many loaders perhaps? Well, it kinda makes sense in this context :)    Now my confusion is how to achieve that. Obviously, I don't want each panel to run the same query on its own. I would like to do that once in the upper level. I can surely pass down the `isLoading` prop to both panels. However, I am not too happy about it, because once there will be a fully fledged data fetching relying on the Suspense, it would mean that for such scenarios I will need to fall back to a regular solution. Am I misunderstanding something in here?",
        "human_words": "Cryptic title I can imagine, but I am not aware that something like this would have been mentioned anywhere so far.    I have a page showing some statistics and it's split into two even panels. The left panel is showing some numbers and contains a form to set necessary filters. The right panel is showing some other details about filtered data. Initially, only filter form is visible, nothing else.    The user sets the filter and hits the \"filter\" button to send out a request. There is a requirement to show a text loader in the left panel and the right panel should be showing content loader animation. Too many loaders perhaps? Well, it kinda makes sense in this context :)    Now my confusion is how to achieve that. Obviously, I don't want each panel to run the same query on its own. I would like to do that once in the upper level. I can surely pass down the `isLoading` prop to both panels. However, I am not too happy about it, because once there will be a fully fledged data fetching relying on the Suspense, it would mean that for such scenarios I will need to fall back to a regular solution. Am I misunderstanding something in here?",
        "human_words_regrex": "Cryptic title I can imagine, but I am not aware that something like this would have been mentioned anywhere so far. I have a page showing some statistics and it's split into two even panels. The left panel is showing some numbers and contains a form to set necessary filters. The right panel is showing some other details about filtered data. Initially, only filter form is visible, nothing else. The user sets the filter and hits the \"filter\" button to send out a request. There is a requirement to show a text loader in the left panel and the right panel should be showing content loader animation. Too many loaders perhaps? Well, it kinda makes sense in this context :) Now my confusion is how to achieve that. Obviously, I don't want each panel to run the same query on its own. I would like to do that once in the upper level. I can surely pass down the `isLoading` prop to both panels. However, I am not too happy about it, because once there will be a fully fledged data fetching relying on the Suspense, it would mean that for such scenarios I will need to fall back to a regular solution. Am I misunderstanding something in here?",
        "human_words_stopwords_removal_lemmatization": "cryptic title imagine , aware something like would mentioned anywhere far . page showing statistic 's split two even panel . left panel showing number contains form set necessary filter . right panel showing detail filtered data . initially , filter form visible , nothing else . user set filter hit `` filter '' button send request . requirement show text loader left panel right panel showing content loader animation . many loader perhaps ? well , kinda make sense context : ) confusion achieve . obviously , n't want panel run query . would like upper level . surely pas ` isloading ` prop panel . however , happy , fully fledged data fetching relying suspense , would mean scenario need fall back regular solution . misunderstanding something ?",
        "title_stopwords_removal_lemmatization": "support reporting suspense loading indicator outside suspended tree"
    },
    {
        "issue_id": 380352023,
        "title": "setState/dispatch 2nd arg callback or emitEffect() use case",
        "label": [
            "Type: Feature Request",
            "Component: Hooks",
            "Resolution: Stale"
        ],
        "date": "2018-11-13T17:57:45Z",
        "status": "closed",
        "description": "# Feature Request\r\n\r\n## Current Behavior\r\n\r\nuseState/useReducers Hook's updater/dispatch functions do not expose a way to execute code _after_ the update has been made.\r\n\r\n## Expected Behavior\r\n\r\nuseState or useReducer Hooks expose some way to locally execute the equivalent of inline useEffect/didUpdate etc. (to allow for overriding default side effect behavior) (e.g. emitEffect(() => ...)).\r\n\r\n## Use Case\r\n\r\nFormik exposes 2 props which control when form validation occurs: `validateOnChange` and `validateOnBlur`. When `validateOnChange` set to `true`, form validation will run whenever `handleChange`, `setFieldValue`, or `setValues` are called (these fns all update form `values`). Similarly, when `validateOnBlur` is `true`, validation will also run whenever `handleBlur`, `setFieldTouched`, and `setTouched` are called (these fns all update the `touched` state of the form). The reason that Formik doesn't centralize orchestrating validation logic into `componentDidUpdate` (i.e. run validation whenever either `this.state.values` or `this.state.touched` changes) is to allow for local overrides in custom input components.\r\n\r\nFor example, often times in a 3rd party input component (e.g. like Airbnb's Rheostat (https://github.com/airbnb/rheostat)) the value and touched state need to update together because there isn't a real \"blur\" event for the component or there isn't a prop for it. With Formik, you get around this by updating the field's value and touched state imperatively but override the validation behavior to only run once. To do this, Formik's current non-hooks API exposes an extra parameter to the `setFieldValue` and `setFieldTouched` methods which allow you to opt out of running validation after the update is made. Internally this looks like:\r\n\r\n```js\r\nsetFieldValue(name, value, shouldValidate = true) {\r\n   this.setState(prevState => setIn(prevState.values, name, value), () => {\r\n      if (this.props.validateOnChange && shouldValidate) {\r\n        this.validateForm(this.state.values)\r\n      }\r\n    })\r\n  }\r\n\r\nsetFieldTouched(name, touch = true, shouldValidate = true) {\r\n   this.setState(prevState => setIn(prevState.touched, name, touch), () => {\r\n      if (this.props.validateOnBlur && shouldValidate) {\r\n        this.validateForm(this.state.values)\r\n      }\r\n    })\r\n  }\r\n```\r\n\r\nIf a callback was supported by either `useReducer`'s `dispatch` or `useState` update fn, Formik could maintain its current API footprint and allow for the following code to work as expected:\r\n\r\n```js\r\nconst CustomRangedInput = (props) => {\r\n  const formik = useFormikContext();\r\n  function handleChangeValue(value) {\r\n    // Set the value\r\n    formik.setFieldValue(props.name, value, false /* avoid normal validation logic */)\r\n    // Mark the field as touched\r\n    formik.setFieldTouched(props.name, true)\r\n  }\r\n\r\n   return <Rheostat\r\n     onValueChange={handleChangeValue}\r\n      min={1}\r\n      max={100}\r\n      values={[1, 100]}\r\n   />;\r\n}\r\n``` \r\n\r\nHowever, with the current hooks API's there is not a way for me to expose this to users, since I have to lift update the validateOnChange/validateOnBlur validation logic to `useEffect`. In my current Formik x Hooks PR, this looks like\r\n\r\n```js\r\n React.useEffect(\r\n    () => {\r\n      if (!!didMount.current && !!validateOnChange && !state.isSubmitting) {\r\n          validateForm(state.values);\r\n      }\r\n    },\r\n    [state.values, validateOnChange, state.isSubmitting]\r\n  );\r\n\r\n React.useEffect(\r\n    () => {\r\n      if (!!didMount.current && !!validateOnBlur && !state.isSubmitting) {\r\n          validateForm(state.values);\r\n      }\r\n    },\r\n    [state.touched, validateOnBlur, state.isSubmitting]\r\n  );\r\n\r\n```\r\n\r\nThis will execute whenever `state.values` or `state.touched` change, which is usually what people want 98% of the time. However, I don't know/see a way to make this compatible with the old API (where you can locally override validation).\r\n\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.7.0-alpha\r\n",
        "remove_template_description": "# Feature Request    ## Current Behavior    useState/useReducers Hook's updater/dispatch functions do not expose a way to execute code _after_ the update has been made.    ## Expected Behavior    useState or useReducer Hooks expose some way to locally execute the equivalent of inline useEffect/didUpdate etc. (to allow for overriding default side effect behavior) (e.g. emitEffect(() => ...)).    ## Use Case    Formik exposes 2 props which control when form validation occurs: `validateOnChange` and `validateOnBlur`. When `validateOnChange` set to `true`, form validation will run whenever `handleChange`, `setFieldValue`, or `setValues` are called (these fns all update form `values`). Similarly, when `validateOnBlur` is `true`, validation will also run whenever `handleBlur`, `setFieldTouched`, and `setTouched` are called (these fns all update the `touched` state of the form). The reason that Formik doesn't centralize orchestrating validation logic into `componentDidUpdate` (i.e. run validation whenever either `this.state.values` or `this.state.touched` changes) is to allow for local overrides in custom input components.    For example, often times in a 3rd party input component (e.g. like Airbnb's Rheostat (https://github.com/airbnb/rheostat)) the value and touched state need to update together because there isn't a real \"blur\" event for the component or there isn't a prop for it. With Formik, you get around this by updating the field's value and touched state imperatively but override the validation behavior to only run once. To do this, Formik's current non-hooks API exposes an extra parameter to the `setFieldValue` and `setFieldTouched` methods which allow you to opt out of running validation after the update is made. Internally this looks like:    ```js  setFieldValue(name, value, shouldValidate = true) {     this.setState(prevState => setIn(prevState.values, name, value), () => {        if (this.props.validateOnChange && shouldValidate) {          this.validateForm(this.state.values)        }      })    }    setFieldTouched(name, touch = true, shouldValidate = true) {     this.setState(prevState => setIn(prevState.touched, name, touch), () => {        if (this.props.validateOnBlur && shouldValidate) {          this.validateForm(this.state.values)        }      })    }  ```    If a callback was supported by either `useReducer`'s `dispatch` or `useState` update fn, Formik could maintain its current API footprint and allow for the following code to work as expected:    ```js  const CustomRangedInput = (props) => {    const formik = useFormikContext();    function handleChangeValue(value) {      // Set the value      formik.setFieldValue(props.name, value, false /* avoid normal validation logic */)      // Mark the field as touched      formik.setFieldTouched(props.name, true)    }       return <Rheostat       onValueChange={handleChangeValue}        min={1}        max={100}        values={[1, 100]}     />;  }  ```     However, with the current hooks API's there is not a way for me to expose this to users, since I have to lift update the validateOnChange/validateOnBlur validation logic to `useEffect`. In my current Formik x Hooks PR, this looks like    ```js   React.useEffect(      () => {        if (!!didMount.current && !!validateOnChange && !state.isSubmitting) {            validateForm(state.values);        }      },      [state.values, validateOnChange, state.isSubmitting]    );     React.useEffect(      () => {        if (!!didMount.current && !!validateOnBlur && !state.isSubmitting) {            validateForm(state.values);        }      },      [state.touched, validateOnBlur, state.isSubmitting]    );    ```    This will execute whenever `state.values` or `state.touched` change, which is usually what people want 98% of the time. However, I don't know/see a way to make this compatible with the old API (where you can locally override validation).      **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    16.7.0-alpha",
        "human_words": "# Feature Request    ## Current Behavior    useState/useReducers Hook's updater/dispatch functions do not expose a way to execute code _after_ the update has been made.    ## Expected Behavior    useState or useReducer Hooks expose some way to locally execute the equivalent of inline useEffect/didUpdate etc. (to allow for overriding default side effect behavior) (e.g. emitEffect(() => ...)).    ## Use Case    Formik exposes 2 props which control when form validation occurs: `validateOnChange` and `validateOnBlur`. When `validateOnChange` set to `true`, form validation will run whenever `handleChange`, `setFieldValue`, or `setValues` are called (these fns all update form `values`). Similarly, when `validateOnBlur` is `true`, validation will also run whenever `handleBlur`, `setFieldTouched`, and `setTouched` are called (these fns all update the `touched` state of the form). The reason that Formik doesn't centralize orchestrating validation logic into `componentDidUpdate` (i.e. run validation whenever either `this.state.values` or `this.state.touched` changes) is to allow for local overrides in custom input components.    For example, often times in a 3rd party input component (e.g. like Airbnb's Rheostat (https://github.com/airbnb/rheostat)) the value and touched state need to update together because there isn't a real \"blur\" event for the component or there isn't a prop for it. With Formik, you get around this by updating the field's value and touched state imperatively but override the validation behavior to only run once. To do this, Formik's current non-hooks API exposes an extra parameter to the `setFieldValue` and `setFieldTouched` methods which allow you to opt out of running validation after the update is made. Internally this looks like:        If a callback was supported by either `useReducer`'s `dispatch` or `useState` update fn, Formik could maintain its current API footprint and allow for the following code to work as expected:         However, with the current hooks API's there is not a way for me to expose this to users, since I have to lift update the validateOnChange/validateOnBlur validation logic to `useEffect`. In my current Formik x Hooks PR, this looks like        This will execute whenever `state.values` or `state.touched` change, which is usually what people want 98% of the time. However, I don't know/see a way to make this compatible with the old API (where you can locally override validation).      **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    16.7.0-alpha",
        "human_words_regrex": "# Feature Request ## Current Behavior useState/useReducers Hook's updater/dispatch functions do not expose a way to execute code _after_ the update has been made. ## Expected Behavior useState or useReducer Hooks expose some way to locally execute the equivalent of inline useEffect/didUpdate etc. (to allow for overriding default side effect behavior) (e.g. emitEffect(() => ...)). ## Use Case Formik exposes 2 props which control when form validation occurs: `validateOnChange` and `validateOnBlur`. When `validateOnChange` set to `true`, form validation will run whenever `handleChange`, `setFieldValue`, or `setValues` are called (these fns all update form `values`). Similarly, when `validateOnBlur` is `true`, validation will also run whenever `handleBlur`, `setFieldTouched`, and `setTouched` are called (these fns all update the `touched` state of the form). The reason that Formik doesn't centralize orchestrating validation logic into `componentDidUpdate` (i.e. run validation whenever either `this.state.values` or `this.state.touched` changes) is to allow for local overrides in custom input components. For example, often times in a 3rd party input component (e.g. like Airbnb's Rheostat ( the value and touched state need to update together because there isn't a real \"blur\" event for the component or there isn't a prop for it. With Formik, you get around this by updating the field's value and touched state imperatively but override the validation behavior to only run once. To do this, Formik's current non-hooks API exposes an extra parameter to the `setFieldValue` and `setFieldTouched` methods which allow you to opt out of running validation after the update is made. Internally this looks like: If a callback was supported by either `useReducer`'s `dispatch` or `useState` update fn, Formik could maintain its current API footprint and allow for the following code to work as expected: However, with the current hooks API's there is not a way for me to expose this to users, since I have to lift update the validateOnChange/validateOnBlur validation logic to `useEffect`. In my current Formik x Hooks PR, this looks like This will execute whenever `state.values` or `state.touched` change, which is usually what people want 98% of the time. However, I don't know/see a way to make this compatible with the old API (where you can locally override validation). **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** 16.7.0-alpha",
        "human_words_stopwords_removal_lemmatization": "# feature request # # current behavior usestate/usereducers hook 's updater/dispatch function expose way execute code _after_ update made . # # expected behavior usestate usereducer hook expose way locally execute equivalent inline useeffect/didupdate etc . ( allow overriding default side effect behavior ) ( e.g . emiteffect ( ( ) = > ... ) ) . # # use case formik expose 2 prop control form validation occurs : ` validateonchange ` ` validateonblur ` . ` validateonchange ` set ` true ` , form validation run whenever ` handlechange ` , ` setfieldvalue ` , ` setvalues ` called ( fns update form ` value ` ) . similarly , ` validateonblur ` ` true ` , validation also run whenever ` handleblur ` , ` setfieldtouched ` , ` settouched ` called ( fns update ` touched ` state form ) . reason formik n't centralize orchestrating validation logic ` componentdidupdate ` ( i.e . run validation whenever either ` this.state.values ` ` this.state.touched ` change ) allow local override custom input component . example , often time 3rd party input component ( e.g . like airbnb 's rheostat ( value touched state need update together n't real `` blur '' event component n't prop . formik , get around updating field 's value touched state imperatively override validation behavior run . , formik 's current non-hooks api expose extra parameter ` setfieldvalue ` ` setfieldtouched ` method allow opt running validation update made . internally look like : callback supported either ` usereducer ` 's ` dispatch ` ` usestate ` update fn , formik could maintain current api footprint allow following code work expected : however , current hook api 's way expose user , since lift update validateonchange/validateonblur validation logic ` useeffect ` . current formik x hook pr , look like execute whenever ` state.values ` ` state.touched ` change , usually people want 98 % time . however , n't know/see way make compatible old api ( locally override validation ) . * * version react , browser / o affected issue ? work previous version react ? * * 16.7.0-alpha",
        "title_stopwords_removal_lemmatization": "setstate/dispatch 2nd arg callback emiteffect ( ) use case"
    },
    {
        "issue_id": 377478350,
        "title": "Synthetic KeyboardEvent should support KeyboardEvent.code",
        "label": [
            "Type: Feature Request",
            "Component: DOM",
            "good first issue (taken)"
        ],
        "date": "2018-11-05T16:28:51Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\n**What is the current behavior?**\r\nThe current synthetic keyboard event does not support the [`KeyboardEvent.code`](https://www.w3.org/TR/uievents/#dom-keyboardevent-code) property.\r\n\r\n**What is the expected behavior?**\r\nThe synthetic keyboard event should pass along the [`KeyboardEvent.code`](https://www.w3.org/TR/uievents/#dom-keyboardevent-code) property. This is currently in the WD of DOM Events but is part of replacing `keyCode` and `charCode` and is much more consistent and easy to use. This is currently only supported by FF and Chrome ([CanIUse](https://caniuse.com/#feat=keyboardevent-code)) so it may be a bit premature to fully integrate. However `keyCode`, `charCode` and `which` are being deprecated so this will eventually need to be added.\r\n\r\nEdit: I spoke too quickly, CanIUse shows that FF, Chrome, Safari and Opera support it. IE, Edge and most mobile browsers do not.\r\n",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**  Feature    **What is the current behavior?**  The current synthetic keyboard event does not support the [`KeyboardEvent.code`](https://www.w3.org/TR/uievents/#dom-keyboardevent-code) property.    **What is the expected behavior?**  The synthetic keyboard event should pass along the [`KeyboardEvent.code`](https://www.w3.org/TR/uievents/#dom-keyboardevent-code) property. This is currently in the WD of DOM Events but is part of replacing `keyCode` and `charCode` and is much more consistent and easy to use. This is currently only supported by FF and Chrome ([CanIUse](https://caniuse.com/#feat=keyboardevent-code)) so it may be a bit premature to fully integrate. However `keyCode`, `charCode` and `which` are being deprecated so this will eventually need to be added.    Edit: I spoke too quickly, CanIUse shows that FF, Chrome, Safari and Opera support it. IE, Edge and most mobile browsers do not.",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**  Feature    **What is the current behavior?**  The current synthetic keyboard event does not support the [`KeyboardEvent.code`](https://www.w3.org/TR/uievents/#dom-keyboardevent-code) property.    **What is the expected behavior?**  The synthetic keyboard event should pass along the [`KeyboardEvent.code`](https://www.w3.org/TR/uievents/#dom-keyboardevent-code) property. This is currently in the WD of DOM Events but is part of replacing `keyCode` and `charCode` and is much more consistent and easy to use. This is currently only supported by FF and Chrome ([CanIUse](https://caniuse.com/#feat=keyboardevent-code)) so it may be a bit premature to fully integrate. However `keyCode`, `charCode` and `which` are being deprecated so this will eventually need to be added.    Edit: I spoke too quickly, CanIUse shows that FF, Chrome, Safari and Opera support it. IE, Edge and most mobile browsers do not.",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** Feature **What is the current behavior?** The current synthetic keyboard event does not support the  property. **What is the expected behavior?** The synthetic keyboard event should pass along the  property. This is currently in the WD of DOM Events but is part of replacing `keyCode` and `charCode` and is much more consistent and easy to use. This is currently only supported by FF and Chrome () so it may be a bit premature to fully integrate. However `keyCode`, `charCode` and `which` are being deprecated so this will eventually need to be added. Edit: I spoke too quickly, CanIUse shows that FF, Chrome, Safari and Opera support it. IE, Edge and most mobile browsers do not.",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * feature * * current behavior ? * * current synthetic keyboard event support property . * * expected behavior ? * * synthetic keyboard event pas along property . currently wd dom event part replacing ` keycode ` ` charcode ` much consistent easy use . currently supported ff chrome ( ) may bit premature fully integrate . however ` keycode ` , ` charcode ` ` ` deprecated eventually need added . edit : spoke quickly , caniuse show ff , chrome , safari opera support . ie , edge mobile browser .",
        "title_stopwords_removal_lemmatization": "synthetic keyboardevent support keyboardevent.code"
    },
    {
        "issue_id": 376712269,
        "title": "<option> and <textarea> elements should be able to contain Components that return strings and render their output correctly",
        "label": [
            "Type: Feature Request",
            "Resolution: Stale"
        ],
        "date": "2018-11-02T08:27:15Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature request\r\n\r\n**What is the current behavior?**\r\n\r\nIf you use a Component that returns a string inside an option or textarea element, the Component will be rendered as '[object Object]'\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://jsfiddle.net/38tz0ym2/\r\n\r\n**What is the expected behavior?**\r\n\r\nThe string returned by the component should be rendered as the elements innerHTML.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nThis was working accidentally in react v16.0.0 - v16.4.2 but was apparently buggy and crash prone. It no longer works at all in react v16.6.0",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**    Feature request    **What is the current behavior?**    If you use a Component that returns a string inside an option or textarea element, the Component will be rendered as '[object Object]'    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**    https://jsfiddle.net/38tz0ym2/    **What is the expected behavior?**    The string returned by the component should be rendered as the elements innerHTML.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    This was working accidentally in react v16.0.0 - v16.4.2 but was apparently buggy and crash prone. It no longer works at all in react v16.6.0",
        "human_words": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**    Feature request    **What is the current behavior?**    If you use a Component that returns a string inside an option or textarea element, the Component will be rendered as '[object Object]'    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**    https://jsfiddle.net/38tz0ym2/    **What is the expected behavior?**    The string returned by the component should be rendered as the elements innerHTML.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    This was working accidentally in react v16.0.0 - v16.4.2 but was apparently buggy and crash prone. It no longer works at all in react v16.6.0",
        "human_words_regrex": " **Do you want to request a *feature* or report a *bug*?** Feature request **What is the current behavior?** If you use a Component that returns a string inside an option or textarea element, the Component will be rendered as '[object Object]' **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle ( or CodeSandbox ( example below:**  **What is the expected behavior?** The string returned by the component should be rendered as the elements innerHTML. **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** This was working accidentally in react v16.0.0 - v16.4.2 but was apparently buggy and crash prone. It no longer works at all in react v16.6.0",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * feature request * * current behavior ? * * use component return string inside option textarea element , component rendered ' [ object object ] ' * * current behavior bug , please provide step reproduce possible minimal demo problem . bug get fixed much faster run code n't dependency react . paste link jsfiddle ( codesandbox ( example : * * * * expected behavior ? * * string returned component rendered element innerhtml . * * version react , browser / o affected issue ? work previous version react ? * * working accidentally react v16.0.0 - v16.4.2 apparently buggy crash prone . longer work react v16.6.0",
        "title_stopwords_removal_lemmatization": "< option > < textarea > element able contain component return string render output correctly"
    },
    {
        "issue_id": 376175397,
        "title": "Provide a way to trigger useEffect from tests",
        "label": [
            "Type: Feature Request",
            "Component: Test Renderer",
            "Component: Hooks"
        ],
        "date": "2018-10-31T21:53:53Z",
        "status": "closed",
        "description": "Hello,\r\n\r\nI tried testing components that use the cool new hooks API, but `useEffect` doesn't seem to work with the test renderer.\r\n\r\nHere's a small failling Jest test:\r\n\r\n```js\r\nimport React, { useEffect } from \"react\";\r\nimport { create as render } from \"react-test-renderer\";\r\n\r\nit(\"calls effect\", () => {\r\n  return new Promise(resolve => {\r\n    render(<EffectfulComponent effect={resolve} />);\r\n  });\r\n});\r\n\r\nfunction EffectfulComponent({ effect }) {\r\n  useEffect(effect);\r\n\r\n  return null;\r\n}\r\n```\r\n\r\nAnd here's a minimal reproducing repo: https://github.com/skidding/react-test-useeffect\r\n\r\n> Note that other _use_ APIs seemed to work (eg. `useContext`).",
        "remove_template_description": "Hello,    I tried testing components that use the cool new hooks API, but `useEffect` doesn't seem to work with the test renderer.    Here's a small failling Jest test:    ```js  import React, { useEffect } from \"react\";  import { create as render } from \"react-test-renderer\";    it(\"calls effect\", () => {    return new Promise(resolve => {      render(<EffectfulComponent effect={resolve} />);    });  });    function EffectfulComponent({ effect }) {    useEffect(effect);      return null;  }  ```    And here's a minimal reproducing repo: https://github.com/skidding/react-test-useeffect    > Note that other _use_ APIs seemed to work (eg. `useContext`).",
        "human_words": "Hello,    I tried testing components that use the cool new hooks API, but `useEffect` doesn't seem to work with the test renderer.    Here's a small failling Jest test:        And here's a minimal reproducing repo: https://github.com/skidding/react-test-useeffect    > Note that other _use_ APIs seemed to work (eg. `useContext`).",
        "human_words_regrex": "Hello, I tried testing components that use the cool new hooks API, but `useEffect` doesn't seem to work with the test renderer. Here's a small failling Jest test: And here's a minimal reproducing repo:  > Note that other _use_ APIs seemed to work (eg. `useContext`).",
        "human_words_stopwords_removal_lemmatization": "hello , tried testing component use cool new hook api , ` useeffect ` n't seem work test renderer . 's small failling jest test : 's minimal reproducing repo : > note _use_ apis seemed work ( eg . ` usecontext ` ) .",
        "title_stopwords_removal_lemmatization": "provide way trigger useeffect test"
    },
    {
        "issue_id": 374212134,
        "title": "More helpful interaction for \"React does not recognize the 'propName' prop on a DOM Element\"",
        "label": [
            "Type: Feature Request",
            "Resolution: Needs More Information",
            "Resolution: Stale"
        ],
        "date": "2018-10-26T03:24:35Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature\r\n\r\n**What is the current behavior?**\r\n\r\nWhen you pass a unknown prop to a DOM element - common when you pass `{...props}` to something that turns out to be a div/span/any other DOM element rather than a composite component - you get a warning like so:\r\n\r\n```Warning: React does not recognize the `propName` prop on a DOM element. ....```\r\n\r\nIf the tree is pretty complicated, especially if you're using HOCs, it can be very hard to find where this prop has been passed and to which DOM element. \r\n\r\n**What is the expected behavior?**\r\n\r\nWe had a quick muck around with react-dom and logging the DOM element that triggers this warning allows you to see the element in the DOM and makes it much easier to work out where the prop is being accidentally passed. You can even use the react dev tools to work out exactly which line the component is defined in the code.\r\n\r\nSimply logging the element is obviously not the most elegant way of showing the user where the mistake is, but would it be possible to do _something_ in order to make it quicker to fix mistaken prop passing like this?\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nAll.",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**    Feature    **What is the current behavior?**    When you pass a unknown prop to a DOM element - common when you pass `{...props}` to something that turns out to be a div/span/any other DOM element rather than a composite component - you get a warning like so:    ```Warning: React does not recognize the `propName` prop on a DOM element. ....```    If the tree is pretty complicated, especially if you're using HOCs, it can be very hard to find where this prop has been passed and to which DOM element.     **What is the expected behavior?**    We had a quick muck around with react-dom and logging the DOM element that triggers this warning allows you to see the element in the DOM and makes it much easier to work out where the prop is being accidentally passed. You can even use the react dev tools to work out exactly which line the component is defined in the code.    Simply logging the element is obviously not the most elegant way of showing the user where the mistake is, but would it be possible to do _something_ in order to make it quicker to fix mistaken prop passing like this?    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    All.",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**    Feature    **What is the current behavior?**    When you pass a unknown prop to a DOM element - common when you pass `{...props}` to something that turns out to be a div/span/any other DOM element rather than a composite component - you get a warning like so:        If the tree is pretty complicated, especially if you're using HOCs, it can be very hard to find where this prop has been passed and to which DOM element.     **What is the expected behavior?**    We had a quick muck around with react-dom and logging the DOM element that triggers this warning allows you to see the element in the DOM and makes it much easier to work out where the prop is being accidentally passed. You can even use the react dev tools to work out exactly which line the component is defined in the code.    Simply logging the element is obviously not the most elegant way of showing the user where the mistake is, but would it be possible to do _something_ in order to make it quicker to fix mistaken prop passing like this?    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    All.",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** Feature **What is the current behavior?** When you pass a unknown prop to a DOM element - common when you pass `{...props}` to something that turns out to be a div/span/any other DOM element rather than a composite component - you get a warning like so: If the tree is pretty complicated, especially if you're using HOCs, it can be very hard to find where this prop has been passed and to which DOM element. **What is the expected behavior?** We had a quick muck around with react-dom and logging the DOM element that triggers this warning allows you to see the element in the DOM and makes it much easier to work out where the prop is being accidentally passed. You can even use the react dev tools to work out exactly which line the component is defined in the code. Simply logging the element is obviously not the most elegant way of showing the user where the mistake is, but would it be possible to do _something_ in order to make it quicker to fix mistaken prop passing like this? **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** All.",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * feature * * current behavior ? * * pas unknown prop dom element - common pas ` { ... prop } ` something turn div/span/any dom element rather composite component - get warning like : tree pretty complicated , especially 're using hocs , hard find prop passed dom element . * * expected behavior ? * * quick muck around react-dom logging dom element trigger warning allows see element dom make much easier work prop accidentally passed . even use react dev tool work exactly line component defined code . simply logging element obviously elegant way showing user mistake , would possible _something_ order make quicker fix mistaken prop passing like ? * * version react , browser / o affected issue ? work previous version react ? * * .",
        "title_stopwords_removal_lemmatization": "helpful interaction `` react recognize 'propname ' prop dom element ''"
    },
    {
        "issue_id": 374044177,
        "title": "16.6 contextType + getDerivedStateFromProps",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2018-10-25T17:04:42Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?** Feature\r\n\r\n**What is the current behavior?**\r\n\r\nContext not passed into getDerivedStateFromProps:\r\n\r\n```\r\nstatic getDerivedStateFromProps(props, state, context) {}\r\n```\r\n\r\nJust curious with the new `static contextType`, it would save a lot of nesting if I could access context now from getDerivedStateFromProps when using this pattern. I gave it a shot assuming it may work already but I get undefined from the third argument.\r\n\r\nJust curious if there's been any discussion on this.",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?** Feature    **What is the current behavior?**    Context not passed into getDerivedStateFromProps:    ```  static getDerivedStateFromProps(props, state, context) {}  ```    Just curious with the new `static contextType`, it would save a lot of nesting if I could access context now from getDerivedStateFromProps when using this pattern. I gave it a shot assuming it may work already but I get undefined from the third argument.    Just curious if there's been any discussion on this.",
        "human_words": "**Do you want to request a *feature* or report a *bug*?** Feature    **What is the current behavior?**    Context not passed into getDerivedStateFromProps:        Just curious with the new `static contextType`, it would save a lot of nesting if I could access context now from getDerivedStateFromProps when using this pattern. I gave it a shot assuming it may work already but I get undefined from the third argument.    Just curious if there's been any discussion on this.",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** Feature **What is the current behavior?** Context not passed into getDerivedStateFromProps: Just curious with the new `static contextType`, it would save a lot of nesting if I could access context now from getDerivedStateFromProps when using this pattern. I gave it a shot assuming it may work already but I get undefined from the third argument. Just curious if there's been any discussion on this.",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * feature * * current behavior ? * * context passed getderivedstatefromprops : curious new ` static contexttype ` , would save lot nesting could access context getderivedstatefromprops using pattern . gave shot assuming may work already get undefined third argument . curious 's discussion .",
        "title_stopwords_removal_lemmatization": "16.6 contexttype + getderivedstatefromprops"
    },
    {
        "issue_id": 373616895,
        "title": "Receive previous state in getDerivedStateFromError",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2018-10-24T18:28:10Z",
        "status": "open",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nThis is feature request.\r\n\r\n**What is the current behavior?**\r\n\r\n`getDerivedStateFromError` hook receives `error` and doesn't have access to `state` or component instance. This limits possible ways in which it could be used and requires to additionally use other hooks to derive the state:\r\n\r\n```js\r\nclass App extends Component {\r\n  state = {}\r\n\r\n  static getDerivedStateFromError(error) {\r\n    return { error }\r\n  }\r\n\r\n  static getDerivedStateFromProps(props, state) {\r\n    // do we really need this?\r\n    // the state is derived from error, not props\r\n    if (state.error)\r\n      return remapStateToPreferredStructure(state);\r\n  }\r\n\r\n  render() { /* ... */ }\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\n`getDerivedStateFromError` is expected to receive previous state and have\r\n\r\n```\r\ngetDerivedStateFromError(error, state)\r\n```\r\nsignature to be consistent with related static hook, `getDerivedStateFromProps`. This `getDerivedStateFromError` signature is backward compatible with existing one (React 16.6.0).\r\n\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.6.0\r\n",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**    This is feature request.    **What is the current behavior?**    `getDerivedStateFromError` hook receives `error` and doesn't have access to `state` or component instance. This limits possible ways in which it could be used and requires to additionally use other hooks to derive the state:    ```js  class App extends Component {    state = {}      static getDerivedStateFromError(error) {      return { error }    }      static getDerivedStateFromProps(props, state) {      // do we really need this?      // the state is derived from error, not props      if (state.error)        return remapStateToPreferredStructure(state);    }      render() { /* ... */ }  }  ```    **What is the expected behavior?**    `getDerivedStateFromError` is expected to receive previous state and have    ```  getDerivedStateFromError(error, state)  ```  signature to be consistent with related static hook, `getDerivedStateFromProps`. This `getDerivedStateFromError` signature is backward compatible with existing one (React 16.6.0).      **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    React 16.6.0",
        "human_words": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**    This is feature request.    **What is the current behavior?**    `getDerivedStateFromError` hook receives `error` and doesn't have access to `state` or component instance. This limits possible ways in which it could be used and requires to additionally use other hooks to derive the state:        **What is the expected behavior?**    `getDerivedStateFromError` is expected to receive previous state and have      signature to be consistent with related static hook, `getDerivedStateFromProps`. This `getDerivedStateFromError` signature is backward compatible with existing one (React 16.6.0).      **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    React 16.6.0",
        "human_words_regrex": " **Do you want to request a *feature* or report a *bug*?** This is feature request. **What is the current behavior?** `getDerivedStateFromError` hook receives `error` and doesn't have access to `state` or component instance. This limits possible ways in which it could be used and requires to additionally use other hooks to derive the state: **What is the expected behavior?** `getDerivedStateFromError` is expected to receive previous state and have signature to be consistent with related static hook, `getDerivedStateFromProps`. This `getDerivedStateFromError` signature is backward compatible with existing one (React 16.6.0). **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** React 16.6.0",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * feature request . * * current behavior ? * * ` getderivedstatefromerror ` hook receives ` error ` n't access ` state ` component instance . limit possible way could used requires additionally use hook derive state : * * expected behavior ? * * ` getderivedstatefromerror ` expected receive previous state signature consistent related static hook , ` getderivedstatefromprops ` . ` getderivedstatefromerror ` signature backward compatible existing one ( react 16.6.0 ) . * * version react , browser / o affected issue ? work previous version react ? * * react 16.6.0",
        "title_stopwords_removal_lemmatization": "receive previous state getderivedstatefromerror"
    },
    {
        "issue_id": 369115492,
        "title": "Support for classList",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2018-10-11T13:14:18Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nfeature\r\n\r\n**What is the current behavior?**\r\n\r\nOnly `className` exists right now.\r\n\r\n**What is the expected behavior?**\r\n\r\nI think adding `classList` property for DOM elements would be useful. As far as I understand React Fire will drop support for IE11 but even in IE11, you can add or remove classList from elements.\r\n\r\nAnother idea might be adding support for for array type for `className` (or future `class`, which will make more sense because array). If array is passed, `classList` will be used for DOM elements. Otherwise, `className` is used as usual in the real DOM side.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nAll versions. I hope this is added in React Fire.",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**    feature    **What is the current behavior?**    Only `className` exists right now.    **What is the expected behavior?**    I think adding `classList` property for DOM elements would be useful. As far as I understand React Fire will drop support for IE11 but even in IE11, you can add or remove classList from elements.    Another idea might be adding support for for array type for `className` (or future `class`, which will make more sense because array). If array is passed, `classList` will be used for DOM elements. Otherwise, `className` is used as usual in the real DOM side.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    All versions. I hope this is added in React Fire.",
        "human_words": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**    feature    **What is the current behavior?**    Only `className` exists right now.    **What is the expected behavior?**    I think adding `classList` property for DOM elements would be useful. As far as I understand React Fire will drop support for IE11 but even in IE11, you can add or remove classList from elements.    Another idea might be adding support for for array type for `className` (or future `class`, which will make more sense because array). If array is passed, `classList` will be used for DOM elements. Otherwise, `className` is used as usual in the real DOM side.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    All versions. I hope this is added in React Fire.",
        "human_words_regrex": " **Do you want to request a *feature* or report a *bug*?** feature **What is the current behavior?** Only `className` exists right now. **What is the expected behavior?** I think adding `classList` property for DOM elements would be useful. As far as I understand React Fire will drop support for IE11 but even in IE11, you can add or remove classList from elements. Another idea might be adding support for for array type for `className` (or future `class`, which will make more sense because array). If array is passed, `classList` will be used for DOM elements. Otherwise, `className` is used as usual in the real DOM side. **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** All versions. I hope this is added in React Fire.",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * feature * * current behavior ? * * ` classname ` exists right . * * expected behavior ? * * think adding ` classlist ` property dom element would useful . far understand react fire drop support ie11 even ie11 , add remove classlist element . another idea might adding support array type ` classname ` ( future ` class ` , make sense array ) . array passed , ` classlist ` used dom element . otherwise , ` classname ` used usual real dom side . * * version react , browser / o affected issue ? work previous version react ? * * version . hope added react fire .",
        "title_stopwords_removal_lemmatization": "support classlist"
    },
    {
        "issue_id": 366309628,
        "title": "Conditional Components",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2018-10-03T12:13:22Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\nFeature\r\n\r\n**What is the current behavior?**\r\n\r\nOften we will use expressions like this:\r\n\r\n`{ !x ? null : <Component title={x.title} /> }`\r\n\r\n**What is the desired behavior?**\r\n\r\nWe would like to have expressive components such as\r\n\r\n```\r\n<When c={x}>\r\n   <Component title={x.title} />\r\n</When>\r\n```\r\n\r\nIn many cases this generic syntax is preferred over an explicit child component or pure function which knows about what it is supposed to render.\r\n\r\nThe issue is that this will evaluate the children, even if they ultimately are not returned (since they are passed as children to the When component).\r\n\r\nWhat is desired is for the syntax above to be able to behave exactly like a conditional expression, in that the contained children are not actually processed at all unless a condition is met.  In reality the component could be something else entirely such as `<SuperUser />` which will only process and render the children if the current user is a super user, or `<Morning />` to only process and render items between 8 AM and 11 AM (or similar).  The key thing is that we do not want the props passed into the children, or the children themselves produced, unless a condition has been satisfied.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nPresumably any version of React.",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    Feature    **What is the current behavior?**    Often we will use expressions like this:    `{ !x ? null : <Component title={x.title} /> }`    **What is the desired behavior?**    We would like to have expressive components such as    ```  <When c={x}>     <Component title={x.title} />  </When>  ```    In many cases this generic syntax is preferred over an explicit child component or pure function which knows about what it is supposed to render.    The issue is that this will evaluate the children, even if they ultimately are not returned (since they are passed as children to the When component).    What is desired is for the syntax above to be able to behave exactly like a conditional expression, in that the contained children are not actually processed at all unless a condition is met.  In reality the component could be something else entirely such as `<SuperUser />` which will only process and render the children if the current user is a super user, or `<Morning />` to only process and render items between 8 AM and 11 AM (or similar).  The key thing is that we do not want the props passed into the children, or the children themselves produced, unless a condition has been satisfied.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    Presumably any version of React.",
        "human_words": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    Feature    **What is the current behavior?**    Often we will use expressions like this:    `{ !x ? null : <Component title={x.title} /> }`    **What is the desired behavior?**    We would like to have expressive components such as        In many cases this generic syntax is preferred over an explicit child component or pure function which knows about what it is supposed to render.    The issue is that this will evaluate the children, even if they ultimately are not returned (since they are passed as children to the When component).    What is desired is for the syntax above to be able to behave exactly like a conditional expression, in that the contained children are not actually processed at all unless a condition is met.  In reality the component could be something else entirely such as `<SuperUser />` which will only process and render the children if the current user is a super user, or `<Morning />` to only process and render items between 8 AM and 11 AM (or similar).  The key thing is that we do not want the props passed into the children, or the children themselves produced, unless a condition has been satisfied.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    Presumably any version of React.",
        "human_words_regrex": " Feature **What is the current behavior?** Often we will use expressions like this: `{ !x ? null :  }` **What is the desired behavior?** We would like to have expressive components such as In many cases this generic syntax is preferred over an explicit child component or pure function which knows about what it is supposed to render. The issue is that this will evaluate the children, even if they ultimately are not returned (since they are passed as children to the When component). What is desired is for the syntax above to be able to behave exactly like a conditional expression, in that the contained children are not actually processed at all unless a condition is met. In reality the component could be something else entirely such as `` which will only process and render the children if the current user is a super user, or `` to only process and render items between 8 AM and 11 AM (or similar). The key thing is that we do not want the props passed into the children, or the children themselves produced, unless a condition has been satisfied. **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** Presumably any version of React.",
        "human_words_stopwords_removal_lemmatization": "feature * * current behavior ? * * often use expression like : ` { ! x ? null : } ` * * desired behavior ? * * would like expressive component many case generic syntax preferred explicit child component pure function know supposed render . issue evaluate child , even ultimately returned ( since passed child component ) . desired syntax able behave exactly like conditional expression , contained child actually processed unless condition met . reality component could something else entirely `` process render child current user super user , `` process render item 8 11 ( similar ) . key thing want prop passed child , child produced , unless condition satisfied . * * version react , browser / o affected issue ? work previous version react ? * * presumably version react .",
        "title_stopwords_removal_lemmatization": "conditional component"
    },
    {
        "issue_id": 362425854,
        "title": "Accessing ReactDebugCurrentFrame without using __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED",
        "label": [
            "Type: Feature Request",
            "Resolution: Stale"
        ],
        "date": "2018-09-21T01:39:46Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\nRequest a feature.\r\n\r\n**What is the current behavior?**\r\nI am working on writing a custom React renderer (https://github.com/toxicFork/react-three-renderer-fiber) and right now I have to use `React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED` in order to access stack information for the current frame in order to display warnings for the developer (https://github.com/Methuselah96/react-three-renderer-fiber/blob/react-reconciler/src/core/customRenderer/descriptors/CustomDescriptor.ts#L102).\r\n\r\n**What is the expected behavior?**\r\nI would like to be able to access the stack information for the current frame without worrying for the safety of my employment. Is there a better way for me to be doing this?\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact 16.5.2",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**  Request a feature.    **What is the current behavior?**  I am working on writing a custom React renderer (https://github.com/toxicFork/react-three-renderer-fiber) and right now I have to use `React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED` in order to access stack information for the current frame in order to display warnings for the developer (https://github.com/Methuselah96/react-three-renderer-fiber/blob/react-reconciler/src/core/customRenderer/descriptors/CustomDescriptor.ts#L102).    **What is the expected behavior?**  I would like to be able to access the stack information for the current frame without worrying for the safety of my employment. Is there a better way for me to be doing this?    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  React 16.5.2",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**  Request a feature.    **What is the current behavior?**  I am working on writing a custom React renderer (https://github.com/toxicFork/react-three-renderer-fiber) and right now I have to use `React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED` in order to access stack information for the current frame in order to display warnings for the developer (https://github.com/Methuselah96/react-three-renderer-fiber/blob/react-reconciler/src/core/customRenderer/descriptors/CustomDescriptor.ts#L102).    **What is the expected behavior?**  I would like to be able to access the stack information for the current frame without worrying for the safety of my employment. Is there a better way for me to be doing this?    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  React 16.5.2",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** Request a feature. **What is the current behavior?** I am working on writing a custom React renderer ( and right now I have to use `React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED` in order to access stack information for the current frame in order to display warnings for the developer ( **What is the expected behavior?** I would like to be able to access the stack information for the current frame without worrying for the safety of my employment. Is there a better way for me to be doing this? **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** React 16.5.2",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * request feature . * * current behavior ? * * working writing custom react renderer ( right use ` react.__secret_internals_do_not_use_or_you_will_be_fired ` order access stack information current frame order display warning developer ( * * expected behavior ? * * would like able access stack information current frame without worrying safety employment . better way ? * * version react , browser / o affected issue ? work previous version react ? * * react 16.5.2",
        "title_stopwords_removal_lemmatization": "accessing reactdebugcurrentframe without using __secret_internals_do_not_use_or_you_will_be_fired"
    },
    {
        "issue_id": 360969358,
        "title": "Is it possible to use Profiler server side?",
        "label": [
            "Type: Feature Request",
            "Component: Server Rendering",
            "Resolution: Stale"
        ],
        "date": "2018-09-17T17:32:15Z",
        "status": "closed",
        "description": "I'm trying to use the Profiler server side rendering with `renderToString` but the onRender callbacks are not getting called.\r\n\r\nIs there a way to do it?\r\nI'm using 16.5.1, NODE_ENV === \"development\".\r\n\r\nMy code looks like this, works fine client side:\r\n```javascript\r\nimport React, { unstable_Profiler } from 'react';\r\n\r\nconst profilerCallback = (id, phase, actualTime, baseTime, startTime, commitTime) => {\r\n        console.log(`${id}'s ${phase} phase:`);\r\n        console.log(`Actual time: ${actualTime}`);\r\n        console.log(`Base time: ${baseTime}`);\r\n        console.log(`Start time: ${startTime}`);\r\n        console.log(`Commit time: ${commitTime}`);\r\n};\r\n\r\nconst MyComponent = () => (\r\n    <Profiler id=\"card\" onRender={profilerCallback}>\r\n        ...\r\n    </Profiler>\r\n)\r\n```",
        "remove_template_description": "I'm trying to use the Profiler server side rendering with `renderToString` but the onRender callbacks are not getting called.    Is there a way to do it?  I'm using 16.5.1, NODE_ENV === \"development\".    My code looks like this, works fine client side:  ```javascript  import React, { unstable_Profiler } from 'react';    const profilerCallback = (id, phase, actualTime, baseTime, startTime, commitTime) => {          console.log(`${id}'s ${phase} phase:`);          console.log(`Actual time: ${actualTime}`);          console.log(`Base time: ${baseTime}`);          console.log(`Start time: ${startTime}`);          console.log(`Commit time: ${commitTime}`);  };    const MyComponent = () => (      <Profiler id=\"card\" onRender={profilerCallback}>          ...      </Profiler>  )  ```",
        "human_words": "I'm trying to use the Profiler server side rendering with `renderToString` but the onRender callbacks are not getting called.    Is there a way to do it?  I'm using 16.5.1, NODE_ENV === \"development\".    My code looks like this, works fine client side:  ",
        "human_words_regrex": "I'm trying to use the Profiler server side rendering with `renderToString` but the onRender callbacks are not getting called. Is there a way to do it? I'm using 16.5.1, NODE_ENV === \"development\". My code looks like this, works fine client side: ",
        "human_words_stopwords_removal_lemmatization": "'m trying use profiler server side rendering ` rendertostring ` onrender callback getting called . way ? 'm using 16.5.1 , node_env === `` development '' . code look like , work fine client side :",
        "title_stopwords_removal_lemmatization": "possible use profiler server side ?"
    },
    {
        "issue_id": 356558303,
        "title": "Make possible to get component stack or at least its hash",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2018-09-03T16:20:27Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\n*feature*\r\n\r\n**What is the current behavior?**\r\n\r\nThere is no good way to get the a list of component parents. The only way to do it is to wrap the rendered component to an error boundary, throw a dummy error and pass `componentStack` to the rendered component without throwing the error again.\r\n\r\n![image](https://user-images.githubusercontent.com/1082083/44995658-cb9b7a00-afac-11e8-83da-6b60f6edb6e6.png)\r\n\r\nUnfortunately the idea of hiding thrown errors was refused (see https://github.com/facebook/react/issues/11098) so this experimental hack isn't useful. \r\n\r\n**What is the expected behavior?**\r\n\r\nI'd like to deterministically identify components at DOM tree and use this data to assign persistent data to it without using any custom identifiers. For example store visibility state for a specific component at window.localStorage. \r\n\r\nRelated to https://github.com/facebook/react/issues/1137\r\n",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**    *feature*    **What is the current behavior?**    There is no good way to get the a list of component parents. The only way to do it is to wrap the rendered component to an error boundary, throw a dummy error and pass `componentStack` to the rendered component without throwing the error again.    ![image](https://user-images.githubusercontent.com/1082083/44995658-cb9b7a00-afac-11e8-83da-6b60f6edb6e6.png)    Unfortunately the idea of hiding thrown errors was refused (see https://github.com/facebook/react/issues/11098) so this experimental hack isn't useful.     **What is the expected behavior?**    I'd like to deterministically identify components at DOM tree and use this data to assign persistent data to it without using any custom identifiers. For example store visibility state for a specific component at window.localStorage.     Related to https://github.com/facebook/react/issues/1137",
        "human_words": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**    *feature*    **What is the current behavior?**    There is no good way to get the a list of component parents. The only way to do it is to wrap the rendered component to an error boundary, throw a dummy error and pass `componentStack` to the rendered component without throwing the error again.    ![image](https://user-images.githubusercontent.com/1082083/44995658-cb9b7a00-afac-11e8-83da-6b60f6edb6e6.png)    Unfortunately the idea of hiding thrown errors was refused (see https://github.com/facebook/react/issues/11098) so this experimental hack isn't useful.     **What is the expected behavior?**    I'd like to deterministically identify components at DOM tree and use this data to assign persistent data to it without using any custom identifiers. For example store visibility state for a specific component at window.localStorage.     Related to https://github.com/facebook/react/issues/1137",
        "human_words_regrex": " **Do you want to request a *feature* or report a *bug*?** *feature* **What is the current behavior?** There is no good way to get the a list of component parents. The only way to do it is to wrap the rendered component to an error boundary, throw a dummy error and pass `componentStack` to the rendered component without throwing the error again. ! Unfortunately the idea of hiding thrown errors was refused (see  so this experimental hack isn't useful. **What is the expected behavior?** I'd like to deterministically identify components at DOM tree and use this data to assign persistent data to it without using any custom identifiers. For example store visibility state for a specific component at window.localStorage. Related to ",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * * feature * * * current behavior ? * * good way get list component parent . way wrap rendered component error boundary , throw dummy error pas ` componentstack ` rendered component without throwing error . ! unfortunately idea hiding thrown error refused ( see experimental hack n't useful . * * expected behavior ? * * 'd like deterministically identify component dom tree use data assign persistent data without using custom identifier . example store visibility state specific component window.localstorage . related",
        "title_stopwords_removal_lemmatization": "make possible get component stack least hash"
    },
    {
        "issue_id": 351917796,
        "title": "Cache Provider: Add hooks to read and preload in dev mode",
        "label": [
            "Type: Feature Request",
            "Resolution: Stale"
        ],
        "date": "2018-08-19T16:58:06Z",
        "status": "closed",
        "description": "This topic originally came up in a `react-devtools` discussion: https://github.com/facebook/react-devtools/issues/1099#issuecomment-414138771.\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\n**What is the current behavior?**\r\nThe package `simple-cache-provider` does not presently provide hooks to understand when we've pulled a resource for the first time, hit the cache, or dropped something from the cache due to `MAX_SIZE`.\r\n\r\nDue to this, tools such as `react-devtools` cannot provide an interface around our cached resources which makes debugging / inspection harder.\r\n\r\n**What is the expected behavior?**\r\nIt would be great if there was a way to expose callbacks / events for when the cache resource has resolved. An idea would be to fire these callbacks / events in the existing switch statement in `read` / `preload` if we are in `__DEV__` mode.\r\n\r\nWith this information we could have a \"redux-devtools\"-esque interface to better understand where our data is coming from and when we're hitting the cache in dev mode.\r\n\r\nTools like this would also be useful to people new to the Suspend API to visually see their resources transition between the various record states.\r\n\r\n",
        "remove_template_description": "This topic originally came up in a `react-devtools` discussion: https://github.com/facebook/react-devtools/issues/1099#issuecomment-414138771.    **Do you want to request a *feature* or report a *bug*?**  Feature    **What is the current behavior?**  The package `simple-cache-provider` does not presently provide hooks to understand when we've pulled a resource for the first time, hit the cache, or dropped something from the cache due to `MAX_SIZE`.    Due to this, tools such as `react-devtools` cannot provide an interface around our cached resources which makes debugging / inspection harder.    **What is the expected behavior?**  It would be great if there was a way to expose callbacks / events for when the cache resource has resolved. An idea would be to fire these callbacks / events in the existing switch statement in `read` / `preload` if we are in `__DEV__` mode.    With this information we could have a \"redux-devtools\"-esque interface to better understand where our data is coming from and when we're hitting the cache in dev mode.    Tools like this would also be useful to people new to the Suspend API to visually see their resources transition between the various record states.",
        "human_words": "This topic originally came up in a `react-devtools` discussion: https://github.com/facebook/react-devtools/issues/1099#issuecomment-414138771.    **Do you want to request a *feature* or report a *bug*?**  Feature    **What is the current behavior?**  The package `simple-cache-provider` does not presently provide hooks to understand when we've pulled a resource for the first time, hit the cache, or dropped something from the cache due to `MAX_SIZE`.    Due to this, tools such as `react-devtools` cannot provide an interface around our cached resources which makes debugging / inspection harder.    **What is the expected behavior?**  It would be great if there was a way to expose callbacks / events for when the cache resource has resolved. An idea would be to fire these callbacks / events in the existing switch statement in `read` / `preload` if we are in `__DEV__` mode.    With this information we could have a \"redux-devtools\"-esque interface to better understand where our data is coming from and when we're hitting the cache in dev mode.    Tools like this would also be useful to people new to the Suspend API to visually see their resources transition between the various record states.",
        "human_words_regrex": "This topic originally came up in a `react-devtools` discussion:  **Do you want to request a *feature* or report a *bug*?** Feature **What is the current behavior?** The package `simple-cache-provider` does not presently provide hooks to understand when we've pulled a resource for the first time, hit the cache, or dropped something from the cache due to `MAX_SIZE`. Due to this, tools such as `react-devtools` cannot provide an interface around our cached resources which makes debugging / inspection harder. **What is the expected behavior?** It would be great if there was a way to expose callbacks / events for when the cache resource has resolved. An idea would be to fire these callbacks / events in the existing switch statement in `read` / `preload` if we are in `__DEV__` mode. With this information we could have a \"redux-devtools\"-esque interface to better understand where our data is coming from and when we're hitting the cache in dev mode. Tools like this would also be useful to people new to the Suspend API to visually see their resources transition between the various record states.",
        "human_words_stopwords_removal_lemmatization": "topic originally came ` react-devtools ` discussion : * * want request * feature * report * bug * ? * * feature * * current behavior ? * * package ` simple-cache-provider ` presently provide hook understand 've pulled resource first time , hit cache , dropped something cache due ` max_size ` . due , tool ` react-devtools ` provide interface around cached resource make debugging / inspection harder . * * expected behavior ? * * would great way expose callback / event cache resource resolved . idea would fire callback / event existing switch statement ` read ` / ` preload ` ` __dev__ ` mode . information could `` redux-devtools '' -esque interface better understand data coming 're hitting cache dev mode . tool like would also useful people new suspend api visually see resource transition various record state .",
        "title_stopwords_removal_lemmatization": "cache provider : add hook read preload dev mode"
    },
    {
        "issue_id": 351025162,
        "title": "KeyboardEvent.repeat is not normalized",
        "label": [
            "Type: Feature Request",
            "Component: DOM",
            "Type: Needs Investigation",
            "Resolution: Stale"
        ],
        "date": "2018-08-16T01:41:06Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nDocumentation of SyntheticEvent claims: \"React normalizes events so that they have consistent properties across different browsers.\" https://reactjs.org/docs/events.html#supported-events\r\n\r\nDocumentation of Keyboard Events lists `boolean repeat` as a supported field: https://reactjs.org/docs/events.html#keyboard-events\r\n\r\nIE11/Edge do not natively support `repeat`, but React does not normalize the event to set `repeat: true` when a keyDown event repeats (i.e. when a key is held down). (Edge has an open bug on this but of course IE11 is abandonware.)\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem.**\r\n\r\nTab to to the only div in this repro and hold down a key:\r\nhttps://jsfiddle.net/acsr4ofu/\r\n\r\nBug: 'repeat!' alert does not appear in IE11\r\n\r\n**What is the expected behavior?**\r\nAn alert dialog showing 'repeat!' should appear in any browser that React supports.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nCurrent version of React, any browser which does not natively support `KeyboardEvent.repeat` but IE/Edge in particular (Chrome always supported; FF since 28; Safari since 10.1). Unknown if this worked in previous versions of React.",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**  Bug    **What is the current behavior?**  Documentation of SyntheticEvent claims: \"React normalizes events so that they have consistent properties across different browsers.\" https://reactjs.org/docs/events.html#supported-events    Documentation of Keyboard Events lists `boolean repeat` as a supported field: https://reactjs.org/docs/events.html#keyboard-events    IE11/Edge do not natively support `repeat`, but React does not normalize the event to set `repeat: true` when a keyDown event repeats (i.e. when a key is held down). (Edge has an open bug on this but of course IE11 is abandonware.)    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem.**    Tab to to the only div in this repro and hold down a key:  https://jsfiddle.net/acsr4ofu/    Bug: 'repeat!' alert does not appear in IE11    **What is the expected behavior?**  An alert dialog showing 'repeat!' should appear in any browser that React supports.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  Current version of React, any browser which does not natively support `KeyboardEvent.repeat` but IE/Edge in particular (Chrome always supported; FF since 28; Safari since 10.1). Unknown if this worked in previous versions of React.",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**  Bug    **What is the current behavior?**  Documentation of SyntheticEvent claims: \"React normalizes events so that they have consistent properties across different browsers.\" https://reactjs.org/docs/events.html#supported-events    Documentation of Keyboard Events lists `boolean repeat` as a supported field: https://reactjs.org/docs/events.html#keyboard-events    IE11/Edge do not natively support `repeat`, but React does not normalize the event to set `repeat: true` when a keyDown event repeats (i.e. when a key is held down). (Edge has an open bug on this but of course IE11 is abandonware.)    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem.**    Tab to to the only div in this repro and hold down a key:  https://jsfiddle.net/acsr4ofu/    Bug: 'repeat!' alert does not appear in IE11    **What is the expected behavior?**  An alert dialog showing 'repeat!' should appear in any browser that React supports.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  Current version of React, any browser which does not natively support `KeyboardEvent.repeat` but IE/Edge in particular (Chrome always supported; FF since 28; Safari since 10.1). Unknown if this worked in previous versions of React.",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** Bug **What is the current behavior?** Documentation of SyntheticEvent claims: \"React normalizes events so that they have consistent properties across different browsers.\"  Documentation of Keyboard Events lists `boolean repeat` as a supported field:  IE11/Edge do not natively support `repeat`, but React does not normalize the event to set `repeat: true` when a keyDown event repeats (i.e. when a key is held down). (Edge has an open bug on this but of course IE11 is abandonware.) **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem.** Tab to to the only div in this repro and hold down a key:  Bug: 'repeat!' alert does not appear in IE11 **What is the expected behavior?** An alert dialog showing 'repeat!' should appear in any browser that React supports. **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** Current version of React, any browser which does not natively support `KeyboardEvent.repeat` but IE/Edge in particular (Chrome always supported; FF since 28; Safari since 10.1). Unknown if this worked in previous versions of React.",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * bug * * current behavior ? * * documentation syntheticevent claim : `` react normalizes event consistent property across different browser . '' documentation keyboard event list ` boolean repeat ` supported field : ie11/edge natively support ` repeat ` , react normalize event set ` repeat : true ` keydown event repeat ( i.e . key held ) . ( edge open bug course ie11 abandonware . ) * * current behavior bug , please provide step reproduce possible minimal demo problem . * * tab div repro hold key : bug : 'repeat ! ' alert appear ie11 * * expected behavior ? * * alert dialog showing 'repeat ! ' appear browser react support . * * version react , browser / o affected issue ? work previous version react ? * * current version react , browser natively support ` keyboardevent.repeat ` ie/edge particular ( chrome always supported ; ff since 28 ; safari since 10.1 ) . unknown worked previous version react .",
        "title_stopwords_removal_lemmatization": "keyboardevent.repeat normalized"
    },
    {
        "issue_id": 350058539,
        "title": "Provide a `testInstance.context` property to facilitate context testing",
        "label": [
            "Type: Feature Request",
            "Component: Test Renderer"
        ],
        "date": "2018-08-13T14:39:15Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nFeature Request\r\n\r\n**What is the current behavior?**\r\n`testInstance` provides a `props` property, but does not provide a `context` property allowing for context tests.\r\n\r\n**What is the expected behavior?**\r\n`testInstance.context` should return an object containing the instance's current context\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nAt least 16.4.1",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**  Feature Request    **What is the current behavior?**  `testInstance` provides a `props` property, but does not provide a `context` property allowing for context tests.    **What is the expected behavior?**  `testInstance.context` should return an object containing the instance's current context    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  At least 16.4.1",
        "human_words": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**  Feature Request    **What is the current behavior?**  `testInstance` provides a `props` property, but does not provide a `context` property allowing for context tests.    **What is the expected behavior?**  `testInstance.context` should return an object containing the instance's current context    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  At least 16.4.1",
        "human_words_regrex": " **Do you want to request a *feature* or report a *bug*?** Feature Request **What is the current behavior?** `testInstance` provides a `props` property, but does not provide a `context` property allowing for context tests. **What is the expected behavior?** `testInstance.context` should return an object containing the instance's current context **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** At least 16.4.1",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * feature request * * current behavior ? * * ` testinstance ` provides ` prop ` property , provide ` context ` property allowing context test . * * expected behavior ? * * ` testinstance.context ` return object containing instance 's current context * * version react , browser / o affected issue ? work previous version react ? * * least 16.4.1",
        "title_stopwords_removal_lemmatization": "provide ` testinstance.context ` property facilitate context testing"
    },
    {
        "issue_id": 350010652,
        "title": "React.cloneElement cannot remove existing props",
        "label": [
            "Type: Feature Request",
            "Component: Core Utilities",
            "Resolution: Stale"
        ],
        "date": "2018-08-13T12:34:23Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nA feature.\r\n\r\n**What is the current behavior?**\r\n\r\nWhen an element is cloned with [React.cloneElement](https://reactjs.org/docs/react-api.html#cloneelement), it's possible to add new props or modify existing ones, but not to remove existing props. \r\n\r\n[Relevant code](https://github.com/facebook/react/blob/v16.8.0-alpha.1/packages/react/src/ReactElement.js#L333).\r\n\r\nExample of how it works right now:\r\n\r\n```\r\nconst element = React.createElement(\"a\", {href: \"http://github.com\"});\r\nconst newElement = React.cloneElement(element, {href: undefined});\r\nconsole.log(newElement.props); // {href: undefined}\r\n```\r\n\r\n**What is the desired behavior?**\r\n\r\nIt would be great to add some way to remove props (passing `undefined` as value?):\r\n\r\n```\r\nconst element = React.createElement(\"a\", {href: \"http://github.com\"});\r\nconst newElement = React.cloneElement(element, {href: undefined});\r\nconsole.log(newElement.props); // {}\r\n```\r\n\r\nI guess I could use directly `React.createElement` but, AFAIK, I'll have also to worry about special attributes like `key` and `ref`. I'd rather not mess with internals.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nI think it has worked this way in all React versions.\r\n\r\n**What's your use case?**\r\n\r\nI am applying a map transformation of elements recursively and I need to remove some virtual props before passing the real elements for React to render.  Console shows `React does not recognize the [unknownProp] prop on a DOM element` for those props, I'd want to avoid that.",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**    A feature.    **What is the current behavior?**    When an element is cloned with [React.cloneElement](https://reactjs.org/docs/react-api.html#cloneelement), it's possible to add new props or modify existing ones, but not to remove existing props.     [Relevant code](https://github.com/facebook/react/blob/v16.8.0-alpha.1/packages/react/src/ReactElement.js#L333).    Example of how it works right now:    ```  const element = React.createElement(\"a\", {href: \"http://github.com\"});  const newElement = React.cloneElement(element, {href: undefined});  console.log(newElement.props); // {href: undefined}  ```    **What is the desired behavior?**    It would be great to add some way to remove props (passing `undefined` as value?):    ```  const element = React.createElement(\"a\", {href: \"http://github.com\"});  const newElement = React.cloneElement(element, {href: undefined});  console.log(newElement.props); // {}  ```    I guess I could use directly `React.createElement` but, AFAIK, I'll have also to worry about special attributes like `key` and `ref`. I'd rather not mess with internals.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    I think it has worked this way in all React versions.    **What's your use case?**    I am applying a map transformation of elements recursively and I need to remove some virtual props before passing the real elements for React to render.  Console shows `React does not recognize the [unknownProp] prop on a DOM element` for those props, I'd want to avoid that.",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**    A feature.    **What is the current behavior?**    When an element is cloned with [React.cloneElement](https://reactjs.org/docs/react-api.html#cloneelement), it's possible to add new props or modify existing ones, but not to remove existing props.     [Relevant code](https://github.com/facebook/react/blob/v16.8.0-alpha.1/packages/react/src/ReactElement.js#L333).    Example of how it works right now:        **What is the desired behavior?**    It would be great to add some way to remove props (passing `undefined` as value?):        I guess I could use directly `React.createElement` but, AFAIK, I'll have also to worry about special attributes like `key` and `ref`. I'd rather not mess with internals.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    I think it has worked this way in all React versions.    **What's your use case?**    I am applying a map transformation of elements recursively and I need to remove some virtual props before passing the real elements for React to render.  Console shows `React does not recognize the [unknownProp] prop on a DOM element` for those props, I'd want to avoid that.",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** A feature. **What is the current behavior?** When an element is cloned with , it's possible to add new props or modify existing ones, but not to remove existing props. . Example of how it works right now: **What is the desired behavior?** It would be great to add some way to remove props (passing `undefined` as value?): I guess I could use directly `React.createElement` but, AFAIK, I'll have also to worry about special attributes like `key` and `ref`. I'd rather not mess with internals. **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** I think it has worked this way in all React versions. **What's your use case?** I am applying a map transformation of elements recursively and I need to remove some virtual props before passing the real elements for React to render. Console shows `React does not recognize the [unknownProp] prop on a DOM element` for those props, I'd want to avoid that.",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * feature . * * current behavior ? * * element cloned , 's possible add new prop modify existing one , remove existing prop . . example work right : * * desired behavior ? * * would great add way remove prop ( passing ` undefined ` value ? ) : guess could use directly ` react.createelement ` , afaik , 'll also worry special attribute like ` key ` ` ref ` . 'd rather mess internals . * * version react , browser / o affected issue ? work previous version react ? * * think worked way react version . * * 's use case ? * * applying map transformation element recursively need remove virtual prop passing real element react render . console show ` react recognize [ unknownprop ] prop dom element ` prop , 'd want avoid .",
        "title_stopwords_removal_lemmatization": "react.cloneelement remove existing prop"
    },
    {
        "issue_id": 349183126,
        "title": "Ability to use return value of React.Children.map with React.Children.only",
        "label": [
            "Type: Feature Request",
            "Component: Core Utilities",
            "Resolution: Stale"
        ],
        "date": "2018-08-09T15:39:29Z",
        "status": "closed",
        "description": "As stated in the docs and shown in #4410, the return value of `React.Children.map` is incompatible with the `React.Children.only` function, and will return with the error message:\r\n> Invariant Violation: Invariant Violation: React.Children.only expected to receive a single React element child.\r\n\r\nif used. \r\n\r\nThis incompatibility causes some fairly annoying restrictions, however. From what I understand, this means that you can't edit the properties of a component's children at runtime if they contain any component that requires a single child. (eg. you can't dynamically set the disabled prop of a child `TouchableNativeFeedback` component in the parent).\r\n\r\nI believe this is due to the type differences between the `this.props.children` parameter and the `React.Children.map` return value, the former being a valid element and the latter not (see #4424 and https://github.com/reactjs/reactjs.org/issues/87). \r\n\r\nI'd like to make a request to have the return type of `React.Children.map` be the same as the type of `this.props.children`, which will fix these quirks and be much more intuitive. A separate static function that converts the return type of `React.Children.map` to the same type as `this.props.children` would also solve the issue. It feels like some sort of fix is in order, since it's a broad and strange restriction on the components you can use.",
        "remove_template_description": "As stated in the docs and shown in #4410, the return value of `React.Children.map` is incompatible with the `React.Children.only` function, and will return with the error message:  > Invariant Violation: Invariant Violation: React.Children.only expected to receive a single React element child.    if used.     This incompatibility causes some fairly annoying restrictions, however. From what I understand, this means that you can't edit the properties of a component's children at runtime if they contain any component that requires a single child. (eg. you can't dynamically set the disabled prop of a child `TouchableNativeFeedback` component in the parent).    I believe this is due to the type differences between the `this.props.children` parameter and the `React.Children.map` return value, the former being a valid element and the latter not (see #4424 and https://github.com/reactjs/reactjs.org/issues/87).     I'd like to make a request to have the return type of `React.Children.map` be the same as the type of `this.props.children`, which will fix these quirks and be much more intuitive. A separate static function that converts the return type of `React.Children.map` to the same type as `this.props.children` would also solve the issue. It feels like some sort of fix is in order, since it's a broad and strange restriction on the components you can use.",
        "human_words": "As stated in the docs and shown in #4410, the return value of `React.Children.map` is incompatible with the `React.Children.only` function, and will return with the error message:  > Invariant Violation: Invariant Violation: React.Children.only expected to receive a single React element child.    if used.     This incompatibility causes some fairly annoying restrictions, however. From what I understand, this means that you can't edit the properties of a component's children at runtime if they contain any component that requires a single child. (eg. you can't dynamically set the disabled prop of a child `TouchableNativeFeedback` component in the parent).    I believe this is due to the type differences between the `this.props.children` parameter and the `React.Children.map` return value, the former being a valid element and the latter not (see #4424 and https://github.com/reactjs/reactjs.org/issues/87).     I'd like to make a request to have the return type of `React.Children.map` be the same as the type of `this.props.children`, which will fix these quirks and be much more intuitive. A separate static function that converts the return type of `React.Children.map` to the same type as `this.props.children` would also solve the issue. It feels like some sort of fix is in order, since it's a broad and strange restriction on the components you can use.",
        "human_words_regrex": "As stated in the docs and shown in #4410, the return value of `React.Children.map` is incompatible with the `React.Children.only` function, and will return with the error message: > Invariant Violation: Invariant Violation: React.Children.only expected to receive a single React element child. if used. This incompatibility causes some fairly annoying restrictions, however. From what I understand, this means that you can't edit the properties of a component's children at runtime if they contain any component that requires a single child. (eg. you can't dynamically set the disabled prop of a child `TouchableNativeFeedback` component in the parent). I believe this is due to the type differences between the `this.props.children` parameter and the `React.Children.map` return value, the former being a valid element and the latter not (see #4424 and  I'd like to make a request to have the return type of `React.Children.map` be the same as the type of `this.props.children`, which will fix these quirks and be much more intuitive. A separate static function that converts the return type of `React.Children.map` to the same type as `this.props.children` would also solve the issue. It feels like some sort of fix is in order, since it's a broad and strange restriction on the components you can use.",
        "human_words_stopwords_removal_lemmatization": "stated doc shown # 4410 , return value ` react.children.map ` incompatible ` react.children.only ` function , return error message : > invariant violation : invariant violation : react.children.only expected receive single react element child . used . incompatibility cause fairly annoying restriction , however . understand , mean ca n't edit property component 's child runtime contain component requires single child . ( eg . ca n't dynamically set disabled prop child ` touchablenativefeedback ` component parent ) . believe due type difference ` this.props.children ` parameter ` react.children.map ` return value , former valid element latter ( see # 4424 'd like make request return type ` react.children.map ` type ` this.props.children ` , fix quirk much intuitive . separate static function convert return type ` react.children.map ` type ` this.props.children ` would also solve issue . feel like sort fix order , since 's broad strange restriction component use .",
        "title_stopwords_removal_lemmatization": "ability use return value react.children.map react.children.only"
    },
    {
        "issue_id": 348051866,
        "title": "Support cross-renderer portals",
        "label": [
            "Type: Feature Request",
            "Type: Big Picture",
            "Component: Reconciler",
            "React Core Team"
        ],
        "date": "2018-08-06T19:26:11Z",
        "status": "open",
        "description": "Currently `createPortal` only works within the current renderer.\r\n\r\nThis means that if you want to embed one renderer into another (e.g. `react-art` in `react-dom`), your only option is to do an imperative render in a commit-time hook like `componentDidMount` or `componentDidUpdate` of the outer renderer's component. In fact that's exactly how `react-art` works today.\r\n\r\nWith this approach, nested renderers like `react-art` can't read the context of the outer renderers (https://github.com/facebook/react/issues/12796). Similarly, we can't time-slice updates in inner renderers because we only update the inner container at the host renderer's commit time.\r\n\r\nAt the time we originally discussed portals we wanted to make them work across renderers. So that you could do something like\r\n\r\n```js\r\n<div>\r\n  <Portal to={ReactART}>\r\n    <surface>\r\n      <rect />\r\n    </surface>\r\n  </Portal>\r\n</div>\r\n```\r\n\r\nBut it's not super clear how this should work because renderers can bundle incompatible Fiber implementations. Whose implementation takes charge?\r\n\r\nWe'll want to figure something out eventually. For now I'm filing this for future reference.",
        "remove_template_description": "Currently `createPortal` only works within the current renderer.    This means that if you want to embed one renderer into another (e.g. `react-art` in `react-dom`), your only option is to do an imperative render in a commit-time hook like `componentDidMount` or `componentDidUpdate` of the outer renderer's component. In fact that's exactly how `react-art` works today.    With this approach, nested renderers like `react-art` can't read the context of the outer renderers (https://github.com/facebook/react/issues/12796). Similarly, we can't time-slice updates in inner renderers because we only update the inner container at the host renderer's commit time.    At the time we originally discussed portals we wanted to make them work across renderers. So that you could do something like    ```js  <div>    <Portal to={ReactART}>      <surface>        <rect />      </surface>    </Portal>  </div>  ```    But it's not super clear how this should work because renderers can bundle incompatible Fiber implementations. Whose implementation takes charge?    We'll want to figure something out eventually. For now I'm filing this for future reference.",
        "human_words": "Currently `createPortal` only works within the current renderer.    This means that if you want to embed one renderer into another (e.g. `react-art` in `react-dom`), your only option is to do an imperative render in a commit-time hook like `componentDidMount` or `componentDidUpdate` of the outer renderer's component. In fact that's exactly how `react-art` works today.    With this approach, nested renderers like `react-art` can't read the context of the outer renderers (https://github.com/facebook/react/issues/12796). Similarly, we can't time-slice updates in inner renderers because we only update the inner container at the host renderer's commit time.    At the time we originally discussed portals we wanted to make them work across renderers. So that you could do something like        But it's not super clear how this should work because renderers can bundle incompatible Fiber implementations. Whose implementation takes charge?    We'll want to figure something out eventually. For now I'm filing this for future reference.",
        "human_words_regrex": "Currently `createPortal` only works within the current renderer. This means that if you want to embed one renderer into another (e.g. `react-art` in `react-dom`), your only option is to do an imperative render in a commit-time hook like `componentDidMount` or `componentDidUpdate` of the outer renderer's component. In fact that's exactly how `react-art` works today. With this approach, nested renderers like `react-art` can't read the context of the outer renderers ( Similarly, we can't time-slice updates in inner renderers because we only update the inner container at the host renderer's commit time. At the time we originally discussed portals we wanted to make them work across renderers. So that you could do something like But it's not super clear how this should work because renderers can bundle incompatible Fiber implementations. Whose implementation takes charge? We'll want to figure something out eventually. For now I'm filing this for future reference.",
        "human_words_stopwords_removal_lemmatization": "currently ` createportal ` work within current renderer . mean want embed one renderer another ( e.g . ` react-art ` ` react-dom ` ) , option imperative render commit-time hook like ` componentdidmount ` ` componentdidupdate ` outer renderer 's component . fact 's exactly ` react-art ` work today . approach , nested renderers like ` react-art ` ca n't read context outer renderers ( similarly , ca n't time-slice update inner renderers update inner container host renderer 's commit time . time originally discussed portal wanted make work across renderers . could something like 's super clear work renderers bundle incompatible fiber implementation . whose implementation take charge ? 'll want figure something eventually . 'm filing future reference .",
        "title_stopwords_removal_lemmatization": "support cross-renderer portal"
    },
    {
        "issue_id": 345598327,
        "title": "Setting rendering mode to <Surface> component of react-art",
        "label": [
            "Type: Feature Request",
            "Resolution: Stale"
        ],
        "date": "2018-07-30T03:24:48Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nfeature\r\n\r\n**What is the current behavior?**\r\n`<Surface>` of canvas mode and `<Surface>` of svg mode cannot be used in a document at the same time.\r\n\r\n**What is the expected behavior?**\r\nTwo more `<Surface>` components with each other modes can be used in a document at the same time.\r\n\r\n\r\nCurrently developers can set only one rending mode globally in react-art, using `setCurrent()` of `art/modes/current` module. So there is no way to use `<Surface>` of canvas mode and `<Surface>` of svg mode in a document together. On the other hand, `art.js` internally used in `react-art` provides a way to use each other modes together as directly importing their corresponding modules.  (e.g. svg.js for svg mode, canvas.js for canvas mode in `art.js` lib). \r\n\r\nI would like to suggest a way to set own rendering mode per instance of `<Surface>` Component by new property `mode`. This feature makes `<Surface>` with canvas mode and `<Surface>` with svg mode to be used together in a document like the following.\r\n\r\n```javascript\r\nconst {\r\n  Surface,\r\n  Group,\r\n  Shape\r\n} = require('react-art');\r\n\r\nclass TestComponent extends React.Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Surface mode=\"svg\" width={100} height={100}>\r\n          <Group>\r\n            <Shape width={10} height={10} />\r\n          </Group>\r\n        </Surface>\r\n        <Surface mode=\"canvas\" width={100} height={100}>\r\n          <Group>\r\n            <Shape width={10} height={10} />\r\n          </Group>\r\n        </Surface>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n};\r\n```\r\n\r\nIf `mode` property is not set, `<Surface>` works as canvas mode for compatibility.\r\n\r\nI have made a PR for this feature to show how to work and use it ([#13249](https://github.com/facebook/react/pull/13249)).\r\nAnd you can check this feature through `art` fixture of my PR.\r\n\r\nFeel free to discuss about this feature.\r\n\r\n\r\n\r\n",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**  feature    **What is the current behavior?**  `<Surface>` of canvas mode and `<Surface>` of svg mode cannot be used in a document at the same time.    **What is the expected behavior?**  Two more `<Surface>` components with each other modes can be used in a document at the same time.      Currently developers can set only one rending mode globally in react-art, using `setCurrent()` of `art/modes/current` module. So there is no way to use `<Surface>` of canvas mode and `<Surface>` of svg mode in a document together. On the other hand, `art.js` internally used in `react-art` provides a way to use each other modes together as directly importing their corresponding modules.  (e.g. svg.js for svg mode, canvas.js for canvas mode in `art.js` lib).     I would like to suggest a way to set own rendering mode per instance of `<Surface>` Component by new property `mode`. This feature makes `<Surface>` with canvas mode and `<Surface>` with svg mode to be used together in a document like the following.    ```javascript  const {    Surface,    Group,    Shape  } = require('react-art');    class TestComponent extends React.Component {    render() {      return (        <React.Fragment>          <Surface mode=\"svg\" width={100} height={100}>            <Group>              <Shape width={10} height={10} />            </Group>          </Surface>          <Surface mode=\"canvas\" width={100} height={100}>            <Group>              <Shape width={10} height={10} />            </Group>          </Surface>        </React.Fragment>      );    }  };  ```    If `mode` property is not set, `<Surface>` works as canvas mode for compatibility.    I have made a PR for this feature to show how to work and use it ([#13249](https://github.com/facebook/react/pull/13249)).  And you can check this feature through `art` fixture of my PR.    Feel free to discuss about this feature.",
        "human_words": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**  feature    **What is the current behavior?**  `<Surface>` of canvas mode and `<Surface>` of svg mode cannot be used in a document at the same time.    **What is the expected behavior?**  Two more `<Surface>` components with each other modes can be used in a document at the same time.      Currently developers can set only one rending mode globally in react-art, using `setCurrent()` of `art/modes/current` module. So there is no way to use `<Surface>` of canvas mode and `<Surface>` of svg mode in a document together. On the other hand, `art.js` internally used in `react-art` provides a way to use each other modes together as directly importing their corresponding modules.  (e.g. svg.js for svg mode, canvas.js for canvas mode in `art.js` lib).     I would like to suggest a way to set own rendering mode per instance of `<Surface>` Component by new property `mode`. This feature makes `<Surface>` with canvas mode and `<Surface>` with svg mode to be used together in a document like the following.        If `mode` property is not set, `<Surface>` works as canvas mode for compatibility.    I have made a PR for this feature to show how to work and use it ([#13249](https://github.com/facebook/react/pull/13249)).  And you can check this feature through `art` fixture of my PR.    Feel free to discuss about this feature.",
        "human_words_regrex": " **Do you want to request a *feature* or report a *bug*?** feature **What is the current behavior?** `` of canvas mode and `` of svg mode cannot be used in a document at the same time. **What is the expected behavior?** Two more `` components with each other modes can be used in a document at the same time. Currently developers can set only one rending mode globally in react-art, using `setCurrent()` of `art/modes/current` module. So there is no way to use `` of canvas mode and `` of svg mode in a document together. On the other hand, `art.js` internally used in `react-art` provides a way to use each other modes together as directly importing their corresponding modules. (e.g. svg.js for svg mode, canvas.js for canvas mode in `art.js` lib). I would like to suggest a way to set own rendering mode per instance of `` Component by new property `mode`. This feature makes `` with canvas mode and `` with svg mode to be used together in a document like the following. If `mode` property is not set, `` works as canvas mode for compatibility. I have made a PR for this feature to show how to work and use it (). And you can check this feature through `art` fixture of my PR. Feel free to discuss about this feature.",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * feature * * current behavior ? * * `` canvas mode `` svg mode used document time . * * expected behavior ? * * two `` component mode used document time . currently developer set one rending mode globally react-art , using ` setcurrent ( ) ` ` art/modes/current ` module . way use `` canvas mode `` svg mode document together . hand , ` art.js ` internally used ` react-art ` provides way use mode together directly importing corresponding module . ( e.g . svg.js svg mode , canvas.js canvas mode ` art.js ` lib ) . would like suggest way set rendering mode per instance `` component new property ` mode ` . feature make `` canvas mode `` svg mode used together document like following . ` mode ` property set , `` work canvas mode compatibility . made pr feature show work use ( ) . check feature ` art ` fixture pr . feel free discus feature .",
        "title_stopwords_removal_lemmatization": "setting rendering mode < surface > component react-art"
    },
    {
        "issue_id": 341894396,
        "title": "Identify different instances of react component in performance measures",
        "label": [
            "Type: Feature Request",
            "Resolution: Stale"
        ],
        "date": "2018-07-17T12:18:10Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n**feature**\r\n\r\nCan fiber._debugID also be part of performance measure [label](https://github.com/facebook/react/blob/master/packages/react-reconciler/src/ReactDebugFiberPerf.js#L91) along with component name/displayName?\r\n\r\nto distinguish/track multiple instances of a react component in performance measures, please let me know if there is any other way already available to achieve this.",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**  **feature**    Can fiber._debugID also be part of performance measure [label](https://github.com/facebook/react/blob/master/packages/react-reconciler/src/ReactDebugFiberPerf.js#L91) along with component name/displayName?    to distinguish/track multiple instances of a react component in performance measures, please let me know if there is any other way already available to achieve this.",
        "human_words": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**  **feature**    Can fiber._debugID also be part of performance measure [label](https://github.com/facebook/react/blob/master/packages/react-reconciler/src/ReactDebugFiberPerf.js#L91) along with component name/displayName?    to distinguish/track multiple instances of a react component in performance measures, please let me know if there is any other way already available to achieve this.",
        "human_words_regrex": " **Do you want to request a *feature* or report a *bug*?** **feature** Can fiber._debugID also be part of performance measure  along with component name/displayName? to distinguish/track multiple instances of a react component in performance measures, please let me know if there is any other way already available to achieve this.",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * * * feature * * fiber._debugid also part performance measure along component name/displayname ? distinguish/track multiple instance react component performance measure , please let know way already available achieve .",
        "title_stopwords_removal_lemmatization": "identify different instance react component performance measure"
    },
    {
        "issue_id": 335214547,
        "title": "add support for SyntheticKeyboardEvent#isComposing",
        "label": [
            "Type: Feature Request",
            "Component: DOM"
        ],
        "date": "2018-06-24T21:49:31Z",
        "status": "open",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nSynthetic keyboard events do not contain `isComposing`.\r\nThey should if the value is true, per the w3 spec 4.7.5: https://www.w3.org/TR/uievents/#events-compositionevents\r\n \r\n**What is the expected behavior?**\r\n`event.isComposing === event.nativeEvent.isComposing`\r\n\r\nSyntheticKeyboardEvent#isComposing is true when a keydown even is fired after compositionstart and before compositionend.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nall versions, up through at least 16.4.1",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**  Bug    **What is the current behavior?**  Synthetic keyboard events do not contain `isComposing`.  They should if the value is true, per the w3 spec 4.7.5: https://www.w3.org/TR/uievents/#events-compositionevents     **What is the expected behavior?**  `event.isComposing === event.nativeEvent.isComposing`    SyntheticKeyboardEvent#isComposing is true when a keydown even is fired after compositionstart and before compositionend.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  all versions, up through at least 16.4.1",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**  Bug    **What is the current behavior?**  Synthetic keyboard events do not contain `isComposing`.  They should if the value is true, per the w3 spec 4.7.5: https://www.w3.org/TR/uievents/#events-compositionevents     **What is the expected behavior?**  `event.isComposing === event.nativeEvent.isComposing`    SyntheticKeyboardEvent#isComposing is true when a keydown even is fired after compositionstart and before compositionend.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  all versions, up through at least 16.4.1",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** Bug **What is the current behavior?** Synthetic keyboard events do not contain `isComposing`. They should if the value is true, per the w3 spec 4.7.5:  **What is the expected behavior?** `event.isComposing === event.nativeEvent.isComposing` SyntheticKeyboardEvent#isComposing is true when a keydown even is fired after compositionstart and before compositionend. **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** all versions, up through at least 16.4.1",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * bug * * current behavior ? * * synthetic keyboard event contain ` iscomposing ` . value true , per w3 spec 4.7.5 : * * expected behavior ? * * ` event.iscomposing === event.nativeevent.iscomposing ` synthetickeyboardevent # iscomposing true keydown even fired compositionstart compositionend . * * version react , browser / o affected issue ? work previous version react ? * * version , least 16.4.1",
        "title_stopwords_removal_lemmatization": "add support synthetickeyboardevent # iscomposing"
    },
    {
        "issue_id": 334981118,
        "title": "Add support for hydrating portals",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2018-06-22T18:45:31Z",
        "status": "open",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nProbably bug, but arguably a feature request, I suppose.\r\n\r\n**What is the current behavior?**\r\n\r\nI've attempted my best effort at a fiddle that shows off the particular issue. Obviously server side rendering is impossible via JSFiddle, but the markup should be equivalent to having rendered `Test` into a div with id `test-1` during server side render.\r\n\r\nhttps://jsfiddle.net/y8o5n2zg/\r\n\r\nAs seen in the fiddle, an attempt to ReactDOM.hydrate() a portal results in:\r\n> `Warning: Expected server HTML to contain a matching text node for \"Hello World\" in <div>.`\r\n\r\nAdditionally, after failing to hydrate, React renders the component and appends it resulting in a duplicated section of DOM:\r\n> `<div id=\"test-1\">Hello WorldHello World</div>`\r\n\r\n**What is the expected behavior?**\r\n\r\nIn an ideal world, calling hydrate on a component that has portals would allow those DOM containers to hydrate into the components they were rendered with.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nI've only tested this in 16.4.1, but I've confirmed the behavior in Chrome and Firefox. Given that I'm really looking at an edge case here I doubt it worked previously.\r\n\r\n\r\n#### *Why* I'm doing this edge-case-y nonsense:\r\n\r\nWe're currently using multiple React roots on our pages (as some portions of the pages are not rendered by React yet), most of which are server-side rendered. We'd like to be able to hydrate them into a single React root on page, so that we can share contexts between them without difficulty and without repeating those context components in memory (in some cases we can have a good number of roots on the page\u201420-30, perhaps?).\r\n\r\nIn searching, I found a few potentially related bugs (#12615, #10713, #11169), but it seemed like these really didn't line up with my (hopefully valid?) use case.\r\n\r\nThanks!\r\n",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**    Probably bug, but arguably a feature request, I suppose.    **What is the current behavior?**    I've attempted my best effort at a fiddle that shows off the particular issue. Obviously server side rendering is impossible via JSFiddle, but the markup should be equivalent to having rendered `Test` into a div with id `test-1` during server side render.    https://jsfiddle.net/y8o5n2zg/    As seen in the fiddle, an attempt to ReactDOM.hydrate() a portal results in:  > `Warning: Expected server HTML to contain a matching text node for \"Hello World\" in <div>.`    Additionally, after failing to hydrate, React renders the component and appends it resulting in a duplicated section of DOM:  > `<div id=\"test-1\">Hello WorldHello World</div>`    **What is the expected behavior?**    In an ideal world, calling hydrate on a component that has portals would allow those DOM containers to hydrate into the components they were rendered with.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    I've only tested this in 16.4.1, but I've confirmed the behavior in Chrome and Firefox. Given that I'm really looking at an edge case here I doubt it worked previously.      #### *Why* I'm doing this edge-case-y nonsense:    We're currently using multiple React roots on our pages (as some portions of the pages are not rendered by React yet), most of which are server-side rendered. We'd like to be able to hydrate them into a single React root on page, so that we can share contexts between them without difficulty and without repeating those context components in memory (in some cases we can have a good number of roots on the page\u201420-30, perhaps?).    In searching, I found a few potentially related bugs (#12615, #10713, #11169), but it seemed like these really didn't line up with my (hopefully valid?) use case.    Thanks!",
        "human_words": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**    Probably bug, but arguably a feature request, I suppose.    **What is the current behavior?**    I've attempted my best effort at a fiddle that shows off the particular issue. Obviously server side rendering is impossible via JSFiddle, but the markup should be equivalent to having rendered `Test` into a div with id `test-1` during server side render.    https://jsfiddle.net/y8o5n2zg/    As seen in the fiddle, an attempt to ReactDOM.hydrate() a portal results in:  > `Warning: Expected server HTML to contain a matching text node for \"Hello World\" in <div>.`    Additionally, after failing to hydrate, React renders the component and appends it resulting in a duplicated section of DOM:  > `<div id=\"test-1\">Hello WorldHello World</div>`    **What is the expected behavior?**    In an ideal world, calling hydrate on a component that has portals would allow those DOM containers to hydrate into the components they were rendered with.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    I've only tested this in 16.4.1, but I've confirmed the behavior in Chrome and Firefox. Given that I'm really looking at an edge case here I doubt it worked previously.      #### *Why* I'm doing this edge-case-y nonsense:    We're currently using multiple React roots on our pages (as some portions of the pages are not rendered by React yet), most of which are server-side rendered. We'd like to be able to hydrate them into a single React root on page, so that we can share contexts between them without difficulty and without repeating those context components in memory (in some cases we can have a good number of roots on the page\u201420-30, perhaps?).    In searching, I found a few potentially related bugs (#12615, #10713, #11169), but it seemed like these really didn't line up with my (hopefully valid?) use case.    Thanks!",
        "human_words_regrex": " **Do you want to request a *feature* or report a *bug*?** Probably bug, but arguably a feature request, I suppose. **What is the current behavior?** I've attempted my best effort at a fiddle that shows off the particular issue. Obviously server side rendering is impossible via JSFiddle, but the markup should be equivalent to having rendered `Test` into a div with id `test-1` during server side render.  As seen in the fiddle, an attempt to ReactDOM.hydrate() a portal results in: > `Warning: Expected server HTML to contain a matching text node for \"Hello World\" in .` Additionally, after failing to hydrate, React renders the component and appends it resulting in a duplicated section of DOM: > `Hello WorldHello World` **What is the expected behavior?** In an ideal world, calling hydrate on a component that has portals would allow those DOM containers to hydrate into the components they were rendered with. **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** I've only tested this in 16.4.1, but I've confirmed the behavior in Chrome and Firefox. Given that I'm really looking at an edge case here I doubt it worked previously. #### *Why* I'm doing this edge-case-y nonsense: We're currently using multiple React roots on our pages (as some portions of the pages are not rendered by React yet), most of which are server-side rendered. We'd like to be able to hydrate them into a single React root on page, so that we can share contexts between them without difficulty and without repeating those context components in memory (in some cases we can have a good number of roots on the page\u201420-30, perhaps?). In searching, I found a few potentially related bugs (#12615, #10713, #11169), but it seemed like these really didn't line up with my (hopefully valid?) use case. Thanks!",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * probably bug , arguably feature request , suppose . * * current behavior ? * * 've attempted best effort fiddle show particular issue . obviously server side rendering impossible via jsfiddle , markup equivalent rendered ` test ` div id ` test-1 ` server side render . seen fiddle , attempt reactdom.hydrate ( ) portal result : > ` warning : expected server html contain matching text node `` hello world '' . ` additionally , failing hydrate , react render component appends resulting duplicated section dom : > ` hello worldhello world ` * * expected behavior ? * * ideal world , calling hydrate component portal would allow dom container hydrate component rendered . * * version react , browser / o affected issue ? work previous version react ? * * 've tested 16.4.1 , 've confirmed behavior chrome firefox . given 'm really looking edge case doubt worked previously . # # # # * * 'm edge-case-y nonsense : 're currently using multiple react root page ( portion page rendered react yet ) , server-side rendered . 'd like able hydrate single react root page , share context without difficulty without repeating context component memory ( case good number root page\u201420-30 , perhaps ? ) . searching , found potentially related bug ( # 12615 , # 10713 , # 11169 ) , seemed like really n't line ( hopefully valid ? ) use case . thanks !",
        "title_stopwords_removal_lemmatization": "add support hydrating portal"
    },
    {
        "issue_id": 334481797,
        "title": "Some means of determining component order in hierarchy",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2018-06-21T12:57:54Z",
        "status": "closed",
        "description": "I apologise for raising this issue again, I'm not intending to be annoying or disrespectful by this, but my previous issue #13034 was closed with a suggestion which I believe not does mitigate the feature request.  I'm simply not aware if I should take the hint and go away, if there's a bit of a backlog and I should hang in there, or if it's been missed.  I'm assuming the latter, but beg forgiveness if that is not the case.  Should you want me to go away I will do so :)  Thanks.\r\n\r\nI'm trying to build a container component and child component, whereby the children can sit anywhere in the hierarchy beneath the container, but know their relative order/index within that hierarchy.\r\n\r\nMy use-case is to build a helper wrapper for CSS grids, allowing subcomponents to themselves render a \"row\" component which knows it must be the next index, and may or may not progress the row counter for the next \"row\" component found in order.\r\n\r\nI've looked into two possible avenues - recursing using React.Children on the component, which stops when it hits a component without props.children (e.g. a redux-connect()-ed one), and passing some means of counting via context, which fails because it seems the render() methods of the child components isn't always called in \"DOM order\".\r\n\r\nMore background here - https://stackoverflow.com/questions/50776933/react-get-component-order-within-hierarchy\r\n\r\nIt would be great to have some feature in React which might allow for this.\r\n\r\n@aweary had previously suggested in #13034 that context could do this with nesting, however I'd raised the thought that this would give an indication of recursion depth, not relative position.",
        "remove_template_description": "I apologise for raising this issue again, I'm not intending to be annoying or disrespectful by this, but my previous issue #13034 was closed with a suggestion which I believe not does mitigate the feature request.  I'm simply not aware if I should take the hint and go away, if there's a bit of a backlog and I should hang in there, or if it's been missed.  I'm assuming the latter, but beg forgiveness if that is not the case.  Should you want me to go away I will do so :)  Thanks.    I'm trying to build a container component and child component, whereby the children can sit anywhere in the hierarchy beneath the container, but know their relative order/index within that hierarchy.    My use-case is to build a helper wrapper for CSS grids, allowing subcomponents to themselves render a \"row\" component which knows it must be the next index, and may or may not progress the row counter for the next \"row\" component found in order.    I've looked into two possible avenues - recursing using React.Children on the component, which stops when it hits a component without props.children (e.g. a redux-connect()-ed one), and passing some means of counting via context, which fails because it seems the render() methods of the child components isn't always called in \"DOM order\".    More background here - https://stackoverflow.com/questions/50776933/react-get-component-order-within-hierarchy    It would be great to have some feature in React which might allow for this.    @aweary had previously suggested in #13034 that context could do this with nesting, however I'd raised the thought that this would give an indication of recursion depth, not relative position.",
        "human_words": "I apologise for raising this issue again, I'm not intending to be annoying or disrespectful by this, but my previous issue #13034 was closed with a suggestion which I believe not does mitigate the feature request.  I'm simply not aware if I should take the hint and go away, if there's a bit of a backlog and I should hang in there, or if it's been missed.  I'm assuming the latter, but beg forgiveness if that is not the case.  Should you want me to go away I will do so :)  Thanks.    I'm trying to build a container component and child component, whereby the children can sit anywhere in the hierarchy beneath the container, but know their relative order/index within that hierarchy.    My use-case is to build a helper wrapper for CSS grids, allowing subcomponents to themselves render a \"row\" component which knows it must be the next index, and may or may not progress the row counter for the next \"row\" component found in order.    I've looked into two possible avenues - recursing using React.Children on the component, which stops when it hits a component without props.children (e.g. a redux-connect()-ed one), and passing some means of counting via context, which fails because it seems the render() methods of the child components isn't always called in \"DOM order\".    More background here - https://stackoverflow.com/questions/50776933/react-get-component-order-within-hierarchy    It would be great to have some feature in React which might allow for this.    @aweary had previously suggested in #13034 that context could do this with nesting, however I'd raised the thought that this would give an indication of recursion depth, not relative position.",
        "human_words_regrex": "I apologise for raising this issue again, I'm not intending to be annoying or disrespectful by this, but my previous issue #13034 was closed with a suggestion which I believe not does mitigate the feature request. I'm simply not aware if I should take the hint and go away, if there's a bit of a backlog and I should hang in there, or if it's been missed. I'm assuming the latter, but beg forgiveness if that is not the case. Should you want me to go away I will do so :) Thanks. I'm trying to build a container component and child component, whereby the children can sit anywhere in the hierarchy beneath the container, but know their relative order/index within that hierarchy. My use-case is to build a helper wrapper for CSS grids, allowing subcomponents to themselves render a \"row\" component which knows it must be the next index, and may or may not progress the row counter for the next \"row\" component found in order. I've looked into two possible avenues - recursing using React.Children on the component, which stops when it hits a component without props.children (e.g. a redux-connect()-ed one), and passing some means of counting via context, which fails because it seems the render() methods of the child components isn't always called in \"DOM order\". More background here -  It would be great to have some feature in React which might allow for this. @aweary had previously suggested in #13034 that context could do this with nesting, however I'd raised the thought that this would give an indication of recursion depth, not relative position.",
        "human_words_stopwords_removal_lemmatization": "apologise raising issue , 'm intending annoying disrespectful , previous issue # 13034 closed suggestion believe mitigate feature request . 'm simply aware take hint go away , 's bit backlog hang , 's missed . 'm assuming latter , beg forgiveness case . want go away : ) thanks . 'm trying build container component child component , whereby child sit anywhere hierarchy beneath container , know relative order/index within hierarchy . use-case build helper wrapper cs grid , allowing subcomponents render `` row '' component know must next index , may may progress row counter next `` row '' component found order . 've looked two possible avenue - recursing using react.children component , stop hit component without props.children ( e.g . redux-connect ( ) -ed one ) , passing mean counting via context , fails seems render ( ) method child component n't always called `` dom order '' . background - would great feature react might allow . @ aweary previously suggested # 13034 context could nesting , however 'd raised thought would give indication recursion depth , relative position .",
        "title_stopwords_removal_lemmatization": "mean determining component order hierarchy"
    },
    {
        "issue_id": 332416688,
        "title": "Allow Portals to be used for Reparenting",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2018-06-14T14:01:27Z",
        "status": "open",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nfeature\r\n\r\n**What is the current behavior?**\r\n\r\n[Reparenting](https://github.com/facebook/react/issues/3965) is an unsolved issues of React(DOM). So far, it was possible to hack around the missing support for it by relying on unstable API (`unstable_renderSubtreeIntoContainer`) to render **and update** a subtree inside a different container. It's important to note that this API was using React's diffing algorithm so that, similar to `ReactDOM.render()`, it is possible to keep components mounted.\r\n\r\n```js\r\nReactDOM.render(<Foo />, container);\r\n// This won't get <Foo /> to be unmounted and mounted again:\r\nReactDOM.render(<Foo />, container);\r\n\r\nReactDOM.unstable_renderSubtreeIntoContainer(\r\n  parentComponent,\r\n  <Foo />,\r\n  container\r\n);\r\n// This also won't get <Foo /> to be unmounted and mounted again, no matter if \r\n// we change parentComponent (and thus call it from a different parent):\r\nReactDOM.unstable_renderSubtreeIntoContainer(\r\n  parentComponent,\r\n  <Foo />,\r\n  container\r\n);\r\n```\r\n\r\nHowever this unstable API is [going to be deprecated soon](https://github.com/facebook/react/issues/10143) and recent features like the introduction of the new context API introduced [additional issues](https://github.com/facebook/react/issues/12493).\r\n\r\nAs an alternative to this unstable API, `ReactDOM.createPortal(children, container)` was introduced. However this API is unsuitable for the reparenting issue since it will always [create a new mount point](https://github.com/facebook/react/issues/10713) inside the `container` instead of applying the diffing _when called from a different parent_ (Check out this [CodeSandbox](https://codesandbox.io/s/91o7oovo54) where calling the portal from a different portal will cause the `<Leaf />` to have a new uuid). The reason for this is that we want multiple portals to be able to render inside the same `container` which makes perfect sense for more common use cases like popovers, etc.\r\n\r\nBefore we're going to remove `unstable_renderSubtreeIntoContainer`, I suggest we find a way to portal into a specific node instead of appending to it so that we can diff its contents instead (or implement a solution for #3965 although that seems to be more complicated), similar to `unstable_renderSubtreeIntoContainer`.",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**    feature    **What is the current behavior?**    [Reparenting](https://github.com/facebook/react/issues/3965) is an unsolved issues of React(DOM). So far, it was possible to hack around the missing support for it by relying on unstable API (`unstable_renderSubtreeIntoContainer`) to render **and update** a subtree inside a different container. It's important to note that this API was using React's diffing algorithm so that, similar to `ReactDOM.render()`, it is possible to keep components mounted.    ```js  ReactDOM.render(<Foo />, container);  // This won't get <Foo /> to be unmounted and mounted again:  ReactDOM.render(<Foo />, container);    ReactDOM.unstable_renderSubtreeIntoContainer(    parentComponent,    <Foo />,    container  );  // This also won't get <Foo /> to be unmounted and mounted again, no matter if   // we change parentComponent (and thus call it from a different parent):  ReactDOM.unstable_renderSubtreeIntoContainer(    parentComponent,    <Foo />,    container  );  ```    However this unstable API is [going to be deprecated soon](https://github.com/facebook/react/issues/10143) and recent features like the introduction of the new context API introduced [additional issues](https://github.com/facebook/react/issues/12493).    As an alternative to this unstable API, `ReactDOM.createPortal(children, container)` was introduced. However this API is unsuitable for the reparenting issue since it will always [create a new mount point](https://github.com/facebook/react/issues/10713) inside the `container` instead of applying the diffing _when called from a different parent_ (Check out this [CodeSandbox](https://codesandbox.io/s/91o7oovo54) where calling the portal from a different portal will cause the `<Leaf />` to have a new uuid). The reason for this is that we want multiple portals to be able to render inside the same `container` which makes perfect sense for more common use cases like popovers, etc.    Before we're going to remove `unstable_renderSubtreeIntoContainer`, I suggest we find a way to portal into a specific node instead of appending to it so that we can diff its contents instead (or implement a solution for #3965 although that seems to be more complicated), similar to `unstable_renderSubtreeIntoContainer`.",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**    feature    **What is the current behavior?**    [Reparenting](https://github.com/facebook/react/issues/3965) is an unsolved issues of React(DOM). So far, it was possible to hack around the missing support for it by relying on unstable API (`unstable_renderSubtreeIntoContainer`) to render **and update** a subtree inside a different container. It's important to note that this API was using React's diffing algorithm so that, similar to `ReactDOM.render()`, it is possible to keep components mounted.        However this unstable API is [going to be deprecated soon](https://github.com/facebook/react/issues/10143) and recent features like the introduction of the new context API introduced [additional issues](https://github.com/facebook/react/issues/12493).    As an alternative to this unstable API, `ReactDOM.createPortal(children, container)` was introduced. However this API is unsuitable for the reparenting issue since it will always [create a new mount point](https://github.com/facebook/react/issues/10713) inside the `container` instead of applying the diffing _when called from a different parent_ (Check out this [CodeSandbox](https://codesandbox.io/s/91o7oovo54) where calling the portal from a different portal will cause the `<Leaf />` to have a new uuid). The reason for this is that we want multiple portals to be able to render inside the same `container` which makes perfect sense for more common use cases like popovers, etc.    Before we're going to remove `unstable_renderSubtreeIntoContainer`, I suggest we find a way to portal into a specific node instead of appending to it so that we can diff its contents instead (or implement a solution for #3965 although that seems to be more complicated), similar to `unstable_renderSubtreeIntoContainer`.",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** feature **What is the current behavior?**  is an unsolved issues of React(DOM). So far, it was possible to hack around the missing support for it by relying on unstable API (`unstable_renderSubtreeIntoContainer`) to render **and update** a subtree inside a different container. It's important to note that this API was using React's diffing algorithm so that, similar to `ReactDOM.render()`, it is possible to keep components mounted. However this unstable API is  and recent features like the introduction of the new context API introduced . As an alternative to this unstable API, `ReactDOM.createPortal(children, container)` was introduced. However this API is unsuitable for the reparenting issue since it will always  inside the `container` instead of applying the diffing _when called from a different parent_ (Check out this  where calling the portal from a different portal will cause the `` to have a new uuid). The reason for this is that we want multiple portals to be able to render inside the same `container` which makes perfect sense for more common use cases like popovers, etc. Before we're going to remove `unstable_renderSubtreeIntoContainer`, I suggest we find a way to portal into a specific node instead of appending to it so that we can diff its contents instead (or implement a solution for #3965 although that seems to be more complicated), similar to `unstable_renderSubtreeIntoContainer`.",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * feature * * current behavior ? * * unsolved issue react ( dom ) . far , possible hack around missing support relying unstable api ( ` unstable_rendersubtreeintocontainer ` ) render * * update * * subtree inside different container . 's important note api using react 's diffing algorithm , similar ` reactdom.render ( ) ` , possible keep component mounted . however unstable api recent feature like introduction new context api introduced . alternative unstable api , ` reactdom.createportal ( child , container ) ` introduced . however api unsuitable reparenting issue since always inside ` container ` instead applying diffing _when called different parent_ ( check calling portal different portal cause `` new uuid ) . reason want multiple portal able render inside ` container ` make perfect sense common use case like popover , etc . 're going remove ` unstable_rendersubtreeintocontainer ` , suggest find way portal specific node instead appending diff content instead ( implement solution # 3965 although seems complicated ) , similar ` unstable_rendersubtreeintocontainer ` .",
        "title_stopwords_removal_lemmatization": "allow portal used reparenting"
    },
    {
        "issue_id": 331902776,
        "title": "Add a way to compare relative positions of deep children",
        "label": [
            "Type: Feature Request",
            "Resolution: Stale"
        ],
        "date": "2018-06-13T08:58:57Z",
        "status": "closed",
        "description": "Hey,\r\n\r\nIt seems like there is currently no way to take two mounted component instances and tell which one of them is coming earlier in the application structure (they could have been mounted asynchronously, and tracking the instantiation/render/mount time is not enough). Ideologically I cannot traverse the application tree, that is understandable.\r\n\r\nThough, the relative positions are needed sometimes. My use case \u2014 I track focusable elements in the application using context (each focusable element reports of its existence to a focus manager which is provided by the context). This is needed to be able to limit the focusablility/accessibility of all elements which are outside of the currently shown modal dialog/popup so that the focus is trapped inside. For the sake of better accessibility, I need to automatically focus first focusable in the modal dialog when I'm in the keyboard navigation mode. So, I have the references to all focusable elements inside the dialog, but I cannot tell which one comes first using public React API. For web there is a workaround to findDOMNode and compareDocumentPosition(), but that doesn't work with React Native.\r\n\r\nCan we have something similar to compareDocumentPosition() but for React component instances?\r\n\r\nThanks!\r\n",
        "remove_template_description": "Hey,    It seems like there is currently no way to take two mounted component instances and tell which one of them is coming earlier in the application structure (they could have been mounted asynchronously, and tracking the instantiation/render/mount time is not enough). Ideologically I cannot traverse the application tree, that is understandable.    Though, the relative positions are needed sometimes. My use case \u2014 I track focusable elements in the application using context (each focusable element reports of its existence to a focus manager which is provided by the context). This is needed to be able to limit the focusablility/accessibility of all elements which are outside of the currently shown modal dialog/popup so that the focus is trapped inside. For the sake of better accessibility, I need to automatically focus first focusable in the modal dialog when I'm in the keyboard navigation mode. So, I have the references to all focusable elements inside the dialog, but I cannot tell which one comes first using public React API. For web there is a workaround to findDOMNode and compareDocumentPosition(), but that doesn't work with React Native.    Can we have something similar to compareDocumentPosition() but for React component instances?    Thanks!",
        "human_words": "Hey,    It seems like there is currently no way to take two mounted component instances and tell which one of them is coming earlier in the application structure (they could have been mounted asynchronously, and tracking the instantiation/render/mount time is not enough). Ideologically I cannot traverse the application tree, that is understandable.    Though, the relative positions are needed sometimes. My use case \u2014 I track focusable elements in the application using context (each focusable element reports of its existence to a focus manager which is provided by the context). This is needed to be able to limit the focusablility/accessibility of all elements which are outside of the currently shown modal dialog/popup so that the focus is trapped inside. For the sake of better accessibility, I need to automatically focus first focusable in the modal dialog when I'm in the keyboard navigation mode. So, I have the references to all focusable elements inside the dialog, but I cannot tell which one comes first using public React API. For web there is a workaround to findDOMNode and compareDocumentPosition(), but that doesn't work with React Native.    Can we have something similar to compareDocumentPosition() but for React component instances?    Thanks!",
        "human_words_regrex": "Hey, It seems like there is currently no way to take two mounted component instances and tell which one of them is coming earlier in the application structure (they could have been mounted asynchronously, and tracking the instantiation/render/mount time is not enough). Ideologically I cannot traverse the application tree, that is understandable. Though, the relative positions are needed sometimes. My use case \u2014 I track focusable elements in the application using context (each focusable element reports of its existence to a focus manager which is provided by the context). This is needed to be able to limit the focusablility/accessibility of all elements which are outside of the currently shown modal dialog/popup so that the focus is trapped inside. For the sake of better accessibility, I need to automatically focus first focusable in the modal dialog when I'm in the keyboard navigation mode. So, I have the references to all focusable elements inside the dialog, but I cannot tell which one comes first using public React API. For web there is a workaround to findDOMNode and compareDocumentPosition(), but that doesn't work with React Native. Can we have something similar to compareDocumentPosition() but for React component instances? Thanks!",
        "human_words_stopwords_removal_lemmatization": "hey , seems like currently way take two mounted component instance tell one coming earlier application structure ( could mounted asynchronously , tracking instantiation/render/mount time enough ) . ideologically traverse application tree , understandable . though , relative position needed sometimes . use case \u2014 track focusable element application using context ( focusable element report existence focus manager provided context ) . needed able limit focusablility/accessibility element outside currently shown modal dialog/popup focus trapped inside . sake better accessibility , need automatically focus first focusable modal dialog 'm keyboard navigation mode . , reference focusable element inside dialog , tell one come first using public react api . web workaround finddomnode comparedocumentposition ( ) , n't work react native . something similar comparedocumentposition ( ) react component instance ? thanks !",
        "title_stopwords_removal_lemmatization": "add way compare relative position deep child"
    },
    {
        "issue_id": 328163339,
        "title": "Allow `ref` attribute on custom elements",
        "label": [
            "Type: Feature Request",
            "Component: DOM",
            "Resolution: Stale"
        ],
        "date": "2018-05-31T14:31:19Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\nfeature\r\n\r\n**What is the current behavior?**\r\nCreating a custom element with a `ref` attribute currently is not possible, because `React.createElement('my-element', { ref: 'my-attribute' })` will interprete the `ref` attribute in a special sense.\r\n\r\n**What is the expected behavior?**\r\nLike for `htmlFor` it would be great if there were an alias that allows creating a `ref` attribute on a custom element.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n16.3",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**  feature    **What is the current behavior?**  Creating a custom element with a `ref` attribute currently is not possible, because `React.createElement('my-element', { ref: 'my-attribute' })` will interprete the `ref` attribute in a special sense.    **What is the expected behavior?**  Like for `htmlFor` it would be great if there were an alias that allows creating a `ref` attribute on a custom element.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  16.3",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**  feature    **What is the current behavior?**  Creating a custom element with a `ref` attribute currently is not possible, because `React.createElement('my-element', { ref: 'my-attribute' })` will interprete the `ref` attribute in a special sense.    **What is the expected behavior?**  Like for `htmlFor` it would be great if there were an alias that allows creating a `ref` attribute on a custom element.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  16.3",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** feature **What is the current behavior?** Creating a custom element with a `ref` attribute currently is not possible, because `React.createElement('my-element', { ref: 'my-attribute' })` will interprete the `ref` attribute in a special sense. **What is the expected behavior?** Like for `htmlFor` it would be great if there were an alias that allows creating a `ref` attribute on a custom element. **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** 16.3",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * feature * * current behavior ? * * creating custom element ` ref ` attribute currently possible , ` react.createelement ( 'my-element ' , { ref : 'my-attribute ' } ) ` interprete ` ref ` attribute special sense . * * expected behavior ? * * like ` htmlfor ` would great alias allows creating ` ref ` attribute custom element . * * version react , browser / o affected issue ? work previous version react ? * * 16.3",
        "title_stopwords_removal_lemmatization": "allow ` ref ` attribute custom element"
    },
    {
        "issue_id": 326281846,
        "title": "Synthetic (keyboard) events don't implement the .code property",
        "label": [
            "Type: Feature Request",
            "Component: DOM"
        ],
        "date": "2018-05-24T20:33:03Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\n**What is the current behavior?**\r\n`<event>.code` is undefined\r\n\r\n**What is the expected behavior?**\r\n`.code` is a very useful part of the KeyboardEvent spec: https://www.w3.org/TR/uievents/#dom-keyboardevent-code\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nI am on React 16.3, but I saw no mention of this in today's 16.4 changelog.\r\n",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**  Feature    **What is the current behavior?**  `<event>.code` is undefined    **What is the expected behavior?**  `.code` is a very useful part of the KeyboardEvent spec: https://www.w3.org/TR/uievents/#dom-keyboardevent-code    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  I am on React 16.3, but I saw no mention of this in today's 16.4 changelog.",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**  Feature    **What is the current behavior?**  `<event>.code` is undefined    **What is the expected behavior?**  `.code` is a very useful part of the KeyboardEvent spec: https://www.w3.org/TR/uievents/#dom-keyboardevent-code    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  I am on React 16.3, but I saw no mention of this in today's 16.4 changelog.",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** Feature **What is the current behavior?** `.code` is undefined **What is the expected behavior?** `.code` is a very useful part of the KeyboardEvent spec:  **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** I am on React 16.3, but I saw no mention of this in today's 16.4 changelog.",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * feature * * current behavior ? * * ` .code ` undefined * * expected behavior ? * * ` .code ` useful part keyboardevent spec : * * version react , browser / o affected issue ? work previous version react ? * * react 16.3 , saw mention today 's 16.4 changelog .",
        "title_stopwords_removal_lemmatization": "synthetic ( keyboard ) event n't implement .code property"
    },
    {
        "issue_id": 325398911,
        "title": "ReactIs.typeOf for non-elements",
        "label": [
            "Type: Feature Request",
            "Component: ReactIs",
            "Resolution: Stale"
        ],
        "date": "2018-05-22T17:47:53Z",
        "status": "closed",
        "description": "**What is the current behavior?**\r\n\r\n`ReactIs.typeOf` currently only works for element types, it does not allow you to pass a raw `Component` or `ForwardRef` to know the type.\r\n\r\nThe use case for this is in `hoist-non-react-statics` I now need a [special cases for `ForwardRefs`](https://github.com/mridgway/hoist-non-react-statics/issues/48). To do this, I will need to know the type of the source and target components, but currently I would need to turn them into elements first.\r\n\r\nAll of the `ReactIs.is*` functions also have this issue since they use the `typeOf` function internally.\r\n\r\n```js\r\nconst ForwardComponent = React.forwardRef(() => {});\r\n\r\nReactIs.typeOf(ForwardComponent); // undefined\r\nReactIs.typeOf(React.createElement(ForwardComponent)); // Symbol(react.forward_ref)\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nIdeally I could pass in just the Component and get the type of it: \r\n```js\r\nReactIs.typeOf(ForwardComponent) // Symbol(react.forward_ref)\r\n```\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReactIs@16.3.2\r\n",
        "remove_template_description": "**What is the current behavior?**    `ReactIs.typeOf` currently only works for element types, it does not allow you to pass a raw `Component` or `ForwardRef` to know the type.    The use case for this is in `hoist-non-react-statics` I now need a [special cases for `ForwardRefs`](https://github.com/mridgway/hoist-non-react-statics/issues/48). To do this, I will need to know the type of the source and target components, but currently I would need to turn them into elements first.    All of the `ReactIs.is*` functions also have this issue since they use the `typeOf` function internally.    ```js  const ForwardComponent = React.forwardRef(() => {});    ReactIs.typeOf(ForwardComponent); // undefined  ReactIs.typeOf(React.createElement(ForwardComponent)); // Symbol(react.forward_ref)  ```    **What is the expected behavior?**    Ideally I could pass in just the Component and get the type of it:   ```js  ReactIs.typeOf(ForwardComponent) // Symbol(react.forward_ref)  ```    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    ReactIs@16.3.2",
        "human_words": "**What is the current behavior?**    `ReactIs.typeOf` currently only works for element types, it does not allow you to pass a raw `Component` or `ForwardRef` to know the type.    The use case for this is in `hoist-non-react-statics` I now need a [special cases for `ForwardRefs`](https://github.com/mridgway/hoist-non-react-statics/issues/48). To do this, I will need to know the type of the source and target components, but currently I would need to turn them into elements first.    All of the `ReactIs.is*` functions also have this issue since they use the `typeOf` function internally.        **What is the expected behavior?**    Ideally I could pass in just the Component and get the type of it:       **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    ReactIs@16.3.2",
        "human_words_regrex": "**What is the current behavior?** `ReactIs.typeOf` currently only works for element types, it does not allow you to pass a raw `Component` or `ForwardRef` to know the type. The use case for this is in `hoist-non-react-statics` I now need a . To do this, I will need to know the type of the source and target components, but currently I would need to turn them into elements first. All of the `ReactIs.is*` functions also have this issue since they use the `typeOf` function internally. **What is the expected behavior?** Ideally I could pass in just the Component and get the type of it: **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** ReactIs@16.3.2",
        "human_words_stopwords_removal_lemmatization": "* * current behavior ? * * ` reactis.typeof ` currently work element type , allow pas raw ` component ` ` forwardref ` know type . use case ` hoist-non-react-statics ` need . , need know type source target component , currently would need turn element first . ` reactis.is * ` function also issue since use ` typeof ` function internally . * * expected behavior ? * * ideally could pas component get type : * * version react , browser / o affected issue ? work previous version react ? * * reactis @ 16.3.2",
        "title_stopwords_removal_lemmatization": "reactis.typeof non-elements"
    },
    {
        "issue_id": 324507400,
        "title": "Provide HOC for new context API",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2018-05-18T18:21:52Z",
        "status": "closed",
        "description": "I find myself needing a higher-order component every once in a while when using render props, so I can get stuff from context in my lifecycle methods. It's pretty easy to create a HOC from a render prop, so I was wondering how open y'all would be to adding a HOC to the new context API?\r\n\r\nWe can already do this in userland with a little `withContext` helper:\r\n\r\n```js\r\nfunction withContext(Context, Component) {\r\n  return props => {\r\n    return (\r\n      <Context.Consumer>\r\n        {context => <Component {...props} context={context} />}\r\n      </Context.Consumer>\r\n    );\r\n  }\r\n}\r\n\r\nconst AppWithContext = withContext(MyContext, App);\r\n```\r\n\r\nIt would be useful to have this built-in to the new context API, something like:\r\n\r\n```js\r\nconst MyContext = React.createContext();\r\n\r\nconst AppWithContext = MyContext.provide(App, 'optionalNameOfTheProp');\r\n```\r\n\r\nThe second argument to `provide` (the prop name) could default to `context`.\r\n\r\nAnyway, just thought I'd open this up for discussion before making an actual PR that adds this. Thanks for your consideration \ud83d\ude05\r\n\r\n[EDIT: Removed example using `this.context`]",
        "remove_template_description": "I find myself needing a higher-order component every once in a while when using render props, so I can get stuff from context in my lifecycle methods. It's pretty easy to create a HOC from a render prop, so I was wondering how open y'all would be to adding a HOC to the new context API?    We can already do this in userland with a little `withContext` helper:    ```js  function withContext(Context, Component) {    return props => {      return (        <Context.Consumer>          {context => <Component {...props} context={context} />}        </Context.Consumer>      );    }  }    const AppWithContext = withContext(MyContext, App);  ```    It would be useful to have this built-in to the new context API, something like:    ```js  const MyContext = React.createContext();    const AppWithContext = MyContext.provide(App, 'optionalNameOfTheProp');  ```    The second argument to `provide` (the prop name) could default to `context`.    Anyway, just thought I'd open this up for discussion before making an actual PR that adds this. Thanks for your consideration \ud83d\ude05    [EDIT: Removed example using `this.context`]",
        "human_words": "I find myself needing a higher-order component every once in a while when using render props, so I can get stuff from context in my lifecycle methods. It's pretty easy to create a HOC from a render prop, so I was wondering how open y'all would be to adding a HOC to the new context API?    We can already do this in userland with a little `withContext` helper:        It would be useful to have this built-in to the new context API, something like:        The second argument to `provide` (the prop name) could default to `context`.    Anyway, just thought I'd open this up for discussion before making an actual PR that adds this. Thanks for your consideration \ud83d\ude05    [EDIT: Removed example using `this.context`]",
        "human_words_regrex": "I find myself needing a higher-order component every once in a while when using render props, so I can get stuff from context in my lifecycle methods. It's pretty easy to create a HOC from a render prop, so I was wondering how open y'all would be to adding a HOC to the new context API? We can already do this in userland with a little `withContext` helper: It would be useful to have this built-in to the new context API, something like: The second argument to `provide` (the prop name) could default to `context`. Anyway, just thought I'd open this up for discussion before making an actual PR that adds this. Thanks for your consideration \ud83d\ude05 [EDIT: Removed example using `this.context`]",
        "human_words_stopwords_removal_lemmatization": "find needing higher-order component every using render prop , get stuff context lifecycle method . 's pretty easy create hoc render prop , wondering open y'all would adding hoc new context api ? already userland little ` withcontext ` helper : would useful built-in new context api , something like : second argument ` provide ` ( prop name ) could default ` context ` . anyway , thought 'd open discussion making actual pr add . thanks consideration \ud83d\ude05 [ edit : removed example using ` this.context ` ]",
        "title_stopwords_removal_lemmatization": "provide hoc new context api"
    },
    {
        "issue_id": 323459897,
        "title": "Callback in react-test-renderer for component changes",
        "label": [
            "Type: Feature Request",
            "Component: Test Renderer",
            "Resolution: Stale"
        ],
        "date": "2018-05-16T03:52:24Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nfeature\r\n\r\n**What is the current behavior?**\r\nMany react components render multiple times automatically.  Take a graphql component.  First it will render a loading spinner, then the data after it has been fetched.  In react-test-renderer, it's difficult to get a snapshot to consistently render for these types of components.\r\n\r\nCurrently, we set an interval timer and check the component tree to see if the data has loaded and thus rendered.  This approach results in a bunch of unnecessary checks and slows down tests because the interval timer will run after the component has been rendered.\r\n\r\n**What is the expected behavior?**\r\nI would expect react-test-render to allow a callback that will be invoked each time any component in the component tree changes, basically after any component's `componentDidUpdate` ran.  I would expect an API like:\r\n```\r\nimport TestRenderer from 'react-test-renderer';\r\nconst testRenderer = TestRenderer.create(\r\n  <Todos />\r\n);\r\ntestRenderer.onChange(() => {\r\n// check TODOS for whether the data has loaded and do the snapshot\r\n})\r\n```\r\n\r\nThis would be useful in react-dom and react-native.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nIt's a proposal for a new feature, doesn't affect any existing React versions\r\n\r\n",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**  feature    **What is the current behavior?**  Many react components render multiple times automatically.  Take a graphql component.  First it will render a loading spinner, then the data after it has been fetched.  In react-test-renderer, it's difficult to get a snapshot to consistently render for these types of components.    Currently, we set an interval timer and check the component tree to see if the data has loaded and thus rendered.  This approach results in a bunch of unnecessary checks and slows down tests because the interval timer will run after the component has been rendered.    **What is the expected behavior?**  I would expect react-test-render to allow a callback that will be invoked each time any component in the component tree changes, basically after any component's `componentDidUpdate` ran.  I would expect an API like:  ```  import TestRenderer from 'react-test-renderer';  const testRenderer = TestRenderer.create(    <Todos />  );  testRenderer.onChange(() => {  // check TODOS for whether the data has loaded and do the snapshot  })  ```    This would be useful in react-dom and react-native.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  It's a proposal for a new feature, doesn't affect any existing React versions",
        "human_words": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**  feature    **What is the current behavior?**  Many react components render multiple times automatically.  Take a graphql component.  First it will render a loading spinner, then the data after it has been fetched.  In react-test-renderer, it's difficult to get a snapshot to consistently render for these types of components.    Currently, we set an interval timer and check the component tree to see if the data has loaded and thus rendered.  This approach results in a bunch of unnecessary checks and slows down tests because the interval timer will run after the component has been rendered.    **What is the expected behavior?**  I would expect react-test-render to allow a callback that will be invoked each time any component in the component tree changes, basically after any component's `componentDidUpdate` ran.  I would expect an API like:      This would be useful in react-dom and react-native.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  It's a proposal for a new feature, doesn't affect any existing React versions",
        "human_words_regrex": " **Do you want to request a *feature* or report a *bug*?** feature **What is the current behavior?** Many react components render multiple times automatically. Take a graphql component. First it will render a loading spinner, then the data after it has been fetched. In react-test-renderer, it's difficult to get a snapshot to consistently render for these types of components. Currently, we set an interval timer and check the component tree to see if the data has loaded and thus rendered. This approach results in a bunch of unnecessary checks and slows down tests because the interval timer will run after the component has been rendered. **What is the expected behavior?** I would expect react-test-render to allow a callback that will be invoked each time any component in the component tree changes, basically after any component's `componentDidUpdate` ran. I would expect an API like: This would be useful in react-dom and react-native. **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** It's a proposal for a new feature, doesn't affect any existing React versions",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * feature * * current behavior ? * * many react component render multiple time automatically . take graphql component . first render loading spinner , data fetched . react-test-renderer , 's difficult get snapshot consistently render type component . currently , set interval timer check component tree see data loaded thus rendered . approach result bunch unnecessary check slows test interval timer run component rendered . * * expected behavior ? * * would expect react-test-render allow callback invoked time component component tree change , basically component 's ` componentdidupdate ` ran . would expect api like : would useful react-dom react-native . * * version react , browser / o affected issue ? work previous version react ? * * 's proposal new feature , n't affect existing react version",
        "title_stopwords_removal_lemmatization": "callback react-test-renderer component change"
    },
    {
        "issue_id": 323077857,
        "title": "Provide ways to do post-mortem analysis of \u201cMaximum update depth exceeded\u201d error in production.",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2018-05-15T06:05:14Z",
        "status": "open",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\n**What is the current behavior?**\r\nOur error logging systems has been reporting this error in production: \u201cMaximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.\u201d\r\n\r\nHowever, we can\u2019t reliably reproduce this error and it only affects a small percentage of our users. Moreover, we have more than 1,000 in-house components and several third-party components. So, it\u2019s impractical to audit every single component to find out what caused it.\r\n\r\n**What is the expected behavior?**\r\nIt would be much easier for us to debug if, when the nested update count exceeds 1,000 (current NESTED_UPDATE_LIMIT), we could see what components are involved in this nested update chain.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nWe are using React 16.3.1.",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**  Feature    **What is the current behavior?**  Our error logging systems has been reporting this error in production: \u201cMaximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.\u201d    However, we can\u2019t reliably reproduce this error and it only affects a small percentage of our users. Moreover, we have more than 1,000 in-house components and several third-party components. So, it\u2019s impractical to audit every single component to find out what caused it.    **What is the expected behavior?**  It would be much easier for us to debug if, when the nested update count exceeds 1,000 (current NESTED_UPDATE_LIMIT), we could see what components are involved in this nested update chain.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  We are using React 16.3.1.",
        "human_words": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**  Feature    **What is the current behavior?**  Our error logging systems has been reporting this error in production: \u201cMaximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.\u201d    However, we can\u2019t reliably reproduce this error and it only affects a small percentage of our users. Moreover, we have more than 1,000 in-house components and several third-party components. So, it\u2019s impractical to audit every single component to find out what caused it.    **What is the expected behavior?**  It would be much easier for us to debug if, when the nested update count exceeds 1,000 (current NESTED_UPDATE_LIMIT), we could see what components are involved in this nested update chain.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  We are using React 16.3.1.",
        "human_words_regrex": " **Do you want to request a *feature* or report a *bug*?** Feature **What is the current behavior?** Our error logging systems has been reporting this error in production: \u201cMaximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.\u201d However, we can\u2019t reliably reproduce this error and it only affects a small percentage of our users. Moreover, we have more than 1,000 in-house components and several third-party components. So, it\u2019s impractical to audit every single component to find out what caused it. **What is the expected behavior?** It would be much easier for us to debug if, when the nested update count exceeds 1,000 (current NESTED_UPDATE_LIMIT), we could see what components are involved in this nested update chain. **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** We are using React 16.3.1.",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * feature * * current behavior ? * * error logging system reporting error production : \u201c maximum update depth exceeded . happen component repeatedly call setstate inside componentwillupdate componentdidupdate . react limit number nested update prevent infinite loops. \u201d however , \u2019 reliably reproduce error affect small percentage user . moreover , 1,000 in-house component several third-party component . , \u2019 impractical audit every single component find caused . * * expected behavior ? * * would much easier u debug , nested update count exceeds 1,000 ( current nested_update_limit ) , could see component involved nested update chain . * * version react , browser / o affected issue ? work previous version react ? * * using react 16.3.1 .",
        "title_stopwords_removal_lemmatization": "provide way post-mortem analysis \u201c maximum update depth exceeded \u201d error production ."
    },
    {
        "issue_id": 321098249,
        "title": "Cursor jumps to end of input when onChange doesn't call setState",
        "label": [
            "Type: Feature Request",
            "Component: DOM",
            "Resolution: Stale"
        ],
        "date": "2018-05-08T08:54:03Z",
        "status": "closed",
        "description": "[Edit]: **I'm asking for a feature**.\r\n\r\n**Current Behaviour**\r\nAn input `onChange` function that returns a value equalling the prior value causes the cursor to jump to the end of the input. This is the same as [this comment from #995](https://github.com/facebook/react/issues/955#issuecomment-327069204) formally raised as a feature request. \r\n\r\nRepro sandbox: https://codesandbox.io/s/n4k3yx47j\r\nThat same code:  \r\n```javascript\r\nimport React from \"react\";\r\nimport { render } from \"react-dom\";\r\n\r\nclass Input extends React.Component {\r\n  state = { value: \"TypeANumber\" };\r\n\r\n  onChange = e => {\r\n    let nextValue = e.target.value;\r\n\r\n    if (/[0-9]/.test(nextValue)) {\r\n      nextValue = this.state.value;\r\n    }\r\n    this.setState({ value: nextValue });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <input\r\n        type=\"text\"\r\n        value={this.state.value}\r\n        onChange={this.onChange}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nrender(<Input />, document.getElementById(\"root\"));\r\n```\r\n\r\n**What is the expected behavior?**\r\nI'd like the cursor not to jump in the special case where the returned changed value is a rejected change i.e. the 'noop' change. \r\n\r\nI understand fully that react cannot predict cursor position if the value is _changed_ in `onChange`, ~however I cannot currently find an npm module that allows free-length regex filters (vs a fixed length mask)~ or a way to implement a filter myself, without the cursor jumping in this case. \r\n\r\n[Edit]: \r\nSince raising I now fully see this as a feature request for handling a special case of a behaviour that indeed is not a bug, differently. It would be a nice to have as it would allow very straightforward implementation of filters. \r\n\r\nRegarding the non-clarity of how to deal with the general case of non-jumping cursors I think a modernized best practice example would be ideal, but that discussion still lives at #955.  \r\n\r\nI'd be totally fine with this issue being closed by assisting instead with the education of handling the general case. Though, this would still be a nice to have for the API, if possible. \r\n",
        "remove_template_description": "[Edit]: **I'm asking for a feature**.    **Current Behaviour**  An input `onChange` function that returns a value equalling the prior value causes the cursor to jump to the end of the input. This is the same as [this comment from #995](https://github.com/facebook/react/issues/955#issuecomment-327069204) formally raised as a feature request.     Repro sandbox: https://codesandbox.io/s/n4k3yx47j  That same code:    ```javascript  import React from \"react\";  import { render } from \"react-dom\";    class Input extends React.Component {    state = { value: \"TypeANumber\" };      onChange = e => {      let nextValue = e.target.value;        if (/[0-9]/.test(nextValue)) {        nextValue = this.state.value;      }      this.setState({ value: nextValue });    };      render() {      return (        <input          type=\"text\"          value={this.state.value}          onChange={this.onChange}        />      );    }  }    render(<Input />, document.getElementById(\"root\"));  ```    **What is the expected behavior?**  I'd like the cursor not to jump in the special case where the returned changed value is a rejected change i.e. the 'noop' change.     I understand fully that react cannot predict cursor position if the value is _changed_ in `onChange`, ~however I cannot currently find an npm module that allows free-length regex filters (vs a fixed length mask)~ or a way to implement a filter myself, without the cursor jumping in this case.     [Edit]:   Since raising I now fully see this as a feature request for handling a special case of a behaviour that indeed is not a bug, differently. It would be a nice to have as it would allow very straightforward implementation of filters.     Regarding the non-clarity of how to deal with the general case of non-jumping cursors I think a modernized best practice example would be ideal, but that discussion still lives at #955.      I'd be totally fine with this issue being closed by assisting instead with the education of handling the general case. Though, this would still be a nice to have for the API, if possible.",
        "human_words": "[Edit]: **I'm asking for a feature**.    **Current Behaviour**  An input `onChange` function that returns a value equalling the prior value causes the cursor to jump to the end of the input. This is the same as [this comment from #995](https://github.com/facebook/react/issues/955#issuecomment-327069204) formally raised as a feature request.     Repro sandbox: https://codesandbox.io/s/n4k3yx47j  That same code:        **What is the expected behavior?**  I'd like the cursor not to jump in the special case where the returned changed value is a rejected change i.e. the 'noop' change.     I understand fully that react cannot predict cursor position if the value is _changed_ in `onChange`, ~however I cannot currently find an npm module that allows free-length regex filters (vs a fixed length mask)~ or a way to implement a filter myself, without the cursor jumping in this case.     [Edit]:   Since raising I now fully see this as a feature request for handling a special case of a behaviour that indeed is not a bug, differently. It would be a nice to have as it would allow very straightforward implementation of filters.     Regarding the non-clarity of how to deal with the general case of non-jumping cursors I think a modernized best practice example would be ideal, but that discussion still lives at #955.      I'd be totally fine with this issue being closed by assisting instead with the education of handling the general case. Though, this would still be a nice to have for the API, if possible.",
        "human_words_regrex": " formally raised as a feature request. Repro sandbox:  That same code: **What is the expected behavior?** I'd like the cursor not to jump in the special case where the returned changed value is a rejected change i.e. the 'noop' change. I understand fully that react cannot predict cursor position if the value is _changed_ in `onChange`, ~however I cannot currently find an npm module that allows free-length regex filters (vs a fixed length mask)~ or a way to implement a filter myself, without the cursor jumping in this case. [Edit]: Since raising I now fully see this as a feature request for handling a special case of a behaviour that indeed is not a bug, differently. It would be a nice to have as it would allow very straightforward implementation of filters. Regarding the non-clarity of how to deal with the general case of non-jumping cursors I think a modernized best practice example would be ideal, but that discussion still lives at #955. I'd be totally fine with this issue being closed by assisting instead with the education of handling the general case. Though, this would still be a nice to have for the API, if possible.",
        "human_words_stopwords_removal_lemmatization": "formally raised feature request . repro sandbox : code : * * expected behavior ? * * 'd like cursor jump special case returned changed value rejected change i.e . 'noop ' change . understand fully react predict cursor position value _changed_ ` onchange ` , ~however currently find npm module allows free-length regex filter ( v fixed length mask ) ~ way implement filter , without cursor jumping case . [ edit ] : since raising fully see feature request handling special case behaviour indeed bug , differently . would nice would allow straightforward implementation filter . regarding non-clarity deal general case non-jumping cursor think modernized best practice example would ideal , discussion still life # 955. 'd totally fine issue closed assisting instead education handling general case . though , would still nice api , possible .",
        "title_stopwords_removal_lemmatization": "cursor jump end input onchange n't call setstate"
    },
    {
        "issue_id": 320676526,
        "title": "Expose a way of creating a ReactTestInstance for React DOM nodes",
        "label": [
            "Type: Feature Request",
            "Resolution: Stale"
        ],
        "date": "2018-05-07T05:18:39Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\nI would like to request a new feature. \r\n\r\n**What is the current behavior?**\r\nAt the moment there is no way to create an instance of a `ReactTestInstance`. I would love to be able to do something like:\r\n\r\n```js\r\nconst div = document.createElement('div');\r\nconst componentRef = ReactDOM.render(<MyComponentUnderTest />, div); // or renderIntoDocument\r\nconst testInstance = new ReactTestInstance(componentRef);\r\n// now I can run queries using the API of ReactTestInstance\r\n// against a component tree that has been fully DOM rendered\r\ntestInstance.findAll(..)\r\ntestInstance.children.forEach(() => {});\r\ntestInstance.parent\r\n```\r\n\r\n**Why?**\r\nLibraries such as [Enzyme](https://github.com/airbnb/enzyme) can be used to test React components by [full DOM rendering](http://airbnb.io/enzyme/docs/api/mount.html) and providing an API to find components and get information about them.\r\n\r\nAs far as I know, there is no way of querying the component tree created by `ReactDOM.render` without relying on the internals of React nodes. This means that Enzyme, in order to support full DOM rendering and it's querying API, it has to interact with React nodes directly. This reliance causes problems in Enzyme whenever React adds a new node type (forwardRef, ContextProvider/Consumer for example).\r\n\r\nI have started [this RFC](https://github.com/airbnb/enzyme/issues/1648) that proposes that Enzyme uses `ReactTestWrapper` from `react-test-renderer` as a layer on top of React node objects. This allows the library to be decoupled from the internals of React. The solution proposed in the RFC relies on the being able to create a `ReactTestInstance` from a `ReactDOM.render` component tree.\r\n\r\nPlease let me know if this is something you would consider \ud83d\ude04 ",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**  I would like to request a new feature.     **What is the current behavior?**  At the moment there is no way to create an instance of a `ReactTestInstance`. I would love to be able to do something like:    ```js  const div = document.createElement('div');  const componentRef = ReactDOM.render(<MyComponentUnderTest />, div); // or renderIntoDocument  const testInstance = new ReactTestInstance(componentRef);  // now I can run queries using the API of ReactTestInstance  // against a component tree that has been fully DOM rendered  testInstance.findAll(..)  testInstance.children.forEach(() => {});  testInstance.parent  ```    **Why?**  Libraries such as [Enzyme](https://github.com/airbnb/enzyme) can be used to test React components by [full DOM rendering](http://airbnb.io/enzyme/docs/api/mount.html) and providing an API to find components and get information about them.    As far as I know, there is no way of querying the component tree created by `ReactDOM.render` without relying on the internals of React nodes. This means that Enzyme, in order to support full DOM rendering and it's querying API, it has to interact with React nodes directly. This reliance causes problems in Enzyme whenever React adds a new node type (forwardRef, ContextProvider/Consumer for example).    I have started [this RFC](https://github.com/airbnb/enzyme/issues/1648) that proposes that Enzyme uses `ReactTestWrapper` from `react-test-renderer` as a layer on top of React node objects. This allows the library to be decoupled from the internals of React. The solution proposed in the RFC relies on the being able to create a `ReactTestInstance` from a `ReactDOM.render` component tree.    Please let me know if this is something you would consider \ud83d\ude04",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**  I would like to request a new feature.     **What is the current behavior?**  At the moment there is no way to create an instance of a `ReactTestInstance`. I would love to be able to do something like:        **Why?**  Libraries such as [Enzyme](https://github.com/airbnb/enzyme) can be used to test React components by [full DOM rendering](http://airbnb.io/enzyme/docs/api/mount.html) and providing an API to find components and get information about them.    As far as I know, there is no way of querying the component tree created by `ReactDOM.render` without relying on the internals of React nodes. This means that Enzyme, in order to support full DOM rendering and it's querying API, it has to interact with React nodes directly. This reliance causes problems in Enzyme whenever React adds a new node type (forwardRef, ContextProvider/Consumer for example).    I have started [this RFC](https://github.com/airbnb/enzyme/issues/1648) that proposes that Enzyme uses `ReactTestWrapper` from `react-test-renderer` as a layer on top of React node objects. This allows the library to be decoupled from the internals of React. The solution proposed in the RFC relies on the being able to create a `ReactTestInstance` from a `ReactDOM.render` component tree.    Please let me know if this is something you would consider \ud83d\ude04",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** I would like to request a new feature. **What is the current behavior?** At the moment there is no way to create an instance of a `ReactTestInstance`. I would love to be able to do something like: **Why?** Libraries such as  can be used to test React components by  and providing an API to find components and get information about them. As far as I know, there is no way of querying the component tree created by `ReactDOM.render` without relying on the internals of React nodes. This means that Enzyme, in order to support full DOM rendering and it's querying API, it has to interact with React nodes directly. This reliance causes problems in Enzyme whenever React adds a new node type (forwardRef, ContextProvider/Consumer for example). I have started  that proposes that Enzyme uses `ReactTestWrapper` from `react-test-renderer` as a layer on top of React node objects. This allows the library to be decoupled from the internals of React. The solution proposed in the RFC relies on the being able to create a `ReactTestInstance` from a `ReactDOM.render` component tree. Please let me know if this is something you would consider \ud83d\ude04",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * would like request new feature . * * current behavior ? * * moment way create instance ` reacttestinstance ` . would love able something like : * * ? * * library used test react component providing api find component get information . far know , way querying component tree created ` reactdom.render ` without relying internals react node . mean enzyme , order support full dom rendering 's querying api , interact react node directly . reliance cause problem enzyme whenever react add new node type ( forwardref , contextprovider/consumer example ) . started proposes enzyme us ` reacttestwrapper ` ` react-test-renderer ` layer top react node object . allows library decoupled internals react . solution proposed rfc relies able create ` reacttestinstance ` ` reactdom.render ` component tree . please let know something would consider \ud83d\ude04",
        "title_stopwords_removal_lemmatization": "expose way creating reacttestinstance react dom node"
    },
    {
        "issue_id": 317956260,
        "title": "Allow to specify displayName for createContext() providers and consumers",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2018-04-26T09:52:26Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n**What is the current behavior?**\r\nin React tree name of a Context must be like its name in code\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n```js\r\nconst MyContext = React.createContext(null);\r\n```\r\n```js\r\n   <MyContext.Consumer>\r\n   { data => ... }\r\n   </MyContext.Consumer>\r\n```\r\nlet's have a look at React tree in Chrome extention's page\r\n\r\nhere is Context - not MyContext\r\n\r\n**What is the expected behavior?**\r\n\r\nexpexted to see MyContext\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.3.2",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**  bug    **What is the current behavior?**  in React tree name of a Context must be like its name in code    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**  ```js  const MyContext = React.createContext(null);  ```  ```js     <MyContext.Consumer>     { data => ... }     </MyContext.Consumer>  ```  let's have a look at React tree in Chrome extention's page    here is Context - not MyContext    **What is the expected behavior?**    expexted to see MyContext    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    16.3.2",
        "human_words": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**  bug    **What is the current behavior?**  in React tree name of a Context must be like its name in code    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**      let's have a look at React tree in Chrome extention's page    here is Context - not MyContext    **What is the expected behavior?**    expexted to see MyContext    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    16.3.2",
        "human_words_regrex": " **Do you want to request a *feature* or report a *bug*?** bug **What is the current behavior?** in React tree name of a Context must be like its name in code **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle ( or CodeSandbox ( example below:** let's have a look at React tree in Chrome extention's page here is Context - not MyContext **What is the expected behavior?** expexted to see MyContext **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** 16.3.2",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * bug * * current behavior ? * * react tree name context must like name code * * current behavior bug , please provide step reproduce possible minimal demo problem . bug get fixed much faster run code n't dependency react . paste link jsfiddle ( codesandbox ( example : * * let 's look react tree chrome extention 's page context - mycontext * * expected behavior ? * * expexted see mycontext * * version react , browser / o affected issue ? work previous version react ? * * 16.3.2",
        "title_stopwords_removal_lemmatization": "allow specify displayname createcontext ( ) provider consumer"
    },
    {
        "issue_id": 317585510,
        "title": "Show culprit in `Cannot update during an existing state transition...` ?",
        "label": [
            "Type: Feature Request",
            "Resolution: Stale"
        ],
        "date": "2018-04-25T11:23:02Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\n*Feature.*\r\n\r\n**What is the current behavior?**\r\nWe are probably all familiar with the following message.\r\n\r\n```\r\nbundle.js:1\r\n\r\nWarning: Cannot update during an existing state transition (such as within `render`\r\nor another component's constructor). Render methods should be a pure function\r\nof props and state; constructor side-effects are an anti-pattern, but can be moved\r\nto `componentWillMount`.\r\n```\r\n\r\nFor those who never came across this message, it can be created simply by mounting the following component.\r\n\r\n```js\r\nclass UpdateDuringRender extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      text: 'initial',\r\n    };\r\n  }\r\n\r\n  updateState(text) {\r\n    this.setState({ text });\r\n  }\r\n\r\n  render() {\r\n    this.updateState('updated!');\r\n\r\n    return (\r\n      <div>\r\n        {this.state.text}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\nCan we be more specific which component triggers this warning (I think it could be even treated as an optional error)? When this suddenly appears in the app, sometimes it's tough to find the culprit. Some stack trace or at least the offending component would be helpful in the warning message. Not sure how it's solved internally, but yeah, would be a nice hint to help remove anti-patterns.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n`\"react\": \"^16.3.1\"`",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**  *Feature.*    **What is the current behavior?**  We are probably all familiar with the following message.    ```  bundle.js:1    Warning: Cannot update during an existing state transition (such as within `render`  or another component's constructor). Render methods should be a pure function  of props and state; constructor side-effects are an anti-pattern, but can be moved  to `componentWillMount`.  ```    For those who never came across this message, it can be created simply by mounting the following component.    ```js  class UpdateDuringRender extends Component {    constructor(props) {      super(props);      this.state = {        text: 'initial',      };    }      updateState(text) {      this.setState({ text });    }      render() {      this.updateState('updated!');        return (        <div>          {this.state.text}        </div>      );    }  }  ```    **What is the expected behavior?**  Can we be more specific which component triggers this warning (I think it could be even treated as an optional error)? When this suddenly appears in the app, sometimes it's tough to find the culprit. Some stack trace or at least the offending component would be helpful in the warning message. Not sure how it's solved internally, but yeah, would be a nice hint to help remove anti-patterns.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  `\"react\": \"^16.3.1\"`",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**  *Feature.*    **What is the current behavior?**  We are probably all familiar with the following message.        For those who never came across this message, it can be created simply by mounting the following component.        **What is the expected behavior?**  Can we be more specific which component triggers this warning (I think it could be even treated as an optional error)? When this suddenly appears in the app, sometimes it's tough to find the culprit. Some stack trace or at least the offending component would be helpful in the warning message. Not sure how it's solved internally, but yeah, would be a nice hint to help remove anti-patterns.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  `\"react\": \"^16.3.1\"`",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** *Feature.* **What is the current behavior?** We are probably all familiar with the following message. For those who never came across this message, it can be created simply by mounting the following component. **What is the expected behavior?** Can we be more specific which component triggers this warning (I think it could be even treated as an optional error)? When this suddenly appears in the app, sometimes it's tough to find the culprit. Some stack trace or at least the offending component would be helpful in the warning message. Not sure how it's solved internally, but yeah, would be a nice hint to help remove anti-patterns. **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** `\"react\": \"^16.3.1\"`",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * * feature . * * * current behavior ? * * probably familiar following message . never came across message , created simply mounting following component . * * expected behavior ? * * specific component trigger warning ( think could even treated optional error ) ? suddenly appears app , sometimes 's tough find culprit . stack trace least offending component would helpful warning message . sure 's solved internally , yeah , would nice hint help remove anti-patterns . * * version react , browser / o affected issue ? work previous version react ? * * ` `` react '' : `` ^16.3.1 '' `",
        "title_stopwords_removal_lemmatization": "show culprit ` update existing state transition ... ` ?"
    },
    {
        "issue_id": 314697697,
        "title": "Don't call getDerivedStateFromProps on a PureComponent if props are the same?",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2018-04-16T15:06:02Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\n**What is the current behavior?**\r\n`getDerivedStateFromProps` is called on a PureComponent even if the props haven't changed\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n**What is the expected behavior?**\r\nAs is\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nAll\r\n\r\nI was hoping `getDerivedStateFromProps` wouldn't be called on a PureComponent if the props hadn't changed. Any reason why this shouldn't/couldn't be the case?\r\n",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**  Feature    **What is the current behavior?**  `getDerivedStateFromProps` is called on a PureComponent even if the props haven't changed    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**    **What is the expected behavior?**  As is    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  All    I was hoping `getDerivedStateFromProps` wouldn't be called on a PureComponent if the props hadn't changed. Any reason why this shouldn't/couldn't be the case?",
        "human_words": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**  Feature    **What is the current behavior?**  `getDerivedStateFromProps` is called on a PureComponent even if the props haven't changed    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**    **What is the expected behavior?**  As is    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  All    I was hoping `getDerivedStateFromProps` wouldn't be called on a PureComponent if the props hadn't changed. Any reason why this shouldn't/couldn't be the case?",
        "human_words_regrex": " **Do you want to request a *feature* or report a *bug*?** Feature **What is the current behavior?** `getDerivedStateFromProps` is called on a PureComponent even if the props haven't changed **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle ( or CodeSandbox ( example below:** **What is the expected behavior?** As is **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** All I was hoping `getDerivedStateFromProps` wouldn't be called on a PureComponent if the props hadn't changed. Any reason why this shouldn't/couldn't be the case?",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * feature * * current behavior ? * * ` getderivedstatefromprops ` called purecomponent even prop n't changed * * current behavior bug , please provide step reproduce possible minimal demo problem . bug get fixed much faster run code n't dependency react . paste link jsfiddle ( codesandbox ( example : * * * * expected behavior ? * * * * version react , browser / o affected issue ? work previous version react ? * * hoping ` getderivedstatefromprops ` would n't called purecomponent prop n't changed . reason shouldn't/could n't case ?",
        "title_stopwords_removal_lemmatization": "n't call getderivedstatefromprops purecomponent prop ?"
    },
    {
        "issue_id": 314464476,
        "title": "Support partial hydration for static content",
        "label": [
            "Type: Feature Request",
            "Component: Server Rendering"
        ],
        "date": "2018-04-15T23:54:01Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature\r\n\r\n**What is the current behavior?**\r\n\r\nHydrating some server-rendered content can be difficult, inefficient or impossible. For example, in the process of rendering on the server, significant work or additional data may be required for data processing and conversion, such as custom templating or localization. The content can be large too, such as product information or a news article.\r\n \r\nWhen the resulting content is highly dynamic and changes with state, there is no choice but recreate it within React paradigm and recreate it on client. However, complicated server-generated content is often (if not typically) static. Delivering a redundant copy of static content to client just to compare and ignore it during hydration seems a waste of resources and can be prohibitively expensive. \r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://codesandbox.io/s/zx38ow3z8x\r\n\r\n**What is the expected behavior?**\r\n\r\nInstead of additional complications of recreating it on the client with hydration, wouldn\u2019t it be much easier to just accept the content from server as-is and tell hydrate() to leave it alone?\r\n\r\nThere may be a few options for non-hydrating SSR:\r\n\r\n1. Add a new callback `shouldComponentHydrate()` to disable hydration of component content\r\n```javascript\r\nexport default class NoHydrate extends Component {\r\n    // return false to avoid re-rendering of this component in hydrate()\r\n    shouldComponentHydrate() {\r\n        return false;\r\n    }\r\n    render() {\r\n        // on server, simply render content\r\n        // on client, this is never called and server content is accepted as-is\r\n        return (\r\n            <div>\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n```\r\n\r\n2. Access SSR content from DOM in `render()`\r\n_This is probably the worst option, though it is the only one that definitely works currently._\r\n```javascript\r\nexport default class AutoHydrate extends Component {\r\n    render() {\r\n        // on server, simply render content\r\n        // on client, find SSR in dom and re-render using dangerouslySetInnerHTML\r\n        // ** requires a unique id, generated before or during server rendering **\r\n        return (typeof window === 'undefined') ? (\r\n            <div id={this.props.id}>\r\n                {this.props.children}\r\n            </div\r\n        ) : (\r\n            <div id={this.props.id}\r\n                dangerouslySetInnerHTML={{\r\n                    __html: document.getElementById(this.props.id).innerHTML\r\n                }}\r\n            />\r\n        );\r\n    }\r\n}\r\n```\r\n\r\n3. Use `dangerouslySetInnerHTML` with empty content\r\n_It actually works now, but it is not documented that it is supposed to._\r\n```javascript\r\nexport default class Ssr extends Component {\r\n    render() {\r\n        // on server, simply render content\r\n        // on client, render empty content using dangerouslySetInnerHTML,\r\n        // which normally causes a warning of content mismatch and keeps the existing content\r\n        // also add suppressHydrationWarning to turn off the warning.\r\n        return (typeof window === 'undefined') ? (\r\n            <div>\r\n                {this.props.children}\r\n            </div>\r\n        ) : (\r\n            <div\r\n                dangerouslySetInnerHTML={{\r\n                    __html: ''\r\n                }}\r\n                suppressHydrationWarning\r\n            />\r\n        );\r\n    }\r\n}\r\n```\r\n\r\nConsidering that there is a way to make it work now, documenting (3) may be all that needs to happen. However if (1) could be added with same behavior, it would look cleaner.\r\n\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nVersion 16.2. Not sure if the working option 3 has worked before or is supposed to work in future versions.",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**    Feature    **What is the current behavior?**    Hydrating some server-rendered content can be difficult, inefficient or impossible. For example, in the process of rendering on the server, significant work or additional data may be required for data processing and conversion, such as custom templating or localization. The content can be large too, such as product information or a news article.     When the resulting content is highly dynamic and changes with state, there is no choice but recreate it within React paradigm and recreate it on client. However, complicated server-generated content is often (if not typically) static. Delivering a redundant copy of static content to client just to compare and ignore it during hydration seems a waste of resources and can be prohibitively expensive.     **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**    https://codesandbox.io/s/zx38ow3z8x    **What is the expected behavior?**    Instead of additional complications of recreating it on the client with hydration, wouldn\u2019t it be much easier to just accept the content from server as-is and tell hydrate() to leave it alone?    There may be a few options for non-hydrating SSR:    1. Add a new callback `shouldComponentHydrate()` to disable hydration of component content  ```javascript  export default class NoHydrate extends Component {      // return false to avoid re-rendering of this component in hydrate()      shouldComponentHydrate() {          return false;      }      render() {          // on server, simply render content          // on client, this is never called and server content is accepted as-is          return (              <div>                  {this.props.children}              </div>          );      }  }    ```    2. Access SSR content from DOM in `render()`  _This is probably the worst option, though it is the only one that definitely works currently._  ```javascript  export default class AutoHydrate extends Component {      render() {          // on server, simply render content          // on client, find SSR in dom and re-render using dangerouslySetInnerHTML          // ** requires a unique id, generated before or during server rendering **          return (typeof window === 'undefined') ? (              <div id={this.props.id}>                  {this.props.children}              </div          ) : (              <div id={this.props.id}                  dangerouslySetInnerHTML={{                      __html: document.getElementById(this.props.id).innerHTML                  }}              />          );      }  }  ```    3. Use `dangerouslySetInnerHTML` with empty content  _It actually works now, but it is not documented that it is supposed to._  ```javascript  export default class Ssr extends Component {      render() {          // on server, simply render content          // on client, render empty content using dangerouslySetInnerHTML,          // which normally causes a warning of content mismatch and keeps the existing content          // also add suppressHydrationWarning to turn off the warning.          return (typeof window === 'undefined') ? (              <div>                  {this.props.children}              </div>          ) : (              <div                  dangerouslySetInnerHTML={{                      __html: ''                  }}                  suppressHydrationWarning              />          );      }  }  ```    Considering that there is a way to make it work now, documenting (3) may be all that needs to happen. However if (1) could be added with same behavior, it would look cleaner.      **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    Version 16.2. Not sure if the working option 3 has worked before or is supposed to work in future versions.",
        "human_words": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**    Feature    **What is the current behavior?**    Hydrating some server-rendered content can be difficult, inefficient or impossible. For example, in the process of rendering on the server, significant work or additional data may be required for data processing and conversion, such as custom templating or localization. The content can be large too, such as product information or a news article.     When the resulting content is highly dynamic and changes with state, there is no choice but recreate it within React paradigm and recreate it on client. However, complicated server-generated content is often (if not typically) static. Delivering a redundant copy of static content to client just to compare and ignore it during hydration seems a waste of resources and can be prohibitively expensive.     **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**    https://codesandbox.io/s/zx38ow3z8x    **What is the expected behavior?**    Instead of additional complications of recreating it on the client with hydration, wouldn\u2019t it be much easier to just accept the content from server as-is and tell hydrate() to leave it alone?    There may be a few options for non-hydrating SSR:    1. Add a new callback `shouldComponentHydrate()` to disable hydration of component content      2. Access SSR content from DOM in `render()`  _This is probably the worst option, though it is the only one that definitely works currently._      3. Use `dangerouslySetInnerHTML` with empty content  _It actually works now, but it is not documented that it is supposed to._      Considering that there is a way to make it work now, documenting (3) may be all that needs to happen. However if (1) could be added with same behavior, it would look cleaner.      **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    Version 16.2. Not sure if the working option 3 has worked before or is supposed to work in future versions.",
        "human_words_regrex": " **Do you want to request a *feature* or report a *bug*?** Feature **What is the current behavior?** Hydrating some server-rendered content can be difficult, inefficient or impossible. For example, in the process of rendering on the server, significant work or additional data may be required for data processing and conversion, such as custom templating or localization. The content can be large too, such as product information or a news article. When the resulting content is highly dynamic and changes with state, there is no choice but recreate it within React paradigm and recreate it on client. However, complicated server-generated content is often (if not typically) static. Delivering a redundant copy of static content to client just to compare and ignore it during hydration seems a waste of resources and can be prohibitively expensive. **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle ( or CodeSandbox ( example below:**  **What is the expected behavior?** Instead of additional complications of recreating it on the client with hydration, wouldn\u2019t it be much easier to just accept the content from server as-is and tell hydrate() to leave it alone? There may be a few options for non-hydrating SSR: 1. Add a new callback `shouldComponentHydrate()` to disable hydration of component content 2. Access SSR content from DOM in `render()` _This is probably the worst option, though it is the only one that definitely works currently._ 3. Use `dangerouslySetInnerHTML` with empty content _It actually works now, but it is not documented that it is supposed to._ Considering that there is a way to make it work now, documenting (3) may be all that needs to happen. However if (1) could be added with same behavior, it would look cleaner. **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** Version 16.2. Not sure if the working option 3 has worked before or is supposed to work in future versions.",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * feature * * current behavior ? * * hydrating server-rendered content difficult , inefficient impossible . example , process rendering server , significant work additional data may required data processing conversion , custom templating localization . content large , product information news article . resulting content highly dynamic change state , choice recreate within react paradigm recreate client . however , complicated server-generated content often ( typically ) static . delivering redundant copy static content client compare ignore hydration seems waste resource prohibitively expensive . * * current behavior bug , please provide step reproduce possible minimal demo problem . bug get fixed much faster run code n't dependency react . paste link jsfiddle ( codesandbox ( example : * * * * expected behavior ? * * instead additional complication recreating client hydration , \u2019 much easier accept content server as-is tell hydrate ( ) leave alone ? may option non-hydrating ssr : 1. add new callback ` shouldcomponenthydrate ( ) ` disable hydration component content 2. access ssr content dom ` render ( ) ` _this probably worst option , though one definitely work currently._ 3. use ` dangerouslysetinnerhtml ` empty content _it actually work , documented supposed to._ considering way make work , documenting ( 3 ) may need happen . however ( 1 ) could added behavior , would look cleaner . * * version react , browser / o affected issue ? work previous version react ? * * version 16.2. sure working option 3 worked supposed work future version .",
        "title_stopwords_removal_lemmatization": "support partial hydration static content"
    },
    {
        "issue_id": 311248128,
        "title": "Support hydration after HTML minification",
        "label": [
            "Type: Feature Request",
            "Component: Server Rendering",
            "Resolution: Stale"
        ],
        "date": "2018-04-04T14:13:55Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\nReport a bug\r\n\r\n**What is the current behavior?**\r\n`React.hydrate` replaces the DOM after a SSR page is served, and two sibling links in the page have the `href` attributes wrongly set.\r\n\r\nI did a little repl to replicate this behaviour [here](https://repl.it/@EnoahNetzach/SSR-whitespace-mismatch).\r\n\r\nWhen the server responds, the HTML is correct:\r\n\r\n![screen shot 2018-04-04 at 16 08 06](https://user-images.githubusercontent.com/663755/38312693-b1167650-3822-11e8-85f3-0f100caf8a50.png)\r\n\r\nbut right after hydration, the first `href` is changed: \r\n\r\n![screen shot 2018-04-04 at 16 08 20](https://user-images.githubusercontent.com/663755/38312738-c96e1b4a-3822-11e8-9e7e-0d6a9fa24ed2.png)\r\nand whitespace artifacts are added.\r\n\r\n**What is the expected behavior?**\r\nThe first `href` should not be changed.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact v16.2\r\nChrome 65.0\r\nmacOS\r\n",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**  Report a bug    **What is the current behavior?**  `React.hydrate` replaces the DOM after a SSR page is served, and two sibling links in the page have the `href` attributes wrongly set.    I did a little repl to replicate this behaviour [here](https://repl.it/@EnoahNetzach/SSR-whitespace-mismatch).    When the server responds, the HTML is correct:    ![screen shot 2018-04-04 at 16 08 06](https://user-images.githubusercontent.com/663755/38312693-b1167650-3822-11e8-85f3-0f100caf8a50.png)    but right after hydration, the first `href` is changed:     ![screen shot 2018-04-04 at 16 08 20](https://user-images.githubusercontent.com/663755/38312738-c96e1b4a-3822-11e8-9e7e-0d6a9fa24ed2.png)  and whitespace artifacts are added.    **What is the expected behavior?**  The first `href` should not be changed.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  React v16.2  Chrome 65.0  macOS",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**  Report a bug    **What is the current behavior?**  `React.hydrate` replaces the DOM after a SSR page is served, and two sibling links in the page have the `href` attributes wrongly set.    I did a little repl to replicate this behaviour [here](https://repl.it/@EnoahNetzach/SSR-whitespace-mismatch).    When the server responds, the HTML is correct:    ![screen shot 2018-04-04 at 16 08 06](https://user-images.githubusercontent.com/663755/38312693-b1167650-3822-11e8-85f3-0f100caf8a50.png)    but right after hydration, the first `href` is changed:     ![screen shot 2018-04-04 at 16 08 20](https://user-images.githubusercontent.com/663755/38312738-c96e1b4a-3822-11e8-9e7e-0d6a9fa24ed2.png)  and whitespace artifacts are added.    **What is the expected behavior?**  The first `href` should not be changed.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  React v16.2  Chrome 65.0  macOS",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** Report a bug **What is the current behavior?** `React.hydrate` replaces the DOM after a SSR page is served, and two sibling links in the page have the `href` attributes wrongly set. I did a little repl to replicate this behaviour . When the server responds, the HTML is correct: ! but right after hydration, the first `href` is changed: ! and whitespace artifacts are added. **What is the expected behavior?** The first `href` should not be changed. **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** React v16.2 Chrome 65.0 macOS",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * report bug * * current behavior ? * * ` react.hydrate ` replaces dom ssr page served , two sibling link page ` href ` attribute wrongly set . little repl replicate behaviour . server responds , html correct : ! right hydration , first ` href ` changed : ! whitespace artifact added . * * expected behavior ? * * first ` href ` changed . * * version react , browser / o affected issue ? work previous version react ? * * react v16.2 chrome 65.0 macos",
        "title_stopwords_removal_lemmatization": "support hydration html minification"
    },
    {
        "issue_id": 310899571,
        "title": "Provide a way to detect infinite component rendering recursion in development",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2018-04-03T16:04:05Z",
        "status": "open",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n- Feature (possibly bug?)\r\n\r\n**What is the current behavior?**\r\n\r\nI've been trying out the new Context API in my project and it's awesome. However, in my haste to start using it, I managed to stumble into a situation where every time I would try and render a certain component which was making use of a few different contexts, the app would completely freeze, and the only thing that would let me get out of this error state was to forcefully kill the process via the chrome task manager.\r\n\r\nNothing would be logged to the console, the app would just completely freeze, and when I opened up the task manager and saw the CPU spiked up every time i would go to this component, and the only way I could stop it was to crash the tab. \r\n\r\nI finally threw some `console` statements in and saw that it had just entered into an infinite loop between these providers. I managed to get the app to stop crashing, but I'm still unsure as to why exactly this was happening. I'm sure I was just using this API incorrectly somehow, but this was a very confusing problem to diagnose, and some error checking here would be incredibly useful\r\n\r\n**What is the expected behavior?**\r\n\r\nIt would be very beneficial to have some sort of checks in place, similar to what happens with too many `setState` calls happening too closely when you call it from `componentDidUpdate`, for example. That way, instead of freezing everything up permanently, the app could at least crash and report some sort of information and help me realize where I'd gone wrong.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n- React `16.3.0`\r\n- Chrome `65.0.3325.181`\r\n\r\n",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**  - Feature (possibly bug?)    **What is the current behavior?**    I've been trying out the new Context API in my project and it's awesome. However, in my haste to start using it, I managed to stumble into a situation where every time I would try and render a certain component which was making use of a few different contexts, the app would completely freeze, and the only thing that would let me get out of this error state was to forcefully kill the process via the chrome task manager.    Nothing would be logged to the console, the app would just completely freeze, and when I opened up the task manager and saw the CPU spiked up every time i would go to this component, and the only way I could stop it was to crash the tab.     I finally threw some `console` statements in and saw that it had just entered into an infinite loop between these providers. I managed to get the app to stop crashing, but I'm still unsure as to why exactly this was happening. I'm sure I was just using this API incorrectly somehow, but this was a very confusing problem to diagnose, and some error checking here would be incredibly useful    **What is the expected behavior?**    It would be very beneficial to have some sort of checks in place, similar to what happens with too many `setState` calls happening too closely when you call it from `componentDidUpdate`, for example. That way, instead of freezing everything up permanently, the app could at least crash and report some sort of information and help me realize where I'd gone wrong.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  - React `16.3.0`  - Chrome `65.0.3325.181`",
        "human_words": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**  - Feature (possibly bug?)    **What is the current behavior?**    I've been trying out the new Context API in my project and it's awesome. However, in my haste to start using it, I managed to stumble into a situation where every time I would try and render a certain component which was making use of a few different contexts, the app would completely freeze, and the only thing that would let me get out of this error state was to forcefully kill the process via the chrome task manager.    Nothing would be logged to the console, the app would just completely freeze, and when I opened up the task manager and saw the CPU spiked up every time i would go to this component, and the only way I could stop it was to crash the tab.     I finally threw some `console` statements in and saw that it had just entered into an infinite loop between these providers. I managed to get the app to stop crashing, but I'm still unsure as to why exactly this was happening. I'm sure I was just using this API incorrectly somehow, but this was a very confusing problem to diagnose, and some error checking here would be incredibly useful    **What is the expected behavior?**    It would be very beneficial to have some sort of checks in place, similar to what happens with too many `setState` calls happening too closely when you call it from `componentDidUpdate`, for example. That way, instead of freezing everything up permanently, the app could at least crash and report some sort of information and help me realize where I'd gone wrong.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  - React `16.3.0`  - Chrome `65.0.3325.181`",
        "human_words_regrex": " **Do you want to request a *feature* or report a *bug*?** - Feature (possibly bug?) **What is the current behavior?** I've been trying out the new Context API in my project and it's awesome. However, in my haste to start using it, I managed to stumble into a situation where every time I would try and render a certain component which was making use of a few different contexts, the app would completely freeze, and the only thing that would let me get out of this error state was to forcefully kill the process via the chrome task manager. Nothing would be logged to the console, the app would just completely freeze, and when I opened up the task manager and saw the CPU spiked up every time i would go to this component, and the only way I could stop it was to crash the tab. I finally threw some `console` statements in and saw that it had just entered into an infinite loop between these providers. I managed to get the app to stop crashing, but I'm still unsure as to why exactly this was happening. I'm sure I was just using this API incorrectly somehow, but this was a very confusing problem to diagnose, and some error checking here would be incredibly useful **What is the expected behavior?** It would be very beneficial to have some sort of checks in place, similar to what happens with too many `setState` calls happening too closely when you call it from `componentDidUpdate`, for example. That way, instead of freezing everything up permanently, the app could at least crash and report some sort of information and help me realize where I'd gone wrong. **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** - React `16.3.0` - Chrome `65.0.3325.181`",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * - feature ( possibly bug ? ) * * current behavior ? * * 've trying new context api project 's awesome . however , haste start using , managed stumble situation every time would try render certain component making use different context , app would completely freeze , thing would let get error state forcefully kill process via chrome task manager . nothing would logged console , app would completely freeze , opened task manager saw cpu spiked every time would go component , way could stop crash tab . finally threw ` console ` statement saw entered infinite loop provider . managed get app stop crashing , 'm still unsure exactly happening . 'm sure using api incorrectly somehow , confusing problem diagnose , error checking would incredibly useful * * expected behavior ? * * would beneficial sort check place , similar happens many ` setstate ` call happening closely call ` componentdidupdate ` , example . way , instead freezing everything permanently , app could least crash report sort information help realize 'd gone wrong . * * version react , browser / o affected issue ? work previous version react ? * * - react ` 16.3.0 ` - chrome ` 65.0.3325.181 `",
        "title_stopwords_removal_lemmatization": "provide way detect infinite component rendering recursion development"
    },
    {
        "issue_id": 310182491,
        "title": "Uncaught Error: Unexpected object passed to ReactTestInstance constructor (tag: 13). This is probably a bug in React.",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2018-03-30T22:23:24Z",
        "status": "closed",
        "description": "Hello,\r\n\r\nI'm testing v16.3.0 and I'm getting this warning:\r\n```\r\nWarning: Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported \r\n```\r\n\r\n My use case is that I wanted to render React Test Renderer (for ex) from a Component in an another (ReactDOM) renderer but it does not seem to work - I wanted to use same Provider in both containers.\r\n\r\nI thought `React.createContext` create objects with no state and could be shared across renderers / Fiber containers.. Is there workaround for this? Are there any thoughts on this, Is this a definite behaviour?\r\n\r\nFollowing the warning, I eventually get the error message which I believe is related to the warning:\r\n\r\n```\r\nUncaught Error: Unexpected object passed to ReactTestInstance constructor (tag: 13). This is probably a bug in React.\r\n```\r\n\r\nthank you for any guidance :)",
        "remove_template_description": "Hello,    I'm testing v16.3.0 and I'm getting this warning:  ```  Warning: Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported   ```     My use case is that I wanted to render React Test Renderer (for ex) from a Component in an another (ReactDOM) renderer but it does not seem to work - I wanted to use same Provider in both containers.    I thought `React.createContext` create objects with no state and could be shared across renderers / Fiber containers.. Is there workaround for this? Are there any thoughts on this, Is this a definite behaviour?    Following the warning, I eventually get the error message which I believe is related to the warning:    ```  Uncaught Error: Unexpected object passed to ReactTestInstance constructor (tag: 13). This is probably a bug in React.  ```    thank you for any guidance :)",
        "human_words": "Hello,    I'm testing v16.3.0 and I'm getting this warning:       My use case is that I wanted to render React Test Renderer (for ex) from a Component in an another (ReactDOM) renderer but it does not seem to work - I wanted to use same Provider in both containers.    I thought `React.createContext` create objects with no state and could be shared across renderers / Fiber containers.. Is there workaround for this? Are there any thoughts on this, Is this a definite behaviour?    Following the warning, I eventually get the error message which I believe is related to the warning:        thank you for any guidance :)",
        "human_words_regrex": "Hello, I'm testing v16.3.0 and I'm getting this warning: My use case is that I wanted to render React Test Renderer (for ex) from a Component in an another (ReactDOM) renderer but it does not seem to work - I wanted to use same Provider in both containers. I thought `React.createContext` create objects with no state and could be shared across renderers / Fiber containers.. Is there workaround for this? Are there any thoughts on this, Is this a definite behaviour? Following the warning, I eventually get the error message which I believe is related to the warning: thank you for any guidance :)",
        "human_words_stopwords_removal_lemmatization": "hello , 'm testing v16.3.0 'm getting warning : use case wanted render react test renderer ( ex ) component another ( reactdom ) renderer seem work - wanted use provider container . thought ` react.createcontext ` create object state could shared across renderers / fiber container .. workaround ? thought , definite behaviour ? following warning , eventually get error message believe related warning : thank guidance : )",
        "title_stopwords_removal_lemmatization": "uncaught error : unexpected object passed reacttestinstance constructor ( tag : 13 ) . probably bug react ."
    },
    {
        "issue_id": 309986185,
        "title": "Provide a better error on React.cloneElement(null/undefined)",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2018-03-30T06:21:12Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\n**What is the current behavior?**\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n**What is the expected behavior?**\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n![image](https://user-images.githubusercontent.com/5977311/38124026-a0984a98-3411-11e8-838f-2d6f3dc97046.png)\r\n",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**    **What is the current behavior?**    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**    **What is the expected behavior?**    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  ![image](https://user-images.githubusercontent.com/5977311/38124026-a0984a98-3411-11e8-838f-2d6f3dc97046.png)",
        "human_words": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**    **What is the current behavior?**    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**    **What is the expected behavior?**    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  ![image](https://user-images.githubusercontent.com/5977311/38124026-a0984a98-3411-11e8-838f-2d6f3dc97046.png)",
        "human_words_regrex": " **Do you want to request a *feature* or report a *bug*?** **What is the current behavior?** **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle ( or CodeSandbox ( example below:** **What is the expected behavior?** **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** !",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * * * current behavior ? * * * * current behavior bug , please provide step reproduce possible minimal demo problem . bug get fixed much faster run code n't dependency react . paste link jsfiddle ( codesandbox ( example : * * * * expected behavior ? * * * * version react , browser / o affected issue ? work previous version react ? * * !",
        "title_stopwords_removal_lemmatization": "provide better error react.cloneelement ( null/undefined )"
    },
    {
        "issue_id": 309665864,
        "title": "[SVG] Enable focusable to accept boolean values",
        "label": [
            "Type: Feature Request",
            "Component: DOM"
        ],
        "date": "2018-03-29T08:35:33Z",
        "status": "closed",
        "description": "Moved discussion from https://github.com/facebook/react/issues/6212.\r\n\r\n## Situation\r\n\r\nThe [`focusable` attribute](https://www.w3.org/TR/SVGTiny12/interact.html#focusable-attr) from the SVG specifications is an [enumerated attribute](https://html.spec.whatwg.org/#keywords-and-enumerated-attributes) accepting values `\"true\"`, `\"false\"` and `\"auto\"`. Because it is technically not a boolean attribute (although it certainly somehow looks like it), React expects the value to be passed as a string. See the following example:\r\n\r\n```diff\r\n-<svg focusable>I should be focusable</svg>\r\n-<svg focusable={true}>I should be focusable</svg>\r\n+<svg focusable='true'>I should be focusable</svg>\r\n```\r\n\r\nThe thing is, the `focusable` attribute is often used in conjunction with elements from the ARIA specification, in which attributes are booleans and not enumerated attributes with `\"true\"` and `\"false\"` values. The [`aria-hidden` attribute](https://www.w3.org/TR/wai-aria-1.1/#aria-hidden) is a good example of that.\r\n\r\nFor instance, [following a good practice for icon-buttons](https://fvsch.com/code/svg-icons/#section-html):\r\n\r\n```html\r\n<button type=\"button\">\r\n  <svg aria-hidden=\"true\" focusable=\"false\">\r\n    <use xlink:href=\"#icon-play\"></use>\r\n  </svg>\r\n  <span class=\"access-label\">Start playback</span>\r\n</button>\r\n```\r\n\r\nFrom an authoring perspective, the above snippet would likely be written like this in JSX:\r\n\r\n```jsx\r\n<button type='button'>\r\n  <Icon icon='play' aria-hidden={true} focusable={false} />\r\n  <span class='access-label'>Start playback</span>\r\n</button>\r\n```\r\n\r\nThe problem is that `focusable` **cannot** be authored as a boolean, otherwise it will **not** be printed out in the DOM. On the other hand, `aria-hidden` is perfectly fine being written as a boolean at it gets coerced by React.\r\n\r\n## Proposal\r\n\r\nGiven the default value for the `focusable` attribute is `\"auto\"`, this is very likely this attribute gets authored to change its value to `true` or `false`. In that regard, it is confusing that it has to be specified as a string, when other attributes accepting booleans can be authored as such.\r\n\r\nThe suggestion would be to make it possible for `focusable` to be specified as either a boolean or a string, like other similar attributes. In other words, all the following should work:\r\n\r\n```jsx\r\n<svg focusable>I should be focusable</svg>\r\n<svg focusable={true}>I should be focusable</svg>\r\n<svg focusable='true'>I should be focusable</svg>\r\n<svg focusable={false}>I should not be focusable</svg>\r\n<svg focusable='false'>I should not be focusable</svg>\r\n<svg focusable='auto'>I should be focusable</svg>\r\n```\r\n\r\nFrom an authoring perspective, I believe this would be the most straightforward and less confusing.",
        "remove_template_description": "Moved discussion from https://github.com/facebook/react/issues/6212.    ## Situation    The [`focusable` attribute](https://www.w3.org/TR/SVGTiny12/interact.html#focusable-attr) from the SVG specifications is an [enumerated attribute](https://html.spec.whatwg.org/#keywords-and-enumerated-attributes) accepting values `\"true\"`, `\"false\"` and `\"auto\"`. Because it is technically not a boolean attribute (although it certainly somehow looks like it), React expects the value to be passed as a string. See the following example:    ```diff  -<svg focusable>I should be focusable</svg>  -<svg focusable={true}>I should be focusable</svg>  +<svg focusable='true'>I should be focusable</svg>  ```    The thing is, the `focusable` attribute is often used in conjunction with elements from the ARIA specification, in which attributes are booleans and not enumerated attributes with `\"true\"` and `\"false\"` values. The [`aria-hidden` attribute](https://www.w3.org/TR/wai-aria-1.1/#aria-hidden) is a good example of that.    For instance, [following a good practice for icon-buttons](https://fvsch.com/code/svg-icons/#section-html):    ```html  <button type=\"button\">    <svg aria-hidden=\"true\" focusable=\"false\">      <use xlink:href=\"#icon-play\"></use>    </svg>    <span class=\"access-label\">Start playback</span>  </button>  ```    From an authoring perspective, the above snippet would likely be written like this in JSX:    ```jsx  <button type='button'>    <Icon icon='play' aria-hidden={true} focusable={false} />    <span class='access-label'>Start playback</span>  </button>  ```    The problem is that `focusable` **cannot** be authored as a boolean, otherwise it will **not** be printed out in the DOM. On the other hand, `aria-hidden` is perfectly fine being written as a boolean at it gets coerced by React.    ## Proposal    Given the default value for the `focusable` attribute is `\"auto\"`, this is very likely this attribute gets authored to change its value to `true` or `false`. In that regard, it is confusing that it has to be specified as a string, when other attributes accepting booleans can be authored as such.    The suggestion would be to make it possible for `focusable` to be specified as either a boolean or a string, like other similar attributes. In other words, all the following should work:    ```jsx  <svg focusable>I should be focusable</svg>  <svg focusable={true}>I should be focusable</svg>  <svg focusable='true'>I should be focusable</svg>  <svg focusable={false}>I should not be focusable</svg>  <svg focusable='false'>I should not be focusable</svg>  <svg focusable='auto'>I should be focusable</svg>  ```    From an authoring perspective, I believe this would be the most straightforward and less confusing.",
        "human_words": "Moved discussion from https://github.com/facebook/react/issues/6212.    ## Situation    The [`focusable` attribute](https://www.w3.org/TR/SVGTiny12/interact.html#focusable-attr) from the SVG specifications is an [enumerated attribute](https://html.spec.whatwg.org/#keywords-and-enumerated-attributes) accepting values `\"true\"`, `\"false\"` and `\"auto\"`. Because it is technically not a boolean attribute (although it certainly somehow looks like it), React expects the value to be passed as a string. See the following example:        The thing is, the `focusable` attribute is often used in conjunction with elements from the ARIA specification, in which attributes are booleans and not enumerated attributes with `\"true\"` and `\"false\"` values. The [`aria-hidden` attribute](https://www.w3.org/TR/wai-aria-1.1/#aria-hidden) is a good example of that.    For instance, [following a good practice for icon-buttons](https://fvsch.com/code/svg-icons/#section-html):        From an authoring perspective, the above snippet would likely be written like this in JSX:        The problem is that `focusable` **cannot** be authored as a boolean, otherwise it will **not** be printed out in the DOM. On the other hand, `aria-hidden` is perfectly fine being written as a boolean at it gets coerced by React.    ## Proposal    Given the default value for the `focusable` attribute is `\"auto\"`, this is very likely this attribute gets authored to change its value to `true` or `false`. In that regard, it is confusing that it has to be specified as a string, when other attributes accepting booleans can be authored as such.    The suggestion would be to make it possible for `focusable` to be specified as either a boolean or a string, like other similar attributes. In other words, all the following should work:        From an authoring perspective, I believe this would be the most straightforward and less confusing.",
        "human_words_regrex": "Moved discussion from  ## Situation The  from the SVG specifications is an  accepting values `\"true\"`, `\"false\"` and `\"auto\"`. Because it is technically not a boolean attribute (although it certainly somehow looks like it), React expects the value to be passed as a string. See the following example: The thing is, the `focusable` attribute is often used in conjunction with elements from the ARIA specification, in which attributes are booleans and not enumerated attributes with `\"true\"` and `\"false\"` values. The  is a good example of that. For instance, : From an authoring perspective, the above snippet would likely be written like this in JSX: The problem is that `focusable` **cannot** be authored as a boolean, otherwise it will **not** be printed out in the DOM. On the other hand, `aria-hidden` is perfectly fine being written as a boolean at it gets coerced by React. ## Proposal Given the default value for the `focusable` attribute is `\"auto\"`, this is very likely this attribute gets authored to change its value to `true` or `false`. In that regard, it is confusing that it has to be specified as a string, when other attributes accepting booleans can be authored as such. The suggestion would be to make it possible for `focusable` to be specified as either a boolean or a string, like other similar attributes. In other words, all the following should work: From an authoring perspective, I believe this would be the most straightforward and less confusing.",
        "human_words_stopwords_removal_lemmatization": "moved discussion # # situation svg specification accepting value ` `` true '' ` , ` `` false '' ` ` `` auto '' ` . technically boolean attribute ( although certainly somehow look like ) , react expects value passed string . see following example : thing , ` focusable ` attribute often used conjunction element aria specification , attribute booleans enumerated attribute ` `` true '' ` ` `` false '' ` value . good example . instance , : authoring perspective , snippet would likely written like jsx : problem ` focusable ` * * * * authored boolean , otherwise * * * * printed dom . hand , ` aria-hidden ` perfectly fine written boolean get coerced react . # # proposal given default value ` focusable ` attribute ` `` auto '' ` , likely attribute get authored change value ` true ` ` false ` . regard , confusing specified string , attribute accepting booleans authored . suggestion would make possible ` focusable ` specified either boolean string , like similar attribute . word , following work : authoring perspective , believe would straightforward le confusing .",
        "title_stopwords_removal_lemmatization": "[ svg ] enable focusable accept boolean value"
    },
    {
        "issue_id": 309527937,
        "title": "Issues with ReactControlledValuePropTypes",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2018-03-28T20:54:22Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nSee below.\r\n\r\n**What is the current behavior?**\r\n\r\n1. (Bug / Inconsistency)\r\n```jsx\r\n<input type=\"radio\" checked={false} />\r\n```\r\nNo Warning.\r\n\r\n2. (Feature Request)\r\n```jsx\r\n<input type=\"radio\" checked={true} onChange={undefined} />\r\n```\r\n`Warning: Failed prop type: You provided a 'checked' prop to a form field without an 'onChange' handler. This will render a read-only field. If the field should be mutable use 'defaultChecked'. Otherwise, set either 'onChange' or 'readOnly'.'`\r\n\r\n3. (Bug?)\r\n```jsx\r\n<select value=\"foo\" readOnly={true}>...</select>\r\n```\r\nNo warning.\r\n\r\n**What is the expected behavior?**\r\n\r\n1. Passing a falsy `value` or `checked` attribute will not trigger a warning, but a truthy value does.\r\n\r\n2. If onChange is passed as undefined (or null?) this should be considered as an acknowledgement and silence the warning. I have a case where I split the render method from the component and use it as a preview. When the component is interactive I use the component. When doing a preview I pass undefined as my change handler. A warning is shown to tell me I \"forgot\" it, but I intended it to be this way.\r\n\r\n3. Going along with 2, I can pass `readOnly={!handleChange}`, but according to DefinitelyTyped this isn't a valid attribute for select. I can't use disabled because it changes the appearance of the field.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.2.0\r\nChrome 65\r\n\r\n**Other**\r\n\r\nA proposed \"fix\" would be to change:\r\n\r\nhttps://github.com/facebook/react/blob/37e4329bc81def4695211d6e3795a654ef4d84f5/packages/react-dom/src/shared/ReactControlledValuePropTypes.js#L27-L33\r\n\r\nto:\r\n\r\n```js\r\nif ( \r\n    !(propName in props) || // Fixes 1\r\n    hasReadOnlyValue[props.type] || \r\n    \"onChange\" in props ||  // Fixes 2\r\n    props.readOnly || \r\n    props.disabled \r\n ) { \r\n```\r\n\r\nAnd:\r\n\r\nhttps://github.com/facebook/react/blob/37e4329bc81def4695211d6e3795a654ef4d84f5/packages/react-dom/src/shared/ReactControlledValuePropTypes.js#L44-L49\r\n\r\nto:\r\n\r\n```js\r\nif (\r\n    !(propName in props[propName]) || // Fixes 1\r\n    \"onChange\" in props || // Fixes 2\r\n    props.readOnly ||\r\n    props.disabled\r\n) {\r\n```",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**    See below.    **What is the current behavior?**    1. (Bug / Inconsistency)  ```jsx  <input type=\"radio\" checked={false} />  ```  No Warning.    2. (Feature Request)  ```jsx  <input type=\"radio\" checked={true} onChange={undefined} />  ```  `Warning: Failed prop type: You provided a 'checked' prop to a form field without an 'onChange' handler. This will render a read-only field. If the field should be mutable use 'defaultChecked'. Otherwise, set either 'onChange' or 'readOnly'.'`    3. (Bug?)  ```jsx  <select value=\"foo\" readOnly={true}>...</select>  ```  No warning.    **What is the expected behavior?**    1. Passing a falsy `value` or `checked` attribute will not trigger a warning, but a truthy value does.    2. If onChange is passed as undefined (or null?) this should be considered as an acknowledgement and silence the warning. I have a case where I split the render method from the component and use it as a preview. When the component is interactive I use the component. When doing a preview I pass undefined as my change handler. A warning is shown to tell me I \"forgot\" it, but I intended it to be this way.    3. Going along with 2, I can pass `readOnly={!handleChange}`, but according to DefinitelyTyped this isn't a valid attribute for select. I can't use disabled because it changes the appearance of the field.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    16.2.0  Chrome 65    **Other**    A proposed \"fix\" would be to change:    https://github.com/facebook/react/blob/37e4329bc81def4695211d6e3795a654ef4d84f5/packages/react-dom/src/shared/ReactControlledValuePropTypes.js#L27-L33    to:    ```js  if (       !(propName in props) || // Fixes 1      hasReadOnlyValue[props.type] ||       \"onChange\" in props ||  // Fixes 2      props.readOnly ||       props.disabled    ) {   ```    And:    https://github.com/facebook/react/blob/37e4329bc81def4695211d6e3795a654ef4d84f5/packages/react-dom/src/shared/ReactControlledValuePropTypes.js#L44-L49    to:    ```js  if (      !(propName in props[propName]) || // Fixes 1      \"onChange\" in props || // Fixes 2      props.readOnly ||      props.disabled  ) {  ```",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**    See below.    **What is the current behavior?**    1. (Bug / Inconsistency)    No Warning.    2. (Feature Request)    `Warning: Failed prop type: You provided a 'checked' prop to a form field without an 'onChange' handler. This will render a read-only field. If the field should be mutable use 'defaultChecked'. Otherwise, set either 'onChange' or 'readOnly'.'`    3. (Bug?)    No warning.    **What is the expected behavior?**    1. Passing a falsy `value` or `checked` attribute will not trigger a warning, but a truthy value does.    2. If onChange is passed as undefined (or null?) this should be considered as an acknowledgement and silence the warning. I have a case where I split the render method from the component and use it as a preview. When the component is interactive I use the component. When doing a preview I pass undefined as my change handler. A warning is shown to tell me I \"forgot\" it, but I intended it to be this way.    3. Going along with 2, I can pass `readOnly={!handleChange}`, but according to DefinitelyTyped this isn't a valid attribute for select. I can't use disabled because it changes the appearance of the field.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    16.2.0  Chrome 65    **Other**    A proposed \"fix\" would be to change:    https://github.com/facebook/react/blob/37e4329bc81def4695211d6e3795a654ef4d84f5/packages/react-dom/src/shared/ReactControlledValuePropTypes.js#L27-L33    to:        And:    https://github.com/facebook/react/blob/37e4329bc81def4695211d6e3795a654ef4d84f5/packages/react-dom/src/shared/ReactControlledValuePropTypes.js#L44-L49    to:    ",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** See below. **What is the current behavior?** 1. (Bug / Inconsistency) No Warning. 2. (Feature Request) `Warning: Failed prop type: You provided a 'checked' prop to a form field without an 'onChange' handler. This will render a read-only field. If the field should be mutable use 'defaultChecked'. Otherwise, set either 'onChange' or 'readOnly'.'` 3. (Bug?) No warning. **What is the expected behavior?** 1. Passing a falsy `value` or `checked` attribute will not trigger a warning, but a truthy value does. 2. If onChange is passed as undefined (or null?) this should be considered as an acknowledgement and silence the warning. I have a case where I split the render method from the component and use it as a preview. When the component is interactive I use the component. When doing a preview I pass undefined as my change handler. A warning is shown to tell me I \"forgot\" it, but I intended it to be this way. 3. Going along with 2, I can pass `readOnly={!handleChange}`, but according to DefinitelyTyped this isn't a valid attribute for select. I can't use disabled because it changes the appearance of the field. **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** 16.2.0 Chrome 65 **Other** A proposed \"fix\" would be to change:  to: And:  to: ",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * see . * * current behavior ? * * 1 . ( bug / inconsistency ) warning . 2 . ( feature request ) ` warning : failed prop type : provided 'checked ' prop form field without 'onchange ' handler . render read-only field . field mutable use 'defaultchecked ' . otherwise , set either 'onchange ' 'readonly ' . ' ` 3 . ( bug ? ) warning . * * expected behavior ? * * 1. passing falsy ` value ` ` checked ` attribute trigger warning , truthy value . 2. onchange passed undefined ( null ? ) considered acknowledgement silence warning . case split render method component use preview . component interactive use component . preview pas undefined change handler . warning shown tell `` forgot '' , intended way . 3. going along 2 , pas ` readonly= { ! handlechange } ` , according definitelytyped n't valid attribute select . ca n't use disabled change appearance field . * * version react , browser / o affected issue ? work previous version react ? * * 16.2.0 chrome 65 * * * * proposed `` fix '' would change : : : :",
        "title_stopwords_removal_lemmatization": "issue reactcontrolledvalueproptypes"
    },
    {
        "issue_id": 308436717,
        "title": "Elements loose focus when moving to or from a portal",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2018-03-26T05:23:57Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nPerhaps a bug, but could also be seen as a feature\r\n\r\n**What is the current behavior?**\r\n\r\nWhen you move an element to a portal through `ReactDOM.createPortal` the element looses focus if it had focus. If the element gains focus while in a portal, when moving out of the portal it looses focus.\r\n\r\n**What is the expected behavior?**\r\n\r\nI would have expected React to maintain focus of the element when moving in or out of a portal\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nTested with\r\n\r\nReact version: 16.2\r\nBrowsers: Latest chrome and firefox. I did not test others but expect the behaviour to be the same\r\nOS: Tested on Mac High Sierra\r\n",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**    Perhaps a bug, but could also be seen as a feature    **What is the current behavior?**    When you move an element to a portal through `ReactDOM.createPortal` the element looses focus if it had focus. If the element gains focus while in a portal, when moving out of the portal it looses focus.    **What is the expected behavior?**    I would have expected React to maintain focus of the element when moving in or out of a portal    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    Tested with    React version: 16.2  Browsers: Latest chrome and firefox. I did not test others but expect the behaviour to be the same  OS: Tested on Mac High Sierra",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**    Perhaps a bug, but could also be seen as a feature    **What is the current behavior?**    When you move an element to a portal through `ReactDOM.createPortal` the element looses focus if it had focus. If the element gains focus while in a portal, when moving out of the portal it looses focus.    **What is the expected behavior?**    I would have expected React to maintain focus of the element when moving in or out of a portal    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    Tested with    React version: 16.2  Browsers: Latest chrome and firefox. I did not test others but expect the behaviour to be the same  OS: Tested on Mac High Sierra",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** Perhaps a bug, but could also be seen as a feature **What is the current behavior?** When you move an element to a portal through `ReactDOM.createPortal` the element looses focus if it had focus. If the element gains focus while in a portal, when moving out of the portal it looses focus. **What is the expected behavior?** I would have expected React to maintain focus of the element when moving in or out of a portal **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** Tested with React version: 16.2 Browsers: Latest chrome and firefox. I did not test others but expect the behaviour to be the same OS: Tested on Mac High Sierra",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * perhaps bug , could also seen feature * * current behavior ? * * move element portal ` reactdom.createportal ` element loos focus focus . element gain focus portal , moving portal loos focus . * * expected behavior ? * * would expected react maintain focus element moving portal * * version react , browser / o affected issue ? work previous version react ? * * tested react version : 16.2 browser : latest chrome firefox . test others expect behaviour o : tested mac high sierra",
        "title_stopwords_removal_lemmatization": "element loose focus moving portal"
    },
    {
        "issue_id": 302508499,
        "title": "Production reconciler Instrumentation",
        "label": [
            "Type: Feature Request",
            "Component: Developer Tools"
        ],
        "date": "2018-03-05T23:44:49Z",
        "status": "closed",
        "description": "_Apologies if this is documented somewhere, but I was unable to find anything related after a pretty exhaustive search of docs + code._\r\n\r\nAre there any production instrumentation hooks for the reconciler?  Specifically, I'm looking for callbacks/events that would allow me to track overall reconciliation time spans (nothing more granular).  E.g. equivalent to the `(React Tree Reconciliation)` span.\r\n\r\nAs best I can tell, there are `performance.timings` spans reported as of Fiber (and `ReactPerf` prior), but those are only enabled in development mode.",
        "remove_template_description": "_Apologies if this is documented somewhere, but I was unable to find anything related after a pretty exhaustive search of docs + code._    Are there any production instrumentation hooks for the reconciler?  Specifically, I'm looking for callbacks/events that would allow me to track overall reconciliation time spans (nothing more granular).  E.g. equivalent to the `(React Tree Reconciliation)` span.    As best I can tell, there are `performance.timings` spans reported as of Fiber (and `ReactPerf` prior), but those are only enabled in development mode.",
        "human_words": "_Apologies if this is documented somewhere, but I was unable to find anything related after a pretty exhaustive search of docs + code._    Are there any production instrumentation hooks for the reconciler?  Specifically, I'm looking for callbacks/events that would allow me to track overall reconciliation time spans (nothing more granular).  E.g. equivalent to the `(React Tree Reconciliation)` span.    As best I can tell, there are `performance.timings` spans reported as of Fiber (and `ReactPerf` prior), but those are only enabled in development mode.",
        "human_words_regrex": "_Apologies if this is documented somewhere, but I was unable to find anything related after a pretty exhaustive search of docs + code._ Are there any production instrumentation hooks for the reconciler? Specifically, I'm looking for callbacks/events that would allow me to track overall reconciliation time spans (nothing more granular). E.g. equivalent to the `(React Tree Reconciliation)` span. As best I can tell, there are `performance.timings` spans reported as of Fiber (and `ReactPerf` prior), but those are only enabled in development mode.",
        "human_words_stopwords_removal_lemmatization": "_apologies documented somewhere , unable find anything related pretty exhaustive search doc + code._ production instrumentation hook reconciler ? specifically , 'm looking callbacks/events would allow track overall reconciliation time span ( nothing granular ) . e.g . equivalent ` ( react tree reconciliation ) ` span . best tell , ` performance.timings ` span reported fiber ( ` reactperf ` prior ) , enabled development mode .",
        "title_stopwords_removal_lemmatization": "production reconciler instrumentation"
    },
    {
        "issue_id": 301085867,
        "title": "Expose the `onSelect` event for any focusable element?",
        "label": [
            "Type: Feature Request",
            "Component: DOM",
            "Resolution: Stale"
        ],
        "date": "2018-02-28T16:13:56Z",
        "status": "closed",
        "description": "I was curious earlier if the `onSelect` event works on things other than form elements and `contentEditable` elements, and by disabling a couple of conditions in the code, it seems \u2014 at first brush, at least \u2014 that `onSelect` works splendidly on any element that is focusable (via the `tabIndex` attribute), to obtain things like:\r\n\r\n![ezgif-2-326cf42421](https://user-images.githubusercontent.com/205375/36798178-8aa7fdda-1cb2-11e8-8838-46e04300a09a.gif)\r\n\r\nWould there be any problem with relaxing the conditions for allowing `onSelect` to include elements that have a `tabIndex` attribute? (Other than the case where existing implementations in userland rely on the event being disabled when `contenteditable = true` is removed from an element).",
        "remove_template_description": "I was curious earlier if the `onSelect` event works on things other than form elements and `contentEditable` elements, and by disabling a couple of conditions in the code, it seems \u2014 at first brush, at least \u2014 that `onSelect` works splendidly on any element that is focusable (via the `tabIndex` attribute), to obtain things like:    ![ezgif-2-326cf42421](https://user-images.githubusercontent.com/205375/36798178-8aa7fdda-1cb2-11e8-8838-46e04300a09a.gif)    Would there be any problem with relaxing the conditions for allowing `onSelect` to include elements that have a `tabIndex` attribute? (Other than the case where existing implementations in userland rely on the event being disabled when `contenteditable = true` is removed from an element).",
        "human_words": "I was curious earlier if the `onSelect` event works on things other than form elements and `contentEditable` elements, and by disabling a couple of conditions in the code, it seems \u2014 at first brush, at least \u2014 that `onSelect` works splendidly on any element that is focusable (via the `tabIndex` attribute), to obtain things like:    ![ezgif-2-326cf42421](https://user-images.githubusercontent.com/205375/36798178-8aa7fdda-1cb2-11e8-8838-46e04300a09a.gif)    Would there be any problem with relaxing the conditions for allowing `onSelect` to include elements that have a `tabIndex` attribute? (Other than the case where existing implementations in userland rely on the event being disabled when `contenteditable = true` is removed from an element).",
        "human_words_regrex": "I was curious earlier if the `onSelect` event works on things other than form elements and `contentEditable` elements, and by disabling a couple of conditions in the code, it seems \u2014 at first brush, at least \u2014 that `onSelect` works splendidly on any element that is focusable (via the `tabIndex` attribute), to obtain things like: ! Would there be any problem with relaxing the conditions for allowing `onSelect` to include elements that have a `tabIndex` attribute? (Other than the case where existing implementations in userland rely on the event being disabled when `contenteditable = true` is removed from an element).",
        "human_words_stopwords_removal_lemmatization": "curious earlier ` onselect ` event work thing form element ` contenteditable ` element , disabling couple condition code , seems \u2014 first brush , least \u2014 ` onselect ` work splendidly element focusable ( via ` tabindex ` attribute ) , obtain thing like : ! would problem relaxing condition allowing ` onselect ` include element ` tabindex ` attribute ? ( case existing implementation userland rely event disabled ` contenteditable = true ` removed element ) .",
        "title_stopwords_removal_lemmatization": "expose ` onselect ` event focusable element ?"
    },
    {
        "issue_id": 298473452,
        "title": "Does react still require non-toplevel submit handler?",
        "label": [
            "Type: Feature Request",
            "Component: DOM"
        ],
        "date": "2018-02-20T05:09:50Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nbug? Maybe.\r\n\r\n**What is the current behavior?**\r\n\r\nUsing non-delegated handler for submit event.\r\n\r\n**What is the expected behavior?**\r\n\r\nAfter IE9, at least I know, submit event bubbled up.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.2.0",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**    bug? Maybe.    **What is the current behavior?**    Using non-delegated handler for submit event.    **What is the expected behavior?**    After IE9, at least I know, submit event bubbled up.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    16.2.0",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**    bug? Maybe.    **What is the current behavior?**    Using non-delegated handler for submit event.    **What is the expected behavior?**    After IE9, at least I know, submit event bubbled up.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    16.2.0",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** bug? Maybe. **What is the current behavior?** Using non-delegated handler for submit event. **What is the expected behavior?** After IE9, at least I know, submit event bubbled up. **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** 16.2.0",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * bug ? maybe . * * current behavior ? * * using non-delegated handler submit event . * * expected behavior ? * * ie9 , least know , submit event bubbled . * * version react , browser / o affected issue ? work previous version react ? * * 16.2.0",
        "title_stopwords_removal_lemmatization": "react still require non-toplevel submit handler ?"
    },
    {
        "issue_id": 298217188,
        "title": "Support for changing a Portal's container without remounting children?",
        "label": [
            "Type: Feature Request",
            "Component: DOM",
            "Resolution: Stale"
        ],
        "date": "2018-02-19T09:59:43Z",
        "status": "closed",
        "description": "(This is related to https://github.com/facebook/react/issues/3965.)\r\n\r\nI'm working on a project with a lot of globally unique component instances. (In other words, their `key`s are essentially database IDs.) It also has DnD functionality. For reordering, everything is fine, but moving an instance from one parent to another causes a complete re-render of the instance.\r\n\r\nInstead of moving the nodes around myself, I was thinking of using Portals. Each instance has a prop for which element ID they should render inside. Then, to reparent them, it'd be a simple case of passing a different element ID. (I'm using Redux, so it'd just be a `string` in the state.)\r\n\r\nHowever, changing a Portal's container node also causes a complete re-render of everything passed to `ReactDOM.createPortal`. (See this [CodePen](https://codepen.io/anon/pen/PQQKRP).)\r\n\r\nWould it be possible to skip this re-rendering and effectively move the Portal contents instead?",
        "remove_template_description": "(This is related to https://github.com/facebook/react/issues/3965.)    I'm working on a project with a lot of globally unique component instances. (In other words, their `key`s are essentially database IDs.) It also has DnD functionality. For reordering, everything is fine, but moving an instance from one parent to another causes a complete re-render of the instance.    Instead of moving the nodes around myself, I was thinking of using Portals. Each instance has a prop for which element ID they should render inside. Then, to reparent them, it'd be a simple case of passing a different element ID. (I'm using Redux, so it'd just be a `string` in the state.)    However, changing a Portal's container node also causes a complete re-render of everything passed to `ReactDOM.createPortal`. (See this [CodePen](https://codepen.io/anon/pen/PQQKRP).)    Would it be possible to skip this re-rendering and effectively move the Portal contents instead?",
        "human_words": "(This is related to https://github.com/facebook/react/issues/3965.)    I'm working on a project with a lot of globally unique component instances. (In other words, their `key`s are essentially database IDs.) It also has DnD functionality. For reordering, everything is fine, but moving an instance from one parent to another causes a complete re-render of the instance.    Instead of moving the nodes around myself, I was thinking of using Portals. Each instance has a prop for which element ID they should render inside. Then, to reparent them, it'd be a simple case of passing a different element ID. (I'm using Redux, so it'd just be a `string` in the state.)    However, changing a Portal's container node also causes a complete re-render of everything passed to `ReactDOM.createPortal`. (See this [CodePen](https://codepen.io/anon/pen/PQQKRP).)    Would it be possible to skip this re-rendering and effectively move the Portal contents instead?",
        "human_words_regrex": "(This is related to  I'm working on a project with a lot of globally unique component instances. (In other words, their `key`s are essentially database IDs.) It also has DnD functionality. For reordering, everything is fine, but moving an instance from one parent to another causes a complete re-render of the instance. Instead of moving the nodes around myself, I was thinking of using Portals. Each instance has a prop for which element ID they should render inside. Then, to reparent them, it'd be a simple case of passing a different element ID. (I'm using Redux, so it'd just be a `string` in the state.) However, changing a Portal's container node also causes a complete re-render of everything passed to `ReactDOM.createPortal`. (See this .) Would it be possible to skip this re-rendering and effectively move the Portal contents instead?",
        "human_words_stopwords_removal_lemmatization": "( related 'm working project lot globally unique component instance . ( word , ` key ` essentially database id . ) also dnd functionality . reordering , everything fine , moving instance one parent another cause complete re-render instance . instead moving node around , thinking using portal . instance prop element id render inside . , reparent , 'd simple case passing different element id . ( 'm using redux , 'd ` string ` state . ) however , changing portal 's container node also cause complete re-render everything passed ` reactdom.createportal ` . ( see . ) would possible skip re-rendering effectively move portal content instead ?",
        "title_stopwords_removal_lemmatization": "support changing portal 's container without remounting child ?"
    },
    {
        "issue_id": 297641027,
        "title": "Extracting a Context Stack",
        "label": [
            "Type: Feature Request",
            "Component: Reconciler",
            "React Core Team"
        ],
        "date": "2018-02-16T00:04:58Z",
        "status": "closed",
        "description": "A useful feature of context is creating a custom stack of things to see what your component is embedded in side.\r\n\r\nI think the primary use case is logging explicitly.\r\n\r\nCurrently that is pretty expensive to maintain just *in case* you need it. See #12234 as an example.\r\n\r\nWe could provide an API that lazily extracts a whole path of contexts from the tree.\r\n\r\n```js\r\n<FooContext.Provider value={\"foo\"}>\r\n  <FooContext.Provider value={\"bar\"}>\r\n    <FooContext.Provider value={\"baz\"}>\r\n      <App />\r\n    </FooContext.Provider>\r\n  </FooContext.Provider>\r\n</FooContext.Provider>\r\n```\r\n\r\n```js\r\nclass App extends React.Component {\r\n  log() {\r\n    var stack = this.getContextStack(FooContext);\r\n    logToServer(stack); // [\"foo\", \"bar\", \"baz\"]\r\n  }\r\n  render() {\r\n    return <div onClick={this.log} />;\r\n  }\r\n}\r\n```\r\n\r\nIt would basically synchronously rerender the shortest path to recreate the context at the time of the call to create the stack lazily.\r\n\r\ncc @acdlite ",
        "remove_template_description": "A useful feature of context is creating a custom stack of things to see what your component is embedded in side.    I think the primary use case is logging explicitly.    Currently that is pretty expensive to maintain just *in case* you need it. See #12234 as an example.    We could provide an API that lazily extracts a whole path of contexts from the tree.    ```js  <FooContext.Provider value={\"foo\"}>    <FooContext.Provider value={\"bar\"}>      <FooContext.Provider value={\"baz\"}>        <App />      </FooContext.Provider>    </FooContext.Provider>  </FooContext.Provider>  ```    ```js  class App extends React.Component {    log() {      var stack = this.getContextStack(FooContext);      logToServer(stack); // [\"foo\", \"bar\", \"baz\"]    }    render() {      return <div onClick={this.log} />;    }  }  ```    It would basically synchronously rerender the shortest path to recreate the context at the time of the call to create the stack lazily.    cc @acdlite",
        "human_words": "A useful feature of context is creating a custom stack of things to see what your component is embedded in side.    I think the primary use case is logging explicitly.    Currently that is pretty expensive to maintain just *in case* you need it. See #12234 as an example.    We could provide an API that lazily extracts a whole path of contexts from the tree.            It would basically synchronously rerender the shortest path to recreate the context at the time of the call to create the stack lazily.    cc @acdlite",
        "human_words_regrex": "A useful feature of context is creating a custom stack of things to see what your component is embedded in side. I think the primary use case is logging explicitly. Currently that is pretty expensive to maintain just *in case* you need it. See #12234 as an example. We could provide an API that lazily extracts a whole path of contexts from the tree. It would basically synchronously rerender the shortest path to recreate the context at the time of the call to create the stack lazily. cc @acdlite",
        "human_words_stopwords_removal_lemmatization": "useful feature context creating custom stack thing see component embedded side . think primary use case logging explicitly . currently pretty expensive maintain * case * need . see # 12234 example . could provide api lazily extract whole path context tree . would basically synchronously rerender shortest path recreate context time call create stack lazily . cc @ acdlite",
        "title_stopwords_removal_lemmatization": "extracting context stack"
    },
    {
        "issue_id": 297640020,
        "title": "Context Transform",
        "label": [
            "Type: Feature Request",
            "Component: Reconciler"
        ],
        "date": "2018-02-15T23:59:23Z",
        "status": "closed",
        "description": "With the new context API it is really bulky to create a middle man that consumes one context value, transforms it and provides another one. You have to create many components and store an intermediate state to avoid rerendering the provider if the input is unchanged.\r\n\r\nWe could have a convenience API for this use case.\r\n\r\n```js\r\nfunction transform(inputValue) {\r\n  return [...inputValue, extraData];\r\n}\r\n\r\n<Context.Middleware transform={transform}>{children}</Context.Middleware>\r\n```\r\n\r\ncc @acdlite ",
        "remove_template_description": "With the new context API it is really bulky to create a middle man that consumes one context value, transforms it and provides another one. You have to create many components and store an intermediate state to avoid rerendering the provider if the input is unchanged.    We could have a convenience API for this use case.    ```js  function transform(inputValue) {    return [...inputValue, extraData];  }    <Context.Middleware transform={transform}>{children}</Context.Middleware>  ```    cc @acdlite",
        "human_words": "With the new context API it is really bulky to create a middle man that consumes one context value, transforms it and provides another one. You have to create many components and store an intermediate state to avoid rerendering the provider if the input is unchanged.    We could have a convenience API for this use case.        cc @acdlite",
        "human_words_regrex": "With the new context API it is really bulky to create a middle man that consumes one context value, transforms it and provides another one. You have to create many components and store an intermediate state to avoid rerendering the provider if the input is unchanged. We could have a convenience API for this use case. cc @acdlite",
        "human_words_stopwords_removal_lemmatization": "new context api really bulky create middle man consumes one context value , transforms provides another one . create many component store intermediate state avoid rerendering provider input unchanged . could convenience api use case . cc @ acdlite",
        "title_stopwords_removal_lemmatization": "context transform"
    },
    {
        "issue_id": 297220662,
        "title": "Provide a way to perform a synchronous render into another root during the commit phase",
        "label": [
            "Type: Feature Request",
            "Component: Reconciler",
            "Resolution: Stale"
        ],
        "date": "2018-02-14T19:41:49Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nReentrancy checks prevent synchronous `ReactDOM.render` in a nested React component. This used to work before React 16, and [seems related to this issue about nested ReactDOM renders](https://github.com/facebook/react/issues/12034)\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nHere's a [JSFiddle](https://jsfiddle.net/e5hbzc1r/14/) that documents the problem, with a simulation of the external dependency where this manifests.\r\n\r\n**What is the expected behavior?**\r\n\r\nI'm running into what I think is a [similar problem to this one](https://github.com/facebook/react/issues/12034), with a nested `ReactDOM.render`, except where the difference is that I don't think we can use portals to address our use-case.\r\n\r\nWe have a component which manages the DOM tree for all nodes below it outside of React \u2014\u00a0it's a contenteditable node and uses the best-in-class [ProseMirror](https://prosemirror.net/) library to manage its children. The component looks something like this:\r\n\r\n```javascript\r\nclass ProseMirror extends Component {\r\n\tcomponentDidMount() {\r\n\t\t// ProseMirror manages the DOM for all nodes below this.el.\r\n\t}\r\n\r\n\tsetRef(el) {\r\n\t\tthis.el = el;\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (<div ref={this.setRef} />);\r\n\t}\r\n}\r\n```\r\n\r\nAs part of its render cycle, our configuration of ProseMirror ends up calling:\r\n\r\n```javascript\r\nReactDOM.render(<CrucialSubComponent />, someDivManagedByProseMirror);\r\n```\r\n\r\nto render an isolated child node of `<ProseMirror />`, and wants to be able to immediately afterwards be able to leverage:\r\n\r\n```javascript\r\nthis.el.querySelector('.my-subcomponent')\r\n```\r\n\r\n...but this piece of the DOM is no longer available synchronously, and it looks like this is because of the re-entrancy change that came about in React 16. Portals don't work for us, because the site where the `ReactDOM.render` is being called isn't itself directly part of the root React tree (this is [clearer to observe in the fiddle](https://jsfiddle.net/e5hbzc1r/14/)). The hierarchy is something like `<ProseMirror /> ---> (opaque ProseMirror rendering code) --> <CrucialSubComponent />`. Is there a way to skip these re-entrancy checks in these cases where there's an isolated React render happening in a grandchild of a component, but where the React tree isn't the immediate parent?\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nQuerying the DOM immediately after ReactDOM.render worked in versions prior to React 16. We're excited about the async possibilities for our main React tree, but curious if there are workarounds where we can ignore the reentrancy checks for these isolated renders.",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**    Bug    **What is the current behavior?**    Reentrancy checks prevent synchronous `ReactDOM.render` in a nested React component. This used to work before React 16, and [seems related to this issue about nested ReactDOM renders](https://github.com/facebook/react/issues/12034)    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**    Here's a [JSFiddle](https://jsfiddle.net/e5hbzc1r/14/) that documents the problem, with a simulation of the external dependency where this manifests.    **What is the expected behavior?**    I'm running into what I think is a [similar problem to this one](https://github.com/facebook/react/issues/12034), with a nested `ReactDOM.render`, except where the difference is that I don't think we can use portals to address our use-case.    We have a component which manages the DOM tree for all nodes below it outside of React \u2014\u00a0it's a contenteditable node and uses the best-in-class [ProseMirror](https://prosemirror.net/) library to manage its children. The component looks something like this:    ```javascript  class ProseMirror extends Component {  \tcomponentDidMount() {  \t\t// ProseMirror manages the DOM for all nodes below this.el.  \t}    \tsetRef(el) {  \t\tthis.el = el;  \t}    \trender() {  \t\treturn (<div ref={this.setRef} />);  \t}  }  ```    As part of its render cycle, our configuration of ProseMirror ends up calling:    ```javascript  ReactDOM.render(<CrucialSubComponent />, someDivManagedByProseMirror);  ```    to render an isolated child node of `<ProseMirror />`, and wants to be able to immediately afterwards be able to leverage:    ```javascript  this.el.querySelector('.my-subcomponent')  ```    ...but this piece of the DOM is no longer available synchronously, and it looks like this is because of the re-entrancy change that came about in React 16. Portals don't work for us, because the site where the `ReactDOM.render` is being called isn't itself directly part of the root React tree (this is [clearer to observe in the fiddle](https://jsfiddle.net/e5hbzc1r/14/)). The hierarchy is something like `<ProseMirror /> ---> (opaque ProseMirror rendering code) --> <CrucialSubComponent />`. Is there a way to skip these re-entrancy checks in these cases where there's an isolated React render happening in a grandchild of a component, but where the React tree isn't the immediate parent?    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    Querying the DOM immediately after ReactDOM.render worked in versions prior to React 16. We're excited about the async possibilities for our main React tree, but curious if there are workarounds where we can ignore the reentrancy checks for these isolated renders.",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**    Bug    **What is the current behavior?**    Reentrancy checks prevent synchronous `ReactDOM.render` in a nested React component. This used to work before React 16, and [seems related to this issue about nested ReactDOM renders](https://github.com/facebook/react/issues/12034)    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**    Here's a [JSFiddle](https://jsfiddle.net/e5hbzc1r/14/) that documents the problem, with a simulation of the external dependency where this manifests.    **What is the expected behavior?**    I'm running into what I think is a [similar problem to this one](https://github.com/facebook/react/issues/12034), with a nested `ReactDOM.render`, except where the difference is that I don't think we can use portals to address our use-case.    We have a component which manages the DOM tree for all nodes below it outside of React \u2014\u00a0it's a contenteditable node and uses the best-in-class [ProseMirror](https://prosemirror.net/) library to manage its children. The component looks something like this:        As part of its render cycle, our configuration of ProseMirror ends up calling:        to render an isolated child node of `<ProseMirror />`, and wants to be able to immediately afterwards be able to leverage:        ...but this piece of the DOM is no longer available synchronously, and it looks like this is because of the re-entrancy change that came about in React 16. Portals don't work for us, because the site where the `ReactDOM.render` is being called isn't itself directly part of the root React tree (this is [clearer to observe in the fiddle](https://jsfiddle.net/e5hbzc1r/14/)). The hierarchy is something like `<ProseMirror /> ---> (opaque ProseMirror rendering code) --> <CrucialSubComponent />`. Is there a way to skip these re-entrancy checks in these cases where there's an isolated React render happening in a grandchild of a component, but where the React tree isn't the immediate parent?    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    Querying the DOM immediately after ReactDOM.render worked in versions prior to React 16. We're excited about the async possibilities for our main React tree, but curious if there are workarounds where we can ignore the reentrancy checks for these isolated renders.",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** Bug **What is the current behavior?** Reentrancy checks prevent synchronous `ReactDOM.render` in a nested React component. This used to work before React 16, and  **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle ( or CodeSandbox ( example below:** Here's a  that documents the problem, with a simulation of the external dependency where this manifests. **What is the expected behavior?** I'm running into what I think is a , with a nested `ReactDOM.render`, except where the difference is that I don't think we can use portals to address our use-case. We have a component which manages the DOM tree for all nodes below it outside of React \u2014 it's a contenteditable node and uses the best-in-class  library to manage its children. The component looks something like this: As part of its render cycle, our configuration of ProseMirror ends up calling: to render an isolated child node of ``, and wants to be able to immediately afterwards be able to leverage: ...but this piece of the DOM is no longer available synchronously, and it looks like this is because of the re-entrancy change that came about in React 16. Portals don't work for us, because the site where the `ReactDOM.render` is being called isn't itself directly part of the root React tree (this is ). The hierarchy is something like ` ---> (opaque ProseMirror rendering code) --> `. Is there a way to skip these re-entrancy checks in these cases where there's an isolated React render happening in a grandchild of a component, but where the React tree isn't the immediate parent? **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** Querying the DOM immediately after ReactDOM.render worked in versions prior to React 16. We're excited about the async possibilities for our main React tree, but curious if there are workarounds where we can ignore the reentrancy checks for these isolated renders.",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * bug * * current behavior ? * * reentrancy check prevent synchronous ` reactdom.render ` nested react component . used work react 16 , * * current behavior bug , please provide step reproduce possible minimal demo problem . bug get fixed much faster run code n't dependency react . paste link jsfiddle ( codesandbox ( example : * * 's document problem , simulation external dependency manifest . * * expected behavior ? * * 'm running think , nested ` reactdom.render ` , except difference n't think use portal address use-case . component manages dom tree node outside react \u2014 's contenteditable node us best-in-class library manage child . component look something like : part render cycle , configuration prosemirror end calling : render isolated child node `` , want able immediately afterwards able leverage : ... piece dom longer available synchronously , look like re-entrancy change came react 16. portal n't work u , site ` reactdom.render ` called n't directly part root react tree ( ) . hierarchy something like ` -- - > ( opaque prosemirror rendering code ) -- > ` . way skip re-entrancy check case 's isolated react render happening grandchild component , react tree n't immediate parent ? * * version react , browser / o affected issue ? work previous version react ? * * querying dom immediately reactdom.render worked version prior react 16. 're excited async possibility main react tree , curious workarounds ignore reentrancy check isolated render .",
        "title_stopwords_removal_lemmatization": "provide way perform synchronous render another root commit phase"
    },
    {
        "issue_id": 295743765,
        "title": "[FEATURE] implement a `getState` method to get the sync state since `setState` is async.",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2018-02-09T03:30:16Z",
        "status": "closed",
        "description": "\r\n**Do you want to request a *feature* or report a *bug*?**\r\n<h2>FEATURE REQUEST</h2>\r\n\r\n\r\n\r\n**What is the current behavior?**\r\n```js\r\nclass MyComponent extends Component {\r\n  state = { a: 1 }\r\n  method1 = () => {\r\n    this.setState({ a: 2 });\r\n    this.method2();\r\n  }\r\n  method2 = () => {\r\n    // It can not log 2 in the console.\r\n    console.log(this.state.a);\r\n  }\r\n  // xxx...\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\n```js\r\nclass MyComponent extends Component {\r\n  state = { a: 1 }\r\n  method1 = () => {\r\n    this.setState({ a: 2 });\r\n    this.method2();\r\n  }\r\n  method2 = () => {\r\n    // With the `getState` method, it should log 2 in the console.\r\n    console.log(this.getState().a);\r\n  }\r\n  // xxx...\r\n}\r\n```\r\n",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**  <h2>FEATURE REQUEST</h2>        **What is the current behavior?**  ```js  class MyComponent extends Component {    state = { a: 1 }    method1 = () => {      this.setState({ a: 2 });      this.method2();    }    method2 = () => {      // It can not log 2 in the console.      console.log(this.state.a);    }    // xxx...  }  ```    **What is the expected behavior?**  ```js  class MyComponent extends Component {    state = { a: 1 }    method1 = () => {      this.setState({ a: 2 });      this.method2();    }    method2 = () => {      // With the `getState` method, it should log 2 in the console.      console.log(this.getState().a);    }    // xxx...  }  ```",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**  <h2>FEATURE REQUEST</h2>        **What is the current behavior?**      **What is the expected behavior?**  ",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** FEATURE REQUEST **What is the current behavior?** **What is the expected behavior?** ",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * feature request * * current behavior ? * * * * expected behavior ? * *",
        "title_stopwords_removal_lemmatization": "[ feature ] implement ` getstate ` method get sync state since ` setstate ` async ."
    },
    {
        "issue_id": 295666362,
        "title": "Add oldProps as additional argument to getDerivedStateFromProps ?",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2018-02-08T21:09:50Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nfeature\r\n\r\n**What is the current behavior?**\r\n\r\n`getDerivedStateFromProps` only receives the nextProps and previousState as arguments.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nThe deprecated `componentWillReceiveProps(nextProps)` used to allow code like `this.props.foo !== nextProps.foo`. With the new `getDerivedStateFromProps` function, there's no choice (because it is a static method) but to constantly copy `nextProps.foo` into state in order to access it later.\r\n\r\nThis is illustrated in the example posted to twitter by @gaearon: https://twitter.com/dan_abramov/status/953612246634188800?lang=en\r\n\r\n**What is the expected behavior?**\r\n\r\nIdeally (if it's not difficult to implement!) the `getDerivedStateFromProps` would also take the current (previous/old) props as an argument, something like:\r\n\r\n`getDerivedStateFromProps(nextProps, prevState, prevProps)`\r\n\r\nThis would eliminate the need to constantly assign props to state purely for comparison purposes...\r\n\r\nA quick look at the source doesn't make it clear to me how easy this would be though...\r\n\r\nhttps://github.com/facebook/react/blob/4a20ff26ecfe9bc66941d79f7fce2c67be8ee236/packages/react-dom/src/server/ReactPartialRenderer.js#L456\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.3.0",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**    feature    **What is the current behavior?**    `getDerivedStateFromProps` only receives the nextProps and previousState as arguments.    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**    The deprecated `componentWillReceiveProps(nextProps)` used to allow code like `this.props.foo !== nextProps.foo`. With the new `getDerivedStateFromProps` function, there's no choice (because it is a static method) but to constantly copy `nextProps.foo` into state in order to access it later.    This is illustrated in the example posted to twitter by @gaearon: https://twitter.com/dan_abramov/status/953612246634188800?lang=en    **What is the expected behavior?**    Ideally (if it's not difficult to implement!) the `getDerivedStateFromProps` would also take the current (previous/old) props as an argument, something like:    `getDerivedStateFromProps(nextProps, prevState, prevProps)`    This would eliminate the need to constantly assign props to state purely for comparison purposes...    A quick look at the source doesn't make it clear to me how easy this would be though...    https://github.com/facebook/react/blob/4a20ff26ecfe9bc66941d79f7fce2c67be8ee236/packages/react-dom/src/server/ReactPartialRenderer.js#L456    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    16.3.0",
        "human_words": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**    feature    **What is the current behavior?**    `getDerivedStateFromProps` only receives the nextProps and previousState as arguments.    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**    The deprecated `componentWillReceiveProps(nextProps)` used to allow code like `this.props.foo !== nextProps.foo`. With the new `getDerivedStateFromProps` function, there's no choice (because it is a static method) but to constantly copy `nextProps.foo` into state in order to access it later.    This is illustrated in the example posted to twitter by @gaearon: https://twitter.com/dan_abramov/status/953612246634188800?lang=en    **What is the expected behavior?**    Ideally (if it's not difficult to implement!) the `getDerivedStateFromProps` would also take the current (previous/old) props as an argument, something like:    `getDerivedStateFromProps(nextProps, prevState, prevProps)`    This would eliminate the need to constantly assign props to state purely for comparison purposes...    A quick look at the source doesn't make it clear to me how easy this would be though...    https://github.com/facebook/react/blob/4a20ff26ecfe9bc66941d79f7fce2c67be8ee236/packages/react-dom/src/server/ReactPartialRenderer.js#L456    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    16.3.0",
        "human_words_regrex": " **Do you want to request a *feature* or report a *bug*?** feature **What is the current behavior?** `getDerivedStateFromProps` only receives the nextProps and previousState as arguments. **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle ( or CodeSandbox ( example below:** The deprecated `componentWillReceiveProps(nextProps)` used to allow code like `this.props.foo !== nextProps.foo`. With the new `getDerivedStateFromProps` function, there's no choice (because it is a static method) but to constantly copy `nextProps.foo` into state in order to access it later. This is illustrated in the example posted to twitter by @gaearon:  **What is the expected behavior?** Ideally (if it's not difficult to implement!) the `getDerivedStateFromProps` would also take the current (previous/old) props as an argument, something like: `getDerivedStateFromProps(nextProps, prevState, prevProps)` This would eliminate the need to constantly assign props to state purely for comparison purposes... A quick look at the source doesn't make it clear to me how easy this would be though...  **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** 16.3.0",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * feature * * current behavior ? * * ` getderivedstatefromprops ` receives nextprops previousstate argument . * * current behavior bug , please provide step reproduce possible minimal demo problem . bug get fixed much faster run code n't dependency react . paste link jsfiddle ( codesandbox ( example : * * deprecated ` componentwillreceiveprops ( nextprops ) ` used allow code like ` this.props.foo ! == nextprops.foo ` . new ` getderivedstatefromprops ` function , 's choice ( static method ) constantly copy ` nextprops.foo ` state order access later . illustrated example posted twitter @ gaearon : * * expected behavior ? * * ideally ( 's difficult implement ! ) ` getderivedstatefromprops ` would also take current ( previous/old ) prop argument , something like : ` getderivedstatefromprops ( nextprops , prevstate , prevprops ) ` would eliminate need constantly assign prop state purely comparison purpose ... quick look source n't make clear easy would though ... * * version react , browser / o affected issue ? work previous version react ? * * 16.3.0",
        "title_stopwords_removal_lemmatization": "add oldprops additional argument getderivedstatefromprops ?"
    },
    {
        "issue_id": 291035810,
        "title": "Feature request: middleware",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2018-01-23T23:51:58Z",
        "status": "closed",
        "description": "This is an incomplete draft for a feature I think could be\r\nreally cool. It can replace higher order components\r\nand context in a way I think is more in the component\r\nspirit of React.\r\n\r\nI do not know if this feature is feasible or desirable for\r\nReact, especially as it would lead to a bigger API surface.\r\nThe proposal is written as if it was documentation to\r\ngive a feel for how it would be to use it.\r\n\r\n# About React middleware\r\nA middleware is applied somewhere in the component tree\r\nand are instantiated just after child components are\r\ninstantiated and just before they mount. In this context,\r\nchild components means child components at any depth.\r\n\r\nMiddleware is used just like normal components, but\r\nit works slightly differently. When a middleware element\r\nis used it added to the middleware stack. If it is\r\nalready on the middleware stack, it removed from\r\nthe stack and pushed to the end, with the most\r\ninnermost props.\r\n\r\n## Simplified example\r\nIn addition to the actual classes, the stack also\r\nincludes its most recent props. But this is roughly\r\nhow it works.\r\n\r\n```javascript\r\n<MiddlewareA>\r\n  {/* middleware stack for \"A\": [MiddlewareA] */}\r\n  <A />\r\n  <MiddlewareB>\r\n    {/* middleware stack for \"B\": [MiddlewareA, MiddlewareB] */}\r\n    <B>\r\n      <MiddlewareA\r\n        {/* middleware stack for \"C\": [MiddlewareB, MiddlewareA] */}\r\n        <C />\r\n      </MiddlewareA>\r\n    </B>\r\n  </MiddlewareB>\r\n</MiddlewareB>\r\n```\r\n\r\n# Lifecycle methods\r\n\r\n## Additions to the existing lifecycle methods\r\n\r\n### Mounting\r\n- new: Middleware.shouldMiddlewareMount\r\n- new: Middleware.shouldMiddlewarePropagate\r\n- Component#constructor\r\n- new: Middleware#constructor\r\n- new: Middleware#middlewareWillMount()\r\n- Component#componentWillMount()\r\n- Component#render()\r\n- new: Middleware#interceptRender()\r\n- Component#componentDidMount\r\n\r\n### Unmounting\r\n- new: Middleware#middlewareWillUnmount\r\n\r\n## static shouldMiddlewareMount(ReactComponent)\r\nDetermine if the current middleware should apply for\r\na component. If the method isn't implemented, the\r\nmiddleware will always be applied.\r\n\r\nIf a middleware is on the middleware stack, this method\r\nis called every time a component is constructed.\r\n\r\n### Example\r\n\r\n```javascript\r\nclass TransformInlineStyles extends React.Middleware {\r\n\r\n  /**\r\n   * Only mount middleware when you set\r\n   * transformInlineStyles to a truthy\r\n   * value. Children of the given\r\n   * component can still enable\r\n   * the middleware\r\n   */\r\n  static shouldMiddlewareMount(Component) {\r\n    return Component.transformInlineStyles\r\n  }\r\n\r\n  // ...\r\n}\r\n\r\nconst A = props => (\r\n  // ...\r\n)\r\n\r\nconst B = props => (\r\n  // ...\r\n)\r\nB.transformInlineStyles = true\r\n\r\nconst App = () => (\r\n  <TransformInlineStyles>\r\n    {/* Not applied to \"A\" */}\r\n    <A>\r\n      {/* Applied to \"B\" */}\r\n      <B />\r\n    </A>\r\n  </TransformInlineStyles>\r\n)\r\n```\r\n\r\n## static shouldMiddlewarePropagate(ReactComponent)\r\nDetermine whether the middleware should remain on\r\nthe middleware stack or be excluded for the subtree\r\nbelow the given component. If not specified it returns\r\nfalse, in other words: The default behavior for\r\nmiddleware is to propagate.\r\n\r\nThis is useful if you want to limit middleware from\r\naffecting deeply nested children. It is also useful\r\nfor only giving middleware access to its immediate\r\nchildren.\r\n\r\n### Example\r\n\r\n```javascript\r\nimport React from 'react'\r\n\r\nclass ProvideTheme extends React.Middleware {\r\n  static StopPropagation = props => props.children\r\n\r\n  static shouldMiddlewarePropagate(Component) {\r\n    return Component !== this.StopPropagation\r\n  }\r\n\r\n  // ...\r\n}\r\n\r\nconst App = () => (\r\n  <ProvideTheme>\r\n    {/* middleware stack for \"A\": [ProvideTheme] */}\r\n    <A>\r\n      <ProvideTheme.StopPropagation>\r\n        {/* middleware stack for \"B\": [] */}\r\n        <B />\r\n      </ProvideTheme.StopPropagation>\r\n      {/* middleware stack for \"C\": [ProvideTheme] */}\r\n      <C />\r\n    </A>\r\n  </ProvideTheme>\r\n)\r\n```\r\n\r\n## middlewareWillMount(reactInstance)\r\nCalled before the child component calls componentWillMount.\r\nThis is a good place to initialize state for the middleware\r\ninstance.\r\n\r\n## MiddlewareWillUnmount(reactInstance)\r\nCalled before the child component calls componentWillUnmount.\r\n\r\n### Example\r\nThis is a na\u00efve example of how it could be used to trigger\r\nautomatic updates with Mobx.\r\n\r\n```javascript\r\nclass Observer extends React.Middleware {\r\n  middlewareWillMount(reactInstance) {\r\n    this.dispose = autorun(() => {\r\n\r\n      // Let Mobx track the observables\r\n      // used in the render method.\r\n      reactInstance.render()\r\n\r\n      // Force update the component instance\r\n      // after Mobx has stopped tracking the\r\n      // autorun function.\r\n      //\r\n      // .. yes, I know it's hacky.\r\n      setTimeout(() => {\r\n        reactInstance.forceUpdate()\r\n      })\r\n    })\r\n  }\r\n\r\n  middlewareWillUnmount(reactInstance) {\r\n    // Stop listening for changes from Mobx\r\n    this.dispose()\r\n  }\r\n}\r\n```\r\n\r\n## interceptRender(children)\r\ninterceptRender is called with the result from the render\r\nfunction of the component. The resulting value is what is\r\nused to render the DOM.\r\n\r\n### Example\r\nThis is an example of a middleware that transforms object\r\nclasses into a string. The result works similarly to how\r\nng-class works in AngularJS.\r\n\r\n```javascript\r\nclass ObjectClassNames extends React.Middleware {\r\n\r\n  /**\r\n   * This is a life cycle method.\r\n   *\r\n   * Intercept the render method and recursively\r\n   * loop through all children, performing\r\n   * this.transformProps() on their props.\r\n   */\r\n  interceptRender(children) {\r\n    return React.Children.map(children, child => {\r\n      if (! React.isValidElement(child)) {\r\n        return child\r\n      }\r\n      return {\r\n        ...child,\r\n        props: this.transformProps(child.props),\r\n        children: this.interceptRender(child.children)\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * If a child has an object className, call\r\n   * this.transformClassname() on it.\r\n   */\r\n  transformProps(props) {\r\n    if (! props || ! props.className || typeof props.className !== 'object') {\r\n      return props\r\n    }\r\n\r\n    return {\r\n      ...props,\r\n      className: this.transformClassname(props.className)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Concatenate the truthy keys of the className\r\n   * object into a string.\r\n   */\r\n  transformClassname(className) {\r\n    const result = []\r\n\r\n    for (const key of Object.keys(className)) {\r\n      if (className[key]) {\r\n        result.push(key)\r\n      }\r\n    }\r\n\r\n    return result.join(' ')\r\n  }\r\n}\r\n\r\nconst Widget = (props) => (\r\n  <div className={{ 'Widget': true, 'Widget--active': props.active }}>\r\n    Some widget\r\n  </div>\r\n)\r\n\r\nconst App = () => (\r\n  <ObjectClassNames>\r\n    <Widget active={true} />\r\n  </ObjectClassNames>\r\n)\r\n```\r\n\r\n# Why middleware?\r\nReact middleware can replace two problematic patterns used with React.\r\n\r\n## Context\r\nThe h2 on context in the React docs says \"Why Not To Use\r\nContext\". Context is however a very useful feature. And\r\npeople have been and will continue to use and abuse it\r\nin the forseeable future. React Router has started\r\nabusing context in its most recent version, which shows\r\nthat there is clearly a need here.\r\n\r\nWith middleware, as I propose it, you would be able to\r\ninject props into an arbitrary subtree of your app. This\r\nhas performance implications, but would be an ideal\r\nscenario for libraries such as React Router, as the\r\nrelevant props (or as it is now, context) rarely\r\nchanges. With middleware shouldComponentUpdate\r\nwill still function like you would expect.\r\n\r\n## Higher order components\r\nA primal rule of programming is DRY. When using Mobx\r\nwith React, you must use the observer decorator on\r\nall reactive classes. This isn't a really big deal,\r\nbut not having to include that would reduce the size\r\nof every single observer component by two lines and\r\nmost importantly, I wouldn't forget it.\r\n\r\nWhen creating a higher order component static properties\r\nare no longer available. The package hoist-non-react-static\r\nis designed so that you should be able to access static\r\nproperties of higher order components transparently.\r\nIf a static property is initialized in the lifecycle\r\nmethods of a component, it will however not be proxied.\r\n\r\nCreating higher order components is also a messy affair.\r\n\r\nWith middleware you could achive the same thing in a React\r\nway. To replace connect from react-redux you could set\r\nshouldMiddlewarePropagate to return false, and it would\r\naffect only one component.\r\n\r\nAlternatively you could use static properties for\r\nmapStateToProps and mapDispatchToProps.",
        "remove_template_description": "This is an incomplete draft for a feature I think could be  really cool. It can replace higher order components  and context in a way I think is more in the component  spirit of React.    I do not know if this feature is feasible or desirable for  React, especially as it would lead to a bigger API surface.  The proposal is written as if it was documentation to  give a feel for how it would be to use it.    # About React middleware  A middleware is applied somewhere in the component tree  and are instantiated just after child components are  instantiated and just before they mount. In this context,  child components means child components at any depth.    Middleware is used just like normal components, but  it works slightly differently. When a middleware element  is used it added to the middleware stack. If it is  already on the middleware stack, it removed from  the stack and pushed to the end, with the most  innermost props.    ## Simplified example  In addition to the actual classes, the stack also  includes its most recent props. But this is roughly  how it works.    ```javascript  <MiddlewareA>    {/* middleware stack for \"A\": [MiddlewareA] */}    <A />    <MiddlewareB>      {/* middleware stack for \"B\": [MiddlewareA, MiddlewareB] */}      <B>        <MiddlewareA          {/* middleware stack for \"C\": [MiddlewareB, MiddlewareA] */}          <C />        </MiddlewareA>      </B>    </MiddlewareB>  </MiddlewareB>  ```    # Lifecycle methods    ## Additions to the existing lifecycle methods    ### Mounting  - new: Middleware.shouldMiddlewareMount  - new: Middleware.shouldMiddlewarePropagate  - Component#constructor  - new: Middleware#constructor  - new: Middleware#middlewareWillMount()  - Component#componentWillMount()  - Component#render()  - new: Middleware#interceptRender()  - Component#componentDidMount    ### Unmounting  - new: Middleware#middlewareWillUnmount    ## static shouldMiddlewareMount(ReactComponent)  Determine if the current middleware should apply for  a component. If the method isn't implemented, the  middleware will always be applied.    If a middleware is on the middleware stack, this method  is called every time a component is constructed.    ### Example    ```javascript  class TransformInlineStyles extends React.Middleware {      /**     * Only mount middleware when you set     * transformInlineStyles to a truthy     * value. Children of the given     * component can still enable     * the middleware     */    static shouldMiddlewareMount(Component) {      return Component.transformInlineStyles    }      // ...  }    const A = props => (    // ...  )    const B = props => (    // ...  )  B.transformInlineStyles = true    const App = () => (    <TransformInlineStyles>      {/* Not applied to \"A\" */}      <A>        {/* Applied to \"B\" */}        <B />      </A>    </TransformInlineStyles>  )  ```    ## static shouldMiddlewarePropagate(ReactComponent)  Determine whether the middleware should remain on  the middleware stack or be excluded for the subtree  below the given component. If not specified it returns  false, in other words: The default behavior for  middleware is to propagate.    This is useful if you want to limit middleware from  affecting deeply nested children. It is also useful  for only giving middleware access to its immediate  children.    ### Example    ```javascript  import React from 'react'    class ProvideTheme extends React.Middleware {    static StopPropagation = props => props.children      static shouldMiddlewarePropagate(Component) {      return Component !== this.StopPropagation    }      // ...  }    const App = () => (    <ProvideTheme>      {/* middleware stack for \"A\": [ProvideTheme] */}      <A>        <ProvideTheme.StopPropagation>          {/* middleware stack for \"B\": [] */}          <B />        </ProvideTheme.StopPropagation>        {/* middleware stack for \"C\": [ProvideTheme] */}        <C />      </A>    </ProvideTheme>  )  ```    ## middlewareWillMount(reactInstance)  Called before the child component calls componentWillMount.  This is a good place to initialize state for the middleware  instance.    ## MiddlewareWillUnmount(reactInstance)  Called before the child component calls componentWillUnmount.    ### Example  This is a na\u00efve example of how it could be used to trigger  automatic updates with Mobx.    ```javascript  class Observer extends React.Middleware {    middlewareWillMount(reactInstance) {      this.dispose = autorun(() => {          // Let Mobx track the observables        // used in the render method.        reactInstance.render()          // Force update the component instance        // after Mobx has stopped tracking the        // autorun function.        //        // .. yes, I know it's hacky.        setTimeout(() => {          reactInstance.forceUpdate()        })      })    }      middlewareWillUnmount(reactInstance) {      // Stop listening for changes from Mobx      this.dispose()    }  }  ```    ## interceptRender(children)  interceptRender is called with the result from the render  function of the component. The resulting value is what is  used to render the DOM.    ### Example  This is an example of a middleware that transforms object  classes into a string. The result works similarly to how  ng-class works in AngularJS.    ```javascript  class ObjectClassNames extends React.Middleware {      /**     * This is a life cycle method.     *     * Intercept the render method and recursively     * loop through all children, performing     * this.transformProps() on their props.     */    interceptRender(children) {      return React.Children.map(children, child => {        if (! React.isValidElement(child)) {          return child        }        return {          ...child,          props: this.transformProps(child.props),          children: this.interceptRender(child.children)        }      })    }      /**     * If a child has an object className, call     * this.transformClassname() on it.     */    transformProps(props) {      if (! props || ! props.className || typeof props.className !== 'object') {        return props      }        return {        ...props,        className: this.transformClassname(props.className)      }    }      /**     * Concatenate the truthy keys of the className     * object into a string.     */    transformClassname(className) {      const result = []        for (const key of Object.keys(className)) {        if (className[key]) {          result.push(key)        }      }        return result.join(' ')    }  }    const Widget = (props) => (    <div className={{ 'Widget': true, 'Widget--active': props.active }}>      Some widget    </div>  )    const App = () => (    <ObjectClassNames>      <Widget active={true} />    </ObjectClassNames>  )  ```    # Why middleware?  React middleware can replace two problematic patterns used with React.    ## Context  The h2 on context in the React docs says \"Why Not To Use  Context\". Context is however a very useful feature. And  people have been and will continue to use and abuse it  in the forseeable future. React Router has started  abusing context in its most recent version, which shows  that there is clearly a need here.    With middleware, as I propose it, you would be able to  inject props into an arbitrary subtree of your app. This  has performance implications, but would be an ideal  scenario for libraries such as React Router, as the  relevant props (or as it is now, context) rarely  changes. With middleware shouldComponentUpdate  will still function like you would expect.    ## Higher order components  A primal rule of programming is DRY. When using Mobx  with React, you must use the observer decorator on  all reactive classes. This isn't a really big deal,  but not having to include that would reduce the size  of every single observer component by two lines and  most importantly, I wouldn't forget it.    When creating a higher order component static properties  are no longer available. The package hoist-non-react-static  is designed so that you should be able to access static  properties of higher order components transparently.  If a static property is initialized in the lifecycle  methods of a component, it will however not be proxied.    Creating higher order components is also a messy affair.    With middleware you could achive the same thing in a React  way. To replace connect from react-redux you could set  shouldMiddlewarePropagate to return false, and it would  affect only one component.    Alternatively you could use static properties for  mapStateToProps and mapDispatchToProps.",
        "human_words": "This is an incomplete draft for a feature I think could be  really cool. It can replace higher order components  and context in a way I think is more in the component  spirit of React.    I do not know if this feature is feasible or desirable for  React, especially as it would lead to a bigger API surface.  The proposal is written as if it was documentation to  give a feel for how it would be to use it.    # About React middleware  A middleware is applied somewhere in the component tree  and are instantiated just after child components are  instantiated and just before they mount. In this context,  child components means child components at any depth.    Middleware is used just like normal components, but  it works slightly differently. When a middleware element  is used it added to the middleware stack. If it is  already on the middleware stack, it removed from  the stack and pushed to the end, with the most  innermost props.    ## Simplified example  In addition to the actual classes, the stack also  includes its most recent props. But this is roughly  how it works.        # Lifecycle methods    ## Additions to the existing lifecycle methods    ### Mounting  - new: Middleware.shouldMiddlewareMount  - new: Middleware.shouldMiddlewarePropagate  - Component#constructor  - new: Middleware#constructor  - new: Middleware#middlewareWillMount()  - Component#componentWillMount()  - Component#render()  - new: Middleware#interceptRender()  - Component#componentDidMount    ### Unmounting  - new: Middleware#middlewareWillUnmount    ## static shouldMiddlewareMount(ReactComponent)  Determine if the current middleware should apply for  a component. If the method isn't implemented, the  middleware will always be applied.    If a middleware is on the middleware stack, this method  is called every time a component is constructed.    ### Example        ## static shouldMiddlewarePropagate(ReactComponent)  Determine whether the middleware should remain on  the middleware stack or be excluded for the subtree  below the given component. If not specified it returns  false, in other words: The default behavior for  middleware is to propagate.    This is useful if you want to limit middleware from  affecting deeply nested children. It is also useful  for only giving middleware access to its immediate  children.    ### Example        ## middlewareWillMount(reactInstance)  Called before the child component calls componentWillMount.  This is a good place to initialize state for the middleware  instance.    ## MiddlewareWillUnmount(reactInstance)  Called before the child component calls componentWillUnmount.    ### Example  This is a na\u00efve example of how it could be used to trigger  automatic updates with Mobx.        ## interceptRender(children)  interceptRender is called with the result from the render  function of the component. The resulting value is what is  used to render the DOM.    ### Example  This is an example of a middleware that transforms object  classes into a string. The result works similarly to how  ng-class works in AngularJS.        # Why middleware?  React middleware can replace two problematic patterns used with React.    ## Context  The h2 on context in the React docs says \"Why Not To Use  Context\". Context is however a very useful feature. And  people have been and will continue to use and abuse it  in the forseeable future. React Router has started  abusing context in its most recent version, which shows  that there is clearly a need here.    With middleware, as I propose it, you would be able to  inject props into an arbitrary subtree of your app. This  has performance implications, but would be an ideal  scenario for libraries such as React Router, as the  relevant props (or as it is now, context) rarely  changes. With middleware shouldComponentUpdate  will still function like you would expect.    ## Higher order components  A primal rule of programming is DRY. When using Mobx  with React, you must use the observer decorator on  all reactive classes. This isn't a really big deal,  but not having to include that would reduce the size  of every single observer component by two lines and  most importantly, I wouldn't forget it.    When creating a higher order component static properties  are no longer available. The package hoist-non-react-static  is designed so that you should be able to access static  properties of higher order components transparently.  If a static property is initialized in the lifecycle  methods of a component, it will however not be proxied.    Creating higher order components is also a messy affair.    With middleware you could achive the same thing in a React  way. To replace connect from react-redux you could set  shouldMiddlewarePropagate to return false, and it would  affect only one component.    Alternatively you could use static properties for  mapStateToProps and mapDispatchToProps.",
        "human_words_regrex": "This is an incomplete draft for a feature I think could be really cool. It can replace higher order components and context in a way I think is more in the component spirit of React. I do not know if this feature is feasible or desirable for React, especially as it would lead to a bigger API surface. The proposal is written as if it was documentation to give a feel for how it would be to use it. # About React middleware A middleware is applied somewhere in the component tree and are instantiated just after child components are instantiated and just before they mount. In this context, child components means child components at any depth. Middleware is used just like normal components, but it works slightly differently. When a middleware element is used it added to the middleware stack. If it is already on the middleware stack, it removed from the stack and pushed to the end, with the most innermost props. ## Simplified example In addition to the actual classes, the stack also includes its most recent props. But this is roughly how it works. # Lifecycle methods ## Additions to the existing lifecycle methods ### Mounting - new: Middleware.shouldMiddlewareMount - new: Middleware.shouldMiddlewarePropagate - Component#constructor - new: Middleware#constructor - new: Middleware#middlewareWillMount() - Component#componentWillMount() - Component#render() - new: Middleware#interceptRender() - Component#componentDidMount ### Unmounting - new: Middleware#middlewareWillUnmount ## static shouldMiddlewareMount(ReactComponent) Determine if the current middleware should apply for a component. If the method isn't implemented, the middleware will always be applied. If a middleware is on the middleware stack, this method is called every time a component is constructed. ### Example ## static shouldMiddlewarePropagate(ReactComponent) Determine whether the middleware should remain on the middleware stack or be excluded for the subtree below the given component. If not specified it returns false, in other words: The default behavior for middleware is to propagate. This is useful if you want to limit middleware from affecting deeply nested children. It is also useful for only giving middleware access to its immediate children. ### Example ## middlewareWillMount(reactInstance) Called before the child component calls componentWillMount. This is a good place to initialize state for the middleware instance. ## MiddlewareWillUnmount(reactInstance) Called before the child component calls componentWillUnmount. ### Example This is a na\u00efve example of how it could be used to trigger automatic updates with Mobx. ## interceptRender(children) interceptRender is called with the result from the render function of the component. The resulting value is what is used to render the DOM. ### Example This is an example of a middleware that transforms object classes into a string. The result works similarly to how ng-class works in AngularJS. # Why middleware? React middleware can replace two problematic patterns used with React. ## Context The h2 on context in the React docs says \"Why Not To Use Context\". Context is however a very useful feature. And people have been and will continue to use and abuse it in the forseeable future. React Router has started abusing context in its most recent version, which shows that there is clearly a need here. With middleware, as I propose it, you would be able to inject props into an arbitrary subtree of your app. This has performance implications, but would be an ideal scenario for libraries such as React Router, as the relevant props (or as it is now, context) rarely changes. With middleware shouldComponentUpdate will still function like you would expect. ## Higher order components A primal rule of programming is DRY. When using Mobx with React, you must use the observer decorator on all reactive classes. This isn't a really big deal, but not having to include that would reduce the size of every single observer component by two lines and most importantly, I wouldn't forget it. When creating a higher order component static properties are no longer available. The package hoist-non-react-static is designed so that you should be able to access static properties of higher order components transparently. If a static property is initialized in the lifecycle methods of a component, it will however not be proxied. Creating higher order components is also a messy affair. With middleware you could achive the same thing in a React way. To replace connect from react-redux you could set shouldMiddlewarePropagate to return false, and it would affect only one component. Alternatively you could use static properties for mapStateToProps and mapDispatchToProps.",
        "human_words_stopwords_removal_lemmatization": "incomplete draft feature think could really cool . replace higher order component context way think component spirit react . know feature feasible desirable react , especially would lead bigger api surface . proposal written documentation give feel would use . # react middleware middleware applied somewhere component tree instantiated child component instantiated mount . context , child component mean child component depth . middleware used like normal component , work slightly differently . middleware element used added middleware stack . already middleware stack , removed stack pushed end , innermost prop . # # simplified example addition actual class , stack also includes recent prop . roughly work . # lifecycle method # # addition existing lifecycle method # # # mounting - new : middleware.shouldmiddlewaremount - new : middleware.shouldmiddlewarepropagate - component # constructor - new : middleware # constructor - new : middleware # middlewarewillmount ( ) - component # componentwillmount ( ) - component # render ( ) - new : middleware # interceptrender ( ) - component # componentdidmount # # # unmounting - new : middleware # middlewarewillunmount # # static shouldmiddlewaremount ( reactcomponent ) determine current middleware apply component . method n't implemented , middleware always applied . middleware middleware stack , method called every time component constructed . # # # example # # static shouldmiddlewarepropagate ( reactcomponent ) determine whether middleware remain middleware stack excluded subtree given component . specified return false , word : default behavior middleware propagate . useful want limit middleware affecting deeply nested child . also useful giving middleware access immediate child . # # # example # # middlewarewillmount ( reactinstance ) called child component call componentwillmount . good place initialize state middleware instance . # # middlewarewillunmount ( reactinstance ) called child component call componentwillunmount . # # # example na\u00efve example could used trigger automatic update mobx . # # interceptrender ( child ) interceptrender called result render function component . resulting value used render dom . # # # example example middleware transforms object class string . result work similarly ng-class work angularjs . # middleware ? react middleware replace two problematic pattern used react . # # context h2 context react doc say `` use context '' . context however useful feature . people continue use abuse forseeable future . react router started abusing context recent version , show clearly need . middleware , propose , would able inject prop arbitrary subtree app . performance implication , would ideal scenario library react router , relevant prop ( , context ) rarely change . middleware shouldcomponentupdate still function like would expect . # # higher order component primal rule programming dry . using mobx react , must use observer decorator reactive class . n't really big deal , include would reduce size every single observer component two line importantly , would n't forget . creating higher order component static property longer available . package hoist-non-react-static designed able access static property higher order component transparently . static property initialized lifecycle method component , however proxied . creating higher order component also messy affair . middleware could achive thing react way . replace connect react-redux could set shouldmiddlewarepropagate return false , would affect one component . alternatively could use static property mapstatetoprops mapdispatchtoprops .",
        "title_stopwords_removal_lemmatization": "feature request : middleware"
    },
    {
        "issue_id": 289620901,
        "title": "can React support feature like keep-alive in Vue?",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2018-01-18T13:02:31Z",
        "status": "closed",
        "description": "i found this issue: https://github.com/facebook/react/issues/4770,  and @sophiebits said that React never reuses an instance after it's been unmounted. \r\n\r\ndoes it means that React will never support feature like keep-alive in Vue? or there is other way to maintain component's state?\r\n",
        "remove_template_description": "i found this issue: https://github.com/facebook/react/issues/4770,  and @sophiebits said that React never reuses an instance after it's been unmounted.     does it means that React will never support feature like keep-alive in Vue? or there is other way to maintain component's state?",
        "human_words": "i found this issue: https://github.com/facebook/react/issues/4770,  and @sophiebits said that React never reuses an instance after it's been unmounted.     does it means that React will never support feature like keep-alive in Vue? or there is other way to maintain component's state?",
        "human_words_regrex": "i found this issue:  and @sophiebits said that React never reuses an instance after it's been unmounted. does it means that React will never support feature like keep-alive in Vue? or there is other way to maintain component's state?",
        "human_words_stopwords_removal_lemmatization": "found issue : @ sophiebits said react never reuses instance 's unmounted . mean react never support feature like keep-alive vue ? way maintain component 's state ?",
        "title_stopwords_removal_lemmatization": "react support feature like keep-alive vue ?"
    },
    {
        "issue_id": 289537152,
        "title": "Add React.isFragment api for verifying Fragment",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2018-01-18T08:02:52Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nI want to request a feature.\r\n\r\n**What is the current behavior?**\r\n\r\nWe have no API to verify a ReactNode is a React 16 Fragment. Though now we can use `React.isValidElement(instance) && typeof instance.type === 'symbol'` to distinguish it. It's verbose and seems uncertianly right.\r\n\r\n**What is the expected behavior?**\r\n\r\nAdd api:\r\n\r\n```\r\nReact.isFragment(object)\r\n```\r\nVerifies the object is a React.Fragment. Returns true or false.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.2",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**    I want to request a feature.    **What is the current behavior?**    We have no API to verify a ReactNode is a React 16 Fragment. Though now we can use `React.isValidElement(instance) && typeof instance.type === 'symbol'` to distinguish it. It's verbose and seems uncertianly right.    **What is the expected behavior?**    Add api:    ```  React.isFragment(object)  ```  Verifies the object is a React.Fragment. Returns true or false.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    React 16.2",
        "human_words": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**    I want to request a feature.    **What is the current behavior?**    We have no API to verify a ReactNode is a React 16 Fragment. Though now we can use `React.isValidElement(instance) && typeof instance.type === 'symbol'` to distinguish it. It's verbose and seems uncertianly right.    **What is the expected behavior?**    Add api:      Verifies the object is a React.Fragment. Returns true or false.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    React 16.2",
        "human_words_regrex": " **Do you want to request a *feature* or report a *bug*?** I want to request a feature. **What is the current behavior?** We have no API to verify a ReactNode is a React 16 Fragment. Though now we can use `React.isValidElement(instance) && typeof instance.type === 'symbol'` to distinguish it. It's verbose and seems uncertianly right. **What is the expected behavior?** Add api: Verifies the object is a React.Fragment. Returns true or false. **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** React 16.2",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * want request feature . * * current behavior ? * * api verify reactnode react 16 fragment . though use ` react.isvalidelement ( instance ) & & typeof instance.type === 'symbol ' ` distinguish . 's verbose seems uncertianly right . * * expected behavior ? * * add api : verifies object react.fragment . return true false . * * version react , browser / o affected issue ? work previous version react ? * * react 16.2",
        "title_stopwords_removal_lemmatization": "add react.isfragment api verifying fragment"
    },
    {
        "issue_id": 288301289,
        "title": "Have Fragments support dangerouslySetInnerHTML",
        "label": [
            "Type: Feature Request",
            "Component: DOM"
        ],
        "date": "2018-01-13T04:15:48Z",
        "status": "closed",
        "description": "The addition of the `Fragment` in 16.2.0 is fantastic and helps keep our HTML semantic and clean. Unfortunately there is still no way to inject HTML without a wrapping tag.\r\n\r\n```jsx\r\nconst HTML = <span>Hello World</span>;\r\n\r\n<div key={ ID } dangerouslySetInnerHTML={ { __html: HTML } } />\r\n```\r\n\r\nwhich will render:\r\n\r\n```html\r\n<div><span>Hello World</span></div>\r\n```\r\n\r\nIt would be mostly helpful for rendering HTML from jsx on the back end rather than in the SPA context. To me `Fragment` seems to be the ideal candidate to support `dangerouslySetInnerHTML` so that you may inject HTML without wrapping elements.\r\n\r\n```jsx\r\nconst HTML = <span>Hello World</span>;\r\n\r\n<Fragment key={ ID } dangerouslySetInnerHTML={ { __html: HTML } } />\r\n```\r\n\r\nwould render:\r\n\r\n```jsx\r\n<span>Hello World</span>\r\n```\r\n\r\nSimple, obvious and aligned with the current API.",
        "remove_template_description": "The addition of the `Fragment` in 16.2.0 is fantastic and helps keep our HTML semantic and clean. Unfortunately there is still no way to inject HTML without a wrapping tag.    ```jsx  const HTML = <span>Hello World</span>;    <div key={ ID } dangerouslySetInnerHTML={ { __html: HTML } } />  ```    which will render:    ```html  <div><span>Hello World</span></div>  ```    It would be mostly helpful for rendering HTML from jsx on the back end rather than in the SPA context. To me `Fragment` seems to be the ideal candidate to support `dangerouslySetInnerHTML` so that you may inject HTML without wrapping elements.    ```jsx  const HTML = <span>Hello World</span>;    <Fragment key={ ID } dangerouslySetInnerHTML={ { __html: HTML } } />  ```    would render:    ```jsx  <span>Hello World</span>  ```    Simple, obvious and aligned with the current API.",
        "human_words": "The addition of the `Fragment` in 16.2.0 is fantastic and helps keep our HTML semantic and clean. Unfortunately there is still no way to inject HTML without a wrapping tag.        which will render:        It would be mostly helpful for rendering HTML from jsx on the back end rather than in the SPA context. To me `Fragment` seems to be the ideal candidate to support `dangerouslySetInnerHTML` so that you may inject HTML without wrapping elements.        would render:        Simple, obvious and aligned with the current API.",
        "human_words_regrex": "The addition of the `Fragment` in 16.2.0 is fantastic and helps keep our HTML semantic and clean. Unfortunately there is still no way to inject HTML without a wrapping tag. which will render: It would be mostly helpful for rendering HTML from jsx on the back end rather than in the SPA context. To me `Fragment` seems to be the ideal candidate to support `dangerouslySetInnerHTML` so that you may inject HTML without wrapping elements. would render: Simple, obvious and aligned with the current API.",
        "human_words_stopwords_removal_lemmatization": "addition ` fragment ` 16.2.0 fantastic help keep html semantic clean . unfortunately still way inject html without wrapping tag . render : would mostly helpful rendering html jsx back end rather spa context . ` fragment ` seems ideal candidate support ` dangerouslysetinnerhtml ` may inject html without wrapping element . would render : simple , obvious aligned current api .",
        "title_stopwords_removal_lemmatization": "fragment support dangerouslysetinnerhtml"
    },
    {
        "issue_id": 288072258,
        "title": "React.Children.toArray and React.cloneElement do not work with portal elements",
        "label": [
            "Type: Feature Request",
            "Component: Core Utilities",
            "Resolution: Stale"
        ],
        "date": "2018-01-12T10:23:26Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBUG or undefined behaviour\r\n\r\n**What is the current behavior?**\r\n\r\nDoing\r\n```\r\nReact.Children.toArray(\r\n  ReactDOM.createPortal(...)\r\n)\r\n```\r\n\r\nfails with:\r\n```\r\nObjects are not valid as a React child (found: object with keys {$$typeof, key, children, containerInfo, implementation}). If you meant to render a collection of children, use an array instead.\r\n```\r\n\r\nNamely, the following complete snippet fails:\r\n\r\n```jsx\r\nimport React from 'react';\r\nimport { render, createPortal } from 'react-dom';\r\n\r\nconst RenderChildren = ({ children }) => {\r\n  children = React.Children.toArray(children)\r\n  return <h1>Renders children with toArray: {children}</h1>\r\n}\r\n\r\n\r\nconst App = () => ( \r\n  <RenderChildren name=\"CodeSandbox\">\r\n    {createPortal(<div>rendered in portal</div>, document.getElementById('portal'))}\r\n  </RenderChildren>\r\n);\r\n\r\nrender(<App />, document.getElementById('root'));\r\n```\r\n\r\nwhile the following one, which wraps the portal in another element works just fine\r\n\r\n```jsx\r\nimport React from 'react';\r\nimport { render, createPortal } from 'react-dom';\r\n\r\nconst RenderChildren = ({ children }) => {\r\n  children = React.Children.toArray(children)\r\n  return <h1>Renders children with toArray: {children}</h1>\r\n}\r\n\r\n\r\nconst App = () => ( \r\n  <RenderChildren name=\"CodeSandbox\">\r\n    <div>\r\n        {createPortal(<div>rendered in portal</div>, document.getElementById('portal'))}\r\n    </div>\r\n  </RenderChildren>\r\n);\r\n\r\nrender(<App />, document.getElementById('root'));\r\n\r\n```\r\n**What is the expected behavior?**\r\nI am aware that `createPortal` is a new feature, but in the best case scenario it should be possible to use it everywhere other valid nodes are accepted.\r\n\r\nThe same thing is happening for `React.cloneElement(ReactDOM.createPortal(....))` - it's probably weird to try and clone a portal \ud83d\ude04  - but maybe we should specify in the `createPortal` documentation that it cannot be cloned, at least for now. Should I open a PR for that?\r\n\r\nLet me know your thoughts\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nI'm using React 16.*",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**    BUG or undefined behaviour    **What is the current behavior?**    Doing  ```  React.Children.toArray(    ReactDOM.createPortal(...)  )  ```    fails with:  ```  Objects are not valid as a React child (found: object with keys {$$typeof, key, children, containerInfo, implementation}). If you meant to render a collection of children, use an array instead.  ```    Namely, the following complete snippet fails:    ```jsx  import React from 'react';  import { render, createPortal } from 'react-dom';    const RenderChildren = ({ children }) => {    children = React.Children.toArray(children)    return <h1>Renders children with toArray: {children}</h1>  }      const App = () => (     <RenderChildren name=\"CodeSandbox\">      {createPortal(<div>rendered in portal</div>, document.getElementById('portal'))}    </RenderChildren>  );    render(<App />, document.getElementById('root'));  ```    while the following one, which wraps the portal in another element works just fine    ```jsx  import React from 'react';  import { render, createPortal } from 'react-dom';    const RenderChildren = ({ children }) => {    children = React.Children.toArray(children)    return <h1>Renders children with toArray: {children}</h1>  }      const App = () => (     <RenderChildren name=\"CodeSandbox\">      <div>          {createPortal(<div>rendered in portal</div>, document.getElementById('portal'))}      </div>    </RenderChildren>  );    render(<App />, document.getElementById('root'));    ```  **What is the expected behavior?**  I am aware that `createPortal` is a new feature, but in the best case scenario it should be possible to use it everywhere other valid nodes are accepted.    The same thing is happening for `React.cloneElement(ReactDOM.createPortal(....))` - it's probably weird to try and clone a portal \ud83d\ude04  - but maybe we should specify in the `createPortal` documentation that it cannot be cloned, at least for now. Should I open a PR for that?    Let me know your thoughts    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    I'm using React 16.*",
        "human_words": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**    BUG or undefined behaviour    **What is the current behavior?**    Doing      fails with:      Namely, the following complete snippet fails:        while the following one, which wraps the portal in another element works just fine      **What is the expected behavior?**  I am aware that `createPortal` is a new feature, but in the best case scenario it should be possible to use it everywhere other valid nodes are accepted.    The same thing is happening for `React.cloneElement(ReactDOM.createPortal(....))` - it's probably weird to try and clone a portal \ud83d\ude04  - but maybe we should specify in the `createPortal` documentation that it cannot be cloned, at least for now. Should I open a PR for that?    Let me know your thoughts    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    I'm using React 16.*",
        "human_words_regrex": " **Do you want to request a *feature* or report a *bug*?** BUG or undefined behaviour **What is the current behavior?** Doing fails with: Namely, the following complete snippet fails: while the following one, which wraps the portal in another element works just fine **What is the expected behavior?** I am aware that `createPortal` is a new feature, but in the best case scenario it should be possible to use it everywhere other valid nodes are accepted. The same thing is happening for `React.cloneElement(ReactDOM.createPortal(....))` - it's probably weird to try and clone a portal \ud83d\ude04 - but maybe we should specify in the `createPortal` documentation that it cannot be cloned, at least for now. Should I open a PR for that? Let me know your thoughts **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** I'm using React 16.*",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * bug undefined behaviour * * current behavior ? * * fails : namely , following complete snippet fails : following one , wrap portal another element work fine * * expected behavior ? * * aware ` createportal ` new feature , best case scenario possible use everywhere valid node accepted . thing happening ` react.cloneelement ( reactdom.createportal ( .... ) ) ` - 's probably weird try clone portal \ud83d\ude04 - maybe specify ` createportal ` documentation cloned , least . open pr ? let know thought * * version react , browser / o affected issue ? work previous version react ? * * 'm using react 16 . *",
        "title_stopwords_removal_lemmatization": "react.children.toarray react.cloneelement work portal element"
    },
    {
        "issue_id": 287041465,
        "title": "Symbols as keys in children as arrays or iterators",
        "label": [
            "Type: Feature Request",
            "Component: Reconciler"
        ],
        "date": "2018-01-09T10:35:40Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nI want to request a feature\r\n\r\n**What is the current behavior?**\r\n\r\nUsing `Symbols` as element keys throws a type error.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nWhen using `key={Symbol('myKeySymbol')}` we get the following `TypeError: Cannot convert a Symbol value to a string at Object.ReactElement.createElement`\r\n\r\n[codesandbox here](https://codesandbox.io/s/733pypz57j)\r\n\r\n**What is the expected behavior?**\r\nUsing `Symbols` as keys should work seamlessly, in my opinion element keys are a perfect use-case for `Symbols`.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nUsing React `16.0.0` and the browsers affected are Safari, Chrome and Firefox on OSX, but I'm pretty sure this is not browser dependent but a matter of implementation.\r\n\r\n~~~\r\n\r\nThanks.\r\n",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**    I want to request a feature    **What is the current behavior?**    Using `Symbols` as element keys throws a type error.    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**    When using `key={Symbol('myKeySymbol')}` we get the following `TypeError: Cannot convert a Symbol value to a string at Object.ReactElement.createElement`    [codesandbox here](https://codesandbox.io/s/733pypz57j)    **What is the expected behavior?**  Using `Symbols` as keys should work seamlessly, in my opinion element keys are a perfect use-case for `Symbols`.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    Using React `16.0.0` and the browsers affected are Safari, Chrome and Firefox on OSX, but I'm pretty sure this is not browser dependent but a matter of implementation.    ~~~    Thanks.",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**    I want to request a feature    **What is the current behavior?**    Using `Symbols` as element keys throws a type error.    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**    When using `key={Symbol('myKeySymbol')}` we get the following `TypeError: Cannot convert a Symbol value to a string at Object.ReactElement.createElement`    [codesandbox here](https://codesandbox.io/s/733pypz57j)    **What is the expected behavior?**  Using `Symbols` as keys should work seamlessly, in my opinion element keys are a perfect use-case for `Symbols`.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    Using React `16.0.0` and the browsers affected are Safari, Chrome and Firefox on OSX, but I'm pretty sure this is not browser dependent but a matter of implementation.    ~~~    Thanks.",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** I want to request a feature **What is the current behavior?** Using `Symbols` as element keys throws a type error. **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle ( or CodeSandbox ( example below:** When using `key={Symbol('myKeySymbol')}` we get the following `TypeError: Cannot convert a Symbol value to a string at Object.ReactElement.createElement`  **What is the expected behavior?** Using `Symbols` as keys should work seamlessly, in my opinion element keys are a perfect use-case for `Symbols`. **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** Using React `16.0.0` and the browsers affected are Safari, Chrome and Firefox on OSX, but I'm pretty sure this is not browser dependent but a matter of implementation. ~~~ Thanks.",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * want request feature * * current behavior ? * * using ` symbol ` element key throw type error . * * current behavior bug , please provide step reproduce possible minimal demo problem . bug get fixed much faster run code n't dependency react . paste link jsfiddle ( codesandbox ( example : * * using ` key= { symbol ( 'mykeysymbol ' ) } ` get following ` typeerror : convert symbol value string object.reactelement.createelement ` * * expected behavior ? * * using ` symbol ` key work seamlessly , opinion element key perfect use-case ` symbol ` . * * version react , browser / o affected issue ? work previous version react ? * * using react ` 16.0.0 ` browser affected safari , chrome firefox osx , 'm pretty sure browser dependent matter implementation . ~~~ thanks .",
        "title_stopwords_removal_lemmatization": "symbol key child array iterators"
    },
    {
        "issue_id": 286622764,
        "title": "Lifecycle methods for ReactDOM.hydrate",
        "label": [
            "Type: Feature Request",
            "Component: DOM",
            "Component: Server Rendering",
            "Resolution: Stale"
        ],
        "date": "2018-01-08T02:13:55Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature\r\n\r\n**What is the current behavior?**\r\n\r\nThere is no way to distinguish if a `componentDidMount` or `componentWillMount` lifecycle method was called in response to a call to `ReactDOM.hydrate`.\r\n\r\n**What is the expected behavior?**\r\n\r\nI have a component that scrolls to the top of the page in componentDidMount. This makes sense when the component is first created within the client. However, it doesn't make sense when the component has been hydrated, as `componentDidMount` is called after the content is already visible, and possibly after the user has already scrolled.\r\n\r\nWould it be possible to add a `componentWillHydrate` lifecycle method? Then I could do something like this to achieve the desired behavior:\r\n\r\n```js\r\ncomponentWillHydrate() {\r\n  this.hydrated = true \r\n}\r\ncomponentDidMount() {\r\n  if (!this.hydrated) {\r\n    this.scrollToTop()\r\n  }\r\n}\r\n```\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nAll",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**    Feature    **What is the current behavior?**    There is no way to distinguish if a `componentDidMount` or `componentWillMount` lifecycle method was called in response to a call to `ReactDOM.hydrate`.    **What is the expected behavior?**    I have a component that scrolls to the top of the page in componentDidMount. This makes sense when the component is first created within the client. However, it doesn't make sense when the component has been hydrated, as `componentDidMount` is called after the content is already visible, and possibly after the user has already scrolled.    Would it be possible to add a `componentWillHydrate` lifecycle method? Then I could do something like this to achieve the desired behavior:    ```js  componentWillHydrate() {    this.hydrated = true   }  componentDidMount() {    if (!this.hydrated) {      this.scrollToTop()    }  }  ```    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    All",
        "human_words": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**    Feature    **What is the current behavior?**    There is no way to distinguish if a `componentDidMount` or `componentWillMount` lifecycle method was called in response to a call to `ReactDOM.hydrate`.    **What is the expected behavior?**    I have a component that scrolls to the top of the page in componentDidMount. This makes sense when the component is first created within the client. However, it doesn't make sense when the component has been hydrated, as `componentDidMount` is called after the content is already visible, and possibly after the user has already scrolled.    Would it be possible to add a `componentWillHydrate` lifecycle method? Then I could do something like this to achieve the desired behavior:        **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    All",
        "human_words_regrex": " **Do you want to request a *feature* or report a *bug*?** Feature **What is the current behavior?** There is no way to distinguish if a `componentDidMount` or `componentWillMount` lifecycle method was called in response to a call to `ReactDOM.hydrate`. **What is the expected behavior?** I have a component that scrolls to the top of the page in componentDidMount. This makes sense when the component is first created within the client. However, it doesn't make sense when the component has been hydrated, as `componentDidMount` is called after the content is already visible, and possibly after the user has already scrolled. Would it be possible to add a `componentWillHydrate` lifecycle method? Then I could do something like this to achieve the desired behavior: **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** All",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * feature * * current behavior ? * * way distinguish ` componentdidmount ` ` componentwillmount ` lifecycle method called response call ` reactdom.hydrate ` . * * expected behavior ? * * component scroll top page componentdidmount . make sense component first created within client . however , n't make sense component hydrated , ` componentdidmount ` called content already visible , possibly user already scrolled . would possible add ` componentwillhydrate ` lifecycle method ? could something like achieve desired behavior : * * version react , browser / o affected issue ? work previous version react ? * *",
        "title_stopwords_removal_lemmatization": "lifecycle method reactdom.hydrate"
    },
    {
        "issue_id": 286347050,
        "title": "Add React.createRef() as the migration path for string refs",
        "label": [
            "Type: Feature Request",
            "Component: Component API"
        ],
        "date": "2018-01-05T17:04:10Z",
        "status": "closed",
        "description": "Creating this issue to track https://github.com/facebook/react/pull/11555. I intend to close the PR as it's outdated, but we probably want to turn it into a real RFC and potentially get it in during 16.x.",
        "remove_template_description": "Creating this issue to track https://github.com/facebook/react/pull/11555. I intend to close the PR as it's outdated, but we probably want to turn it into a real RFC and potentially get it in during 16.x.",
        "human_words": "Creating this issue to track https://github.com/facebook/react/pull/11555. I intend to close the PR as it's outdated, but we probably want to turn it into a real RFC and potentially get it in during 16.x.",
        "human_words_regrex": "Creating this issue to track  I intend to close the PR as it's outdated, but we probably want to turn it into a real RFC and potentially get it in during 16.x.",
        "human_words_stopwords_removal_lemmatization": "creating issue track intend close pr 's outdated , probably want turn real rfc potentially get 16.x .",
        "title_stopwords_removal_lemmatization": "add react.createref ( ) migration path string ref"
    },
    {
        "issue_id": 283447381,
        "title": "Include component props into the stack from componentDidCatch()",
        "label": [
            "Type: Feature Request",
            "Component: Reconciler",
            "Resolution: Stale"
        ],
        "date": "2017-12-20T04:38:28Z",
        "status": "closed",
        "description": "Second argument of `componentDidCatch` contains componentStack like this:\r\n```\r\n{\"componentStack\":\"\r\n in _Header (created by onlyUpdateForKeys(_Header))\r\n in onlyUpdateForKeys(_Header) (created by TDSection)\r\n in TDSection (created by Container)\r\n in Container (created by AutoLookup)\r\n in AutoLookup (created by AutoLookup)\r\n in AutoLookup (created by GroupContainer)\r\n in GroupContainer (created by Container)\r\n in Container (created by AutoLookup)\r\n in AutoLookup (created by _Content)\r\n in div (created by _Content)\r\n in _Content (created by pure(_Content))\r\n in pure(_Content) (created by ContentList)\r\n in ContentList (created by TabContainer)\r\n in TabContainer (created by Container)\r\n in Container (created by AutoLookup)\r\n in AutoLookup (created by AutoLookup)\r\n in AutoLookup (created by CardBase)\r\n in div (created by SharedStorage)\r\n in SharedStorage (created by CardBase)\r\n in TDValidation (created by CardBase)\r\n in CardBase (created by Wrapper)\r\n in Wrapper (created by Connect(Wrapper))\r\n in Connect(Wrapper) (created by mapProps(Connect(Wrapper)))\r\n in mapProps(Connect(Wrapper)) (created by Connect(mapProps(Connect(Wrapper))))\r\n in Connect(mapProps(Connect(Wrapper))) (created by getContext(Connect(mapProps(Connect(Wrapper)))))\r\n in getContext(Connect(mapProps(Connect(Wrapper)))) (created by Card)\r\n in Card (created by branch(Card))\r\n in branch(Card) (created by Connect(branch(Card)))\r\n in Connect(branch(Card)) (created by getContext(Connect(branch(Card))))\r\n in getContext(Connect(branch(Card))) (created by Connect(getContext(Connect(branch(Card)))))\r\n in Connect(getContext(Connect(branch(Card)))) (created by getContext(Connect(getContext(Connect(branch(Card))))))\r\n in getContext(Connect(getContext(Connect(branch(Card))))) (created by mapProps(getContext(Connect(getContext(Connect(branch(Card)))))))\r\n in mapProps(getContext(Connect(getContext(Connect(branch(Card)))))) (created by Connect(mapProps(getContext(Connect(getContext(Connect(branch(Card))))))))\r\n in Connect(mapProps(getContext(Connect(getContext(Connect(branch(Card))))))) (created by getContext(Connect(mapProps(getContext(Connect(getContext(Connect(branch(Card)))))))))\r\n in getContext(Connect(mapProps(getContext(Connect(getContext(Connect(branch(Card)))))))) (created by _Tab)\r\n in div (created by LoadingWrapper)\r\n in div (created by LoadingWrapper)\r\n in LoadingWrapper (created by Connect(LoadingWrapper))\r\n in Connect(LoadingWrapper) (created by _Tab)\r\n in div (created by _Tab)\r\n in _Tab (created by Connect(_Tab))\r\n in Connect(_Tab) (created by withContext(Connect(_Tab)))\r\n in withContext(Connect(_Tab)) (created by Page)\r\n in Page (created by Connect(Page))\r\n in Connect(Page) (created by onlyUpdateForKeys(Connect(Page)))\r\n in onlyUpdateForKeys(Connect(Page)) (created by ContentRouter)\r\n in ContentRouter (created by _Content)\r\n in _Content (created by Connect(_Content))\r\n in Connect(_Content) (created by _SplitPane)\r\n in div (created by ContentWrapper)\r\n in div (created by ContentWrapper)\r\n in ContentWrapper (created by _SplitPane)\r\n in div (created by _SplitPane)\r\n in _SplitPane (created by Connect(_SplitPane))\r\n in Connect(_SplitPane) (created by _MasterLayout)\r\n in div (created by _MasterLayout)\r\n in div (created by _MasterLayout)\r\n in _MasterLayout (created by Connect(_MasterLayout))\r\n in Connect(_MasterLayout) (created by Root)\r\n in div (created by ThemeChanger)\r\n in ThemeChanger (created by Connect(ThemeChanger))\r\n in Connect(ThemeChanger) (created by Root)\r\n in StartupSync (created by Connect(StartupSync))\r\n in Connect(StartupSync) (created by Root)\r\n in _default (created by Root)\r\n in Provider (created by Root)\r\n in Root\r\n in AppContainer\"}\r\n```\r\nThis data don't contain any helpful error data if user send me ticket to bugtracker. Can info contain props of every component?\r\n",
        "remove_template_description": "Second argument of `componentDidCatch` contains componentStack like this:  ```  {\"componentStack\":\"   in _Header (created by onlyUpdateForKeys(_Header))   in onlyUpdateForKeys(_Header) (created by TDSection)   in TDSection (created by Container)   in Container (created by AutoLookup)   in AutoLookup (created by AutoLookup)   in AutoLookup (created by GroupContainer)   in GroupContainer (created by Container)   in Container (created by AutoLookup)   in AutoLookup (created by _Content)   in div (created by _Content)   in _Content (created by pure(_Content))   in pure(_Content) (created by ContentList)   in ContentList (created by TabContainer)   in TabContainer (created by Container)   in Container (created by AutoLookup)   in AutoLookup (created by AutoLookup)   in AutoLookup (created by CardBase)   in div (created by SharedStorage)   in SharedStorage (created by CardBase)   in TDValidation (created by CardBase)   in CardBase (created by Wrapper)   in Wrapper (created by Connect(Wrapper))   in Connect(Wrapper) (created by mapProps(Connect(Wrapper)))   in mapProps(Connect(Wrapper)) (created by Connect(mapProps(Connect(Wrapper))))   in Connect(mapProps(Connect(Wrapper))) (created by getContext(Connect(mapProps(Connect(Wrapper)))))   in getContext(Connect(mapProps(Connect(Wrapper)))) (created by Card)   in Card (created by branch(Card))   in branch(Card) (created by Connect(branch(Card)))   in Connect(branch(Card)) (created by getContext(Connect(branch(Card))))   in getContext(Connect(branch(Card))) (created by Connect(getContext(Connect(branch(Card)))))   in Connect(getContext(Connect(branch(Card)))) (created by getContext(Connect(getContext(Connect(branch(Card))))))   in getContext(Connect(getContext(Connect(branch(Card))))) (created by mapProps(getContext(Connect(getContext(Connect(branch(Card)))))))   in mapProps(getContext(Connect(getContext(Connect(branch(Card)))))) (created by Connect(mapProps(getContext(Connect(getContext(Connect(branch(Card))))))))   in Connect(mapProps(getContext(Connect(getContext(Connect(branch(Card))))))) (created by getContext(Connect(mapProps(getContext(Connect(getContext(Connect(branch(Card)))))))))   in getContext(Connect(mapProps(getContext(Connect(getContext(Connect(branch(Card)))))))) (created by _Tab)   in div (created by LoadingWrapper)   in div (created by LoadingWrapper)   in LoadingWrapper (created by Connect(LoadingWrapper))   in Connect(LoadingWrapper) (created by _Tab)   in div (created by _Tab)   in _Tab (created by Connect(_Tab))   in Connect(_Tab) (created by withContext(Connect(_Tab)))   in withContext(Connect(_Tab)) (created by Page)   in Page (created by Connect(Page))   in Connect(Page) (created by onlyUpdateForKeys(Connect(Page)))   in onlyUpdateForKeys(Connect(Page)) (created by ContentRouter)   in ContentRouter (created by _Content)   in _Content (created by Connect(_Content))   in Connect(_Content) (created by _SplitPane)   in div (created by ContentWrapper)   in div (created by ContentWrapper)   in ContentWrapper (created by _SplitPane)   in div (created by _SplitPane)   in _SplitPane (created by Connect(_SplitPane))   in Connect(_SplitPane) (created by _MasterLayout)   in div (created by _MasterLayout)   in div (created by _MasterLayout)   in _MasterLayout (created by Connect(_MasterLayout))   in Connect(_MasterLayout) (created by Root)   in div (created by ThemeChanger)   in ThemeChanger (created by Connect(ThemeChanger))   in Connect(ThemeChanger) (created by Root)   in StartupSync (created by Connect(StartupSync))   in Connect(StartupSync) (created by Root)   in _default (created by Root)   in Provider (created by Root)   in Root   in AppContainer\"}  ```  This data don't contain any helpful error data if user send me ticket to bugtracker. Can info contain props of every component?",
        "human_words": "Second argument of `componentDidCatch` contains componentStack like this:    This data don't contain any helpful error data if user send me ticket to bugtracker. Can info contain props of every component?",
        "human_words_regrex": "Second argument of `componentDidCatch` contains componentStack like this: This data don't contain any helpful error data if user send me ticket to bugtracker. Can info contain props of every component?",
        "human_words_stopwords_removal_lemmatization": "second argument ` componentdidcatch ` contains componentstack like : data n't contain helpful error data user send ticket bugtracker . info contain prop every component ?",
        "title_stopwords_removal_lemmatization": "include component prop stack componentdidcatch ( )"
    },
    {
        "issue_id": 281901860,
        "title": "Lifecycle method to build initial state for classes",
        "label": [
            "Type: Feature Request",
            "Resolution: Needs More Information"
        ],
        "date": "2017-12-13T21:24:31Z",
        "status": "closed",
        "description": "**Feature request**\r\nWe need to have a way to build the initial state of ReactComponent in case of usage of classes.\r\n\r\n**What is the current behavior?**\r\nWarning in case this.state modified in willComponentMount.\r\n\r\nAccess to partially constructed object in case of somewhat complex state building logic in the constructor.\r\n\r\nFor example, if we have a hierarchy of classes with the _buildState method called in the constructor to generate an initial state.\r\nDerived class overrides the _buildState method to have a richer state. In result, part of the object related to the derived class won't be constructed yet and can't be accessed in the _buildState.\r\n\r\nThe buildState approach is currently used in ReSub framework:\r\nhttps://github.com/Microsoft/ReSub\r\n\r\n**What is the expected behavior?**\r\nRather no warning in case of this.state modification or new Lifecycle method which is called right after constructor call which returns the state.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact 16+ is affected.\r\n",
        "remove_template_description": "**Feature request**  We need to have a way to build the initial state of ReactComponent in case of usage of classes.    **What is the current behavior?**  Warning in case this.state modified in willComponentMount.    Access to partially constructed object in case of somewhat complex state building logic in the constructor.    For example, if we have a hierarchy of classes with the _buildState method called in the constructor to generate an initial state.  Derived class overrides the _buildState method to have a richer state. In result, part of the object related to the derived class won't be constructed yet and can't be accessed in the _buildState.    The buildState approach is currently used in ReSub framework:  https://github.com/Microsoft/ReSub    **What is the expected behavior?**  Rather no warning in case of this.state modification or new Lifecycle method which is called right after constructor call which returns the state.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  React 16+ is affected.",
        "human_words": "**Feature request**  We need to have a way to build the initial state of ReactComponent in case of usage of classes.    **What is the current behavior?**  Warning in case this.state modified in willComponentMount.    Access to partially constructed object in case of somewhat complex state building logic in the constructor.    For example, if we have a hierarchy of classes with the _buildState method called in the constructor to generate an initial state.  Derived class overrides the _buildState method to have a richer state. In result, part of the object related to the derived class won't be constructed yet and can't be accessed in the _buildState.    The buildState approach is currently used in ReSub framework:  https://github.com/Microsoft/ReSub    **What is the expected behavior?**  Rather no warning in case of this.state modification or new Lifecycle method which is called right after constructor call which returns the state.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  React 16+ is affected.",
        "human_words_regrex": "**Feature request** We need to have a way to build the initial state of ReactComponent in case of usage of classes. **What is the current behavior?** Warning in case this.state modified in willComponentMount. Access to partially constructed object in case of somewhat complex state building logic in the constructor. For example, if we have a hierarchy of classes with the _buildState method called in the constructor to generate an initial state. Derived class overrides the _buildState method to have a richer state. In result, part of the object related to the derived class won't be constructed yet and can't be accessed in the _buildState. The buildState approach is currently used in ReSub framework:  **What is the expected behavior?** Rather no warning in case of this.state modification or new Lifecycle method which is called right after constructor call which returns the state. **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** React 16+ is affected.",
        "human_words_stopwords_removal_lemmatization": "* * feature request * * need way build initial state reactcomponent case usage class . * * current behavior ? * * warning case this.state modified willcomponentmount . access partially constructed object case somewhat complex state building logic constructor . example , hierarchy class _buildstate method called constructor generate initial state . derived class override _buildstate method richer state . result , part object related derived class wo n't constructed yet ca n't accessed _buildstate . buildstate approach currently used resub framework : * * expected behavior ? * * rather warning case this.state modification new lifecycle method called right constructor call return state . * * version react , browser / o affected issue ? work previous version react ? * * react 16+ affected .",
        "title_stopwords_removal_lemmatization": "lifecycle method build initial state class"
    },
    {
        "issue_id": 280596948,
        "title": "Enable synchronously toggling experimental addUserTimingListener",
        "label": [
            "Type: Feature Request",
            "Component: Developer Tools"
        ],
        "date": "2017-12-08T19:45:41Z",
        "status": "closed",
        "description": "Currently ReactInternals.addUserTimingListener enables logging to the User Timing API inside a `setTimeout`. \r\nHowever, for the use case of building a profiling tool where instrumentation is turned off most \r\nof the time to avoid overhead, then randomly turned on for a period to take a sample, it would be ideal to be able to enable this logging synchronously (eg. turn it on at the start of a callstack and turn it off again at the end of the synchronous stack).\r\n\r\nThis is complicated by the fact that the enabled state of the logging should not be toggled inside a React callstack. As the profiler would have control over when the toggling happens, I think it would be fine to throw an error/return false/something like that if the logging was toggled while inside a React stack, allowing the profiler to try again later.\r\n\r\nIn fact, if the toggling was synchronous the profiler cp avoid this error by doing the toggling at the start and end of an event handler/setTimeout/reqAnimFrame etc which would ensure that we are not inside synchronous call into React (though I'm not quite sure what the implications of Fiber are here; would React async rendering mean that we could re-enter from the event loop at a time when this toggling should not happen?). \r\n\r\nAlternatively the toggling could happen 'async but just later in the same React stack' (like setState). In this case the code requesting the toggling would probably need some kind of callback to know that toggling happened so it can keep track of whether React's logging is on or off. However this variant seems like it would be more complicated to implement, and for our use case I don't think it's any more useful than having the toggling just fail in a recoverable way.\r\n\r\ncc @gaearon ",
        "remove_template_description": "Currently ReactInternals.addUserTimingListener enables logging to the User Timing API inside a `setTimeout`.   However, for the use case of building a profiling tool where instrumentation is turned off most   of the time to avoid overhead, then randomly turned on for a period to take a sample, it would be ideal to be able to enable this logging synchronously (eg. turn it on at the start of a callstack and turn it off again at the end of the synchronous stack).    This is complicated by the fact that the enabled state of the logging should not be toggled inside a React callstack. As the profiler would have control over when the toggling happens, I think it would be fine to throw an error/return false/something like that if the logging was toggled while inside a React stack, allowing the profiler to try again later.    In fact, if the toggling was synchronous the profiler cp avoid this error by doing the toggling at the start and end of an event handler/setTimeout/reqAnimFrame etc which would ensure that we are not inside synchronous call into React (though I'm not quite sure what the implications of Fiber are here; would React async rendering mean that we could re-enter from the event loop at a time when this toggling should not happen?).     Alternatively the toggling could happen 'async but just later in the same React stack' (like setState). In this case the code requesting the toggling would probably need some kind of callback to know that toggling happened so it can keep track of whether React's logging is on or off. However this variant seems like it would be more complicated to implement, and for our use case I don't think it's any more useful than having the toggling just fail in a recoverable way.    cc @gaearon",
        "human_words": "Currently ReactInternals.addUserTimingListener enables logging to the User Timing API inside a `setTimeout`.   However, for the use case of building a profiling tool where instrumentation is turned off most   of the time to avoid overhead, then randomly turned on for a period to take a sample, it would be ideal to be able to enable this logging synchronously (eg. turn it on at the start of a callstack and turn it off again at the end of the synchronous stack).    This is complicated by the fact that the enabled state of the logging should not be toggled inside a React callstack. As the profiler would have control over when the toggling happens, I think it would be fine to throw an error/return false/something like that if the logging was toggled while inside a React stack, allowing the profiler to try again later.    In fact, if the toggling was synchronous the profiler cp avoid this error by doing the toggling at the start and end of an event handler/setTimeout/reqAnimFrame etc which would ensure that we are not inside synchronous call into React (though I'm not quite sure what the implications of Fiber are here; would React async rendering mean that we could re-enter from the event loop at a time when this toggling should not happen?).     Alternatively the toggling could happen 'async but just later in the same React stack' (like setState). In this case the code requesting the toggling would probably need some kind of callback to know that toggling happened so it can keep track of whether React's logging is on or off. However this variant seems like it would be more complicated to implement, and for our use case I don't think it's any more useful than having the toggling just fail in a recoverable way.    cc @gaearon",
        "human_words_regrex": "Currently ReactInternals.addUserTimingListener enables logging to the User Timing API inside a `setTimeout`. However, for the use case of building a profiling tool where instrumentation is turned off most of the time to avoid overhead, then randomly turned on for a period to take a sample, it would be ideal to be able to enable this logging synchronously (eg. turn it on at the start of a callstack and turn it off again at the end of the synchronous stack). This is complicated by the fact that the enabled state of the logging should not be toggled inside a React callstack. As the profiler would have control over when the toggling happens, I think it would be fine to throw an error/return false/something like that if the logging was toggled while inside a React stack, allowing the profiler to try again later. In fact, if the toggling was synchronous the profiler cp avoid this error by doing the toggling at the start and end of an event handler/setTimeout/reqAnimFrame etc which would ensure that we are not inside synchronous call into React (though I'm not quite sure what the implications of Fiber are here; would React async rendering mean that we could re-enter from the event loop at a time when this toggling should not happen?). Alternatively the toggling could happen 'async but just later in the same React stack' (like setState). In this case the code requesting the toggling would probably need some kind of callback to know that toggling happened so it can keep track of whether React's logging is on or off. However this variant seems like it would be more complicated to implement, and for our use case I don't think it's any more useful than having the toggling just fail in a recoverable way. cc @gaearon",
        "human_words_stopwords_removal_lemmatization": "currently reactinternals.addusertiminglistener enables logging user timing api inside ` settimeout ` . however , use case building profiling tool instrumentation turned time avoid overhead , randomly turned period take sample , would ideal able enable logging synchronously ( eg . turn start callstack turn end synchronous stack ) . complicated fact enabled state logging toggled inside react callstack . profiler would control toggling happens , think would fine throw error/return false/something like logging toggled inside react stack , allowing profiler try later . fact , toggling synchronous profiler cp avoid error toggling start end event handler/settimeout/reqanimframe etc would ensure inside synchronous call react ( though 'm quite sure implication fiber ; would react async rendering mean could re-enter event loop time toggling happen ? ) . alternatively toggling could happen 'async later react stack ' ( like setstate ) . case code requesting toggling would probably need kind callback know toggling happened keep track whether react 's logging . however variant seems like would complicated implement , use case n't think 's useful toggling fail recoverable way . cc @ gaearon",
        "title_stopwords_removal_lemmatization": "enable synchronously toggling experimental addusertiminglistener"
    },
    {
        "issue_id": 280411871,
        "title": "Feature request: Global state at the render/hydrate level",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2017-12-08T08:31:37Z",
        "status": "closed",
        "description": "This is a feature request. It relates to https://discuss.reactjs.org/t/suggestion-for-global-context/9035\r\n\r\nThis has been a pain point for me, and I'm sure we can do better. The issue: How to have some state available to all components without passing everything down on props through the component tree.\r\n\r\nI'm speaking about global state. So why not use context? I have a couple of issue with it.\r\n\r\n1. It's not the root component's job to receive and disseminate state. The root component is just some component. It shouldn't care if it's root or not. Maybe you have (example using Express):\r\n\r\n    `res.render('homepage.jsx', {});`\r\n\r\nBut some other page might just as well have:\r\n\r\n    res.render('otherpage.jsx', {}) where otherpage has:\r\n\r\n    <div>\r\n      <Something />\r\n      <Homepage />\r\n    </div>\r\n\r\nComponents can be composed however you like, they shouldn't care what depth they're at.\r\n\r\n2. Above is talking about a multipage app. The thinking around React seems to be so skewed toward to the special case of Single Page App. SPA is sometimes the right choice. If you're Google Maps it's clearly right. If you're something broader in scope like Amazon.com it's clearly not. The general case is much more interesting to solve.\r\n\r\n3. Having every root component wrapped in some `<Provider>` that publishes context downwards, and every non-root component wrapped in some \"receiver\" higher level component that declares context is just boilerplate. It's not expressive, it's bookkeeping.\r\n\r\n4. Alternatives: There aren't any as far as I know. Each component only knows about the props (and possibly context) passed in, it doesn't have any handle on data for the current render() call. Simply importing global state through CommonJS or ES6 modules is impossible on the serverside for anything request scoped (like query params, route params, cookies, headers, anything generated by middleware based on these things).\r\n\r\n-- PROPOSAL --\r\n\r\nWhy not just handle global state at a higher level than props passed component to component? Why not extend ReactDOM.render to take a 4th argument for global context? It would just make everyone's life easier. Don't even worry about changes firing componentWillReceiveProps, at least as a first version.\r\n\r\nThink of it as analogous to Express and the \"req\" object that's passed around. One should always have access to some \"per request\" object. So many things would be useful to put in there (authenticated user, geolocation, \"store\" from Redux, query and route params, etc, etc).\r\n\r\nIt would look like:\r\n\r\n    ReactDOM.render(rootComponent, someDiv, callback, {... request specific data ...})\r\n\r\nWhere request specific data might have things that are truly request specific and also things that are the same across requests. The latter can be done with imports but it's a bit messy -- you end up with code like:\r\n\r\n    if (typeof window != 'undefined') {\r\n      // Client, get value from window object\r\n    } else {\r\n      // Server, get value from filesystem or wherever\r\n    }\r\n\r\nJust having global data available to all components in the tree simplifies things a lot. Don't you think?\r\n",
        "remove_template_description": "This is a feature request. It relates to https://discuss.reactjs.org/t/suggestion-for-global-context/9035    This has been a pain point for me, and I'm sure we can do better. The issue: How to have some state available to all components without passing everything down on props through the component tree.    I'm speaking about global state. So why not use context? I have a couple of issue with it.    1. It's not the root component's job to receive and disseminate state. The root component is just some component. It shouldn't care if it's root or not. Maybe you have (example using Express):        `res.render('homepage.jsx', {});`    But some other page might just as well have:        res.render('otherpage.jsx', {}) where otherpage has:        <div>        <Something />        <Homepage />      </div>    Components can be composed however you like, they shouldn't care what depth they're at.    2. Above is talking about a multipage app. The thinking around React seems to be so skewed toward to the special case of Single Page App. SPA is sometimes the right choice. If you're Google Maps it's clearly right. If you're something broader in scope like Amazon.com it's clearly not. The general case is much more interesting to solve.    3. Having every root component wrapped in some `<Provider>` that publishes context downwards, and every non-root component wrapped in some \"receiver\" higher level component that declares context is just boilerplate. It's not expressive, it's bookkeeping.    4. Alternatives: There aren't any as far as I know. Each component only knows about the props (and possibly context) passed in, it doesn't have any handle on data for the current render() call. Simply importing global state through CommonJS or ES6 modules is impossible on the serverside for anything request scoped (like query params, route params, cookies, headers, anything generated by middleware based on these things).    -- PROPOSAL --    Why not just handle global state at a higher level than props passed component to component? Why not extend ReactDOM.render to take a 4th argument for global context? It would just make everyone's life easier. Don't even worry about changes firing componentWillReceiveProps, at least as a first version.    Think of it as analogous to Express and the \"req\" object that's passed around. One should always have access to some \"per request\" object. So many things would be useful to put in there (authenticated user, geolocation, \"store\" from Redux, query and route params, etc, etc).    It would look like:        ReactDOM.render(rootComponent, someDiv, callback, {... request specific data ...})    Where request specific data might have things that are truly request specific and also things that are the same across requests. The latter can be done with imports but it's a bit messy -- you end up with code like:        if (typeof window != 'undefined') {        // Client, get value from window object      } else {        // Server, get value from filesystem or wherever      }    Just having global data available to all components in the tree simplifies things a lot. Don't you think?",
        "human_words": "This is a feature request. It relates to https://discuss.reactjs.org/t/suggestion-for-global-context/9035    This has been a pain point for me, and I'm sure we can do better. The issue: How to have some state available to all components without passing everything down on props through the component tree.    I'm speaking about global state. So why not use context? I have a couple of issue with it.    1. It's not the root component's job to receive and disseminate state. The root component is just some component. It shouldn't care if it's root or not. Maybe you have (example using Express):        `res.render('homepage.jsx', {});`    But some other page might just as well have:        res.render('otherpage.jsx', {}) where otherpage has:        <div>        <Something />        <Homepage />      </div>    Components can be composed however you like, they shouldn't care what depth they're at.    2. Above is talking about a multipage app. The thinking around React seems to be so skewed toward to the special case of Single Page App. SPA is sometimes the right choice. If you're Google Maps it's clearly right. If you're something broader in scope like Amazon.com it's clearly not. The general case is much more interesting to solve.    3. Having every root component wrapped in some `<Provider>` that publishes context downwards, and every non-root component wrapped in some \"receiver\" higher level component that declares context is just boilerplate. It's not expressive, it's bookkeeping.    4. Alternatives: There aren't any as far as I know. Each component only knows about the props (and possibly context) passed in, it doesn't have any handle on data for the current render() call. Simply importing global state through CommonJS or ES6 modules is impossible on the serverside for anything request scoped (like query params, route params, cookies, headers, anything generated by middleware based on these things).    -- PROPOSAL --    Why not just handle global state at a higher level than props passed component to component? Why not extend ReactDOM.render to take a 4th argument for global context? It would just make everyone's life easier. Don't even worry about changes firing componentWillReceiveProps, at least as a first version.    Think of it as analogous to Express and the \"req\" object that's passed around. One should always have access to some \"per request\" object. So many things would be useful to put in there (authenticated user, geolocation, \"store\" from Redux, query and route params, etc, etc).    It would look like:        ReactDOM.render(rootComponent, someDiv, callback, {... request specific data ...})    Where request specific data might have things that are truly request specific and also things that are the same across requests. The latter can be done with imports but it's a bit messy -- you end up with code like:        if (typeof window != 'undefined') {        // Client, get value from window object      } else {        // Server, get value from filesystem or wherever      }    Just having global data available to all components in the tree simplifies things a lot. Don't you think?",
        "human_words_regrex": "This is a feature request. It relates to  This has been a pain point for me, and I'm sure we can do better. The issue: How to have some state available to all components without passing everything down on props through the component tree. I'm speaking about global state. So why not use context? I have a couple of issue with it. 1. It's not the root component's job to receive and disseminate state. The root component is just some component. It shouldn't care if it's root or not. Maybe you have (example using Express): `res.render('homepage.jsx', {});` But some other page might just as well have: res.render('otherpage.jsx', {}) where otherpage has:     Components can be composed however you like, they shouldn't care what depth they're at. 2. Above is talking about a multipage app. The thinking around React seems to be so skewed toward to the special case of Single Page App. SPA is sometimes the right choice. If you're Google Maps it's clearly right. If you're something broader in scope like Amazon.com it's clearly not. The general case is much more interesting to solve. 3. Having every root component wrapped in some `` that publishes context downwards, and every non-root component wrapped in some \"receiver\" higher level component that declares context is just boilerplate. It's not expressive, it's bookkeeping. 4. Alternatives: There aren't any as far as I know. Each component only knows about the props (and possibly context) passed in, it doesn't have any handle on data for the current render() call. Simply importing global state through CommonJS or ES6 modules is impossible on the serverside for anything request scoped (like query params, route params, cookies, headers, anything generated by middleware based on these things). -- PROPOSAL -- Why not just handle global state at a higher level than props passed component to component? Why not extend ReactDOM.render to take a 4th argument for global context? It would just make everyone's life easier. Don't even worry about changes firing componentWillReceiveProps, at least as a first version. Think of it as analogous to Express and the \"req\" object that's passed around. One should always have access to some \"per request\" object. So many things would be useful to put in there (authenticated user, geolocation, \"store\" from Redux, query and route params, etc, etc). It would look like: ReactDOM.render(rootComponent, someDiv, callback, {... request specific data ...}) Where request specific data might have things that are truly request specific and also things that are the same across requests. The latter can be done with imports but it's a bit messy -- you end up with code like: if (typeof window != 'undefined') { // Client, get value from window object } else { // Server, get value from filesystem or wherever } Just having global data available to all components in the tree simplifies things a lot. Don't you think?",
        "human_words_stopwords_removal_lemmatization": "feature request . relates pain point , 'm sure better . issue : state available component without passing everything prop component tree . 'm speaking global state . use context ? couple issue . 1. 's root component 's job receive disseminate state . root component component . n't care 's root . maybe ( example using express ) : ` res.render ( 'homepage.jsx ' , { } ) ; ` page might well : res.render ( 'otherpage.jsx ' , { } ) otherpage : component composed however like , n't care depth 're . 2. talking multipage app . thinking around react seems skewed toward special case single page app . spa sometimes right choice . 're google map 's clearly right . 're something broader scope like amazon.com 's clearly . general case much interesting solve . 3. every root component wrapped `` publishes context downwards , every non-root component wrapped `` receiver '' higher level component declares context boilerplate . 's expressive , 's bookkeeping . 4. alternative : n't far know . component know prop ( possibly context ) passed , n't handle data current render ( ) call . simply importing global state commonjs es6 module impossible serverside anything request scoped ( like query params , route params , cooky , header , anything generated middleware based thing ) . -- proposal -- handle global state higher level prop passed component component ? extend reactdom.render take 4th argument global context ? would make everyone 's life easier . n't even worry change firing componentwillreceiveprops , least first version . think analogous express `` req '' object 's passed around . one always access `` per request '' object . many thing would useful put ( authenticated user , geolocation , `` store '' redux , query route params , etc , etc ) . would look like : reactdom.render ( rootcomponent , somediv , callback , { ... request specific data ... } ) request specific data might thing truly request specific also thing across request . latter done import 's bit messy -- end code like : ( typeof window ! = 'undefined ' ) { // client , get value window object } else { // server , get value filesystem wherever } global data available component tree simplifies thing lot . n't think ?",
        "title_stopwords_removal_lemmatization": "feature request : global state render/hydrate level"
    },
    {
        "issue_id": 279220387,
        "title": "smarter autoFocus",
        "label": [
            "Type: Feature Request",
            "Component: DOM"
        ],
        "date": "2017-12-05T02:11:42Z",
        "status": "closed",
        "description": "I believe autoFocus should be improved for the better DX. Browser-native autoFocus is nice and all but does not work when a component is updated. Sure, that's fine. But it's pretty common to need focus after a component has been updated. Yep, declaratively. How? Immutable data ftw. At least, it works for me.\r\n\r\nI use this wrapper component https://github.com/este/este/blob/master/components/AutoFocus.js\r\n\r\nCheck componentDidUpdate method. I hope it makes sense. \r\n",
        "remove_template_description": "I believe autoFocus should be improved for the better DX. Browser-native autoFocus is nice and all but does not work when a component is updated. Sure, that's fine. But it's pretty common to need focus after a component has been updated. Yep, declaratively. How? Immutable data ftw. At least, it works for me.    I use this wrapper component https://github.com/este/este/blob/master/components/AutoFocus.js    Check componentDidUpdate method. I hope it makes sense.",
        "human_words": "I believe autoFocus should be improved for the better DX. Browser-native autoFocus is nice and all but does not work when a component is updated. Sure, that's fine. But it's pretty common to need focus after a component has been updated. Yep, declaratively. How? Immutable data ftw. At least, it works for me.    I use this wrapper component https://github.com/este/este/blob/master/components/AutoFocus.js    Check componentDidUpdate method. I hope it makes sense.",
        "human_words_regrex": "I believe autoFocus should be improved for the better DX. Browser-native autoFocus is nice and all but does not work when a component is updated. Sure, that's fine. But it's pretty common to need focus after a component has been updated. Yep, declaratively. How? Immutable data ftw. At least, it works for me. I use this wrapper component  Check componentDidUpdate method. I hope it makes sense.",
        "human_words_stopwords_removal_lemmatization": "believe autofocus improved better dx . browser-native autofocus nice work component updated . sure , 's fine . 's pretty common need focus component updated . yep , declaratively . ? immutable data ftw . least , work . use wrapper component check componentdidupdate method . hope make sense .",
        "title_stopwords_removal_lemmatization": "smarter autofocus"
    },
    {
        "issue_id": 277081673,
        "title": "Add hooks to ReactDOMServer to support caching",
        "label": [
            "Type: Feature Request",
            "Component: Server Rendering"
        ],
        "date": "2017-11-27T16:28:49Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\nfeature\r\n\r\n**What is the current behavior?**\r\nreact-dom SSR performance could be improved using server-side cache, but currently the\r\nReactPartialRenderer is currently not accessible from the `react-dom` package.\r\n\r\n**Desired behavior**\r\nOn the **server** only, it would be nice if _plugins_ could be used to improve render performance. Currently the only way to do this would be to externally maintain a renderer implementation. However, the `ReactPartialRenderer` already contains all the behavior required to support plugins - with a little refactoring. \r\n\r\nI've refactored the `ReactPartialRenderer` and created a **proof of concept** for supporting _plugins_ for react server side rendering. You can see the [ReactPartialPluginRenderer](https://github.com/adam-26/react/commits/pluginRenderer) in this fork, its comprised of 3 different commits:\r\n* [#1](https://github.com/adam-26/react/commit/0b2f7852a19ffabac6b83581f6821f0346434ef0): Strict refactoring of `ReactPartialRenderer`, the only addition is exporting the `ReactPartialRenderer` from the react-dom server package\r\n* [#2](https://github.com/adam-26/react/commit/d30792a8ba42d50188c0dd1fddbc73275b8ff91f): Create the `ReactPartialPluginRenderer` by extending the refactored `ReactPluginRenderer`, and introduce a plugin interface\r\n* [#3](https://github.com/adam-26/react/commit/d4f01973d535c9eb34ba450190b7c8205fe593df): Proof of concept plugin implementations and application example.\r\n\r\nYou can [view instructions for running the example in the repo](https://github.com/adam-26/react/tree/pluginRenderer/fixtures/ssrPlugins).\r\n\r\nI understand that exporting `ReactPartialRenderer` exposes the internal API, which is far from ideal. Is there any scenario in which `ReactPartialRenderer` would be made to be accessible from the `react-dom` package? Or would a plugin implementation similar to above be required to maintain its own forked `ReactPartialRenderer`? Maintaining the plugin renderer in its own repo isn't a problem, but It would be great if plugins could be used without needing to maintain the core server renderer.\r\n\r\nThanks, Adam.\r\n\r\n\r\n",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**  feature    **What is the current behavior?**  react-dom SSR performance could be improved using server-side cache, but currently the  ReactPartialRenderer is currently not accessible from the `react-dom` package.    **Desired behavior**  On the **server** only, it would be nice if _plugins_ could be used to improve render performance. Currently the only way to do this would be to externally maintain a renderer implementation. However, the `ReactPartialRenderer` already contains all the behavior required to support plugins - with a little refactoring.     I've refactored the `ReactPartialRenderer` and created a **proof of concept** for supporting _plugins_ for react server side rendering. You can see the [ReactPartialPluginRenderer](https://github.com/adam-26/react/commits/pluginRenderer) in this fork, its comprised of 3 different commits:  * [#1](https://github.com/adam-26/react/commit/0b2f7852a19ffabac6b83581f6821f0346434ef0): Strict refactoring of `ReactPartialRenderer`, the only addition is exporting the `ReactPartialRenderer` from the react-dom server package  * [#2](https://github.com/adam-26/react/commit/d30792a8ba42d50188c0dd1fddbc73275b8ff91f): Create the `ReactPartialPluginRenderer` by extending the refactored `ReactPluginRenderer`, and introduce a plugin interface  * [#3](https://github.com/adam-26/react/commit/d4f01973d535c9eb34ba450190b7c8205fe593df): Proof of concept plugin implementations and application example.    You can [view instructions for running the example in the repo](https://github.com/adam-26/react/tree/pluginRenderer/fixtures/ssrPlugins).    I understand that exporting `ReactPartialRenderer` exposes the internal API, which is far from ideal. Is there any scenario in which `ReactPartialRenderer` would be made to be accessible from the `react-dom` package? Or would a plugin implementation similar to above be required to maintain its own forked `ReactPartialRenderer`? Maintaining the plugin renderer in its own repo isn't a problem, but It would be great if plugins could be used without needing to maintain the core server renderer.    Thanks, Adam.",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**  feature    **What is the current behavior?**  react-dom SSR performance could be improved using server-side cache, but currently the  ReactPartialRenderer is currently not accessible from the `react-dom` package.    **Desired behavior**  On the **server** only, it would be nice if _plugins_ could be used to improve render performance. Currently the only way to do this would be to externally maintain a renderer implementation. However, the `ReactPartialRenderer` already contains all the behavior required to support plugins - with a little refactoring.     I've refactored the `ReactPartialRenderer` and created a **proof of concept** for supporting _plugins_ for react server side rendering. You can see the [ReactPartialPluginRenderer](https://github.com/adam-26/react/commits/pluginRenderer) in this fork, its comprised of 3 different commits:  * [#1](https://github.com/adam-26/react/commit/0b2f7852a19ffabac6b83581f6821f0346434ef0): Strict refactoring of `ReactPartialRenderer`, the only addition is exporting the `ReactPartialRenderer` from the react-dom server package  * [#2](https://github.com/adam-26/react/commit/d30792a8ba42d50188c0dd1fddbc73275b8ff91f): Create the `ReactPartialPluginRenderer` by extending the refactored `ReactPluginRenderer`, and introduce a plugin interface  * [#3](https://github.com/adam-26/react/commit/d4f01973d535c9eb34ba450190b7c8205fe593df): Proof of concept plugin implementations and application example.    You can [view instructions for running the example in the repo](https://github.com/adam-26/react/tree/pluginRenderer/fixtures/ssrPlugins).    I understand that exporting `ReactPartialRenderer` exposes the internal API, which is far from ideal. Is there any scenario in which `ReactPartialRenderer` would be made to be accessible from the `react-dom` package? Or would a plugin implementation similar to above be required to maintain its own forked `ReactPartialRenderer`? Maintaining the plugin renderer in its own repo isn't a problem, but It would be great if plugins could be used without needing to maintain the core server renderer.    Thanks, Adam.",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** feature **What is the current behavior?** react-dom SSR performance could be improved using server-side cache, but currently the ReactPartialRenderer is currently not accessible from the `react-dom` package. **Desired behavior** On the **server** only, it would be nice if _plugins_ could be used to improve render performance. Currently the only way to do this would be to externally maintain a renderer implementation. However, the `ReactPartialRenderer` already contains all the behavior required to support plugins - with a little refactoring. I've refactored the `ReactPartialRenderer` and created a **proof of concept** for supporting _plugins_ for react server side rendering. You can see the  in this fork, its comprised of 3 different commits: * : Strict refactoring of `ReactPartialRenderer`, the only addition is exporting the `ReactPartialRenderer` from the react-dom server package * : Create the `ReactPartialPluginRenderer` by extending the refactored `ReactPluginRenderer`, and introduce a plugin interface * : Proof of concept plugin implementations and application example. You can . I understand that exporting `ReactPartialRenderer` exposes the internal API, which is far from ideal. Is there any scenario in which `ReactPartialRenderer` would be made to be accessible from the `react-dom` package? Or would a plugin implementation similar to above be required to maintain its own forked `ReactPartialRenderer`? Maintaining the plugin renderer in its own repo isn't a problem, but It would be great if plugins could be used without needing to maintain the core server renderer. Thanks, Adam.",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * feature * * current behavior ? * * react-dom ssr performance could improved using server-side cache , currently reactpartialrenderer currently accessible ` react-dom ` package . * * desired behavior * * * * server * * , would nice _plugins_ could used improve render performance . currently way would externally maintain renderer implementation . however , ` reactpartialrenderer ` already contains behavior required support plugins - little refactoring . 've refactored ` reactpartialrenderer ` created * * proof concept * * supporting _plugins_ react server side rendering . see fork , comprised 3 different commits : * : strict refactoring ` reactpartialrenderer ` , addition exporting ` reactpartialrenderer ` react-dom server package * : create ` reactpartialpluginrenderer ` extending refactored ` reactpluginrenderer ` , introduce plugin interface * : proof concept plugin implementation application example . . understand exporting ` reactpartialrenderer ` expose internal api , far ideal . scenario ` reactpartialrenderer ` would made accessible ` react-dom ` package ? would plugin implementation similar required maintain forked ` reactpartialrenderer ` ? maintaining plugin renderer repo n't problem , would great plugins could used without needing maintain core server renderer . thanks , adam .",
        "title_stopwords_removal_lemmatization": "add hook reactdomserver support caching"
    },
    {
        "issue_id": 274928379,
        "title": "Add a <ReactDOM.Portal /> element",
        "label": [
            "Type: Feature Request",
            "Component: DOM"
        ],
        "date": "2017-11-17T16:51:33Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nI\u2019d like to request a feature.\r\n\r\n**What is the current behavior?**\r\n\r\nTo create a portal, you currently have to use a function:\r\n\r\n```jsx\r\nfunction MyComponent(props) {\r\n  return <Foo>\r\n    ...\r\n    {ReactDOM.createPortal(<Bar>\r\n      ...\r\n    </Bar>, myElement)}\r\n  </Foo>\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\n```jsx\r\nfunction MyComponent(props) {\r\n  return <Foo>\r\n    ...\r\n    <ReactDOM.Portal target={myElement}>\r\n      <Bar>...</Bar>\r\n    </ReactDOM.Portal>\r\n  </Foo>\r\n}\r\n```\r\n",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**    I\u2019d like to request a feature.    **What is the current behavior?**    To create a portal, you currently have to use a function:    ```jsx  function MyComponent(props) {    return <Foo>      ...      {ReactDOM.createPortal(<Bar>        ...      </Bar>, myElement)}    </Foo>  }  ```    **What is the expected behavior?**    ```jsx  function MyComponent(props) {    return <Foo>      ...      <ReactDOM.Portal target={myElement}>        <Bar>...</Bar>      </ReactDOM.Portal>    </Foo>  }  ```",
        "human_words": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**    I\u2019d like to request a feature.    **What is the current behavior?**    To create a portal, you currently have to use a function:        **What is the expected behavior?**    ",
        "human_words_regrex": " **Do you want to request a *feature* or report a *bug*?** I\u2019d like to request a feature. **What is the current behavior?** To create a portal, you currently have to use a function: **What is the expected behavior?** ",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * \u2019 like request feature . * * current behavior ? * * create portal , currently use function : * * expected behavior ? * *",
        "title_stopwords_removal_lemmatization": "add < reactdom.portal / > element"
    },
    {
        "issue_id": 274279505,
        "title": "React-test-renderer: support for portal",
        "label": [
            "Type: Feature Request",
            "Component: Test Renderer",
            "React Core Team"
        ],
        "date": "2017-11-15T19:40:29Z",
        "status": "open",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nReport a bug\r\n\r\n**What is the current behavior?**\r\n\r\nThis test\r\n\r\n```javascript\r\nimport React from 'react';\r\nimport { createPortal } from 'react-dom';\r\nimport renderer from 'react-test-renderer';\r\n\r\nconst Drop = () => (\r\n  createPortal(\r\n    <div>hello</div>,\r\n    this.dropContainer\r\n  )\r\n);\r\n\r\ntest('Drop renders', () => {\r\n  const component = renderer.create(\r\n    <div>\r\n      <input />\r\n      <Drop />\r\n    </div>\r\n  );\r\n  const tree = component.toJSON();\r\n  expect(tree).toMatchSnapshot();\r\n});\r\n```\r\n\r\nfails with\r\n\r\n> Invariant Violation: Drop(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.\r\n\r\nThis test passes if I wrap createPortal in a container.\r\n\r\n```javascript\r\n<div>\r\n  {createPortal(\r\n    <div>hello</div>,\r\n    this.dropContainer\r\n  )}\r\n</div>\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nThe code without the parent container works fine in the browser. So it seems that I'm adding the  parent `div` just for the test to pass. I believe `react-test-renderer` should support empty returns?\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nLastest\r\n",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**    Report a bug    **What is the current behavior?**    This test    ```javascript  import React from 'react';  import { createPortal } from 'react-dom';  import renderer from 'react-test-renderer';    const Drop = () => (    createPortal(      <div>hello</div>,      this.dropContainer    )  );    test('Drop renders', () => {    const component = renderer.create(      <div>        <input />        <Drop />      </div>    );    const tree = component.toJSON();    expect(tree).toMatchSnapshot();  });  ```    fails with    > Invariant Violation: Drop(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.    This test passes if I wrap createPortal in a container.    ```javascript  <div>    {createPortal(      <div>hello</div>,      this.dropContainer    )}  </div>  ```    **What is the expected behavior?**    The code without the parent container works fine in the browser. So it seems that I'm adding the  parent `div` just for the test to pass. I believe `react-test-renderer` should support empty returns?    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    Lastest",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**    Report a bug    **What is the current behavior?**    This test        fails with    > Invariant Violation: Drop(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.    This test passes if I wrap createPortal in a container.        **What is the expected behavior?**    The code without the parent container works fine in the browser. So it seems that I'm adding the  parent `div` just for the test to pass. I believe `react-test-renderer` should support empty returns?    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    Lastest",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** Report a bug **What is the current behavior?** This test fails with > Invariant Violation: Drop(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null. This test passes if I wrap createPortal in a container. **What is the expected behavior?** The code without the parent container works fine in the browser. So it seems that I'm adding the parent `div` just for the test to pass. I believe `react-test-renderer` should support empty returns? **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** Lastest",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * report bug * * current behavior ? * * test fails > invariant violation : drop ( ... ) : nothing returned render . usually mean return statement missing . , render nothing , return null . test pass wrap createportal container . * * expected behavior ? * * code without parent container work fine browser . seems 'm adding parent ` div ` test pas . believe ` react-test-renderer ` support empty return ? * * version react , browser / o affected issue ? work previous version react ? * * lastest",
        "title_stopwords_removal_lemmatization": "react-test-renderer : support portal"
    },
    {
        "issue_id": 273573470,
        "title": "stopImmediatePropagation is not available for synthetic events",
        "label": [
            "Type: Feature Request",
            "Component: DOM",
            "Resolution: Stale"
        ],
        "date": "2017-11-13T20:51:46Z",
        "status": "closed",
        "description": "In order to call this method, you'd have to access it via `event.nativeEvent.stopImmediatePropagation()`: https://developer.mozilla.org/en-US/docs/Web/API/Event/stopImmediatePropagation\r\n\r\nIt'd be awesome if this was supported on `event` itself. I did see a [prior issue](https://github.com/facebook/react/issues/1734) for this, but it was for a use case that sIP wasn't required for.\r\n\r\nFor a specific use case: if you want to kill hover events for touch input, `onTouchStart` will trigger `onMouseOver` and `stopImmediatePropagation` cancels that internal cascade.",
        "remove_template_description": "In order to call this method, you'd have to access it via `event.nativeEvent.stopImmediatePropagation()`: https://developer.mozilla.org/en-US/docs/Web/API/Event/stopImmediatePropagation    It'd be awesome if this was supported on `event` itself. I did see a [prior issue](https://github.com/facebook/react/issues/1734) for this, but it was for a use case that sIP wasn't required for.    For a specific use case: if you want to kill hover events for touch input, `onTouchStart` will trigger `onMouseOver` and `stopImmediatePropagation` cancels that internal cascade.",
        "human_words": "In order to call this method, you'd have to access it via `event.nativeEvent.stopImmediatePropagation()`: https://developer.mozilla.org/en-US/docs/Web/API/Event/stopImmediatePropagation    It'd be awesome if this was supported on `event` itself. I did see a [prior issue](https://github.com/facebook/react/issues/1734) for this, but it was for a use case that sIP wasn't required for.    For a specific use case: if you want to kill hover events for touch input, `onTouchStart` will trigger `onMouseOver` and `stopImmediatePropagation` cancels that internal cascade.",
        "human_words_regrex": "In order to call this method, you'd have to access it via `event.nativeEvent.stopImmediatePropagation()`:  It'd be awesome if this was supported on `event` itself. I did see a  for this, but it was for a use case that sIP wasn't required for. For a specific use case: if you want to kill hover events for touch input, `onTouchStart` will trigger `onMouseOver` and `stopImmediatePropagation` cancels that internal cascade.",
        "human_words_stopwords_removal_lemmatization": "order call method , 'd access via ` event.nativeevent.stopimmediatepropagation ( ) ` : 'd awesome supported ` event ` . see , use case sip n't required . specific use case : want kill hover event touch input , ` ontouchstart ` trigger ` onmouseover ` ` stopimmediatepropagation ` cancel internal cascade .",
        "title_stopwords_removal_lemmatization": "stopimmediatepropagation available synthetic event"
    },
    {
        "issue_id": 273303484,
        "title": "Make React resilient to DOM mutations from Google Translate",
        "label": [
            "Type: Feature Request",
            "Component: DOM"
        ],
        "date": "2017-11-13T03:54:44Z",
        "status": "closed",
        "description": "## Coming from search? See workaround here: https://github.com/facebook/react/issues/11538#issuecomment-417504600. And star this issue: https://bugs.chromium.org/p/chromium/issues/detail?id=872770.\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug, though there's a decent chance it's a Chrome/Google Translate one\r\n\r\n**What is the current behavior?**\r\n\r\nWhen using Google Translate on a page using React 16, a certain code pattern produces a Javascript error (`Failed to execute 'removeChild' on 'Node': The node to be removed is not a child of this node.`) when the rendered content changes.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template for React 16: https://jsfiddle.net/Luktwrdm/, template for React 15: https://jsfiddle.net/hmbg7e9w/).**\r\n\r\n(This has only been checked on macOS 10.13.1)\r\n1. Navigate to https://qq49kwjynj.codesandbox.io/ in a Chrome browser set to some language other than Japanese.\r\n2. Right click the page and select \"Translate to English\"\r\n3. Click the checkbox, and the error will show.\r\n\r\nThe source of the example can be found at https://codesandbox.io/s/qq49kwjynj\r\nThe part of the code that seems to cause it is the following two lines:\r\n```js\r\n{this.state.checked && \"\u9078\u629e\u6e08\u307f\"}\r\n{!this.state.checked && \"\u7121\u9078\u629e\"}\r\n```\r\nChanging this to the following fixes the behavior with Google Translate:\r\n```js\r\n{this.state.checked ? \"\u9078\u629e\u6e08\u307f\" : \"\u7121\u9078\u629e\"}\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nIt should not produce an error.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nI created an identical example with React 15 at the following pages:\r\nhttps://p93xxmr0rq.codesandbox.io/\r\nhttps://codesandbox.io/s/p93xxmr0rq\r\nWhen repeating the same steps outlined above, no error was produced.\r\nIt only seems to affect React 16.\r\nAs this is a Chrome-only feature, it only affects Chrome.",
        "remove_template_description": "## Coming from search? See workaround here: https://github.com/facebook/react/issues/11538#issuecomment-417504600. And star this issue: https://bugs.chromium.org/p/chromium/issues/detail?id=872770.    **Do you want to request a *feature* or report a *bug*?**    Bug, though there's a decent chance it's a Chrome/Google Translate one    **What is the current behavior?**    When using Google Translate on a page using React 16, a certain code pattern produces a Javascript error (`Failed to execute 'removeChild' on 'Node': The node to be removed is not a child of this node.`) when the rendered content changes.    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template for React 16: https://jsfiddle.net/Luktwrdm/, template for React 15: https://jsfiddle.net/hmbg7e9w/).**    (This has only been checked on macOS 10.13.1)  1. Navigate to https://qq49kwjynj.codesandbox.io/ in a Chrome browser set to some language other than Japanese.  2. Right click the page and select \"Translate to English\"  3. Click the checkbox, and the error will show.    The source of the example can be found at https://codesandbox.io/s/qq49kwjynj  The part of the code that seems to cause it is the following two lines:  ```js  {this.state.checked && \"\u9078\u629e\u6e08\u307f\"}  {!this.state.checked && \"\u7121\u9078\u629e\"}  ```  Changing this to the following fixes the behavior with Google Translate:  ```js  {this.state.checked ? \"\u9078\u629e\u6e08\u307f\" : \"\u7121\u9078\u629e\"}  ```    **What is the expected behavior?**    It should not produce an error.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    I created an identical example with React 15 at the following pages:  https://p93xxmr0rq.codesandbox.io/  https://codesandbox.io/s/p93xxmr0rq  When repeating the same steps outlined above, no error was produced.  It only seems to affect React 16.  As this is a Chrome-only feature, it only affects Chrome.",
        "human_words": "## Coming from search? See workaround here: https://github.com/facebook/react/issues/11538#issuecomment-417504600. And star this issue: https://bugs.chromium.org/p/chromium/issues/detail?id=872770.    **Do you want to request a *feature* or report a *bug*?**    Bug, though there's a decent chance it's a Chrome/Google Translate one    **What is the current behavior?**    When using Google Translate on a page using React 16, a certain code pattern produces a Javascript error (`Failed to execute 'removeChild' on 'Node': The node to be removed is not a child of this node.`) when the rendered content changes.    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template for React 16: https://jsfiddle.net/Luktwrdm/, template for React 15: https://jsfiddle.net/hmbg7e9w/).**    (This has only been checked on macOS 10.13.1)  1. Navigate to https://qq49kwjynj.codesandbox.io/ in a Chrome browser set to some language other than Japanese.  2. Right click the page and select \"Translate to English\"  3. Click the checkbox, and the error will show.    The source of the example can be found at https://codesandbox.io/s/qq49kwjynj  The part of the code that seems to cause it is the following two lines:    Changing this to the following fixes the behavior with Google Translate:      **What is the expected behavior?**    It should not produce an error.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    I created an identical example with React 15 at the following pages:  https://p93xxmr0rq.codesandbox.io/  https://codesandbox.io/s/p93xxmr0rq  When repeating the same steps outlined above, no error was produced.  It only seems to affect React 16.  As this is a Chrome-only feature, it only affects Chrome.",
        "human_words_regrex": "## Coming from search? See workaround here:  And star this issue:  **Do you want to request a *feature* or report a *bug*?** Bug, though there's a decent chance it's a Chrome/Google Translate one **What is the current behavior?** When using Google Translate on a page using React 16, a certain code pattern produces a Javascript error (`Failed to execute 'removeChild' on 'Node': The node to be removed is not a child of this node.`) when the rendered content changes. **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via  or similar (template for React 16:  template for React 15:  (This has only been checked on macOS 10.13.1) 1. Navigate to  in a Chrome browser set to some language other than Japanese. 2. Right click the page and select \"Translate to English\" 3. Click the checkbox, and the error will show. The source of the example can be found at  The part of the code that seems to cause it is the following two lines: Changing this to the following fixes the behavior with Google Translate: **What is the expected behavior?** It should not produce an error. **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** I created an identical example with React 15 at the following pages:   When repeating the same steps outlined above, no error was produced. It only seems to affect React 16. As this is a Chrome-only feature, it only affects Chrome.",
        "human_words_stopwords_removal_lemmatization": "# # coming search ? see workaround : star issue : * * want request * feature * report * bug * ? * * bug , though 's decent chance 's chrome/google translate one * * current behavior ? * * using google translate page using react 16 , certain code pattern produce javascript error ( ` failed execute 'removechild ' 'node ' : node removed child node. ` ) rendered content change . * * current behavior bug , please provide step reproduce possible minimal demo problem via similar ( template react 16 : template react 15 : ( checked macos 10.13.1 ) 1. navigate chrome browser set language japanese . 2. right click page select `` translate english '' 3. click checkbox , error show . source example found part code seems cause following two line : changing following fix behavior google translate : * * expected behavior ? * * produce error . * * version react , browser / o affected issue ? work previous version react ? * * created identical example react 15 following page : repeating step outlined , error produced . seems affect react 16. chrome-only feature , affect chrome .",
        "title_stopwords_removal_lemmatization": "make react resilient dom mutation google translate"
    },
    {
        "issue_id": 269148824,
        "title": "createPortal: support option to stop propagation of events in React tree",
        "label": [
            "Type: Feature Request",
            "Component: DOM"
        ],
        "date": "2017-10-27T15:36:49Z",
        "status": "open",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\nFeature, but also a bug cause new API breaks old `unstable_rendersubtreeintocontainer`\r\n\r\n**What is the current behavior?**\r\nWe cannot stop all events propagation from portal to its React tree ancestors. Our layers mechanism with modals/popovers completely broken. For example, we have a dropdown button. When we click on it, click opens popover. We also want to close this popover when clicking on same button. With createPortal, click inside popover fires click on button, and it's closing. We can use stopPropagation in this simple case. But we have tons of such cases, and we need use stopPropagation for all of them. Also, we cannot stop all events.\r\n\r\n**What is the expected behavior?**\r\ncreatePortal should have an option to stop synthetic events propagation through React tree without manually stopping every event. What do you think?\r\n",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**  Feature, but also a bug cause new API breaks old `unstable_rendersubtreeintocontainer`    **What is the current behavior?**  We cannot stop all events propagation from portal to its React tree ancestors. Our layers mechanism with modals/popovers completely broken. For example, we have a dropdown button. When we click on it, click opens popover. We also want to close this popover when clicking on same button. With createPortal, click inside popover fires click on button, and it's closing. We can use stopPropagation in this simple case. But we have tons of such cases, and we need use stopPropagation for all of them. Also, we cannot stop all events.    **What is the expected behavior?**  createPortal should have an option to stop synthetic events propagation through React tree without manually stopping every event. What do you think?",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**  Feature, but also a bug cause new API breaks old `unstable_rendersubtreeintocontainer`    **What is the current behavior?**  We cannot stop all events propagation from portal to its React tree ancestors. Our layers mechanism with modals/popovers completely broken. For example, we have a dropdown button. When we click on it, click opens popover. We also want to close this popover when clicking on same button. With createPortal, click inside popover fires click on button, and it's closing. We can use stopPropagation in this simple case. But we have tons of such cases, and we need use stopPropagation for all of them. Also, we cannot stop all events.    **What is the expected behavior?**  createPortal should have an option to stop synthetic events propagation through React tree without manually stopping every event. What do you think?",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** Feature, but also a bug cause new API breaks old `unstable_rendersubtreeintocontainer` **What is the current behavior?** We cannot stop all events propagation from portal to its React tree ancestors. Our layers mechanism with modals/popovers completely broken. For example, we have a dropdown button. When we click on it, click opens popover. We also want to close this popover when clicking on same button. With createPortal, click inside popover fires click on button, and it's closing. We can use stopPropagation in this simple case. But we have tons of such cases, and we need use stopPropagation for all of them. Also, we cannot stop all events. **What is the expected behavior?** createPortal should have an option to stop synthetic events propagation through React tree without manually stopping every event. What do you think?",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * feature , also bug cause new api break old ` unstable_rendersubtreeintocontainer ` * * current behavior ? * * stop event propagation portal react tree ancestor . layer mechanism modals/popovers completely broken . example , dropdown button . click , click open popover . also want close popover clicking button . createportal , click inside popover fire click button , 's closing . use stoppropagation simple case . ton case , need use stoppropagation . also , stop event . * * expected behavior ? * * createportal option stop synthetic event propagation react tree without manually stopping every event . think ?",
        "title_stopwords_removal_lemmatization": "createportal : support option stop propagation event react tree"
    },
    {
        "issue_id": 268762895,
        "title": "React should recognize the `valueAsDate` property on DOM elements",
        "label": [
            "Type: Feature Request",
            "Component: DOM"
        ],
        "date": "2017-10-26T13:37:14Z",
        "status": "open",
        "description": "The `valueAsDate` property on the ES6 definition of `HTMLInputElement` is not yet recognized by React. It should be, though.\r\n\r\nThe `valueAsDate` property relieves the pain of having to deal with both browsers that support HTML5 date inputs and those who don't; the former require the `value` property to be of the form `\"YYYY-MM-DD\"` and the latter require a nicely formatted date (e.g. `\"MM/DD/YYYY\"`) since the user will see exactly that. (React won't even allow that in conjunction with `type=\"date\"`, though, and proclaim that the machine readable format should be used.) \r\nThe browsers that do support HTML5 date input (should) alternatively support the date being passed in through the `valueAsDate` property. If we use that, we can always put a nicely formatted date in the `value` property. Pain relieved! (And also React should allow any format in the `value` property in that case.)\r\n\r\nAs indicated above, browser support is still lacky at best, even with the most avant garde browsers. Hence this is not an urgent issue for React. It will get relevant, though, and is herein duly noted.",
        "remove_template_description": "The `valueAsDate` property on the ES6 definition of `HTMLInputElement` is not yet recognized by React. It should be, though.    The `valueAsDate` property relieves the pain of having to deal with both browsers that support HTML5 date inputs and those who don't; the former require the `value` property to be of the form `\"YYYY-MM-DD\"` and the latter require a nicely formatted date (e.g. `\"MM/DD/YYYY\"`) since the user will see exactly that. (React won't even allow that in conjunction with `type=\"date\"`, though, and proclaim that the machine readable format should be used.)   The browsers that do support HTML5 date input (should) alternatively support the date being passed in through the `valueAsDate` property. If we use that, we can always put a nicely formatted date in the `value` property. Pain relieved! (And also React should allow any format in the `value` property in that case.)    As indicated above, browser support is still lacky at best, even with the most avant garde browsers. Hence this is not an urgent issue for React. It will get relevant, though, and is herein duly noted.",
        "human_words": "The `valueAsDate` property on the ES6 definition of `HTMLInputElement` is not yet recognized by React. It should be, though.    The `valueAsDate` property relieves the pain of having to deal with both browsers that support HTML5 date inputs and those who don't; the former require the `value` property to be of the form `\"YYYY-MM-DD\"` and the latter require a nicely formatted date (e.g. `\"MM/DD/YYYY\"`) since the user will see exactly that. (React won't even allow that in conjunction with `type=\"date\"`, though, and proclaim that the machine readable format should be used.)   The browsers that do support HTML5 date input (should) alternatively support the date being passed in through the `valueAsDate` property. If we use that, we can always put a nicely formatted date in the `value` property. Pain relieved! (And also React should allow any format in the `value` property in that case.)    As indicated above, browser support is still lacky at best, even with the most avant garde browsers. Hence this is not an urgent issue for React. It will get relevant, though, and is herein duly noted.",
        "human_words_regrex": "The `valueAsDate` property on the ES6 definition of `HTMLInputElement` is not yet recognized by React. It should be, though. The `valueAsDate` property relieves the pain of having to deal with both browsers that support HTML5 date inputs and those who don't; the former require the `value` property to be of the form `\"YYYY-MM-DD\"` and the latter require a nicely formatted date (e.g. `\"MM/DD/YYYY\"`) since the user will see exactly that. (React won't even allow that in conjunction with `type=\"date\"`, though, and proclaim that the machine readable format should be used.) The browsers that do support HTML5 date input (should) alternatively support the date being passed in through the `valueAsDate` property. If we use that, we can always put a nicely formatted date in the `value` property. Pain relieved! (And also React should allow any format in the `value` property in that case.) As indicated above, browser support is still lacky at best, even with the most avant garde browsers. Hence this is not an urgent issue for React. It will get relevant, though, and is herein duly noted.",
        "human_words_stopwords_removal_lemmatization": "` valueasdate ` property es6 definition ` htmlinputelement ` yet recognized react . , though . ` valueasdate ` property relief pain deal browser support html5 date input n't ; former require ` value ` property form ` `` yyyy-mm-dd '' ` latter require nicely formatted date ( e.g . ` `` mm/dd/yyyy '' ` ) since user see exactly . ( react wo n't even allow conjunction ` type= '' date '' ` , though , proclaim machine readable format used . ) browser support html5 date input ( ) alternatively support date passed ` valueasdate ` property . use , always put nicely formatted date ` value ` property . pain relieved ! ( also react allow format ` value ` property case . ) indicated , browser support still lacky best , even avant garde browser . hence urgent issue react . get relevant , though , herein duly noted .",
        "title_stopwords_removal_lemmatization": "react recognize ` valueasdate ` property dom element"
    },
    {
        "issue_id": 268720167,
        "title": "Add a way to opt out of User Timing API calls",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2017-10-26T11:13:56Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**  \r\n\r\nbug or v16 feature (dont know)\r\n\r\n**What is the current behavior?**  \r\n\r\nWhen building in dev environment, performance timeline measures appear by default,  \r\nie. without `?react_perf` query string as in v15 described [here](https://reactjs.org/docs/optimizing-performance.html#profiling-components-with-the-chrome-performance-tab)\r\n\r\n`react@16.0.0`\r\n\r\nif it's not a bug, then what's the way to disable `react` perf measures?  \r\n\r\nNeed a way to clear timeline to focus on my own custom perf measures.\r\n",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**      bug or v16 feature (dont know)    **What is the current behavior?**      When building in dev environment, performance timeline measures appear by default,    ie. without `?react_perf` query string as in v15 described [here](https://reactjs.org/docs/optimizing-performance.html#profiling-components-with-the-chrome-performance-tab)    `react@16.0.0`    if it's not a bug, then what's the way to disable `react` perf measures?      Need a way to clear timeline to focus on my own custom perf measures.",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**      bug or v16 feature (dont know)    **What is the current behavior?**      When building in dev environment, performance timeline measures appear by default,    ie. without `?react_perf` query string as in v15 described [here](https://reactjs.org/docs/optimizing-performance.html#profiling-components-with-the-chrome-performance-tab)    `react@16.0.0`    if it's not a bug, then what's the way to disable `react` perf measures?      Need a way to clear timeline to focus on my own custom perf measures.",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** bug or v16 feature (dont know) **What is the current behavior?** When building in dev environment, performance timeline measures appear by default, ie. without `?react_perf` query string as in v15 described  `react@16.0.0` if it's not a bug, then what's the way to disable `react` perf measures? Need a way to clear timeline to focus on my own custom perf measures.",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * bug v16 feature ( dont know ) * * current behavior ? * * building dev environment , performance timeline measure appear default , ie . without ` ? react_perf ` query string v15 described ` react @ 16.0.0 ` 's bug , 's way disable ` react ` perf measure ? need way clear timeline focus custom perf measure .",
        "title_stopwords_removal_lemmatization": "add way opt user timing api call"
    },
    {
        "issue_id": 267715457,
        "title": "Support onEnd SVG event",
        "label": [
            "Type: Feature Request",
            "Component: DOM"
        ],
        "date": "2017-10-23T15:35:57Z",
        "status": "closed",
        "description": "Hi,\r\nI'm trying to use the \\<animateTransform\\> Element in a React project. But I'm not able to use the \"onend\" attribute:\r\n\r\n> Warning: Unknown event handler property `onend`. It will be ignored.\r\n\r\nIs there a workaround for this ?",
        "remove_template_description": "Hi,  I'm trying to use the \\<animateTransform\\> Element in a React project. But I'm not able to use the \"onend\" attribute:    > Warning: Unknown event handler property `onend`. It will be ignored.    Is there a workaround for this ?",
        "human_words": "Hi,  I'm trying to use the \\<animateTransform\\> Element in a React project. But I'm not able to use the \"onend\" attribute:    > Warning: Unknown event handler property `onend`. It will be ignored.    Is there a workaround for this ?",
        "human_words_regrex": "Hi, I'm trying to use the \\ Element in a React project. But I'm not able to use the \"onend\" attribute: > Warning: Unknown event handler property `onend`. It will be ignored. Is there a workaround for this ?",
        "human_words_stopwords_removal_lemmatization": "hi , 'm trying use \\ element react project . 'm able use `` onend '' attribute : > warning : unknown event handler property ` onend ` . ignored . workaround ?",
        "title_stopwords_removal_lemmatization": "support onend svg event"
    },
    {
        "issue_id": 267488292,
        "title": "Release a tool for statistical perf analysis (a replacement for ReactPerf)",
        "label": [
            "Type: Feature Request",
            "Component: Developer Tools"
        ],
        "date": "2017-10-22T18:42:36Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\nA feature\r\n\r\n**What is the current behavior?**\r\nN/A\r\n\r\n**What is the expected behavior?**\r\nIt's great that React 16 integrates with the timeline in browsers dev tools and that is very helpful in cases where you are trying to fix the performance of a specific thing. However I do miss the perf tool from previous versions and could not find any issue tracking a re-implementation of such a tool.\r\n\r\nWhat was great in the perf tool that is not covered as well with timeline integration?\r\n - Easily see which components render needlessly and therefore should be easily eliminated with sCU (and what impact it will give)\r\n - Easily see the collective render time of a component. I might for example have a component that renders very fast but which have very many instances and thus contribute to a significant render time anyway.\r\n - Give an overview of which components are slow by themselves and which are fast by themselves but render slow components. The flamegraph shows this, but I find it to specific in some scenarios with too much detail that can distract.\r\n\r\nBasically the wasted, exclusive and inclusive tables. The DOM table I feel is much better represented by the timeline integration.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n16, yes the perf addon in 15 was good.",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**  A feature    **What is the current behavior?**  N/A    **What is the expected behavior?**  It's great that React 16 integrates with the timeline in browsers dev tools and that is very helpful in cases where you are trying to fix the performance of a specific thing. However I do miss the perf tool from previous versions and could not find any issue tracking a re-implementation of such a tool.    What was great in the perf tool that is not covered as well with timeline integration?   - Easily see which components render needlessly and therefore should be easily eliminated with sCU (and what impact it will give)   - Easily see the collective render time of a component. I might for example have a component that renders very fast but which have very many instances and thus contribute to a significant render time anyway.   - Give an overview of which components are slow by themselves and which are fast by themselves but render slow components. The flamegraph shows this, but I find it to specific in some scenarios with too much detail that can distract.    Basically the wasted, exclusive and inclusive tables. The DOM table I feel is much better represented by the timeline integration.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  16, yes the perf addon in 15 was good.",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**  A feature    **What is the current behavior?**  N/A    **What is the expected behavior?**  It's great that React 16 integrates with the timeline in browsers dev tools and that is very helpful in cases where you are trying to fix the performance of a specific thing. However I do miss the perf tool from previous versions and could not find any issue tracking a re-implementation of such a tool.    What was great in the perf tool that is not covered as well with timeline integration?   - Easily see which components render needlessly and therefore should be easily eliminated with sCU (and what impact it will give)   - Easily see the collective render time of a component. I might for example have a component that renders very fast but which have very many instances and thus contribute to a significant render time anyway.   - Give an overview of which components are slow by themselves and which are fast by themselves but render slow components. The flamegraph shows this, but I find it to specific in some scenarios with too much detail that can distract.    Basically the wasted, exclusive and inclusive tables. The DOM table I feel is much better represented by the timeline integration.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  16, yes the perf addon in 15 was good.",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** A feature **What is the current behavior?** N/A **What is the expected behavior?** It's great that React 16 integrates with the timeline in browsers dev tools and that is very helpful in cases where you are trying to fix the performance of a specific thing. However I do miss the perf tool from previous versions and could not find any issue tracking a re-implementation of such a tool. What was great in the perf tool that is not covered as well with timeline integration? - Easily see which components render needlessly and therefore should be easily eliminated with sCU (and what impact it will give) - Easily see the collective render time of a component. I might for example have a component that renders very fast but which have very many instances and thus contribute to a significant render time anyway. - Give an overview of which components are slow by themselves and which are fast by themselves but render slow components. The flamegraph shows this, but I find it to specific in some scenarios with too much detail that can distract. Basically the wasted, exclusive and inclusive tables. The DOM table I feel is much better represented by the timeline integration. **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** 16, yes the perf addon in 15 was good.",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * feature * * current behavior ? * * n/a * * expected behavior ? * * 's great react 16 integrates timeline browser dev tool helpful case trying fix performance specific thing . however miss perf tool previous version could find issue tracking re-implementation tool . great perf tool covered well timeline integration ? - easily see component render needlessly therefore easily eliminated scu ( impact give ) - easily see collective render time component . might example component render fast many instance thus contribute significant render time anyway . - give overview component slow fast render slow component . flamegraph show , find specific scenario much detail distract . basically wasted , exclusive inclusive table . dom table feel much better represented timeline integration . * * version react , browser / o affected issue ? work previous version react ? * * 16 , yes perf addon 15 good .",
        "title_stopwords_removal_lemmatization": "release tool statistical perf analysis ( replacement reactperf )"
    },
    {
        "issue_id": 267459607,
        "title": "HTML5 Templates apart from JSX for Non Programmatic situations",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2017-10-22T12:09:58Z",
        "status": "closed",
        "description": "Just before I have my view, please take a look at these 2 examples\r\n\r\nHello World React => [App.jsx](https://git.io/vdNQb)\r\nHello World Vue => [App.vue](https://git.io/vdNQN)\r\n\r\nIdentical? Isn't it?\r\nYes these are two different **paradigm** but hey they are expressing same things and both are doing it in the same way by taking benefits of the Virtual DOM \r\n\r\nMy Feature Request is that,\r\nJust like Vue supports [JSX](https://vuejs.org/v2/guide/render-function.html) for Programmatic situations.\r\nI think React should also support HTML5 Templates for Non Programmatic situations?? \r\n\r\nAlso, **Imagine trying to create a website based on an existing theme that you purchased. Changing it over to JSX literally will feel like sticking a knife through your eyeballs. With Templates, existing HTML just works.**\r\n\r\nPlease also note that Programmatic situations have a low use case\r\nand Non Programmatic situations have a high use case.",
        "remove_template_description": "Just before I have my view, please take a look at these 2 examples    Hello World React => [App.jsx](https://git.io/vdNQb)  Hello World Vue => [App.vue](https://git.io/vdNQN)    Identical? Isn't it?  Yes these are two different **paradigm** but hey they are expressing same things and both are doing it in the same way by taking benefits of the Virtual DOM     My Feature Request is that,  Just like Vue supports [JSX](https://vuejs.org/v2/guide/render-function.html) for Programmatic situations.  I think React should also support HTML5 Templates for Non Programmatic situations??     Also, **Imagine trying to create a website based on an existing theme that you purchased. Changing it over to JSX literally will feel like sticking a knife through your eyeballs. With Templates, existing HTML just works.**    Please also note that Programmatic situations have a low use case  and Non Programmatic situations have a high use case.",
        "human_words": "Just before I have my view, please take a look at these 2 examples    Hello World React => [App.jsx](https://git.io/vdNQb)  Hello World Vue => [App.vue](https://git.io/vdNQN)    Identical? Isn't it?  Yes these are two different **paradigm** but hey they are expressing same things and both are doing it in the same way by taking benefits of the Virtual DOM     My Feature Request is that,  Just like Vue supports [JSX](https://vuejs.org/v2/guide/render-function.html) for Programmatic situations.  I think React should also support HTML5 Templates for Non Programmatic situations??     Also, **Imagine trying to create a website based on an existing theme that you purchased. Changing it over to JSX literally will feel like sticking a knife through your eyeballs. With Templates, existing HTML just works.**    Please also note that Programmatic situations have a low use case  and Non Programmatic situations have a high use case.",
        "human_words_regrex": "Just before I have my view, please take a look at these 2 examples Hello World React =>  Hello World Vue =>  Identical? Isn't it? Yes these are two different **paradigm** but hey they are expressing same things and both are doing it in the same way by taking benefits of the Virtual DOM My Feature Request is that, Just like Vue supports  for Programmatic situations. I think React should also support HTML5 Templates for Non Programmatic situations?? Also, **Imagine trying to create a website based on an existing theme that you purchased. Changing it over to JSX literally will feel like sticking a knife through your eyeballs. With Templates, existing HTML just works.** Please also note that Programmatic situations have a low use case and Non Programmatic situations have a high use case.",
        "human_words_stopwords_removal_lemmatization": "view , please take look 2 example hello world react = > hello world vue = > identical ? n't ? yes two different * * paradigm * * hey expressing thing way taking benefit virtual dom feature request , like vue support programmatic situation . think react also support html5 template non programmatic situation ? ? also , * * imagine trying create website based existing theme purchased . changing jsx literally feel like sticking knife eyeball . template , existing html work . * * please also note programmatic situation low use case non programmatic situation high use case .",
        "title_stopwords_removal_lemmatization": "html5 template apart jsx non programmatic situation"
    },
    {
        "issue_id": 267311280,
        "title": "Add `code` property to `SyntheticKeyboardEvent`",
        "label": [
            "Type: Feature Request",
            "Component: DOM",
            "Resolution: Stale"
        ],
        "date": "2017-10-20T21:34:42Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nImprovement\r\n\r\n**What is the current behavior?**\r\n\r\n[`SyntheticKeyboardEvent`](https://github.com/facebook/react/blob/e779c39dfeb41ae8f6611dc4f9830d1b1ac64f9b/packages/react-dom/src/events/SyntheticKeyboardEvent.js) does not currently support the `code` property.\r\n\r\n`code` ([MDN](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code)) is nice to have when you want to write key-specific handling\u2014rather than input-specific (dependent on layout and modifier keys) handling.\r\n\r\n**What is the expected behavior?**\r\n\r\n`SyntheticKeyboardEvent` already exposes a `keyCode` property. It should have a `code` property as well.\r\n\r\nCurrently, if you want to use the `keyboardEvent`'s  `code`, you must access it through `SyntheticKeyboardEvent`'s `nativeEvent`.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nAffects React 16 and earlier (I assume).\r\n",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**    Improvement    **What is the current behavior?**    [`SyntheticKeyboardEvent`](https://github.com/facebook/react/blob/e779c39dfeb41ae8f6611dc4f9830d1b1ac64f9b/packages/react-dom/src/events/SyntheticKeyboardEvent.js) does not currently support the `code` property.    `code` ([MDN](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code)) is nice to have when you want to write key-specific handling\u2014rather than input-specific (dependent on layout and modifier keys) handling.    **What is the expected behavior?**    `SyntheticKeyboardEvent` already exposes a `keyCode` property. It should have a `code` property as well.    Currently, if you want to use the `keyboardEvent`'s  `code`, you must access it through `SyntheticKeyboardEvent`'s `nativeEvent`.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    Affects React 16 and earlier (I assume).",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**    Improvement    **What is the current behavior?**    [`SyntheticKeyboardEvent`](https://github.com/facebook/react/blob/e779c39dfeb41ae8f6611dc4f9830d1b1ac64f9b/packages/react-dom/src/events/SyntheticKeyboardEvent.js) does not currently support the `code` property.    `code` ([MDN](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code)) is nice to have when you want to write key-specific handling\u2014rather than input-specific (dependent on layout and modifier keys) handling.    **What is the expected behavior?**    `SyntheticKeyboardEvent` already exposes a `keyCode` property. It should have a `code` property as well.    Currently, if you want to use the `keyboardEvent`'s  `code`, you must access it through `SyntheticKeyboardEvent`'s `nativeEvent`.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    Affects React 16 and earlier (I assume).",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** Improvement **What is the current behavior?**  does not currently support the `code` property. `code` () is nice to have when you want to write key-specific handling\u2014rather than input-specific (dependent on layout and modifier keys) handling. **What is the expected behavior?** `SyntheticKeyboardEvent` already exposes a `keyCode` property. It should have a `code` property as well. Currently, if you want to use the `keyboardEvent`'s `code`, you must access it through `SyntheticKeyboardEvent`'s `nativeEvent`. **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** Affects React 16 and earlier (I assume).",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * improvement * * current behavior ? * * currently support ` code ` property . ` code ` ( ) nice want write key-specific handling\u2014rather input-specific ( dependent layout modifier key ) handling . * * expected behavior ? * * ` synthetickeyboardevent ` already expose ` keycode ` property . ` code ` property well . currently , want use ` keyboardevent ` 's ` code ` , must access ` synthetickeyboardevent ` 's ` nativeevent ` . * * version react , browser / o affected issue ? work previous version react ? * * affect react 16 earlier ( assume ) .",
        "title_stopwords_removal_lemmatization": "add ` code ` property ` synthetickeyboardevent `"
    },
    {
        "issue_id": 266317253,
        "title": "New way to bind event handler function",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2017-10-17T23:57:26Z",
        "status": "closed",
        "description": "Currently there is no way to use event handlers in functional components without performance degradation e.g - unnecessary function recreations through .bind or arrow functions \r\n```\r\nfunction Node({node}){\r\n  return (\r\n    <div>\r\n      <button onClick={()=>node.parent.removeChild(node)}>remove</button>\r\n      <div>{node.text}</div>\r\n   </div>\r\n  )\r\n}\r\n```\r\nIn this case on each render a new handler will be created, and also react will need to perform some bookkeeping - remove previous handler from dom element and add new handler (ok, with event delegation system react will not touch dom elements and only replace handler somewhere in internal structure but what about events which don't bubble?) and all this take some noticeable time in my application. \r\nSure I can change to class components and solve problem by bind handlers only once when component will be created but what if I want to use functional components? \r\nSo in my application I came up with new and fastest method of binding handlers. Actually it does not preform binding at all). What is the reason of binding function in event handler? - we need to access current component props or current component state. Is there another way to get props or state of component? React does not describe this in docs but yes - we can access to props or state of current component without any unnecessary functions recreations on each render.\r\n```\r\nfunction Node({node}){\r\n  return (\r\n    <div>\r\n      <button onClick={onClick}>remove</button>\r\n      <div>{node.text}</div>\r\n   </div>\r\n  )\r\n}\r\n\r\nfunction onClick(e){\r\n  const {node} = getProps(e);\r\n  node.parent.removeChild(node)\r\n}\r\n\r\nfunction getProps(e){\r\n  return e.target[Object.keys(e.target).filter(k => k.indexOf('__reactInternalInstance') !== -1)[0]]._debugOwner.memoizedProps;\r\n} \r\n```\r\nand this demo https://codesandbox.io/s/4r59w89lox\r\n\r\nTo perform event delegations in an efficient way react need to assign current vdom-element to each rendered dom element. And vdom-element has link to actual owner component where we can get our props and state. So why react concealed this from developers and made them suffer not only from performance degradation but also from choosing problem (how many articles and advices recommend or investigate this rule to not bind handlers in render function, and how many solutions exist - use bind in constructor ? - use class field properties with arrow functions ? - use autobind decorators?) ??? And my solution not need even to recreate handlers on each component instantiation like all current solutions does, so it definitely the fastest way. I highly suggest make this api public or make some helper to get current props and state from event.target",
        "remove_template_description": "Currently there is no way to use event handlers in functional components without performance degradation e.g - unnecessary function recreations through .bind or arrow functions   ```  function Node({node}){    return (      <div>        <button onClick={()=>node.parent.removeChild(node)}>remove</button>        <div>{node.text}</div>     </div>    )  }  ```  In this case on each render a new handler will be created, and also react will need to perform some bookkeeping - remove previous handler from dom element and add new handler (ok, with event delegation system react will not touch dom elements and only replace handler somewhere in internal structure but what about events which don't bubble?) and all this take some noticeable time in my application.   Sure I can change to class components and solve problem by bind handlers only once when component will be created but what if I want to use functional components?   So in my application I came up with new and fastest method of binding handlers. Actually it does not preform binding at all). What is the reason of binding function in event handler? - we need to access current component props or current component state. Is there another way to get props or state of component? React does not describe this in docs but yes - we can access to props or state of current component without any unnecessary functions recreations on each render.  ```  function Node({node}){    return (      <div>        <button onClick={onClick}>remove</button>        <div>{node.text}</div>     </div>    )  }    function onClick(e){    const {node} = getProps(e);    node.parent.removeChild(node)  }    function getProps(e){    return e.target[Object.keys(e.target).filter(k => k.indexOf('__reactInternalInstance') !== -1)[0]]._debugOwner.memoizedProps;  }   ```  and this demo https://codesandbox.io/s/4r59w89lox    To perform event delegations in an efficient way react need to assign current vdom-element to each rendered dom element. And vdom-element has link to actual owner component where we can get our props and state. So why react concealed this from developers and made them suffer not only from performance degradation but also from choosing problem (how many articles and advices recommend or investigate this rule to not bind handlers in render function, and how many solutions exist - use bind in constructor ? - use class field properties with arrow functions ? - use autobind decorators?) ??? And my solution not need even to recreate handlers on each component instantiation like all current solutions does, so it definitely the fastest way. I highly suggest make this api public or make some helper to get current props and state from event.target",
        "human_words": "Currently there is no way to use event handlers in functional components without performance degradation e.g - unnecessary function recreations through .bind or arrow functions     In this case on each render a new handler will be created, and also react will need to perform some bookkeeping - remove previous handler from dom element and add new handler (ok, with event delegation system react will not touch dom elements and only replace handler somewhere in internal structure but what about events which don't bubble?) and all this take some noticeable time in my application.   Sure I can change to class components and solve problem by bind handlers only once when component will be created but what if I want to use functional components?   So in my application I came up with new and fastest method of binding handlers. Actually it does not preform binding at all). What is the reason of binding function in event handler? - we need to access current component props or current component state. Is there another way to get props or state of component? React does not describe this in docs but yes - we can access to props or state of current component without any unnecessary functions recreations on each render.    and this demo https://codesandbox.io/s/4r59w89lox    To perform event delegations in an efficient way react need to assign current vdom-element to each rendered dom element. And vdom-element has link to actual owner component where we can get our props and state. So why react concealed this from developers and made them suffer not only from performance degradation but also from choosing problem (how many articles and advices recommend or investigate this rule to not bind handlers in render function, and how many solutions exist - use bind in constructor ? - use class field properties with arrow functions ? - use autobind decorators?) ??? And my solution not need even to recreate handlers on each component instantiation like all current solutions does, so it definitely the fastest way. I highly suggest make this api public or make some helper to get current props and state from event.target",
        "human_words_regrex": "Currently there is no way to use event handlers in functional components without performance degradation e.g - unnecessary function recreations through .bind or arrow functions In this case on each render a new handler will be created, and also react will need to perform some bookkeeping - remove previous handler from dom element and add new handler (ok, with event delegation system react will not touch dom elements and only replace handler somewhere in internal structure but what about events which don't bubble?) and all this take some noticeable time in my application. Sure I can change to class components and solve problem by bind handlers only once when component will be created but what if I want to use functional components? So in my application I came up with new and fastest method of binding handlers. Actually it does not preform binding at all). What is the reason of binding function in event handler? - we need to access current component props or current component state. Is there another way to get props or state of component? React does not describe this in docs but yes - we can access to props or state of current component without any unnecessary functions recreations on each render. and this demo  To perform event delegations in an efficient way react need to assign current vdom-element to each rendered dom element. And vdom-element has link to actual owner component where we can get our props and state. So why react concealed this from developers and made them suffer not only from performance degradation but also from choosing problem (how many articles and advices recommend or investigate this rule to not bind handlers in render function, and how many solutions exist - use bind in constructor ? - use class field properties with arrow functions ? - use autobind decorators?) ??? And my solution not need even to recreate handlers on each component instantiation like all current solutions does, so it definitely the fastest way. I highly suggest make this api public or make some helper to get current props and state from event.target",
        "human_words_stopwords_removal_lemmatization": "currently way use event handler functional component without performance degradation e.g - unnecessary function recreation .bind arrow function case render new handler created , also react need perform bookkeeping - remove previous handler dom element add new handler ( ok , event delegation system react touch dom element replace handler somewhere internal structure event n't bubble ? ) take noticeable time application . sure change class component solve problem bind handler component created want use functional component ? application came new fastest method binding handler . actually preform binding ) . reason binding function event handler ? - need access current component prop current component state . another way get prop state component ? react describe doc yes - access prop state current component without unnecessary function recreation render . demo perform event delegation efficient way react need assign current vdom-element rendered dom element . vdom-element link actual owner component get prop state . react concealed developer made suffer performance degradation also choosing problem ( many article advice recommend investigate rule bind handler render function , many solution exist - use bind constructor ? - use class field property arrow function ? - use autobind decorator ? ) ? ? ? solution need even recreate handler component instantiation like current solution , definitely fastest way . highly suggest make api public make helper get current prop state event.target",
        "title_stopwords_removal_lemmatization": "new way bind event handler function"
    },
    {
        "issue_id": 265449852,
        "title": "Async componentWillReceiveProps to allow state update",
        "label": [
            "Type: Feature Request",
            "Component: Component API"
        ],
        "date": "2017-10-14T00:28:00Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\n**What is the current behavior?**\r\nAn (almost) immediate re-render is due after `componentWillReceiveProps` is called, unless `shouldComponentUpdate` says otherwise.\r\n\r\n**What is the expected behavior?**\r\nIf new props in `componentWillReceiveProps` cause an async call that's soon going to update the state anyway, won't it be cool if React might as well wait for that async call to do it's thing (which calls `setState`) and do one render instead of two?\r\n\r\nPotential solution: React can see if `componentWillReceiveProps` returns a `Promise`. If it does it defers the re-render until it `resolves`.\r\n\r\n```javascript\r\nasync componentWillReceiveProps(nextProps) {\r\n    const { postId } = nextProps;\r\n    const postTitle = await fetch(`https://api.example.com/posts/${postId}`);\r\n    this.setState({ postTitle });\r\n    return;\r\n}\r\n```\r\n",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**  Feature    **What is the current behavior?**  An (almost) immediate re-render is due after `componentWillReceiveProps` is called, unless `shouldComponentUpdate` says otherwise.    **What is the expected behavior?**  If new props in `componentWillReceiveProps` cause an async call that's soon going to update the state anyway, won't it be cool if React might as well wait for that async call to do it's thing (which calls `setState`) and do one render instead of two?    Potential solution: React can see if `componentWillReceiveProps` returns a `Promise`. If it does it defers the re-render until it `resolves`.    ```javascript  async componentWillReceiveProps(nextProps) {      const { postId } = nextProps;      const postTitle = await fetch(`https://api.example.com/posts/${postId}`);      this.setState({ postTitle });      return;  }  ```",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**  Feature    **What is the current behavior?**  An (almost) immediate re-render is due after `componentWillReceiveProps` is called, unless `shouldComponentUpdate` says otherwise.    **What is the expected behavior?**  If new props in `componentWillReceiveProps` cause an async call that's soon going to update the state anyway, won't it be cool if React might as well wait for that async call to do it's thing (which calls `setState`) and do one render instead of two?    Potential solution: React can see if `componentWillReceiveProps` returns a `Promise`. If it does it defers the re-render until it `resolves`.    ",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** Feature **What is the current behavior?** An (almost) immediate re-render is due after `componentWillReceiveProps` is called, unless `shouldComponentUpdate` says otherwise. **What is the expected behavior?** If new props in `componentWillReceiveProps` cause an async call that's soon going to update the state anyway, won't it be cool if React might as well wait for that async call to do it's thing (which calls `setState`) and do one render instead of two? Potential solution: React can see if `componentWillReceiveProps` returns a `Promise`. If it does it defers the re-render until it `resolves`. ",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * feature * * current behavior ? * * ( almost ) immediate re-render due ` componentwillreceiveprops ` called , unless ` shouldcomponentupdate ` say otherwise . * * expected behavior ? * * new prop ` componentwillreceiveprops ` cause async call 's soon going update state anyway , wo n't cool react might well wait async call 's thing ( call ` setstate ` ) one render instead two ? potential solution : react see ` componentwillreceiveprops ` return ` promise ` . defers re-render ` resolve ` .",
        "title_stopwords_removal_lemmatization": "async componentwillreceiveprops allow state update"
    },
    {
        "issue_id": 265143974,
        "title": "Use the native `beforeinput` event if it's supported",
        "label": [
            "Type: Feature Request",
            "Component: DOM"
        ],
        "date": "2017-10-13T01:45:04Z",
        "status": "open",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nImprovement.\r\n\r\n**What is the current behavior?**\r\n\r\nRight now, the synthetic `onBeforeInput` event is being created based on two other events:\r\n\r\n- `textInput` when possible\u2014which is in Webkit.\r\n- `keypress` as a fallback.\r\n\r\nBut these days in Chrome, Safari and Opera the spec'd `beforeinput` event is available and actually fires. And when it does, it includes other [spec'd properties](https://developer.mozilla.org/en-US/docs/Web/API/InputEvent) which can be extremely helpful:\r\n\r\n- `inputType` tells you whether the event is inserting text, replacing text, inserting a line break, etc.\r\n- `getTargetRanges()` tells you where the input is taking place in the DOM.\r\n\r\nRight now this information isn't exposed, because even if the browser supports `beforeinput`, it's not being checked for.\r\n\r\n**What is the expected behavior?**\r\n\r\nInstead React should treat `textInput` as a slightly-preferred fallback for native `beforeinput` support, but add `beforeinput` as the true goal. So we'd end up with a fallback stack of:\r\n\r\n- `beforeinput`\r\n- `textInput`\r\n- `keypress`\r\n\r\nWhich guarantees that the `nativeEvent` will always be the most spec'd and have the most relevant information associated with it.\r\n\r\n---\r\n\r\nThe `beforeinput` event's extra properties are critical in `contenteditable` situations, when you want to prevent the default browser behavior from firing but perform the logic on an internal model instead. (I'm looking to do this for [Slate](https://github.com/ianstormtaylor/slate).) \r\n\r\nWithout that extra information you have to fallback to hackier behavior\u2014allowing the event to occur, trying to parse the DOM for what the change was, then re-rendering to remove it, etc. I want to avoid this on the more modern browsers, because it results in reduced performance.\r\n\r\n---\r\n\r\nThere is another situation that this fixes, which is that spellcheck right now doesn't trigger React's `onBeforeInput` handler, even though modern browsers fire the `beforeinput` event, because it's not being listened for right now.\r\n\r\n\r\n",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**    Improvement.    **What is the current behavior?**    Right now, the synthetic `onBeforeInput` event is being created based on two other events:    - `textInput` when possible\u2014which is in Webkit.  - `keypress` as a fallback.    But these days in Chrome, Safari and Opera the spec'd `beforeinput` event is available and actually fires. And when it does, it includes other [spec'd properties](https://developer.mozilla.org/en-US/docs/Web/API/InputEvent) which can be extremely helpful:    - `inputType` tells you whether the event is inserting text, replacing text, inserting a line break, etc.  - `getTargetRanges()` tells you where the input is taking place in the DOM.    Right now this information isn't exposed, because even if the browser supports `beforeinput`, it's not being checked for.    **What is the expected behavior?**    Instead React should treat `textInput` as a slightly-preferred fallback for native `beforeinput` support, but add `beforeinput` as the true goal. So we'd end up with a fallback stack of:    - `beforeinput`  - `textInput`  - `keypress`    Which guarantees that the `nativeEvent` will always be the most spec'd and have the most relevant information associated with it.    ---    The `beforeinput` event's extra properties are critical in `contenteditable` situations, when you want to prevent the default browser behavior from firing but perform the logic on an internal model instead. (I'm looking to do this for [Slate](https://github.com/ianstormtaylor/slate).)     Without that extra information you have to fallback to hackier behavior\u2014allowing the event to occur, trying to parse the DOM for what the change was, then re-rendering to remove it, etc. I want to avoid this on the more modern browsers, because it results in reduced performance.    ---    There is another situation that this fixes, which is that spellcheck right now doesn't trigger React's `onBeforeInput` handler, even though modern browsers fire the `beforeinput` event, because it's not being listened for right now.",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**    Improvement.    **What is the current behavior?**    Right now, the synthetic `onBeforeInput` event is being created based on two other events:    - `textInput` when possible\u2014which is in Webkit.  - `keypress` as a fallback.    But these days in Chrome, Safari and Opera the spec'd `beforeinput` event is available and actually fires. And when it does, it includes other [spec'd properties](https://developer.mozilla.org/en-US/docs/Web/API/InputEvent) which can be extremely helpful:    - `inputType` tells you whether the event is inserting text, replacing text, inserting a line break, etc.  - `getTargetRanges()` tells you where the input is taking place in the DOM.    Right now this information isn't exposed, because even if the browser supports `beforeinput`, it's not being checked for.    **What is the expected behavior?**    Instead React should treat `textInput` as a slightly-preferred fallback for native `beforeinput` support, but add `beforeinput` as the true goal. So we'd end up with a fallback stack of:    - `beforeinput`  - `textInput`  - `keypress`    Which guarantees that the `nativeEvent` will always be the most spec'd and have the most relevant information associated with it.    ---    The `beforeinput` event's extra properties are critical in `contenteditable` situations, when you want to prevent the default browser behavior from firing but perform the logic on an internal model instead. (I'm looking to do this for [Slate](https://github.com/ianstormtaylor/slate).)     Without that extra information you have to fallback to hackier behavior\u2014allowing the event to occur, trying to parse the DOM for what the change was, then re-rendering to remove it, etc. I want to avoid this on the more modern browsers, because it results in reduced performance.    ---    There is another situation that this fixes, which is that spellcheck right now doesn't trigger React's `onBeforeInput` handler, even though modern browsers fire the `beforeinput` event, because it's not being listened for right now.",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** Improvement. **What is the current behavior?** Right now, the synthetic `onBeforeInput` event is being created based on two other events: - `textInput` when possible\u2014which is in Webkit. - `keypress` as a fallback. But these days in Chrome, Safari and Opera the spec'd `beforeinput` event is available and actually fires. And when it does, it includes other  which can be extremely helpful: - `inputType` tells you whether the event is inserting text, replacing text, inserting a line break, etc. - `getTargetRanges()` tells you where the input is taking place in the DOM. Right now this information isn't exposed, because even if the browser supports `beforeinput`, it's not being checked for. **What is the expected behavior?** Instead React should treat `textInput` as a slightly-preferred fallback for native `beforeinput` support, but add `beforeinput` as the true goal. So we'd end up with a fallback stack of: - `beforeinput` - `textInput` - `keypress` Which guarantees that the `nativeEvent` will always be the most spec'd and have the most relevant information associated with it. --- The `beforeinput` event's extra properties are critical in `contenteditable` situations, when you want to prevent the default browser behavior from firing but perform the logic on an internal model instead. (I'm looking to do this for .) Without that extra information you have to fallback to hackier behavior\u2014allowing the event to occur, trying to parse the DOM for what the change was, then re-rendering to remove it, etc. I want to avoid this on the more modern browsers, because it results in reduced performance. --- There is another situation that this fixes, which is that spellcheck right now doesn't trigger React's `onBeforeInput` handler, even though modern browsers fire the `beforeinput` event, because it's not being listened for right now.",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * improvement . * * current behavior ? * * right , synthetic ` onbeforeinput ` event created based two event : - ` textinput ` possible\u2014which webkit . - ` keypress ` fallback . day chrome , safari opera spec 'd ` beforeinput ` event available actually fire . , includes extremely helpful : - ` inputtype ` tell whether event inserting text , replacing text , inserting line break , etc . - ` gettargetranges ( ) ` tell input taking place dom . right information n't exposed , even browser support ` beforeinput ` , 's checked . * * expected behavior ? * * instead react treat ` textinput ` slightly-preferred fallback native ` beforeinput ` support , add ` beforeinput ` true goal . 'd end fallback stack : - ` beforeinput ` - ` textinput ` - ` keypress ` guarantee ` nativeevent ` always spec 'd relevant information associated . -- - ` beforeinput ` event 's extra property critical ` contenteditable ` situation , want prevent default browser behavior firing perform logic internal model instead . ( 'm looking . ) without extra information fallback hackier behavior\u2014allowing event occur , trying parse dom change , re-rendering remove , etc . want avoid modern browser , result reduced performance . -- - another situation fix , spellcheck right n't trigger react 's ` onbeforeinput ` handler , even though modern browser fire ` beforeinput ` event , 's listened right .",
        "title_stopwords_removal_lemmatization": "use native ` beforeinput ` event 's supported"
    },
    {
        "issue_id": 264460709,
        "title": "Need a hook for hydration mismatch",
        "label": [
            "Type: Feature Request",
            "Component: Server Rendering"
        ],
        "date": "2017-10-11T05:22:33Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\nfeature\r\n\r\n**What is the current behavior?**\r\nIn React 16, the `data-react-checksum` attribute was removed from the server rendered markup. In previous versions, we used this attribute to beacon checksum mismatches to our log servers to be notified of production issues. With the attribute removed, we have no mechanism to determine if a checksum mismatch occurred.\r\n\r\nI'm aware that checksum issues no longer cause the entire DOM to re-render, however, it is still important that we know when they do occur. A typical use case is when we display ads or autoplay video. We want to know if an ad gets re-rendered (double counted) or an autoplay video is interrupted due to React re-rendering the DOM.\r\n\r\nOther related bugs/requests:\r\n- Ability to debug checksums in production - https://github.com/facebook/react/issues/10016\r\n\r\n**What is the expected behavior?**\r\nThe solution does not necessarily need to re-introduce the checksum attribute again. It could be some other event, hook, or callback that applications can leverage to handle checksum issues.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n- React 16\r\n- All browsers\r\n- Worked in  <= React 15\r\n",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**  feature    **What is the current behavior?**  In React 16, the `data-react-checksum` attribute was removed from the server rendered markup. In previous versions, we used this attribute to beacon checksum mismatches to our log servers to be notified of production issues. With the attribute removed, we have no mechanism to determine if a checksum mismatch occurred.    I'm aware that checksum issues no longer cause the entire DOM to re-render, however, it is still important that we know when they do occur. A typical use case is when we display ads or autoplay video. We want to know if an ad gets re-rendered (double counted) or an autoplay video is interrupted due to React re-rendering the DOM.    Other related bugs/requests:  - Ability to debug checksums in production - https://github.com/facebook/react/issues/10016    **What is the expected behavior?**  The solution does not necessarily need to re-introduce the checksum attribute again. It could be some other event, hook, or callback that applications can leverage to handle checksum issues.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  - React 16  - All browsers  - Worked in  <= React 15",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**  feature    **What is the current behavior?**  In React 16, the `data-react-checksum` attribute was removed from the server rendered markup. In previous versions, we used this attribute to beacon checksum mismatches to our log servers to be notified of production issues. With the attribute removed, we have no mechanism to determine if a checksum mismatch occurred.    I'm aware that checksum issues no longer cause the entire DOM to re-render, however, it is still important that we know when they do occur. A typical use case is when we display ads or autoplay video. We want to know if an ad gets re-rendered (double counted) or an autoplay video is interrupted due to React re-rendering the DOM.    Other related bugs/requests:  - Ability to debug checksums in production - https://github.com/facebook/react/issues/10016    **What is the expected behavior?**  The solution does not necessarily need to re-introduce the checksum attribute again. It could be some other event, hook, or callback that applications can leverage to handle checksum issues.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  - React 16  - All browsers  - Worked in  <= React 15",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** feature **What is the current behavior?** In React 16, the `data-react-checksum` attribute was removed from the server rendered markup. In previous versions, we used this attribute to beacon checksum mismatches to our log servers to be notified of production issues. With the attribute removed, we have no mechanism to determine if a checksum mismatch occurred. I'm aware that checksum issues no longer cause the entire DOM to re-render, however, it is still important that we know when they do occur. A typical use case is when we display ads or autoplay video. We want to know if an ad gets re-rendered (double counted) or an autoplay video is interrupted due to React re-rendering the DOM. Other related bugs/requests: - Ability to debug checksums in production -  **What is the expected behavior?** The solution does not necessarily need to re-introduce the checksum attribute again. It could be some other event, hook, or callback that applications can leverage to handle checksum issues. **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** - React 16 - All browsers - Worked in <= React 15",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * feature * * current behavior ? * * react 16 , ` data-react-checksum ` attribute removed server rendered markup . previous version , used attribute beacon checksum mismatch log server notified production issue . attribute removed , mechanism determine checksum mismatch occurred . 'm aware checksum issue longer cause entire dom re-render , however , still important know occur . typical use case display ad autoplay video . want know ad get re-rendered ( double counted ) autoplay video interrupted due react re-rendering dom . related bugs/requests : - ability debug checksum production - * * expected behavior ? * * solution necessarily need re-introduce checksum attribute . could event , hook , callback application leverage handle checksum issue . * * version react , browser / o affected issue ? work previous version react ? * * - react 16 - browser - worked < = react 15",
        "title_stopwords_removal_lemmatization": "need hook hydration mismatch"
    },
    {
        "issue_id": 264346979,
        "title": "React16 not compatible with x3dom",
        "label": [
            "Type: Feature Request",
            "Component: DOM"
        ],
        "date": "2017-10-10T19:25:21Z",
        "status": "closed",
        "description": "** This is both bug / feature\r\nhttps://www.x3dom.org/\r\n\r\nI used to be able to use x3dom with React. It was great.\r\n\r\n** React ^15 I was able to use the **is** property to generate custom elements and custom attributes that could be picked up by x3dom i.e. <shape is render=\"true\"/>\r\n\r\nNow with React16 i get many warning messages for all of the custom x3dom tag elements. Likewise it seems that certain attributes aren't getting rendered either. For instance if I do x3dom elements like so:\r\n\r\n`<fontstyle size=\"0.6\"/>` I'll get `<fontstyle/>` output without the size attribute.\r\n\r\nI don't think React should have to know what x3dom tags are, nor should they be hard-coded into React. There has got to be a way to have React output custom tags without throwing warning messsages. Why not just re-introduce the **is** attribute to indicate that it's a custom tag with custom attributes? ",
        "remove_template_description": "** This is both bug / feature  https://www.x3dom.org/    I used to be able to use x3dom with React. It was great.    ** React ^15 I was able to use the **is** property to generate custom elements and custom attributes that could be picked up by x3dom i.e. <shape is render=\"true\"/>    Now with React16 i get many warning messages for all of the custom x3dom tag elements. Likewise it seems that certain attributes aren't getting rendered either. For instance if I do x3dom elements like so:    `<fontstyle size=\"0.6\"/>` I'll get `<fontstyle/>` output without the size attribute.    I don't think React should have to know what x3dom tags are, nor should they be hard-coded into React. There has got to be a way to have React output custom tags without throwing warning messsages. Why not just re-introduce the **is** attribute to indicate that it's a custom tag with custom attributes?",
        "human_words": "** This is both bug / feature  https://www.x3dom.org/    I used to be able to use x3dom with React. It was great.    ** React ^15 I was able to use the **is** property to generate custom elements and custom attributes that could be picked up by x3dom i.e. <shape is render=\"true\"/>    Now with React16 i get many warning messages for all of the custom x3dom tag elements. Likewise it seems that certain attributes aren't getting rendered either. For instance if I do x3dom elements like so:    `<fontstyle size=\"0.6\"/>` I'll get `<fontstyle/>` output without the size attribute.    I don't think React should have to know what x3dom tags are, nor should they be hard-coded into React. There has got to be a way to have React output custom tags without throwing warning messsages. Why not just re-introduce the **is** attribute to indicate that it's a custom tag with custom attributes?",
        "human_words_regrex": "** This is both bug / feature  I used to be able to use x3dom with React. It was great. ** React ^15 I was able to use the **is** property to generate custom elements and custom attributes that could be picked up by x3dom i.e.  Now with React16 i get many warning messages for all of the custom x3dom tag elements. Likewise it seems that certain attributes aren't getting rendered either. For instance if I do x3dom elements like so: `` I'll get `` output without the size attribute. I don't think React should have to know what x3dom tags are, nor should they be hard-coded into React. There has got to be a way to have React output custom tags without throwing warning messsages. Why not just re-introduce the **is** attribute to indicate that it's a custom tag with custom attributes?",
        "human_words_stopwords_removal_lemmatization": "* * bug / feature used able use x3dom react . great . * * react ^15 able use * * * * property generate custom element custom attribute could picked x3dom i.e . react16 get many warning message custom x3dom tag element . likewise seems certain attribute n't getting rendered either . instance x3dom element like : `` 'll get `` output without size attribute . n't think react know x3dom tag , hard-coded react . got way react output custom tag without throwing warning messsages . re-introduce * * * * attribute indicate 's custom tag custom attribute ?",
        "title_stopwords_removal_lemmatization": "react16 compatible x3dom"
    },
    {
        "issue_id": 263991029,
        "title": "Support srcObject attribute for video element",
        "label": [
            "Type: Feature Request",
            "Component: DOM"
        ],
        "date": "2017-10-09T18:45:57Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nfeature\r\n\r\n**What is the current behavior?**\r\n\r\ncurrently you cannot set the srcObject for a video.  You get an error:\r\n```\r\nWarning: React does not recognize the `srcObject` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `srcobject` instead. If you accidentally passed it from a parent component, remove it from the DOM element.\r\n```\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template for React 16: https://jsfiddle.net/Luktwrdm/, template for React 15: https://jsfiddle.net/hmbg7e9w/).**\r\n\r\n```\r\nreturn (\r\n      <video srcObject={this.props.stream}>\r\n)\r\n```\r\n\r\nThere is another issue that was closed but the issue was never resolved: https://github.com/facebook/react/pull/1474\r\n\r\nFirefox has deprecated using `URL.createObjectURL()` and Safari doesn't support it.\r\n\r\n**What is the expected behavior?**\r\n\r\nThe ability to set the `srcObject` on a video element.  This is common for WebRTC applications now.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n\"react\": \"^16.0.0\"",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**    feature    **What is the current behavior?**    currently you cannot set the srcObject for a video.  You get an error:  ```  Warning: React does not recognize the `srcObject` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `srcobject` instead. If you accidentally passed it from a parent component, remove it from the DOM element.  ```    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template for React 16: https://jsfiddle.net/Luktwrdm/, template for React 15: https://jsfiddle.net/hmbg7e9w/).**    ```  return (        <video srcObject={this.props.stream}>  )  ```    There is another issue that was closed but the issue was never resolved: https://github.com/facebook/react/pull/1474    Firefox has deprecated using `URL.createObjectURL()` and Safari doesn't support it.    **What is the expected behavior?**    The ability to set the `srcObject` on a video element.  This is common for WebRTC applications now.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    \"react\": \"^16.0.0\"",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**    feature    **What is the current behavior?**    currently you cannot set the srcObject for a video.  You get an error:      **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template for React 16: https://jsfiddle.net/Luktwrdm/, template for React 15: https://jsfiddle.net/hmbg7e9w/).**        There is another issue that was closed but the issue was never resolved: https://github.com/facebook/react/pull/1474    Firefox has deprecated using `URL.createObjectURL()` and Safari doesn't support it.    **What is the expected behavior?**    The ability to set the `srcObject` on a video element.  This is common for WebRTC applications now.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    \"react\": \"^16.0.0\"",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** feature **What is the current behavior?** currently you cannot set the srcObject for a video. You get an error: **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via  or similar (template for React 16:  template for React 15:  There is another issue that was closed but the issue was never resolved:  Firefox has deprecated using `URL.createObjectURL()` and Safari doesn't support it. **What is the expected behavior?** The ability to set the `srcObject` on a video element. This is common for WebRTC applications now. **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** \"react\": \"^16.0.0\"",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * feature * * current behavior ? * * currently set srcobject video . get error : * * current behavior bug , please provide step reproduce possible minimal demo problem via similar ( template react 16 : template react 15 : another issue closed issue never resolved : firefox deprecated using ` url.createobjecturl ( ) ` safari n't support . * * expected behavior ? * * ability set ` srcobject ` video element . common webrtc application . * * version react , browser / o affected issue ? work previous version react ? * * `` react '' : `` ^16.0.0 ''",
        "title_stopwords_removal_lemmatization": "support srcobject attribute video element"
    },
    {
        "issue_id": 262109610,
        "title": "Loosen up type requirements for event handlers",
        "label": [
            "Type: Feature Request",
            "Component: DOM"
        ],
        "date": "2017-10-02T14:44:19Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature\r\n\r\n**What is the current behavior?**\r\n\r\nWhen adding event handlers, it is common practice to do something like:\r\n\r\n```js\r\nconst MyButton = ({ canClick, onClick }) =>\r\n  <div onClick={canClick && onClick}></div>\r\n```\r\n\r\nThis was fine in React 15.x, but in 16 it reports a warning, which is technically correct:\r\n\r\n> Expected `onClick` listener to be a function, instead got a value of `boolean` type.\r\n\r\nHowever, this now forces you to use the more verbose variant:\r\n\r\n```js\r\nconst MyButton = ({ canClick, onClick }) =>\r\n  <div onClick={(canClick && onClick) ? onClick : undefined}></div>\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nI think it makes sense to allow `null`, `false`, and `undefined` in addition to function types for event handlers. Or just anything \"falsy\", although that may be too much to ask.\r\n\r\nI definitely understand the rationale from a type safety perspective, but this does make it less pragmatic. I am personally a huge fan of how JS evaluates `null`, `0`, `\"\"` and `undefined` to `false`, and it reduces the amount of boilerplate needed to conditionally wire up handlers.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16, all browsers. This did not emit a warning in React 15 and below.\r\n",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**    Feature    **What is the current behavior?**    When adding event handlers, it is common practice to do something like:    ```js  const MyButton = ({ canClick, onClick }) =>    <div onClick={canClick && onClick}></div>  ```    This was fine in React 15.x, but in 16 it reports a warning, which is technically correct:    > Expected `onClick` listener to be a function, instead got a value of `boolean` type.    However, this now forces you to use the more verbose variant:    ```js  const MyButton = ({ canClick, onClick }) =>    <div onClick={(canClick && onClick) ? onClick : undefined}></div>  ```    **What is the expected behavior?**    I think it makes sense to allow `null`, `false`, and `undefined` in addition to function types for event handlers. Or just anything \"falsy\", although that may be too much to ask.    I definitely understand the rationale from a type safety perspective, but this does make it less pragmatic. I am personally a huge fan of how JS evaluates `null`, `0`, `\"\"` and `undefined` to `false`, and it reduces the amount of boilerplate needed to conditionally wire up handlers.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    React 16, all browsers. This did not emit a warning in React 15 and below.",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**    Feature    **What is the current behavior?**    When adding event handlers, it is common practice to do something like:        This was fine in React 15.x, but in 16 it reports a warning, which is technically correct:    > Expected `onClick` listener to be a function, instead got a value of `boolean` type.    However, this now forces you to use the more verbose variant:        **What is the expected behavior?**    I think it makes sense to allow `null`, `false`, and `undefined` in addition to function types for event handlers. Or just anything \"falsy\", although that may be too much to ask.    I definitely understand the rationale from a type safety perspective, but this does make it less pragmatic. I am personally a huge fan of how JS evaluates `null`, `0`, `\"\"` and `undefined` to `false`, and it reduces the amount of boilerplate needed to conditionally wire up handlers.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    React 16, all browsers. This did not emit a warning in React 15 and below.",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** Feature **What is the current behavior?** When adding event handlers, it is common practice to do something like: This was fine in React 15.x, but in 16 it reports a warning, which is technically correct: > Expected `onClick` listener to be a function, instead got a value of `boolean` type. However, this now forces you to use the more verbose variant: **What is the expected behavior?** I think it makes sense to allow `null`, `false`, and `undefined` in addition to function types for event handlers. Or just anything \"falsy\", although that may be too much to ask. I definitely understand the rationale from a type safety perspective, but this does make it less pragmatic. I am personally a huge fan of how JS evaluates `null`, `0`, `\"\"` and `undefined` to `false`, and it reduces the amount of boilerplate needed to conditionally wire up handlers. **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** React 16, all browsers. This did not emit a warning in React 15 and below.",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * feature * * current behavior ? * * adding event handler , common practice something like : fine react 15.x , 16 report warning , technically correct : > expected ` onclick ` listener function , instead got value ` boolean ` type . however , force use verbose variant : * * expected behavior ? * * think make sense allow ` null ` , ` false ` , ` undefined ` addition function type event handler . anything `` falsy '' , although may much ask . definitely understand rationale type safety perspective , make le pragmatic . personally huge fan j evaluates ` null ` , ` 0 ` , ` `` '' ` ` undefined ` ` false ` , reduces amount boilerplate needed conditionally wire handler . * * version react , browser / o affected issue ? work previous version react ? * * react 16 , browser . emit warning react 15 .",
        "title_stopwords_removal_lemmatization": "loosen type requirement event handler"
    },
    {
        "issue_id": 261937204,
        "title": "Warn about unexpected HTML inside SVG",
        "label": [
            "Type: Feature Request",
            "Component: DOM",
            "Resolution: Stale"
        ],
        "date": "2017-10-01T18:51:32Z",
        "status": "closed",
        "description": "react and react-dom versions: 16.0.0\r\n\r\n```js\r\nconst { createElement: h } = require('react');\r\nconst { renderToStaticMarkup } = require('react-dom-server');\r\n\r\nrenderToStaticMarkup(h('div', null, h('svg', null, h('span')))) \r\n// '<div><svg><span></span></svg></div>'\r\n```\r\n\r\nBut they shouldn't be mixed:\r\n\r\nin browser console:\r\n\r\n```js\r\nnew Range().createContextualFragment('<div><svg><span></span></svg></div>')\r\n// \"<div><svg></svg><span></span></div>\"\r\n```\r\nI guess it's programmer responsibility to avoid that case? I understand that for performance you don't check this",
        "remove_template_description": "react and react-dom versions: 16.0.0    ```js  const { createElement: h } = require('react');  const { renderToStaticMarkup } = require('react-dom-server');    renderToStaticMarkup(h('div', null, h('svg', null, h('span'))))   // '<div><svg><span></span></svg></div>'  ```    But they shouldn't be mixed:    in browser console:    ```js  new Range().createContextualFragment('<div><svg><span></span></svg></div>')  // \"<div><svg></svg><span></span></div>\"  ```  I guess it's programmer responsibility to avoid that case? I understand that for performance you don't check this",
        "human_words": "react and react-dom versions: 16.0.0        But they shouldn't be mixed:    in browser console:      I guess it's programmer responsibility to avoid that case? I understand that for performance you don't check this",
        "human_words_regrex": "react and react-dom versions: 16.0.0 But they shouldn't be mixed: in browser console: I guess it's programmer responsibility to avoid that case? I understand that for performance you don't check this",
        "human_words_stopwords_removal_lemmatization": "react react-dom version : 16.0.0 n't mixed : browser console : guess 's programmer responsibility avoid case ? understand performance n't check",
        "title_stopwords_removal_lemmatization": "warn unexpected html inside svg"
    },
    {
        "issue_id": 261452078,
        "title": "Production Check in react-test-renderer",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2017-09-28T20:34:07Z",
        "status": "closed",
        "description": "When upgrading to 16.0.0 from 15.6.1, react-test-renderer started failing on my tests with the message:\r\n> test renderer is not available in production mode.\r\n\r\nI have in fact been running unit tests using this renderer during my production build.\r\n\r\nI'm trying to understand: why was this restriction introduced?  I saw the change was made in #9514 but couldn't find any explanation on the pull request or the documentation as to why production mode is now disallowed for this renderer.\r\n\r\nThanks,\r\nAlex",
        "remove_template_description": "When upgrading to 16.0.0 from 15.6.1, react-test-renderer started failing on my tests with the message:  > test renderer is not available in production mode.    I have in fact been running unit tests using this renderer during my production build.    I'm trying to understand: why was this restriction introduced?  I saw the change was made in #9514 but couldn't find any explanation on the pull request or the documentation as to why production mode is now disallowed for this renderer.    Thanks,  Alex",
        "human_words": "When upgrading to 16.0.0 from 15.6.1, react-test-renderer started failing on my tests with the message:  > test renderer is not available in production mode.    I have in fact been running unit tests using this renderer during my production build.    I'm trying to understand: why was this restriction introduced?  I saw the change was made in #9514 but couldn't find any explanation on the pull request or the documentation as to why production mode is now disallowed for this renderer.    Thanks,  Alex",
        "human_words_regrex": "When upgrading to 16.0.0 from 15.6.1, react-test-renderer started failing on my tests with the message: > test renderer is not available in production mode. I have in fact been running unit tests using this renderer during my production build. I'm trying to understand: why was this restriction introduced? I saw the change was made in #9514 but couldn't find any explanation on the pull request or the documentation as to why production mode is now disallowed for this renderer. Thanks, Alex",
        "human_words_stopwords_removal_lemmatization": "upgrading 16.0.0 15.6.1 , react-test-renderer started failing test message : > test renderer available production mode . fact running unit test using renderer production build . 'm trying understand : restriction introduced ? saw change made # 9514 could n't find explanation pull request documentation production mode disallowed renderer . thanks , alex",
        "title_stopwords_removal_lemmatization": "production check react-test-renderer"
    },
    {
        "issue_id": 261133406,
        "title": "Feature Request: Global didUpdate()",
        "label": [
            "Type: Feature Request",
            "Component: Reconciler"
        ],
        "date": "2017-09-27T22:08:12Z",
        "status": "closed",
        "description": "Currently, its not easy to write global logic that executes after React has re-rendered. The `componentDidUpdate` lifecycle method works great when your logic is isolated to a component, but I've found myself more and more recently wanting a global `didUpdate` hook baked into React.\r\n\r\nA simple example where this is useful is if you want an isolated function (perhaps a keyboard shortcut) that creates an element on the screen and then focuses it.\r\n\r\n```js\r\nconst createNewTodo = async () => {\r\n  const id = createTodo()\r\n  await React.didUpdate()\r\n  focusTodoItem(id)\r\n}\r\n```\r\n\r\nAt [Notion](www.notion.so), we've written custom logic for doing this, but it makes upgrading with React more difficult and unstable. I think this would be useful for others too, particularly those who use Redux and are building complicated UI interactions. ",
        "remove_template_description": "Currently, its not easy to write global logic that executes after React has re-rendered. The `componentDidUpdate` lifecycle method works great when your logic is isolated to a component, but I've found myself more and more recently wanting a global `didUpdate` hook baked into React.    A simple example where this is useful is if you want an isolated function (perhaps a keyboard shortcut) that creates an element on the screen and then focuses it.    ```js  const createNewTodo = async () => {    const id = createTodo()    await React.didUpdate()    focusTodoItem(id)  }  ```    At [Notion](www.notion.so), we've written custom logic for doing this, but it makes upgrading with React more difficult and unstable. I think this would be useful for others too, particularly those who use Redux and are building complicated UI interactions.",
        "human_words": "Currently, its not easy to write global logic that executes after React has re-rendered. The `componentDidUpdate` lifecycle method works great when your logic is isolated to a component, but I've found myself more and more recently wanting a global `didUpdate` hook baked into React.    A simple example where this is useful is if you want an isolated function (perhaps a keyboard shortcut) that creates an element on the screen and then focuses it.        At [Notion](www.notion.so), we've written custom logic for doing this, but it makes upgrading with React more difficult and unstable. I think this would be useful for others too, particularly those who use Redux and are building complicated UI interactions.",
        "human_words_regrex": "Currently, its not easy to write global logic that executes after React has re-rendered. The `componentDidUpdate` lifecycle method works great when your logic is isolated to a component, but I've found myself more and more recently wanting a global `didUpdate` hook baked into React. A simple example where this is useful is if you want an isolated function (perhaps a keyboard shortcut) that creates an element on the screen and then focuses it. At , we've written custom logic for doing this, but it makes upgrading with React more difficult and unstable. I think this would be useful for others too, particularly those who use Redux and are building complicated UI interactions.",
        "human_words_stopwords_removal_lemmatization": "currently , easy write global logic executes react re-rendered . ` componentdidupdate ` lifecycle method work great logic isolated component , 've found recently wanting global ` didupdate ` hook baked react . simple example useful want isolated function ( perhaps keyboard shortcut ) creates element screen focus . , 've written custom logic , make upgrading react difficult unstable . think would useful others , particularly use redux building complicated ui interaction .",
        "title_stopwords_removal_lemmatization": "feature request : global didupdate ( )"
    },
    {
        "issue_id": 261028024,
        "title": "\"Did not expect server HTML to contain the text node\" due to whitespace in React 16",
        "label": [
            "Type: Feature Request",
            "Resolution: Stale"
        ],
        "date": "2017-09-27T15:55:53Z",
        "status": "closed",
        "description": "We have updated our React v15 Application to v16. Everything seems to work fine instead the fact that this error appears:\r\n\r\n`Warning: Did not expect server HTML to contain the text node \"\r\n  \" in <div>.`\r\n\r\nWe are using ReactDOM.hydrate and our App was completely SSR Ready in v15. I've found an old issue on Stackoverflow where someone wrote that this could be a problem with the markup which is send from Server -> Client, but as far as we can see the HTML code is the same without any markup problem.",
        "remove_template_description": "We have updated our React v15 Application to v16. Everything seems to work fine instead the fact that this error appears:    `Warning: Did not expect server HTML to contain the text node \"    \" in <div>.`    We are using ReactDOM.hydrate and our App was completely SSR Ready in v15. I've found an old issue on Stackoverflow where someone wrote that this could be a problem with the markup which is send from Server -> Client, but as far as we can see the HTML code is the same without any markup problem.",
        "human_words": "We have updated our React v15 Application to v16. Everything seems to work fine instead the fact that this error appears:    `Warning: Did not expect server HTML to contain the text node \"    \" in <div>.`    We are using ReactDOM.hydrate and our App was completely SSR Ready in v15. I've found an old issue on Stackoverflow where someone wrote that this could be a problem with the markup which is send from Server -> Client, but as far as we can see the HTML code is the same without any markup problem.",
        "human_words_regrex": "We have updated our React v15 Application to v16. Everything seems to work fine instead the fact that this error appears: `Warning: Did not expect server HTML to contain the text node \" \" in .` We are using ReactDOM.hydrate and our App was completely SSR Ready in v15. I've found an old issue on Stackoverflow where someone wrote that this could be a problem with the markup which is send from Server -> Client, but as far as we can see the HTML code is the same without any markup problem.",
        "human_words_stopwords_removal_lemmatization": "updated react v15 application v16 . everything seems work fine instead fact error appears : ` warning : expect server html contain text node `` `` . ` using reactdom.hydrate app completely ssr ready v15 . 've found old issue stackoverflow someone wrote could problem markup send server - > client , far see html code without markup problem .",
        "title_stopwords_removal_lemmatization": "`` expect server html contain text node '' due whitespace react 16"
    },
    {
        "issue_id": 260848147,
        "title": "React 16 does not lowercase HTML attributes in generated HTML",
        "label": [
            "Resolution: Wontfix",
            "Type: Feature Request",
            "Component: Server Rendering"
        ],
        "date": "2017-09-27T05:07:15Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nReactDOMServer generates camelCased markup for the `cellSpacing` and `cellPadding` attributes:\r\n\r\n`<table cellSpacing=\"1\" cellPadding=\"2\"></table>`\r\n\r\n(Here's an example pen: https://codepen.io/anon/pen/jGBLdP)\r\n\r\nI believe these attributes are canonically lowercased. If I lowercase the attributes in JSX, React warns that I'm not using the right names:\r\n\r\n```Warning: Invalid DOM property `cellpadding`. Did you mean `cellPadding`?```\r\n\r\n**What is the expected behavior?**\r\n\r\nThe attribute names would be rendered lowercase:\r\n\r\n`<table cellspacing=\"1\" cellpadding=\"2\"></table>`\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nThis is in 16.0.0. Prior versions of React stripped these attributes.",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**    Bug    **What is the current behavior?**    ReactDOMServer generates camelCased markup for the `cellSpacing` and `cellPadding` attributes:    `<table cellSpacing=\"1\" cellPadding=\"2\"></table>`    (Here's an example pen: https://codepen.io/anon/pen/jGBLdP)    I believe these attributes are canonically lowercased. If I lowercase the attributes in JSX, React warns that I'm not using the right names:    ```Warning: Invalid DOM property `cellpadding`. Did you mean `cellPadding`?```    **What is the expected behavior?**    The attribute names would be rendered lowercase:    `<table cellspacing=\"1\" cellpadding=\"2\"></table>`    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    This is in 16.0.0. Prior versions of React stripped these attributes.",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**    Bug    **What is the current behavior?**    ReactDOMServer generates camelCased markup for the `cellSpacing` and `cellPadding` attributes:    `<table cellSpacing=\"1\" cellPadding=\"2\"></table>`    (Here's an example pen: https://codepen.io/anon/pen/jGBLdP)    I believe these attributes are canonically lowercased. If I lowercase the attributes in JSX, React warns that I'm not using the right names:        **What is the expected behavior?**    The attribute names would be rendered lowercase:    `<table cellspacing=\"1\" cellpadding=\"2\"></table>`    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    This is in 16.0.0. Prior versions of React stripped these attributes.",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** Bug **What is the current behavior?** ReactDOMServer generates camelCased markup for the `cellSpacing` and `cellPadding` attributes: `` (Here's an example pen:  I believe these attributes are canonically lowercased. If I lowercase the attributes in JSX, React warns that I'm not using the right names: **What is the expected behavior?** The attribute names would be rendered lowercase: `` **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** This is in 16.0.0. Prior versions of React stripped these attributes.",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * bug * * current behavior ? * * reactdomserver generates camelcased markup ` cellspacing ` ` cellpadding ` attribute : `` ( 's example pen : believe attribute canonically lowercased . lowercase attribute jsx , react warns 'm using right name : * * expected behavior ? * * attribute name would rendered lowercase : `` * * version react , browser / o affected issue ? work previous version react ? * * 16.0.0. prior version react stripped attribute .",
        "title_stopwords_removal_lemmatization": "react 16 lowercase html attribute generated html"
    },
    {
        "issue_id": 258483033,
        "title": "Attach third-party tools to monitor component state updates",
        "label": [
            "Type: Feature Request",
            "Component: Core Utilities",
            "Resolution: Stale"
        ],
        "date": "2017-09-18T13:39:07Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\nfeature, that exists in previous releases of react\r\n\r\n**What is the current behavior?**\r\nfeature is not implemented\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** React 16, worked in previous versions\r\n\r\nHey,\r\nWe would really like to be able to use ReactInstrumentation with Fiber. I have found @gaearon 's pull request, but work on it was stopped. Would like to know why? and if we can pick this up and implement it.\r\n\r\nhttps://github.com/facebook/react/pull/8152\r\n(I have also asked why in the pull request, but figured it might get ignored since it is a closed pull request)\r\n\r\nOmer\r\n",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**  feature, that exists in previous releases of react    **What is the current behavior?**  feature is not implemented    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** React 16, worked in previous versions    Hey,  We would really like to be able to use ReactInstrumentation with Fiber. I have found @gaearon 's pull request, but work on it was stopped. Would like to know why? and if we can pick this up and implement it.    https://github.com/facebook/react/pull/8152  (I have also asked why in the pull request, but figured it might get ignored since it is a closed pull request)    Omer",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**  feature, that exists in previous releases of react    **What is the current behavior?**  feature is not implemented    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** React 16, worked in previous versions    Hey,  We would really like to be able to use ReactInstrumentation with Fiber. I have found @gaearon 's pull request, but work on it was stopped. Would like to know why? and if we can pick this up and implement it.    https://github.com/facebook/react/pull/8152  (I have also asked why in the pull request, but figured it might get ignored since it is a closed pull request)    Omer",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** feature, that exists in previous releases of react **What is the current behavior?** feature is not implemented **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** React 16, worked in previous versions Hey, We would really like to be able to use ReactInstrumentation with Fiber. I have found @gaearon 's pull request, but work on it was stopped. Would like to know why? and if we can pick this up and implement it.  (I have also asked why in the pull request, but figured it might get ignored since it is a closed pull request) Omer",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * feature , exists previous release react * * current behavior ? * * feature implemented * * version react , browser / o affected issue ? work previous version react ? * * react 16 , worked previous version hey , would really like able use reactinstrumentation fiber . found @ gaearon 's pull request , work stopped . would like know ? pick implement . ( also asked pull request , figured might get ignored since closed pull request ) omer",
        "title_stopwords_removal_lemmatization": "attach third-party tool monitor component state update"
    },
    {
        "issue_id": 257710044,
        "title": "Support for string targets for isomorphic createPortal",
        "label": [
            "Type: Feature Request",
            "Component: Core Utilities",
            "Resolution: Stale"
        ],
        "date": "2017-09-14T12:57:40Z",
        "status": "closed",
        "description": "This is a proposal for the `createPortal` API to in addition to Nodes support strings for the second argument(container), which could pave a declarative way to achieve out of order server side rendering.\r\n\r\n```js\r\n#createPortal(..., container: Node|String, ...)\r\n```\r\n\r\nThe server could render a portals children in-place and have the client-side hydration process move it to the right location client-side using `document.querySelector` if the container is a string.",
        "remove_template_description": "This is a proposal for the `createPortal` API to in addition to Nodes support strings for the second argument(container), which could pave a declarative way to achieve out of order server side rendering.    ```js  #createPortal(..., container: Node|String, ...)  ```    The server could render a portals children in-place and have the client-side hydration process move it to the right location client-side using `document.querySelector` if the container is a string.",
        "human_words": "This is a proposal for the `createPortal` API to in addition to Nodes support strings for the second argument(container), which could pave a declarative way to achieve out of order server side rendering.        The server could render a portals children in-place and have the client-side hydration process move it to the right location client-side using `document.querySelector` if the container is a string.",
        "human_words_regrex": "This is a proposal for the `createPortal` API to in addition to Nodes support strings for the second argument(container), which could pave a declarative way to achieve out of order server side rendering. The server could render a portals children in-place and have the client-side hydration process move it to the right location client-side using `document.querySelector` if the container is a string.",
        "human_words_stopwords_removal_lemmatization": "proposal ` createportal ` api addition node support string second argument ( container ) , could pave declarative way achieve order server side rendering . server could render portal child in-place client-side hydration process move right location client-side using ` document.queryselector ` container string .",
        "title_stopwords_removal_lemmatization": "support string target isomorphic createportal"
    },
    {
        "issue_id": 257307941,
        "title": "`select` should warn if `value` is not available",
        "label": [
            "Type: Feature Request",
            "Component: DOM",
            "Resolution: Stale"
        ],
        "date": "2017-09-13T09:06:11Z",
        "status": "closed",
        "description": "IMO, \r\n```\r\n<select value=\"foo\" onChange={...}>\r\n  <option value=\"yes\">Yes</option>\r\n  <option value=\"no\">No</option>\r\n</select>\r\n```\r\nshould warn because there is no \"foo\" option. It should probably also warn if `value` is not specified, because there is no \"empty\" option either.\r\nOne could also argue that the change handler should be called with {value: 'yes'} when the component renders and the first option is selected instead of an invalid/non-existing one.",
        "remove_template_description": "IMO,   ```  <select value=\"foo\" onChange={...}>    <option value=\"yes\">Yes</option>    <option value=\"no\">No</option>  </select>  ```  should warn because there is no \"foo\" option. It should probably also warn if `value` is not specified, because there is no \"empty\" option either.  One could also argue that the change handler should be called with {value: 'yes'} when the component renders and the first option is selected instead of an invalid/non-existing one.",
        "human_words": "IMO,     should warn because there is no \"foo\" option. It should probably also warn if `value` is not specified, because there is no \"empty\" option either.  One could also argue that the change handler should be called with {value: 'yes'} when the component renders and the first option is selected instead of an invalid/non-existing one.",
        "human_words_regrex": "IMO, should warn because there is no \"foo\" option. It should probably also warn if `value` is not specified, because there is no \"empty\" option either. One could also argue that the change handler should be called with {value: 'yes'} when the component renders and the first option is selected instead of an invalid/non-existing one.",
        "human_words_stopwords_removal_lemmatization": "imo , warn `` foo '' option . probably also warn ` value ` specified , `` empty '' option either . one could also argue change handler called { value : 'yes ' } component render first option selected instead invalid/non-existing one .",
        "title_stopwords_removal_lemmatization": "` select ` warn ` value ` available"
    },
    {
        "issue_id": 254514316,
        "title": "Make on/off, yes/no boolean attributes work",
        "label": [
            "Type: Feature Request",
            "Component: DOM",
            "React Core Team"
        ],
        "date": "2017-09-01T01:49:25Z",
        "status": "closed",
        "description": "When you pass a boolean to some attributes (e.g. `autoSave`, `autoCorrect`) in 15, they don't work correctly because they actually want a specific string (`yes` and `no`). I think there were also some attributes that want `on` and `off`.\r\n\r\nLet's just \u201cmake them work\u201d? Could use a special flag/whitelist for that. There should be very few of these.\r\n\r\nSimilarly we should probably make `<script crossOrigin />` be valid and turn into `<script crossOrigin=\"anonymous\" />`. Currently I don\u2019t think this works on master.",
        "remove_template_description": "When you pass a boolean to some attributes (e.g. `autoSave`, `autoCorrect`) in 15, they don't work correctly because they actually want a specific string (`yes` and `no`). I think there were also some attributes that want `on` and `off`.    Let's just \u201cmake them work\u201d? Could use a special flag/whitelist for that. There should be very few of these.    Similarly we should probably make `<script crossOrigin />` be valid and turn into `<script crossOrigin=\"anonymous\" />`. Currently I don\u2019t think this works on master.",
        "human_words": "When you pass a boolean to some attributes (e.g. `autoSave`, `autoCorrect`) in 15, they don't work correctly because they actually want a specific string (`yes` and `no`). I think there were also some attributes that want `on` and `off`.    Let's just \u201cmake them work\u201d? Could use a special flag/whitelist for that. There should be very few of these.    Similarly we should probably make `<script crossOrigin />` be valid and turn into `<script crossOrigin=\"anonymous\" />`. Currently I don\u2019t think this works on master.",
        "human_words_regrex": "When you pass a boolean to some attributes (e.g. `autoSave`, `autoCorrect`) in 15, they don't work correctly because they actually want a specific string (`yes` and `no`). I think there were also some attributes that want `on` and `off`. Let's just \u201cmake them work\u201d? Could use a special flag/whitelist for that. There should be very few of these. Similarly we should probably make `` be valid and turn into ``. Currently I don\u2019t think this works on master.",
        "human_words_stopwords_removal_lemmatization": "pas boolean attribute ( e.g . ` autosave ` , ` autocorrect ` ) 15 , n't work correctly actually want specific string ( ` yes ` ` ` ) . think also attribute want ` ` ` ` . let 's \u201c make work \u201d ? could use special flag/whitelist . . similarly probably make `` valid turn `` . currently \u2019 think work master .",
        "title_stopwords_removal_lemmatization": "make on/off , yes/no boolean attribute work"
    },
    {
        "issue_id": 254196253,
        "title": "Accept Ref Objects as Refs?",
        "label": [
            "Type: Feature Request",
            "Type: Big Picture",
            "Component: Component API"
        ],
        "date": "2017-08-31T02:56:51Z",
        "status": "closed",
        "description": "[Reason React](https://github.com/reasonml/reason-react) uses first class OCaml refs to store mutable values (instead of on `this` instances).\r\n\r\nThese are basically just an object with a mutable `contents` property. These can be updated with callback refs `n => ref.contents = n` but it would be a nice convenience feature to just have that built-in.\r\n\r\nWe could also make these first class objects on isomorphic React.\r\n\r\n```js\r\nReact.createRef = () => ({ contents: null });\r\n```\r\n\r\n```js\r\nclass Foo extends React.Component {\r\n  state = {\r\n    myDiv: React.createRef()\r\n  };\r\n  componentDidMount() {\r\n    if (myDiv.contents) {\r\n      myDiv.contents.focus();\r\n    }\r\n  }\r\n  render() {\r\n    return <div ref={this.state.myDiv} />;\r\n  }\r\n}\r\n```\r\n\r\nBasically the implementation would just be:\r\n\r\n```js\r\nif (typeof ref === 'function') {\r\n  ref(newValue);\r\n} else if (typeof ref === 'object') {\r\n  ref.contents = newValue;\r\n} else if (typeof ref === 'string') {\r\n  owner.refs[ref] = newValue;\r\n}\r\n```\r\n\r\nThis is something that needs to be implemented in the core runtime and not as part of any particular component API since refs cross that boundary.\r\n\r\ncc @adamjernst\r\n",
        "remove_template_description": "[Reason React](https://github.com/reasonml/reason-react) uses first class OCaml refs to store mutable values (instead of on `this` instances).    These are basically just an object with a mutable `contents` property. These can be updated with callback refs `n => ref.contents = n` but it would be a nice convenience feature to just have that built-in.    We could also make these first class objects on isomorphic React.    ```js  React.createRef = () => ({ contents: null });  ```    ```js  class Foo extends React.Component {    state = {      myDiv: React.createRef()    };    componentDidMount() {      if (myDiv.contents) {        myDiv.contents.focus();      }    }    render() {      return <div ref={this.state.myDiv} />;    }  }  ```    Basically the implementation would just be:    ```js  if (typeof ref === 'function') {    ref(newValue);  } else if (typeof ref === 'object') {    ref.contents = newValue;  } else if (typeof ref === 'string') {    owner.refs[ref] = newValue;  }  ```    This is something that needs to be implemented in the core runtime and not as part of any particular component API since refs cross that boundary.    cc @adamjernst",
        "human_words": "[Reason React](https://github.com/reasonml/reason-react) uses first class OCaml refs to store mutable values (instead of on `this` instances).    These are basically just an object with a mutable `contents` property. These can be updated with callback refs `n => ref.contents = n` but it would be a nice convenience feature to just have that built-in.    We could also make these first class objects on isomorphic React.            Basically the implementation would just be:        This is something that needs to be implemented in the core runtime and not as part of any particular component API since refs cross that boundary.    cc @adamjernst",
        "human_words_regrex": " uses first class OCaml refs to store mutable values (instead of on `this` instances). These are basically just an object with a mutable `contents` property. These can be updated with callback refs `n => ref.contents = n` but it would be a nice convenience feature to just have that built-in. We could also make these first class objects on isomorphic React. Basically the implementation would just be: This is something that needs to be implemented in the core runtime and not as part of any particular component API since refs cross that boundary. cc @adamjernst",
        "human_words_stopwords_removal_lemmatization": "us first class ocaml ref store mutable value ( instead ` ` instance ) . basically object mutable ` content ` property . updated callback ref ` n = > ref.contents = n ` would nice convenience feature built-in . could also make first class object isomorphic react . basically implementation would : something need implemented core runtime part particular component api since ref cross boundary . cc @ adamjernst",
        "title_stopwords_removal_lemmatization": "accept ref object ref ?"
    },
    {
        "issue_id": 254194828,
        "title": "Implement Silent Updates in the State Update Queue",
        "label": [
            "Type: Feature Request",
            "React Core Team"
        ],
        "date": "2017-08-31T02:48:27Z",
        "status": "closed",
        "description": "[Reason React](https://github.com/reasonml/reason-react) has silent updates. Meaning it's a normal update in the state queue that can be reverted. The only difference is, it doesn't need a rerender by itself. If props have changed, it does rerender.\r\n\r\nUnclear if we expose this to the existing ClassComponent API or make it a feature of new APIs.",
        "remove_template_description": "[Reason React](https://github.com/reasonml/reason-react) has silent updates. Meaning it's a normal update in the state queue that can be reverted. The only difference is, it doesn't need a rerender by itself. If props have changed, it does rerender.    Unclear if we expose this to the existing ClassComponent API or make it a feature of new APIs.",
        "human_words": "[Reason React](https://github.com/reasonml/reason-react) has silent updates. Meaning it's a normal update in the state queue that can be reverted. The only difference is, it doesn't need a rerender by itself. If props have changed, it does rerender.    Unclear if we expose this to the existing ClassComponent API or make it a feature of new APIs.",
        "human_words_regrex": " has silent updates. Meaning it's a normal update in the state queue that can be reverted. The only difference is, it doesn't need a rerender by itself. If props have changed, it does rerender. Unclear if we expose this to the existing ClassComponent API or make it a feature of new APIs.",
        "human_words_stopwords_removal_lemmatization": "silent update . meaning 's normal update state queue reverted . difference , n't need rerender . prop changed , rerender . unclear expose existing classcomponent api make feature new apis .",
        "title_stopwords_removal_lemmatization": "implement silent update state update queue"
    },
    {
        "issue_id": 248114062,
        "title": "<video /> attribute needed but not guaranteed by React",
        "label": [
            "Type: Feature Request",
            "Component: DOM",
            "HTML"
        ],
        "date": "2017-08-04T20:50:39Z",
        "status": "open",
        "description": "As @gaearon [mentioned](https://twitter.com/dan_abramov/status/893511715463340033), React does not guarantee an *attribute* will be set, so probably this is not a bug.\r\n\r\nIf I understand well, react will ensure the property is set anyway. \r\n\r\n**Current behaviour**\r\nReact renders the html `<video />` element without the attribute `muted` when explicitly passed.\r\n\r\n**Demo time**\r\nIn [this pen](https://codepen.io/elrumordelaluz/pen/ba4b5294cec7ea455c66e9b9d0a6c889?editors=0010) I made a simple example setting `muted` to the element and obtaining the result below:\r\n![pen-screen-shot](https://user-images.githubusercontent.com/784056/28986491-7b2dd45e-7967-11e7-9f63-b4db88db9989.png)\r\n\r\nActually the property is set well, since the [original medial file](http://clips.vorwaerts-gmbh.de/VfE_html5.mp4) has an audio track and in the pen result is muted.\r\n\r\n**The point**\r\nI think is most a _specific need_ than the _expected behaviour_.\r\nFrom the functionality POV, it is absolutely ok, my _Component_ renders a `<video />` muted as requested and so on.\r\n\r\nBut there are _browsers_ and _policies_, more specifically related to this issue, Webkit and the [New <video> Policies for iOS](https://webkit.org/blog/6784/new-video-policies-for-ios/) updated one year ago, with some interesting changes for the `<video />` element.\r\nThe part interested is\r\n> `<video muted>` elements will also be allowed to autoplay without a user gesture.\r\n\r\nSo, the _specific need_ is to have the _explicit_ `attribute` to tell the browser that this video could be `autoPlay`ed.\r\n\r\nThere's a similar [issue](https://github.com/facebook/react/issues/6544)",
        "remove_template_description": "As @gaearon [mentioned](https://twitter.com/dan_abramov/status/893511715463340033), React does not guarantee an *attribute* will be set, so probably this is not a bug.    If I understand well, react will ensure the property is set anyway.     **Current behaviour**  React renders the html `<video />` element without the attribute `muted` when explicitly passed.    **Demo time**  In [this pen](https://codepen.io/elrumordelaluz/pen/ba4b5294cec7ea455c66e9b9d0a6c889?editors=0010) I made a simple example setting `muted` to the element and obtaining the result below:  ![pen-screen-shot](https://user-images.githubusercontent.com/784056/28986491-7b2dd45e-7967-11e7-9f63-b4db88db9989.png)    Actually the property is set well, since the [original medial file](http://clips.vorwaerts-gmbh.de/VfE_html5.mp4) has an audio track and in the pen result is muted.    **The point**  I think is most a _specific need_ than the _expected behaviour_.  From the functionality POV, it is absolutely ok, my _Component_ renders a `<video />` muted as requested and so on.    But there are _browsers_ and _policies_, more specifically related to this issue, Webkit and the [New <video> Policies for iOS](https://webkit.org/blog/6784/new-video-policies-for-ios/) updated one year ago, with some interesting changes for the `<video />` element.  The part interested is  > `<video muted>` elements will also be allowed to autoplay without a user gesture.    So, the _specific need_ is to have the _explicit_ `attribute` to tell the browser that this video could be `autoPlay`ed.    There's a similar [issue](https://github.com/facebook/react/issues/6544)",
        "human_words": "As @gaearon [mentioned](https://twitter.com/dan_abramov/status/893511715463340033), React does not guarantee an *attribute* will be set, so probably this is not a bug.    If I understand well, react will ensure the property is set anyway.     **Current behaviour**  React renders the html `<video />` element without the attribute `muted` when explicitly passed.    **Demo time**  In [this pen](https://codepen.io/elrumordelaluz/pen/ba4b5294cec7ea455c66e9b9d0a6c889?editors=0010) I made a simple example setting `muted` to the element and obtaining the result below:  ![pen-screen-shot](https://user-images.githubusercontent.com/784056/28986491-7b2dd45e-7967-11e7-9f63-b4db88db9989.png)    Actually the property is set well, since the [original medial file](http://clips.vorwaerts-gmbh.de/VfE_html5.mp4) has an audio track and in the pen result is muted.    **The point**  I think is most a _specific need_ than the _expected behaviour_.  From the functionality POV, it is absolutely ok, my _Component_ renders a `<video />` muted as requested and so on.    But there are _browsers_ and _policies_, more specifically related to this issue, Webkit and the [New <video> Policies for iOS](https://webkit.org/blog/6784/new-video-policies-for-ios/) updated one year ago, with some interesting changes for the `<video />` element.  The part interested is  > `<video muted>` elements will also be allowed to autoplay without a user gesture.    So, the _specific need_ is to have the _explicit_ `attribute` to tell the browser that this video could be `autoPlay`ed.    There's a similar [issue](https://github.com/facebook/react/issues/6544)",
        "human_words_regrex": "As @gaearon , React does not guarantee an *attribute* will be set, so probably this is not a bug. If I understand well, react will ensure the property is set anyway. **Current behaviour** React renders the html `` element without the attribute `muted` when explicitly passed. **Demo time** In  I made a simple example setting `muted` to the element and obtaining the result below: ! Actually the property is set well, since the  has an audio track and in the pen result is muted. **The point** I think is most a _specific need_ than the _expected behaviour_. From the functionality POV, it is absolutely ok, my _Component_ renders a `` muted as requested and so on. But there are _browsers_ and _policies_, more specifically related to this issue, Webkit and the  updated one year ago, with some interesting changes for the `` element. The part interested is > `` elements will also be allowed to autoplay without a user gesture. So, the _specific need_ is to have the _explicit_ `attribute` to tell the browser that this video could be `autoPlay`ed. There's a similar ",
        "human_words_stopwords_removal_lemmatization": "@ gaearon , react guarantee * attribute * set , probably bug . understand well , react ensure property set anyway . * * current behaviour * * react render html `` element without attribute ` muted ` explicitly passed . * * demo time * * made simple example setting ` muted ` element obtaining result : ! actually property set well , since audio track pen result muted . * * point * * think _specific need_ _expected behaviour_ . functionality pov , absolutely ok , _component_ render `` muted requested . _browsers_ _policies_ , specifically related issue , webkit updated one year ago , interesting change `` element . part interested > `` element also allowed autoplay without user gesture . , _specific need_ _explicit_ ` attribute ` tell browser video could ` autoplay ` ed . 's similar",
        "title_stopwords_removal_lemmatization": "< video / > attribute needed guaranteed react"
    },
    {
        "issue_id": 247589982,
        "title": "Async Top-level Hook Before Commit",
        "label": [
            "Type: Feature Request",
            "Component: Reconciler"
        ],
        "date": "2017-08-03T04:36:26Z",
        "status": "closed",
        "description": "_(This isn't needed for 16.0.)_\r\n\r\nI think we're missing a top-level API. If you want to integrate with non-React code around you in an async way, then you probably have some parents around you. It's not always the case that you want to show those parents before React is done. Maybe you can hide them and then show them at the callback time.\r\n\r\nHowever, it would be better if you could start building the tree async with React, and then get a callback *before* we trigger life-cycles so that you can insert the tree into the actual DOM and do whatever manipulation you need. Only after that do we trigger the life-cycles. That way they will have the CSS and layout information available to them by virtue of being in the document already.\r\n\r\nI see two possible routes:\r\n\r\na) We just call out for this hook and then commit immediately after.\r\n\r\nb) We invoke a callback and pass another function. That function, when invoked, does the actual commit. This approach has precedence in the DOM with \"append async\" and offscreen canvas.\r\n\r\nThe second option is probably preferable but we should only do that if we can do it efficiently and cleanly.",
        "remove_template_description": "_(This isn't needed for 16.0.)_    I think we're missing a top-level API. If you want to integrate with non-React code around you in an async way, then you probably have some parents around you. It's not always the case that you want to show those parents before React is done. Maybe you can hide them and then show them at the callback time.    However, it would be better if you could start building the tree async with React, and then get a callback *before* we trigger life-cycles so that you can insert the tree into the actual DOM and do whatever manipulation you need. Only after that do we trigger the life-cycles. That way they will have the CSS and layout information available to them by virtue of being in the document already.    I see two possible routes:    a) We just call out for this hook and then commit immediately after.    b) We invoke a callback and pass another function. That function, when invoked, does the actual commit. This approach has precedence in the DOM with \"append async\" and offscreen canvas.    The second option is probably preferable but we should only do that if we can do it efficiently and cleanly.",
        "human_words": "_(This isn't needed for 16.0.)_    I think we're missing a top-level API. If you want to integrate with non-React code around you in an async way, then you probably have some parents around you. It's not always the case that you want to show those parents before React is done. Maybe you can hide them and then show them at the callback time.    However, it would be better if you could start building the tree async with React, and then get a callback *before* we trigger life-cycles so that you can insert the tree into the actual DOM and do whatever manipulation you need. Only after that do we trigger the life-cycles. That way they will have the CSS and layout information available to them by virtue of being in the document already.    I see two possible routes:    a) We just call out for this hook and then commit immediately after.    b) We invoke a callback and pass another function. That function, when invoked, does the actual commit. This approach has precedence in the DOM with \"append async\" and offscreen canvas.    The second option is probably preferable but we should only do that if we can do it efficiently and cleanly.",
        "human_words_regrex": "_(This isn't needed for 16.0.)_ I think we're missing a top-level API. If you want to integrate with non-React code around you in an async way, then you probably have some parents around you. It's not always the case that you want to show those parents before React is done. Maybe you can hide them and then show them at the callback time. However, it would be better if you could start building the tree async with React, and then get a callback *before* we trigger life-cycles so that you can insert the tree into the actual DOM and do whatever manipulation you need. Only after that do we trigger the life-cycles. That way they will have the CSS and layout information available to them by virtue of being in the document already. I see two possible routes: a) We just call out for this hook and then commit immediately after. b) We invoke a callback and pass another function. That function, when invoked, does the actual commit. This approach has precedence in the DOM with \"append async\" and offscreen canvas. The second option is probably preferable but we should only do that if we can do it efficiently and cleanly.",
        "human_words_stopwords_removal_lemmatization": "_ ( n't needed 16.0 . ) _ think 're missing top-level api . want integrate non-react code around async way , probably parent around . 's always case want show parent react done . maybe hide show callback time . however , would better could start building tree async react , get callback * * trigger life-cycles insert tree actual dom whatever manipulation need . trigger life-cycles . way cs layout information available virtue document already . see two possible route : ) call hook commit immediately . b ) invoke callback pas another function . function , invoked , actual commit . approach precedence dom `` append async '' offscreen canvas . second option probably preferable efficiently cleanly .",
        "title_stopwords_removal_lemmatization": "async top-level hook commit"
    },
    {
        "issue_id": 246970317,
        "title": "More permissive rehydration logic",
        "label": [
            "Type: Feature Request",
            "Component: Server Rendering",
            "Resolution: Stale"
        ],
        "date": "2017-08-01T06:44:46Z",
        "status": "closed",
        "description": "So for the last little while I've been pursuing an idea called [React Snapshot](https://github.com/geelen/react-snapshot), where instead of running your code in a Node environment to generate static HTML, you run it in a virtual browser (jsdom or chrome headless) and take a snapshot of the DOM at a particularly moment in time, then host the snapshots like any other static file (technique also known as pre-rendering).\r\n\r\nI've been tossing around different API choices (https://github.com/geelen/react-snapshot/pull/30) in order to handle components that have async data fetching requirements, but I'm already starting to see real promise in this approach. Because the snapshot environment is so similar to the client one, far fewer changes are needed to get the performance & accessibility benefits of serving real HTML to your users. This is an example of the React Snapshot async API to make a component snapshottable:\r\n\r\n```diff\r\n+ import { snapshot } from 'react-snapshot'\r\n\r\nclass Home extends React.Component {\r\n  state = { quotes: null }\r\n\r\n  componentWillMount() {\r\n+   snapshot(() => (\r\n      fetch('/api/quotes')\r\n        .then(response => response.json())\r\n+   ))\r\n    .then(quotes => {\r\n      this.setState({ quotes })\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { quotes } = this.state\r\n    return (\r\n      <div className=\"Quotes\">\r\n        {\r\n          quotes && quotes.map((quote, i) => <Quote key={i} quote={quote}/>)\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n```\r\n\r\nThe idea is that any async parts of your app can be wrapped in a `snapshot` call, which caches responses and rehydrates on the client. However, I've hit a few walls that I think means I'd need changes to React itself to take this to its logical conclusion. Hence, I wanted to start the discussion about whether such changes would be compatible with React's future direction.\r\n\r\n### Rehydration\r\n\r\nAs far as I can tell from my experimentation and from reading the code, the two criteria for reusing the existing DOM elements in a pre-rendered HTML page is:\r\n\r\n* the adler32 hash of the initial client-rendered markup has to match the `data-react-checksum` present on the `rootElement`.\r\n* the `_domID` of each instance in the render tree needs to match the `data-react-id` on each DOM element\r\n\r\nBetween those two criteria, its enforced that the _structure_ and the _content_ of the DOM is the same. I can kinda see why both are needed\u2014the checksum is the cheapest way to confirm the structure will be the same, but the ID of each element is needed to actually wire everything up. Also, `data-react-checksum` is just an attribute, and could be calculated off something that's no longer present in the HTML.\r\n\r\nHowever, generating the exact right checksum in any other way than the existing SSR API turns out to be pretty difficult!\r\n\r\n### HTML-escaping woes\r\n\r\nI hit this problem where I was rendering the React app like normal, then taking the `innerHTML` of the root container, then passing it to [`addChecksumToMarkup`](https://github.com/facebook/react/blob/master/src/renderers/dom/stack/server/ReactMarkupChecksum.js#L26), and not getting the same checksum as `ReactDOMServer.renderToString`. I first realised I needed to add the `data-reactid` to each element along the way, which wasn't too hard, but still it wasn't working. I figured out it's due to [`escapeTextContentForBrowser`](https://github.com/facebook/react/blob/master/src/renderers/dom/shared/escapeTextContentForBrowser.js) converting things like `'` to `&#x27;` and `\"` to `&quot;`, meaning that while the content _appears_ the same once rendered, the precise string is not, therefore the checksum is not, and no rehydration takes place.\r\n\r\nFrom what I can understand, again by reading the code, React _always_ sanitises the HTML content before generating markup (on server or in client), it's just the fact that once its injected into the DOM, `innerHTML` doesn't re-sanitise things like quotes. They don't technically need to be, as discussed in issue https://github.com/facebook/react/issues/3879, and so if that were to be changed this particular problem would disappear, but there may well be more I just haven't hit yet. To me, the real issue is needing to have the content be byte-for-byte equivalent, rather than just functionally (and structurally) equivalent.\r\n\r\n### My interim solution\r\n\r\nAt the moment, I've realised its easier to boot up the app in its entirety, wait for all async processes to take place, then effectively reboot the app using `ReactDOMServer.renderToString` and splice the markup in place. Any side-effects relying on `componentDidMount` (like CSS injection or meta tags in the HEAD) that affect the DOM _outside_ the React app are preserved, but the markup and checksum of the React-rendered HTML are guaranteed to be correct. It works, but its not ideal. You still have to understand that your components are running in two different \"modes\", they'll run different lifecycle methods in each, and only one generates the final snapshot. Which I think adds an unreasonable conceptual burden, much the same way server-rendering does.\r\n\r\nThat's really the problem I see with the status quo and why I started looking into this problem in the first place. If snapshot/server rendering requires too much overhead, most people won't do it, which is exactly where we're at. Create-react-app doesn't include any because none of the options are simple enough with a broad enough applicability. The official [React Router docs](https://reacttraining.com/react-router/web/guides/code-splitting/code-splitting-server-rendering) warn agains combining server-rendering and code-splitting. Server-rendering boilerplates include fairly specific webpack hacks to provide the same environment on server and client, etc.\r\n\r\nThe result is that most people only ever do client-rendering. They serve a blank page & render everything client-side. Code splitting and service worker caching offer useful advantages but imo it's not enough. Snapshot rendering _could_ be the solution, but only if it can offer big benefits for small changes to application code.\r\n\r\n### My Dream Solution\r\n\r\nArchitecturally, what I'd like is for an arbitrary React app to be launched on one browser, executed until ready (async resources complete), snapshotted (serialised to HTML), then resumed on another browser. Those snapshots would be generated then cached at the edge of a CDN during deployment, or periodically depending on how often the content changes.\r\n\r\nPractically, I think that would require two changes to React's architecture:\r\n\r\nThe first is for a weaker check for rehydration\u2014some other fingerprint than a hash of the escaped HTML. Some other method for a snapshot to indicate to React to reuse as much of the existing DOM as possible.\r\n\r\nThe second would be for only parts of the tree to be rehydrated rather than the whole thing. If a component has some side-effect, say in a `componentDidMount`, then the snapshotted HTML would include the result of that side-effect. But when the app boots on the client side, the render method will generate the initial behaviour. At the moment React would replace what's there with what's just been rendered, but it might be preferable to leave the DOM unchanged on the first render, then wire things up later.\r\n\r\nI don't know the exact specifics of a solution, nor do I know enough of the internals of React as it is now or as it will become, but I wanted to start the discussion and see if there was any interest from the React team & wider community in this use case and direction. I look forward to hearing your thoughts!",
        "remove_template_description": "So for the last little while I've been pursuing an idea called [React Snapshot](https://github.com/geelen/react-snapshot), where instead of running your code in a Node environment to generate static HTML, you run it in a virtual browser (jsdom or chrome headless) and take a snapshot of the DOM at a particularly moment in time, then host the snapshots like any other static file (technique also known as pre-rendering).    I've been tossing around different API choices (https://github.com/geelen/react-snapshot/pull/30) in order to handle components that have async data fetching requirements, but I'm already starting to see real promise in this approach. Because the snapshot environment is so similar to the client one, far fewer changes are needed to get the performance & accessibility benefits of serving real HTML to your users. This is an example of the React Snapshot async API to make a component snapshottable:    ```diff  + import { snapshot } from 'react-snapshot'    class Home extends React.Component {    state = { quotes: null }      componentWillMount() {  +   snapshot(() => (        fetch('/api/quotes')          .then(response => response.json())  +   ))      .then(quotes => {        this.setState({ quotes })      })    }      render() {      const { quotes } = this.state      return (        <div className=\"Quotes\">          {            quotes && quotes.map((quote, i) => <Quote key={i} quote={quote}/>)          }        </div>      )    }  }  ```    The idea is that any async parts of your app can be wrapped in a `snapshot` call, which caches responses and rehydrates on the client. However, I've hit a few walls that I think means I'd need changes to React itself to take this to its logical conclusion. Hence, I wanted to start the discussion about whether such changes would be compatible with React's future direction.    ### Rehydration    As far as I can tell from my experimentation and from reading the code, the two criteria for reusing the existing DOM elements in a pre-rendered HTML page is:    * the adler32 hash of the initial client-rendered markup has to match the `data-react-checksum` present on the `rootElement`.  * the `_domID` of each instance in the render tree needs to match the `data-react-id` on each DOM element    Between those two criteria, its enforced that the _structure_ and the _content_ of the DOM is the same. I can kinda see why both are needed\u2014the checksum is the cheapest way to confirm the structure will be the same, but the ID of each element is needed to actually wire everything up. Also, `data-react-checksum` is just an attribute, and could be calculated off something that's no longer present in the HTML.    However, generating the exact right checksum in any other way than the existing SSR API turns out to be pretty difficult!    ### HTML-escaping woes    I hit this problem where I was rendering the React app like normal, then taking the `innerHTML` of the root container, then passing it to [`addChecksumToMarkup`](https://github.com/facebook/react/blob/master/src/renderers/dom/stack/server/ReactMarkupChecksum.js#L26), and not getting the same checksum as `ReactDOMServer.renderToString`. I first realised I needed to add the `data-reactid` to each element along the way, which wasn't too hard, but still it wasn't working. I figured out it's due to [`escapeTextContentForBrowser`](https://github.com/facebook/react/blob/master/src/renderers/dom/shared/escapeTextContentForBrowser.js) converting things like `'` to `&#x27;` and `\"` to `&quot;`, meaning that while the content _appears_ the same once rendered, the precise string is not, therefore the checksum is not, and no rehydration takes place.    From what I can understand, again by reading the code, React _always_ sanitises the HTML content before generating markup (on server or in client), it's just the fact that once its injected into the DOM, `innerHTML` doesn't re-sanitise things like quotes. They don't technically need to be, as discussed in issue https://github.com/facebook/react/issues/3879, and so if that were to be changed this particular problem would disappear, but there may well be more I just haven't hit yet. To me, the real issue is needing to have the content be byte-for-byte equivalent, rather than just functionally (and structurally) equivalent.    ### My interim solution    At the moment, I've realised its easier to boot up the app in its entirety, wait for all async processes to take place, then effectively reboot the app using `ReactDOMServer.renderToString` and splice the markup in place. Any side-effects relying on `componentDidMount` (like CSS injection or meta tags in the HEAD) that affect the DOM _outside_ the React app are preserved, but the markup and checksum of the React-rendered HTML are guaranteed to be correct. It works, but its not ideal. You still have to understand that your components are running in two different \"modes\", they'll run different lifecycle methods in each, and only one generates the final snapshot. Which I think adds an unreasonable conceptual burden, much the same way server-rendering does.    That's really the problem I see with the status quo and why I started looking into this problem in the first place. If snapshot/server rendering requires too much overhead, most people won't do it, which is exactly where we're at. Create-react-app doesn't include any because none of the options are simple enough with a broad enough applicability. The official [React Router docs](https://reacttraining.com/react-router/web/guides/code-splitting/code-splitting-server-rendering) warn agains combining server-rendering and code-splitting. Server-rendering boilerplates include fairly specific webpack hacks to provide the same environment on server and client, etc.    The result is that most people only ever do client-rendering. They serve a blank page & render everything client-side. Code splitting and service worker caching offer useful advantages but imo it's not enough. Snapshot rendering _could_ be the solution, but only if it can offer big benefits for small changes to application code.    ### My Dream Solution    Architecturally, what I'd like is for an arbitrary React app to be launched on one browser, executed until ready (async resources complete), snapshotted (serialised to HTML), then resumed on another browser. Those snapshots would be generated then cached at the edge of a CDN during deployment, or periodically depending on how often the content changes.    Practically, I think that would require two changes to React's architecture:    The first is for a weaker check for rehydration\u2014some other fingerprint than a hash of the escaped HTML. Some other method for a snapshot to indicate to React to reuse as much of the existing DOM as possible.    The second would be for only parts of the tree to be rehydrated rather than the whole thing. If a component has some side-effect, say in a `componentDidMount`, then the snapshotted HTML would include the result of that side-effect. But when the app boots on the client side, the render method will generate the initial behaviour. At the moment React would replace what's there with what's just been rendered, but it might be preferable to leave the DOM unchanged on the first render, then wire things up later.    I don't know the exact specifics of a solution, nor do I know enough of the internals of React as it is now or as it will become, but I wanted to start the discussion and see if there was any interest from the React team & wider community in this use case and direction. I look forward to hearing your thoughts!",
        "human_words": "So for the last little while I've been pursuing an idea called [React Snapshot](https://github.com/geelen/react-snapshot), where instead of running your code in a Node environment to generate static HTML, you run it in a virtual browser (jsdom or chrome headless) and take a snapshot of the DOM at a particularly moment in time, then host the snapshots like any other static file (technique also known as pre-rendering).    I've been tossing around different API choices (https://github.com/geelen/react-snapshot/pull/30) in order to handle components that have async data fetching requirements, but I'm already starting to see real promise in this approach. Because the snapshot environment is so similar to the client one, far fewer changes are needed to get the performance & accessibility benefits of serving real HTML to your users. This is an example of the React Snapshot async API to make a component snapshottable:        The idea is that any async parts of your app can be wrapped in a `snapshot` call, which caches responses and rehydrates on the client. However, I've hit a few walls that I think means I'd need changes to React itself to take this to its logical conclusion. Hence, I wanted to start the discussion about whether such changes would be compatible with React's future direction.    ### Rehydration    As far as I can tell from my experimentation and from reading the code, the two criteria for reusing the existing DOM elements in a pre-rendered HTML page is:    * the adler32 hash of the initial client-rendered markup has to match the `data-react-checksum` present on the `rootElement`.  * the `_domID` of each instance in the render tree needs to match the `data-react-id` on each DOM element    Between those two criteria, its enforced that the _structure_ and the _content_ of the DOM is the same. I can kinda see why both are needed\u2014the checksum is the cheapest way to confirm the structure will be the same, but the ID of each element is needed to actually wire everything up. Also, `data-react-checksum` is just an attribute, and could be calculated off something that's no longer present in the HTML.    However, generating the exact right checksum in any other way than the existing SSR API turns out to be pretty difficult!    ### HTML-escaping woes    I hit this problem where I was rendering the React app like normal, then taking the `innerHTML` of the root container, then passing it to [`addChecksumToMarkup`](https://github.com/facebook/react/blob/master/src/renderers/dom/stack/server/ReactMarkupChecksum.js#L26), and not getting the same checksum as `ReactDOMServer.renderToString`. I first realised I needed to add the `data-reactid` to each element along the way, which wasn't too hard, but still it wasn't working. I figured out it's due to [`escapeTextContentForBrowser`](https://github.com/facebook/react/blob/master/src/renderers/dom/shared/escapeTextContentForBrowser.js) converting things like `'` to `&#x27;` and `\"` to `&quot;`, meaning that while the content _appears_ the same once rendered, the precise string is not, therefore the checksum is not, and no rehydration takes place.    From what I can understand, again by reading the code, React _always_ sanitises the HTML content before generating markup (on server or in client), it's just the fact that once its injected into the DOM, `innerHTML` doesn't re-sanitise things like quotes. They don't technically need to be, as discussed in issue https://github.com/facebook/react/issues/3879, and so if that were to be changed this particular problem would disappear, but there may well be more I just haven't hit yet. To me, the real issue is needing to have the content be byte-for-byte equivalent, rather than just functionally (and structurally) equivalent.    ### My interim solution    At the moment, I've realised its easier to boot up the app in its entirety, wait for all async processes to take place, then effectively reboot the app using `ReactDOMServer.renderToString` and splice the markup in place. Any side-effects relying on `componentDidMount` (like CSS injection or meta tags in the HEAD) that affect the DOM _outside_ the React app are preserved, but the markup and checksum of the React-rendered HTML are guaranteed to be correct. It works, but its not ideal. You still have to understand that your components are running in two different \"modes\", they'll run different lifecycle methods in each, and only one generates the final snapshot. Which I think adds an unreasonable conceptual burden, much the same way server-rendering does.    That's really the problem I see with the status quo and why I started looking into this problem in the first place. If snapshot/server rendering requires too much overhead, most people won't do it, which is exactly where we're at. Create-react-app doesn't include any because none of the options are simple enough with a broad enough applicability. The official [React Router docs](https://reacttraining.com/react-router/web/guides/code-splitting/code-splitting-server-rendering) warn agains combining server-rendering and code-splitting. Server-rendering boilerplates include fairly specific webpack hacks to provide the same environment on server and client, etc.    The result is that most people only ever do client-rendering. They serve a blank page & render everything client-side. Code splitting and service worker caching offer useful advantages but imo it's not enough. Snapshot rendering _could_ be the solution, but only if it can offer big benefits for small changes to application code.    ### My Dream Solution    Architecturally, what I'd like is for an arbitrary React app to be launched on one browser, executed until ready (async resources complete), snapshotted (serialised to HTML), then resumed on another browser. Those snapshots would be generated then cached at the edge of a CDN during deployment, or periodically depending on how often the content changes.    Practically, I think that would require two changes to React's architecture:    The first is for a weaker check for rehydration\u2014some other fingerprint than a hash of the escaped HTML. Some other method for a snapshot to indicate to React to reuse as much of the existing DOM as possible.    The second would be for only parts of the tree to be rehydrated rather than the whole thing. If a component has some side-effect, say in a `componentDidMount`, then the snapshotted HTML would include the result of that side-effect. But when the app boots on the client side, the render method will generate the initial behaviour. At the moment React would replace what's there with what's just been rendered, but it might be preferable to leave the DOM unchanged on the first render, then wire things up later.    I don't know the exact specifics of a solution, nor do I know enough of the internals of React as it is now or as it will become, but I wanted to start the discussion and see if there was any interest from the React team & wider community in this use case and direction. I look forward to hearing your thoughts!",
        "human_words_regrex": "So for the last little while I've been pursuing an idea called , where instead of running your code in a Node environment to generate static HTML, you run it in a virtual browser (jsdom or chrome headless) and take a snapshot of the DOM at a particularly moment in time, then host the snapshots like any other static file (technique also known as pre-rendering). I've been tossing around different API choices ( in order to handle components that have async data fetching requirements, but I'm already starting to see real promise in this approach. Because the snapshot environment is so similar to the client one, far fewer changes are needed to get the performance & accessibility benefits of serving real HTML to your users. This is an example of the React Snapshot async API to make a component snapshottable: The idea is that any async parts of your app can be wrapped in a `snapshot` call, which caches responses and rehydrates on the client. However, I've hit a few walls that I think means I'd need changes to React itself to take this to its logical conclusion. Hence, I wanted to start the discussion about whether such changes would be compatible with React's future direction. ### Rehydration As far as I can tell from my experimentation and from reading the code, the two criteria for reusing the existing DOM elements in a pre-rendered HTML page is: * the adler32 hash of the initial client-rendered markup has to match the `data-react-checksum` present on the `rootElement`. * the `_domID` of each instance in the render tree needs to match the `data-react-id` on each DOM element Between those two criteria, its enforced that the _structure_ and the _content_ of the DOM is the same. I can kinda see why both are needed\u2014the checksum is the cheapest way to confirm the structure will be the same, but the ID of each element is needed to actually wire everything up. Also, `data-react-checksum` is just an attribute, and could be calculated off something that's no longer present in the HTML. However, generating the exact right checksum in any other way than the existing SSR API turns out to be pretty difficult! ### HTML-escaping woes I hit this problem where I was rendering the React app like normal, then taking the `innerHTML` of the root container, then passing it to , and not getting the same checksum as `ReactDOMServer.renderToString`. I first realised I needed to add the `data-reactid` to each element along the way, which wasn't too hard, but still it wasn't working. I figured out it's due to  converting things like `'` to `&#x27;` and `\"` to `&quot;`, meaning that while the content _appears_ the same once rendered, the precise string is not, therefore the checksum is not, and no rehydration takes place. From what I can understand, again by reading the code, React _always_ sanitises the HTML content before generating markup (on server or in client), it's just the fact that once its injected into the DOM, `innerHTML` doesn't re-sanitise things like quotes. They don't technically need to be, as discussed in issue  and so if that were to be changed this particular problem would disappear, but there may well be more I just haven't hit yet. To me, the real issue is needing to have the content be byte-for-byte equivalent, rather than just functionally (and structurally) equivalent. ### My interim solution At the moment, I've realised its easier to boot up the app in its entirety, wait for all async processes to take place, then effectively reboot the app using `ReactDOMServer.renderToString` and splice the markup in place. Any side-effects relying on `componentDidMount` (like CSS injection or meta tags in the HEAD) that affect the DOM _outside_ the React app are preserved, but the markup and checksum of the React-rendered HTML are guaranteed to be correct. It works, but its not ideal. You still have to understand that your components are running in two different \"modes\", they'll run different lifecycle methods in each, and only one generates the final snapshot. Which I think adds an unreasonable conceptual burden, much the same way server-rendering does. That's really the problem I see with the status quo and why I started looking into this problem in the first place. If snapshot/server rendering requires too much overhead, most people won't do it, which is exactly where we're at. Create-react-app doesn't include any because none of the options are simple enough with a broad enough applicability. The official  warn agains combining server-rendering and code-splitting. Server-rendering boilerplates include fairly specific webpack hacks to provide the same environment on server and client, etc. The result is that most people only ever do client-rendering. They serve a blank page & render everything client-side. Code splitting and service worker caching offer useful advantages but imo it's not enough. Snapshot rendering _could_ be the solution, but only if it can offer big benefits for small changes to application code. ### My Dream Solution Architecturally, what I'd like is for an arbitrary React app to be launched on one browser, executed until ready (async resources complete), snapshotted (serialised to HTML), then resumed on another browser. Those snapshots would be generated then cached at the edge of a CDN during deployment, or periodically depending on how often the content changes. Practically, I think that would require two changes to React's architecture: The first is for a weaker check for rehydration\u2014some other fingerprint than a hash of the escaped HTML. Some other method for a snapshot to indicate to React to reuse as much of the existing DOM as possible. The second would be for only parts of the tree to be rehydrated rather than the whole thing. If a component has some side-effect, say in a `componentDidMount`, then the snapshotted HTML would include the result of that side-effect. But when the app boots on the client side, the render method will generate the initial behaviour. At the moment React would replace what's there with what's just been rendered, but it might be preferable to leave the DOM unchanged on the first render, then wire things up later. I don't know the exact specifics of a solution, nor do I know enough of the internals of React as it is now or as it will become, but I wanted to start the discussion and see if there was any interest from the React team & wider community in this use case and direction. I look forward to hearing your thoughts!",
        "human_words_stopwords_removal_lemmatization": "last little 've pursuing idea called , instead running code node environment generate static html , run virtual browser ( jsdom chrome headless ) take snapshot dom particularly moment time , host snapshot like static file ( technique also known pre-rendering ) . 've tossing around different api choice ( order handle component async data fetching requirement , 'm already starting see real promise approach . snapshot environment similar client one , far fewer change needed get performance & accessibility benefit serving real html user . example react snapshot async api make component snapshottable : idea async part app wrapped ` snapshot ` call , cache response rehydrates client . however , 've hit wall think mean 'd need change react take logical conclusion . hence , wanted start discussion whether change would compatible react 's future direction . # # # rehydration far tell experimentation reading code , two criterion reusing existing dom element pre-rendered html page : * adler32 hash initial client-rendered markup match ` data-react-checksum ` present ` rootelement ` . * ` _domid ` instance render tree need match ` data-react-id ` dom element two criterion , enforced _structure_ _content_ dom . kinda see needed\u2014the checksum cheapest way confirm structure , id element needed actually wire everything . also , ` data-react-checksum ` attribute , could calculated something 's longer present html . however , generating exact right checksum way existing ssr api turn pretty difficult ! # # # html-escaping woe hit problem rendering react app like normal , taking ` innerhtml ` root container , passing , getting checksum ` reactdomserver.rendertostring ` . first realised needed add ` data-reactid ` element along way , n't hard , still n't working . figured 's due converting thing like ` ' ` ` & # x27 ; ` ` `` ` ` & quot ; ` , meaning content _appears_ rendered , precise string , therefore checksum , rehydration take place . understand , reading code , react _always_ sanitises html content generating markup ( server client ) , 's fact injected dom , ` innerhtml ` n't re-sanitise thing like quote . n't technically need , discussed issue changed particular problem would disappear , may well n't hit yet . , real issue needing content byte-for-byte equivalent , rather functionally ( structurally ) equivalent . # # # interim solution moment , 've realised easier boot app entirety , wait async process take place , effectively reboot app using ` reactdomserver.rendertostring ` splice markup place . side-effects relying ` componentdidmount ` ( like cs injection meta tag head ) affect dom _outside_ react app preserved , markup checksum react-rendered html guaranteed correct . work , ideal . still understand component running two different `` mode '' , 'll run different lifecycle method , one generates final snapshot . think add unreasonable conceptual burden , much way server-rendering . 's really problem see status quo started looking problem first place . snapshot/server rendering requires much overhead , people wo n't , exactly 're . create-react-app n't include none option simple enough broad enough applicability . official warn agains combining server-rendering code-splitting . server-rendering boilerplate include fairly specific webpack hack provide environment server client , etc . result people ever client-rendering . serve blank page & render everything client-side . code splitting service worker caching offer useful advantage imo 's enough . snapshot rendering _could_ solution , offer big benefit small change application code . # # # dream solution architecturally , 'd like arbitrary react app launched one browser , executed ready ( async resource complete ) , snapshotted ( serialised html ) , resumed another browser . snapshot would generated cached edge cdn deployment , periodically depending often content change . practically , think would require two change react 's architecture : first weaker check rehydration\u2014some fingerprint hash escaped html . method snapshot indicate react reuse much existing dom possible . second would part tree rehydrated rather whole thing . component side-effect , say ` componentdidmount ` , snapshotted html would include result side-effect . app boot client side , render method generate initial behaviour . moment react would replace 's 's rendered , might preferable leave dom unchanged first render , wire thing later . n't know exact specific solution , know enough internals react become , wanted start discussion see interest react team & wider community use case direction . look forward hearing thought !",
        "title_stopwords_removal_lemmatization": "permissive rehydration logic"
    },
    {
        "issue_id": 242536503,
        "title": "[Feature Suggestion] Publish react also as ES2015 code",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2017-07-12T22:38:53Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\n*feature*\r\n\r\n**What is the current behavior?**\r\nReact is published to NPM only as ES5 code\r\n\r\n**What is the expected behavior?**\r\nPublish react also in es2015, with es2015 entry point in the package.json\r\n\r\nMotivation: Performance. leverage the targeted client native ES features \r\nIts part of the angular 4 package format\r\nhttps://docs.google.com/document/d/1CZC2rcpxffTDfRDs6p1cfbmKNLA6x5O-NtkJglDaBVs/edit#heading=h.jt2mvxhyrshv\r\nhttp://2ality.com/2017/04/setting-up-multi-platform-packages.html",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**  *feature*    **What is the current behavior?**  React is published to NPM only as ES5 code    **What is the expected behavior?**  Publish react also in es2015, with es2015 entry point in the package.json    Motivation: Performance. leverage the targeted client native ES features   Its part of the angular 4 package format  https://docs.google.com/document/d/1CZC2rcpxffTDfRDs6p1cfbmKNLA6x5O-NtkJglDaBVs/edit#heading=h.jt2mvxhyrshv  http://2ality.com/2017/04/setting-up-multi-platform-packages.html",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**  *feature*    **What is the current behavior?**  React is published to NPM only as ES5 code    **What is the expected behavior?**  Publish react also in es2015, with es2015 entry point in the package.json    Motivation: Performance. leverage the targeted client native ES features   Its part of the angular 4 package format  https://docs.google.com/document/d/1CZC2rcpxffTDfRDs6p1cfbmKNLA6x5O-NtkJglDaBVs/edit#heading=h.jt2mvxhyrshv  http://2ality.com/2017/04/setting-up-multi-platform-packages.html",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** *feature* **What is the current behavior?** React is published to NPM only as ES5 code **What is the expected behavior?** Publish react also in es2015, with es2015 entry point in the package.json Motivation: Performance. leverage the targeted client native ES features Its part of the angular 4 package format  ",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * * feature * * * current behavior ? * * react published npm es5 code * * expected behavior ? * * publish react also es2015 , es2015 entry point package.json motivation : performance . leverage targeted client native e feature part angular 4 package format",
        "title_stopwords_removal_lemmatization": "[ feature suggestion ] publish react also es2015 code"
    },
    {
        "issue_id": 240231767,
        "title": "Add default property for ES2015 modules",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2017-07-03T17:35:57Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature\r\n\r\n**What is the current behavior?**\r\n\r\n```js\r\nimport * as React from \"react\"\r\n```\r\n\r\nThe above code causes deprecation warnings because of how `_interopRequireWildcard` works in babel:\r\n\r\n```\r\nWarning: Accessing PropTypes via the main React package is deprecated, and will be removed in  React v16.0. Use the latest available v15.* prop-types package from npm instead. For info on usage, compatibility, migration and more, see https://fb.me/prop-types-docs\r\nWarning: Accessing createClass via the main React package is deprecated, and will be removed in React v16.0. Use a plain JavaScript class instead. If you're not yet ready to migrate, create-react-class v15.* is available on npm as a temporary, drop-in replacement. For more info see https://fb.me/react-create-class\r\n```\r\n\r\nYou can use this with babel:\r\n\r\n```js\r\nimport React from \"react\"\r\n```\r\n\r\nThis works because of synthetic import support in babel, using `__esModule`.\r\n\r\nIf you use TypeScript the above does not work unless you set `allowSyntheticDefaultImports` to true in tsconfig.json.\r\n\r\nMost packages work fine with `* as Module`, but React's deprecated warnings get tripped because babel copies the object with `_interopRequireWildcard`.\r\n\r\n**What is the expected behavior?**\r\n\r\n```js\r\nimport React from \"react\"\r\n```\r\n\r\nThe above should work without needing to set `allowSyntheticDefaultImports`. This can be done by providing a `default` property.\r\n\r\nPossibly by adding this to `src/isomorphic/ReactEntry.js`:\r\n\r\n```js\r\nReact.default = React\r\n```\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 15.6.1\r\nChrome 59\r\nOS X 10.12.5\r\nNode 8.1.2\r\n\r\nDoes not work in previous versions since deprecation warning was added.",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**    Feature    **What is the current behavior?**    ```js  import * as React from \"react\"  ```    The above code causes deprecation warnings because of how `_interopRequireWildcard` works in babel:    ```  Warning: Accessing PropTypes via the main React package is deprecated, and will be removed in  React v16.0. Use the latest available v15.* prop-types package from npm instead. For info on usage, compatibility, migration and more, see https://fb.me/prop-types-docs  Warning: Accessing createClass via the main React package is deprecated, and will be removed in React v16.0. Use a plain JavaScript class instead. If you're not yet ready to migrate, create-react-class v15.* is available on npm as a temporary, drop-in replacement. For more info see https://fb.me/react-create-class  ```    You can use this with babel:    ```js  import React from \"react\"  ```    This works because of synthetic import support in babel, using `__esModule`.    If you use TypeScript the above does not work unless you set `allowSyntheticDefaultImports` to true in tsconfig.json.    Most packages work fine with `* as Module`, but React's deprecated warnings get tripped because babel copies the object with `_interopRequireWildcard`.    **What is the expected behavior?**    ```js  import React from \"react\"  ```    The above should work without needing to set `allowSyntheticDefaultImports`. This can be done by providing a `default` property.    Possibly by adding this to `src/isomorphic/ReactEntry.js`:    ```js  React.default = React  ```    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    React 15.6.1  Chrome 59  OS X 10.12.5  Node 8.1.2    Does not work in previous versions since deprecation warning was added.",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**    Feature    **What is the current behavior?**        The above code causes deprecation warnings because of how `_interopRequireWildcard` works in babel:        You can use this with babel:        This works because of synthetic import support in babel, using `__esModule`.    If you use TypeScript the above does not work unless you set `allowSyntheticDefaultImports` to true in tsconfig.json.    Most packages work fine with `* as Module`, but React's deprecated warnings get tripped because babel copies the object with `_interopRequireWildcard`.    **What is the expected behavior?**        The above should work without needing to set `allowSyntheticDefaultImports`. This can be done by providing a `default` property.    Possibly by adding this to `src/isomorphic/ReactEntry.js`:        **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    React 15.6.1  Chrome 59  OS X 10.12.5  Node 8.1.2    Does not work in previous versions since deprecation warning was added.",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** Feature **What is the current behavior?** The above code causes deprecation warnings because of how `_interopRequireWildcard` works in babel: You can use this with babel: This works because of synthetic import support in babel, using `__esModule`. If you use TypeScript the above does not work unless you set `allowSyntheticDefaultImports` to true in tsconfig.json. Most packages work fine with `* as Module`, but React's deprecated warnings get tripped because babel copies the object with `_interopRequireWildcard`. **What is the expected behavior?** The above should work without needing to set `allowSyntheticDefaultImports`. This can be done by providing a `default` property. Possibly by adding this to `src/isomorphic/ReactEntry.js`: **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** React 15.6.1 Chrome 59 OS X 10.12.5 Node 8.1.2 Does not work in previous versions since deprecation warning was added.",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * feature * * current behavior ? * * code cause deprecation warning ` _interoprequirewildcard ` work babel : use babel : work synthetic import support babel , using ` __esmodule ` . use typescript work unless set ` allowsyntheticdefaultimports ` true tsconfig.json . package work fine ` * module ` , react 's deprecated warning get tripped babel copy object ` _interoprequirewildcard ` . * * expected behavior ? * * work without needing set ` allowsyntheticdefaultimports ` . done providing ` default ` property . possibly adding ` src/isomorphic/reactentry.js ` : * * version react , browser / o affected issue ? work previous version react ? * * react 15.6.1 chrome 59 o x 10.12.5 node 8.1.2 work previous version since deprecation warning added .",
        "title_stopwords_removal_lemmatization": "add default property es2015 module"
    },
    {
        "issue_id": 239916842,
        "title": "Nicer Formatting of SSR Validation",
        "label": [
            "Type: Feature Request",
            "Component: Server Rendering",
            "good first issue",
            "Difficulty: challenging",
            "React Core Team"
        ],
        "date": "2017-07-01T00:58:07Z",
        "status": "closed",
        "description": "The new validation in #10026 only issues a warn for the first difference found in a HTML hydration scenario. Ideally it should instead queue up all the differences and then at the end (commit) issue a single warning with a nicely formatted diff.\r\n\r\n1) Instead of warning add [these warn calls](https://github.com/facebook/react/blob/8d61138186e79e1e719786c8c76186e64b603bd5/src/renderers/dom/fiber/ReactDOMFiberComponent.js#L74-L115) to a global buffer (array, map, set, whatever).\r\n\r\n2) Inside [prepareForCommit](https://github.com/facebook/react/blob/8d61138186e79e1e719786c8c76186e64b603bd5/src/renderers/dom/fiber/ReactDOMFiberEntry.js#L190), issue all the currently batched up warnings as a single message. \r\n\r\n3) Format that message in terms of a JSX diff in a nicely formatted way. With only the relevant nodes (parent and child with changes). Irrelevant child content can be replaced with ellipsis. E.g.\r\n\r\n```\r\n...\r\n<div className=\"unchanged\">\r\n- <div className=\"foo\" />\r\n+ <div className=\"bar\">\u2026</div>\r\n+ <span />\r\n</div>\r\n...\r\n<div className=\"another_unchanged\">\r\n- <span />\r\n</div>\r\n...\r\n```\r\n\r\nThis strategy won't yield perfect results because if we're asynchronously hydrating, and it gets interrupted by another tree, we'll flush a warning before the actual hydrating particular tree is flushed. So we might show a partial diff in that case. This is probably. It's just a warning.",
        "remove_template_description": "The new validation in #10026 only issues a warn for the first difference found in a HTML hydration scenario. Ideally it should instead queue up all the differences and then at the end (commit) issue a single warning with a nicely formatted diff.    1) Instead of warning add [these warn calls](https://github.com/facebook/react/blob/8d61138186e79e1e719786c8c76186e64b603bd5/src/renderers/dom/fiber/ReactDOMFiberComponent.js#L74-L115) to a global buffer (array, map, set, whatever).    2) Inside [prepareForCommit](https://github.com/facebook/react/blob/8d61138186e79e1e719786c8c76186e64b603bd5/src/renderers/dom/fiber/ReactDOMFiberEntry.js#L190), issue all the currently batched up warnings as a single message.     3) Format that message in terms of a JSX diff in a nicely formatted way. With only the relevant nodes (parent and child with changes). Irrelevant child content can be replaced with ellipsis. E.g.    ```  ...  <div className=\"unchanged\">  - <div className=\"foo\" />  + <div className=\"bar\">\u2026</div>  + <span />  </div>  ...  <div className=\"another_unchanged\">  - <span />  </div>  ...  ```    This strategy won't yield perfect results because if we're asynchronously hydrating, and it gets interrupted by another tree, we'll flush a warning before the actual hydrating particular tree is flushed. So we might show a partial diff in that case. This is probably. It's just a warning.",
        "human_words": "The new validation in #10026 only issues a warn for the first difference found in a HTML hydration scenario. Ideally it should instead queue up all the differences and then at the end (commit) issue a single warning with a nicely formatted diff.    1) Instead of warning add [these warn calls](https://github.com/facebook/react/blob/8d61138186e79e1e719786c8c76186e64b603bd5/src/renderers/dom/fiber/ReactDOMFiberComponent.js#L74-L115) to a global buffer (array, map, set, whatever).    2) Inside [prepareForCommit](https://github.com/facebook/react/blob/8d61138186e79e1e719786c8c76186e64b603bd5/src/renderers/dom/fiber/ReactDOMFiberEntry.js#L190), issue all the currently batched up warnings as a single message.     3) Format that message in terms of a JSX diff in a nicely formatted way. With only the relevant nodes (parent and child with changes). Irrelevant child content can be replaced with ellipsis. E.g.        This strategy won't yield perfect results because if we're asynchronously hydrating, and it gets interrupted by another tree, we'll flush a warning before the actual hydrating particular tree is flushed. So we might show a partial diff in that case. This is probably. It's just a warning.",
        "human_words_regrex": "The new validation in #10026 only issues a warn for the first difference found in a HTML hydration scenario. Ideally it should instead queue up all the differences and then at the end (commit) issue a single warning with a nicely formatted diff. 1) Instead of warning add  to a global buffer (array, map, set, whatever). 2) Inside , issue all the currently batched up warnings as a single message. 3) Format that message in terms of a JSX diff in a nicely formatted way. With only the relevant nodes (parent and child with changes). Irrelevant child content can be replaced with ellipsis. E.g. This strategy won't yield perfect results because if we're asynchronously hydrating, and it gets interrupted by another tree, we'll flush a warning before the actual hydrating particular tree is flushed. So we might show a partial diff in that case. This is probably. It's just a warning.",
        "human_words_stopwords_removal_lemmatization": "new validation # 10026 issue warn first difference found html hydration scenario . ideally instead queue difference end ( commit ) issue single warning nicely formatted diff . 1 ) instead warning add global buffer ( array , map , set , whatever ) . 2 ) inside , issue currently batched warning single message . 3 ) format message term jsx diff nicely formatted way . relevant node ( parent child change ) . irrelevant child content replaced ellipsis . e.g . strategy wo n't yield perfect result 're asynchronously hydrating , get interrupted another tree , 'll flush warning actual hydrating particular tree flushed . might show partial diff case . probably . 's warning .",
        "title_stopwords_removal_lemmatization": "nicer formatting ssr validation"
    },
    {
        "issue_id": 239417321,
        "title": "Feature request: Warnings hook",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2017-06-29T09:26:15Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\nI want to request a *feature*.\r\n\r\n**What is the current behavior?**\r\n- Warning code is hardcoded to call `fbjs/lib/warning`. This makes it hard to integrate warnings with tools.\r\n\r\n- As a workaround we could use webpack\u2019s `resolve.alias` to alias `fbjs/lib/warning` into our fork which displays it on-screen.\r\n\r\n   - This use case is similar to https://github.com/facebook/react/pull/7360.\r\n\r\n- Another use case is to integrate React warnings with our testing infrastructure. This helps us to better see which warning belongs to which test.\r\n\r\n    ![image](https://user-images.githubusercontent.com/193136/27680560-587f934a-5ce6-11e7-985b-a1a2042d831a.png)\r\n\r\n**What is the expected behavior?**\r\n- React allows library user to override the default warnings behavior.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n- The workaround works in React 15 and should still work in React 16, as the flat bundles does `var warning = require('fbjs/lib/warning')` which means we can still hook into it for now.\r\n\r\n- This probably breaks when the flat bundles stopped doing `var warning = require('fbjs/lib/warning')`.",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**  I want to request a *feature*.    **What is the current behavior?**  - Warning code is hardcoded to call `fbjs/lib/warning`. This makes it hard to integrate warnings with tools.    - As a workaround we could use webpack\u2019s `resolve.alias` to alias `fbjs/lib/warning` into our fork which displays it on-screen.       - This use case is similar to https://github.com/facebook/react/pull/7360.    - Another use case is to integrate React warnings with our testing infrastructure. This helps us to better see which warning belongs to which test.        ![image](https://user-images.githubusercontent.com/193136/27680560-587f934a-5ce6-11e7-985b-a1a2042d831a.png)    **What is the expected behavior?**  - React allows library user to override the default warnings behavior.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  - The workaround works in React 15 and should still work in React 16, as the flat bundles does `var warning = require('fbjs/lib/warning')` which means we can still hook into it for now.    - This probably breaks when the flat bundles stopped doing `var warning = require('fbjs/lib/warning')`.",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**  I want to request a *feature*.    **What is the current behavior?**  - Warning code is hardcoded to call `fbjs/lib/warning`. This makes it hard to integrate warnings with tools.    - As a workaround we could use webpack\u2019s `resolve.alias` to alias `fbjs/lib/warning` into our fork which displays it on-screen.       - This use case is similar to https://github.com/facebook/react/pull/7360.    - Another use case is to integrate React warnings with our testing infrastructure. This helps us to better see which warning belongs to which test.        ![image](https://user-images.githubusercontent.com/193136/27680560-587f934a-5ce6-11e7-985b-a1a2042d831a.png)    **What is the expected behavior?**  - React allows library user to override the default warnings behavior.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  - The workaround works in React 15 and should still work in React 16, as the flat bundles does `var warning = require('fbjs/lib/warning')` which means we can still hook into it for now.    - This probably breaks when the flat bundles stopped doing `var warning = require('fbjs/lib/warning')`.",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** I want to request a *feature*. **What is the current behavior?** - Warning code is hardcoded to call `fbjs/lib/warning`. This makes it hard to integrate warnings with tools. - As a workaround we could use webpack\u2019s `resolve.alias` to alias `fbjs/lib/warning` into our fork which displays it on-screen. - This use case is similar to  - Another use case is to integrate React warnings with our testing infrastructure. This helps us to better see which warning belongs to which test. ! **What is the expected behavior?** - React allows library user to override the default warnings behavior. **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** - The workaround works in React 15 and should still work in React 16, as the flat bundles does `var warning = require('fbjs/lib/warning')` which means we can still hook into it for now. - This probably breaks when the flat bundles stopped doing `var warning = require('fbjs/lib/warning')`.",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * want request * feature * . * * current behavior ? * * - warning code hardcoded call ` fbjs/lib/warning ` . make hard integrate warning tool . - workaround could use webpack \u2019 ` resolve.alias ` alias ` fbjs/lib/warning ` fork display on-screen . - use case similar - another use case integrate react warning testing infrastructure . help u better see warning belongs test . ! * * expected behavior ? * * - react allows library user override default warning behavior . * * version react , browser / o affected issue ? work previous version react ? * * - workaround work react 15 still work react 16 , flat bundle ` var warning = require ( 'fbjs/lib/warning ' ) ` mean still hook . - probably break flat bundle stopped ` var warning = require ( 'fbjs/lib/warning ' ) ` .",
        "title_stopwords_removal_lemmatization": "feature request : warning hook"
    },
    {
        "issue_id": 239299834,
        "title": "Feature request: Support server-side rendering of non-standard DOM attribute names (eg. AMP's [prop]=\"value\")",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2017-06-28T21:15:30Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\nRequest a feature\r\n\r\nI am working on project to build AMP page with React Server Side Rendering. I am having an issue to add custom attribute to built-in AMP element. In order to be able to use [amp-bind](https://www.ampproject.org/docs/reference/components/amp-bind#bindings) we need to be able to output \u201cbindings\u201d, which are special attributes of the form `[attribute]`, eg. `[slide]=\"selectedSlide\"`. \r\n\r\n```\r\n<amp-carousel \r\n    layout={layout}\r\n    height={height}\r\n    width={width}\r\n    [slide]={slide}\r\n>\r\n        ...\r\n</amp-carousel>\r\n```\r\n\r\nHere is AMP carousel example that work with [amp-bind](https://ampbyexample.com/advanced/image_galleries_with_amp-carousel/#linking-carousels-with-amp-bind).\r\n\r\n**What is the current behavior?**\r\n- Parsing error: Unexpected token [ (Fatal) \r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n- All\r\n\r\nFor more information, you can read all the discussion in this [PR](https://github.com/facebook/react/pull/7311#issuecomment-311516763).",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**  Request a feature    I am working on project to build AMP page with React Server Side Rendering. I am having an issue to add custom attribute to built-in AMP element. In order to be able to use [amp-bind](https://www.ampproject.org/docs/reference/components/amp-bind#bindings) we need to be able to output \u201cbindings\u201d, which are special attributes of the form `[attribute]`, eg. `[slide]=\"selectedSlide\"`.     ```  <amp-carousel       layout={layout}      height={height}      width={width}      [slide]={slide}  >          ...  </amp-carousel>  ```    Here is AMP carousel example that work with [amp-bind](https://ampbyexample.com/advanced/image_galleries_with_amp-carousel/#linking-carousels-with-amp-bind).    **What is the current behavior?**  - Parsing error: Unexpected token [ (Fatal)     **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  - All    For more information, you can read all the discussion in this [PR](https://github.com/facebook/react/pull/7311#issuecomment-311516763).",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**  Request a feature    I am working on project to build AMP page with React Server Side Rendering. I am having an issue to add custom attribute to built-in AMP element. In order to be able to use [amp-bind](https://www.ampproject.org/docs/reference/components/amp-bind#bindings) we need to be able to output \u201cbindings\u201d, which are special attributes of the form `[attribute]`, eg. `[slide]=\"selectedSlide\"`.         Here is AMP carousel example that work with [amp-bind](https://ampbyexample.com/advanced/image_galleries_with_amp-carousel/#linking-carousels-with-amp-bind).    **What is the current behavior?**  - Parsing error: Unexpected token [ (Fatal)     **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  - All    For more information, you can read all the discussion in this [PR](https://github.com/facebook/react/pull/7311#issuecomment-311516763).",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** Request a feature I am working on project to build AMP page with React Server Side Rendering. I am having an issue to add custom attribute to built-in AMP element. In order to be able to use  we need to be able to output \u201cbindings\u201d, which are special attributes of the form `. **What is the current behavior?** - Parsing error: Unexpected token .",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * request feature working project build amp page react server side rendering . issue add custom attribute built-in amp element . order able use need able output \u201c binding \u201d , special attribute form ` . * * current behavior ? * * - parsing error : unexpected token .",
        "title_stopwords_removal_lemmatization": "feature request : support server-side rendering non-standard dom attribute name ( eg . amp 's [ prop ] = '' value '' )"
    },
    {
        "issue_id": 238751719,
        "title": "Include canary tests of community packages as part of the release process",
        "label": [
            "Component: Build Infrastructure",
            "Type: Feature Request"
        ],
        "date": "2017-06-27T06:44:09Z",
        "status": "closed",
        "description": "(cc @gaearon, from https://github.com/yannickcr/eslint-plugin-react/issues/1258#issuecomment-311211399)\r\n\r\nIn general, there's lots of little utilities that are helpful to have as standalone packages. One of them is https://unpkg.com/airbnb-prop-types@2.7.0/build/helpers/getComponentName.js, for example.\r\n\r\nIt'd be ideal for the React team to maintain this package - primarily, so that it would be guaranteed to either not break when a new React version is released, or be updated to work with the upcoming version prior to release.\r\n\r\nIn the interests of the React team not signing up to maintain all the package requests that might come in, would it be possible to make \"part of the release process\" be \"ensure compatible versions of community packages exist\"? I'd be happy to create the above package, for example, and I know the community would love a guarantee that enzyme would always work with any official React version release, prior to the release.",
        "remove_template_description": "(cc @gaearon, from https://github.com/yannickcr/eslint-plugin-react/issues/1258#issuecomment-311211399)    In general, there's lots of little utilities that are helpful to have as standalone packages. One of them is https://unpkg.com/airbnb-prop-types@2.7.0/build/helpers/getComponentName.js, for example.    It'd be ideal for the React team to maintain this package - primarily, so that it would be guaranteed to either not break when a new React version is released, or be updated to work with the upcoming version prior to release.    In the interests of the React team not signing up to maintain all the package requests that might come in, would it be possible to make \"part of the release process\" be \"ensure compatible versions of community packages exist\"? I'd be happy to create the above package, for example, and I know the community would love a guarantee that enzyme would always work with any official React version release, prior to the release.",
        "human_words": "(cc @gaearon, from https://github.com/yannickcr/eslint-plugin-react/issues/1258#issuecomment-311211399)    In general, there's lots of little utilities that are helpful to have as standalone packages. One of them is https://unpkg.com/airbnb-prop-types@2.7.0/build/helpers/getComponentName.js, for example.    It'd be ideal for the React team to maintain this package - primarily, so that it would be guaranteed to either not break when a new React version is released, or be updated to work with the upcoming version prior to release.    In the interests of the React team not signing up to maintain all the package requests that might come in, would it be possible to make \"part of the release process\" be \"ensure compatible versions of community packages exist\"? I'd be happy to create the above package, for example, and I know the community would love a guarantee that enzyme would always work with any official React version release, prior to the release.",
        "human_words_regrex": "(cc @gaearon, from  In general, there's lots of little utilities that are helpful to have as standalone packages. One of them is  for example. It'd be ideal for the React team to maintain this package - primarily, so that it would be guaranteed to either not break when a new React version is released, or be updated to work with the upcoming version prior to release. In the interests of the React team not signing up to maintain all the package requests that might come in, would it be possible to make \"part of the release process\" be \"ensure compatible versions of community packages exist\"? I'd be happy to create the above package, for example, and I know the community would love a guarantee that enzyme would always work with any official React version release, prior to the release.",
        "human_words_stopwords_removal_lemmatization": "( cc @ gaearon , general , 's lot little utility helpful standalone package . one example . 'd ideal react team maintain package - primarily , would guaranteed either break new react version released , updated work upcoming version prior release . interest react team signing maintain package request might come , would possible make `` part release process '' `` ensure compatible version community package exist '' ? 'd happy create package , example , know community would love guarantee enzyme would always work official react version release , prior release .",
        "title_stopwords_removal_lemmatization": "include canary test community package part release process"
    },
    {
        "issue_id": 237665439,
        "title": "Feature request: Add a \"module\" entry in package.json to export ES2015 version of React",
        "label": [
            "Component: Build Infrastructure",
            "Type: Feature Request"
        ],
        "date": "2017-06-21T21:09:32Z",
        "status": "open",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\nRequest a feature\r\n\r\n**What is the current behavior?**\r\nReact ecosystem was promoting ES6 classes and modules since 2014 and many packages like react-router, redux and so on, have an \"es\" folder in the npm package with source code in ES2015 modules. Unless I am missing something, it is strange that React itself does not offer that option.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/84v837e9/).**\r\nInstall react and try to import it in a browser with native modules enabled.\r\n\r\n**What is the expected behavior?**\r\nHave an \"es\" folder in the npm package with ES2015 modules source code, like most React ecosystem projects do. Allow to import react from ES2015 native modules to make developer workflow more simple.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nAll versions",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**  Request a feature    **What is the current behavior?**  React ecosystem was promoting ES6 classes and modules since 2014 and many packages like react-router, redux and so on, have an \"es\" folder in the npm package with source code in ES2015 modules. Unless I am missing something, it is strange that React itself does not offer that option.    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/84v837e9/).**  Install react and try to import it in a browser with native modules enabled.    **What is the expected behavior?**  Have an \"es\" folder in the npm package with ES2015 modules source code, like most React ecosystem projects do. Allow to import react from ES2015 native modules to make developer workflow more simple.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  All versions",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**  Request a feature    **What is the current behavior?**  React ecosystem was promoting ES6 classes and modules since 2014 and many packages like react-router, redux and so on, have an \"es\" folder in the npm package with source code in ES2015 modules. Unless I am missing something, it is strange that React itself does not offer that option.    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/84v837e9/).**  Install react and try to import it in a browser with native modules enabled.    **What is the expected behavior?**  Have an \"es\" folder in the npm package with ES2015 modules source code, like most React ecosystem projects do. Allow to import react from ES2015 native modules to make developer workflow more simple.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  All versions",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** Request a feature **What is the current behavior?** React ecosystem was promoting ES6 classes and modules since 2014 and many packages like react-router, redux and so on, have an \"es\" folder in the npm package with source code in ES2015 modules. Unless I am missing something, it is strange that React itself does not offer that option. **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via  or similar (template:  Install react and try to import it in a browser with native modules enabled. **What is the expected behavior?** Have an \"es\" folder in the npm package with ES2015 modules source code, like most React ecosystem projects do. Allow to import react from ES2015 native modules to make developer workflow more simple. **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** All versions",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * request feature * * current behavior ? * * react ecosystem promoting es6 class module since 2014 many package like react-router , redux , `` e '' folder npm package source code es2015 module . unless missing something , strange react offer option . * * current behavior bug , please provide step reproduce possible minimal demo problem via similar ( template : install react try import browser native module enabled . * * expected behavior ? * * `` e '' folder npm package es2015 module source code , like react ecosystem project . allow import react es2015 native module make developer workflow simple . * * version react , browser / o affected issue ? work previous version react ? * * version",
        "title_stopwords_removal_lemmatization": "feature request : add `` module '' entry package.json export es2015 version react"
    },
    {
        "issue_id": 237657832,
        "title": "Feature request: renderTypes",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2017-06-21T20:40:15Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\nRequest a feature\r\n\r\nPer some discussion today with @tomocchino and @thejameskyle, I'd like a non-Flow mechanism to annotate what type(s) of elements a component expects to render.\r\n\r\nHere's some examples, with Flow types for comparison (that I realize may not be currently checked in Flow, yet):\r\n```jsx\r\nfunction Foo({ yes }){\r\n  return yes ? <Bar /> : <div />;\r\n}\r\nFoo.renderTypes = [Bar, 'div'];\r\n\r\n\r\nclass Bar extends React.Component {\r\n  static renderTypes = [Button];\r\n\r\n  render() {\r\n    return <Button />;\r\n  }\r\n}\r\n```\r\n```jsx\r\nfunction Foo({ yes }): React.Element<Bar | 'div'> {\r\n  return yes ? <Bar /> : <div />;\r\n}\r\n\r\nclass Bar extends React.Component {\r\n  render(): React.Element<Button> {\r\n    return <Button />;\r\n  }\r\n}\r\n```\r\n\r\nInside @Airbnb, we have lots of use cases where we have container components in a separate package - say, a `<ButtonRow>`, and we have intentionally restrictive propTypes on its `children` prop, to only allow a `Button` (also in the same package). However, in an app that consumes this component library package, a dev may want to create a `<SpecialProductButton />` that in turn renders a `<Button>` - however, they're unable to pass it into `ButtonRow` (our propType warnings fail tests), even though conceptually it should be permitted.\r\n\r\nHaving `.renderTypes` would allow us to widen our `children` propType to allow for either a `<Button>`, or *anything that renders a `<Button>`*, which helps us maintain separation of concerns (the package doesn't have to know about `<SpecialProductButton>` to accept it) as well as maintain strictness (the package doesn't have to allow any wacky element inside `<ButtonRow>`).\r\n\r\nI imagine the implementation to be:\r\n 1. when render() is called or an SFC is invoked, (in async rendering, it'd be when the component resolves, i suppose)\r\n 1. in development only and if `.renderTypes` exists on the component\r\n 1. evaluate the equivalent of [`elementType`](https://www.npmjs.com/package/airbnb-prop-types)`(...Component.renderTypes)({ children: renderedValue }, 'children', ...)`,\r\n 1. just like propTypes, log the error if one is returned\r\n\r\n(cc @spicyj)",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**  Request a feature    Per some discussion today with @tomocchino and @thejameskyle, I'd like a non-Flow mechanism to annotate what type(s) of elements a component expects to render.    Here's some examples, with Flow types for comparison (that I realize may not be currently checked in Flow, yet):  ```jsx  function Foo({ yes }){    return yes ? <Bar /> : <div />;  }  Foo.renderTypes = [Bar, 'div'];      class Bar extends React.Component {    static renderTypes = [Button];      render() {      return <Button />;    }  }  ```  ```jsx  function Foo({ yes }): React.Element<Bar | 'div'> {    return yes ? <Bar /> : <div />;  }    class Bar extends React.Component {    render(): React.Element<Button> {      return <Button />;    }  }  ```    Inside @Airbnb, we have lots of use cases where we have container components in a separate package - say, a `<ButtonRow>`, and we have intentionally restrictive propTypes on its `children` prop, to only allow a `Button` (also in the same package). However, in an app that consumes this component library package, a dev may want to create a `<SpecialProductButton />` that in turn renders a `<Button>` - however, they're unable to pass it into `ButtonRow` (our propType warnings fail tests), even though conceptually it should be permitted.    Having `.renderTypes` would allow us to widen our `children` propType to allow for either a `<Button>`, or *anything that renders a `<Button>`*, which helps us maintain separation of concerns (the package doesn't have to know about `<SpecialProductButton>` to accept it) as well as maintain strictness (the package doesn't have to allow any wacky element inside `<ButtonRow>`).    I imagine the implementation to be:   1. when render() is called or an SFC is invoked, (in async rendering, it'd be when the component resolves, i suppose)   1. in development only and if `.renderTypes` exists on the component   1. evaluate the equivalent of [`elementType`](https://www.npmjs.com/package/airbnb-prop-types)`(...Component.renderTypes)({ children: renderedValue }, 'children', ...)`,   1. just like propTypes, log the error if one is returned    (cc @spicyj)",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**  Request a feature    Per some discussion today with @tomocchino and @thejameskyle, I'd like a non-Flow mechanism to annotate what type(s) of elements a component expects to render.    Here's some examples, with Flow types for comparison (that I realize may not be currently checked in Flow, yet):        Inside @Airbnb, we have lots of use cases where we have container components in a separate package - say, a `<ButtonRow>`, and we have intentionally restrictive propTypes on its `children` prop, to only allow a `Button` (also in the same package). However, in an app that consumes this component library package, a dev may want to create a `<SpecialProductButton />` that in turn renders a `<Button>` - however, they're unable to pass it into `ButtonRow` (our propType warnings fail tests), even though conceptually it should be permitted.    Having `.renderTypes` would allow us to widen our `children` propType to allow for either a `<Button>`, or *anything that renders a `<Button>`*, which helps us maintain separation of concerns (the package doesn't have to know about `<SpecialProductButton>` to accept it) as well as maintain strictness (the package doesn't have to allow any wacky element inside `<ButtonRow>`).    I imagine the implementation to be:   1. when render() is called or an SFC is invoked, (in async rendering, it'd be when the component resolves, i suppose)   1. in development only and if `.renderTypes` exists on the component   1. evaluate the equivalent of [`elementType`](https://www.npmjs.com/package/airbnb-prop-types)`(...Component.renderTypes)({ children: renderedValue }, 'children', ...)`,   1. just like propTypes, log the error if one is returned    (cc @spicyj)",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** Request a feature Per some discussion today with @tomocchino and @thejameskyle, I'd like a non-Flow mechanism to annotate what type(s) of elements a component expects to render. Here's some examples, with Flow types for comparison (that I realize may not be currently checked in Flow, yet): Inside @Airbnb, we have lots of use cases where we have container components in a separate package - say, a ``, and we have intentionally restrictive propTypes on its `children` prop, to only allow a `Button` (also in the same package). However, in an app that consumes this component library package, a dev may want to create a `` that in turn renders a `` - however, they're unable to pass it into `ButtonRow` (our propType warnings fail tests), even though conceptually it should be permitted. Having `.renderTypes` would allow us to widen our `children` propType to allow for either a ``, or *anything that renders a ``*, which helps us maintain separation of concerns (the package doesn't have to know about `` to accept it) as well as maintain strictness (the package doesn't have to allow any wacky element inside ``). I imagine the implementation to be: 1. when render() is called or an SFC is invoked, (in async rendering, it'd be when the component resolves, i suppose) 1. in development only and if `.renderTypes` exists on the component 1. evaluate the equivalent of `(...Component.renderTypes)({ children: renderedValue }, 'children', ...)`, 1. just like propTypes, log the error if one is returned (cc @spicyj)",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * request feature per discussion today @ tomocchino @ thejameskyle , 'd like non-flow mechanism annotate type ( ) element component expects render . 's example , flow type comparison ( realize may currently checked flow , yet ) : inside @ airbnb , lot use case container component separate package - say , `` , intentionally restrictive proptypes ` child ` prop , allow ` button ` ( also package ) . however , app consumes component library package , dev may want create `` turn render `` - however , 're unable pas ` buttonrow ` ( proptype warning fail test ) , even though conceptually permitted . ` .rendertypes ` would allow u widen ` child ` proptype allow either `` , * anything render `` * , help u maintain separation concern ( package n't know `` accept ) well maintain strictness ( package n't allow wacky element inside `` ) . imagine implementation : 1. render ( ) called sfc invoked , ( async rendering , 'd component resolve , suppose ) 1. development ` .rendertypes ` exists component 1. evaluate equivalent ` ( ... component.rendertypes ) ( { child : renderedvalue } , 'children ' , ... ) ` , 1. like proptypes , log error one returned ( cc @ spicyj )",
        "title_stopwords_removal_lemmatization": "feature request : rendertypes"
    },
    {
        "issue_id": 236582922,
        "title": "Set initial state to undefined",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2017-06-16T20:15:20Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\nFeature \r\n\r\n**What is the current behavior?**\r\nInitial state is null.\r\n\r\n**What is the expected behavior?**\r\nInitial state is undefined. We can manually set the state to undefined in the class, but it would make sense to be out of the box as it would allow destructuring without errors.\r\n\r\n**Version:**\r\nReact 15.6.1\r\nReact-Dom 15.6.1\r\n\r\nSorry if this has been suggested before. ",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**  Feature     **What is the current behavior?**  Initial state is null.    **What is the expected behavior?**  Initial state is undefined. We can manually set the state to undefined in the class, but it would make sense to be out of the box as it would allow destructuring without errors.    **Version:**  React 15.6.1  React-Dom 15.6.1    Sorry if this has been suggested before.",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**  Feature     **What is the current behavior?**  Initial state is null.    **What is the expected behavior?**  Initial state is undefined. We can manually set the state to undefined in the class, but it would make sense to be out of the box as it would allow destructuring without errors.    **Version:**  React 15.6.1  React-Dom 15.6.1    Sorry if this has been suggested before.",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** Feature **What is the current behavior?** Initial state is null. **What is the expected behavior?** Initial state is undefined. We can manually set the state to undefined in the class, but it would make sense to be out of the box as it would allow destructuring without errors. **Version:** React 15.6.1 React-Dom 15.6.1 Sorry if this has been suggested before.",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * feature * * current behavior ? * * initial state null . * * expected behavior ? * * initial state undefined . manually set state undefined class , would make sense box would allow destructuring without error . * * version : * * react 15.6.1 react-dom 15.6.1 sorry suggested .",
        "title_stopwords_removal_lemmatization": "set initial state undefined"
    },
    {
        "issue_id": 233017651,
        "title": "Add React.Children.find",
        "label": [
            "Type: Feature Request",
            "Component: Core Utilities"
        ],
        "date": "2017-06-01T21:35:31Z",
        "status": "closed",
        "description": "I think a `React.Children.find` method would be really useful in situations where you need to iterate over your children and find just one that satisfies a particular condition. I'm running into this situation more and more often in my React code. A few examples:\r\n\r\n- In [React Router](https://reacttraining.com/react-router), the `<Switch>` component [iterates over its children](https://github.com/ReactTraining/react-router/blob/c46e51bfd61343611ddbc173207952e980b81aec/packages/react-router/modules/Switch.js#L38-L49) to figure out which `<Route>` matches the URL.\r\n- In [a `<Select>` component we use in our training workshops](https://github.com/ReactTraining/react-subjects/blob/44614bc3c6c8ca1de813e0bd1e14f86a74a5c0fb/subjects/Select/solution.js#L24-L37), we need to iterate over the `<Option>`s to figure out which label we should show in the select box.\r\n\r\nI wonder if there would be any interest from others in seeing something like this.",
        "remove_template_description": "I think a `React.Children.find` method would be really useful in situations where you need to iterate over your children and find just one that satisfies a particular condition. I'm running into this situation more and more often in my React code. A few examples:    - In [React Router](https://reacttraining.com/react-router), the `<Switch>` component [iterates over its children](https://github.com/ReactTraining/react-router/blob/c46e51bfd61343611ddbc173207952e980b81aec/packages/react-router/modules/Switch.js#L38-L49) to figure out which `<Route>` matches the URL.  - In [a `<Select>` component we use in our training workshops](https://github.com/ReactTraining/react-subjects/blob/44614bc3c6c8ca1de813e0bd1e14f86a74a5c0fb/subjects/Select/solution.js#L24-L37), we need to iterate over the `<Option>`s to figure out which label we should show in the select box.    I wonder if there would be any interest from others in seeing something like this.",
        "human_words": "I think a `React.Children.find` method would be really useful in situations where you need to iterate over your children and find just one that satisfies a particular condition. I'm running into this situation more and more often in my React code. A few examples:    - In [React Router](https://reacttraining.com/react-router), the `<Switch>` component [iterates over its children](https://github.com/ReactTraining/react-router/blob/c46e51bfd61343611ddbc173207952e980b81aec/packages/react-router/modules/Switch.js#L38-L49) to figure out which `<Route>` matches the URL.  - In [a `<Select>` component we use in our training workshops](https://github.com/ReactTraining/react-subjects/blob/44614bc3c6c8ca1de813e0bd1e14f86a74a5c0fb/subjects/Select/solution.js#L24-L37), we need to iterate over the `<Option>`s to figure out which label we should show in the select box.    I wonder if there would be any interest from others in seeing something like this.",
        "human_words_regrex": "I think a `React.Children.find` method would be really useful in situations where you need to iterate over your children and find just one that satisfies a particular condition. I'm running into this situation more and more often in my React code. A few examples: - In , the `` component  to figure out which `` matches the URL. - In , we need to iterate over the ``s to figure out which label we should show in the select box. I wonder if there would be any interest from others in seeing something like this.",
        "human_words_stopwords_removal_lemmatization": "think ` react.children.find ` method would really useful situation need iterate child find one satisfies particular condition . 'm running situation often react code . example : - , `` component figure `` match url . - , need iterate `` figure label show select box . wonder would interest others seeing something like .",
        "title_stopwords_removal_lemmatization": "add react.children.find"
    },
    {
        "issue_id": 226766021,
        "title": "Warn when `static propTypes/static defaultProps` in ES6 class is a function",
        "label": [
            "Type: Feature Request",
            "Component: Core Utilities",
            "Resolution: Stale"
        ],
        "date": "2017-05-06T12:20:06Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\n```\r\nclass TestWrongPropTypes extends Component {\r\n    static propTypes() {\r\n        return {\r\n            children: PropTypes.string,\r\n            missing: PropTypes.string.isRequired\r\n        };\r\n    }\r\n\r\n    static defaultProps() {\r\n        return { children: 'Default props via static function' };\r\n    }\r\n\r\n    render() {\r\n        return <p>{this.props.children}</p>;\r\n    }\r\n}\r\n```\r\n\r\nIn this example React will silently skip `propTypes` checking and default props setting for `TestWrongPropTypes` component.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/84v837e9/).**\r\nhttps://jsbin.com/jidupehebu/edit?js,console\r\nhttps://jsfiddle.net/84v837e9/30/\r\n\r\n**What is the expected behavior?**\r\nI know that in order to work, propTypes definition should be `static get propTypes = {...}` or `TestWrongPropTypes.propTypes = {...}`. But I'd like to have warning like \"propTypes/defaultProps is function but should be either property or getter\" to prevent such errors.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nDiscovered in React 15.X, but probably the same behavior will be also in earlier versions.",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**  Bug    **What is the current behavior?**  ```  class TestWrongPropTypes extends Component {      static propTypes() {          return {              children: PropTypes.string,              missing: PropTypes.string.isRequired          };      }        static defaultProps() {          return { children: 'Default props via static function' };      }        render() {          return <p>{this.props.children}</p>;      }  }  ```    In this example React will silently skip `propTypes` checking and default props setting for `TestWrongPropTypes` component.    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/84v837e9/).**  https://jsbin.com/jidupehebu/edit?js,console  https://jsfiddle.net/84v837e9/30/    **What is the expected behavior?**  I know that in order to work, propTypes definition should be `static get propTypes = {...}` or `TestWrongPropTypes.propTypes = {...}`. But I'd like to have warning like \"propTypes/defaultProps is function but should be either property or getter\" to prevent such errors.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  Discovered in React 15.X, but probably the same behavior will be also in earlier versions.",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**  Bug    **What is the current behavior?**      In this example React will silently skip `propTypes` checking and default props setting for `TestWrongPropTypes` component.    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/84v837e9/).**  https://jsbin.com/jidupehebu/edit?js,console  https://jsfiddle.net/84v837e9/30/    **What is the expected behavior?**  I know that in order to work, propTypes definition should be `static get propTypes = {...}` or `TestWrongPropTypes.propTypes = {...}`. But I'd like to have warning like \"propTypes/defaultProps is function but should be either property or getter\" to prevent such errors.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  Discovered in React 15.X, but probably the same behavior will be also in earlier versions.",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** Bug **What is the current behavior?** In this example React will silently skip `propTypes` checking and default props setting for `TestWrongPropTypes` component. **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via  or similar (template:    **What is the expected behavior?** I know that in order to work, propTypes definition should be `static get propTypes = {...}` or `TestWrongPropTypes.propTypes = {...}`. But I'd like to have warning like \"propTypes/defaultProps is function but should be either property or getter\" to prevent such errors. **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** Discovered in React 15.X, but probably the same behavior will be also in earlier versions.",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * bug * * current behavior ? * * example react silently skip ` proptypes ` checking default prop setting ` testwrongproptypes ` component . * * current behavior bug , please provide step reproduce possible minimal demo problem via similar ( template : * * expected behavior ? * * know order work , proptypes definition ` static get proptypes = { ... } ` ` testwrongproptypes.proptypes = { ... } ` . 'd like warning like `` proptypes/defaultprops function either property getter '' prevent error . * * version react , browser / o affected issue ? work previous version react ? * * discovered react 15.x , probably behavior also earlier version .",
        "title_stopwords_removal_lemmatization": "warn ` static proptypes/static defaultprops ` es6 class function"
    },
    {
        "issue_id": 225263316,
        "title": "Warn when PureComponent renders impure ones as its children",
        "label": [
            "Type: Feature Request",
            "Component: Core Utilities",
            "Resolution: Stale"
        ],
        "date": "2017-04-29T15:14:59Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\nfeature\r\n\r\n**What is the current behavior?**\r\nWhen a PureComponent renders an impure one as its child, no warning in console or devtool\r\n\r\n**What is the expected behavior?**\r\nIt could be better if we get a warning message for such cases\r\n\r\nThis may be related to https://github.com/facebook/react/pull/9240 since React now disallow PureComponent to have a custom `shouldComponentUpdate` implement, so a \"pure\" component with customized and more efficient `shouldComponentUpdate` method must inherit from `Component` base class and add a `isPureReactComponent` property themselves in order to prevent the warning message appear\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n15.5.4\r\n",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**  feature    **What is the current behavior?**  When a PureComponent renders an impure one as its child, no warning in console or devtool    **What is the expected behavior?**  It could be better if we get a warning message for such cases    This may be related to https://github.com/facebook/react/pull/9240 since React now disallow PureComponent to have a custom `shouldComponentUpdate` implement, so a \"pure\" component with customized and more efficient `shouldComponentUpdate` method must inherit from `Component` base class and add a `isPureReactComponent` property themselves in order to prevent the warning message appear    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  15.5.4",
        "human_words": "**Do you want to request a *feature* or report a *bug*?**  feature    **What is the current behavior?**  When a PureComponent renders an impure one as its child, no warning in console or devtool    **What is the expected behavior?**  It could be better if we get a warning message for such cases    This may be related to https://github.com/facebook/react/pull/9240 since React now disallow PureComponent to have a custom `shouldComponentUpdate` implement, so a \"pure\" component with customized and more efficient `shouldComponentUpdate` method must inherit from `Component` base class and add a `isPureReactComponent` property themselves in order to prevent the warning message appear    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  15.5.4",
        "human_words_regrex": "**Do you want to request a *feature* or report a *bug*?** feature **What is the current behavior?** When a PureComponent renders an impure one as its child, no warning in console or devtool **What is the expected behavior?** It could be better if we get a warning message for such cases This may be related to  since React now disallow PureComponent to have a custom `shouldComponentUpdate` implement, so a \"pure\" component with customized and more efficient `shouldComponentUpdate` method must inherit from `Component` base class and add a `isPureReactComponent` property themselves in order to prevent the warning message appear **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** 15.5.4",
        "human_words_stopwords_removal_lemmatization": "* * want request * feature * report * bug * ? * * feature * * current behavior ? * * purecomponent render impure one child , warning console devtool * * expected behavior ? * * could better get warning message case may related since react disallow purecomponent custom ` shouldcomponentupdate ` implement , `` pure '' component customized efficient ` shouldcomponentupdate ` method must inherit ` component ` base class add ` ispurereactcomponent ` property order prevent warning message appear * * version react , browser / o affected issue ? work previous version react ? * * 15.5.4",
        "title_stopwords_removal_lemmatization": "warn purecomponent render impure one child"
    },
    {
        "issue_id": 223673508,
        "title": "[RFC] Add traversal utility to ReactTestUtils matching toTree shape",
        "label": [
            "Type: Feature Request",
            "Component: Test Utils",
            "Resolution: Stale"
        ],
        "date": "2017-04-23T22:49:34Z",
        "status": "closed",
        "description": "### Problem\r\n\r\nThe `ReactTestRenderer` now supports a new API, [`toTree`](https://github.com/facebook/react/blob/master/src/renderers/testing/ReactTestRendererFiber.js#L350-L355), which returns an easily traversed tree representing the internal state of the instance and its rendered nodes.\r\n\r\nThe existing solution for this in `TestUtils` is `findAllInRenderedTree` which traverses the root and lets you provide a test function it will call to reduce a tree based on a predicate. The predicate function is passed the public instance for the node.\r\n\r\nThe issue with that is that it makes the predicate function polymorphic and requires every consuming utility to check if it's being passed a component instance or a DOM node. \r\n\r\n\r\n### Solution\r\n\r\nI propose that we implement a new API similar to `findAllInRendererdTree` that calls the predicate function with the result of calling `toTree` on the internal instance instead of the public instance. This would mean:\r\n\r\n* the predicate function will always be called with the same data structure (a tree node)\r\n* third-party traversal utilities can be shared between `ReactTestRenderer` and `ReactTestUtils`, since they would operate on the same tree structure\r\n* You could actually assert on functional components, which currently have no instance and just call the predicate with `null`\r\n\r\nThis new API could just be a pure traversal utility, leaving it up to the consumer to accumulate results.\r\n\r\n```js\r\nimport { renderIntoDocument, traverseTree } from 'react-dom/test-utils';\r\nvar root = renderIntoDocument(<App />);\r\nvar results = [];\r\ntraverseTree(root, node => {\r\n  if (somePredicate(node) { results.push(node) }\r\n})\r\n```\r\n \r\n## Implementation\r\n\r\nWith a brief review, it looks like we could just export the `toTree` function that is currently inlined in `ReactTestRenderer` and provide a way to change:\r\n\r\n```js\r\n var publicInst = node.stateNode;\r\n      if (test(publicInst)) {\r\n        ret.push(publicInst);\r\n      }\r\n```\r\n\r\nto:\r\n```js\r\n var treeNode = toTree(node);\r\n      if (test(treeNode)) {\r\n        ret.push(treeNode);\r\n      }\r\n```\r\n\r\ncc @gaearon @bvaughn @lelandrichardson ",
        "remove_template_description": "### Problem    The `ReactTestRenderer` now supports a new API, [`toTree`](https://github.com/facebook/react/blob/master/src/renderers/testing/ReactTestRendererFiber.js#L350-L355), which returns an easily traversed tree representing the internal state of the instance and its rendered nodes.    The existing solution for this in `TestUtils` is `findAllInRenderedTree` which traverses the root and lets you provide a test function it will call to reduce a tree based on a predicate. The predicate function is passed the public instance for the node.    The issue with that is that it makes the predicate function polymorphic and requires every consuming utility to check if it's being passed a component instance or a DOM node.       ### Solution    I propose that we implement a new API similar to `findAllInRendererdTree` that calls the predicate function with the result of calling `toTree` on the internal instance instead of the public instance. This would mean:    * the predicate function will always be called with the same data structure (a tree node)  * third-party traversal utilities can be shared between `ReactTestRenderer` and `ReactTestUtils`, since they would operate on the same tree structure  * You could actually assert on functional components, which currently have no instance and just call the predicate with `null`    This new API could just be a pure traversal utility, leaving it up to the consumer to accumulate results.    ```js  import { renderIntoDocument, traverseTree } from 'react-dom/test-utils';  var root = renderIntoDocument(<App />);  var results = [];  traverseTree(root, node => {    if (somePredicate(node) { results.push(node) }  })  ```     ## Implementation    With a brief review, it looks like we could just export the `toTree` function that is currently inlined in `ReactTestRenderer` and provide a way to change:    ```js   var publicInst = node.stateNode;        if (test(publicInst)) {          ret.push(publicInst);        }  ```    to:  ```js   var treeNode = toTree(node);        if (test(treeNode)) {          ret.push(treeNode);        }  ```    cc @gaearon @bvaughn @lelandrichardson",
        "human_words": "### Problem    The `ReactTestRenderer` now supports a new API, [`toTree`](https://github.com/facebook/react/blob/master/src/renderers/testing/ReactTestRendererFiber.js#L350-L355), which returns an easily traversed tree representing the internal state of the instance and its rendered nodes.    The existing solution for this in `TestUtils` is `findAllInRenderedTree` which traverses the root and lets you provide a test function it will call to reduce a tree based on a predicate. The predicate function is passed the public instance for the node.    The issue with that is that it makes the predicate function polymorphic and requires every consuming utility to check if it's being passed a component instance or a DOM node.       ### Solution    I propose that we implement a new API similar to `findAllInRendererdTree` that calls the predicate function with the result of calling `toTree` on the internal instance instead of the public instance. This would mean:    * the predicate function will always be called with the same data structure (a tree node)  * third-party traversal utilities can be shared between `ReactTestRenderer` and `ReactTestUtils`, since they would operate on the same tree structure  * You could actually assert on functional components, which currently have no instance and just call the predicate with `null`    This new API could just be a pure traversal utility, leaving it up to the consumer to accumulate results.         ## Implementation    With a brief review, it looks like we could just export the `toTree` function that is currently inlined in `ReactTestRenderer` and provide a way to change:        to:      cc @gaearon @bvaughn @lelandrichardson",
        "human_words_regrex": "### Problem The `ReactTestRenderer` now supports a new API, , which returns an easily traversed tree representing the internal state of the instance and its rendered nodes. The existing solution for this in `TestUtils` is `findAllInRenderedTree` which traverses the root and lets you provide a test function it will call to reduce a tree based on a predicate. The predicate function is passed the public instance for the node. The issue with that is that it makes the predicate function polymorphic and requires every consuming utility to check if it's being passed a component instance or a DOM node. ### Solution I propose that we implement a new API similar to `findAllInRendererdTree` that calls the predicate function with the result of calling `toTree` on the internal instance instead of the public instance. This would mean: * the predicate function will always be called with the same data structure (a tree node) * third-party traversal utilities can be shared between `ReactTestRenderer` and `ReactTestUtils`, since they would operate on the same tree structure * You could actually assert on functional components, which currently have no instance and just call the predicate with `null` This new API could just be a pure traversal utility, leaving it up to the consumer to accumulate results. ## Implementation With a brief review, it looks like we could just export the `toTree` function that is currently inlined in `ReactTestRenderer` and provide a way to change: to: cc @gaearon @bvaughn @lelandrichardson",
        "human_words_stopwords_removal_lemmatization": "# # # problem ` reacttestrenderer ` support new api , , return easily traversed tree representing internal state instance rendered node . existing solution ` testutils ` ` findallinrenderedtree ` traverse root let provide test function call reduce tree based predicate . predicate function passed public instance node . issue make predicate function polymorphic requires every consuming utility check 's passed component instance dom node . # # # solution propose implement new api similar ` findallinrendererdtree ` call predicate function result calling ` totree ` internal instance instead public instance . would mean : * predicate function always called data structure ( tree node ) * third-party traversal utility shared ` reacttestrenderer ` ` reacttestutils ` , since would operate tree structure * could actually assert functional component , currently instance call predicate ` null ` new api could pure traversal utility , leaving consumer accumulate result . # # implementation brief review , look like could export ` totree ` function currently inlined ` reacttestrenderer ` provide way change : : cc @ gaearon @ bvaughn @ lelandrichardson",
        "title_stopwords_removal_lemmatization": "[ rfc ] add traversal utility reacttestutils matching totree shape"
    },
    {
        "issue_id": 223460879,
        "title": "Feature Request: dangerouslySetInnerHTML as a return value",
        "label": [
            "Type: Feature Request",
            "Resolution: Stale"
        ],
        "date": "2017-04-21T18:27:56Z",
        "status": "closed",
        "description": "I haven\u2019t fully thought through this yet, so hoping for some feedback on whether it is viable or breaks too many assumptions.\r\n\r\nThe goal is to create an escape hatch that would support rendering to conditional comments, alternative method for web components, and other unknown and probably bad ideas.\r\n\r\nSomething along the lines of:\r\n\r\n```jsx\r\nconst DangerousComment = ({children}) => ({\r\n  dangerouslySetInnerHTML: {__html: `<!-- ${children} -->` }\r\n});\r\n\r\nReactDOMServer.renderToString(\r\n  <head>\r\n    <DangerousComment>\r\n      {\"[if lte IE 9]><script src='/public/media.match.js'></script><![endif]\"}\r\n    </DangerousComment>\r\n  </head>\r\n); // <head><!--[if lte IE 9]><script src='/public/media.match.js'></script><![endif]--></head>\r\n```\r\n\r\n```jsx\r\nconst WebComponent = ({children}) => ({\r\n  dangerouslySetInnerHTML: {__html: `<!-- ${children} -->` }\r\n});\r\nReactDOM.render(() => (\r\n  <WebComponent>`\r\n    <app-toolbar arbitary-prop=\"sure-y-not\">\r\n      <div main-title>Web Components!</div>\r\n    </app-toolbar>\r\n  `</WebComponent>\r\n), document.body.firstChild);\r\n```\r\n\r\nThe first example is the one I\u2019m more interested at this point in time. The benefit here is this could work on both the DOM and server renderer without userland hacks like https://nemisj.com/conditional-ie-comments-in-react-js/ or `componentDidMount` ref replacement (client only, I believe?).\r\n\r\nA couple initial problems I see with this are (may or may not be solvable/avoidable with slight tweaks):\r\n\r\n* returning an arbitrary object `render` which isn\u2019t supported\r\n* how will unmounting this work?\r\n\r\nAlternative proposal:\r\n\r\nIntroduce a new DOM-renderer primitive `<comment />` or `<dangerousComment />` (to follow a similar approach to `dangerouslySetInnerHTML` clearly indicating the caveats that come with rendering comments). This alternative solution only solves the conditional comment issue above.",
        "remove_template_description": "I haven\u2019t fully thought through this yet, so hoping for some feedback on whether it is viable or breaks too many assumptions.    The goal is to create an escape hatch that would support rendering to conditional comments, alternative method for web components, and other unknown and probably bad ideas.    Something along the lines of:    ```jsx  const DangerousComment = ({children}) => ({    dangerouslySetInnerHTML: {__html: `<!-- ${children} -->` }  });    ReactDOMServer.renderToString(    <head>      <DangerousComment>        {\"[if lte IE 9]><script src='/public/media.match.js'></script><![endif]\"}      </DangerousComment>    </head>  ); // <head><!--[if lte IE 9]><script src='/public/media.match.js'></script><![endif]--></head>  ```    ```jsx  const WebComponent = ({children}) => ({    dangerouslySetInnerHTML: {__html: `<!-- ${children} -->` }  });  ReactDOM.render(() => (    <WebComponent>`      <app-toolbar arbitary-prop=\"sure-y-not\">        <div main-title>Web Components!</div>      </app-toolbar>    `</WebComponent>  ), document.body.firstChild);  ```    The first example is the one I\u2019m more interested at this point in time. The benefit here is this could work on both the DOM and server renderer without userland hacks like https://nemisj.com/conditional-ie-comments-in-react-js/ or `componentDidMount` ref replacement (client only, I believe?).    A couple initial problems I see with this are (may or may not be solvable/avoidable with slight tweaks):    * returning an arbitrary object `render` which isn\u2019t supported  * how will unmounting this work?    Alternative proposal:    Introduce a new DOM-renderer primitive `<comment />` or `<dangerousComment />` (to follow a similar approach to `dangerouslySetInnerHTML` clearly indicating the caveats that come with rendering comments). This alternative solution only solves the conditional comment issue above.",
        "human_words": "I haven\u2019t fully thought through this yet, so hoping for some feedback on whether it is viable or breaks too many assumptions.    The goal is to create an escape hatch that would support rendering to conditional comments, alternative method for web components, and other unknown and probably bad ideas.    Something along the lines of:            The first example is the one I\u2019m more interested at this point in time. The benefit here is this could work on both the DOM and server renderer without userland hacks like https://nemisj.com/conditional-ie-comments-in-react-js/ or `componentDidMount` ref replacement (client only, I believe?).    A couple initial problems I see with this are (may or may not be solvable/avoidable with slight tweaks):    * returning an arbitrary object `render` which isn\u2019t supported  * how will unmounting this work?    Alternative proposal:    Introduce a new DOM-renderer primitive `<comment />` or `<dangerousComment />` (to follow a similar approach to `dangerouslySetInnerHTML` clearly indicating the caveats that come with rendering comments). This alternative solution only solves the conditional comment issue above.",
        "human_words_regrex": "I haven\u2019t fully thought through this yet, so hoping for some feedback on whether it is viable or breaks too many assumptions. The goal is to create an escape hatch that would support rendering to conditional comments, alternative method for web components, and other unknown and probably bad ideas. Something along the lines of: The first example is the one I\u2019m more interested at this point in time. The benefit here is this could work on both the DOM and server renderer without userland hacks like  or `componentDidMount` ref replacement (client only, I believe?). A couple initial problems I see with this are (may or may not be solvable/avoidable with slight tweaks): * returning an arbitrary object `render` which isn\u2019t supported * how will unmounting this work? Alternative proposal: Introduce a new DOM-renderer primitive `` or `` (to follow a similar approach to `dangerouslySetInnerHTML` clearly indicating the caveats that come with rendering comments). This alternative solution only solves the conditional comment issue above.",
        "human_words_stopwords_removal_lemmatization": "\u2019 fully thought yet , hoping feedback whether viable break many assumption . goal create escape hatch would support rendering conditional comment , alternative method web component , unknown probably bad idea . something along line : first example one \u2019 interested point time . benefit could work dom server renderer without userland hack like ` componentdidmount ` ref replacement ( client , believe ? ) . couple initial problem see ( may may solvable/avoidable slight tweak ) : * returning arbitrary object ` render ` \u2019 supported * unmounting work ? alternative proposal : introduce new dom-renderer primitive `` `` ( follow similar approach ` dangerouslysetinnerhtml ` clearly indicating caveat come rendering comment ) . alternative solution solves conditional comment issue .",
        "title_stopwords_removal_lemmatization": "feature request : dangerouslysetinnerhtml return value"
    },
    {
        "issue_id": 214553330,
        "title": "Expose DEV-mode warnings in devtools UI",
        "label": [
            "Type: Feature Request",
            "Component: Developer Tools",
            "React Core Team"
        ],
        "date": "2017-03-15T23:11:13Z",
        "status": "closed",
        "description": "React has made recent developer experience improvements to lifecycle error handling and logging. Errors thrown during render can be recovered from using ~~`unstable_handleError`~~ `componentDidCatch`. Errors thrown during lifecycle methods are also automatically logged to the console with the component stack location to make them easier to identify (see #8785).\r\n\r\nThe team has discussed similar improvements for warnings- such as using a \"yellow box\" approach to make warnings stand out more in developer mode (see PRs #7360 and #8861). There has been some pushback though to the idea of React modifying the DOM for warning purposes (see issue #8784). I'm not sure how that will play out yet- but in the meanwhile, could we improve at least some of these use cases by making better use of the devtools?\r\n\r\nFor example, what if React exposed a new API that allowed associating a warning with one or more components in the devtools panel? (eg a method that- when called- recorded the current component stack and notified devtools if present) React could use this for things like missing or non-unique keys. 3rd party libraries may also benefit from this (eg react-virtualized could use this to warn about missing or incomplete positioning styles for cells).\r\n\r\nHere's a rough outline of some of the features:\r\n* Components with warnings could be highlighted in some emphasized way (eg yellow background) in devtools to make them easier to spot.\r\n* A new toolbar option could be added to \"Show All Warnings\" (eg filter the tree view to show only components with warnings).\r\n* Warning message could be shown inline in the settings panel for the selected component.\r\n\r\nHere's a rough mockup: \r\n![screen shot 2017-03-15 at 3 47 31 pm](https://cloud.githubusercontent.com/assets/29597/23974108/bc3dabd6-0996-11e7-8d2a-e058c4cafe41.png)\r\n\r\nLimitations:\r\n* Not everyone uses devtools so this would not help a lot of people.\r\n* This would not address issues like using the development mode of React for production sites.\r\n\r\nThoughts? Ideas? Suggestions?",
        "remove_template_description": "React has made recent developer experience improvements to lifecycle error handling and logging. Errors thrown during render can be recovered from using ~~`unstable_handleError`~~ `componentDidCatch`. Errors thrown during lifecycle methods are also automatically logged to the console with the component stack location to make them easier to identify (see #8785).    The team has discussed similar improvements for warnings- such as using a \"yellow box\" approach to make warnings stand out more in developer mode (see PRs #7360 and #8861). There has been some pushback though to the idea of React modifying the DOM for warning purposes (see issue #8784). I'm not sure how that will play out yet- but in the meanwhile, could we improve at least some of these use cases by making better use of the devtools?    For example, what if React exposed a new API that allowed associating a warning with one or more components in the devtools panel? (eg a method that- when called- recorded the current component stack and notified devtools if present) React could use this for things like missing or non-unique keys. 3rd party libraries may also benefit from this (eg react-virtualized could use this to warn about missing or incomplete positioning styles for cells).    Here's a rough outline of some of the features:  * Components with warnings could be highlighted in some emphasized way (eg yellow background) in devtools to make them easier to spot.  * A new toolbar option could be added to \"Show All Warnings\" (eg filter the tree view to show only components with warnings).  * Warning message could be shown inline in the settings panel for the selected component.    Here's a rough mockup:   ![screen shot 2017-03-15 at 3 47 31 pm](https://cloud.githubusercontent.com/assets/29597/23974108/bc3dabd6-0996-11e7-8d2a-e058c4cafe41.png)    Limitations:  * Not everyone uses devtools so this would not help a lot of people.  * This would not address issues like using the development mode of React for production sites.    Thoughts? Ideas? Suggestions?",
        "human_words": "React has made recent developer experience improvements to lifecycle error handling and logging. Errors thrown during render can be recovered from using ~~`unstable_handleError`~~ `componentDidCatch`. Errors thrown during lifecycle methods are also automatically logged to the console with the component stack location to make them easier to identify (see #8785).    The team has discussed similar improvements for warnings- such as using a \"yellow box\" approach to make warnings stand out more in developer mode (see PRs #7360 and #8861). There has been some pushback though to the idea of React modifying the DOM for warning purposes (see issue #8784). I'm not sure how that will play out yet- but in the meanwhile, could we improve at least some of these use cases by making better use of the devtools?    For example, what if React exposed a new API that allowed associating a warning with one or more components in the devtools panel? (eg a method that- when called- recorded the current component stack and notified devtools if present) React could use this for things like missing or non-unique keys. 3rd party libraries may also benefit from this (eg react-virtualized could use this to warn about missing or incomplete positioning styles for cells).    Here's a rough outline of some of the features:  * Components with warnings could be highlighted in some emphasized way (eg yellow background) in devtools to make them easier to spot.  * A new toolbar option could be added to \"Show All Warnings\" (eg filter the tree view to show only components with warnings).  * Warning message could be shown inline in the settings panel for the selected component.    Here's a rough mockup:   ![screen shot 2017-03-15 at 3 47 31 pm](https://cloud.githubusercontent.com/assets/29597/23974108/bc3dabd6-0996-11e7-8d2a-e058c4cafe41.png)    Limitations:  * Not everyone uses devtools so this would not help a lot of people.  * This would not address issues like using the development mode of React for production sites.    Thoughts? Ideas? Suggestions?",
        "human_words_regrex": "React has made recent developer experience improvements to lifecycle error handling and logging. Errors thrown during render can be recovered from using ~~`unstable_handleError`~~ `componentDidCatch`. Errors thrown during lifecycle methods are also automatically logged to the console with the component stack location to make them easier to identify (see #8785). The team has discussed similar improvements for warnings- such as using a \"yellow box\" approach to make warnings stand out more in developer mode (see PRs #7360 and #8861). There has been some pushback though to the idea of React modifying the DOM for warning purposes (see issue #8784). I'm not sure how that will play out yet- but in the meanwhile, could we improve at least some of these use cases by making better use of the devtools? For example, what if React exposed a new API that allowed associating a warning with one or more components in the devtools panel? (eg a method that- when called- recorded the current component stack and notified devtools if present) React could use this for things like missing or non-unique keys. 3rd party libraries may also benefit from this (eg react-virtualized could use this to warn about missing or incomplete positioning styles for cells). Here's a rough outline of some of the features: * Components with warnings could be highlighted in some emphasized way (eg yellow background) in devtools to make them easier to spot. * A new toolbar option could be added to \"Show All Warnings\" (eg filter the tree view to show only components with warnings). * Warning message could be shown inline in the settings panel for the selected component. Here's a rough mockup: ! Limitations: * Not everyone uses devtools so this would not help a lot of people. * This would not address issues like using the development mode of React for production sites. Thoughts? Ideas? Suggestions?",
        "human_words_stopwords_removal_lemmatization": "react made recent developer experience improvement lifecycle error handling logging . error thrown render recovered using ~~ ` unstable_handleerror ` ~~ ` componentdidcatch ` . error thrown lifecycle method also automatically logged console component stack location make easier identify ( see # 8785 ) . team discussed similar improvement warnings- using `` yellow box '' approach make warning stand developer mode ( see pr # 7360 # 8861 ) . pushback though idea react modifying dom warning purpose ( see issue # 8784 ) . 'm sure play yet- meanwhile , could improve least use case making better use devtools ? example , react exposed new api allowed associating warning one component devtools panel ? ( eg method that- called- recorded current component stack notified devtools present ) react could use thing like missing non-unique key . 3rd party library may also benefit ( eg react-virtualized could use warn missing incomplete positioning style cell ) . 's rough outline feature : * component warning could highlighted emphasized way ( eg yellow background ) devtools make easier spot . * new toolbar option could added `` show warning '' ( eg filter tree view show component warning ) . * warning message could shown inline setting panel selected component . 's rough mockup : ! limitation : * everyone us devtools would help lot people . * would address issue like using development mode react production site . thought ? idea ? suggestion ?",
        "title_stopwords_removal_lemmatization": "expose dev-mode warning devtools ui"
    },
    {
        "issue_id": 213438699,
        "title": "Serializing to \"HTML with only as much JS as necessary\"",
        "label": [
            "Type: Feature Request",
            "Component: Server Rendering",
            "Resolution: Backlog"
        ],
        "date": "2017-03-10T20:04:07Z",
        "status": "closed",
        "description": "This is sort of a feature request, mostly because I haven't been able to make the current react tooling do what I need it to do.\r\n\r\nI have a massively huge article up on https://pomax.github.io/bezierinfo that consists of a single page of React-managed content, of which the bulk is \"passive\" HTML content. Paragraphs, headings, that kind of stuff. However, there are also active components with JS interaction bindings, and so I was trying to figure out a way to turn this article into a \"react-managed by the client\" into a \"thin ui managed by the client, react-built offline\" solution. \r\n\r\nI had a look at ReactDOMServer.renderToStaticMarkup, but while this generates all the HTML nicely, it also loses any and all JS bindings that are necessary to keep the UI working. As this is an ~800kb article not counting static assets (there's some 1.6MB of images on top of that), the notion of first loading the plain markup content and then loading the react bundle on top of that, to hook into the preloaded markup would be a terrible experience for people in the slightly-less-wealthy parts of the world.\r\n\r\nIs there some way to, or would there be a sense in developing a way to render React content to HTML \"as much as possible\" while preserving React's management of interactive UI components? Essentially, a solution in between `renderToString` and `renderToStaticMarkup`, to prevent as much data duplication between the pregenerated HTML and the react application itself? It seems that the heavy payload (in bytes, but certainly in client-side processing as well) incurred by using a fully react-managed bundle could be relieved significantly if \"content that is guaranteed passive, regular HTML\" could be serialized out as HTML with React hooking back into that code only for elements that require active management.\r\n\r\n(I have no idea how much work that would be, but I'm pretty sure it would help bring down the average page size down again, which on a global scale would save quite a lot of time and money, while allowing content to be loaded by people for whom parts of the internet are currently inaccessible due to load time and byte cost)",
        "remove_template_description": "This is sort of a feature request, mostly because I haven't been able to make the current react tooling do what I need it to do.    I have a massively huge article up on https://pomax.github.io/bezierinfo that consists of a single page of React-managed content, of which the bulk is \"passive\" HTML content. Paragraphs, headings, that kind of stuff. However, there are also active components with JS interaction bindings, and so I was trying to figure out a way to turn this article into a \"react-managed by the client\" into a \"thin ui managed by the client, react-built offline\" solution.     I had a look at ReactDOMServer.renderToStaticMarkup, but while this generates all the HTML nicely, it also loses any and all JS bindings that are necessary to keep the UI working. As this is an ~800kb article not counting static assets (there's some 1.6MB of images on top of that), the notion of first loading the plain markup content and then loading the react bundle on top of that, to hook into the preloaded markup would be a terrible experience for people in the slightly-less-wealthy parts of the world.    Is there some way to, or would there be a sense in developing a way to render React content to HTML \"as much as possible\" while preserving React's management of interactive UI components? Essentially, a solution in between `renderToString` and `renderToStaticMarkup`, to prevent as much data duplication between the pregenerated HTML and the react application itself? It seems that the heavy payload (in bytes, but certainly in client-side processing as well) incurred by using a fully react-managed bundle could be relieved significantly if \"content that is guaranteed passive, regular HTML\" could be serialized out as HTML with React hooking back into that code only for elements that require active management.    (I have no idea how much work that would be, but I'm pretty sure it would help bring down the average page size down again, which on a global scale would save quite a lot of time and money, while allowing content to be loaded by people for whom parts of the internet are currently inaccessible due to load time and byte cost)",
        "human_words": "This is sort of a feature request, mostly because I haven't been able to make the current react tooling do what I need it to do.    I have a massively huge article up on https://pomax.github.io/bezierinfo that consists of a single page of React-managed content, of which the bulk is \"passive\" HTML content. Paragraphs, headings, that kind of stuff. However, there are also active components with JS interaction bindings, and so I was trying to figure out a way to turn this article into a \"react-managed by the client\" into a \"thin ui managed by the client, react-built offline\" solution.     I had a look at ReactDOMServer.renderToStaticMarkup, but while this generates all the HTML nicely, it also loses any and all JS bindings that are necessary to keep the UI working. As this is an ~800kb article not counting static assets (there's some 1.6MB of images on top of that), the notion of first loading the plain markup content and then loading the react bundle on top of that, to hook into the preloaded markup would be a terrible experience for people in the slightly-less-wealthy parts of the world.    Is there some way to, or would there be a sense in developing a way to render React content to HTML \"as much as possible\" while preserving React's management of interactive UI components? Essentially, a solution in between `renderToString` and `renderToStaticMarkup`, to prevent as much data duplication between the pregenerated HTML and the react application itself? It seems that the heavy payload (in bytes, but certainly in client-side processing as well) incurred by using a fully react-managed bundle could be relieved significantly if \"content that is guaranteed passive, regular HTML\" could be serialized out as HTML with React hooking back into that code only for elements that require active management.    (I have no idea how much work that would be, but I'm pretty sure it would help bring down the average page size down again, which on a global scale would save quite a lot of time and money, while allowing content to be loaded by people for whom parts of the internet are currently inaccessible due to load time and byte cost)",
        "human_words_regrex": "This is sort of a feature request, mostly because I haven't been able to make the current react tooling do what I need it to do. I have a massively huge article up on  that consists of a single page of React-managed content, of which the bulk is \"passive\" HTML content. Paragraphs, headings, that kind of stuff. However, there are also active components with JS interaction bindings, and so I was trying to figure out a way to turn this article into a \"react-managed by the client\" into a \"thin ui managed by the client, react-built offline\" solution. I had a look at ReactDOMServer.renderToStaticMarkup, but while this generates all the HTML nicely, it also loses any and all JS bindings that are necessary to keep the UI working. As this is an ~800kb article not counting static assets (there's some 1.6MB of images on top of that), the notion of first loading the plain markup content and then loading the react bundle on top of that, to hook into the preloaded markup would be a terrible experience for people in the slightly-less-wealthy parts of the world. Is there some way to, or would there be a sense in developing a way to render React content to HTML \"as much as possible\" while preserving React's management of interactive UI components? Essentially, a solution in between `renderToString` and `renderToStaticMarkup`, to prevent as much data duplication between the pregenerated HTML and the react application itself? It seems that the heavy payload (in bytes, but certainly in client-side processing as well) incurred by using a fully react-managed bundle could be relieved significantly if \"content that is guaranteed passive, regular HTML\" could be serialized out as HTML with React hooking back into that code only for elements that require active management. (I have no idea how much work that would be, but I'm pretty sure it would help bring down the average page size down again, which on a global scale would save quite a lot of time and money, while allowing content to be loaded by people for whom parts of the internet are currently inaccessible due to load time and byte cost)",
        "human_words_stopwords_removal_lemmatization": "sort feature request , mostly n't able make current react tooling need . massively huge article consists single page react-managed content , bulk `` passive '' html content . paragraph , heading , kind stuff . however , also active component j interaction binding , trying figure way turn article `` react-managed client '' `` thin ui managed client , react-built offline '' solution . look reactdomserver.rendertostaticmarkup , generates html nicely , also loses j binding necessary keep ui working . ~800kb article counting static asset ( 's 1.6mb image top ) , notion first loading plain markup content loading react bundle top , hook preloaded markup would terrible experience people slightly-less-wealthy part world . way , would sense developing way render react content html `` much possible '' preserving react 's management interactive ui component ? essentially , solution ` rendertostring ` ` rendertostaticmarkup ` , prevent much data duplication pregenerated html react application ? seems heavy payload ( byte , certainly client-side processing well ) incurred using fully react-managed bundle could relieved significantly `` content guaranteed passive , regular html '' could serialized html react hooking back code element require active management . ( idea much work would , 'm pretty sure would help bring average page size , global scale would save quite lot time money , allowing content loaded people part internet currently inaccessible due load time byte cost )",
        "title_stopwords_removal_lemmatization": "serializing `` html much j necessary ''"
    },
    {
        "issue_id": 211766148,
        "title": "RFC: ReactFiberReconciler release artifact",
        "label": [
            "Type: Feature Request",
            "Component: Core Utilities"
        ],
        "date": "2017-03-03T18:30:15Z",
        "status": "closed",
        "description": "This issue is intended to be a discussion for how to distribute the ReactFiberReconciler.js file and dependencies for custom renderers.\r\n\r\nCurrently first-class renderers within the React codebase/Facebook ecosystem do not have any concerns for this because of Haste / access to the React.js build + publish tooling within this codebase.\r\n\r\n3rd party renderers are currently adding `react-dom` to their dependency list and requiring `react-dom/lib/ReactFiberReconciler.js` to build and expose their custom renderer.\r\n\r\nIdeally, `ReactFiberReconciler.js` would be distributed with the `react` package or as a standalone `react-fiber-reconciler` package. Whether this is at `react/reconciler.js` or `react/lib/reconciler.js` idk. I think at the root is better to continue the discouragement of looking in `react/lib/*` for anything.\r\n\r\nI understand flat bundles are coming, too. I don\u2019t know if that should block this or if this could be a flat bundle, or any other alternative.\r\n\r\nIs this something the team is ready to commit to and support if we came to a decision on approach and I put together a PR?\r\n\r\n Related issues:\r\n\r\n* #6795 Create Separate Copies of Each Renderer\r\n* #5472 Include flow type definitions (flow type distribution proposal at https://github.com/facebook/react/issues/5472#issuecomment-282394248)\r\n\r\n+ @sebmarkbage @spicyj ",
        "remove_template_description": "This issue is intended to be a discussion for how to distribute the ReactFiberReconciler.js file and dependencies for custom renderers.    Currently first-class renderers within the React codebase/Facebook ecosystem do not have any concerns for this because of Haste / access to the React.js build + publish tooling within this codebase.    3rd party renderers are currently adding `react-dom` to their dependency list and requiring `react-dom/lib/ReactFiberReconciler.js` to build and expose their custom renderer.    Ideally, `ReactFiberReconciler.js` would be distributed with the `react` package or as a standalone `react-fiber-reconciler` package. Whether this is at `react/reconciler.js` or `react/lib/reconciler.js` idk. I think at the root is better to continue the discouragement of looking in `react/lib/*` for anything.    I understand flat bundles are coming, too. I don\u2019t know if that should block this or if this could be a flat bundle, or any other alternative.    Is this something the team is ready to commit to and support if we came to a decision on approach and I put together a PR?     Related issues:    * #6795 Create Separate Copies of Each Renderer  * #5472 Include flow type definitions (flow type distribution proposal at https://github.com/facebook/react/issues/5472#issuecomment-282394248)    + @sebmarkbage @spicyj",
        "human_words": "This issue is intended to be a discussion for how to distribute the ReactFiberReconciler.js file and dependencies for custom renderers.    Currently first-class renderers within the React codebase/Facebook ecosystem do not have any concerns for this because of Haste / access to the React.js build + publish tooling within this codebase.    3rd party renderers are currently adding `react-dom` to their dependency list and requiring `react-dom/lib/ReactFiberReconciler.js` to build and expose their custom renderer.    Ideally, `ReactFiberReconciler.js` would be distributed with the `react` package or as a standalone `react-fiber-reconciler` package. Whether this is at `react/reconciler.js` or `react/lib/reconciler.js` idk. I think at the root is better to continue the discouragement of looking in `react/lib/*` for anything.    I understand flat bundles are coming, too. I don\u2019t know if that should block this or if this could be a flat bundle, or any other alternative.    Is this something the team is ready to commit to and support if we came to a decision on approach and I put together a PR?     Related issues:    * #6795 Create Separate Copies of Each Renderer  * #5472 Include flow type definitions (flow type distribution proposal at https://github.com/facebook/react/issues/5472#issuecomment-282394248)    + @sebmarkbage @spicyj",
        "human_words_regrex": "This issue is intended to be a discussion for how to distribute the ReactFiberReconciler.js file and dependencies for custom renderers. Currently first-class renderers within the React codebase/Facebook ecosystem do not have any concerns for this because of Haste / access to the React.js build + publish tooling within this codebase. 3rd party renderers are currently adding `react-dom` to their dependency list and requiring `react-dom/lib/ReactFiberReconciler.js` to build and expose their custom renderer. Ideally, `ReactFiberReconciler.js` would be distributed with the `react` package or as a standalone `react-fiber-reconciler` package. Whether this is at `react/reconciler.js` or `react/lib/reconciler.js` idk. I think at the root is better to continue the discouragement of looking in `react/lib/*` for anything. I understand flat bundles are coming, too. I don\u2019t know if that should block this or if this could be a flat bundle, or any other alternative. Is this something the team is ready to commit to and support if we came to a decision on approach and I put together a PR? Related issues: * #6795 Create Separate Copies of Each Renderer * #5472 Include flow type definitions (flow type distribution proposal at  + @sebmarkbage @spicyj",
        "human_words_stopwords_removal_lemmatization": "issue intended discussion distribute reactfiberreconciler.js file dependency custom renderers . currently first-class renderers within react codebase/facebook ecosystem concern haste / access react.js build + publish tooling within codebase . 3rd party renderers currently adding ` react-dom ` dependency list requiring ` react-dom/lib/reactfiberreconciler.js ` build expose custom renderer . ideally , ` reactfiberreconciler.js ` would distributed ` react ` package standalone ` react-fiber-reconciler ` package . whether ` react/reconciler.js ` ` react/lib/reconciler.js ` idk . think root better continue discouragement looking ` react/lib/ * ` anything . understand flat bundle coming , . \u2019 know block could flat bundle , alternative . something team ready commit support came decision approach put together pr ? related issue : * # 6795 create separate copy renderer * # 5472 include flow type definition ( flow type distribution proposal + @ sebmarkbage @ spicyj",
        "title_stopwords_removal_lemmatization": "rfc : reactfiberreconciler release artifact"
    },
    {
        "issue_id": 200881664,
        "title": "Expose more through __REACT_DEVTOOLS_GLOBAL_HOOK__.inject",
        "label": [
            "Type: Feature Request",
            "Component: Developer Tools",
            "Resolution: Stale"
        ],
        "date": "2017-01-15T17:26:32Z",
        "status": "closed",
        "description": "This feature request came out of a brief discussion on twitter with @gaearon: https://twitter.com/dan_abramov/status/820356665899945984\r\n\r\n`__REACT_DEVTOOLS_GLOBAL_HOOK__.inject` exposes access to `getClosestInstanceFromNode`, `getNodeFromInstance`, `ReactMount` and `ReactReconciler`. This is great, and we use it to collect component level performance metrics for our customers in production, however, there are more things we'd love to have access to for the purpose of helping our users pinpoint performance issues in their applications.\r\n\r\nThis \"issue\" includes some initial observations, but I hope we can keep an open dialogue about this - in particular considering Fiber will probably change the landscape with regards to what the most common performance problems are and we'd instrument according to that.\r\n\r\nI understand the urge to keep the API surface area as small as possible in order to create minimal commitment to APIs to allow for internals to move fast. Exposing additional internals with the explicit warning that you are not committed to their API is fine for us, as a tool vendor.\r\n\r\nWe've looked at using `batchedUpdates` to highlight the batched nature of the work performed by React. E.g. is the work in your application getting batched properly. If we only have access to the component updating methods on `ReactReconciler` (`mountComponent`, `receiveComponent`, `unmountComponent` etc) we can't really know when a batch of work starts and when it ends. `batchedUpdates` is available in ReactDOM with the `unstable_` prefix, but exposing it in the `inject` hook would be very useful: https://github.com/facebook/react/blob/master/src/renderers/dom/ReactDOM.js#L38\r\n\r\nWe've also (experimentally) hooked into `EventPluginUtils.executeDispatchesInOrder` in order to capture events and measure the work resulting from these, but i suspect there is a better place to do this (`ReactEventListener.dispatchEvent`?). In any case, having access to the event system would be very useful. Again, using the \"unstable_\" prefix to indicate non-committal would be fine for us.\r\n\r\nI've not had much time to look into what we'd need access to for Fiber instrumentation, but so far it looks like a hook into `beginWork` would be very useful: https://github.com/facebook/react/blob/199db638c4d0fbc6e4d99534be0060deea518a32/src/renderers/shared/fiber/ReactFiberBeginWork.js#L640",
        "remove_template_description": "This feature request came out of a brief discussion on twitter with @gaearon: https://twitter.com/dan_abramov/status/820356665899945984    `__REACT_DEVTOOLS_GLOBAL_HOOK__.inject` exposes access to `getClosestInstanceFromNode`, `getNodeFromInstance`, `ReactMount` and `ReactReconciler`. This is great, and we use it to collect component level performance metrics for our customers in production, however, there are more things we'd love to have access to for the purpose of helping our users pinpoint performance issues in their applications.    This \"issue\" includes some initial observations, but I hope we can keep an open dialogue about this - in particular considering Fiber will probably change the landscape with regards to what the most common performance problems are and we'd instrument according to that.    I understand the urge to keep the API surface area as small as possible in order to create minimal commitment to APIs to allow for internals to move fast. Exposing additional internals with the explicit warning that you are not committed to their API is fine for us, as a tool vendor.    We've looked at using `batchedUpdates` to highlight the batched nature of the work performed by React. E.g. is the work in your application getting batched properly. If we only have access to the component updating methods on `ReactReconciler` (`mountComponent`, `receiveComponent`, `unmountComponent` etc) we can't really know when a batch of work starts and when it ends. `batchedUpdates` is available in ReactDOM with the `unstable_` prefix, but exposing it in the `inject` hook would be very useful: https://github.com/facebook/react/blob/master/src/renderers/dom/ReactDOM.js#L38    We've also (experimentally) hooked into `EventPluginUtils.executeDispatchesInOrder` in order to capture events and measure the work resulting from these, but i suspect there is a better place to do this (`ReactEventListener.dispatchEvent`?). In any case, having access to the event system would be very useful. Again, using the \"unstable_\" prefix to indicate non-committal would be fine for us.    I've not had much time to look into what we'd need access to for Fiber instrumentation, but so far it looks like a hook into `beginWork` would be very useful: https://github.com/facebook/react/blob/199db638c4d0fbc6e4d99534be0060deea518a32/src/renderers/shared/fiber/ReactFiberBeginWork.js#L640",
        "human_words": "This feature request came out of a brief discussion on twitter with @gaearon: https://twitter.com/dan_abramov/status/820356665899945984    `__REACT_DEVTOOLS_GLOBAL_HOOK__.inject` exposes access to `getClosestInstanceFromNode`, `getNodeFromInstance`, `ReactMount` and `ReactReconciler`. This is great, and we use it to collect component level performance metrics for our customers in production, however, there are more things we'd love to have access to for the purpose of helping our users pinpoint performance issues in their applications.    This \"issue\" includes some initial observations, but I hope we can keep an open dialogue about this - in particular considering Fiber will probably change the landscape with regards to what the most common performance problems are and we'd instrument according to that.    I understand the urge to keep the API surface area as small as possible in order to create minimal commitment to APIs to allow for internals to move fast. Exposing additional internals with the explicit warning that you are not committed to their API is fine for us, as a tool vendor.    We've looked at using `batchedUpdates` to highlight the batched nature of the work performed by React. E.g. is the work in your application getting batched properly. If we only have access to the component updating methods on `ReactReconciler` (`mountComponent`, `receiveComponent`, `unmountComponent` etc) we can't really know when a batch of work starts and when it ends. `batchedUpdates` is available in ReactDOM with the `unstable_` prefix, but exposing it in the `inject` hook would be very useful: https://github.com/facebook/react/blob/master/src/renderers/dom/ReactDOM.js#L38    We've also (experimentally) hooked into `EventPluginUtils.executeDispatchesInOrder` in order to capture events and measure the work resulting from these, but i suspect there is a better place to do this (`ReactEventListener.dispatchEvent`?). In any case, having access to the event system would be very useful. Again, using the \"unstable_\" prefix to indicate non-committal would be fine for us.    I've not had much time to look into what we'd need access to for Fiber instrumentation, but so far it looks like a hook into `beginWork` would be very useful: https://github.com/facebook/react/blob/199db638c4d0fbc6e4d99534be0060deea518a32/src/renderers/shared/fiber/ReactFiberBeginWork.js#L640",
        "human_words_regrex": "This feature request came out of a brief discussion on twitter with @gaearon:  `__REACT_DEVTOOLS_GLOBAL_HOOK__.inject` exposes access to `getClosestInstanceFromNode`, `getNodeFromInstance`, `ReactMount` and `ReactReconciler`. This is great, and we use it to collect component level performance metrics for our customers in production, however, there are more things we'd love to have access to for the purpose of helping our users pinpoint performance issues in their applications. This \"issue\" includes some initial observations, but I hope we can keep an open dialogue about this - in particular considering Fiber will probably change the landscape with regards to what the most common performance problems are and we'd instrument according to that. I understand the urge to keep the API surface area as small as possible in order to create minimal commitment to APIs to allow for internals to move fast. Exposing additional internals with the explicit warning that you are not committed to their API is fine for us, as a tool vendor. We've looked at using `batchedUpdates` to highlight the batched nature of the work performed by React. E.g. is the work in your application getting batched properly. If we only have access to the component updating methods on `ReactReconciler` (`mountComponent`, `receiveComponent`, `unmountComponent` etc) we can't really know when a batch of work starts and when it ends. `batchedUpdates` is available in ReactDOM with the `unstable_` prefix, but exposing it in the `inject` hook would be very useful:  We've also (experimentally) hooked into `EventPluginUtils.executeDispatchesInOrder` in order to capture events and measure the work resulting from these, but i suspect there is a better place to do this (`ReactEventListener.dispatchEvent`?). In any case, having access to the event system would be very useful. Again, using the \"unstable_\" prefix to indicate non-committal would be fine for us. I've not had much time to look into what we'd need access to for Fiber instrumentation, but so far it looks like a hook into `beginWork` would be very useful: ",
        "human_words_stopwords_removal_lemmatization": "feature request came brief discussion twitter @ gaearon : ` __react_devtools_global_hook__.inject ` expose access ` getclosestinstancefromnode ` , ` getnodefrominstance ` , ` reactmount ` ` reactreconciler ` . great , use collect component level performance metric customer production , however , thing 'd love access purpose helping user pinpoint performance issue application . `` issue '' includes initial observation , hope keep open dialogue - particular considering fiber probably change landscape regard common performance problem 'd instrument according . understand urge keep api surface area small possible order create minimal commitment apis allow internals move fast . exposing additional internals explicit warning committed api fine u , tool vendor . 've looked using ` batchedupdates ` highlight batched nature work performed react . e.g . work application getting batched properly . access component updating method ` reactreconciler ` ( ` mountcomponent ` , ` receivecomponent ` , ` unmountcomponent ` etc ) ca n't really know batch work start end . ` batchedupdates ` available reactdom ` unstable_ ` prefix , exposing ` inject ` hook would useful : 've also ( experimentally ) hooked ` eventpluginutils.executedispatchesinorder ` order capture event measure work resulting , suspect better place ( ` reacteventlistener.dispatchevent ` ? ) . case , access event system would useful . , using `` unstable_ '' prefix indicate non-committal would fine u . 've much time look 'd need access fiber instrumentation , far look like hook ` beginwork ` would useful :",
        "title_stopwords_removal_lemmatization": "expose __react_devtools_global_hook__.inject"
    },
    {
        "issue_id": 194452914,
        "title": "Provide a way for external tools to list nodes with event info",
        "label": [
            "Type: Feature Request",
            "Component: Developer Tools",
            "Resolution: Stale"
        ],
        "date": "2016-12-08T21:45:39Z",
        "status": "closed",
        "description": "I would like to add React event bubbles to the markup tree of Firefox Developer Tools. To do this I need a way to get a list of nodes and their attached event listeners.\r\n\r\nIf somebody can provide a way for me to do this it will be added within a day.\r\n\r\nIs this possible at the moment and, if not, what can be done to make this possible?",
        "remove_template_description": "I would like to add React event bubbles to the markup tree of Firefox Developer Tools. To do this I need a way to get a list of nodes and their attached event listeners.    If somebody can provide a way for me to do this it will be added within a day.    Is this possible at the moment and, if not, what can be done to make this possible?",
        "human_words": "I would like to add React event bubbles to the markup tree of Firefox Developer Tools. To do this I need a way to get a list of nodes and their attached event listeners.    If somebody can provide a way for me to do this it will be added within a day.    Is this possible at the moment and, if not, what can be done to make this possible?",
        "human_words_regrex": "I would like to add React event bubbles to the markup tree of Firefox Developer Tools. To do this I need a way to get a list of nodes and their attached event listeners. If somebody can provide a way for me to do this it will be added within a day. Is this possible at the moment and, if not, what can be done to make this possible?",
        "human_words_stopwords_removal_lemmatization": "would like add react event bubble markup tree firefox developer tool . need way get list node attached event listener . somebody provide way added within day . possible moment , , done make possible ?",
        "title_stopwords_removal_lemmatization": "provide way external tool list node event info"
    },
    {
        "issue_id": 194263457,
        "title": "Feature Request: Support auxclick event (onAuxClick)",
        "label": [
            "Type: Feature Request",
            "Component: DOM"
        ],
        "date": "2016-12-08T07:12:28Z",
        "status": "closed",
        "description": "Version 15.4.1\r\n\r\nAs starting Chrome 55, there is a new event `auxclick` to handle middle click, and `click` doesn't trigger by middle click anymore\r\nhttps://developers.google.com/web/updates/2016/10/auxclick",
        "remove_template_description": "Version 15.4.1    As starting Chrome 55, there is a new event `auxclick` to handle middle click, and `click` doesn't trigger by middle click anymore  https://developers.google.com/web/updates/2016/10/auxclick",
        "human_words": "Version 15.4.1    As starting Chrome 55, there is a new event `auxclick` to handle middle click, and `click` doesn't trigger by middle click anymore  https://developers.google.com/web/updates/2016/10/auxclick",
        "human_words_regrex": "Version 15.4.1 As starting Chrome 55, there is a new event `auxclick` to handle middle click, and `click` doesn't trigger by middle click anymore ",
        "human_words_stopwords_removal_lemmatization": "version 15.4.1 starting chrome 55 , new event ` auxclick ` handle middle click , ` click ` n't trigger middle click anymore",
        "title_stopwords_removal_lemmatization": "feature request : support auxclick event ( onauxclick )"
    },
    {
        "issue_id": 177539255,
        "title": "[RFC] Idea: forceDeepUpdate() and forceDeepUpdateWithScope(scope)",
        "label": [
            "Type: Feature Request",
            "Component: Component API"
        ],
        "date": "2016-09-16T23:21:25Z",
        "status": "closed",
        "description": "_Just going to put it out there for feedback..._\n## Motivation\n\nSubscription management comes with a cost and that eats into the wins of async rendering since it needs to be managed synchronously. Not just managing the direct subscriptions themselves but managing the dynamic dependency graph so that it can be invalidated.\n\nMeanwhile, most of what subscriptions are used for is data that will never update. At least in our apps. It is a pure loss.\n\nThe use case is when you're connecting to third party systems that aren't as easily connected to the top level data tree.\n## Proposal\n\n``` js\nthis.forceDeepUpdate();\n```\n\nSame use case as `forceUpdate`, if you are reading from global mutable state for some reason, you can use this to by-pass `shouldComponentUpdate` in an entire subtree. Basically rerender everything. When combined with Fiber this can be a low-priority update so it's not so bad for things that change a lot of things.\n\nA good example would be changing the locale. Regardless if you read a global mutable locale (like AirBnB does) or a context locale (like Yahoo) does, this lets you change it when you need to. Without needing to manage subscriptions for all those cases when you don't need it.\n\n``` js\nthis.forceDeepUpdateWithScope(scope);\n```\n\n``` js\nclass Foo extends React.Component {\n  shouldComponentUpdateForScope(scope) {\n    return scope.store === UserStore && scope.id === this.props.userID;\n  }\n  render() {\n    ...\n  }\n}\n```\n\n`forceDeepUpdateWithScope` would traverse the subtree and only start rendering if `shouldComponentUpdateForScope` returns `true` for the arbitrary `scope` argument. This allows for a bit more of a targeted update with some convenience overhead.\n\nAdditionally, React would cache the pair of `scope` and `components` that responded. For some number of scopes back. If a new component gets mounted with a `shouldComponentUpdateForScope` we might check it against the cache to see if we need to add it to the cache.\n\nEffectively this creates **lazy subscriptions**.\n\nThe use case is something like typing into an input field that then updates some global store which immediately displays in a completely different place on the page. The first character might be a bit slower but still with responsive levels and the subsequent characters are fast to update.\n## Caveat\n\nThe major downside of this proposal is that it relies on mutation. As we know, React doesn't really like mutation for many more reasons than just `shouldComponentUpdate`.\n\nThe effect in Fiber for example, is that any component that gets a higher priority update will start using the new value. Components that rely on mutable state effectively become up-prioritized which is not good. 1) It can temporarily show inconsistent data. 2) The point of making this kind of update lower priority is because it is likely to be large. Larger updates will stall the page if they take the same priority as higher priority updates. Thereby defeating the benefits of Fiber anyway.\n\nI'd like to try to come up with a variant of this API that doesn't rely on mutation.\n",
        "remove_template_description": "_Just going to put it out there for feedback..._ ## Motivation  Subscription management comes with a cost and that eats into the wins of async rendering since it needs to be managed synchronously. Not just managing the direct subscriptions themselves but managing the dynamic dependency graph so that it can be invalidated.  Meanwhile, most of what subscriptions are used for is data that will never update. At least in our apps. It is a pure loss.  The use case is when you're connecting to third party systems that aren't as easily connected to the top level data tree. ## Proposal  ``` js this.forceDeepUpdate(); ```  Same use case as `forceUpdate`, if you are reading from global mutable state for some reason, you can use this to by-pass `shouldComponentUpdate` in an entire subtree. Basically rerender everything. When combined with Fiber this can be a low-priority update so it's not so bad for things that change a lot of things.  A good example would be changing the locale. Regardless if you read a global mutable locale (like AirBnB does) or a context locale (like Yahoo) does, this lets you change it when you need to. Without needing to manage subscriptions for all those cases when you don't need it.  ``` js this.forceDeepUpdateWithScope(scope); ```  ``` js class Foo extends React.Component {   shouldComponentUpdateForScope(scope) {     return scope.store === UserStore && scope.id === this.props.userID;   }   render() {     ...   } } ```  `forceDeepUpdateWithScope` would traverse the subtree and only start rendering if `shouldComponentUpdateForScope` returns `true` for the arbitrary `scope` argument. This allows for a bit more of a targeted update with some convenience overhead.  Additionally, React would cache the pair of `scope` and `components` that responded. For some number of scopes back. If a new component gets mounted with a `shouldComponentUpdateForScope` we might check it against the cache to see if we need to add it to the cache.  Effectively this creates **lazy subscriptions**.  The use case is something like typing into an input field that then updates some global store which immediately displays in a completely different place on the page. The first character might be a bit slower but still with responsive levels and the subsequent characters are fast to update. ## Caveat  The major downside of this proposal is that it relies on mutation. As we know, React doesn't really like mutation for many more reasons than just `shouldComponentUpdate`.  The effect in Fiber for example, is that any component that gets a higher priority update will start using the new value. Components that rely on mutable state effectively become up-prioritized which is not good. 1) It can temporarily show inconsistent data. 2) The point of making this kind of update lower priority is because it is likely to be large. Larger updates will stall the page if they take the same priority as higher priority updates. Thereby defeating the benefits of Fiber anyway.  I'd like to try to come up with a variant of this API that doesn't rely on mutation.",
        "human_words": "_Just going to put it out there for feedback..._ ## Motivation  Subscription management comes with a cost and that eats into the wins of async rendering since it needs to be managed synchronously. Not just managing the direct subscriptions themselves but managing the dynamic dependency graph so that it can be invalidated.  Meanwhile, most of what subscriptions are used for is data that will never update. At least in our apps. It is a pure loss.  The use case is when you're connecting to third party systems that aren't as easily connected to the top level data tree. ## Proposal    Same use case as `forceUpdate`, if you are reading from global mutable state for some reason, you can use this to by-pass `shouldComponentUpdate` in an entire subtree. Basically rerender everything. When combined with Fiber this can be a low-priority update so it's not so bad for things that change a lot of things.  A good example would be changing the locale. Regardless if you read a global mutable locale (like AirBnB does) or a context locale (like Yahoo) does, this lets you change it when you need to. Without needing to manage subscriptions for all those cases when you don't need it.      `forceDeepUpdateWithScope` would traverse the subtree and only start rendering if `shouldComponentUpdateForScope` returns `true` for the arbitrary `scope` argument. This allows for a bit more of a targeted update with some convenience overhead.  Additionally, React would cache the pair of `scope` and `components` that responded. For some number of scopes back. If a new component gets mounted with a `shouldComponentUpdateForScope` we might check it against the cache to see if we need to add it to the cache.  Effectively this creates **lazy subscriptions**.  The use case is something like typing into an input field that then updates some global store which immediately displays in a completely different place on the page. The first character might be a bit slower but still with responsive levels and the subsequent characters are fast to update. ## Caveat  The major downside of this proposal is that it relies on mutation. As we know, React doesn't really like mutation for many more reasons than just `shouldComponentUpdate`.  The effect in Fiber for example, is that any component that gets a higher priority update will start using the new value. Components that rely on mutable state effectively become up-prioritized which is not good. 1) It can temporarily show inconsistent data. 2) The point of making this kind of update lower priority is because it is likely to be large. Larger updates will stall the page if they take the same priority as higher priority updates. Thereby defeating the benefits of Fiber anyway.  I'd like to try to come up with a variant of this API that doesn't rely on mutation.",
        "human_words_regrex": "_Just going to put it out there for feedback..._ ## Motivation Subscription management comes with a cost and that eats into the wins of async rendering since it needs to be managed synchronously. Not just managing the direct subscriptions themselves but managing the dynamic dependency graph so that it can be invalidated. Meanwhile, most of what subscriptions are used for is data that will never update. At least in our apps. It is a pure loss. The use case is when you're connecting to third party systems that aren't as easily connected to the top level data tree. ## Proposal Same use case as `forceUpdate`, if you are reading from global mutable state for some reason, you can use this to by-pass `shouldComponentUpdate` in an entire subtree. Basically rerender everything. When combined with Fiber this can be a low-priority update so it's not so bad for things that change a lot of things. A good example would be changing the locale. Regardless if you read a global mutable locale (like AirBnB does) or a context locale (like Yahoo) does, this lets you change it when you need to. Without needing to manage subscriptions for all those cases when you don't need it. `forceDeepUpdateWithScope` would traverse the subtree and only start rendering if `shouldComponentUpdateForScope` returns `true` for the arbitrary `scope` argument. This allows for a bit more of a targeted update with some convenience overhead. Additionally, React would cache the pair of `scope` and `components` that responded. For some number of scopes back. If a new component gets mounted with a `shouldComponentUpdateForScope` we might check it against the cache to see if we need to add it to the cache. Effectively this creates **lazy subscriptions**. The use case is something like typing into an input field that then updates some global store which immediately displays in a completely different place on the page. The first character might be a bit slower but still with responsive levels and the subsequent characters are fast to update. ## Caveat The major downside of this proposal is that it relies on mutation. As we know, React doesn't really like mutation for many more reasons than just `shouldComponentUpdate`. The effect in Fiber for example, is that any component that gets a higher priority update will start using the new value. Components that rely on mutable state effectively become up-prioritized which is not good. 1) It can temporarily show inconsistent data. 2) The point of making this kind of update lower priority is because it is likely to be large. Larger updates will stall the page if they take the same priority as higher priority updates. Thereby defeating the benefits of Fiber anyway. I'd like to try to come up with a variant of this API that doesn't rely on mutation.",
        "human_words_stopwords_removal_lemmatization": "_just going put feedback ... _ # # motivation subscription management come cost eats win async rendering since need managed synchronously . managing direct subscription managing dynamic dependency graph invalidated . meanwhile , subscription used data never update . least apps . pure loss . use case 're connecting third party system n't easily connected top level data tree . # # proposal use case ` forceupdate ` , reading global mutable state reason , use by-pass ` shouldcomponentupdate ` entire subtree . basically rerender everything . combined fiber low-priority update 's bad thing change lot thing . good example would changing locale . regardless read global mutable locale ( like airbnb ) context locale ( like yahoo ) , let change need . without needing manage subscription case n't need . ` forcedeepupdatewithscope ` would traverse subtree start rendering ` shouldcomponentupdateforscope ` return ` true ` arbitrary ` scope ` argument . allows bit targeted update convenience overhead . additionally , react would cache pair ` scope ` ` component ` responded . number scope back . new component get mounted ` shouldcomponentupdateforscope ` might check cache see need add cache . effectively creates * * lazy subscription * * . use case something like typing input field update global store immediately display completely different place page . first character might bit slower still responsive level subsequent character fast update . # # caveat major downside proposal relies mutation . know , react n't really like mutation many reason ` shouldcomponentupdate ` . effect fiber example , component get higher priority update start using new value . component rely mutable state effectively become up-prioritized good . 1 ) temporarily show inconsistent data . 2 ) point making kind update lower priority likely large . larger update stall page take priority higher priority update . thereby defeating benefit fiber anyway . 'd like try come variant api n't rely mutation .",
        "title_stopwords_removal_lemmatization": "[ rfc ] idea : forcedeepupdate ( ) forcedeepupdatewithscope ( scope )"
    },
    {
        "issue_id": 176751171,
        "title": "Skip comparing known constant props during reconciliation",
        "label": [
            "Type: Feature Request",
            "Component: Optimizing Compiler",
            "Resolution: Stale"
        ],
        "date": "2016-09-13T21:12:40Z",
        "status": "closed",
        "description": "**Do you want to request a _feature_ or report a _bug_?**\n\n_Feature_\n\n**What is the current behavior?**\n\nCurrently, whether a prop is expected to change or not, it is passed through props. There is no way for us as developers to mark a prop as fixed (should never change over the lifecycle of a component).\n\n**What is the expected behavior?**\n\nThese would _not_ be static properties, i.e. they can change from instance to instance. But they are created at initial render and never change (`===`) from the original. Ideally, though I'm not sure on implementation, they would also always be `deepEqual` to the original (perhaps something like `Object.freeze(Object.assign({}, originalObject))`.\n\nAdvantages to allowing props to be explicitly marked as fixed:\n1. shouldComponentUpdate would be better if a lot if certain props automatically don't / can't change\n2. Allow for errors / warnings when a prop marked as fixed is changed after the initial render.\n3. Possible compiler / render optimizations knowing that particular props will never change over the course of multiple renders. In particular, if a component only has fixed props (including children), we know the render output is fixed, and we can just inline that output into the parent render output.\n\nOne possible API would allow a separate fixedProps category.\n\n`React.createElement(MyComponent, { name: 'Hello' }, children, { message: 'Always this one string' })` (maintain signature)\n\nFor JSX, one (very mediocre) idea would be something like:\n`<MyComponent name=\"Hello\" $fixed.message=\"Always this one string\" />`\n\nAnother would be a separate prop called $fixed or something similar.\n\n`React.createElement(MyComponent, { name: 'Hello', $fixed: { message: 'Always this one string' } }, children)`\n`<MyComponent name=\"Hello\" $fixed={{ message: 'Always this one string' }} />`\n\nIt would be critical that `props` and `fixedProps` would be merged when the component is actually created. `this.props` would always contain all props, functional components still get one arg, and thus nobody has to rewrite render for any component.\n",
        "remove_template_description": "**Do you want to request a _feature_ or report a _bug_?**  _Feature_  **What is the current behavior?**  Currently, whether a prop is expected to change or not, it is passed through props. There is no way for us as developers to mark a prop as fixed (should never change over the lifecycle of a component).  **What is the expected behavior?**  These would _not_ be static properties, i.e. they can change from instance to instance. But they are created at initial render and never change (`===`) from the original. Ideally, though I'm not sure on implementation, they would also always be `deepEqual` to the original (perhaps something like `Object.freeze(Object.assign({}, originalObject))`.  Advantages to allowing props to be explicitly marked as fixed: 1. shouldComponentUpdate would be better if a lot if certain props automatically don't / can't change 2. Allow for errors / warnings when a prop marked as fixed is changed after the initial render. 3. Possible compiler / render optimizations knowing that particular props will never change over the course of multiple renders. In particular, if a component only has fixed props (including children), we know the render output is fixed, and we can just inline that output into the parent render output.  One possible API would allow a separate fixedProps category.  `React.createElement(MyComponent, { name: 'Hello' }, children, { message: 'Always this one string' })` (maintain signature)  For JSX, one (very mediocre) idea would be something like: `<MyComponent name=\"Hello\" $fixed.message=\"Always this one string\" />`  Another would be a separate prop called $fixed or something similar.  `React.createElement(MyComponent, { name: 'Hello', $fixed: { message: 'Always this one string' } }, children)` `<MyComponent name=\"Hello\" $fixed={{ message: 'Always this one string' }} />`  It would be critical that `props` and `fixedProps` would be merged when the component is actually created. `this.props` would always contain all props, functional components still get one arg, and thus nobody has to rewrite render for any component.",
        "human_words": "**Do you want to request a _feature_ or report a _bug_?**  _Feature_  **What is the current behavior?**  Currently, whether a prop is expected to change or not, it is passed through props. There is no way for us as developers to mark a prop as fixed (should never change over the lifecycle of a component).  **What is the expected behavior?**  These would _not_ be static properties, i.e. they can change from instance to instance. But they are created at initial render and never change (`===`) from the original. Ideally, though I'm not sure on implementation, they would also always be `deepEqual` to the original (perhaps something like `Object.freeze(Object.assign({}, originalObject))`.  Advantages to allowing props to be explicitly marked as fixed: 1. shouldComponentUpdate would be better if a lot if certain props automatically don't / can't change 2. Allow for errors / warnings when a prop marked as fixed is changed after the initial render. 3. Possible compiler / render optimizations knowing that particular props will never change over the course of multiple renders. In particular, if a component only has fixed props (including children), we know the render output is fixed, and we can just inline that output into the parent render output.  One possible API would allow a separate fixedProps category.  `React.createElement(MyComponent, { name: 'Hello' }, children, { message: 'Always this one string' })` (maintain signature)  For JSX, one (very mediocre) idea would be something like: `<MyComponent name=\"Hello\" $fixed.message=\"Always this one string\" />`  Another would be a separate prop called $fixed or something similar.  `React.createElement(MyComponent, { name: 'Hello', $fixed: { message: 'Always this one string' } }, children)` `<MyComponent name=\"Hello\" $fixed={{ message: 'Always this one string' }} />`  It would be critical that `props` and `fixedProps` would be merged when the component is actually created. `this.props` would always contain all props, functional components still get one arg, and thus nobody has to rewrite render for any component.",
        "human_words_regrex": "**Do you want to request a _feature_ or report a _bug_?** _Feature_ **What is the current behavior?** Currently, whether a prop is expected to change or not, it is passed through props. There is no way for us as developers to mark a prop as fixed (should never change over the lifecycle of a component). **What is the expected behavior?** These would _not_ be static properties, i.e. they can change from instance to instance. But they are created at initial render and never change (`===`) from the original. Ideally, though I'm not sure on implementation, they would also always be `deepEqual` to the original (perhaps something like `Object.freeze(Object.assign({}, originalObject))`. Advantages to allowing props to be explicitly marked as fixed: 1. shouldComponentUpdate would be better if a lot if certain props automatically don't / can't change 2. Allow for errors / warnings when a prop marked as fixed is changed after the initial render. 3. Possible compiler / render optimizations knowing that particular props will never change over the course of multiple renders. In particular, if a component only has fixed props (including children), we know the render output is fixed, and we can just inline that output into the parent render output. One possible API would allow a separate fixedProps category. `React.createElement(MyComponent, { name: 'Hello' }, children, { message: 'Always this one string' })` (maintain signature) For JSX, one (very mediocre) idea would be something like: `` Another would be a separate prop called $fixed or something similar. `React.createElement(MyComponent, { name: 'Hello', $fixed: { message: 'Always this one string' } }, children)` `` It would be critical that `props` and `fixedProps` would be merged when the component is actually created. `this.props` would always contain all props, functional components still get one arg, and thus nobody has to rewrite render for any component.",
        "human_words_stopwords_removal_lemmatization": "* * want request _feature_ report _bug_ ? * * _feature_ * * current behavior ? * * currently , whether prop expected change , passed prop . way u developer mark prop fixed ( never change lifecycle component ) . * * expected behavior ? * * would _not_ static property , i.e . change instance instance . created initial render never change ( ` === ` ) original . ideally , though 'm sure implementation , would also always ` deepequal ` original ( perhaps something like ` object.freeze ( object.assign ( { } , originalobject ) ) ` . advantage allowing prop explicitly marked fixed : 1. shouldcomponentupdate would better lot certain prop automatically n't / ca n't change 2. allow error / warning prop marked fixed changed initial render . 3. possible compiler / render optimization knowing particular prop never change course multiple render . particular , component fixed prop ( including child ) , know render output fixed , inline output parent render output . one possible api would allow separate fixedprops category . ` react.createelement ( mycomponent , { name : 'hello ' } , child , { message : 'always one string ' } ) ` ( maintain signature ) jsx , one ( mediocre ) idea would something like : `` another would separate prop called $ fixed something similar . ` react.createelement ( mycomponent , { name : 'hello ' , $ fixed : { message : 'always one string ' } } , child ) ` `` would critical ` prop ` ` fixedprops ` would merged component actually created . ` this.props ` would always contain prop , functional component still get one arg , thus nobody rewrite render component .",
        "title_stopwords_removal_lemmatization": "skip comparing known constant prop reconciliation"
    },
    {
        "issue_id": 173991283,
        "title": "ReactTestRenderer custom depth rendering",
        "label": [
            "Type: Feature Request",
            "Component: Test Renderer",
            "Resolution: Stale"
        ],
        "date": "2016-08-30T11:08:45Z",
        "status": "closed",
        "description": "**Do you want to request a _feature_ or report a _bug_?**\nFeature\n\n**What is the current behavior?**\n\n``` jsx\n// MyComponent.js\nimport React from \"react\";\nimport ThirdPartyComponent from 'third-party-component';\n\nfunction MyInternalComponent() {\n  return <div>test</div>;\n}\n\nexport default function MyComponent() {\n  return <div>\n    <MyInternalComponent></MyInternalComponent>\n    <ThirdPartyComponent someProp={true}></ThirdPartyComponent>\n  </div>;\n}\n\n// test.js\nimport ReactTestRenderer from \"react-test-renderer\";\nimport React from \"react\";\nimport MyComponent from \"./MyComponent.js\";\n\nconst renderer = ReactTestRenderer.create(<MyComponent/>);\n\nconsole.log(renderer.toJSON());\n```\n\nThis renders whole tree of DOM which is actually expected behaviour. The problem is, that I dont want render `ThirdPartyComponent`, only `MyInternalComponent`.  Shallow renderer isnt answer because shallow would not render `MyInternalComponent` at all. Which is problem because it's hard to divide component into smaller, internal chunks.\n\nI have done some work in order to achieve this in #5513. It was fully working patch. It was done as part of ShallowRenderer but now we have TestRenderer. Besides this patch is pretty old so resolving conflicts would be very hard.\n\n**What is the expected behavior?**\n\nI would love to provide \"blacklist\" of components which I don't want to render:\n\n``` js\nimport ThirdPartyComponent from 'third-party-component';\n//...\n\nconst renderer = ReactTestRenderer.create(\n    <MyComponent/>, \n    {\n        dontRender: [ThirdPartyComponent]\n    }\n);\n```\n\nThis would return jsx:\n\n``` js\n<div>\n    <div>test</div>\n    <ThirdPartyComponent someProp={true}></ThirdPartyComponent>\n</div>\n```\n\nSo we can test props returned for `ThirdPartyComponent` and internal logic.\n\nIt's combine of full and shallow renderer.\n\nI have some ideas of implementation but i dont want waste my time writing code which won't be marged into master anyway. \n\nThis possibly would allow to resolve https://github.com/airbnb/enzyme/issues/250.\n",
        "remove_template_description": "**Do you want to request a _feature_ or report a _bug_?** Feature  **What is the current behavior?**  ``` jsx // MyComponent.js import React from \"react\"; import ThirdPartyComponent from 'third-party-component';  function MyInternalComponent() {   return <div>test</div>; }  export default function MyComponent() {   return <div>     <MyInternalComponent></MyInternalComponent>     <ThirdPartyComponent someProp={true}></ThirdPartyComponent>   </div>; }  // test.js import ReactTestRenderer from \"react-test-renderer\"; import React from \"react\"; import MyComponent from \"./MyComponent.js\";  const renderer = ReactTestRenderer.create(<MyComponent/>);  console.log(renderer.toJSON()); ```  This renders whole tree of DOM which is actually expected behaviour. The problem is, that I dont want render `ThirdPartyComponent`, only `MyInternalComponent`.  Shallow renderer isnt answer because shallow would not render `MyInternalComponent` at all. Which is problem because it's hard to divide component into smaller, internal chunks.  I have done some work in order to achieve this in #5513. It was fully working patch. It was done as part of ShallowRenderer but now we have TestRenderer. Besides this patch is pretty old so resolving conflicts would be very hard.  **What is the expected behavior?**  I would love to provide \"blacklist\" of components which I don't want to render:  ``` js import ThirdPartyComponent from 'third-party-component'; //...  const renderer = ReactTestRenderer.create(     <MyComponent/>,      {         dontRender: [ThirdPartyComponent]     } ); ```  This would return jsx:  ``` js <div>     <div>test</div>     <ThirdPartyComponent someProp={true}></ThirdPartyComponent> </div> ```  So we can test props returned for `ThirdPartyComponent` and internal logic.  It's combine of full and shallow renderer.  I have some ideas of implementation but i dont want waste my time writing code which won't be marged into master anyway.   This possibly would allow to resolve https://github.com/airbnb/enzyme/issues/250.",
        "human_words": "**Do you want to request a _feature_ or report a _bug_?** Feature  **What is the current behavior?**    This renders whole tree of DOM which is actually expected behaviour. The problem is, that I dont want render `ThirdPartyComponent`, only `MyInternalComponent`.  Shallow renderer isnt answer because shallow would not render `MyInternalComponent` at all. Which is problem because it's hard to divide component into smaller, internal chunks.  I have done some work in order to achieve this in #5513. It was fully working patch. It was done as part of ShallowRenderer but now we have TestRenderer. Besides this patch is pretty old so resolving conflicts would be very hard.  **What is the expected behavior?**  I would love to provide \"blacklist\" of components which I don't want to render:    This would return jsx:    So we can test props returned for `ThirdPartyComponent` and internal logic.  It's combine of full and shallow renderer.  I have some ideas of implementation but i dont want waste my time writing code which won't be marged into master anyway.   This possibly would allow to resolve https://github.com/airbnb/enzyme/issues/250.",
        "human_words_regrex": "**Do you want to request a _feature_ or report a _bug_?** Feature **What is the current behavior?** This renders whole tree of DOM which is actually expected behaviour. The problem is, that I dont want render `ThirdPartyComponent`, only `MyInternalComponent`. Shallow renderer isnt answer because shallow would not render `MyInternalComponent` at all. Which is problem because it's hard to divide component into smaller, internal chunks. I have done some work in order to achieve this in #5513. It was fully working patch. It was done as part of ShallowRenderer but now we have TestRenderer. Besides this patch is pretty old so resolving conflicts would be very hard. **What is the expected behavior?** I would love to provide \"blacklist\" of components which I don't want to render: This would return jsx: So we can test props returned for `ThirdPartyComponent` and internal logic. It's combine of full and shallow renderer. I have some ideas of implementation but i dont want waste my time writing code which won't be marged into master anyway. This possibly would allow to resolve ",
        "human_words_stopwords_removal_lemmatization": "* * want request _feature_ report _bug_ ? * * feature * * current behavior ? * * render whole tree dom actually expected behaviour . problem , dont want render ` thirdpartycomponent ` , ` myinternalcomponent ` . shallow renderer isnt answer shallow would render ` myinternalcomponent ` . problem 's hard divide component smaller , internal chunk . done work order achieve # 5513. fully working patch . done part shallowrenderer testrenderer . besides patch pretty old resolving conflict would hard . * * expected behavior ? * * would love provide `` blacklist '' component n't want render : would return jsx : test prop returned ` thirdpartycomponent ` internal logic . 's combine full shallow renderer . idea implementation dont want waste time writing code wo n't marged master anyway . possibly would allow resolve",
        "title_stopwords_removal_lemmatization": "reacttestrenderer custom depth rendering"
    },
    {
        "issue_id": 172927927,
        "title": "Support Symbol keys for props",
        "label": [
            "Type: Feature Request",
            "Component: Component API"
        ],
        "date": "2016-08-24T11:29:59Z",
        "status": "closed",
        "description": "**Do you want to request a _feature_ or report a _bug_?**\nI want to report a bug\n\n**What is the current behavior?**\n`render()` doesn't receive props with Symbol keys (for example, `{[Symbol()]: 'lol'}`). I guess it is because of `hasOwnProperty` in [ReactElement.createElement](https://github.com/facebook/react/blob/a56e105081e27877a2ecbfdc8d591e3b151b2af1/src/isomorphic/classic/element/ReactElement.js#L223)\n\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via jsfiddle or similar.**\nhttps://jsfiddle.net/sh2xbm3x/1/\n\n**What is the expected behavior?**\nSymbol-keyed `props` passed to `render()` \n\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\nEvery single one, as far as I know\n",
        "remove_template_description": "**Do you want to request a _feature_ or report a _bug_?** I want to report a bug  **What is the current behavior?** `render()` doesn't receive props with Symbol keys (for example, `{[Symbol()]: 'lol'}`). I guess it is because of `hasOwnProperty` in [ReactElement.createElement](https://github.com/facebook/react/blob/a56e105081e27877a2ecbfdc8d591e3b151b2af1/src/isomorphic/classic/element/ReactElement.js#L223)  **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via jsfiddle or similar.** https://jsfiddle.net/sh2xbm3x/1/  **What is the expected behavior?** Symbol-keyed `props` passed to `render()`   **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** Every single one, as far as I know",
        "human_words": "**Do you want to request a _feature_ or report a _bug_?** I want to report a bug  **What is the current behavior?** `render()` doesn't receive props with Symbol keys (for example, `{[Symbol()]: 'lol'}`). I guess it is because of `hasOwnProperty` in [ReactElement.createElement](https://github.com/facebook/react/blob/a56e105081e27877a2ecbfdc8d591e3b151b2af1/src/isomorphic/classic/element/ReactElement.js#L223)  **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via jsfiddle or similar.** https://jsfiddle.net/sh2xbm3x/1/  **What is the expected behavior?** Symbol-keyed `props` passed to `render()`   **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** Every single one, as far as I know",
        "human_words_regrex": "**Do you want to request a _feature_ or report a _bug_?** I want to report a bug **What is the current behavior?** `render()` doesn't receive props with Symbol keys (for example, `{ **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via jsfiddle or similar.**  **What is the expected behavior?** Symbol-keyed `props` passed to `render()` **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** Every single one, as far as I know",
        "human_words_stopwords_removal_lemmatization": "* * want request _feature_ report _bug_ ? * * want report bug * * current behavior ? * * ` render ( ) ` n't receive prop symbol key ( example , ` { * * current behavior bug , please provide step reproduce possible minimal demo problem via jsfiddle similar . * * * * expected behavior ? * * symbol-keyed ` prop ` passed ` render ( ) ` * * version react , browser / o affected issue ? work previous version react ? * * every single one , far know",
        "title_stopwords_removal_lemmatization": "support symbol key prop"
    },
    {
        "issue_id": 169116087,
        "title": "shouldComponentUpdate doesn't work well if component accepts children",
        "label": [
            "Type: Feature Request",
            "Component: Component API",
            "Resolution: Stale"
        ],
        "date": "2016-08-03T12:08:31Z",
        "status": "closed",
        "description": "React's shouldComponentUpdate based performance improvements work great for improving the performance of medium-weight components with large numbers of instances. They even work well with event handlers, as you can ignore event handler changes and instead pass a locally bound method that'll access `this.props.on*` on demand. However this all fails apart you start passing react elements to pure components.\n\n``` js\n'use strict';\nimport React, {Component, PropTypes} from 'react';\nimport ReactDOM from 'react-dom';\nimport shallowEqual from 'recompose/shallowEqual';\n// shallowEqualExcluding: Fictional function that works like shallowEqual, but ignores changes to a list of props passed as the third argument\n\nclass Button extends Component {\n    static propTypes = {\n        icon: PropTypes.node.isRequired,\n        onClick: PropTypes.func\n    };\n\n    onClick = (e) => {\n        this.props.onClick(e);\n    };\n\n    shouldComponentUpdate(nextProps) {\n        // @note Doesn't actually work\n        return shallowEqualExcluding(this.props, nextProps, ['onClick']);\n    }\n\n    render() {\n        const {icon} = this.props;\n\n        return (\n            <button onClick={this.onClick}>\n                {icon}\n                {/*React.cloneElement(icon, {ref: (icon) => this.iconRef = icon})*/}\n            </button>\n        );\n    }\n}\n\nclass Icon extends Component {\n    static propTypes = {\n        name: PropTypes.string.isRequired,\n        color: PropTypes.string\n    };\n\n    shouldComponentUpdate(nextProps) {\n        return shallowEqual(this.props, nextProps);\n    }\n\n    render() {\n        const {name, color} = this.props;\n        return getSvgIcon(name, color);\n    }\n}\n\nconst nilClick = () => {};\nReactDOM.render(<Button onClick={() => alert('Clicked!')} icon={<Icon name='done'} />, document.querySelector('#container'));\nReactDOM.render(<Button onClick={nilClick} icon={<Icon name='done'} />, document.querySelector('#container')); // 2nd invovation\nReactDOM.render(<Button onClick={nilClick} icon={<Icon name='cancel'} />, document.querySelector('#container')); // 3rd invovation\n```\n\nGiven this sample; A `<Button />` component that expects an icon to be passed as an `icon` prop and a simple `<Icon />`. Both are pure components and Button is also coded to not re-render when`onClick` is changed. Pretend that Button actually has a heavy `render()` but its props and state don't change frequently.\n\nOn the second invocation, Icon should not require any prop change or render and Button should have its `onClick` prop changed but not require a render.\nOn the third invocation, Icon should require a render while Button itself does not need to render except for the change to Icon.\n\nHowever in practice Button will always re-render, including during the second invocation when nothing changes.\n\nThis is because `<Icon />` will always result in a new instance and will never be the same.\n\nNormally you could work around this within the component itself, without telling users they have to store `<Icon />` in a variable until they think they need to change its props; for functions you could pass a function that will use `this.props.*` itself and for objects you can do a deep comparison if you know the structure of the object. But for react elements, even though `shouldComponentUpdate` allows React to know if the current component has a render dependency on a sub-component, you do not have access to this information so Button cannot tell if Icon requires a render.\n\nIn practice this can turn out to be a problem when you're writing some libraries rather than an application. Notably [Material UI](http://www.material-ui.com/) suffers from this problem in production. `EnhancedSwitch`'s `render()` is not light; `EnhancedSwitch` is used by `RadioButton` and `Checkbox`; both use a `checkedIcon` and `uncheckedIcon` React element prop; you can reasonably have 100 checkboxes on one page; even if they were pure, they cannot identify whether an icon requires an update; as a result, a render of the component containing the checkboxes to check a single checkbox will result in the `render()` of all 100 `EnhancedSwitch` instances.\n\nI can think of a few ideas on\u00a0what type of API could be added to React to solve this issue.\n## shouldComponentUpdate helper\n\nThe most obvious API would be a top-level React function that given the instance context, old ReactElement, and new ReactElement would return the result of a Component's `shouldComponentUpdate`. Then heavy parent components can use that to implement a `shouldComponentUpdate` that is aware of render dependencies in its children.\n(As a bonus, theoretically you could temporarily remember this while you're walking the current tree; then instead of calling `shouldComponentUpdate` multiple times for every (potentially nested) component the result is simply that `shouldComponentUpdate` calls are raised up to the highest level where a component is render-dependent on them)\n\n`React.shouldComponentUpdate(this, this.props.icon, nextProps.icon)`\n\nHowever I expect the problem we have with this is that `shouldComponentUpdate` is also responsible for state dependent updates and `this` is supposed to be a rendered instance, not a ReactElement instance. While you know `context` from passing the current instance, you do not have a reference to the state from either of the props.\n## ref based shouldComponentUpdate helper\n\nThe second most obvious API would be a `shouldComponentUpdate` helper that instead uses a ref.\n\n`React.shouldComponentUpdate(this.iconRef, nextProps.icon)`\n\nThe downside to this is that to get a ref for a component you didn't create, you inevitably have to use `React.cloneElement`.\n## render passthrough\n\nThe next idea I had was a render passthrough. A way during the render process for a component to say \"I do not need a render()/update, but these children of mine may\" which would tell React to skip render() and then run `shouldComponentUpdate` on the instances deeper in the tree.\n\nHowever those components only know if they need updates if you pass them the new props; so a passthrough won't work. We'd instead need a way to tell react that it should not run `render()` but do pass on an update to a specific component instance\n\n`this.renderRef(this.iconRef, nextProps.icon);`\n\nThe advantage of this over using `shouldComponentUpdate` is that instead of only allowing medium components wrapping light components to only `render()` when a child requires it; we also allow heavy components to never `render()` unless they themselves require it, while still allowing them to permit their light children to update.\n# partial renders\n\nThat `shouldComponentUpdate` based `renderRef` only applying updates to a component child feels somewhat awkward and forced though. So a more robust idea might be a partial render lifecycle that optionally runs when `shouldComponentUpdate => false` and can call for the render of a sub-tree that belongs to the current component.\n\n``` js\nclass HeavyComponent extends Component {\n    shouldComponentUpdate(nextProps) {\n        // Ignore icon and children\n        return nextProps.text !== this.props.text;\n    }\n\n    render() {\n        const {text, icon, children} = this.props;\n\n        text = doSomethingAbsurdlyCpuIntensiveAndHardToFactorOutOfThisComponent(text);\n\n        return (\n            <div>\n                <h2>\n                    {React.cloneElement(icon, {ref: (icon) => this.iconRef = icon})}\n                    {text}\n                </h2>\n                <Wrapper ref='subtree'>\n                    {children}\n                </Wrapper>\n        );\n    }\n\n    componentSkippedRender(nextProps/*, nextState*/) {\n        this.subRender(this.iconRef, React.cloneElement(icon, {ref: (icon) => this.iconRef = icon}));\n\n        this.subRender(\n            this.refs.subtree,\n            <Wrapper ref='subtree'>\n                {children}\n            </Wrapper>\n        );\n    }\n}\n```\n\nThough `this.subRender` probably has potential for conflicts, so I expect the most react-line way to name that would be something like `React.renderSubtreeIntoComponent(parentComponent, nextElement, component)` which would be invoked using `React.renderSubtreeIntoComponent(this, /* subtree */, this.refs.subtree);`.\n\nThe `<Wrapper>` I used would be a really light component that probably would just render its children. It's there because `React.renderSubtreeIntoComponent` should probably not accept dom refs; this should be part of React lifecycle/walker, not part of client side browser only react-dom like `ReactDOM.unstable_renderSubtreeIntoContainer`.\n",
        "remove_template_description": "React's shouldComponentUpdate based performance improvements work great for improving the performance of medium-weight components with large numbers of instances. They even work well with event handlers, as you can ignore event handler changes and instead pass a locally bound method that'll access `this.props.on*` on demand. However this all fails apart you start passing react elements to pure components.  ``` js 'use strict'; import React, {Component, PropTypes} from 'react'; import ReactDOM from 'react-dom'; import shallowEqual from 'recompose/shallowEqual'; // shallowEqualExcluding: Fictional function that works like shallowEqual, but ignores changes to a list of props passed as the third argument  class Button extends Component {     static propTypes = {         icon: PropTypes.node.isRequired,         onClick: PropTypes.func     };      onClick = (e) => {         this.props.onClick(e);     };      shouldComponentUpdate(nextProps) {         // @note Doesn't actually work         return shallowEqualExcluding(this.props, nextProps, ['onClick']);     }      render() {         const {icon} = this.props;          return (             <button onClick={this.onClick}>                 {icon}                 {/*React.cloneElement(icon, {ref: (icon) => this.iconRef = icon})*/}             </button>         );     } }  class Icon extends Component {     static propTypes = {         name: PropTypes.string.isRequired,         color: PropTypes.string     };      shouldComponentUpdate(nextProps) {         return shallowEqual(this.props, nextProps);     }      render() {         const {name, color} = this.props;         return getSvgIcon(name, color);     } }  const nilClick = () => {}; ReactDOM.render(<Button onClick={() => alert('Clicked!')} icon={<Icon name='done'} />, document.querySelector('#container')); ReactDOM.render(<Button onClick={nilClick} icon={<Icon name='done'} />, document.querySelector('#container')); // 2nd invovation ReactDOM.render(<Button onClick={nilClick} icon={<Icon name='cancel'} />, document.querySelector('#container')); // 3rd invovation ```  Given this sample; A `<Button />` component that expects an icon to be passed as an `icon` prop and a simple `<Icon />`. Both are pure components and Button is also coded to not re-render when`onClick` is changed. Pretend that Button actually has a heavy `render()` but its props and state don't change frequently.  On the second invocation, Icon should not require any prop change or render and Button should have its `onClick` prop changed but not require a render. On the third invocation, Icon should require a render while Button itself does not need to render except for the change to Icon.  However in practice Button will always re-render, including during the second invocation when nothing changes.  This is because `<Icon />` will always result in a new instance and will never be the same.  Normally you could work around this within the component itself, without telling users they have to store `<Icon />` in a variable until they think they need to change its props; for functions you could pass a function that will use `this.props.*` itself and for objects you can do a deep comparison if you know the structure of the object. But for react elements, even though `shouldComponentUpdate` allows React to know if the current component has a render dependency on a sub-component, you do not have access to this information so Button cannot tell if Icon requires a render.  In practice this can turn out to be a problem when you're writing some libraries rather than an application. Notably [Material UI](http://www.material-ui.com/) suffers from this problem in production. `EnhancedSwitch`'s `render()` is not light; `EnhancedSwitch` is used by `RadioButton` and `Checkbox`; both use a `checkedIcon` and `uncheckedIcon` React element prop; you can reasonably have 100 checkboxes on one page; even if they were pure, they cannot identify whether an icon requires an update; as a result, a render of the component containing the checkboxes to check a single checkbox will result in the `render()` of all 100 `EnhancedSwitch` instances.  I can think of a few ideas on\u00a0what type of API could be added to React to solve this issue. ## shouldComponentUpdate helper  The most obvious API would be a top-level React function that given the instance context, old ReactElement, and new ReactElement would return the result of a Component's `shouldComponentUpdate`. Then heavy parent components can use that to implement a `shouldComponentUpdate` that is aware of render dependencies in its children. (As a bonus, theoretically you could temporarily remember this while you're walking the current tree; then instead of calling `shouldComponentUpdate` multiple times for every (potentially nested) component the result is simply that `shouldComponentUpdate` calls are raised up to the highest level where a component is render-dependent on them)  `React.shouldComponentUpdate(this, this.props.icon, nextProps.icon)`  However I expect the problem we have with this is that `shouldComponentUpdate` is also responsible for state dependent updates and `this` is supposed to be a rendered instance, not a ReactElement instance. While you know `context` from passing the current instance, you do not have a reference to the state from either of the props. ## ref based shouldComponentUpdate helper  The second most obvious API would be a `shouldComponentUpdate` helper that instead uses a ref.  `React.shouldComponentUpdate(this.iconRef, nextProps.icon)`  The downside to this is that to get a ref for a component you didn't create, you inevitably have to use `React.cloneElement`. ## render passthrough  The next idea I had was a render passthrough. A way during the render process for a component to say \"I do not need a render()/update, but these children of mine may\" which would tell React to skip render() and then run `shouldComponentUpdate` on the instances deeper in the tree.  However those components only know if they need updates if you pass them the new props; so a passthrough won't work. We'd instead need a way to tell react that it should not run `render()` but do pass on an update to a specific component instance  `this.renderRef(this.iconRef, nextProps.icon);`  The advantage of this over using `shouldComponentUpdate` is that instead of only allowing medium components wrapping light components to only `render()` when a child requires it; we also allow heavy components to never `render()` unless they themselves require it, while still allowing them to permit their light children to update. # partial renders  That `shouldComponentUpdate` based `renderRef` only applying updates to a component child feels somewhat awkward and forced though. So a more robust idea might be a partial render lifecycle that optionally runs when `shouldComponentUpdate => false` and can call for the render of a sub-tree that belongs to the current component.  ``` js class HeavyComponent extends Component {     shouldComponentUpdate(nextProps) {         // Ignore icon and children         return nextProps.text !== this.props.text;     }      render() {         const {text, icon, children} = this.props;          text = doSomethingAbsurdlyCpuIntensiveAndHardToFactorOutOfThisComponent(text);          return (             <div>                 <h2>                     {React.cloneElement(icon, {ref: (icon) => this.iconRef = icon})}                     {text}                 </h2>                 <Wrapper ref='subtree'>                     {children}                 </Wrapper>         );     }      componentSkippedRender(nextProps/*, nextState*/) {         this.subRender(this.iconRef, React.cloneElement(icon, {ref: (icon) => this.iconRef = icon}));          this.subRender(             this.refs.subtree,             <Wrapper ref='subtree'>                 {children}             </Wrapper>         );     } } ```  Though `this.subRender` probably has potential for conflicts, so I expect the most react-line way to name that would be something like `React.renderSubtreeIntoComponent(parentComponent, nextElement, component)` which would be invoked using `React.renderSubtreeIntoComponent(this, /* subtree */, this.refs.subtree);`.  The `<Wrapper>` I used would be a really light component that probably would just render its children. It's there because `React.renderSubtreeIntoComponent` should probably not accept dom refs; this should be part of React lifecycle/walker, not part of client side browser only react-dom like `ReactDOM.unstable_renderSubtreeIntoContainer`.",
        "human_words": "React's shouldComponentUpdate based performance improvements work great for improving the performance of medium-weight components with large numbers of instances. They even work well with event handlers, as you can ignore event handler changes and instead pass a locally bound method that'll access `this.props.on*` on demand. However this all fails apart you start passing react elements to pure components.    Given this sample; A `<Button />` component that expects an icon to be passed as an `icon` prop and a simple `<Icon />`. Both are pure components and Button is also coded to not re-render when`onClick` is changed. Pretend that Button actually has a heavy `render()` but its props and state don't change frequently.  On the second invocation, Icon should not require any prop change or render and Button should have its `onClick` prop changed but not require a render. On the third invocation, Icon should require a render while Button itself does not need to render except for the change to Icon.  However in practice Button will always re-render, including during the second invocation when nothing changes.  This is because `<Icon />` will always result in a new instance and will never be the same.  Normally you could work around this within the component itself, without telling users they have to store `<Icon />` in a variable until they think they need to change its props; for functions you could pass a function that will use `this.props.*` itself and for objects you can do a deep comparison if you know the structure of the object. But for react elements, even though `shouldComponentUpdate` allows React to know if the current component has a render dependency on a sub-component, you do not have access to this information so Button cannot tell if Icon requires a render.  In practice this can turn out to be a problem when you're writing some libraries rather than an application. Notably [Material UI](http://www.material-ui.com/) suffers from this problem in production. `EnhancedSwitch`'s `render()` is not light; `EnhancedSwitch` is used by `RadioButton` and `Checkbox`; both use a `checkedIcon` and `uncheckedIcon` React element prop; you can reasonably have 100 checkboxes on one page; even if they were pure, they cannot identify whether an icon requires an update; as a result, a render of the component containing the checkboxes to check a single checkbox will result in the `render()` of all 100 `EnhancedSwitch` instances.  I can think of a few ideas on\u00a0what type of API could be added to React to solve this issue. ## shouldComponentUpdate helper  The most obvious API would be a top-level React function that given the instance context, old ReactElement, and new ReactElement would return the result of a Component's `shouldComponentUpdate`. Then heavy parent components can use that to implement a `shouldComponentUpdate` that is aware of render dependencies in its children. (As a bonus, theoretically you could temporarily remember this while you're walking the current tree; then instead of calling `shouldComponentUpdate` multiple times for every (potentially nested) component the result is simply that `shouldComponentUpdate` calls are raised up to the highest level where a component is render-dependent on them)  `React.shouldComponentUpdate(this, this.props.icon, nextProps.icon)`  However I expect the problem we have with this is that `shouldComponentUpdate` is also responsible for state dependent updates and `this` is supposed to be a rendered instance, not a ReactElement instance. While you know `context` from passing the current instance, you do not have a reference to the state from either of the props. ## ref based shouldComponentUpdate helper  The second most obvious API would be a `shouldComponentUpdate` helper that instead uses a ref.  `React.shouldComponentUpdate(this.iconRef, nextProps.icon)`  The downside to this is that to get a ref for a component you didn't create, you inevitably have to use `React.cloneElement`. ## render passthrough  The next idea I had was a render passthrough. A way during the render process for a component to say \"I do not need a render()/update, but these children of mine may\" which would tell React to skip render() and then run `shouldComponentUpdate` on the instances deeper in the tree.  However those components only know if they need updates if you pass them the new props; so a passthrough won't work. We'd instead need a way to tell react that it should not run `render()` but do pass on an update to a specific component instance  `this.renderRef(this.iconRef, nextProps.icon);`  The advantage of this over using `shouldComponentUpdate` is that instead of only allowing medium components wrapping light components to only `render()` when a child requires it; we also allow heavy components to never `render()` unless they themselves require it, while still allowing them to permit their light children to update. # partial renders  That `shouldComponentUpdate` based `renderRef` only applying updates to a component child feels somewhat awkward and forced though. So a more robust idea might be a partial render lifecycle that optionally runs when `shouldComponentUpdate => false` and can call for the render of a sub-tree that belongs to the current component.    Though `this.subRender` probably has potential for conflicts, so I expect the most react-line way to name that would be something like `React.renderSubtreeIntoComponent(parentComponent, nextElement, component)` which would be invoked using `React.renderSubtreeIntoComponent(this, /* subtree */, this.refs.subtree);`.  The `<Wrapper>` I used would be a really light component that probably would just render its children. It's there because `React.renderSubtreeIntoComponent` should probably not accept dom refs; this should be part of React lifecycle/walker, not part of client side browser only react-dom like `ReactDOM.unstable_renderSubtreeIntoContainer`.",
        "human_words_regrex": "React's shouldComponentUpdate based performance improvements work great for improving the performance of medium-weight components with large numbers of instances. They even work well with event handlers, as you can ignore event handler changes and instead pass a locally bound method that'll access `this.props.on*` on demand. However this all fails apart you start passing react elements to pure components. Given this sample; A `` component that expects an icon to be passed as an `icon` prop and a simple ``. Both are pure components and Button is also coded to not re-render when`onClick` is changed. Pretend that Button actually has a heavy `render()` but its props and state don't change frequently. On the second invocation, Icon should not require any prop change or render and Button should have its `onClick` prop changed but not require a render. On the third invocation, Icon should require a render while Button itself does not need to render except for the change to Icon. However in practice Button will always re-render, including during the second invocation when nothing changes. This is because `` will always result in a new instance and will never be the same. Normally you could work around this within the component itself, without telling users they have to store `` in a variable until they think they need to change its props; for functions you could pass a function that will use `this.props.*` itself and for objects you can do a deep comparison if you know the structure of the object. But for react elements, even though `shouldComponentUpdate` allows React to know if the current component has a render dependency on a sub-component, you do not have access to this information so Button cannot tell if Icon requires a render. In practice this can turn out to be a problem when you're writing some libraries rather than an application. Notably  suffers from this problem in production. `EnhancedSwitch`'s `render()` is not light; `EnhancedSwitch` is used by `RadioButton` and `Checkbox`; both use a `checkedIcon` and `uncheckedIcon` React element prop; you can reasonably have 100 checkboxes on one page; even if they were pure, they cannot identify whether an icon requires an update; as a result, a render of the component containing the checkboxes to check a single checkbox will result in the `render()` of all 100 `EnhancedSwitch` instances. I can think of a few ideas on what type of API could be added to React to solve this issue. ## shouldComponentUpdate helper The most obvious API would be a top-level React function that given the instance context, old ReactElement, and new ReactElement would return the result of a Component's `shouldComponentUpdate`. Then heavy parent components can use that to implement a `shouldComponentUpdate` that is aware of render dependencies in its children. (As a bonus, theoretically you could temporarily remember this while you're walking the current tree; then instead of calling `shouldComponentUpdate` multiple times for every (potentially nested) component the result is simply that `shouldComponentUpdate` calls are raised up to the highest level where a component is render-dependent on them) `React.shouldComponentUpdate(this, this.props.icon, nextProps.icon)` However I expect the problem we have with this is that `shouldComponentUpdate` is also responsible for state dependent updates and `this` is supposed to be a rendered instance, not a ReactElement instance. While you know `context` from passing the current instance, you do not have a reference to the state from either of the props. ## ref based shouldComponentUpdate helper The second most obvious API would be a `shouldComponentUpdate` helper that instead uses a ref. `React.shouldComponentUpdate(this.iconRef, nextProps.icon)` The downside to this is that to get a ref for a component you didn't create, you inevitably have to use `React.cloneElement`. ## render passthrough The next idea I had was a render passthrough. A way during the render process for a component to say \"I do not need a render()/update, but these children of mine may\" which would tell React to skip render() and then run `shouldComponentUpdate` on the instances deeper in the tree. However those components only know if they need updates if you pass them the new props; so a passthrough won't work. We'd instead need a way to tell react that it should not run `render()` but do pass on an update to a specific component instance `this.renderRef(this.iconRef, nextProps.icon);` The advantage of this over using `shouldComponentUpdate` is that instead of only allowing medium components wrapping light components to only `render()` when a child requires it; we also allow heavy components to never `render()` unless they themselves require it, while still allowing them to permit their light children to update. # partial renders That `shouldComponentUpdate` based `renderRef` only applying updates to a component child feels somewhat awkward and forced though. So a more robust idea might be a partial render lifecycle that optionally runs when `shouldComponentUpdate => false` and can call for the render of a sub-tree that belongs to the current component. Though `this.subRender` probably has potential for conflicts, so I expect the most react-line way to name that would be something like `React.renderSubtreeIntoComponent(parentComponent, nextElement, component)` which would be invoked using `React.renderSubtreeIntoComponent(this, /* subtree */, this.refs.subtree);`. The `` I used would be a really light component that probably would just render its children. It's there because `React.renderSubtreeIntoComponent` should probably not accept dom refs; this should be part of React lifecycle/walker, not part of client side browser only react-dom like `ReactDOM.unstable_renderSubtreeIntoContainer`.",
        "human_words_stopwords_removal_lemmatization": "react 's shouldcomponentupdate based performance improvement work great improving performance medium-weight component large number instance . even work well event handler , ignore event handler change instead pas locally bound method 'll access ` this.props.on * ` demand . however fails apart start passing react element pure component . given sample ; `` component expects icon passed ` icon ` prop simple `` . pure component button also coded re-render ` onclick ` changed . pretend button actually heavy ` render ( ) ` prop state n't change frequently . second invocation , icon require prop change render button ` onclick ` prop changed require render . third invocation , icon require render button need render except change icon . however practice button always re-render , including second invocation nothing change . `` always result new instance never . normally could work around within component , without telling user store `` variable think need change prop ; function could pas function use ` this.props . * ` object deep comparison know structure object . react element , even though ` shouldcomponentupdate ` allows react know current component render dependency sub-component , access information button tell icon requires render . practice turn problem 're writing library rather application . notably suffers problem production . ` enhancedswitch ` 's ` render ( ) ` light ; ` enhancedswitch ` used ` radiobutton ` ` checkbox ` ; use ` checkedicon ` ` uncheckedicon ` react element prop ; reasonably 100 checkboxes one page ; even pure , identify whether icon requires update ; result , render component containing checkboxes check single checkbox result ` render ( ) ` 100 ` enhancedswitch ` instance . think idea type api could added react solve issue . # # shouldcomponentupdate helper obvious api would top-level react function given instance context , old reactelement , new reactelement would return result component 's ` shouldcomponentupdate ` . heavy parent component use implement ` shouldcomponentupdate ` aware render dependency child . ( bonus , theoretically could temporarily remember 're walking current tree ; instead calling ` shouldcomponentupdate ` multiple time every ( potentially nested ) component result simply ` shouldcomponentupdate ` call raised highest level component render-dependent ) ` react.shouldcomponentupdate ( , this.props.icon , nextprops.icon ) ` however expect problem ` shouldcomponentupdate ` also responsible state dependent update ` ` supposed rendered instance , reactelement instance . know ` context ` passing current instance , reference state either prop . # # ref based shouldcomponentupdate helper second obvious api would ` shouldcomponentupdate ` helper instead us ref . ` react.shouldcomponentupdate ( this.iconref , nextprops.icon ) ` downside get ref component n't create , inevitably use ` react.cloneelement ` . # # render passthrough next idea render passthrough . way render process component say `` need render ( ) /update , child mine may '' would tell react skip render ( ) run ` shouldcomponentupdate ` instance deeper tree . however component know need update pas new prop ; passthrough wo n't work . 'd instead need way tell react run ` render ( ) ` pas update specific component instance ` this.renderref ( this.iconref , nextprops.icon ) ; ` advantage using ` shouldcomponentupdate ` instead allowing medium component wrapping light component ` render ( ) ` child requires ; also allow heavy component never ` render ( ) ` unless require , still allowing permit light child update . # partial render ` shouldcomponentupdate ` based ` renderref ` applying update component child feel somewhat awkward forced though . robust idea might partial render lifecycle optionally run ` shouldcomponentupdate = > false ` call render sub-tree belongs current component . though ` this.subrender ` probably potential conflict , expect react-line way name would something like ` react.rendersubtreeintocomponent ( parentcomponent , nextelement , component ) ` would invoked using ` react.rendersubtreeintocomponent ( , / * subtree * / , this.refs.subtree ) ; ` . `` used would really light component probably would render child . 's ` react.rendersubtreeintocomponent ` probably accept dom ref ; part react lifecycle/walker , part client side browser react-dom like ` reactdom.unstable_rendersubtreeintocontainer ` .",
        "title_stopwords_removal_lemmatization": "shouldcomponentupdate n't work well component accepts child"
    },
    {
        "issue_id": 166226961,
        "title": "Highlight element that failed checksum",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2016-07-19T01:08:47Z",
        "status": "closed",
        "description": "At the moment, when the server-rendered markup doesn't match the client-rendered markup, a big red error is shown, but it can be difficult/impossible to locate the element where this occurred.\n\nWould something that logged the offending element to the console be considered as a pull request?\n\n![react-diff](https://cloud.githubusercontent.com/assets/4443482/16935229/07cc7b20-4da1-11e6-9e30-f5f584d33182.gif)\n\nhttps://github.com/facebook/react/compare/master...davidgilbertson:log-checksum-failed-element\n",
        "remove_template_description": "At the moment, when the server-rendered markup doesn't match the client-rendered markup, a big red error is shown, but it can be difficult/impossible to locate the element where this occurred.  Would something that logged the offending element to the console be considered as a pull request?  ![react-diff](https://cloud.githubusercontent.com/assets/4443482/16935229/07cc7b20-4da1-11e6-9e30-f5f584d33182.gif)  https://github.com/facebook/react/compare/master...davidgilbertson:log-checksum-failed-element",
        "human_words": "At the moment, when the server-rendered markup doesn't match the client-rendered markup, a big red error is shown, but it can be difficult/impossible to locate the element where this occurred.  Would something that logged the offending element to the console be considered as a pull request?  ![react-diff](https://cloud.githubusercontent.com/assets/4443482/16935229/07cc7b20-4da1-11e6-9e30-f5f584d33182.gif)  https://github.com/facebook/react/compare/master...davidgilbertson:log-checksum-failed-element",
        "human_words_regrex": "At the moment, when the server-rendered markup doesn't match the client-rendered markup, a big red error is shown, but it can be difficult/impossible to locate the element where this occurred. Would something that logged the offending element to the console be considered as a pull request? ! ",
        "human_words_stopwords_removal_lemmatization": "moment , server-rendered markup n't match client-rendered markup , big red error shown , difficult/impossible locate element occurred . would something logged offending element console considered pull request ? !",
        "title_stopwords_removal_lemmatization": "highlight element failed checksum"
    },
    {
        "issue_id": 165043655,
        "title": "Attributes and properties for Custom Components",
        "label": [
            "Type: Feature Request",
            "Component: DOM"
        ],
        "date": "2016-07-12T10:19:46Z",
        "status": "open",
        "description": "**Do you want to request a _feature_ or report a _bug_?**\nFeature\n**What is the current behavior?**\nCustom component's properties are always set as attribute.\n**What is the expected behavior?**\nMaybe React should watch at the static `observedAttributes` property  for custom elements (https://w3c.github.io/webcomponents/spec/custom/) and then decide to set an attribute or an instance property. Otherwise, objects and array could be always passed as properties, in order to avoid `<custom-element prop=\"[object Object]\"></custom-element>`.\n",
        "remove_template_description": "**Do you want to request a _feature_ or report a _bug_?** Feature **What is the current behavior?** Custom component's properties are always set as attribute. **What is the expected behavior?** Maybe React should watch at the static `observedAttributes` property  for custom elements (https://w3c.github.io/webcomponents/spec/custom/) and then decide to set an attribute or an instance property. Otherwise, objects and array could be always passed as properties, in order to avoid `<custom-element prop=\"[object Object]\"></custom-element>`.",
        "human_words": "**Do you want to request a _feature_ or report a _bug_?** Feature **What is the current behavior?** Custom component's properties are always set as attribute. **What is the expected behavior?** Maybe React should watch at the static `observedAttributes` property  for custom elements (https://w3c.github.io/webcomponents/spec/custom/) and then decide to set an attribute or an instance property. Otherwise, objects and array could be always passed as properties, in order to avoid `<custom-element prop=\"[object Object]\"></custom-element>`.",
        "human_words_regrex": "**Do you want to request a _feature_ or report a _bug_?** Feature **What is the current behavior?** Custom component's properties are always set as attribute. **What is the expected behavior?** Maybe React should watch at the static `observedAttributes` property for custom elements ( and then decide to set an attribute or an instance property. Otherwise, objects and array could be always passed as properties, in order to avoid ``.",
        "human_words_stopwords_removal_lemmatization": "* * want request _feature_ report _bug_ ? * * feature * * current behavior ? * * custom component 's property always set attribute . * * expected behavior ? * * maybe react watch static ` observedattributes ` property custom element ( decide set attribute instance property . otherwise , object array could always passed property , order avoid `` .",
        "title_stopwords_removal_lemmatization": "attribute property custom component"
    },
    {
        "issue_id": 164374920,
        "title": "Is there a way to let users know which invalid type was returned?",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2016-07-07T18:21:01Z",
        "status": "closed",
        "description": "This is the error message in question: \n\n```\nLabelButton(...): A valid React element (or null) must be returned. \nYou may have returned undefined, an array or some other invalid object.\n```\n\nNot very helpful. Is it technically possible to _show_ what was returned?\n",
        "remove_template_description": "This is the error message in question:   ``` LabelButton(...): A valid React element (or null) must be returned.  You may have returned undefined, an array or some other invalid object. ```  Not very helpful. Is it technically possible to _show_ what was returned?",
        "human_words": "This is the error message in question:     Not very helpful. Is it technically possible to _show_ what was returned?",
        "human_words_regrex": "This is the error message in question: Not very helpful. Is it technically possible to _show_ what was returned?",
        "human_words_stopwords_removal_lemmatization": "error message question : helpful . technically possible _show_ returned ?",
        "title_stopwords_removal_lemmatization": "way let user know invalid type returned ?"
    },
    {
        "issue_id": 164293327,
        "title": "Having this.state in the constructor and this.setState everywhere else is violating the \"Uniform access principle\"",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2016-07-07T12:03:57Z",
        "status": "closed",
        "description": "ES6 style of creating components in React is clearly violating the [Uniform access principle](https://en.wikipedia.org/wiki/Uniform_access_principle). It's a general source of confusion (and bugs) to be able to set state in two different ways:\n- You MUST do `this.state = {}` if you're in the constructor\n- You MUST do `this.setState()` everywhere else.\n\nI believe it'd be much better to have just 1 way to set state in general, and it should be universal. If we're already accessing state through `this.state`, and setting state in the constructor with `this.state`, why not do it everywhere else? The behavior of `this.setState` could be easily replicated with [ES6 Proxies](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/set).\n",
        "remove_template_description": "ES6 style of creating components in React is clearly violating the [Uniform access principle](https://en.wikipedia.org/wiki/Uniform_access_principle). It's a general source of confusion (and bugs) to be able to set state in two different ways: - You MUST do `this.state = {}` if you're in the constructor - You MUST do `this.setState()` everywhere else.  I believe it'd be much better to have just 1 way to set state in general, and it should be universal. If we're already accessing state through `this.state`, and setting state in the constructor with `this.state`, why not do it everywhere else? The behavior of `this.setState` could be easily replicated with [ES6 Proxies](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/set).",
        "human_words": "ES6 style of creating components in React is clearly violating the [Uniform access principle](https://en.wikipedia.org/wiki/Uniform_access_principle). It's a general source of confusion (and bugs) to be able to set state in two different ways: - You MUST do `this.state = {}` if you're in the constructor - You MUST do `this.setState()` everywhere else.  I believe it'd be much better to have just 1 way to set state in general, and it should be universal. If we're already accessing state through `this.state`, and setting state in the constructor with `this.state`, why not do it everywhere else? The behavior of `this.setState` could be easily replicated with [ES6 Proxies](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/set).",
        "human_words_regrex": "ES6 style of creating components in React is clearly violating the . It's a general source of confusion (and bugs) to be able to set state in two different ways: - You MUST do `this.state = {}` if you're in the constructor - You MUST do `this.setState()` everywhere else. I believe it'd be much better to have just 1 way to set state in general, and it should be universal. If we're already accessing state through `this.state`, and setting state in the constructor with `this.state`, why not do it everywhere else? The behavior of `this.setState` could be easily replicated with .",
        "human_words_stopwords_removal_lemmatization": "es6 style creating component react clearly violating . 's general source confusion ( bug ) able set state two different way : - must ` this.state = { } ` 're constructor - must ` this.setstate ( ) ` everywhere else . believe 'd much better 1 way set state general , universal . 're already accessing state ` this.state ` , setting state constructor ` this.state ` , everywhere else ? behavior ` this.setstate ` could easily replicated .",
        "title_stopwords_removal_lemmatization": "this.state constructor this.setstate everywhere else violating `` uniform access principle ''"
    },
    {
        "issue_id": 162441650,
        "title": "Clean up top-level event listeners after unmounting all roots",
        "label": [
            "Type: Feature Request",
            "Component: DOM"
        ],
        "date": "2016-06-27T12:36:08Z",
        "status": "closed",
        "description": "**Do you want to request a _feature_ or report a _bug_?**\nBug - maybe intended behaviour.\n\n**What is the current behavior?**\n\n_Background_\nI have an app that needs to be embedded by other apps (other customers). The idea being \"our\" react app has its javascript loaded in an iframe, but the \"main\" window hosts dom elements from the customers and our react app. That bit works fine. As time goes on \"our\" react UI is no longer needed, and then react root is removed, and the iframe destroyed. These apps are often long lived so there will be times when the react app needs to appear again, and the iframe is recreated and everything reloaded. This can and will happen many times.\n\n_Goal_\nWe would like to NOT keep the iframe around when its not actually needed, but rather re-create just in time when it is needed. This app is used by customers and they would like to embed our \"react\" app, without interference with their \"app\" and all its javascript, which is why we are doing the iframe thing.\n\n_Problem_\nIt is evident by watching the chrome dev tools \"timeline\" memory graph that memory always increases each time a new iframe is created and the react UI is init'd. Unmounting and destroying the iframe, never causes the memory to drop to \"near\" original before load value. Repeating this process multiple times slowly show an increase memory.\n\nThis also causes a more immediate problem, in that react is throwing exceptions on every event (click, type etc) because the window of the iframe is now null.\n\n_Proof: First symptom - Event exceptions (only happens in my app)_\nThese exceptions only happen in my (cant share) app, i cant repo them, but parts of this apply to all react apps. Please read thru - it will all make sense when you get to the end and if you examine my poc.\n\nDestroying the Iframe, leaves React and its event dispatching system in memory. I have a  mixture of x-tag, webcomponents which are used to \"create\" the iframe and load the react app. After the custom element is used (lets call it <EMBED-REACT>), the console starts showing exceptions all within react code. This is a side effect of the react dispatchEvent still being active and trying to do stuff.\n\n``` javascript\nUncaught TypeError: Cannot read property 'nodeName' of null\nshouldUseChangeEvent @ VM1068_embeddedApp.js:14296\nextractEvents @ VM1068_embeddedApp.js:14536\nextractEvents @ VM1068_embeddedApp.js:13000\nhandleTopLevel @ VM1068_embeddedApp.js:19816\nhandleTopLevelImpl @ VM1068_embeddedApp.js:23870\nperform @ VM1068_embeddedApp.js:15510\nbatchedUpdates @ VM1068_embeddedApp.js:23787\nbatchedUpdates @ VM1068_embeddedApp.js:14673\ndispatchEvent @ VM1068_embeddedApp.js:23946\n```\n\nI know about `ReactEventListener.dispatchEvent`(snip below) where i can disable react( i havent actually tried) to avoid the exceptions, but that would leave the memory leak.\n\nhttps://github.com/facebook/react/blob/master/src/renderers/dom/client/ReactEventListener.js#158\n\n``` javascript\n dispatchEvent: function(topLevelType, nativeEvent) {\n    if (!ReactEventListener._enabled) {\n      return;\n    }\n```\n\nIts rather easy to prove that react remains in memory, simply goto the compiled app, find the `React dispatchEvent` and insert a console.log and watch as it continues to \"print\" stuff after unmounting the last component, even though there are no listeners. In my case the exception is caused because all `extractEvents` eventually default to \"window\" as the \"target\".\n\nThere are multiple copies of the same basic idea in various react functions, where it tries to get a target that it assumes will never be null. If one doesnt load react in an iframe, then window is always defined.\n\n``` javascript\nvar targetNode = targetInst ?\n      ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;\n```\n\nLater the `shouldUseChangeEvent` tries to read the nodeName of the now \"undefined\" window, because its iframe has been destroyed, but that now results in an exception (null pointer etc).\n\nhttps://github.com/facebook/react/blob/045f1a791c6e17253e9d927ffca70ae5d00b4fe5/src/renderers/dom/client/eventPlugins/ChangeEventPlugin.js#L72 ...\n\n``` javascript\nfunction shouldUseChangeEvent(elem) {\n  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();\n  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';\n}\n```\n\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/reactjs/69z2wepo/).**\n\n**What is the expected behavior?**\nThere are probably two possible solutions, that work in tandem.\n\n1) Firstly React should provide an API that will remove all its global event listeners. Naturally it could complain if there are any active components that remain mounted. This API may be internal/private (not public), if #2 was implemented. It might be called something like `React.shutdownAll` Because everything is gone, the next React render would setup all its globals again.\n\n2) React should dispose of all its global event handlers when the last or \"root\" component is unmounted. This would call the _new api_ mentioned in 1. \n\nEither option solves my problem, where i wish to either let react shutdown gracefully. With this in mind i could.\n- unmount iframe powered react ui component.\n- call React.disposeGlobals (mentioned above). If unmounting auto calls an internal `React.shutdownAll` then this step is skipped.\n- destroy iframe.\n\n_Proof #2_\nGoto your compiled out, locate the `dispatchEvent` and add a console.log, notice even after the last / root container is unmounted stuff will continue to be printed because the event listeners are still active.\n\nI did a very quick scan of the abstraction around adding listeners, and i couldnt see the remove function being stored and then called to cleanup.\n\n_Proof #3_\nLook at my last section below where i have a proof of concept form of the popular todomvc react example.\n\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\nReact 15.0.2\nReact-Dom 15.0.2\nReact-redux 4.4.5 (might be useful to know)\n\n**Reproducable use case**\n\nSorry i tried but decided that using the facebook jsfiddle wasnt really a smart thing for the following reasons.\n- the compile the \"jsx\" content means loading babel etc to compile (babel, jsfiddle etc too many moving parts)\n- its \"hard\" to get the \"root component\" that is inserted into the \"output\" box and \n- its even just too \"hard\" to put the jsx compiled output into somewhere for the iframe src= to \"load\".\n\nI have forked the popular todomvc app and added a few minor edits to recreate, reload, render+unmount x100, destroy everything about the app, and try again in a loop separated by a sleep.\n- https://todomvc.com (todomvc main site)\n- https://github.com/tastejs/todomvc (todomvc github)\n- https://github.com/mP1/todomvc/pull/2 (my fork - with comments and snapshots of chrome dev tools timeline memory graph)\n\nHopefully we can trust the todomvc guys are doing the right thing, no dumb memory leaks. If you examine it should be obvious the only thing im adding is support for my horrible create app, run app, render+unmount many times, render, unmount, sleep a bit and then loop again until counter exhausted.\n\nSorry if this is boring but as a convenience i will list the basic instructions to \"run\" the react version of my branch on your local machines...\n1. clone https://github.com/tastejs/todomvc.git\n2. in the root, run \"gulp\", to compile everything.\n3. run something like \"python -m SimpleHTTPServer\"\n   4A. navigate to http://localhost:8000/examples/react/index.html \n   4B. navigate to http://localhost:8000/examples/react/index3.html\n   // /examples/react corresponds to the dist/examples/react directory that gulp built into.\n\nMy poc supports 3 concepts.\n- re-run todomvc over and over again in \"same\" window.\n- create iframe, load todomvc js in the iframe but render to outer window, unmount, destroy iframe, try 20x\n- create custom element, webcontainer creates iframe and load todomvc js in the iframe but render to outer window, unmount, destroy custom element, try 20x\n\nIf you look at my p/r against todomvc you will see many helpful pictures with memory leak graphs from chrome dev tools for each of the 3 described scenarios and some commentary.\n",
        "remove_template_description": "**Do you want to request a _feature_ or report a _bug_?** Bug - maybe intended behaviour.  **What is the current behavior?**  _Background_ I have an app that needs to be embedded by other apps (other customers). The idea being \"our\" react app has its javascript loaded in an iframe, but the \"main\" window hosts dom elements from the customers and our react app. That bit works fine. As time goes on \"our\" react UI is no longer needed, and then react root is removed, and the iframe destroyed. These apps are often long lived so there will be times when the react app needs to appear again, and the iframe is recreated and everything reloaded. This can and will happen many times.  _Goal_ We would like to NOT keep the iframe around when its not actually needed, but rather re-create just in time when it is needed. This app is used by customers and they would like to embed our \"react\" app, without interference with their \"app\" and all its javascript, which is why we are doing the iframe thing.  _Problem_ It is evident by watching the chrome dev tools \"timeline\" memory graph that memory always increases each time a new iframe is created and the react UI is init'd. Unmounting and destroying the iframe, never causes the memory to drop to \"near\" original before load value. Repeating this process multiple times slowly show an increase memory.  This also causes a more immediate problem, in that react is throwing exceptions on every event (click, type etc) because the window of the iframe is now null.  _Proof: First symptom - Event exceptions (only happens in my app)_ These exceptions only happen in my (cant share) app, i cant repo them, but parts of this apply to all react apps. Please read thru - it will all make sense when you get to the end and if you examine my poc.  Destroying the Iframe, leaves React and its event dispatching system in memory. I have a  mixture of x-tag, webcomponents which are used to \"create\" the iframe and load the react app. After the custom element is used (lets call it <EMBED-REACT>), the console starts showing exceptions all within react code. This is a side effect of the react dispatchEvent still being active and trying to do stuff.  ``` javascript Uncaught TypeError: Cannot read property 'nodeName' of null shouldUseChangeEvent @ VM1068_embeddedApp.js:14296 extractEvents @ VM1068_embeddedApp.js:14536 extractEvents @ VM1068_embeddedApp.js:13000 handleTopLevel @ VM1068_embeddedApp.js:19816 handleTopLevelImpl @ VM1068_embeddedApp.js:23870 perform @ VM1068_embeddedApp.js:15510 batchedUpdates @ VM1068_embeddedApp.js:23787 batchedUpdates @ VM1068_embeddedApp.js:14673 dispatchEvent @ VM1068_embeddedApp.js:23946 ```  I know about `ReactEventListener.dispatchEvent`(snip below) where i can disable react( i havent actually tried) to avoid the exceptions, but that would leave the memory leak.  https://github.com/facebook/react/blob/master/src/renderers/dom/client/ReactEventListener.js#158  ``` javascript  dispatchEvent: function(topLevelType, nativeEvent) {     if (!ReactEventListener._enabled) {       return;     } ```  Its rather easy to prove that react remains in memory, simply goto the compiled app, find the `React dispatchEvent` and insert a console.log and watch as it continues to \"print\" stuff after unmounting the last component, even though there are no listeners. In my case the exception is caused because all `extractEvents` eventually default to \"window\" as the \"target\".  There are multiple copies of the same basic idea in various react functions, where it tries to get a target that it assumes will never be null. If one doesnt load react in an iframe, then window is always defined.  ``` javascript var targetNode = targetInst ?       ReactDOMComponentTree.getNodeFromInstance(targetInst) : window; ```  Later the `shouldUseChangeEvent` tries to read the nodeName of the now \"undefined\" window, because its iframe has been destroyed, but that now results in an exception (null pointer etc).  https://github.com/facebook/react/blob/045f1a791c6e17253e9d927ffca70ae5d00b4fe5/src/renderers/dom/client/eventPlugins/ChangeEventPlugin.js#L72 ...  ``` javascript function shouldUseChangeEvent(elem) {   var nodeName = elem.nodeName && elem.nodeName.toLowerCase();   return nodeName === 'select' || nodeName === 'input' && elem.type === 'file'; } ```  **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/reactjs/69z2wepo/).**  **What is the expected behavior?** There are probably two possible solutions, that work in tandem.  1) Firstly React should provide an API that will remove all its global event listeners. Naturally it could complain if there are any active components that remain mounted. This API may be internal/private (not public), if #2 was implemented. It might be called something like `React.shutdownAll` Because everything is gone, the next React render would setup all its globals again.  2) React should dispose of all its global event handlers when the last or \"root\" component is unmounted. This would call the _new api_ mentioned in 1.   Either option solves my problem, where i wish to either let react shutdown gracefully. With this in mind i could. - unmount iframe powered react ui component. - call React.disposeGlobals (mentioned above). If unmounting auto calls an internal `React.shutdownAll` then this step is skipped. - destroy iframe.  _Proof #2_ Goto your compiled out, locate the `dispatchEvent` and add a console.log, notice even after the last / root container is unmounted stuff will continue to be printed because the event listeners are still active.  I did a very quick scan of the abstraction around adding listeners, and i couldnt see the remove function being stored and then called to cleanup.  _Proof #3_ Look at my last section below where i have a proof of concept form of the popular todomvc react example.  **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** React 15.0.2 React-Dom 15.0.2 React-redux 4.4.5 (might be useful to know)  **Reproducable use case**  Sorry i tried but decided that using the facebook jsfiddle wasnt really a smart thing for the following reasons. - the compile the \"jsx\" content means loading babel etc to compile (babel, jsfiddle etc too many moving parts) - its \"hard\" to get the \"root component\" that is inserted into the \"output\" box and  - its even just too \"hard\" to put the jsx compiled output into somewhere for the iframe src= to \"load\".  I have forked the popular todomvc app and added a few minor edits to recreate, reload, render+unmount x100, destroy everything about the app, and try again in a loop separated by a sleep. - https://todomvc.com (todomvc main site) - https://github.com/tastejs/todomvc (todomvc github) - https://github.com/mP1/todomvc/pull/2 (my fork - with comments and snapshots of chrome dev tools timeline memory graph)  Hopefully we can trust the todomvc guys are doing the right thing, no dumb memory leaks. If you examine it should be obvious the only thing im adding is support for my horrible create app, run app, render+unmount many times, render, unmount, sleep a bit and then loop again until counter exhausted.  Sorry if this is boring but as a convenience i will list the basic instructions to \"run\" the react version of my branch on your local machines... 1. clone https://github.com/tastejs/todomvc.git 2. in the root, run \"gulp\", to compile everything. 3. run something like \"python -m SimpleHTTPServer\"    4A. navigate to http://localhost:8000/examples/react/index.html     4B. navigate to http://localhost:8000/examples/react/index3.html    // /examples/react corresponds to the dist/examples/react directory that gulp built into.  My poc supports 3 concepts. - re-run todomvc over and over again in \"same\" window. - create iframe, load todomvc js in the iframe but render to outer window, unmount, destroy iframe, try 20x - create custom element, webcontainer creates iframe and load todomvc js in the iframe but render to outer window, unmount, destroy custom element, try 20x  If you look at my p/r against todomvc you will see many helpful pictures with memory leak graphs from chrome dev tools for each of the 3 described scenarios and some commentary.",
        "human_words": "**Do you want to request a _feature_ or report a _bug_?** Bug - maybe intended behaviour.  **What is the current behavior?**  _Background_ I have an app that needs to be embedded by other apps (other customers). The idea being \"our\" react app has its javascript loaded in an iframe, but the \"main\" window hosts dom elements from the customers and our react app. That bit works fine. As time goes on \"our\" react UI is no longer needed, and then react root is removed, and the iframe destroyed. These apps are often long lived so there will be times when the react app needs to appear again, and the iframe is recreated and everything reloaded. This can and will happen many times.  _Goal_ We would like to NOT keep the iframe around when its not actually needed, but rather re-create just in time when it is needed. This app is used by customers and they would like to embed our \"react\" app, without interference with their \"app\" and all its javascript, which is why we are doing the iframe thing.  _Problem_ It is evident by watching the chrome dev tools \"timeline\" memory graph that memory always increases each time a new iframe is created and the react UI is init'd. Unmounting and destroying the iframe, never causes the memory to drop to \"near\" original before load value. Repeating this process multiple times slowly show an increase memory.  This also causes a more immediate problem, in that react is throwing exceptions on every event (click, type etc) because the window of the iframe is now null.  _Proof: First symptom - Event exceptions (only happens in my app)_ These exceptions only happen in my (cant share) app, i cant repo them, but parts of this apply to all react apps. Please read thru - it will all make sense when you get to the end and if you examine my poc.  Destroying the Iframe, leaves React and its event dispatching system in memory. I have a  mixture of x-tag, webcomponents which are used to \"create\" the iframe and load the react app. After the custom element is used (lets call it <EMBED-REACT>), the console starts showing exceptions all within react code. This is a side effect of the react dispatchEvent still being active and trying to do stuff.    I know about `ReactEventListener.dispatchEvent`(snip below) where i can disable react( i havent actually tried) to avoid the exceptions, but that would leave the memory leak.  https://github.com/facebook/react/blob/master/src/renderers/dom/client/ReactEventListener.js#158    Its rather easy to prove that react remains in memory, simply goto the compiled app, find the `React dispatchEvent` and insert a console.log and watch as it continues to \"print\" stuff after unmounting the last component, even though there are no listeners. In my case the exception is caused because all `extractEvents` eventually default to \"window\" as the \"target\".  There are multiple copies of the same basic idea in various react functions, where it tries to get a target that it assumes will never be null. If one doesnt load react in an iframe, then window is always defined.    Later the `shouldUseChangeEvent` tries to read the nodeName of the now \"undefined\" window, because its iframe has been destroyed, but that now results in an exception (null pointer etc).  https://github.com/facebook/react/blob/045f1a791c6e17253e9d927ffca70ae5d00b4fe5/src/renderers/dom/client/eventPlugins/ChangeEventPlugin.js#L72 ...    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net/reactjs/69z2wepo/).**  **What is the expected behavior?** There are probably two possible solutions, that work in tandem.  1) Firstly React should provide an API that will remove all its global event listeners. Naturally it could complain if there are any active components that remain mounted. This API may be internal/private (not public), if #2 was implemented. It might be called something like `React.shutdownAll` Because everything is gone, the next React render would setup all its globals again.  2) React should dispose of all its global event handlers when the last or \"root\" component is unmounted. This would call the _new api_ mentioned in 1.   Either option solves my problem, where i wish to either let react shutdown gracefully. With this in mind i could. - unmount iframe powered react ui component. - call React.disposeGlobals (mentioned above). If unmounting auto calls an internal `React.shutdownAll` then this step is skipped. - destroy iframe.  _Proof #2_ Goto your compiled out, locate the `dispatchEvent` and add a console.log, notice even after the last / root container is unmounted stuff will continue to be printed because the event listeners are still active.  I did a very quick scan of the abstraction around adding listeners, and i couldnt see the remove function being stored and then called to cleanup.  _Proof #3_ Look at my last section below where i have a proof of concept form of the popular todomvc react example.  **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** React 15.0.2 React-Dom 15.0.2 React-redux 4.4.5 (might be useful to know)  **Reproducable use case**  Sorry i tried but decided that using the facebook jsfiddle wasnt really a smart thing for the following reasons. - the compile the \"jsx\" content means loading babel etc to compile (babel, jsfiddle etc too many moving parts) - its \"hard\" to get the \"root component\" that is inserted into the \"output\" box and  - its even just too \"hard\" to put the jsx compiled output into somewhere for the iframe src= to \"load\".  I have forked the popular todomvc app and added a few minor edits to recreate, reload, render+unmount x100, destroy everything about the app, and try again in a loop separated by a sleep. - https://todomvc.com (todomvc main site) - https://github.com/tastejs/todomvc (todomvc github) - https://github.com/mP1/todomvc/pull/2 (my fork - with comments and snapshots of chrome dev tools timeline memory graph)  Hopefully we can trust the todomvc guys are doing the right thing, no dumb memory leaks. If you examine it should be obvious the only thing im adding is support for my horrible create app, run app, render+unmount many times, render, unmount, sleep a bit and then loop again until counter exhausted.  Sorry if this is boring but as a convenience i will list the basic instructions to \"run\" the react version of my branch on your local machines... 1. clone https://github.com/tastejs/todomvc.git 2. in the root, run \"gulp\", to compile everything. 3. run something like \"python -m SimpleHTTPServer\"    4A. navigate to http://localhost:8000/examples/react/index.html     4B. navigate to http://localhost:8000/examples/react/index3.html    // /examples/react corresponds to the dist/examples/react directory that gulp built into.  My poc supports 3 concepts. - re-run todomvc over and over again in \"same\" window. - create iframe, load todomvc js in the iframe but render to outer window, unmount, destroy iframe, try 20x - create custom element, webcontainer creates iframe and load todomvc js in the iframe but render to outer window, unmount, destroy custom element, try 20x  If you look at my p/r against todomvc you will see many helpful pictures with memory leak graphs from chrome dev tools for each of the 3 described scenarios and some commentary.",
        "human_words_regrex": "**Do you want to request a _feature_ or report a _bug_?** Bug - maybe intended behaviour. **What is the current behavior?** _Background_ I have an app that needs to be embedded by other apps (other customers). The idea being \"our\" react app has its javascript loaded in an iframe, but the \"main\" window hosts dom elements from the customers and our react app. That bit works fine. As time goes on \"our\" react UI is no longer needed, and then react root is removed, and the iframe destroyed. These apps are often long lived so there will be times when the react app needs to appear again, and the iframe is recreated and everything reloaded. This can and will happen many times. _Goal_ We would like to NOT keep the iframe around when its not actually needed, but rather re-create just in time when it is needed. This app is used by customers and they would like to embed our \"react\" app, without interference with their \"app\" and all its javascript, which is why we are doing the iframe thing. _Problem_ It is evident by watching the chrome dev tools \"timeline\" memory graph that memory always increases each time a new iframe is created and the react UI is init'd. Unmounting and destroying the iframe, never causes the memory to drop to \"near\" original before load value. Repeating this process multiple times slowly show an increase memory. This also causes a more immediate problem, in that react is throwing exceptions on every event (click, type etc) because the window of the iframe is now null. _Proof: First symptom - Event exceptions (only happens in my app)_ These exceptions only happen in my (cant share) app, i cant repo them, but parts of this apply to all react apps. Please read thru - it will all make sense when you get to the end and if you examine my poc. Destroying the Iframe, leaves React and its event dispatching system in memory. I have a mixture of x-tag, webcomponents which are used to \"create\" the iframe and load the react app. After the custom element is used (lets call it ), the console starts showing exceptions all within react code. This is a side effect of the react dispatchEvent still being active and trying to do stuff. I know about `ReactEventListener.dispatchEvent`(snip below) where i can disable react( i havent actually tried) to avoid the exceptions, but that would leave the memory leak.  Its rather easy to prove that react remains in memory, simply goto the compiled app, find the `React dispatchEvent` and insert a console.log and watch as it continues to \"print\" stuff after unmounting the last component, even though there are no listeners. In my case the exception is caused because all `extractEvents` eventually default to \"window\" as the \"target\". There are multiple copies of the same basic idea in various react functions, where it tries to get a target that it assumes will never be null. If one doesnt load react in an iframe, then window is always defined. Later the `shouldUseChangeEvent` tries to read the nodeName of the now \"undefined\" window, because its iframe has been destroyed, but that now results in an exception (null pointer etc).  ... **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via  or similar (template:  **What is the expected behavior?** There are probably two possible solutions, that work in tandem. 1) Firstly React should provide an API that will remove all its global event listeners. Naturally it could complain if there are any active components that remain mounted. This API may be internal/private (not public), if #2 was implemented. It might be called something like `React.shutdownAll` Because everything is gone, the next React render would setup all its globals again. 2) React should dispose of all its global event handlers when the last or \"root\" component is unmounted. This would call the _new api_ mentioned in 1. Either option solves my problem, where i wish to either let react shutdown gracefully. With this in mind i could. - unmount iframe powered react ui component. - call React.disposeGlobals (mentioned above). If unmounting auto calls an internal `React.shutdownAll` then this step is skipped. - destroy iframe. _Proof #2_ Goto your compiled out, locate the `dispatchEvent` and add a console.log, notice even after the last / root container is unmounted stuff will continue to be printed because the event listeners are still active. I did a very quick scan of the abstraction around adding listeners, and i couldnt see the remove function being stored and then called to cleanup. _Proof #3_ Look at my last section below where i have a proof of concept form of the popular todomvc react example. **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** React 15.0.2 React-Dom 15.0.2 React-redux 4.4.5 (might be useful to know) **Reproducable use case** Sorry i tried but decided that using the facebook jsfiddle wasnt really a smart thing for the following reasons. - the compile the \"jsx\" content means loading babel etc to compile (babel, jsfiddle etc too many moving parts) - its \"hard\" to get the \"root component\" that is inserted into the \"output\" box and - its even just too \"hard\" to put the jsx compiled output into somewhere for the iframe src= to \"load\". I have forked the popular todomvc app and added a few minor edits to recreate, reload, render+unmount x100, destroy everything about the app, and try again in a loop separated by a sleep. -  (todomvc main site) -  (todomvc github) -  (my fork - with comments and snapshots of chrome dev tools timeline memory graph) Hopefully we can trust the todomvc guys are doing the right thing, no dumb memory leaks. If you examine it should be obvious the only thing im adding is support for my horrible create app, run app, render+unmount many times, render, unmount, sleep a bit and then loop again until counter exhausted. Sorry if this is boring but as a convenience i will list the basic instructions to \"run\" the react version of my branch on your local machines... 1. clone  2. in the root, run \"gulp\", to compile everything. 3. run something like \"python -m SimpleHTTPServer\" 4A. navigate to  4B. navigate to  // /examples/react corresponds to the dist/examples/react directory that gulp built into. My poc supports 3 concepts. - re-run todomvc over and over again in \"same\" window. - create iframe, load todomvc js in the iframe but render to outer window, unmount, destroy iframe, try 20x - create custom element, webcontainer creates iframe and load todomvc js in the iframe but render to outer window, unmount, destroy custom element, try 20x If you look at my p/r against todomvc you will see many helpful pictures with memory leak graphs from chrome dev tools for each of the 3 described scenarios and some commentary.",
        "human_words_stopwords_removal_lemmatization": "* * want request _feature_ report _bug_ ? * * bug - maybe intended behaviour . * * current behavior ? * * _background_ app need embedded apps ( customer ) . idea `` '' react app javascript loaded iframe , `` main '' window host dom element customer react app . bit work fine . time go `` '' react ui longer needed , react root removed , iframe destroyed . apps often long lived time react app need appear , iframe recreated everything reloaded . happen many time . _goal_ would like keep iframe around actually needed , rather re-create time needed . app used customer would like embed `` react '' app , without interference `` app '' javascript , iframe thing . _problem_ evident watching chrome dev tool `` timeline '' memory graph memory always increase time new iframe created react ui init 'd . unmounting destroying iframe , never cause memory drop `` near '' original load value . repeating process multiple time slowly show increase memory . also cause immediate problem , react throwing exception every event ( click , type etc ) window iframe null . _proof : first symptom - event exception ( happens app ) _ exception happen ( cant share ) app , cant repo , part apply react apps . please read thru - make sense get end examine poc . destroying iframe , leaf react event dispatching system memory . mixture x-tag , webcomponents used `` create '' iframe load react app . custom element used ( let call ) , console start showing exception within react code . side effect react dispatchevent still active trying stuff . know ` reacteventlistener.dispatchevent ` ( snip ) disable react ( havent actually tried ) avoid exception , would leave memory leak . rather easy prove react remains memory , simply goto compiled app , find ` react dispatchevent ` insert console.log watch continues `` print '' stuff unmounting last component , even though listener . case exception caused ` extractevents ` eventually default `` window '' `` target '' . multiple copy basic idea various react function , try get target assumes never null . one doesnt load react iframe , window always defined . later ` shouldusechangeevent ` try read nodename `` undefined '' window , iframe destroyed , result exception ( null pointer etc ) . ... * * current behavior bug , please provide step reproduce possible minimal demo problem via similar ( template : * * expected behavior ? * * probably two possible solution , work tandem . 1 ) firstly react provide api remove global event listener . naturally could complain active component remain mounted . api may internal/private ( public ) , # 2 implemented . might called something like ` react.shutdownall ` everything gone , next react render would setup globals . 2 ) react dispose global event handler last `` root '' component unmounted . would call _new api_ mentioned 1. either option solves problem , wish either let react shutdown gracefully . mind could . - unmount iframe powered react ui component . - call react.disposeglobals ( mentioned ) . unmounting auto call internal ` react.shutdownall ` step skipped . - destroy iframe . _proof # 2_ goto compiled , locate ` dispatchevent ` add console.log , notice even last / root container unmounted stuff continue printed event listener still active . quick scan abstraction around adding listener , couldnt see remove function stored called cleanup . _proof # 3_ look last section proof concept form popular todomvc react example . * * version react , browser / o affected issue ? work previous version react ? * * react 15.0.2 react-dom 15.0.2 react-redux 4.4.5 ( might useful know ) * * reproducable use case * * sorry tried decided using facebook jsfiddle wasnt really smart thing following reason . - compile `` jsx '' content mean loading babel etc compile ( babel , jsfiddle etc many moving part ) - `` hard '' get `` root component '' inserted `` output '' box - even `` hard '' put jsx compiled output somewhere iframe src= `` load '' . forked popular todomvc app added minor edits recreate , reload , render+unmount x100 , destroy everything app , try loop separated sleep . - ( todomvc main site ) - ( todomvc github ) - ( fork - comment snapshot chrome dev tool timeline memory graph ) hopefully trust todomvc guy right thing , dumb memory leak . examine obvious thing im adding support horrible create app , run app , render+unmount many time , render , unmount , sleep bit loop counter exhausted . sorry boring convenience list basic instruction `` run '' react version branch local machine ... 1. clone 2. root , run `` gulp '' , compile everything . 3. run something like `` python -m simplehttpserver '' 4a . navigate 4b . navigate // /examples/react corresponds dist/examples/react directory gulp built . poc support 3 concept . - re-run todomvc `` '' window . - create iframe , load todomvc j iframe render outer window , unmount , destroy iframe , try 20x - create custom element , webcontainer creates iframe load todomvc j iframe render outer window , unmount , destroy custom element , try 20x look p/r todomvc see many helpful picture memory leak graph chrome dev tool 3 described scenario commentary .",
        "title_stopwords_removal_lemmatization": "clean top-level event listener unmounting root"
    },
    {
        "issue_id": 162309671,
        "title": "Polyfill MouseEvent.buttons for Safari",
        "label": [
            "Type: Feature Request",
            "Component: DOM",
            "Resolution: Stale"
        ],
        "date": "2016-06-26T02:51:13Z",
        "status": "closed",
        "description": "During mouse move event, 'e.buttons' returns 'undefined' in Safari.  Behaving correctly in Chrome.  While pressing the left mouse button and moving the mouse expect 'e.buttons' to return 1.  'e.nativeEvent.which' returns the correct result on Safari.\n\nSample Code:\n\n``` javascript\nimport React from 'react';\n\nexport default class Canvas extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  mouseDown(e) {\n    console.log(\"mouse down\", e.buttons, e.nativeEvent.which);\n  }\n\n  mouseMove(e) {\n    console.log(\"mouse move\", e.buttons, e.nativeEvent.which);\n  }\n\n  mouseUp(e) {\n    console.log(\"mouse up\", e.buttons, e.nativeEvent.which);\n  }\n\n  render() {\n    var canvasStyle = {\n      backgroundColor: 'rgba(0, 0, 255, 0.5)',\n      position: 'absolute',\n      top: '0px',\n      left: '0px',\n      width: '100%',\n      height: '100%'\n    }\n\n    return (\n      <div>\n        <canvas id=\"canvas\" style={canvasStyle}\n          onMouseDown={this.mouseDown.bind(this)}\n          onMouseMove={this.mouseMove.bind(this)}\n          onMouseUp={this.mouseUp.bind(this)}>\n        </canvas>\n      </div>\n    );\n  }\n}\n```\n\n**Versions**\nReact: 15.1.0\nSafari: 9.1.1 (11601.6.17)\n\n**OS**\nOS X El Capitan Version 10.11.5\n\n**Computer**\nModel Name: MacBook Air\nModel Identifier:   MacBookAir6,2\nProcessor Name: Intel Core i7\nProcessor Speed:    1.7 GHz\nNumber of Processors:   1\nTotal Number of Cores:  2\nL2 Cache (per Core):    256 KB\nL3 Cache:   4 MB\nMemory: 8 GB\n",
        "remove_template_description": "During mouse move event, 'e.buttons' returns 'undefined' in Safari.  Behaving correctly in Chrome.  While pressing the left mouse button and moving the mouse expect 'e.buttons' to return 1.  'e.nativeEvent.which' returns the correct result on Safari.  Sample Code:  ``` javascript import React from 'react';  export default class Canvas extends React.Component {   constructor(props) {     super(props);   }    mouseDown(e) {     console.log(\"mouse down\", e.buttons, e.nativeEvent.which);   }    mouseMove(e) {     console.log(\"mouse move\", e.buttons, e.nativeEvent.which);   }    mouseUp(e) {     console.log(\"mouse up\", e.buttons, e.nativeEvent.which);   }    render() {     var canvasStyle = {       backgroundColor: 'rgba(0, 0, 255, 0.5)',       position: 'absolute',       top: '0px',       left: '0px',       width: '100%',       height: '100%'     }      return (       <div>         <canvas id=\"canvas\" style={canvasStyle}           onMouseDown={this.mouseDown.bind(this)}           onMouseMove={this.mouseMove.bind(this)}           onMouseUp={this.mouseUp.bind(this)}>         </canvas>       </div>     );   } } ```  **Versions** React: 15.1.0 Safari: 9.1.1 (11601.6.17)  **OS** OS X El Capitan Version 10.11.5  **Computer** Model Name: MacBook Air Model Identifier:   MacBookAir6,2 Processor Name: Intel Core i7 Processor Speed:    1.7 GHz Number of Processors:   1 Total Number of Cores:  2 L2 Cache (per Core):    256 KB L3 Cache:   4 MB Memory: 8 GB",
        "human_words": "During mouse move event, 'e.buttons' returns 'undefined' in Safari.  Behaving correctly in Chrome.  While pressing the left mouse button and moving the mouse expect 'e.buttons' to return 1.  'e.nativeEvent.which' returns the correct result on Safari.  Sample Code:    **Versions** React: 15.1.0 Safari: 9.1.1 (11601.6.17)  **OS** OS X El Capitan Version 10.11.5  **Computer** Model Name: MacBook Air Model Identifier:   MacBookAir6,2 Processor Name: Intel Core i7 Processor Speed:    1.7 GHz Number of Processors:   1 Total Number of Cores:  2 L2 Cache (per Core):    256 KB L3 Cache:   4 MB Memory: 8 GB",
        "human_words_regrex": "During mouse move event, 'e.buttons' returns 'undefined' in Safari. Behaving correctly in Chrome. While pressing the left mouse button and moving the mouse expect 'e.buttons' to return 1. 'e.nativeEvent.which' returns the correct result on Safari. Sample Code: **Versions** React: 15.1.0 Safari: 9.1.1 (11601.6.17) **OS** OS X El Capitan Version 10.11.5 **Computer** Model Name: MacBook Air Model Identifier: MacBookAir6,2 Processor Name: Intel Core i7 Processor Speed: 1.7 GHz Number of Processors: 1 Total Number of Cores: 2 L2 Cache (per Core): 256 KB L3 Cache: 4 MB Memory: 8 GB",
        "human_words_stopwords_removal_lemmatization": "mouse move event , ' e.buttons ' return 'undefined ' safari . behaving correctly chrome . pressing left mouse button moving mouse expect ' e.buttons ' return 1 . ' e.nativeevent.which ' return correct result safari . sample code : * * version * * react : 15.1.0 safari : 9.1.1 ( 11601.6.17 ) * * o * * o x el capitan version 10.11.5 * * computer * * model name : macbook air model identifier : macbookair6,2 processor name : intel core i7 processor speed : 1.7 ghz number processor : 1 total number core : 2 l2 cache ( per core ) : 256 kb l3 cache : 4 mb memory : 8 gb",
        "title_stopwords_removal_lemmatization": "polyfill mouseevent.buttons safari"
    },
    {
        "issue_id": 161722681,
        "title": "Expose React build mode/flags",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2016-06-22T16:04:08Z",
        "status": "closed",
        "description": "@kittens has expressed concern that people will forget to set the NODE_ENV when building their React application, which will result in babel producing bloated builds, due to our new dev-mode transforms.  The `__source` and `__self` should never be set in production, and having them set on every element would introduce substantial bloat that you wouldn't want in a production environment.  We probably want to be able to warn when this happens.\n\nIn this case, I think we might want to expose `React.mode = __DEV__` or something, such that the transform could add runtime checks to verify that React is in dev mode, and warn if not.  I know we're thinking about switching to real build flags for the various features, and maybe we want to expose all those individual flags.\n\nAnyway, opening the issue so we have a place to discuss and track.\n",
        "remove_template_description": "@kittens has expressed concern that people will forget to set the NODE_ENV when building their React application, which will result in babel producing bloated builds, due to our new dev-mode transforms.  The `__source` and `__self` should never be set in production, and having them set on every element would introduce substantial bloat that you wouldn't want in a production environment.  We probably want to be able to warn when this happens.  In this case, I think we might want to expose `React.mode = __DEV__` or something, such that the transform could add runtime checks to verify that React is in dev mode, and warn if not.  I know we're thinking about switching to real build flags for the various features, and maybe we want to expose all those individual flags.  Anyway, opening the issue so we have a place to discuss and track.",
        "human_words": "@kittens has expressed concern that people will forget to set the NODE_ENV when building their React application, which will result in babel producing bloated builds, due to our new dev-mode transforms.  The `__source` and `__self` should never be set in production, and having them set on every element would introduce substantial bloat that you wouldn't want in a production environment.  We probably want to be able to warn when this happens.  In this case, I think we might want to expose `React.mode = __DEV__` or something, such that the transform could add runtime checks to verify that React is in dev mode, and warn if not.  I know we're thinking about switching to real build flags for the various features, and maybe we want to expose all those individual flags.  Anyway, opening the issue so we have a place to discuss and track.",
        "human_words_regrex": "@kittens has expressed concern that people will forget to set the NODE_ENV when building their React application, which will result in babel producing bloated builds, due to our new dev-mode transforms. The `__source` and `__self` should never be set in production, and having them set on every element would introduce substantial bloat that you wouldn't want in a production environment. We probably want to be able to warn when this happens. In this case, I think we might want to expose `React.mode = __DEV__` or something, such that the transform could add runtime checks to verify that React is in dev mode, and warn if not. I know we're thinking about switching to real build flags for the various features, and maybe we want to expose all those individual flags. Anyway, opening the issue so we have a place to discuss and track.",
        "human_words_stopwords_removal_lemmatization": "@ kitten expressed concern people forget set node_env building react application , result babel producing bloated build , due new dev-mode transforms . ` __source ` ` __self ` never set production , set every element would introduce substantial bloat would n't want production environment . probably want able warn happens . case , think might want expose ` react.mode = __dev__ ` something , transform could add runtime check verify react dev mode , warn . know 're thinking switching real build flag various feature , maybe want expose individual flag . anyway , opening issue place discus track .",
        "title_stopwords_removal_lemmatization": "expose react build mode/flags"
    },
    {
        "issue_id": 161290417,
        "title": "Warn for string refs where owner != __self",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2016-06-20T20:46:42Z",
        "status": "closed",
        "description": "Sebastian wants to warn when `owner !== __self`, because this is the hard case to find when codemodding from string refs to callback refs.\n",
        "remove_template_description": "Sebastian wants to warn when `owner !== __self`, because this is the hard case to find when codemodding from string refs to callback refs.",
        "human_words": "Sebastian wants to warn when `owner !== __self`, because this is the hard case to find when codemodding from string refs to callback refs.",
        "human_words_regrex": "Sebastian wants to warn when `owner !== __self`, because this is the hard case to find when codemodding from string refs to callback refs.",
        "human_words_stopwords_removal_lemmatization": "sebastian want warn ` owner ! == __self ` , hard case find codemodding string ref callback ref .",
        "title_stopwords_removal_lemmatization": "warn string ref owner ! = __self"
    },
    {
        "issue_id": 160226066,
        "title": "Improve error messages for invalid states",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2016-06-14T16:28:53Z",
        "status": "closed",
        "description": "I think we should create a test suite that throws errors in different lifecycle methods, and make sure we have relatively sensible invariants as early as possible, preferably with component names.\n#6990 is an example of this, but we\u2019ll keep regressing until we actually test for something like this explicitly.\n\ncc @jingc @yungsters @facebook/react-core \n",
        "remove_template_description": "I think we should create a test suite that throws errors in different lifecycle methods, and make sure we have relatively sensible invariants as early as possible, preferably with component names. #6990 is an example of this, but we\u2019ll keep regressing until we actually test for something like this explicitly.  cc @jingc @yungsters @facebook/react-core",
        "human_words": "I think we should create a test suite that throws errors in different lifecycle methods, and make sure we have relatively sensible invariants as early as possible, preferably with component names. #6990 is an example of this, but we\u2019ll keep regressing until we actually test for something like this explicitly.  cc @jingc @yungsters @facebook/react-core",
        "human_words_regrex": "I think we should create a test suite that throws errors in different lifecycle methods, and make sure we have relatively sensible invariants as early as possible, preferably with component names. #6990 is an example of this, but we\u2019ll keep regressing until we actually test for something like this explicitly. cc @jingc @yungsters @facebook/react-core",
        "human_words_stopwords_removal_lemmatization": "think create test suite throw error different lifecycle method , make sure relatively sensible invariant early possible , preferably component name . # 6990 example , \u2019 keep regressing actually test something like explicitly . cc @ jingc @ yungsters @ facebook/react-core",
        "title_stopwords_removal_lemmatization": "improve error message invalid state"
    },
    {
        "issue_id": 158720498,
        "title": "RFC: Make Refs Opt-in",
        "label": [
            "Type: Feature Request",
            "Component: Core Utilities"
        ],
        "date": "2016-06-06T16:34:24Z",
        "status": "closed",
        "description": "**Note: This is my personal proposal.**\n**Please don\u2019t announce it anywhere as \u201cReact dropping refs!\u201d** \ud83d\ude04 \n\nHigher order components solve many problems of mixins, however they come with their own problems. The most painful one in my experience is that they hide the ref of the wrapped component, so they can\u2019t be treated as transparent wrappers. This is well described in #4213.\n\nAs we prepare for de-emphasizing `createClass` and mixins I think it\u2019s important that we **treat higher order components as first class pattern in React, and provide full support for it without clashes with existing features**. This means we need to fix refs to work well with higher order components.\n\nIn the community, I see that people embrace stateless functional components even though they don\u2019t have public instances and don\u2019t support refs pointed at them. I think that this is a good indication that refs are moving from being a commonly needed feature to an escape hatch, and so it can be further de-emphasized by becoming opt-in.\n### What Doesn\u2019t Change\n\n`<div ref={...} />` works like before and provides node in a callback.\n`<StatelessFunctionalComponent ref={...} />` works like before and provides `null` in a callback.\n### Classes Opt Into Exposing a Ref\n\nIn the spirit of https://github.com/facebook/react/issues/4213#issuecomment-115019321, I propose that **`this.ref` becomes an opt-in API on every class component.** If you want your components to be \u201creffable\u201d (that is, to expose their public instances as refs), you need to manually call it in your constructor:\n\n``` js\nclass MyComponent extends Component {\n  constructor(props) {\n    super(props)\n    this.ref(this) // I'm exposing my public instance!\n  }\n\n  ...\n}\n\n// Will print MyComponent instance\n<MyComponent ref={instance => console.log(instance)} />\n```\n### By Default, Don\u2019t Expose Refs\n\nIf you don\u2019t call `this.ref(this)` during the constructor, React will automatically call it with `null`:\n\n``` js\nclass MyComponent extends Component {\n  ...\n}\n\n// Will print null\n<MyComponent ref={instance => console.log(instance)} />\n```\n\nThis means that by default, class components will act just like functional components. There is no access to the instance unless the class opts in.\n### Automatic Cleanup\n\nIf the class opts in, it only needs to call `this.ref` in the constructor. React will take care of automatically calling it with `null` when the component unmounts.\n### New! Forwarding a Ref to Another Component\n\n**This is the new feature here.**\nSince we opt into refs, we can cleanly support ref forwarding for higher order components:\n\n``` js\nfunction wrap(WrappedComponent) {\n  return class extends Component {\n    ...\n\n    render() {\n      return <WrappedComponent ref={this.ref} />\n    }\n  }\n}\n```\n\nBy passing `ref={this.ref}`, we let `WrappedComponent` supply its own instance, if available. This way the fact that it\u2019s wrapped with a higher order component becomes unobservable.\n\nThis also works fine if you conditionally switch between different components or delay rendering:\n\n``` js\nfunction wrap(WrappedComponent) {\n  return class extends Component {\n    ...\n\n    render() {\n      return this.state.isReady ? <Spinner /> : <WrappedComponent ref={this.ref} />\n    }\n  }\n}\n```\n\nLet\u2019s say `isReady` is `false` initially. React would take care of calling `this.ref(null)` after the constructor ran (since it knows the constructor never called `this.ref(this)`). So initially the parent receives `null`, as expected.\n\nWhen `WrappedComponent` mounts, it will call `this.ref(this)` with its instance, which make it available to the parent. When `WrappedComponent` unmounts, React will call `this.ref(null)` for its instance, cleaning it up again.\n\nThe same works if we alternate between `<WrappedComponent ref={this.ref} />` and `<SomeOtherComponent ref={this.ref} />`.\n### Upsides\n#### Higher Order Components are Unobservable\n\nThis removes a common pain point in that wrapping a component with a HOC changes its public API.\n#### Refs are Further Discouraged\n\nBy making them opt-in, we better signal that you shouldn\u2019t use them for data flow. The component can also be certain that changing or removing an imperative method is not a breaking change because by default it doesn\u2019t expose the ref. If it exposes the ref, this is done intentionally.\n#### Providing Explicit Imperative APIs\n\nThe component may also choose to provide a subset of methods as its public API:\n\n``` js\nclass MyComponent extends Component {\n  constructor(props) {\n    super(props)\n    // I'm exposing just some stuff!\n    this.ref({\n      focus: this.focus.bind(this)\n    })\n  }\n\n  focus() { ... }\n  privateMethodIDontWantAnybodyToCall() { ... }\n}\n```\n\nThis lets the component choose _which_ methods it wants to expose imperatively, and which are still considered implementation details.\n### Downsides\n#### Migration Cost\n\nThis would be an easy enough codemod for most components (just add `this.ref(this)` to any class component). But it\u2019s still a cost considering some of those components are on npm and out of your control. Arguably most third party components don\u2019t provide imperative methods anyway, but this will cause some trouble.\n#### Potential for Misuse\n\nI can imagine people doing `this.ref(this)` and then `<WrappedComponent ref={this.ref} />` in the `render` method. This could get confusing but I don\u2019t see any easy way to prevent or warn about this.\n#### Too Much Freedom\n\nTechnically you\u2019d be able to pass `this.ref(42)`, `this.ref(findDOMNode(this))` or other weird things. Maybe we could limit possible values to React public instances and `null`. On the other hand, the ability to only provide a subset of methods as described in \u201cProviding Explicit Imperative APIs\u201d seems useful.\n### Other Considerations\n#### `this.props.ref`?\n\nWe could have provided `ref` inside `this.props` as `this.props.ref`. I would argue that we don\u2019t want to do this for two reasons:\n- We want React to still \u201cmanage\u201d it partially by calling `this.ref(null)` when component unmounts. Otherwise it\u2019s too easy to introduce memory leaks. Having magic behavior for one of the props would be unexpected.\n- We don\u2019t want `{...this.props}` to transfer the ref over to the child as that would be unexpected in most cases.\n\n---\n\nWhat do you think?\n\ncc @facebook/react-core \n",
        "remove_template_description": "**Note: This is my personal proposal.** **Please don\u2019t announce it anywhere as \u201cReact dropping refs!\u201d** \ud83d\ude04   Higher order components solve many problems of mixins, however they come with their own problems. The most painful one in my experience is that they hide the ref of the wrapped component, so they can\u2019t be treated as transparent wrappers. This is well described in #4213.  As we prepare for de-emphasizing `createClass` and mixins I think it\u2019s important that we **treat higher order components as first class pattern in React, and provide full support for it without clashes with existing features**. This means we need to fix refs to work well with higher order components.  In the community, I see that people embrace stateless functional components even though they don\u2019t have public instances and don\u2019t support refs pointed at them. I think that this is a good indication that refs are moving from being a commonly needed feature to an escape hatch, and so it can be further de-emphasized by becoming opt-in. ### What Doesn\u2019t Change  `<div ref={...} />` works like before and provides node in a callback. `<StatelessFunctionalComponent ref={...} />` works like before and provides `null` in a callback. ### Classes Opt Into Exposing a Ref  In the spirit of https://github.com/facebook/react/issues/4213#issuecomment-115019321, I propose that **`this.ref` becomes an opt-in API on every class component.** If you want your components to be \u201creffable\u201d (that is, to expose their public instances as refs), you need to manually call it in your constructor:  ``` js class MyComponent extends Component {   constructor(props) {     super(props)     this.ref(this) // I'm exposing my public instance!   }    ... }  // Will print MyComponent instance <MyComponent ref={instance => console.log(instance)} /> ``` ### By Default, Don\u2019t Expose Refs  If you don\u2019t call `this.ref(this)` during the constructor, React will automatically call it with `null`:  ``` js class MyComponent extends Component {   ... }  // Will print null <MyComponent ref={instance => console.log(instance)} /> ```  This means that by default, class components will act just like functional components. There is no access to the instance unless the class opts in. ### Automatic Cleanup  If the class opts in, it only needs to call `this.ref` in the constructor. React will take care of automatically calling it with `null` when the component unmounts. ### New! Forwarding a Ref to Another Component  **This is the new feature here.** Since we opt into refs, we can cleanly support ref forwarding for higher order components:  ``` js function wrap(WrappedComponent) {   return class extends Component {     ...      render() {       return <WrappedComponent ref={this.ref} />     }   } } ```  By passing `ref={this.ref}`, we let `WrappedComponent` supply its own instance, if available. This way the fact that it\u2019s wrapped with a higher order component becomes unobservable.  This also works fine if you conditionally switch between different components or delay rendering:  ``` js function wrap(WrappedComponent) {   return class extends Component {     ...      render() {       return this.state.isReady ? <Spinner /> : <WrappedComponent ref={this.ref} />     }   } } ```  Let\u2019s say `isReady` is `false` initially. React would take care of calling `this.ref(null)` after the constructor ran (since it knows the constructor never called `this.ref(this)`). So initially the parent receives `null`, as expected.  When `WrappedComponent` mounts, it will call `this.ref(this)` with its instance, which make it available to the parent. When `WrappedComponent` unmounts, React will call `this.ref(null)` for its instance, cleaning it up again.  The same works if we alternate between `<WrappedComponent ref={this.ref} />` and `<SomeOtherComponent ref={this.ref} />`. ### Upsides #### Higher Order Components are Unobservable  This removes a common pain point in that wrapping a component with a HOC changes its public API. #### Refs are Further Discouraged  By making them opt-in, we better signal that you shouldn\u2019t use them for data flow. The component can also be certain that changing or removing an imperative method is not a breaking change because by default it doesn\u2019t expose the ref. If it exposes the ref, this is done intentionally. #### Providing Explicit Imperative APIs  The component may also choose to provide a subset of methods as its public API:  ``` js class MyComponent extends Component {   constructor(props) {     super(props)     // I'm exposing just some stuff!     this.ref({       focus: this.focus.bind(this)     })   }    focus() { ... }   privateMethodIDontWantAnybodyToCall() { ... } } ```  This lets the component choose _which_ methods it wants to expose imperatively, and which are still considered implementation details. ### Downsides #### Migration Cost  This would be an easy enough codemod for most components (just add `this.ref(this)` to any class component). But it\u2019s still a cost considering some of those components are on npm and out of your control. Arguably most third party components don\u2019t provide imperative methods anyway, but this will cause some trouble. #### Potential for Misuse  I can imagine people doing `this.ref(this)` and then `<WrappedComponent ref={this.ref} />` in the `render` method. This could get confusing but I don\u2019t see any easy way to prevent or warn about this. #### Too Much Freedom  Technically you\u2019d be able to pass `this.ref(42)`, `this.ref(findDOMNode(this))` or other weird things. Maybe we could limit possible values to React public instances and `null`. On the other hand, the ability to only provide a subset of methods as described in \u201cProviding Explicit Imperative APIs\u201d seems useful. ### Other Considerations #### `this.props.ref`?  We could have provided `ref` inside `this.props` as `this.props.ref`. I would argue that we don\u2019t want to do this for two reasons: - We want React to still \u201cmanage\u201d it partially by calling `this.ref(null)` when component unmounts. Otherwise it\u2019s too easy to introduce memory leaks. Having magic behavior for one of the props would be unexpected. - We don\u2019t want `{...this.props}` to transfer the ref over to the child as that would be unexpected in most cases.  ---  What do you think?  cc @facebook/react-core",
        "human_words": "**Note: This is my personal proposal.** **Please don\u2019t announce it anywhere as \u201cReact dropping refs!\u201d** \ud83d\ude04   Higher order components solve many problems of mixins, however they come with their own problems. The most painful one in my experience is that they hide the ref of the wrapped component, so they can\u2019t be treated as transparent wrappers. This is well described in #4213.  As we prepare for de-emphasizing `createClass` and mixins I think it\u2019s important that we **treat higher order components as first class pattern in React, and provide full support for it without clashes with existing features**. This means we need to fix refs to work well with higher order components.  In the community, I see that people embrace stateless functional components even though they don\u2019t have public instances and don\u2019t support refs pointed at them. I think that this is a good indication that refs are moving from being a commonly needed feature to an escape hatch, and so it can be further de-emphasized by becoming opt-in. ### What Doesn\u2019t Change  `<div ref={...} />` works like before and provides node in a callback. `<StatelessFunctionalComponent ref={...} />` works like before and provides `null` in a callback. ### Classes Opt Into Exposing a Ref  In the spirit of https://github.com/facebook/react/issues/4213#issuecomment-115019321, I propose that **`this.ref` becomes an opt-in API on every class component.** If you want your components to be \u201creffable\u201d (that is, to expose their public instances as refs), you need to manually call it in your constructor:   ### By Default, Don\u2019t Expose Refs  If you don\u2019t call `this.ref(this)` during the constructor, React will automatically call it with `null`:    This means that by default, class components will act just like functional components. There is no access to the instance unless the class opts in. ### Automatic Cleanup  If the class opts in, it only needs to call `this.ref` in the constructor. React will take care of automatically calling it with `null` when the component unmounts. ### New! Forwarding a Ref to Another Component  **This is the new feature here.** Since we opt into refs, we can cleanly support ref forwarding for higher order components:    By passing `ref={this.ref}`, we let `WrappedComponent` supply its own instance, if available. This way the fact that it\u2019s wrapped with a higher order component becomes unobservable.  This also works fine if you conditionally switch between different components or delay rendering:    Let\u2019s say `isReady` is `false` initially. React would take care of calling `this.ref(null)` after the constructor ran (since it knows the constructor never called `this.ref(this)`). So initially the parent receives `null`, as expected.  When `WrappedComponent` mounts, it will call `this.ref(this)` with its instance, which make it available to the parent. When `WrappedComponent` unmounts, React will call `this.ref(null)` for its instance, cleaning it up again.  The same works if we alternate between `<WrappedComponent ref={this.ref} />` and `<SomeOtherComponent ref={this.ref} />`. ### Upsides #### Higher Order Components are Unobservable  This removes a common pain point in that wrapping a component with a HOC changes its public API. #### Refs are Further Discouraged  By making them opt-in, we better signal that you shouldn\u2019t use them for data flow. The component can also be certain that changing or removing an imperative method is not a breaking change because by default it doesn\u2019t expose the ref. If it exposes the ref, this is done intentionally. #### Providing Explicit Imperative APIs  The component may also choose to provide a subset of methods as its public API:    This lets the component choose _which_ methods it wants to expose imperatively, and which are still considered implementation details. ### Downsides #### Migration Cost  This would be an easy enough codemod for most components (just add `this.ref(this)` to any class component). But it\u2019s still a cost considering some of those components are on npm and out of your control. Arguably most third party components don\u2019t provide imperative methods anyway, but this will cause some trouble. #### Potential for Misuse  I can imagine people doing `this.ref(this)` and then `<WrappedComponent ref={this.ref} />` in the `render` method. This could get confusing but I don\u2019t see any easy way to prevent or warn about this. #### Too Much Freedom  Technically you\u2019d be able to pass `this.ref(42)`, `this.ref(findDOMNode(this))` or other weird things. Maybe we could limit possible values to React public instances and `null`. On the other hand, the ability to only provide a subset of methods as described in \u201cProviding Explicit Imperative APIs\u201d seems useful. ### Other Considerations #### `this.props.ref`?  We could have provided `ref` inside `this.props` as `this.props.ref`. I would argue that we don\u2019t want to do this for two reasons: - We want React to still \u201cmanage\u201d it partially by calling `this.ref(null)` when component unmounts. Otherwise it\u2019s too easy to introduce memory leaks. Having magic behavior for one of the props would be unexpected. - We don\u2019t want `{...this.props}` to transfer the ref over to the child as that would be unexpected in most cases.  ---  What do you think?  cc @facebook/react-core",
        "human_words_regrex": "**Note: This is my personal proposal.** **Please don\u2019t announce it anywhere as \u201cReact dropping refs!\u201d** \ud83d\ude04 Higher order components solve many problems of mixins, however they come with their own problems. The most painful one in my experience is that they hide the ref of the wrapped component, so they can\u2019t be treated as transparent wrappers. This is well described in #4213. As we prepare for de-emphasizing `createClass` and mixins I think it\u2019s important that we **treat higher order components as first class pattern in React, and provide full support for it without clashes with existing features**. This means we need to fix refs to work well with higher order components. In the community, I see that people embrace stateless functional components even though they don\u2019t have public instances and don\u2019t support refs pointed at them. I think that this is a good indication that refs are moving from being a commonly needed feature to an escape hatch, and so it can be further de-emphasized by becoming opt-in. ### What Doesn\u2019t Change `` works like before and provides node in a callback. `` works like before and provides `null` in a callback. ### Classes Opt Into Exposing a Ref In the spirit of  I propose that **`this.ref` becomes an opt-in API on every class component.** If you want your components to be \u201creffable\u201d (that is, to expose their public instances as refs), you need to manually call it in your constructor: ### By Default, Don\u2019t Expose Refs If you don\u2019t call `this.ref(this)` during the constructor, React will automatically call it with `null`: This means that by default, class components will act just like functional components. There is no access to the instance unless the class opts in. ### Automatic Cleanup If the class opts in, it only needs to call `this.ref` in the constructor. React will take care of automatically calling it with `null` when the component unmounts. ### New! Forwarding a Ref to Another Component **This is the new feature here.** Since we opt into refs, we can cleanly support ref forwarding for higher order components: By passing `ref={this.ref}`, we let `WrappedComponent` supply its own instance, if available. This way the fact that it\u2019s wrapped with a higher order component becomes unobservable. This also works fine if you conditionally switch between different components or delay rendering: Let\u2019s say `isReady` is `false` initially. React would take care of calling `this.ref(null)` after the constructor ran (since it knows the constructor never called `this.ref(this)`). So initially the parent receives `null`, as expected. When `WrappedComponent` mounts, it will call `this.ref(this)` with its instance, which make it available to the parent. When `WrappedComponent` unmounts, React will call `this.ref(null)` for its instance, cleaning it up again. The same works if we alternate between `` and ``. ### Upsides #### Higher Order Components are Unobservable This removes a common pain point in that wrapping a component with a HOC changes its public API. #### Refs are Further Discouraged By making them opt-in, we better signal that you shouldn\u2019t use them for data flow. The component can also be certain that changing or removing an imperative method is not a breaking change because by default it doesn\u2019t expose the ref. If it exposes the ref, this is done intentionally. #### Providing Explicit Imperative APIs The component may also choose to provide a subset of methods as its public API: This lets the component choose _which_ methods it wants to expose imperatively, and which are still considered implementation details. ### Downsides #### Migration Cost This would be an easy enough codemod for most components (just add `this.ref(this)` to any class component). But it\u2019s still a cost considering some of those components are on npm and out of your control. Arguably most third party components don\u2019t provide imperative methods anyway, but this will cause some trouble. #### Potential for Misuse I can imagine people doing `this.ref(this)` and then `` in the `render` method. This could get confusing but I don\u2019t see any easy way to prevent or warn about this. #### Too Much Freedom Technically you\u2019d be able to pass `this.ref(42)`, `this.ref(findDOMNode(this))` or other weird things. Maybe we could limit possible values to React public instances and `null`. On the other hand, the ability to only provide a subset of methods as described in \u201cProviding Explicit Imperative APIs\u201d seems useful. ### Other Considerations #### `this.props.ref`? We could have provided `ref` inside `this.props` as `this.props.ref`. I would argue that we don\u2019t want to do this for two reasons: - We want React to still \u201cmanage\u201d it partially by calling `this.ref(null)` when component unmounts. Otherwise it\u2019s too easy to introduce memory leaks. Having magic behavior for one of the props would be unexpected. - We don\u2019t want `{...this.props}` to transfer the ref over to the child as that would be unexpected in most cases. --- What do you think? cc @facebook/react-core",
        "human_words_stopwords_removal_lemmatization": "* * note : personal proposal . * * * * please \u2019 announce anywhere \u201c react dropping ref ! \u201d * * \ud83d\ude04 higher order component solve many problem mixins , however come problem . painful one experience hide ref wrapped component , \u2019 treated transparent wrapper . well described # 4213. prepare de-emphasizing ` createclass ` mixins think \u2019 important * * treat higher order component first class pattern react , provide full support without clash existing feature * * . mean need fix ref work well higher order component . community , see people embrace stateless functional component even though \u2019 public instance \u2019 support ref pointed . think good indication ref moving commonly needed feature escape hatch , de-emphasized becoming opt-in . # # # \u2019 change `` work like provides node callback . `` work like provides ` null ` callback . # # # class opt exposing ref spirit propose * * ` this.ref ` becomes opt-in api every class component . * * want component \u201c reffable \u201d ( , expose public instance ref ) , need manually call constructor : # # # default , \u2019 expose ref \u2019 call ` this.ref ( ) ` constructor , react automatically call ` null ` : mean default , class component act like functional component . access instance unless class opts . # # # automatic cleanup class opts , need call ` this.ref ` constructor . react take care automatically calling ` null ` component unmounts . # # # new ! forwarding ref another component * * new feature . * * since opt ref , cleanly support ref forwarding higher order component : passing ` ref= { this.ref } ` , let ` wrappedcomponent ` supply instance , available . way fact \u2019 wrapped higher order component becomes unobservable . also work fine conditionally switch different component delay rendering : let \u2019 say ` isready ` ` false ` initially . react would take care calling ` this.ref ( null ) ` constructor ran ( since know constructor never called ` this.ref ( ) ` ) . initially parent receives ` null ` , expected . ` wrappedcomponent ` mount , call ` this.ref ( ) ` instance , make available parent . ` wrappedcomponent ` unmounts , react call ` this.ref ( null ) ` instance , cleaning . work alternate `` `` . # # # upside # # # # higher order component unobservable remove common pain point wrapping component hoc change public api . # # # # ref discouraged making opt-in , better signal \u2019 use data flow . component also certain changing removing imperative method breaking change default \u2019 expose ref . expose ref , done intentionally . # # # # providing explicit imperative apis component may also choose provide subset method public api : let component choose _which_ method want expose imperatively , still considered implementation detail . # # # downside # # # # migration cost would easy enough codemod component ( add ` this.ref ( ) ` class component ) . \u2019 still cost considering component npm control . arguably third party component \u2019 provide imperative method anyway , cause trouble . # # # # potential misuse imagine people ` this.ref ( ) ` `` ` render ` method . could get confusing \u2019 see easy way prevent warn . # # # # much freedom technically \u2019 able pas ` this.ref ( 42 ) ` , ` this.ref ( finddomnode ( ) ) ` weird thing . maybe could limit possible value react public instance ` null ` . hand , ability provide subset method described \u201c providing explicit imperative apis \u201d seems useful . # # # consideration # # # # ` this.props.ref ` ? could provided ` ref ` inside ` this.props ` ` this.props.ref ` . would argue \u2019 want two reason : - want react still \u201c manage \u201d partially calling ` this.ref ( null ) ` component unmounts . otherwise \u2019 easy introduce memory leak . magic behavior one prop would unexpected . - \u2019 want ` { ... this.props } ` transfer ref child would unexpected case . -- - think ? cc @ facebook/react-core",
        "title_stopwords_removal_lemmatization": "rfc : make ref opt-in"
    },
    {
        "issue_id": 157306521,
        "title": "Provide an opt-in way to easily manage `this` in event handlers",
        "label": [
            "Resolution: Wontfix",
            "Type: Feature Request"
        ],
        "date": "2016-05-27T23:23:01Z",
        "status": "closed",
        "description": "There's no shortage of places in React where a dev will write something like\n\n```\nonClick={() => this.setBooksSubjects()}\n```\n\nor alternatively \n\n```\nonClick={this.setBooksSubjects.bind(this)}\n```\n\nIt's not ideal to re-create these functions on each render, so the alternative would be some form of auto-binding in the class's constructor, all of which re-create these functions once per instance, and require boilerplate. \n\nI'd love to see the React team add some way of opting in to having a handler `call`ed with the current component set as this.  By \"current component\" I mean the component whose `render` created the element.  I don't know what it should be called, but, for example, if it were called \"ownClick\" it would look like this\n\n```\n   <button ownClick={this.foo}>Click me</button>\n```\n\nAnd so when that button is clicked, `foo` would be called, with the object that owns the `render` method which rendered the button set as `this`.\n",
        "remove_template_description": "There's no shortage of places in React where a dev will write something like  ``` onClick={() => this.setBooksSubjects()} ```  or alternatively   ``` onClick={this.setBooksSubjects.bind(this)} ```  It's not ideal to re-create these functions on each render, so the alternative would be some form of auto-binding in the class's constructor, all of which re-create these functions once per instance, and require boilerplate.   I'd love to see the React team add some way of opting in to having a handler `call`ed with the current component set as this.  By \"current component\" I mean the component whose `render` created the element.  I don't know what it should be called, but, for example, if it were called \"ownClick\" it would look like this  ```    <button ownClick={this.foo}>Click me</button> ```  And so when that button is clicked, `foo` would be called, with the object that owns the `render` method which rendered the button set as `this`.",
        "human_words": "There's no shortage of places in React where a dev will write something like    or alternatively     It's not ideal to re-create these functions on each render, so the alternative would be some form of auto-binding in the class's constructor, all of which re-create these functions once per instance, and require boilerplate.   I'd love to see the React team add some way of opting in to having a handler `call`ed with the current component set as this.  By \"current component\" I mean the component whose `render` created the element.  I don't know what it should be called, but, for example, if it were called \"ownClick\" it would look like this    And so when that button is clicked, `foo` would be called, with the object that owns the `render` method which rendered the button set as `this`.",
        "human_words_regrex": "There's no shortage of places in React where a dev will write something like or alternatively It's not ideal to re-create these functions on each render, so the alternative would be some form of auto-binding in the class's constructor, all of which re-create these functions once per instance, and require boilerplate. I'd love to see the React team add some way of opting in to having a handler `call`ed with the current component set as this. By \"current component\" I mean the component whose `render` created the element. I don't know what it should be called, but, for example, if it were called \"ownClick\" it would look like this And so when that button is clicked, `foo` would be called, with the object that owns the `render` method which rendered the button set as `this`.",
        "human_words_stopwords_removal_lemmatization": "'s shortage place react dev write something like alternatively 's ideal re-create function render , alternative would form auto-binding class 's constructor , re-create function per instance , require boilerplate . 'd love see react team add way opting handler ` call ` ed current component set . `` current component '' mean component whose ` render ` created element . n't know called , , example , called `` ownclick '' would look like button clicked , ` foo ` would called , object owns ` render ` method rendered button set ` ` .",
        "title_stopwords_removal_lemmatization": "provide opt-in way easily manage ` ` event handler"
    },
    {
        "issue_id": 154490740,
        "title": "ReactPerf 15.1.0-alpha.1 expose isProfiling on the exported object?",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2016-05-12T14:04:17Z",
        "status": "closed",
        "description": "I've tested the new Perf tools on one of the screens in one app I'm working on and it works great :)\n\nOne thing I wanted also on the old one Perf tools was to be able to check whether the Perf tools are started or stopped, so basically exposing `ReactDebugTool`'s `isProfiling` variable. My use for that is that I have a keyboard shortcut (in development) bound to start/stop the Perf tools and currently I'm forced to maintain such a variable myself to know whether to start or stop (which gets out of sync if I start/stop the perf tools without the keyboard shortcut).\n\nIf you don't think it's worthwhile to expose `isProfiling` feel free to close this issue.\n",
        "remove_template_description": "I've tested the new Perf tools on one of the screens in one app I'm working on and it works great :)  One thing I wanted also on the old one Perf tools was to be able to check whether the Perf tools are started or stopped, so basically exposing `ReactDebugTool`'s `isProfiling` variable. My use for that is that I have a keyboard shortcut (in development) bound to start/stop the Perf tools and currently I'm forced to maintain such a variable myself to know whether to start or stop (which gets out of sync if I start/stop the perf tools without the keyboard shortcut).  If you don't think it's worthwhile to expose `isProfiling` feel free to close this issue.",
        "human_words": "I've tested the new Perf tools on one of the screens in one app I'm working on and it works great :)  One thing I wanted also on the old one Perf tools was to be able to check whether the Perf tools are started or stopped, so basically exposing `ReactDebugTool`'s `isProfiling` variable. My use for that is that I have a keyboard shortcut (in development) bound to start/stop the Perf tools and currently I'm forced to maintain such a variable myself to know whether to start or stop (which gets out of sync if I start/stop the perf tools without the keyboard shortcut).  If you don't think it's worthwhile to expose `isProfiling` feel free to close this issue.",
        "human_words_regrex": "I've tested the new Perf tools on one of the screens in one app I'm working on and it works great :) One thing I wanted also on the old one Perf tools was to be able to check whether the Perf tools are started or stopped, so basically exposing `ReactDebugTool`'s `isProfiling` variable. My use for that is that I have a keyboard shortcut (in development) bound to start/stop the Perf tools and currently I'm forced to maintain such a variable myself to know whether to start or stop (which gets out of sync if I start/stop the perf tools without the keyboard shortcut). If you don't think it's worthwhile to expose `isProfiling` feel free to close this issue.",
        "human_words_stopwords_removal_lemmatization": "'ve tested new perf tool one screen one app 'm working work great : ) one thing wanted also old one perf tool able check whether perf tool started stopped , basically exposing ` reactdebugtool ` 's ` isprofiling ` variable . use keyboard shortcut ( development ) bound start/stop perf tool currently 'm forced maintain variable know whether start stop ( get sync start/stop perf tool without keyboard shortcut ) . n't think 's worthwhile expose ` isprofiling ` feel free close issue .",
        "title_stopwords_removal_lemmatization": "reactperf 15.1.0-alpha.1 expose isprofiling exported object ?"
    },
    {
        "issue_id": 154233069,
        "title": "Warn on inline style update with a bad value",
        "label": [
            "Type: Feature Request",
            "Component: DOM",
            "Resolution: Stale"
        ],
        "date": "2016-05-11T12:37:07Z",
        "status": "closed",
        "description": "If set an inline style attribute for a component, such as `backgroundColor: 'yellow'`, and then update the state with a bad value to make the inline style like this `backgroundColor: 'non-exist-color'`. This currently takes no effect on the component, and the backgroundColor will remain yellow. (live example: https://jsfiddle.net/d6me6fca/ )\n\nI suppose this is not the correct behavior, the old value should be override by new value, even the value is non-standard, so it can fallback to use the parent style just like plain HTML. If leave the previous style as is, the behavior of component will lose connection with component state, the style will become chaotic and unpredictable.\n",
        "remove_template_description": "If set an inline style attribute for a component, such as `backgroundColor: 'yellow'`, and then update the state with a bad value to make the inline style like this `backgroundColor: 'non-exist-color'`. This currently takes no effect on the component, and the backgroundColor will remain yellow. (live example: https://jsfiddle.net/d6me6fca/ )  I suppose this is not the correct behavior, the old value should be override by new value, even the value is non-standard, so it can fallback to use the parent style just like plain HTML. If leave the previous style as is, the behavior of component will lose connection with component state, the style will become chaotic and unpredictable.",
        "human_words": "If set an inline style attribute for a component, such as `backgroundColor: 'yellow'`, and then update the state with a bad value to make the inline style like this `backgroundColor: 'non-exist-color'`. This currently takes no effect on the component, and the backgroundColor will remain yellow. (live example: https://jsfiddle.net/d6me6fca/ )  I suppose this is not the correct behavior, the old value should be override by new value, even the value is non-standard, so it can fallback to use the parent style just like plain HTML. If leave the previous style as is, the behavior of component will lose connection with component state, the style will become chaotic and unpredictable.",
        "human_words_regrex": "If set an inline style attribute for a component, such as `backgroundColor: 'yellow'`, and then update the state with a bad value to make the inline style like this `backgroundColor: 'non-exist-color'`. This currently takes no effect on the component, and the backgroundColor will remain yellow. (live example:  ) I suppose this is not the correct behavior, the old value should be override by new value, even the value is non-standard, so it can fallback to use the parent style just like plain HTML. If leave the previous style as is, the behavior of component will lose connection with component state, the style will become chaotic and unpredictable.",
        "human_words_stopwords_removal_lemmatization": "set inline style attribute component , ` backgroundcolor : 'yellow ' ` , update state bad value make inline style like ` backgroundcolor : 'non-exist-color ' ` . currently take effect component , backgroundcolor remain yellow . ( live example : ) suppose correct behavior , old value override new value , even value non-standard , fallback use parent style like plain html . leave previous style , behavior component lose connection component state , style become chaotic unpredictable .",
        "title_stopwords_removal_lemmatization": "warn inline style update bad value"
    },
    {
        "issue_id": 153617220,
        "title": "support for event.movementX/Y [feature-request]",
        "label": [
            "Type: Feature Request",
            "Component: DOM"
        ],
        "date": "2016-05-07T20:53:16Z",
        "status": "closed",
        "description": "currently it seems synthetic events don't have those properties on mousemove\n",
        "remove_template_description": "currently it seems synthetic events don't have those properties on mousemove",
        "human_words": "currently it seems synthetic events don't have those properties on mousemove",
        "human_words_regrex": "currently it seems synthetic events don't have those properties on mousemove",
        "human_words_stopwords_removal_lemmatization": "currently seems synthetic event n't property mousemove",
        "title_stopwords_removal_lemmatization": "support event.movementx/y [ feature-request ]"
    },
    {
        "issue_id": 153532835,
        "title": "<datalist> support",
        "label": [
            "Type: Feature Request",
            "Component: DOM"
        ],
        "date": "2016-05-06T20:34:52Z",
        "status": "closed",
        "description": "Not a _ton_ of browser support for this right now, but it appears to be on the horizon for Webkit. \nhttps://bugs.webkit.org/show_bug.cgi?id=98934\n\nhttp://caniuse.com/#search=datalist\n\nRight now, I'm not getting any DOM events fired from it in Chrome. Wonder if SyntheticEvent could prollyfill. \nhttps://facebook.github.io/react/docs/events.html#form-events\n",
        "remove_template_description": "Not a _ton_ of browser support for this right now, but it appears to be on the horizon for Webkit.  https://bugs.webkit.org/show_bug.cgi?id=98934  http://caniuse.com/#search=datalist  Right now, I'm not getting any DOM events fired from it in Chrome. Wonder if SyntheticEvent could prollyfill.  https://facebook.github.io/react/docs/events.html#form-events",
        "human_words": "Not a _ton_ of browser support for this right now, but it appears to be on the horizon for Webkit.  https://bugs.webkit.org/show_bug.cgi?id=98934  http://caniuse.com/#search=datalist  Right now, I'm not getting any DOM events fired from it in Chrome. Wonder if SyntheticEvent could prollyfill.  https://facebook.github.io/react/docs/events.html#form-events",
        "human_words_regrex": "Not a _ton_ of browser support for this right now, but it appears to be on the horizon for Webkit.   Right now, I'm not getting any DOM events fired from it in Chrome. Wonder if SyntheticEvent could prollyfill. ",
        "human_words_stopwords_removal_lemmatization": "_ton_ browser support right , appears horizon webkit . right , 'm getting dom event fired chrome . wonder syntheticevent could prollyfill .",
        "title_stopwords_removal_lemmatization": "< datalist > support"
    },
    {
        "issue_id": 151282625,
        "title": "Introduce __PROFILE__ build",
        "label": [
            "Component: Build Infrastructure",
            "Type: Feature Request",
            "React Core Team"
        ],
        "date": "2016-04-27T02:17:42Z",
        "status": "closed",
        "description": "As discussed in #6015, we plan to add a new build configuration that does _not_ have the `__DEV__` overhead but that comes with the new `ReactPerf` enabled.\n\nThis means that developer warnings, etc, will need to be gated by `__DEV__`, but the component tree (#6549) and some other events (e.g. #6612) will need to be gated by `__PROFILE__`.\n\nI\u2019m curious how this could be implemented. Right now our system is simple:\n### Current System\n#### Variables\n- `__DEV__ = (process.env.NODE_ENV !== 'production')`\n#### Development Build (any `NODE_ENV` except `'production'`)\n- `__DEV__` is `true`\n#### Production Build (`NODE_ENV` is `'production'`)\n- `__DEV__` is `false`\n\nAs you can see, if `process.env.NODE_ENV` is omitted, we assume `__DEV__` mode. This is a sensible assumption, and not the one we want to change, as most projects today don\u2019t specify anything as `NODE_ENV` in development, and we don\u2019t want them to suddenly lose all developer warnings.\n\nTherefore, I propose the following new system:\n### Proposed System\n#### Variables\n- `__DEV__ = (process.env.NODE_ENV !== 'profile' && process.env.NODE_ENV !== 'production')`\n- `__PROFILE__ = (process.env.NODE_ENV === 'profile'`)\n#### Development Build (any `NODE_ENV` except `'profile'` or `'production'`)\n- `__DEV__` is `true`\n- `__PROFILE__` is `true`\n#### Profile Build (`NODE_ENV` is `'profile'`)\n- `__DEV__` is `false`\n- `__PROFILE__` is `true`\n#### Production Build (`NODE_ENV` is `'production'`)\n- `__DEV__` is `false`\n- `__PROFILE__` is `false`\n\nThis would let us have three separate build configurations. We can use the same pattern in other `fbjs` projects as well, if desired. I would say it\u2019s unlikely we\u2019d ever want to add a separate fourth configuration so this should cover all our needs.\n\nAny thoughts why this would be a bad idea? Should I implement this in `fbjs`?\n\ncc @facebook/react-core \n",
        "remove_template_description": "As discussed in #6015, we plan to add a new build configuration that does _not_ have the `__DEV__` overhead but that comes with the new `ReactPerf` enabled.  This means that developer warnings, etc, will need to be gated by `__DEV__`, but the component tree (#6549) and some other events (e.g. #6612) will need to be gated by `__PROFILE__`.  I\u2019m curious how this could be implemented. Right now our system is simple: ### Current System #### Variables - `__DEV__ = (process.env.NODE_ENV !== 'production')` #### Development Build (any `NODE_ENV` except `'production'`) - `__DEV__` is `true` #### Production Build (`NODE_ENV` is `'production'`) - `__DEV__` is `false`  As you can see, if `process.env.NODE_ENV` is omitted, we assume `__DEV__` mode. This is a sensible assumption, and not the one we want to change, as most projects today don\u2019t specify anything as `NODE_ENV` in development, and we don\u2019t want them to suddenly lose all developer warnings.  Therefore, I propose the following new system: ### Proposed System #### Variables - `__DEV__ = (process.env.NODE_ENV !== 'profile' && process.env.NODE_ENV !== 'production')` - `__PROFILE__ = (process.env.NODE_ENV === 'profile'`) #### Development Build (any `NODE_ENV` except `'profile'` or `'production'`) - `__DEV__` is `true` - `__PROFILE__` is `true` #### Profile Build (`NODE_ENV` is `'profile'`) - `__DEV__` is `false` - `__PROFILE__` is `true` #### Production Build (`NODE_ENV` is `'production'`) - `__DEV__` is `false` - `__PROFILE__` is `false`  This would let us have three separate build configurations. We can use the same pattern in other `fbjs` projects as well, if desired. I would say it\u2019s unlikely we\u2019d ever want to add a separate fourth configuration so this should cover all our needs.  Any thoughts why this would be a bad idea? Should I implement this in `fbjs`?  cc @facebook/react-core",
        "human_words": "As discussed in #6015, we plan to add a new build configuration that does _not_ have the `__DEV__` overhead but that comes with the new `ReactPerf` enabled.  This means that developer warnings, etc, will need to be gated by `__DEV__`, but the component tree (#6549) and some other events (e.g. #6612) will need to be gated by `__PROFILE__`.  I\u2019m curious how this could be implemented. Right now our system is simple: ### Current System #### Variables - `__DEV__ = (process.env.NODE_ENV !== 'production')` #### Development Build (any `NODE_ENV` except `'production'`) - `__DEV__` is `true` #### Production Build (`NODE_ENV` is `'production'`) - `__DEV__` is `false`  As you can see, if `process.env.NODE_ENV` is omitted, we assume `__DEV__` mode. This is a sensible assumption, and not the one we want to change, as most projects today don\u2019t specify anything as `NODE_ENV` in development, and we don\u2019t want them to suddenly lose all developer warnings.  Therefore, I propose the following new system: ### Proposed System #### Variables - `__DEV__ = (process.env.NODE_ENV !== 'profile' && process.env.NODE_ENV !== 'production')` - `__PROFILE__ = (process.env.NODE_ENV === 'profile'`) #### Development Build (any `NODE_ENV` except `'profile'` or `'production'`) - `__DEV__` is `true` - `__PROFILE__` is `true` #### Profile Build (`NODE_ENV` is `'profile'`) - `__DEV__` is `false` - `__PROFILE__` is `true` #### Production Build (`NODE_ENV` is `'production'`) - `__DEV__` is `false` - `__PROFILE__` is `false`  This would let us have three separate build configurations. We can use the same pattern in other `fbjs` projects as well, if desired. I would say it\u2019s unlikely we\u2019d ever want to add a separate fourth configuration so this should cover all our needs.  Any thoughts why this would be a bad idea? Should I implement this in `fbjs`?  cc @facebook/react-core",
        "human_words_regrex": "As discussed in #6015, we plan to add a new build configuration that does _not_ have the `__DEV__` overhead but that comes with the new `ReactPerf` enabled. This means that developer warnings, etc, will need to be gated by `__DEV__`, but the component tree (#6549) and some other events (e.g. #6612) will need to be gated by `__PROFILE__`. I\u2019m curious how this could be implemented. Right now our system is simple: ### Current System #### Variables - `__DEV__ = (process.env.NODE_ENV !== 'production')` #### Development Build (any `NODE_ENV` except `'production'`) - `__DEV__` is `true` #### Production Build (`NODE_ENV` is `'production'`) - `__DEV__` is `false` As you can see, if `process.env.NODE_ENV` is omitted, we assume `__DEV__` mode. This is a sensible assumption, and not the one we want to change, as most projects today don\u2019t specify anything as `NODE_ENV` in development, and we don\u2019t want them to suddenly lose all developer warnings. Therefore, I propose the following new system: ### Proposed System #### Variables - `__DEV__ = (process.env.NODE_ENV !== 'profile' && process.env.NODE_ENV !== 'production')` - `__PROFILE__ = (process.env.NODE_ENV === 'profile'`) #### Development Build (any `NODE_ENV` except `'profile'` or `'production'`) - `__DEV__` is `true` - `__PROFILE__` is `true` #### Profile Build (`NODE_ENV` is `'profile'`) - `__DEV__` is `false` - `__PROFILE__` is `true` #### Production Build (`NODE_ENV` is `'production'`) - `__DEV__` is `false` - `__PROFILE__` is `false` This would let us have three separate build configurations. We can use the same pattern in other `fbjs` projects as well, if desired. I would say it\u2019s unlikely we\u2019d ever want to add a separate fourth configuration so this should cover all our needs. Any thoughts why this would be a bad idea? Should I implement this in `fbjs`? cc @facebook/react-core",
        "human_words_stopwords_removal_lemmatization": "discussed # 6015 , plan add new build configuration _not_ ` __dev__ ` overhead come new ` reactperf ` enabled . mean developer warning , etc , need gated ` __dev__ ` , component tree ( # 6549 ) event ( e.g . # 6612 ) need gated ` __profile__ ` . \u2019 curious could implemented . right system simple : # # # current system # # # # variable - ` __dev__ = ( process.env.node_env ! == 'production ' ) ` # # # # development build ( ` node_env ` except ` 'production ' ` ) - ` __dev__ ` ` true ` # # # # production build ( ` node_env ` ` 'production ' ` ) - ` __dev__ ` ` false ` see , ` process.env.node_env ` omitted , assume ` __dev__ ` mode . sensible assumption , one want change , project today \u2019 specify anything ` node_env ` development , \u2019 want suddenly lose developer warning . therefore , propose following new system : # # # proposed system # # # # variable - ` __dev__ = ( process.env.node_env ! == 'profile ' & & process.env.node_env ! == 'production ' ) ` - ` __profile__ = ( process.env.node_env === 'profile ' ` ) # # # # development build ( ` node_env ` except ` 'profile ' ` ` 'production ' ` ) - ` __dev__ ` ` true ` - ` __profile__ ` ` true ` # # # # profile build ( ` node_env ` ` 'profile ' ` ) - ` __dev__ ` ` false ` - ` __profile__ ` ` true ` # # # # production build ( ` node_env ` ` 'production ' ` ) - ` __dev__ ` ` false ` - ` __profile__ ` ` false ` would let u three separate build configuration . use pattern ` fbjs ` project well , desired . would say \u2019 unlikely \u2019 ever want add separate fourth configuration cover need . thought would bad idea ? implement ` fbjs ` ? cc @ facebook/react-core",
        "title_stopwords_removal_lemmatization": "introduce __profile__ build"
    },
    {
        "issue_id": 151186895,
        "title": "Have React ignore a specific DOM element",
        "label": [
            "Type: Feature Request",
            "Component: DOM",
            "Component: Server Rendering"
        ],
        "date": "2016-04-26T17:00:11Z",
        "status": "closed",
        "description": "As per my chat [here](https://twitter.com/nickdima/status/723904527083147264) with @gaearon I'm filing an issue to discuss this further.\n\nI would like to avoid a specific element that I rendered on the server from beeing further updated by react once it reaches the client.\nOne specific use case is rendering ad server tags that are kind of a pain in the ars, using things like `document.write`, etc. I render them using `dangerouslySetInnerHTML` but sometimes when React is doing the reconciliation client side they get re-render so they stop executing. Now I managed to track down some of these cases by fixing render differences between server and client which would trigger DOM patching but it still seems to happen.\nAny advice?\n",
        "remove_template_description": "As per my chat [here](https://twitter.com/nickdima/status/723904527083147264) with @gaearon I'm filing an issue to discuss this further.  I would like to avoid a specific element that I rendered on the server from beeing further updated by react once it reaches the client. One specific use case is rendering ad server tags that are kind of a pain in the ars, using things like `document.write`, etc. I render them using `dangerouslySetInnerHTML` but sometimes when React is doing the reconciliation client side they get re-render so they stop executing. Now I managed to track down some of these cases by fixing render differences between server and client which would trigger DOM patching but it still seems to happen. Any advice?",
        "human_words": "As per my chat [here](https://twitter.com/nickdima/status/723904527083147264) with @gaearon I'm filing an issue to discuss this further.  I would like to avoid a specific element that I rendered on the server from beeing further updated by react once it reaches the client. One specific use case is rendering ad server tags that are kind of a pain in the ars, using things like `document.write`, etc. I render them using `dangerouslySetInnerHTML` but sometimes when React is doing the reconciliation client side they get re-render so they stop executing. Now I managed to track down some of these cases by fixing render differences between server and client which would trigger DOM patching but it still seems to happen. Any advice?",
        "human_words_regrex": "As per my chat  with @gaearon I'm filing an issue to discuss this further. I would like to avoid a specific element that I rendered on the server from beeing further updated by react once it reaches the client. One specific use case is rendering ad server tags that are kind of a pain in the ars, using things like `document.write`, etc. I render them using `dangerouslySetInnerHTML` but sometimes when React is doing the reconciliation client side they get re-render so they stop executing. Now I managed to track down some of these cases by fixing render differences between server and client which would trigger DOM patching but it still seems to happen. Any advice?",
        "human_words_stopwords_removal_lemmatization": "per chat @ gaearon 'm filing issue discus . would like avoid specific element rendered server beeing updated react reach client . one specific use case rendering ad server tag kind pain ar , using thing like ` document.write ` , etc . render using ` dangerouslysetinnerhtml ` sometimes react reconciliation client side get re-render stop executing . managed track case fixing render difference server client would trigger dom patching still seems happen . advice ?",
        "title_stopwords_removal_lemmatization": "react ignore specific dom element"
    },
    {
        "issue_id": 150451202,
        "title": "Proposal: Replace NODE_ENV with REACT_ENV for __DEV__ replacement",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2016-04-22T19:20:50Z",
        "status": "closed",
        "description": "This has come up a couple times lately as being an issue (#6479, #6581, #6511), I think perhaps because we added the minification warning and people are ending up seeing they aren't getting prod code when they expected it. But there's also the argument that you want React to be production and still use NODE_ENV for other purposes.\n\nThere would be a few things to figure out to make sure envify works, and deciding what we do for other projects which currently also use the NODE_ENV pattern (eg, Relay, fbjs, third-party code, etc).\n\nThis might not be a good idea at all though and definitely isn't happening immediately, but wanted to start the discussion.\n",
        "remove_template_description": "This has come up a couple times lately as being an issue (#6479, #6581, #6511), I think perhaps because we added the minification warning and people are ending up seeing they aren't getting prod code when they expected it. But there's also the argument that you want React to be production and still use NODE_ENV for other purposes.  There would be a few things to figure out to make sure envify works, and deciding what we do for other projects which currently also use the NODE_ENV pattern (eg, Relay, fbjs, third-party code, etc).  This might not be a good idea at all though and definitely isn't happening immediately, but wanted to start the discussion.",
        "human_words": "This has come up a couple times lately as being an issue (#6479, #6581, #6511), I think perhaps because we added the minification warning and people are ending up seeing they aren't getting prod code when they expected it. But there's also the argument that you want React to be production and still use NODE_ENV for other purposes.  There would be a few things to figure out to make sure envify works, and deciding what we do for other projects which currently also use the NODE_ENV pattern (eg, Relay, fbjs, third-party code, etc).  This might not be a good idea at all though and definitely isn't happening immediately, but wanted to start the discussion.",
        "human_words_regrex": "This has come up a couple times lately as being an issue (#6479, #6581, #6511), I think perhaps because we added the minification warning and people are ending up seeing they aren't getting prod code when they expected it. But there's also the argument that you want React to be production and still use NODE_ENV for other purposes. There would be a few things to figure out to make sure envify works, and deciding what we do for other projects which currently also use the NODE_ENV pattern (eg, Relay, fbjs, third-party code, etc). This might not be a good idea at all though and definitely isn't happening immediately, but wanted to start the discussion.",
        "human_words_stopwords_removal_lemmatization": "come couple time lately issue ( # 6479 , # 6581 , # 6511 ) , think perhaps added minification warning people ending seeing n't getting prod code expected . 's also argument want react production still use node_env purpose . would thing figure make sure envify work , deciding project currently also use node_env pattern ( eg , relay , fbjs , third-party code , etc ) . might good idea though definitely n't happening immediately , wanted start discussion .",
        "title_stopwords_removal_lemmatization": "proposal : replace node_env react_env __dev__ replacement"
    },
    {
        "issue_id": 149922010,
        "title": "Add comments/attribute indicating which component was rendered",
        "label": [
            "Type: Feature Request",
            "Component: DOM",
            "Resolution: Stale"
        ],
        "date": "2016-04-21T00:25:26Z",
        "status": "closed",
        "description": "As per the discussion today...\n\nSometimes you are developing on a platform that doesn't have devtools (safari, etc).  The problem is that you are looking at a whole pile of markup, and can't tell which components rendered it.  Without devtools, the output markup is really hard to navigate.  It would be cool if we had comment nodes (or a `data-reactcomponent` attribute) that helps users navigate the output.\n\nThese nodes would be rendered only in dev mode or with some flag turned on or something.\n",
        "remove_template_description": "As per the discussion today...  Sometimes you are developing on a platform that doesn't have devtools (safari, etc).  The problem is that you are looking at a whole pile of markup, and can't tell which components rendered it.  Without devtools, the output markup is really hard to navigate.  It would be cool if we had comment nodes (or a `data-reactcomponent` attribute) that helps users navigate the output.  These nodes would be rendered only in dev mode or with some flag turned on or something.",
        "human_words": "As per the discussion today...  Sometimes you are developing on a platform that doesn't have devtools (safari, etc).  The problem is that you are looking at a whole pile of markup, and can't tell which components rendered it.  Without devtools, the output markup is really hard to navigate.  It would be cool if we had comment nodes (or a `data-reactcomponent` attribute) that helps users navigate the output.  These nodes would be rendered only in dev mode or with some flag turned on or something.",
        "human_words_regrex": "As per the discussion today... Sometimes you are developing on a platform that doesn't have devtools (safari, etc). The problem is that you are looking at a whole pile of markup, and can't tell which components rendered it. Without devtools, the output markup is really hard to navigate. It would be cool if we had comment nodes (or a `data-reactcomponent` attribute) that helps users navigate the output. These nodes would be rendered only in dev mode or with some flag turned on or something.",
        "human_words_stopwords_removal_lemmatization": "per discussion today ... sometimes developing platform n't devtools ( safari , etc ) . problem looking whole pile markup , ca n't tell component rendered . without devtools , output markup really hard navigate . would cool comment node ( ` data-reactcomponent ` attribute ) help user navigate output . node would rendered dev mode flag turned something .",
        "title_stopwords_removal_lemmatization": "add comments/attribute indicating component rendered"
    },
    {
        "issue_id": 147366151,
        "title": "Support for asynchronous values (like Promises and Observables)",
        "label": [
            "Type: Feature Request",
            "Component: Component API"
        ],
        "date": "2016-04-11T09:22:06Z",
        "status": "closed",
        "description": "At the moment, it is quite cumbersome to work with promises in React. Either you write a lot of code to update the state inside the `then()` callbacks or you use a library like [react-promise](https://www.npmjs.com/package/react-promise) which only works for children (not properties) because it is based on components.\n\nAnother option is to traverse the whole virtual dom and replace promises before they are passed to React. (I have read once a blog post about this but cannot find it any longer.) This is obviously not ideal for the rendering performance.\n\nSince promises are now a standard, I think there should be simpler way to use them directly in the view. One option would be to introduce an AsyncValue type with a Promise implementation. The AsyncValue type would then be supported for children as well as properties.\n\nPromises could then simply be used like this:\n\n``` javascript\n<div>{promise(this.state.myPromise)}</div>\n```\n\nOpposed to supporting promises everywhere (directly without the promise function), this should not have unexpected side effects. Moreover, other types of asynchronous values (for example Observables) could be added later easily just by creating another AsyncType implementation.\n\nAngular 2 takes a similar route with the [async pipe](https://angular.io/docs/ts/latest/guide/pipes.html#!#the-impure-asyncpipe-). There you can simply write \n\n``` javascript\n{{ myPromise | async }}\n```\n\nin attributes as well as normal content.\n\nThis feature would also be very convinient for libraries like Flux because it allows to fetch properties directly inside the view and avoids the reptition which you have with Relay:\n\n``` javascript\n<div>{promise(this.state.model.get('property'))}</div>\n```\n\nWhat do you think about this proposal?\nHas this been discussed before? I couldn't find a thread which covers this particular topic.\n",
        "remove_template_description": "At the moment, it is quite cumbersome to work with promises in React. Either you write a lot of code to update the state inside the `then()` callbacks or you use a library like [react-promise](https://www.npmjs.com/package/react-promise) which only works for children (not properties) because it is based on components.  Another option is to traverse the whole virtual dom and replace promises before they are passed to React. (I have read once a blog post about this but cannot find it any longer.) This is obviously not ideal for the rendering performance.  Since promises are now a standard, I think there should be simpler way to use them directly in the view. One option would be to introduce an AsyncValue type with a Promise implementation. The AsyncValue type would then be supported for children as well as properties.  Promises could then simply be used like this:  ``` javascript <div>{promise(this.state.myPromise)}</div> ```  Opposed to supporting promises everywhere (directly without the promise function), this should not have unexpected side effects. Moreover, other types of asynchronous values (for example Observables) could be added later easily just by creating another AsyncType implementation.  Angular 2 takes a similar route with the [async pipe](https://angular.io/docs/ts/latest/guide/pipes.html#!#the-impure-asyncpipe-). There you can simply write   ``` javascript {{ myPromise | async }} ```  in attributes as well as normal content.  This feature would also be very convinient for libraries like Flux because it allows to fetch properties directly inside the view and avoids the reptition which you have with Relay:  ``` javascript <div>{promise(this.state.model.get('property'))}</div> ```  What do you think about this proposal? Has this been discussed before? I couldn't find a thread which covers this particular topic.",
        "human_words": "At the moment, it is quite cumbersome to work with promises in React. Either you write a lot of code to update the state inside the `then()` callbacks or you use a library like [react-promise](https://www.npmjs.com/package/react-promise) which only works for children (not properties) because it is based on components.  Another option is to traverse the whole virtual dom and replace promises before they are passed to React. (I have read once a blog post about this but cannot find it any longer.) This is obviously not ideal for the rendering performance.  Since promises are now a standard, I think there should be simpler way to use them directly in the view. One option would be to introduce an AsyncValue type with a Promise implementation. The AsyncValue type would then be supported for children as well as properties.  Promises could then simply be used like this:    Opposed to supporting promises everywhere (directly without the promise function), this should not have unexpected side effects. Moreover, other types of asynchronous values (for example Observables) could be added later easily just by creating another AsyncType implementation.  Angular 2 takes a similar route with the [async pipe](https://angular.io/docs/ts/latest/guide/pipes.html#!#the-impure-asyncpipe-). There you can simply write     in attributes as well as normal content.  This feature would also be very convinient for libraries like Flux because it allows to fetch properties directly inside the view and avoids the reptition which you have with Relay:    What do you think about this proposal? Has this been discussed before? I couldn't find a thread which covers this particular topic.",
        "human_words_regrex": "At the moment, it is quite cumbersome to work with promises in React. Either you write a lot of code to update the state inside the `then()` callbacks or you use a library like  which only works for children (not properties) because it is based on components. Another option is to traverse the whole virtual dom and replace promises before they are passed to React. (I have read once a blog post about this but cannot find it any longer.) This is obviously not ideal for the rendering performance. Since promises are now a standard, I think there should be simpler way to use them directly in the view. One option would be to introduce an AsyncValue type with a Promise implementation. The AsyncValue type would then be supported for children as well as properties. Promises could then simply be used like this: Opposed to supporting promises everywhere (directly without the promise function), this should not have unexpected side effects. Moreover, other types of asynchronous values (for example Observables) could be added later easily just by creating another AsyncType implementation. Angular 2 takes a similar route with the . There you can simply write in attributes as well as normal content. This feature would also be very convinient for libraries like Flux because it allows to fetch properties directly inside the view and avoids the reptition which you have with Relay: What do you think about this proposal? Has this been discussed before? I couldn't find a thread which covers this particular topic.",
        "human_words_stopwords_removal_lemmatization": "moment , quite cumbersome work promise react . either write lot code update state inside ` ( ) ` callback use library like work child ( property ) based component . another option traverse whole virtual dom replace promise passed react . ( read blog post find longer . ) obviously ideal rendering performance . since promise standard , think simpler way use directly view . one option would introduce asyncvalue type promise implementation . asyncvalue type would supported child well property . promise could simply used like : opposed supporting promise everywhere ( directly without promise function ) , unexpected side effect . moreover , type asynchronous value ( example observables ) could added later easily creating another asynctype implementation . angular 2 take similar route . simply write attribute well normal content . feature would also convinient library like flux allows fetch property directly inside view avoids reptition relay : think proposal ? discussed ? could n't find thread cover particular topic .",
        "title_stopwords_removal_lemmatization": "support asynchronous value ( like promise observables )"
    },
    {
        "issue_id": 147119306,
        "title": "Allow specifying multiple fallback values for inline styles (e.g. for vendor prefixing with SSR)",
        "label": [
            "Type: Feature Request",
            "Component: DOM"
        ],
        "date": "2016-04-09T10:59:28Z",
        "status": "closed",
        "description": "I've been using the \"string\" hack to override CSS values in React components.\n\nFor example, if you want to have `display` with different values, you do\n\n```\nstyleObj.display = '-webkit-box;display: -moz-box;display: -ms-flexbox;display: -webkit-flex;display: flex';\n```\n\nI have an npm module for poly-filling my styles in my React components.\nhttps://www.npmjs.com/package/poly-style\n\nAll of that worked perfectly in v0.14. No warnings no nothing.\nUpdated to v15.0 today, and everything is breaking.\na) Normally there are deprecation warnings. I didn't notice any warnings on that change.\nb) in the changelog I cannot see anything related to that, to understand what changed.\n\nAm I missing something?\n",
        "remove_template_description": "I've been using the \"string\" hack to override CSS values in React components.  For example, if you want to have `display` with different values, you do  ``` styleObj.display = '-webkit-box;display: -moz-box;display: -ms-flexbox;display: -webkit-flex;display: flex'; ```  I have an npm module for poly-filling my styles in my React components. https://www.npmjs.com/package/poly-style  All of that worked perfectly in v0.14. No warnings no nothing. Updated to v15.0 today, and everything is breaking. a) Normally there are deprecation warnings. I didn't notice any warnings on that change. b) in the changelog I cannot see anything related to that, to understand what changed.  Am I missing something?",
        "human_words": "I've been using the \"string\" hack to override CSS values in React components.  For example, if you want to have `display` with different values, you do    I have an npm module for poly-filling my styles in my React components. https://www.npmjs.com/package/poly-style  All of that worked perfectly in v0.14. No warnings no nothing. Updated to v15.0 today, and everything is breaking. a) Normally there are deprecation warnings. I didn't notice any warnings on that change. b) in the changelog I cannot see anything related to that, to understand what changed.  Am I missing something?",
        "human_words_regrex": "I've been using the \"string\" hack to override CSS values in React components. For example, if you want to have `display` with different values, you do I have an npm module for poly-filling my styles in my React components.  All of that worked perfectly in v0.14. No warnings no nothing. Updated to v15.0 today, and everything is breaking. a) Normally there are deprecation warnings. I didn't notice any warnings on that change. b) in the changelog I cannot see anything related to that, to understand what changed. Am I missing something?",
        "human_words_stopwords_removal_lemmatization": "'ve using `` string '' hack override cs value react component . example , want ` display ` different value , npm module poly-filling style react component . worked perfectly v0.14 . warning nothing . updated v15.0 today , everything breaking . ) normally deprecation warning . n't notice warning change . b ) changelog see anything related , understand changed . missing something ?",
        "title_stopwords_removal_lemmatization": "allow specifying multiple fallback value inline style ( e.g . vendor prefixing ssr )"
    },
    {
        "issue_id": 146710693,
        "title": "Support Passive Event Listeners",
        "label": [
            "Type: Feature Request",
            "Component: DOM",
            "Type: Big Picture",
            "React Core Team"
        ],
        "date": "2016-04-07T18:42:47Z",
        "status": "open",
        "description": "https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n\nIt would be good to have everything be passive by default and only opt-in to active when needed. E.g. you could listen to text input events but only preventDefault or used controlled behavior when you have active listeners.\n\nSimilarly, we could unify this with React Native's threading model. E.g. one thing we could do there is synchronously block the UI thread when there are active listeners such as handling keystrokes.\n\ncc @vjeux @ide\n",
        "remove_template_description": "https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md  It would be good to have everything be passive by default and only opt-in to active when needed. E.g. you could listen to text input events but only preventDefault or used controlled behavior when you have active listeners.  Similarly, we could unify this with React Native's threading model. E.g. one thing we could do there is synchronously block the UI thread when there are active listeners such as handling keystrokes.  cc @vjeux @ide",
        "human_words": "https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md  It would be good to have everything be passive by default and only opt-in to active when needed. E.g. you could listen to text input events but only preventDefault or used controlled behavior when you have active listeners.  Similarly, we could unify this with React Native's threading model. E.g. one thing we could do there is synchronously block the UI thread when there are active listeners such as handling keystrokes.  cc @vjeux @ide",
        "human_words_regrex": " It would be good to have everything be passive by default and only opt-in to active when needed. E.g. you could listen to text input events but only preventDefault or used controlled behavior when you have active listeners. Similarly, we could unify this with React Native's threading model. E.g. one thing we could do there is synchronously block the UI thread when there are active listeners such as handling keystrokes. cc @vjeux @ide",
        "human_words_stopwords_removal_lemmatization": "would good everything passive default opt-in active needed . e.g . could listen text input event preventdefault used controlled behavior active listener . similarly , could unify react native 's threading model . e.g . one thing could synchronously block ui thread active listener handling keystroke . cc @ vjeux @ ide",
        "title_stopwords_removal_lemmatization": "support passive event listener"
    },
    {
        "issue_id": 146346474,
        "title": "componentDidUnmount functionality (in addition to componentWillUnmount)",
        "label": [
            "Type: Feature Request",
            "Component: Component API"
        ],
        "date": "2016-04-06T15:18:13Z",
        "status": "closed",
        "description": "It would be great if it was possible to run some code after the component actually unmounted. This is useful where you consider the following:\n\n```\ncomponent Parent {\n    has service Service\n    has child Child\n\n    componentWillUnmount: {\n         destroys Service\n    }\n\n    render: {\n         Service gets passed to Child as prop\n    }\n}\n\ncomponent Child {\n    componentWillMount: {\n         starts listening to Service\n    }\n\n    componentWillUnmount: {\n         stops listening to Service\n    }\n}\n\n```\n\nThe above will throw exception during Child componentWillUnmount since Parent gets unmounted first so Service is already destroyed.\n\nIf there existed componentDidUnmount the Service can be destroyed after the children are unmounted, i.e.\n\n```\ncomponent Parent {\n    has service Service\n    has child Child\n\n    componentDidUnmount: {\n         destroys Service\n    }\n\n    render: {\n         Service gets passed to Child as prop\n    }\n}\n\ncomponent Child {\n    componentWillMount: {\n         starts listening to Service\n    }\n\n    componentWillUnmount: {\n         stops listening to Service\n    }\n}\n\n```\n",
        "remove_template_description": "It would be great if it was possible to run some code after the component actually unmounted. This is useful where you consider the following:  ``` component Parent {     has service Service     has child Child      componentWillUnmount: {          destroys Service     }      render: {          Service gets passed to Child as prop     } }  component Child {     componentWillMount: {          starts listening to Service     }      componentWillUnmount: {          stops listening to Service     } }  ```  The above will throw exception during Child componentWillUnmount since Parent gets unmounted first so Service is already destroyed.  If there existed componentDidUnmount the Service can be destroyed after the children are unmounted, i.e.  ``` component Parent {     has service Service     has child Child      componentDidUnmount: {          destroys Service     }      render: {          Service gets passed to Child as prop     } }  component Child {     componentWillMount: {          starts listening to Service     }      componentWillUnmount: {          stops listening to Service     } }  ```",
        "human_words": "It would be great if it was possible to run some code after the component actually unmounted. This is useful where you consider the following:    The above will throw exception during Child componentWillUnmount since Parent gets unmounted first so Service is already destroyed.  If there existed componentDidUnmount the Service can be destroyed after the children are unmounted, i.e.  ",
        "human_words_regrex": "It would be great if it was possible to run some code after the component actually unmounted. This is useful where you consider the following: The above will throw exception during Child componentWillUnmount since Parent gets unmounted first so Service is already destroyed. If there existed componentDidUnmount the Service can be destroyed after the children are unmounted, i.e. ",
        "human_words_stopwords_removal_lemmatization": "would great possible run code component actually unmounted . useful consider following : throw exception child componentwillunmount since parent get unmounted first service already destroyed . existed componentdidunmount service destroyed child unmounted , i.e .",
        "title_stopwords_removal_lemmatization": "componentdidunmount functionality ( addition componentwillunmount )"
    },
    {
        "issue_id": 145972926,
        "title": "Add support for CSS variables in style attributes",
        "label": [
            "Type: Feature Request",
            "Component: DOM"
        ],
        "date": "2016-04-05T12:26:32Z",
        "status": "closed",
        "description": "CSS variables is now supported in Chromium, which we use for rendering. They enable us to write cleaner, more flexible code. Sadly, I cannot seem to use them in React without resorting to various tricks. Ideally, I would like to be able to use them like `<div style={{\"--color\": \"hotpink\"}} />`, which would make the variable available inside the scope of the div.\n\nI am able to add them using the following syntax `<div style={{[\"--color\"]: \"hotpink\"}} />`, but then they aren't updated if I try assigning a new value\u2014which ruins much of the point of using a variable.\n\nI am able to add and remove them using ReactDOM and `ReactDOM.findDOMNode(this).style.setProperty(\"--color\", \"hotpink\")`, but that gets it out of sync with the DOM updates, in addition to not being pretty.\n\nIf there are any questions on the usefulness of CSS variables I'll be more than happy to explain.\n",
        "remove_template_description": "CSS variables is now supported in Chromium, which we use for rendering. They enable us to write cleaner, more flexible code. Sadly, I cannot seem to use them in React without resorting to various tricks. Ideally, I would like to be able to use them like `<div style={{\"--color\": \"hotpink\"}} />`, which would make the variable available inside the scope of the div.  I am able to add them using the following syntax `<div style={{[\"--color\"]: \"hotpink\"}} />`, but then they aren't updated if I try assigning a new value\u2014which ruins much of the point of using a variable.  I am able to add and remove them using ReactDOM and `ReactDOM.findDOMNode(this).style.setProperty(\"--color\", \"hotpink\")`, but that gets it out of sync with the DOM updates, in addition to not being pretty.  If there are any questions on the usefulness of CSS variables I'll be more than happy to explain.",
        "human_words": "CSS variables is now supported in Chromium, which we use for rendering. They enable us to write cleaner, more flexible code. Sadly, I cannot seem to use them in React without resorting to various tricks. Ideally, I would like to be able to use them like `<div style={{\"--color\": \"hotpink\"}} />`, which would make the variable available inside the scope of the div.  I am able to add them using the following syntax `<div style={{[\"--color\"]: \"hotpink\"}} />`, but then they aren't updated if I try assigning a new value\u2014which ruins much of the point of using a variable.  I am able to add and remove them using ReactDOM and `ReactDOM.findDOMNode(this).style.setProperty(\"--color\", \"hotpink\")`, but that gets it out of sync with the DOM updates, in addition to not being pretty.  If there are any questions on the usefulness of CSS variables I'll be more than happy to explain.",
        "human_words_regrex": "CSS variables is now supported in Chromium, which we use for rendering. They enable us to write cleaner, more flexible code. Sadly, I cannot seem to use them in React without resorting to various tricks. Ideally, I would like to be able to use them like ``, which would make the variable available inside the scope of the div. I am able to add them using the following syntax ``, but then they aren't updated if I try assigning a new value\u2014which ruins much of the point of using a variable. I am able to add and remove them using ReactDOM and `ReactDOM.findDOMNode(this).style.setProperty(\"--color\", \"hotpink\")`, but that gets it out of sync with the DOM updates, in addition to not being pretty. If there are any questions on the usefulness of CSS variables I'll be more than happy to explain.",
        "human_words_stopwords_removal_lemmatization": "cs variable supported chromium , use rendering . enable u write cleaner , flexible code . sadly , seem use react without resorting various trick . ideally , would like able use like `` , would make variable available inside scope div . able add using following syntax `` , n't updated try assigning new value\u2014which ruin much point using variable . able add remove using reactdom ` reactdom.finddomnode ( ) .style.setproperty ( `` -- color '' , `` hotpink '' ) ` , get sync dom update , addition pretty . question usefulness cs variable 'll happy explain .",
        "title_stopwords_removal_lemmatization": "add support cs variable style attribute"
    },
    {
        "issue_id": 145887079,
        "title": "onFocusIn/onFocusOut events",
        "label": [
            "Type: Feature Request",
            "Component: DOM",
            "Partner"
        ],
        "date": "2016-04-05T04:54:27Z",
        "status": "closed",
        "description": "Like mouse enter/leave, these are almost always what you want, not the `onFocus` and `onBlur` events we currently expose. I run into this semi-frequently when actually doing product work. We should add them.\n",
        "remove_template_description": "Like mouse enter/leave, these are almost always what you want, not the `onFocus` and `onBlur` events we currently expose. I run into this semi-frequently when actually doing product work. We should add them.",
        "human_words": "Like mouse enter/leave, these are almost always what you want, not the `onFocus` and `onBlur` events we currently expose. I run into this semi-frequently when actually doing product work. We should add them.",
        "human_words_regrex": "Like mouse enter/leave, these are almost always what you want, not the `onFocus` and `onBlur` events we currently expose. I run into this semi-frequently when actually doing product work. We should add them.",
        "human_words_stopwords_removal_lemmatization": "like mouse enter/leave , almost always want , ` onfocus ` ` onblur ` event currently expose . run semi-frequently actually product work . add .",
        "title_stopwords_removal_lemmatization": "onfocusin/onfocusout event"
    },
    {
        "issue_id": 143089134,
        "title": "Consider Special Casing Certain DOM Attributes to Accept Elements",
        "label": [
            "Type: Feature Request",
            "Component: DOM",
            "React Core Team"
        ],
        "date": "2016-03-23T21:52:14Z",
        "status": "open",
        "description": "The use case is for example, translation components rendering string content.\n\nThe HTML spec has some unfortunate attributes that behave kind of like content. It seems like they should be able to accept React elements. If I were to design a similar React component I would allow it to accept React elements.\n\nSince we normalize usage we could in theory have it built-in to React that certain attributes like `placeholder`, `aria-label`, etc. could accept React components that render into strings.\n\nThat would probably have to go in after we figure out a way to render strings at the root of a React composite component.\n",
        "remove_template_description": "The use case is for example, translation components rendering string content.  The HTML spec has some unfortunate attributes that behave kind of like content. It seems like they should be able to accept React elements. If I were to design a similar React component I would allow it to accept React elements.  Since we normalize usage we could in theory have it built-in to React that certain attributes like `placeholder`, `aria-label`, etc. could accept React components that render into strings.  That would probably have to go in after we figure out a way to render strings at the root of a React composite component.",
        "human_words": "The use case is for example, translation components rendering string content.  The HTML spec has some unfortunate attributes that behave kind of like content. It seems like they should be able to accept React elements. If I were to design a similar React component I would allow it to accept React elements.  Since we normalize usage we could in theory have it built-in to React that certain attributes like `placeholder`, `aria-label`, etc. could accept React components that render into strings.  That would probably have to go in after we figure out a way to render strings at the root of a React composite component.",
        "human_words_regrex": "The use case is for example, translation components rendering string content. The HTML spec has some unfortunate attributes that behave kind of like content. It seems like they should be able to accept React elements. If I were to design a similar React component I would allow it to accept React elements. Since we normalize usage we could in theory have it built-in to React that certain attributes like `placeholder`, `aria-label`, etc. could accept React components that render into strings. That would probably have to go in after we figure out a way to render strings at the root of a React composite component.",
        "human_words_stopwords_removal_lemmatization": "use case example , translation component rendering string content . html spec unfortunate attribute behave kind like content . seems like able accept react element . design similar react component would allow accept react element . since normalize usage could theory built-in react certain attribute like ` placeholder ` , ` aria-label ` , etc . could accept react component render string . would probably go figure way render string root react composite component .",
        "title_stopwords_removal_lemmatization": "consider special casing certain dom attribute accept element"
    },
    {
        "issue_id": 140813832,
        "title": "Support DOM nodes as children",
        "label": [
            "Type: Feature Request",
            "Component: DOM"
        ],
        "date": "2016-03-14T22:23:07Z",
        "status": "closed",
        "description": "It would be nice to be able to do the equivalent of `<div>{document.createElement('div')}</div>`. It seems entirely doable now with our new fancy renderer I think? Obviously it wouldn't be supported for SSR though so you would have to provide your own fallback if necessary.\n",
        "remove_template_description": "It would be nice to be able to do the equivalent of `<div>{document.createElement('div')}</div>`. It seems entirely doable now with our new fancy renderer I think? Obviously it wouldn't be supported for SSR though so you would have to provide your own fallback if necessary.",
        "human_words": "It would be nice to be able to do the equivalent of `<div>{document.createElement('div')}</div>`. It seems entirely doable now with our new fancy renderer I think? Obviously it wouldn't be supported for SSR though so you would have to provide your own fallback if necessary.",
        "human_words_regrex": "It would be nice to be able to do the equivalent of `{document.createElement('div')}`. It seems entirely doable now with our new fancy renderer I think? Obviously it wouldn't be supported for SSR though so you would have to provide your own fallback if necessary.",
        "human_words_stopwords_removal_lemmatization": "would nice able equivalent ` { document.createelement ( 'div ' ) } ` . seems entirely doable new fancy renderer think ? obviously would n't supported ssr though would provide fallback necessary .",
        "title_stopwords_removal_lemmatization": "support dom node child"
    },
    {
        "issue_id": 140407034,
        "title": "Feature Request: innerHTML alternative",
        "label": [
            "Type: Feature Request",
            "Component: DOM"
        ],
        "date": "2016-03-12T18:55:40Z",
        "status": "closed",
        "description": "I think many people agree that the `dangerouslySetInnerHTML={{ __html: ... }}` api is gross even though there is great reasoning behind it.\n\nI have a few issues with it beyond it's verbosity that I think could be added as static method on the react class.\n#### My Issues with `dangerouslySetInnerHTML`:\n\n1) Verbose and not always dangerous.\n2) Can't mix safe and unsafe html.\n3) Can't mix html with react elements.\n4) Have to manually concat html strings.\n\n---\n\nA better solution would be to provide a way to mark html as \"safe\".\n\n``` js\nvar React = require(\"react\");\n\n// Use #markSafe method to bypass reacts automatic html escaping.\nvar myReactEl = <div>{ React.markSafe(\"<br/>\") }</div>;\n```\n\nThis is still explicitly telling react that we trust the html but solves all of the problems above.\n\n``` js\n// Mixing safe and unsafe html.\n(\n    <div>\n        { React.markSafe(\"<br/>\") }\n        { \"<br/>\" }\n    </div>\n);\n\n// Mixing html with react elements.\n(\n    <div>\n        { React.markSafe(\"<br/>\") }\n        <span>Hello!</span>\n    </div>\n);\n\n// Multiple innerHTML sets.\n(\n    <div>\n        { React.markSafe(\"<br/>\") }\n        { React.markSafe(\"<hr/>\") }\n    </div>\n);\n```\n\nI think this api would be much friendlier than the current html api and probably wouldn't even require a major version bump.\n\nThoughts?\n",
        "remove_template_description": "I think many people agree that the `dangerouslySetInnerHTML={{ __html: ... }}` api is gross even though there is great reasoning behind it.  I have a few issues with it beyond it's verbosity that I think could be added as static method on the react class. #### My Issues with `dangerouslySetInnerHTML`:  1) Verbose and not always dangerous. 2) Can't mix safe and unsafe html. 3) Can't mix html with react elements. 4) Have to manually concat html strings.  ---  A better solution would be to provide a way to mark html as \"safe\".  ``` js var React = require(\"react\");  // Use #markSafe method to bypass reacts automatic html escaping. var myReactEl = <div>{ React.markSafe(\"<br/>\") }</div>; ```  This is still explicitly telling react that we trust the html but solves all of the problems above.  ``` js // Mixing safe and unsafe html. (     <div>         { React.markSafe(\"<br/>\") }         { \"<br/>\" }     </div> );  // Mixing html with react elements. (     <div>         { React.markSafe(\"<br/>\") }         <span>Hello!</span>     </div> );  // Multiple innerHTML sets. (     <div>         { React.markSafe(\"<br/>\") }         { React.markSafe(\"<hr/>\") }     </div> ); ```  I think this api would be much friendlier than the current html api and probably wouldn't even require a major version bump.  Thoughts?",
        "human_words": "I think many people agree that the `dangerouslySetInnerHTML={{ __html: ... }}` api is gross even though there is great reasoning behind it.  I have a few issues with it beyond it's verbosity that I think could be added as static method on the react class. #### My Issues with `dangerouslySetInnerHTML`:  1) Verbose and not always dangerous. 2) Can't mix safe and unsafe html. 3) Can't mix html with react elements. 4) Have to manually concat html strings.  ---  A better solution would be to provide a way to mark html as \"safe\".    This is still explicitly telling react that we trust the html but solves all of the problems above.    I think this api would be much friendlier than the current html api and probably wouldn't even require a major version bump.  Thoughts?",
        "human_words_regrex": "I think many people agree that the `dangerouslySetInnerHTML={{ __html: ... }}` api is gross even though there is great reasoning behind it. I have a few issues with it beyond it's verbosity that I think could be added as static method on the react class. #### My Issues with `dangerouslySetInnerHTML`: 1) Verbose and not always dangerous. 2) Can't mix safe and unsafe html. 3) Can't mix html with react elements. 4) Have to manually concat html strings. --- A better solution would be to provide a way to mark html as \"safe\". This is still explicitly telling react that we trust the html but solves all of the problems above. I think this api would be much friendlier than the current html api and probably wouldn't even require a major version bump. Thoughts?",
        "human_words_stopwords_removal_lemmatization": "think many people agree ` dangerouslysetinnerhtml= { { __html : ... } } ` api gross even though great reasoning behind . issue beyond 's verbosity think could added static method react class . # # # # issue ` dangerouslysetinnerhtml ` : 1 ) verbose always dangerous . 2 ) ca n't mix safe unsafe html . 3 ) ca n't mix html react element . 4 ) manually concat html string . -- - better solution would provide way mark html `` safe '' . still explicitly telling react trust html solves problem . think api would much friendlier current html api probably would n't even require major version bump . thought ?",
        "title_stopwords_removal_lemmatization": "feature request : innerhtml alternative"
    },
    {
        "issue_id": 138602096,
        "title": "Proposal: Get rid of pooling in synthetic event system",
        "label": [
            "Type: Feature Request",
            "Component: DOM",
            "Partner"
        ],
        "date": "2016-03-04T22:17:12Z",
        "status": "closed",
        "description": "After staring at the confusing mess that is the synthetic event system today and talking with @sebmarkbage, we're no longer confident that we need the pooling that the system currently uses. GCs have gotten pretty good so we may be experiencing diminishing returns at this point, or maybe losing out on some benefits. We do have to consider that we still support some older browsers who's GCs don't have the benefit of the last several years worth of innovations so it might be premature, but it's probably worth investigating.\n",
        "remove_template_description": "After staring at the confusing mess that is the synthetic event system today and talking with @sebmarkbage, we're no longer confident that we need the pooling that the system currently uses. GCs have gotten pretty good so we may be experiencing diminishing returns at this point, or maybe losing out on some benefits. We do have to consider that we still support some older browsers who's GCs don't have the benefit of the last several years worth of innovations so it might be premature, but it's probably worth investigating.",
        "human_words": "After staring at the confusing mess that is the synthetic event system today and talking with @sebmarkbage, we're no longer confident that we need the pooling that the system currently uses. GCs have gotten pretty good so we may be experiencing diminishing returns at this point, or maybe losing out on some benefits. We do have to consider that we still support some older browsers who's GCs don't have the benefit of the last several years worth of innovations so it might be premature, but it's probably worth investigating.",
        "human_words_regrex": "After staring at the confusing mess that is the synthetic event system today and talking with @sebmarkbage, we're no longer confident that we need the pooling that the system currently uses. GCs have gotten pretty good so we may be experiencing diminishing returns at this point, or maybe losing out on some benefits. We do have to consider that we still support some older browsers who's GCs don't have the benefit of the last several years worth of innovations so it might be premature, but it's probably worth investigating.",
        "human_words_stopwords_removal_lemmatization": "staring confusing mess synthetic event system today talking @ sebmarkbage , 're longer confident need pooling system currently us . gc gotten pretty good may experiencing diminishing return point , maybe losing benefit . consider still support older browser 's gc n't benefit last several year worth innovation might premature , 's probably worth investigating .",
        "title_stopwords_removal_lemmatization": "proposal : get rid pooling synthetic event system"
    },
    {
        "issue_id": 137445591,
        "title": "Warn for PropTypes that don't exist but do exist with a different case",
        "label": [
            "Difficulty: starter",
            "Type: Feature Request"
        ],
        "date": "2016-03-01T02:25:23Z",
        "status": "closed",
        "description": "``` js\nconst Foo = ({ onAction }) => <div onClick={onAction} />;\nFoo.propTypes = {\n  onAction: PropTypes.function\n};\n\nconst Bar = () => <Foo onaction={() => console.log('action')} />; // This should warn\n```\n\nWe currently don't warn for properties that don't exist in the `propTypes` set. I.e. we don't catch typos. This is mostly a legacy artifact and there are many components out there that don't define their full set of props. E.g. when `...` spread is used. Few components also define the `children` prop even though they use it. Warning for all of these might be too much work initially.\n\nHowever, we can start small. We can find missing properties that have corresponding properties with a different case and suggest that the developer use that instead. This is essentially always a bug.\n\nWhile it is technically possible to have the same property name with two or more different case, it is considered bad practice to allow both. It causes overhead to test for both in the diffing/rendering. It causes style-guide issues where people have to pick which style to use. It also makes it worth for tooling where search/replace can easily miss less commonly used variants. That's why React only allows a single case, and ideally so should custom components.\n",
        "remove_template_description": "``` js const Foo = ({ onAction }) => <div onClick={onAction} />; Foo.propTypes = {   onAction: PropTypes.function };  const Bar = () => <Foo onaction={() => console.log('action')} />; // This should warn ```  We currently don't warn for properties that don't exist in the `propTypes` set. I.e. we don't catch typos. This is mostly a legacy artifact and there are many components out there that don't define their full set of props. E.g. when `...` spread is used. Few components also define the `children` prop even though they use it. Warning for all of these might be too much work initially.  However, we can start small. We can find missing properties that have corresponding properties with a different case and suggest that the developer use that instead. This is essentially always a bug.  While it is technically possible to have the same property name with two or more different case, it is considered bad practice to allow both. It causes overhead to test for both in the diffing/rendering. It causes style-guide issues where people have to pick which style to use. It also makes it worth for tooling where search/replace can easily miss less commonly used variants. That's why React only allows a single case, and ideally so should custom components.",
        "human_words": "  We currently don't warn for properties that don't exist in the `propTypes` set. I.e. we don't catch typos. This is mostly a legacy artifact and there are many components out there that don't define their full set of props. E.g. when `...` spread is used. Few components also define the `children` prop even though they use it. Warning for all of these might be too much work initially.  However, we can start small. We can find missing properties that have corresponding properties with a different case and suggest that the developer use that instead. This is essentially always a bug.  While it is technically possible to have the same property name with two or more different case, it is considered bad practice to allow both. It causes overhead to test for both in the diffing/rendering. It causes style-guide issues where people have to pick which style to use. It also makes it worth for tooling where search/replace can easily miss less commonly used variants. That's why React only allows a single case, and ideally so should custom components.",
        "human_words_regrex": " We currently don't warn for properties that don't exist in the `propTypes` set. I.e. we don't catch typos. This is mostly a legacy artifact and there are many components out there that don't define their full set of props. E.g. when `...` spread is used. Few components also define the `children` prop even though they use it. Warning for all of these might be too much work initially. However, we can start small. We can find missing properties that have corresponding properties with a different case and suggest that the developer use that instead. This is essentially always a bug. While it is technically possible to have the same property name with two or more different case, it is considered bad practice to allow both. It causes overhead to test for both in the diffing/rendering. It causes style-guide issues where people have to pick which style to use. It also makes it worth for tooling where search/replace can easily miss less commonly used variants. That's why React only allows a single case, and ideally so should custom components.",
        "human_words_stopwords_removal_lemmatization": "currently n't warn property n't exist ` proptypes ` set . i.e . n't catch typo . mostly legacy artifact many component n't define full set prop . e.g . ` ... ` spread used . component also define ` child ` prop even though use . warning might much work initially . however , start small . find missing property corresponding property different case suggest developer use instead . essentially always bug . technically possible property name two different case , considered bad practice allow . cause overhead test diffing/rendering . cause style-guide issue people pick style use . also make worth tooling search/replace easily miss le commonly used variant . 's react allows single case , ideally custom component .",
        "title_stopwords_removal_lemmatization": "warn proptypes n't exist exist different case"
    },
    {
        "issue_id": 132323057,
        "title": "Defer Execution of Unmount Life Cycle Hooks",
        "label": [
            "Type: Feature Request",
            "Component: Reconciler",
            "Component: Component API",
            "React Core Team"
        ],
        "date": "2016-02-09T03:35:58Z",
        "status": "closed",
        "description": "Unmounting can take significant and unbounded time when we traverse the tree and call the life-cycles. This is the smallest problem of incremental reconciliation (out of: mount at arbitrary location > update a boundary > mount a boundary > unmount).\n\nThe theory is that we can remove the node from the tree first and then call the life-cycles later on during idle time. This means that the refs won't have access to nodes that are in the document anymore so reading any such information would no longer work.\n\nThis problem space might also be related to animations. Exit animations want a component/node to exist in the tree for as long as it needs to finish its animation offscreen, asynchronously get deleted from the tree and eventually get cleaned up by calling the unmount life-cycles.\n",
        "remove_template_description": "Unmounting can take significant and unbounded time when we traverse the tree and call the life-cycles. This is the smallest problem of incremental reconciliation (out of: mount at arbitrary location > update a boundary > mount a boundary > unmount).  The theory is that we can remove the node from the tree first and then call the life-cycles later on during idle time. This means that the refs won't have access to nodes that are in the document anymore so reading any such information would no longer work.  This problem space might also be related to animations. Exit animations want a component/node to exist in the tree for as long as it needs to finish its animation offscreen, asynchronously get deleted from the tree and eventually get cleaned up by calling the unmount life-cycles.",
        "human_words": "Unmounting can take significant and unbounded time when we traverse the tree and call the life-cycles. This is the smallest problem of incremental reconciliation (out of: mount at arbitrary location > update a boundary > mount a boundary > unmount).  The theory is that we can remove the node from the tree first and then call the life-cycles later on during idle time. This means that the refs won't have access to nodes that are in the document anymore so reading any such information would no longer work.  This problem space might also be related to animations. Exit animations want a component/node to exist in the tree for as long as it needs to finish its animation offscreen, asynchronously get deleted from the tree and eventually get cleaned up by calling the unmount life-cycles.",
        "human_words_regrex": "Unmounting can take significant and unbounded time when we traverse the tree and call the life-cycles. This is the smallest problem of incremental reconciliation (out of: mount at arbitrary location > update a boundary > mount a boundary > unmount). The theory is that we can remove the node from the tree first and then call the life-cycles later on during idle time. This means that the refs won't have access to nodes that are in the document anymore so reading any such information would no longer work. This problem space might also be related to animations. Exit animations want a component/node to exist in the tree for as long as it needs to finish its animation offscreen, asynchronously get deleted from the tree and eventually get cleaned up by calling the unmount life-cycles.",
        "human_words_stopwords_removal_lemmatization": "unmounting take significant unbounded time traverse tree call life-cycles . smallest problem incremental reconciliation ( : mount arbitrary location > update boundary > mount boundary > unmount ) . theory remove node tree first call life-cycles later idle time . mean ref wo n't access node document anymore reading information would longer work . problem space might also related animation . exit animation want component/node exist tree long need finish animation offscreen , asynchronously get deleted tree eventually get cleaned calling unmount life-cycles .",
        "title_stopwords_removal_lemmatization": "defer execution unmount life cycle hook"
    },
    {
        "issue_id": 129861706,
        "title": "Provide a way to register a last-chance exception handler",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2016-01-29T19:35:28Z",
        "status": "closed",
        "description": "React should provide a way for us to register a last-chance exception handler for errors thrown in React event handlers. We have last-chance exception handlers registered for our other event-handling frameworks and this has proved extremely useful for making us aware of unexpected error conditions.\n",
        "remove_template_description": "React should provide a way for us to register a last-chance exception handler for errors thrown in React event handlers. We have last-chance exception handlers registered for our other event-handling frameworks and this has proved extremely useful for making us aware of unexpected error conditions.",
        "human_words": "React should provide a way for us to register a last-chance exception handler for errors thrown in React event handlers. We have last-chance exception handlers registered for our other event-handling frameworks and this has proved extremely useful for making us aware of unexpected error conditions.",
        "human_words_regrex": "React should provide a way for us to register a last-chance exception handler for errors thrown in React event handlers. We have last-chance exception handlers registered for our other event-handling frameworks and this has proved extremely useful for making us aware of unexpected error conditions.",
        "human_words_stopwords_removal_lemmatization": "react provide way u register last-chance exception handler error thrown react event handler . last-chance exception handler registered event-handling framework proved extremely useful making u aware unexpected error condition .",
        "title_stopwords_removal_lemmatization": "provide way register last-chance exception handler"
    },
    {
        "issue_id": 128969684,
        "title": "save flag someplace if checksum was invalid",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2016-01-26T22:53:55Z",
        "status": "closed",
        "description": "we have tests that insure that prerendering = client rendering.\n\nRight now its a real cludge - we override console.warn, and watch to see if any checksum warnings are output.\n\nInstead how about adding data-checksum_invalid to the outer element?  \n",
        "remove_template_description": "we have tests that insure that prerendering = client rendering.  Right now its a real cludge - we override console.warn, and watch to see if any checksum warnings are output.  Instead how about adding data-checksum_invalid to the outer element?",
        "human_words": "we have tests that insure that prerendering = client rendering.  Right now its a real cludge - we override console.warn, and watch to see if any checksum warnings are output.  Instead how about adding data-checksum_invalid to the outer element?",
        "human_words_regrex": "we have tests that insure that prerendering = client rendering. Right now its a real cludge - we override console.warn, and watch to see if any checksum warnings are output. Instead how about adding data-checksum_invalid to the outer element?",
        "human_words_stopwords_removal_lemmatization": "test insure prerendering = client rendering . right real cludge - override console.warn , watch see checksum warning output . instead adding data-checksum_invalid outer element ?",
        "title_stopwords_removal_lemmatization": "save flag someplace checksum invalid"
    },
    {
        "issue_id": 127905920,
        "title": "ReactCSSTransitionGroup and Inline styles",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2016-01-21T11:40:59Z",
        "status": "closed",
        "description": "Is it possible to use React inline styles with ReactCSSTransitionGroup? If so, how?\n\nI have tried, and this doesn't seem to work (React v. 0.14.6):\n\n```\nvar tstyle = {\n  'enter': {\n    visibility: 'hidden',\n    transform: 'translate3d(100%,0,0)'\n  },\n  'leave': {\n    visibility: 'visible',\n    transform: 'translate3d(0,0,0)'\n  },\n  'enterActive': {\n    visibility: 'visible',\n    transform: 'translate3d(0,0,0)',\n    transition: 'all 0.4s'\n  },\n  'leaveActive': {\n    visibility: 'hidden',\n    transform: 'translate3d(100%,0,0)',\n    transition: 'all 0.4s'\n  }\n}\n```\n\nIn render():\n\n```\n    <ReactCSSTransitionGroup\n      style={tstyle}\n      transitionName={ {\n        enter: 'enter',\n        enterActive: 'enterActive',\n        leave: 'leave',\n        leaveActive: 'leaveActive',\n        appear: 'appear',\n        appearActive: 'appearActive'\n      } }\n      transitionEnterTimeout={400}\n      transitionLeaveTimeout={400}>\n      {this.props.notifications.map((notification, index) => {\n        return <Notification\n                key={index}\n                type={notification.type}\n                message={notification.message}\n                timeout={10000}\n                remove={this.props.actions.removeNotification} />\n      })}\n    </ReactCSSTransitionGroup>\n```\n",
        "remove_template_description": "Is it possible to use React inline styles with ReactCSSTransitionGroup? If so, how?  I have tried, and this doesn't seem to work (React v. 0.14.6):  ``` var tstyle = {   'enter': {     visibility: 'hidden',     transform: 'translate3d(100%,0,0)'   },   'leave': {     visibility: 'visible',     transform: 'translate3d(0,0,0)'   },   'enterActive': {     visibility: 'visible',     transform: 'translate3d(0,0,0)',     transition: 'all 0.4s'   },   'leaveActive': {     visibility: 'hidden',     transform: 'translate3d(100%,0,0)',     transition: 'all 0.4s'   } } ```  In render():  ```     <ReactCSSTransitionGroup       style={tstyle}       transitionName={ {         enter: 'enter',         enterActive: 'enterActive',         leave: 'leave',         leaveActive: 'leaveActive',         appear: 'appear',         appearActive: 'appearActive'       } }       transitionEnterTimeout={400}       transitionLeaveTimeout={400}>       {this.props.notifications.map((notification, index) => {         return <Notification                 key={index}                 type={notification.type}                 message={notification.message}                 timeout={10000}                 remove={this.props.actions.removeNotification} />       })}     </ReactCSSTransitionGroup> ```",
        "human_words": "Is it possible to use React inline styles with ReactCSSTransitionGroup? If so, how?  I have tried, and this doesn't seem to work (React v. 0.14.6):    In render():  ",
        "human_words_regrex": "Is it possible to use React inline styles with ReactCSSTransitionGroup? If so, how? I have tried, and this doesn't seem to work (React v. 0.14.6): In render(): ",
        "human_words_stopwords_removal_lemmatization": "possible use react inline style reactcsstransitiongroup ? , ? tried , n't seem work ( react v. 0.14.6 ) : render ( ) :",
        "title_stopwords_removal_lemmatization": "reactcsstransitiongroup inline style"
    },
    {
        "issue_id": 127041029,
        "title": "Generating unique ID's and SSR (for a11y and more)",
        "label": [
            "Type: Feature Request",
            "Component: Server Rendering"
        ],
        "date": "2016-01-16T17:44:15Z",
        "status": "closed",
        "description": "Howdy ya'll,\n\n**tl dr: please provide a way to coordinate pseudo-random identifiers across the client and server**\n\nThis issue has been discussed a bit before (#1137, #4000) but I continually run into this issue, trying to build libraries that provide accessible components _by default_. The react component model generally speaking offers a big opportunity to raise the often low bar for accessibility in the library and widget world, see experiments like @ryanflorence's react-a11y. \n\nFor better or for worse the aria, and a11y API's in the browser are heavily based on using ID's to link components together. `aria-labelledby`, `aria-describedby`, `aria-owns`,`aria-activedescendent`, and so on all need's ID's. In a different world we would just generate ids where needed and move on, however server-side rendering makes that complicated, because any generated ID is going to cause a mismatch between client/server.\n\nWe've tried a few different approaches to address some of this, one is making id's required props on components that need them. That gets kinda ugly in components that need a few id's but moreso it annoys users. Its unfortunate because if we could generate deterministic id's we could just provide more accessible components by default.\n\nThe frustrating part is that the component generally has all the information it needs to just set the various aria info necessary to make the component usable with a screen reader, but are stymied by not having the user provide a bunch of globally unique ids'\n\nSo far only really reasonable approaches I've seen are @syranide's solution of a root ID store, and using `_rootID`. The latter obviously has problems. The former doesn't scale well for library authors. Everyones' root App component is already wrapped in a Router, Provider, etc, having every library use their own root level ID provider is probably not super feasible and annoying to users.\n\nIt seems like the best way to do this would be if React (or a React addon) could just provide a consistent first class way to get a unique identifier for a component, even if it is just a base64 of the node's _rootID.\n\nthanks for all the hard work everyone!\n",
        "remove_template_description": "Howdy ya'll,  **tl dr: please provide a way to coordinate pseudo-random identifiers across the client and server**  This issue has been discussed a bit before (#1137, #4000) but I continually run into this issue, trying to build libraries that provide accessible components _by default_. The react component model generally speaking offers a big opportunity to raise the often low bar for accessibility in the library and widget world, see experiments like @ryanflorence's react-a11y.   For better or for worse the aria, and a11y API's in the browser are heavily based on using ID's to link components together. `aria-labelledby`, `aria-describedby`, `aria-owns`,`aria-activedescendent`, and so on all need's ID's. In a different world we would just generate ids where needed and move on, however server-side rendering makes that complicated, because any generated ID is going to cause a mismatch between client/server.  We've tried a few different approaches to address some of this, one is making id's required props on components that need them. That gets kinda ugly in components that need a few id's but moreso it annoys users. Its unfortunate because if we could generate deterministic id's we could just provide more accessible components by default.  The frustrating part is that the component generally has all the information it needs to just set the various aria info necessary to make the component usable with a screen reader, but are stymied by not having the user provide a bunch of globally unique ids'  So far only really reasonable approaches I've seen are @syranide's solution of a root ID store, and using `_rootID`. The latter obviously has problems. The former doesn't scale well for library authors. Everyones' root App component is already wrapped in a Router, Provider, etc, having every library use their own root level ID provider is probably not super feasible and annoying to users.  It seems like the best way to do this would be if React (or a React addon) could just provide a consistent first class way to get a unique identifier for a component, even if it is just a base64 of the node's _rootID.  thanks for all the hard work everyone!",
        "human_words": "Howdy ya'll,  **tl dr: please provide a way to coordinate pseudo-random identifiers across the client and server**  This issue has been discussed a bit before (#1137, #4000) but I continually run into this issue, trying to build libraries that provide accessible components _by default_. The react component model generally speaking offers a big opportunity to raise the often low bar for accessibility in the library and widget world, see experiments like @ryanflorence's react-a11y.   For better or for worse the aria, and a11y API's in the browser are heavily based on using ID's to link components together. `aria-labelledby`, `aria-describedby`, `aria-owns`,`aria-activedescendent`, and so on all need's ID's. In a different world we would just generate ids where needed and move on, however server-side rendering makes that complicated, because any generated ID is going to cause a mismatch between client/server.  We've tried a few different approaches to address some of this, one is making id's required props on components that need them. That gets kinda ugly in components that need a few id's but moreso it annoys users. Its unfortunate because if we could generate deterministic id's we could just provide more accessible components by default.  The frustrating part is that the component generally has all the information it needs to just set the various aria info necessary to make the component usable with a screen reader, but are stymied by not having the user provide a bunch of globally unique ids'  So far only really reasonable approaches I've seen are @syranide's solution of a root ID store, and using `_rootID`. The latter obviously has problems. The former doesn't scale well for library authors. Everyones' root App component is already wrapped in a Router, Provider, etc, having every library use their own root level ID provider is probably not super feasible and annoying to users.  It seems like the best way to do this would be if React (or a React addon) could just provide a consistent first class way to get a unique identifier for a component, even if it is just a base64 of the node's _rootID.  thanks for all the hard work everyone!",
        "human_words_regrex": "Howdy ya'll, **tl dr: please provide a way to coordinate pseudo-random identifiers across the client and server** This issue has been discussed a bit before (#1137, #4000) but I continually run into this issue, trying to build libraries that provide accessible components _by default_. The react component model generally speaking offers a big opportunity to raise the often low bar for accessibility in the library and widget world, see experiments like @ryanflorence's react-a11y. For better or for worse the aria, and a11y API's in the browser are heavily based on using ID's to link components together. `aria-labelledby`, `aria-describedby`, `aria-owns`,`aria-activedescendent`, and so on all need's ID's. In a different world we would just generate ids where needed and move on, however server-side rendering makes that complicated, because any generated ID is going to cause a mismatch between client/server. We've tried a few different approaches to address some of this, one is making id's required props on components that need them. That gets kinda ugly in components that need a few id's but moreso it annoys users. Its unfortunate because if we could generate deterministic id's we could just provide more accessible components by default. The frustrating part is that the component generally has all the information it needs to just set the various aria info necessary to make the component usable with a screen reader, but are stymied by not having the user provide a bunch of globally unique ids' So far only really reasonable approaches I've seen are @syranide's solution of a root ID store, and using `_rootID`. The latter obviously has problems. The former doesn't scale well for library authors. Everyones' root App component is already wrapped in a Router, Provider, etc, having every library use their own root level ID provider is probably not super feasible and annoying to users. It seems like the best way to do this would be if React (or a React addon) could just provide a consistent first class way to get a unique identifier for a component, even if it is just a base64 of the node's _rootID. thanks for all the hard work everyone!",
        "human_words_stopwords_removal_lemmatization": "howdy ya 'll , * * tl dr : please provide way coordinate pseudo-random identifier across client server * * issue discussed bit ( # 1137 , # 4000 ) continually run issue , trying build library provide accessible component _by default_ . react component model generally speaking offer big opportunity raise often low bar accessibility library widget world , see experiment like @ ryanflorence 's react-a11y . better worse aria , a11y api 's browser heavily based using id 's link component together . ` aria-labelledby ` , ` aria-describedby ` , ` aria-owns ` , ` aria-activedescendent ` , need 's id 's . different world would generate id needed move , however server-side rendering make complicated , generated id going cause mismatch client/server . 've tried different approach address , one making id 's required prop component need . get kinda ugly component need id 's moreso annoys user . unfortunate could generate deterministic id 's could provide accessible component default . frustrating part component generally information need set various aria info necessary make component usable screen reader , stymied user provide bunch globally unique id ' far really reasonable approach 've seen @ syranide 's solution root id store , using ` _rootid ` . latter obviously problem . former n't scale well library author . everyones ' root app component already wrapped router , provider , etc , every library use root level id provider probably super feasible annoying user . seems like best way would react ( react addon ) could provide consistent first class way get unique identifier component , even base64 node 's _rootid . thanks hard work everyone !",
        "title_stopwords_removal_lemmatization": "generating unique id 's ssr ( a11y )"
    },
    {
        "issue_id": 125079138,
        "title": "`onSelectionChange` event",
        "label": [
            "Type: Feature Request",
            "Component: DOM",
            "Resolution: Stale"
        ],
        "date": "2016-01-05T23:49:46Z",
        "status": "closed",
        "description": "The `onSelect` event does not fire while the user is dragging the mouse, only after they release. It would be nice to have an event that fired immediately whenever the selection changed, including while dragging the mouse. This is useful, for example, when syncing selections between multiple collaborators, ala google docs.\n\nThe native [selectionchange](https://developer.mozilla.org/en-US/docs/Web/Events/selectionchange) event is supported cross browser, way back in IE, Chrome, and Safari, and recently in Firefox 43. Is this something React could polyfill and expose to components?\n",
        "remove_template_description": "The `onSelect` event does not fire while the user is dragging the mouse, only after they release. It would be nice to have an event that fired immediately whenever the selection changed, including while dragging the mouse. This is useful, for example, when syncing selections between multiple collaborators, ala google docs.  The native [selectionchange](https://developer.mozilla.org/en-US/docs/Web/Events/selectionchange) event is supported cross browser, way back in IE, Chrome, and Safari, and recently in Firefox 43. Is this something React could polyfill and expose to components?",
        "human_words": "The `onSelect` event does not fire while the user is dragging the mouse, only after they release. It would be nice to have an event that fired immediately whenever the selection changed, including while dragging the mouse. This is useful, for example, when syncing selections between multiple collaborators, ala google docs.  The native [selectionchange](https://developer.mozilla.org/en-US/docs/Web/Events/selectionchange) event is supported cross browser, way back in IE, Chrome, and Safari, and recently in Firefox 43. Is this something React could polyfill and expose to components?",
        "human_words_regrex": "The `onSelect` event does not fire while the user is dragging the mouse, only after they release. It would be nice to have an event that fired immediately whenever the selection changed, including while dragging the mouse. This is useful, for example, when syncing selections between multiple collaborators, ala google docs. The native  event is supported cross browser, way back in IE, Chrome, and Safari, and recently in Firefox 43. Is this something React could polyfill and expose to components?",
        "human_words_stopwords_removal_lemmatization": "` onselect ` event fire user dragging mouse , release . would nice event fired immediately whenever selection changed , including dragging mouse . useful , example , syncing selection multiple collaborator , ala google doc . native event supported cross browser , way back ie , chrome , safari , recently firefox 43. something react could polyfill expose component ?",
        "title_stopwords_removal_lemmatization": "` onselectionchange ` event"
    },
    {
        "issue_id": 124545647,
        "title": "Dynamically added unmount handlers",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2016-01-01T13:59:20Z",
        "status": "closed",
        "description": "React components could use some way to dynamically add a handler to be called on unmount. Either some event handler like way (`this.addUnmountHandler`) or some other way to register a 'destructor'/destroy method for an object that a component is holding on to.\n\n`componentWillUnmount` exists but it does not scale well.\n- Every time you hold on to something you have to maintain two sections of code, with the cleanup code being separate from the rest of the code.\n- If you try to cleanup your code using helpers adding the cleanup code could be done in the very same function. But `componentWillUnmount` doesn't allow that.\n- Sometimes you end up adding a `this._fooSomethingProp` to a component you wouldn't normally need, just so that you can hold on to the destructor for use in `componentWillUnmount` because you can't add the cleanup code in the same closure you set it up in.\n\n---\n\nHere's one sample use case of mine for unmount handlers.\n\nReact is discouraging the use of mixins so I've been trying to move towards alternative patterns in new code. Some helpers only make sense on a component itself and wont work as a special component or a higher-order component.\n\nFor some of these needs I've come up with a pattern that involves passing the component to a helper function that will mutate the component and provide some sort of service which is linked to the component.\n\nTwo examples from my codebase:\n\n`ctxApi` provides a component with a version of my internal api which is 'scoped' to the component so that if the component is unmounted all of the api requests' HTTP requests are aborted.\n\n`setPending` adds a key to a pending state set and returns a `pending.cleanup` that will unset it, which is intended to be passed to a `.finally` handler. This pattern provides my buttons, etc... with pending text and spinners while waiting for HTTP requests.\n\n``` js\nresendConfirmation(email) {\n    var pending = setPending(this, `${email}:resendConfirmation`);\n\n    ctxApi(this)\n        .then((api) => api.post('/self/resendConfirmationEmail', {email}))\n        .then(() => alertifyjs.notify(\"Confirmation message sent\"))\n        .fin(pending.cleanup)\n        .catch(ignoreAbort)\n        .catch(notifyOnError)\n        .done();\n}\n```\n\nThe problem is that these helpers often need cleanup on unmount. `ctxApi` needs to abort requests on unmount. And `setPending` needs to break references so `setState` isn't called and it doesn't prevent gc. And while I can require that a call to a cleanup function be placed into `componentWillUnmount`. That is unnecessary boilerplate and easy to forget.\n\nIt would be much preferable for these helpers to be able to register an unmount handler on the component instance so they can implicitly clean themselves up.\n",
        "remove_template_description": "React components could use some way to dynamically add a handler to be called on unmount. Either some event handler like way (`this.addUnmountHandler`) or some other way to register a 'destructor'/destroy method for an object that a component is holding on to.  `componentWillUnmount` exists but it does not scale well. - Every time you hold on to something you have to maintain two sections of code, with the cleanup code being separate from the rest of the code. - If you try to cleanup your code using helpers adding the cleanup code could be done in the very same function. But `componentWillUnmount` doesn't allow that. - Sometimes you end up adding a `this._fooSomethingProp` to a component you wouldn't normally need, just so that you can hold on to the destructor for use in `componentWillUnmount` because you can't add the cleanup code in the same closure you set it up in.  ---  Here's one sample use case of mine for unmount handlers.  React is discouraging the use of mixins so I've been trying to move towards alternative patterns in new code. Some helpers only make sense on a component itself and wont work as a special component or a higher-order component.  For some of these needs I've come up with a pattern that involves passing the component to a helper function that will mutate the component and provide some sort of service which is linked to the component.  Two examples from my codebase:  `ctxApi` provides a component with a version of my internal api which is 'scoped' to the component so that if the component is unmounted all of the api requests' HTTP requests are aborted.  `setPending` adds a key to a pending state set and returns a `pending.cleanup` that will unset it, which is intended to be passed to a `.finally` handler. This pattern provides my buttons, etc... with pending text and spinners while waiting for HTTP requests.  ``` js resendConfirmation(email) {     var pending = setPending(this, `${email}:resendConfirmation`);      ctxApi(this)         .then((api) => api.post('/self/resendConfirmationEmail', {email}))         .then(() => alertifyjs.notify(\"Confirmation message sent\"))         .fin(pending.cleanup)         .catch(ignoreAbort)         .catch(notifyOnError)         .done(); } ```  The problem is that these helpers often need cleanup on unmount. `ctxApi` needs to abort requests on unmount. And `setPending` needs to break references so `setState` isn't called and it doesn't prevent gc. And while I can require that a call to a cleanup function be placed into `componentWillUnmount`. That is unnecessary boilerplate and easy to forget.  It would be much preferable for these helpers to be able to register an unmount handler on the component instance so they can implicitly clean themselves up.",
        "human_words": "React components could use some way to dynamically add a handler to be called on unmount. Either some event handler like way (`this.addUnmountHandler`) or some other way to register a 'destructor'/destroy method for an object that a component is holding on to.  `componentWillUnmount` exists but it does not scale well. - Every time you hold on to something you have to maintain two sections of code, with the cleanup code being separate from the rest of the code. - If you try to cleanup your code using helpers adding the cleanup code could be done in the very same function. But `componentWillUnmount` doesn't allow that. - Sometimes you end up adding a `this._fooSomethingProp` to a component you wouldn't normally need, just so that you can hold on to the destructor for use in `componentWillUnmount` because you can't add the cleanup code in the same closure you set it up in.  ---  Here's one sample use case of mine for unmount handlers.  React is discouraging the use of mixins so I've been trying to move towards alternative patterns in new code. Some helpers only make sense on a component itself and wont work as a special component or a higher-order component.  For some of these needs I've come up with a pattern that involves passing the component to a helper function that will mutate the component and provide some sort of service which is linked to the component.  Two examples from my codebase:  `ctxApi` provides a component with a version of my internal api which is 'scoped' to the component so that if the component is unmounted all of the api requests' HTTP requests are aborted.  `setPending` adds a key to a pending state set and returns a `pending.cleanup` that will unset it, which is intended to be passed to a `.finally` handler. This pattern provides my buttons, etc... with pending text and spinners while waiting for HTTP requests.    The problem is that these helpers often need cleanup on unmount. `ctxApi` needs to abort requests on unmount. And `setPending` needs to break references so `setState` isn't called and it doesn't prevent gc. And while I can require that a call to a cleanup function be placed into `componentWillUnmount`. That is unnecessary boilerplate and easy to forget.  It would be much preferable for these helpers to be able to register an unmount handler on the component instance so they can implicitly clean themselves up.",
        "human_words_regrex": "React components could use some way to dynamically add a handler to be called on unmount. Either some event handler like way (`this.addUnmountHandler`) or some other way to register a 'destructor'/destroy method for an object that a component is holding on to. `componentWillUnmount` exists but it does not scale well. - Every time you hold on to something you have to maintain two sections of code, with the cleanup code being separate from the rest of the code. - If you try to cleanup your code using helpers adding the cleanup code could be done in the very same function. But `componentWillUnmount` doesn't allow that. - Sometimes you end up adding a `this._fooSomethingProp` to a component you wouldn't normally need, just so that you can hold on to the destructor for use in `componentWillUnmount` because you can't add the cleanup code in the same closure you set it up in. --- Here's one sample use case of mine for unmount handlers. React is discouraging the use of mixins so I've been trying to move towards alternative patterns in new code. Some helpers only make sense on a component itself and wont work as a special component or a higher-order component. For some of these needs I've come up with a pattern that involves passing the component to a helper function that will mutate the component and provide some sort of service which is linked to the component. Two examples from my codebase: `ctxApi` provides a component with a version of my internal api which is 'scoped' to the component so that if the component is unmounted all of the api requests' HTTP requests are aborted. `setPending` adds a key to a pending state set and returns a `pending.cleanup` that will unset it, which is intended to be passed to a `.finally` handler. This pattern provides my buttons, etc... with pending text and spinners while waiting for HTTP requests. The problem is that these helpers often need cleanup on unmount. `ctxApi` needs to abort requests on unmount. And `setPending` needs to break references so `setState` isn't called and it doesn't prevent gc. And while I can require that a call to a cleanup function be placed into `componentWillUnmount`. That is unnecessary boilerplate and easy to forget. It would be much preferable for these helpers to be able to register an unmount handler on the component instance so they can implicitly clean themselves up.",
        "human_words_stopwords_removal_lemmatization": "react component could use way dynamically add handler called unmount . either event handler like way ( ` this.addunmounthandler ` ) way register 'destructor'/destroy method object component holding . ` componentwillunmount ` exists scale well . - every time hold something maintain two section code , cleanup code separate rest code . - try cleanup code using helper adding cleanup code could done function . ` componentwillunmount ` n't allow . - sometimes end adding ` this._foosomethingprop ` component would n't normally need , hold destructor use ` componentwillunmount ` ca n't add cleanup code closure set . -- - 's one sample use case mine unmount handler . react discouraging use mixins 've trying move towards alternative pattern new code . helper make sense component wont work special component higher-order component . need 've come pattern involves passing component helper function mutate component provide sort service linked component . two example codebase : ` ctxapi ` provides component version internal api 'scoped ' component component unmounted api request ' http request aborted . ` setpending ` add key pending state set return ` pending.cleanup ` unset , intended passed ` .finally ` handler . pattern provides button , etc ... pending text spinner waiting http request . problem helper often need cleanup unmount . ` ctxapi ` need abort request unmount . ` setpending ` need break reference ` setstate ` n't called n't prevent gc . require call cleanup function placed ` componentwillunmount ` . unnecessary boilerplate easy forget . would much preferable helper able register unmount handler component instance implicitly clean .",
        "title_stopwords_removal_lemmatization": "dynamically added unmount handler"
    },
    {
        "issue_id": 117001444,
        "title": "Include flow type definitions",
        "label": [
            "Component: Build Infrastructure",
            "Type: Feature Request"
        ],
        "date": "2015-11-15T16:18:03Z",
        "status": "closed",
        "description": "As per comments from @samwgoldman in the following issue, the flow built-in react type definitions are lagging behind and the recommendation is that the definitions be included and maintained in the react repo itself: \n\nhttps://github.com/facebook/flow/issues/1081\n\nThe flow maintainers are doing an excellent job of implementing new JS syntax/features. It would be great if they did not also need to maintain this file:\n\nhttps://github.com/facebook/flow/blob/master/lib/react.js\n\nOne could, of course, also relegate this definition to yet another repo.\n",
        "remove_template_description": "As per comments from @samwgoldman in the following issue, the flow built-in react type definitions are lagging behind and the recommendation is that the definitions be included and maintained in the react repo itself:   https://github.com/facebook/flow/issues/1081  The flow maintainers are doing an excellent job of implementing new JS syntax/features. It would be great if they did not also need to maintain this file:  https://github.com/facebook/flow/blob/master/lib/react.js  One could, of course, also relegate this definition to yet another repo.",
        "human_words": "As per comments from @samwgoldman in the following issue, the flow built-in react type definitions are lagging behind and the recommendation is that the definitions be included and maintained in the react repo itself:   https://github.com/facebook/flow/issues/1081  The flow maintainers are doing an excellent job of implementing new JS syntax/features. It would be great if they did not also need to maintain this file:  https://github.com/facebook/flow/blob/master/lib/react.js  One could, of course, also relegate this definition to yet another repo.",
        "human_words_regrex": "As per comments from @samwgoldman in the following issue, the flow built-in react type definitions are lagging behind and the recommendation is that the definitions be included and maintained in the react repo itself:  The flow maintainers are doing an excellent job of implementing new JS syntax/features. It would be great if they did not also need to maintain this file:  One could, of course, also relegate this definition to yet another repo.",
        "human_words_stopwords_removal_lemmatization": "per comment @ samwgoldman following issue , flow built-in react type definition lagging behind recommendation definition included maintained react repo : flow maintainer excellent job implementing new j syntax/features . would great also need maintain file : one could , course , also relegate definition yet another repo .",
        "title_stopwords_removal_lemmatization": "include flow type definition"
    },
    {
        "issue_id": 113167187,
        "title": "Immutable.KeyedIterable as children",
        "label": [
            "Type: Feature Request",
            "Component: Component API"
        ],
        "date": "2015-10-24T15:28:25Z",
        "status": "closed",
        "description": "I'm aware of the [Iterable support for children](https://jsfiddle.net/aneo4nhk/), but is there any timetable for supporting [KeyedIterable](https://facebook.github.io/immutable-js/docs/#/KeyedIterable) from Immutable.js, specifically for [automatically providing keys to children](https://github.com/facebook/react/blob/ac5e5d789f022f0d13107e54653f13a8ede0330b/src/shared/utils/traverseAllChildren.js#L154-L159)?\n\nSample use case:\n\n``` js\nvar myItems = Immutable.Map({ // extends KeyedIterable\n  one: 111,\n  two: 222\n});\nvar renderedItems = (\n  <ul>{myItems.map(item => (\n    <li>{item}</li>\n  ))}</ul>\n);\n```\n\nThat is, the first item would end up the equivalent of `<li key=\"one\">111</li>`.\n\nIf such support isn't on the roadmap, can I somehow avoid having to use `React.cloneElement()` (which will have performance implications) if I write a helper function that does this?\n",
        "remove_template_description": "I'm aware of the [Iterable support for children](https://jsfiddle.net/aneo4nhk/), but is there any timetable for supporting [KeyedIterable](https://facebook.github.io/immutable-js/docs/#/KeyedIterable) from Immutable.js, specifically for [automatically providing keys to children](https://github.com/facebook/react/blob/ac5e5d789f022f0d13107e54653f13a8ede0330b/src/shared/utils/traverseAllChildren.js#L154-L159)?  Sample use case:  ``` js var myItems = Immutable.Map({ // extends KeyedIterable   one: 111,   two: 222 }); var renderedItems = (   <ul>{myItems.map(item => (     <li>{item}</li>   ))}</ul> ); ```  That is, the first item would end up the equivalent of `<li key=\"one\">111</li>`.  If such support isn't on the roadmap, can I somehow avoid having to use `React.cloneElement()` (which will have performance implications) if I write a helper function that does this?",
        "human_words": "I'm aware of the [Iterable support for children](https://jsfiddle.net/aneo4nhk/), but is there any timetable for supporting [KeyedIterable](https://facebook.github.io/immutable-js/docs/#/KeyedIterable) from Immutable.js, specifically for [automatically providing keys to children](https://github.com/facebook/react/blob/ac5e5d789f022f0d13107e54653f13a8ede0330b/src/shared/utils/traverseAllChildren.js#L154-L159)?  Sample use case:    That is, the first item would end up the equivalent of `<li key=\"one\">111</li>`.  If such support isn't on the roadmap, can I somehow avoid having to use `React.cloneElement()` (which will have performance implications) if I write a helper function that does this?",
        "human_words_regrex": "I'm aware of the , but is there any timetable for supporting  from Immutable.js, specifically for ? Sample use case: That is, the first item would end up the equivalent of `111`. If such support isn't on the roadmap, can I somehow avoid having to use `React.cloneElement()` (which will have performance implications) if I write a helper function that does this?",
        "human_words_stopwords_removal_lemmatization": "'m aware , timetable supporting immutable.js , specifically ? sample use case : , first item would end equivalent ` 111 ` . support n't roadmap , somehow avoid use ` react.cloneelement ( ) ` ( performance implication ) write helper function ?",
        "title_stopwords_removal_lemmatization": "immutable.keyediterable child"
    },
    {
        "issue_id": 110986133,
        "title": "`inlineElements` optimization breaks on older browsers; discussion about Symbols and React.elementFromObject() API",
        "label": [
            "Type: Feature Request",
            "Component: Core Utilities"
        ],
        "date": "2015-10-12T14:34:24Z",
        "status": "closed",
        "description": "See this https://github.com/babel/babel/issues/2517 and the associated discussion around the PR https://github.com/babel/babel/pull/2518, which I don't expect to be merged due to loader issues.\n\nTo recap: \n\nThe `inlineElements` optimization requires brittle knowledge of internal React values, namely, `$$typeof`. This breaks on older browsers unless the developer globally polyfills `Symbol`, because `Symbol` will be polyfilled automatically by Babel in the user's code, but will not be polyfilled in the React library. This causes `ReactElement.isValidElement` to fail as `Symbol.for('react.element') !== 0xeac7`.\n\nWorse, this bug only occurs in older browsers that don't implement Symbol, meaning that many devs won't catch it right away as it will work fine in FF, Chrome, and (latest) Safari.\n\nThis is a hard issue to fix without globally polyfilling Symbol or giving up on the use of `Symbol` for `$$typeof`. Babel could automatically this as part of enabling the optimisation, but @loganfsmyth had a better idea - how about a `React.elementFromObject()` API?\n\nThis function would be nothing more than:\n\n``` js\nReact.elementFromObject = function(obj) {\n  invariant(obj && typeof obj === 'object', \"Supply an object to React.elementFromObject.\");\n  obj.$$typeof = REACT_ELEMENT_TYPE;\n  return obj;\n}\n```\n\nThis ensures that the `REACT_ELEMENT_TYPE` we are using is equal to the one used in `ReactElement.isValidElement`. It shouldn't be necessary to do any validation in `elementFromObject` because it will be caught by `isValidElement` later on.\n\nThoughts?\n",
        "remove_template_description": "See this https://github.com/babel/babel/issues/2517 and the associated discussion around the PR https://github.com/babel/babel/pull/2518, which I don't expect to be merged due to loader issues.  To recap:   The `inlineElements` optimization requires brittle knowledge of internal React values, namely, `$$typeof`. This breaks on older browsers unless the developer globally polyfills `Symbol`, because `Symbol` will be polyfilled automatically by Babel in the user's code, but will not be polyfilled in the React library. This causes `ReactElement.isValidElement` to fail as `Symbol.for('react.element') !== 0xeac7`.  Worse, this bug only occurs in older browsers that don't implement Symbol, meaning that many devs won't catch it right away as it will work fine in FF, Chrome, and (latest) Safari.  This is a hard issue to fix without globally polyfilling Symbol or giving up on the use of `Symbol` for `$$typeof`. Babel could automatically this as part of enabling the optimisation, but @loganfsmyth had a better idea - how about a `React.elementFromObject()` API?  This function would be nothing more than:  ``` js React.elementFromObject = function(obj) {   invariant(obj && typeof obj === 'object', \"Supply an object to React.elementFromObject.\");   obj.$$typeof = REACT_ELEMENT_TYPE;   return obj; } ```  This ensures that the `REACT_ELEMENT_TYPE` we are using is equal to the one used in `ReactElement.isValidElement`. It shouldn't be necessary to do any validation in `elementFromObject` because it will be caught by `isValidElement` later on.  Thoughts?",
        "human_words": "See this https://github.com/babel/babel/issues/2517 and the associated discussion around the PR https://github.com/babel/babel/pull/2518, which I don't expect to be merged due to loader issues.  To recap:   The `inlineElements` optimization requires brittle knowledge of internal React values, namely, `$$typeof`. This breaks on older browsers unless the developer globally polyfills `Symbol`, because `Symbol` will be polyfilled automatically by Babel in the user's code, but will not be polyfilled in the React library. This causes `ReactElement.isValidElement` to fail as `Symbol.for('react.element') !== 0xeac7`.  Worse, this bug only occurs in older browsers that don't implement Symbol, meaning that many devs won't catch it right away as it will work fine in FF, Chrome, and (latest) Safari.  This is a hard issue to fix without globally polyfilling Symbol or giving up on the use of `Symbol` for `$$typeof`. Babel could automatically this as part of enabling the optimisation, but @loganfsmyth had a better idea - how about a `React.elementFromObject()` API?  This function would be nothing more than:    This ensures that the `REACT_ELEMENT_TYPE` we are using is equal to the one used in `ReactElement.isValidElement`. It shouldn't be necessary to do any validation in `elementFromObject` because it will be caught by `isValidElement` later on.  Thoughts?",
        "human_words_regrex": "See this  and the associated discussion around the PR  which I don't expect to be merged due to loader issues. To recap: The `inlineElements` optimization requires brittle knowledge of internal React values, namely, `$$typeof`. This breaks on older browsers unless the developer globally polyfills `Symbol`, because `Symbol` will be polyfilled automatically by Babel in the user's code, but will not be polyfilled in the React library. This causes `ReactElement.isValidElement` to fail as `Symbol.for('react.element') !== 0xeac7`. Worse, this bug only occurs in older browsers that don't implement Symbol, meaning that many devs won't catch it right away as it will work fine in FF, Chrome, and (latest) Safari. This is a hard issue to fix without globally polyfilling Symbol or giving up on the use of `Symbol` for `$$typeof`. Babel could automatically this as part of enabling the optimisation, but @loganfsmyth had a better idea - how about a `React.elementFromObject()` API? This function would be nothing more than: This ensures that the `REACT_ELEMENT_TYPE` we are using is equal to the one used in `ReactElement.isValidElement`. It shouldn't be necessary to do any validation in `elementFromObject` because it will be caught by `isValidElement` later on. Thoughts?",
        "human_words_stopwords_removal_lemmatization": "see associated discussion around pr n't expect merged due loader issue . recap : ` inlineelements ` optimization requires brittle knowledge internal react value , namely , ` $ $ typeof ` . break older browser unless developer globally polyfills ` symbol ` , ` symbol ` polyfilled automatically babel user 's code , polyfilled react library . cause ` reactelement.isvalidelement ` fail ` symbol.for ( 'react.element ' ) ! == 0xeac7 ` . worse , bug occurs older browser n't implement symbol , meaning many devs wo n't catch right away work fine ff , chrome , ( latest ) safari . hard issue fix without globally polyfilling symbol giving use ` symbol ` ` $ $ typeof ` . babel could automatically part enabling optimisation , @ loganfsmyth better idea - ` react.elementfromobject ( ) ` api ? function would nothing : ensures ` react_element_type ` using equal one used ` reactelement.isvalidelement ` . n't necessary validation ` elementfromobject ` caught ` isvalidelement ` later . thought ?",
        "title_stopwords_removal_lemmatization": "` inlineelements ` optimization break older browser ; discussion symbol react.elementfromobject ( ) api"
    },
    {
        "issue_id": 110426989,
        "title": "Custom element can't render `children` and `childNodes` independently",
        "label": [
            "Type: Feature Request",
            "Component: DOM",
            "Resolution: Stale"
        ],
        "date": "2015-10-08T11:16:10Z",
        "status": "closed",
        "description": "Also, it should be possible to specify a component that sets the children attribute and the components child nodes independently.\n\nexample:\n\n```\n<my-web-component children=\"2\">\n    <div>myChild</div>\n    <div>myOtherChild</div>\n</my-web-component>\n```\n\nThis is related to (a superset of) https://github.com/facebook/react/issues/5088.  This might be another motivation to reconsider #4694, which I've wanted for a while.\n",
        "remove_template_description": "Also, it should be possible to specify a component that sets the children attribute and the components child nodes independently.  example:  ``` <my-web-component children=\"2\">     <div>myChild</div>     <div>myOtherChild</div> </my-web-component> ```  This is related to (a superset of) https://github.com/facebook/react/issues/5088.  This might be another motivation to reconsider #4694, which I've wanted for a while.",
        "human_words": "Also, it should be possible to specify a component that sets the children attribute and the components child nodes independently.  example:    This is related to (a superset of) https://github.com/facebook/react/issues/5088.  This might be another motivation to reconsider #4694, which I've wanted for a while.",
        "human_words_regrex": "Also, it should be possible to specify a component that sets the children attribute and the components child nodes independently. example: This is related to (a superset of)  This might be another motivation to reconsider #4694, which I've wanted for a while.",
        "human_words_stopwords_removal_lemmatization": "also , possible specify component set child attribute component child node independently . example : related ( superset ) might another motivation reconsider # 4694 , 've wanted .",
        "title_stopwords_removal_lemmatization": "custom element ca n't render ` child ` ` childnodes ` independently"
    },
    {
        "issue_id": 109851571,
        "title": "componentWasMounted/componentWasUpdated (formerly componentDidDisplay)",
        "label": [
            "Type: Feature Request",
            "Component: Component API",
            "React Core Team"
        ],
        "date": "2015-10-05T17:56:33Z",
        "status": "closed",
        "description": "Proposal: New life-cycle that fires after `componentDidMount` and after the event-loop has returned but before any other reconciliation has started.\n\nEffectively, this give you a `componentDidMount` that doesn't block the visual output. It could be a good place to set up timers, subscriptions etc.\n",
        "remove_template_description": "Proposal: New life-cycle that fires after `componentDidMount` and after the event-loop has returned but before any other reconciliation has started.  Effectively, this give you a `componentDidMount` that doesn't block the visual output. It could be a good place to set up timers, subscriptions etc.",
        "human_words": "Proposal: New life-cycle that fires after `componentDidMount` and after the event-loop has returned but before any other reconciliation has started.  Effectively, this give you a `componentDidMount` that doesn't block the visual output. It could be a good place to set up timers, subscriptions etc.",
        "human_words_regrex": "Proposal: New life-cycle that fires after `componentDidMount` and after the event-loop has returned but before any other reconciliation has started. Effectively, this give you a `componentDidMount` that doesn't block the visual output. It could be a good place to set up timers, subscriptions etc.",
        "human_words_stopwords_removal_lemmatization": "proposal : new life-cycle fire ` componentdidmount ` event-loop returned reconciliation started . effectively , give ` componentdidmount ` n't block visual output . could good place set timer , subscription etc .",
        "title_stopwords_removal_lemmatization": "componentwasmounted/componentwasupdated ( formerly componentdiddisplay )"
    },
    {
        "issue_id": 108373297,
        "title": "Better test facilities for stateless components",
        "label": [
            "Type: Feature Request",
            "Component: Test Utils"
        ],
        "date": "2015-09-25T17:33:06Z",
        "status": "closed",
        "description": "I originally left a comment in #4936, but I felt this might be better as a separate issue.\n\n> I completely agree with the rationale behind no backing instances and no refs for stateless components. I want to use pure stateless components as much as possible.\n> \n> However, I'm running into instances where testing stateless components gets tricky. For the most part, using the shallow renderer to render a stateless component has been fine. I can then make assertions on expected props and children. To reduce the duplication, I abstract out the shallow renderer process to a helper function.\n> \n> When, I want to test events, though, I have to take a different route. If my component takes an `onClick` prop, then I wrap it in a class component, so I can access the DOM node to simulate my click event. Again, this isn't a huge deal because I can abstract out the wrap/render process into a helper function.\n> \n> I bring all this up because I feel that it would be nice to have better facilities in `TestUtils` for stateless components. I don't think the answer is allowing `ReactDOM.findDOMNode` to work on stateless components because that opens up it to abuse in normal application code. Are you open to allowing extra functions in `TestUtils` to simplify the process of testing stateless components? Or am I creating a code smell in my testing?\n> \n> I'd be happy to create a PR for `TestUtils` if you think some more helper functions for stateless components would be beneficial.\n",
        "remove_template_description": "I originally left a comment in #4936, but I felt this might be better as a separate issue.  > I completely agree with the rationale behind no backing instances and no refs for stateless components. I want to use pure stateless components as much as possible. >  > However, I'm running into instances where testing stateless components gets tricky. For the most part, using the shallow renderer to render a stateless component has been fine. I can then make assertions on expected props and children. To reduce the duplication, I abstract out the shallow renderer process to a helper function. >  > When, I want to test events, though, I have to take a different route. If my component takes an `onClick` prop, then I wrap it in a class component, so I can access the DOM node to simulate my click event. Again, this isn't a huge deal because I can abstract out the wrap/render process into a helper function. >  > I bring all this up because I feel that it would be nice to have better facilities in `TestUtils` for stateless components. I don't think the answer is allowing `ReactDOM.findDOMNode` to work on stateless components because that opens up it to abuse in normal application code. Are you open to allowing extra functions in `TestUtils` to simplify the process of testing stateless components? Or am I creating a code smell in my testing? >  > I'd be happy to create a PR for `TestUtils` if you think some more helper functions for stateless components would be beneficial.",
        "human_words": "I originally left a comment in #4936, but I felt this might be better as a separate issue.  > I completely agree with the rationale behind no backing instances and no refs for stateless components. I want to use pure stateless components as much as possible. >  > However, I'm running into instances where testing stateless components gets tricky. For the most part, using the shallow renderer to render a stateless component has been fine. I can then make assertions on expected props and children. To reduce the duplication, I abstract out the shallow renderer process to a helper function. >  > When, I want to test events, though, I have to take a different route. If my component takes an `onClick` prop, then I wrap it in a class component, so I can access the DOM node to simulate my click event. Again, this isn't a huge deal because I can abstract out the wrap/render process into a helper function. >  > I bring all this up because I feel that it would be nice to have better facilities in `TestUtils` for stateless components. I don't think the answer is allowing `ReactDOM.findDOMNode` to work on stateless components because that opens up it to abuse in normal application code. Are you open to allowing extra functions in `TestUtils` to simplify the process of testing stateless components? Or am I creating a code smell in my testing? >  > I'd be happy to create a PR for `TestUtils` if you think some more helper functions for stateless components would be beneficial.",
        "human_words_regrex": "I originally left a comment in #4936, but I felt this might be better as a separate issue. > I completely agree with the rationale behind no backing instances and no refs for stateless components. I want to use pure stateless components as much as possible. > > However, I'm running into instances where testing stateless components gets tricky. For the most part, using the shallow renderer to render a stateless component has been fine. I can then make assertions on expected props and children. To reduce the duplication, I abstract out the shallow renderer process to a helper function. > > When, I want to test events, though, I have to take a different route. If my component takes an `onClick` prop, then I wrap it in a class component, so I can access the DOM node to simulate my click event. Again, this isn't a huge deal because I can abstract out the wrap/render process into a helper function. > > I bring all this up because I feel that it would be nice to have better facilities in `TestUtils` for stateless components. I don't think the answer is allowing `ReactDOM.findDOMNode` to work on stateless components because that opens up it to abuse in normal application code. Are you open to allowing extra functions in `TestUtils` to simplify the process of testing stateless components? Or am I creating a code smell in my testing? > > I'd be happy to create a PR for `TestUtils` if you think some more helper functions for stateless components would be beneficial.",
        "human_words_stopwords_removal_lemmatization": "originally left comment # 4936 , felt might better separate issue . > completely agree rationale behind backing instance ref stateless component . want use pure stateless component much possible . > > however , 'm running instance testing stateless component get tricky . part , using shallow renderer render stateless component fine . make assertion expected prop child . reduce duplication , abstract shallow renderer process helper function . > > , want test event , though , take different route . component take ` onclick ` prop , wrap class component , access dom node simulate click event . , n't huge deal abstract wrap/render process helper function . > > bring feel would nice better facility ` testutils ` stateless component . n't think answer allowing ` reactdom.finddomnode ` work stateless component open abuse normal application code . open allowing extra function ` testutils ` simplify process testing stateless component ? creating code smell testing ? > > 'd happy create pr ` testutils ` think helper function stateless component would beneficial .",
        "title_stopwords_removal_lemmatization": "better test facility stateless component"
    },
    {
        "issue_id": 106363480,
        "title": "[Children] filter null values in map function",
        "label": [
            "Type: Feature Request",
            "Component: Core Utilities"
        ],
        "date": "2015-09-14T15:11:04Z",
        "status": "closed",
        "description": "Currently I am implementing some `Dropdown` component and I have something like this.\n\n``` jsx\nreturn (\n  <div className={classnames(classes)} tabIndex=\"-1\">\n    {Children.map(children, this.render_child)}\n  </div>\n)\n\n...\n\n@autobind\nrender_child(element, index) {\n  return cloneElement(element, {\n    key: element.key || index,\n    selected: this.props.selected,\n    onClick: this.click_handler\n  })\n}\n```\n\nThe business requirement put me in this situation. I created the list of item of the `Dropdown` component.\n\n``` jsx\n// this is using map from some array so I will return an array.\nrender_menu_item(key) {\n  if(!key) { //whatever checking\n    return\n  }\n\n  return (\n    <MenuItem value={key}>{text}</MenuItem>\n  )\n}\n```\n\nNow, because I use `element.key` in some case `element` could be `null` so give me an error. I propose to remove the `null` or `undefined` from the `Children.map` because then I will be filtering all the time the `null` values whenever I have this situation. \n\nI understand I can `forEach` but I think is not the best implementation, in the end you change the `map` function alright so\n",
        "remove_template_description": "Currently I am implementing some `Dropdown` component and I have something like this.  ``` jsx return (   <div className={classnames(classes)} tabIndex=\"-1\">     {Children.map(children, this.render_child)}   </div> )  ...  @autobind render_child(element, index) {   return cloneElement(element, {     key: element.key || index,     selected: this.props.selected,     onClick: this.click_handler   }) } ```  The business requirement put me in this situation. I created the list of item of the `Dropdown` component.  ``` jsx // this is using map from some array so I will return an array. render_menu_item(key) {   if(!key) { //whatever checking     return   }    return (     <MenuItem value={key}>{text}</MenuItem>   ) } ```  Now, because I use `element.key` in some case `element` could be `null` so give me an error. I propose to remove the `null` or `undefined` from the `Children.map` because then I will be filtering all the time the `null` values whenever I have this situation.   I understand I can `forEach` but I think is not the best implementation, in the end you change the `map` function alright so",
        "human_words": "Currently I am implementing some `Dropdown` component and I have something like this.    The business requirement put me in this situation. I created the list of item of the `Dropdown` component.    Now, because I use `element.key` in some case `element` could be `null` so give me an error. I propose to remove the `null` or `undefined` from the `Children.map` because then I will be filtering all the time the `null` values whenever I have this situation.   I understand I can `forEach` but I think is not the best implementation, in the end you change the `map` function alright so",
        "human_words_regrex": "Currently I am implementing some `Dropdown` component and I have something like this. The business requirement put me in this situation. I created the list of item of the `Dropdown` component. Now, because I use `element.key` in some case `element` could be `null` so give me an error. I propose to remove the `null` or `undefined` from the `Children.map` because then I will be filtering all the time the `null` values whenever I have this situation. I understand I can `forEach` but I think is not the best implementation, in the end you change the `map` function alright so",
        "human_words_stopwords_removal_lemmatization": "currently implementing ` dropdown ` component something like . business requirement put situation . created list item ` dropdown ` component . , use ` element.key ` case ` element ` could ` null ` give error . propose remove ` null ` ` undefined ` ` children.map ` filtering time ` null ` value whenever situation . understand ` foreach ` think best implementation , end change ` map ` function alright",
        "title_stopwords_removal_lemmatization": "[ child ] filter null value map function"
    },
    {
        "issue_id": 101398557,
        "title": "it's time to merge className in react",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2015-08-17T11:13:28Z",
        "status": "closed",
        "description": "well, react is very good, i like it,but i have some question, and it's time to fixed.\n1.why support style object\n\n``` javascript\nstyle={color: 'white',backgroundImage: 'url(' + imgUrl + ')'} \n```\n\nbut not support className, i think className should support string,array,object,there has a classname repertory.i just want to write code like this:\n\n``` javascript\n<div className={['button','icon-red']}></div>\n<div className={{opened:true,cloth:'red'}}></div>\n<div className={'button',{opened:true,cloth:'red'}}></div>\n//not\nvar className = react.addons.className;\nvar someVar = className({  //that is puzzled i think\nopened:true,\ncloth:'red'\n});\n<div className={someVar}>  \n```\n\nor will it be support in the feture?\n",
        "remove_template_description": "well, react is very good, i like it,but i have some question, and it's time to fixed. 1.why support style object  ``` javascript style={color: 'white',backgroundImage: 'url(' + imgUrl + ')'}  ```  but not support className, i think className should support string,array,object,there has a classname repertory.i just want to write code like this:  ``` javascript <div className={['button','icon-red']}></div> <div className={{opened:true,cloth:'red'}}></div> <div className={'button',{opened:true,cloth:'red'}}></div> //not var className = react.addons.className; var someVar = className({  //that is puzzled i think opened:true, cloth:'red' }); <div className={someVar}>   ```  or will it be support in the feture?",
        "human_words": "well, react is very good, i like it,but i have some question, and it's time to fixed. 1.why support style object    but not support className, i think className should support string,array,object,there has a classname repertory.i just want to write code like this:    or will it be support in the feture?",
        "human_words_regrex": "well, react is very good, i like it,but i have some question, and it's time to fixed. 1.why support style object but not support className, i think className should support string,array,object,there has a classname repertory.i just want to write code like this: or will it be support in the feture?",
        "human_words_stopwords_removal_lemmatization": "well , react good , like , question , 's time fixed . 1.why support style object support classname , think classname support string , array , object , classname repertory.i want write code like : support feture ?",
        "title_stopwords_removal_lemmatization": "'s time merge classname react"
    },
    {
        "issue_id": 100141391,
        "title": "Stop relying on document",
        "label": [
            "Component: Build Infrastructure",
            "Type: Feature Request"
        ],
        "date": "2015-08-10T18:55:33Z",
        "status": "closed",
        "description": "We have a few use cases that we support which shouldn't rely on `document` or other DOM specific globals to be available.\n- Shallow Rendering\n- Worker Renderers (e.g. react-native like environments)\n- Server Rendering (setState etc shouldn't look for document)\n\nUnfortunately we often screw this up. Which leads to work arounds:\n- https://github.com/gaearon/library-boilerplate/pull/6\n- https://github.com/facebook/react-native/blob/master/Libraries/JavaScriptAppEngine/polyfills/document.js#L28\n- https://github.com/facebook/react/issues/3620\n\nPart of the problem is that jest comes with JSDOM always on. We need to have a test environment that allow us to execute in a DOM-less environment.\n\nWe also need to add separate unit tests for these three test cases that execute in a DOM-less environment.\n\nWe could potentially add a lint rule against using globals in files in the `shared` folder.\n\nWe should also get rid of all uses of `canUseDOM` since it varies by render tree, not environment.\n",
        "remove_template_description": "We have a few use cases that we support which shouldn't rely on `document` or other DOM specific globals to be available. - Shallow Rendering - Worker Renderers (e.g. react-native like environments) - Server Rendering (setState etc shouldn't look for document)  Unfortunately we often screw this up. Which leads to work arounds: - https://github.com/gaearon/library-boilerplate/pull/6 - https://github.com/facebook/react-native/blob/master/Libraries/JavaScriptAppEngine/polyfills/document.js#L28 - https://github.com/facebook/react/issues/3620  Part of the problem is that jest comes with JSDOM always on. We need to have a test environment that allow us to execute in a DOM-less environment.  We also need to add separate unit tests for these three test cases that execute in a DOM-less environment.  We could potentially add a lint rule against using globals in files in the `shared` folder.  We should also get rid of all uses of `canUseDOM` since it varies by render tree, not environment.",
        "human_words": "We have a few use cases that we support which shouldn't rely on `document` or other DOM specific globals to be available. - Shallow Rendering - Worker Renderers (e.g. react-native like environments) - Server Rendering (setState etc shouldn't look for document)  Unfortunately we often screw this up. Which leads to work arounds: - https://github.com/gaearon/library-boilerplate/pull/6 - https://github.com/facebook/react-native/blob/master/Libraries/JavaScriptAppEngine/polyfills/document.js#L28 - https://github.com/facebook/react/issues/3620  Part of the problem is that jest comes with JSDOM always on. We need to have a test environment that allow us to execute in a DOM-less environment.  We also need to add separate unit tests for these three test cases that execute in a DOM-less environment.  We could potentially add a lint rule against using globals in files in the `shared` folder.  We should also get rid of all uses of `canUseDOM` since it varies by render tree, not environment.",
        "human_words_regrex": "We have a few use cases that we support which shouldn't rely on `document` or other DOM specific globals to be available. - Shallow Rendering - Worker Renderers (e.g. react-native like environments) - Server Rendering (setState etc shouldn't look for document) Unfortunately we often screw this up. Which leads to work arounds: -  -  -  Part of the problem is that jest comes with JSDOM always on. We need to have a test environment that allow us to execute in a DOM-less environment. We also need to add separate unit tests for these three test cases that execute in a DOM-less environment. We could potentially add a lint rule against using globals in files in the `shared` folder. We should also get rid of all uses of `canUseDOM` since it varies by render tree, not environment.",
        "human_words_stopwords_removal_lemmatization": "use case support n't rely ` document ` dom specific globals available . - shallow rendering - worker renderers ( e.g . react-native like environment ) - server rendering ( setstate etc n't look document ) unfortunately often screw . lead work arounds : - - - part problem jest come jsdom always . need test environment allow u execute dom-less environment . also need add separate unit test three test case execute dom-less environment . could potentially add lint rule using globals file ` shared ` folder . also get rid us ` canusedom ` since varies render tree , environment .",
        "title_stopwords_removal_lemmatization": "stop relying document"
    },
    {
        "issue_id": 99788133,
        "title": "Allow PropTypes.shape as a valid definition of propTypes",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2015-08-08T09:46:41Z",
        "status": "closed",
        "description": "Short:\n\n`propTypes` should accept `React.PropTypes.shape` object as valid declaration of `propTypes`.\n\n``` js\nimport React from 'react';\n\nexport default class extends React.Component {\n    static propTypes = React.PropTypes.shape({});\n\n    // ...\n```\n\nMore:\n\nI have a file called `shapes.js` that defines all shapes used in the project, e.g.\n\n``` js\nimport {\n    PropTypes\n} from 'react';\n\nexport let screeningShapeDefinition = {\n    id: PropTypes.number.isRequired,\n    timestamp: PropTypes.number.isRequired,\n    url: PropTypes.string.isRequired,\n    position: PropTypes.number.isRequired\n};\n\nexport let screeningListShapeDefinition = {\n    size: PropTypes.number.isRequired,\n    screenings: PropTypes.arrayOf(PropTypes.shape(screeningShapeDefinition)).isRequired\n};\n```\n\n, which I use in modules as such:\n\n``` js\nimport React from 'react';\nimport moment from 'moment';\n\nimport {\n    screeningShapeDefinition\n} from './../../shapes';\n\nexport default class extends React.Component {\n    static propTypes = screeningShapeDefinition;\n\n    // ...\n```\n\nThere is a slight leaking:\n- I have to cast my shape definition object to `React.PropTypes.shape` when defining relations in the shapes definition file.\n\nIf `propTypes` (component definition property) supported `React.PropTypes.shape` as a valid input, I could avoid the leaking:\n\n``` js\nimport React from 'react';\nimport moment from 'moment';\n\nimport {\n    screeningShape\n} from './../../shapes';\n\nexport default class extends React.Component {\n    static propTypes = screeningShape;\n\n    // ...\n```\n\n``` js\nimport {\n    PropTypes\n} from 'react';\n\nexport let screeningShape = PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    timestamp: PropTypes.number.isRequired,\n    url: PropTypes.string.isRequired,\n    position: PropTypes.number.isRequired\n});\n\nexport let screeningListShape = PropTypes.shape({\n    size: PropTypes.number.isRequired,\n    screenings: PropTypes.arrayOf(screeningShape).isRequired\n});\n```\n",
        "remove_template_description": "Short:  `propTypes` should accept `React.PropTypes.shape` object as valid declaration of `propTypes`.  ``` js import React from 'react';  export default class extends React.Component {     static propTypes = React.PropTypes.shape({});      // ... ```  More:  I have a file called `shapes.js` that defines all shapes used in the project, e.g.  ``` js import {     PropTypes } from 'react';  export let screeningShapeDefinition = {     id: PropTypes.number.isRequired,     timestamp: PropTypes.number.isRequired,     url: PropTypes.string.isRequired,     position: PropTypes.number.isRequired };  export let screeningListShapeDefinition = {     size: PropTypes.number.isRequired,     screenings: PropTypes.arrayOf(PropTypes.shape(screeningShapeDefinition)).isRequired }; ```  , which I use in modules as such:  ``` js import React from 'react'; import moment from 'moment';  import {     screeningShapeDefinition } from './../../shapes';  export default class extends React.Component {     static propTypes = screeningShapeDefinition;      // ... ```  There is a slight leaking: - I have to cast my shape definition object to `React.PropTypes.shape` when defining relations in the shapes definition file.  If `propTypes` (component definition property) supported `React.PropTypes.shape` as a valid input, I could avoid the leaking:  ``` js import React from 'react'; import moment from 'moment';  import {     screeningShape } from './../../shapes';  export default class extends React.Component {     static propTypes = screeningShape;      // ... ```  ``` js import {     PropTypes } from 'react';  export let screeningShape = PropTypes.shape({     id: PropTypes.number.isRequired,     timestamp: PropTypes.number.isRequired,     url: PropTypes.string.isRequired,     position: PropTypes.number.isRequired });  export let screeningListShape = PropTypes.shape({     size: PropTypes.number.isRequired,     screenings: PropTypes.arrayOf(screeningShape).isRequired }); ```",
        "human_words": "Short:  `propTypes` should accept `React.PropTypes.shape` object as valid declaration of `propTypes`.    More:  I have a file called `shapes.js` that defines all shapes used in the project, e.g.    , which I use in modules as such:    There is a slight leaking: - I have to cast my shape definition object to `React.PropTypes.shape` when defining relations in the shapes definition file.  If `propTypes` (component definition property) supported `React.PropTypes.shape` as a valid input, I could avoid the leaking:    ",
        "human_words_regrex": "Short: `propTypes` should accept `React.PropTypes.shape` object as valid declaration of `propTypes`. More: I have a file called `shapes.js` that defines all shapes used in the project, e.g. , which I use in modules as such: There is a slight leaking: - I have to cast my shape definition object to `React.PropTypes.shape` when defining relations in the shapes definition file. If `propTypes` (component definition property) supported `React.PropTypes.shape` as a valid input, I could avoid the leaking: ",
        "human_words_stopwords_removal_lemmatization": "short : ` proptypes ` accept ` react.proptypes.shape ` object valid declaration ` proptypes ` . : file called ` shapes.js ` defines shape used project , e.g . , use module : slight leaking : - cast shape definition object ` react.proptypes.shape ` defining relation shape definition file . ` proptypes ` ( component definition property ) supported ` react.proptypes.shape ` valid input , could avoid leaking :",
        "title_stopwords_removal_lemmatization": "allow proptypes.shape valid definition proptypes"
    },
    {
        "issue_id": 99054670,
        "title": "Support the camelCase version of webkitTransform as well",
        "label": [
            "Type: Feature Request",
            "Component: DOM",
            "Resolution: Stale"
        ],
        "date": "2015-08-04T20:26:20Z",
        "status": "closed",
        "description": "Although `node.style.WebkitTransform` (PascalCase) does work in Safari, the actual property is `node.style.webkitTransform` (camelCase) which React doesn't support properly. Can an alias be added to handle this case, since it doesn't seem obvious?\n\nIn fact, Safari's inspector autocomplete doesn't even work for `node.style.WebkitTransform` - seems like it's a hack that it works.\n",
        "remove_template_description": "Although `node.style.WebkitTransform` (PascalCase) does work in Safari, the actual property is `node.style.webkitTransform` (camelCase) which React doesn't support properly. Can an alias be added to handle this case, since it doesn't seem obvious?  In fact, Safari's inspector autocomplete doesn't even work for `node.style.WebkitTransform` - seems like it's a hack that it works.",
        "human_words": "Although `node.style.WebkitTransform` (PascalCase) does work in Safari, the actual property is `node.style.webkitTransform` (camelCase) which React doesn't support properly. Can an alias be added to handle this case, since it doesn't seem obvious?  In fact, Safari's inspector autocomplete doesn't even work for `node.style.WebkitTransform` - seems like it's a hack that it works.",
        "human_words_regrex": "Although `node.style.WebkitTransform` (PascalCase) does work in Safari, the actual property is `node.style.webkitTransform` (camelCase) which React doesn't support properly. Can an alias be added to handle this case, since it doesn't seem obvious? In fact, Safari's inspector autocomplete doesn't even work for `node.style.WebkitTransform` - seems like it's a hack that it works.",
        "human_words_stopwords_removal_lemmatization": "although ` node.style.webkittransform ` ( pascalcase ) work safari , actual property ` node.style.webkittransform ` ( camelcase ) react n't support properly . alias added handle case , since n't seem obvious ? fact , safari 's inspector autocomplete n't even work ` node.style.webkittransform ` - seems like 's hack work .",
        "title_stopwords_removal_lemmatization": "support camelcase version webkittransform well"
    },
    {
        "issue_id": 96401594,
        "title": "Deferred componentDidMount inside Component Tree",
        "label": [
            "Type: Feature Request",
            "Component: DOM",
            "Component: Component API",
            "Resolution: Stale"
        ],
        "date": "2015-07-21T19:44:10Z",
        "status": "closed",
        "description": "**Problem:** I have DOM Elements outside of main DOM Document, where I want to render my React components. When done, some of the original elements will be mounted into main DOM Document. I need to delay `componentDidMount` and schedule it after components are inside main DOM Document.\n\n**Reason:** Mainly because I have some logic inside `componentDidMount` that works with offsets of Element (e.g. controls lazy loading of images). When invoked in seperate DOM, component have wrong idea about where it is on screen.\n\nIs it possible with current version of React (or 0.14) to achieve behaviour, where componentDidMount transaction is invoked later, after I give a signal to root Component? Or will future refactoring allow this use case?\n",
        "remove_template_description": "**Problem:** I have DOM Elements outside of main DOM Document, where I want to render my React components. When done, some of the original elements will be mounted into main DOM Document. I need to delay `componentDidMount` and schedule it after components are inside main DOM Document.  **Reason:** Mainly because I have some logic inside `componentDidMount` that works with offsets of Element (e.g. controls lazy loading of images). When invoked in seperate DOM, component have wrong idea about where it is on screen.  Is it possible with current version of React (or 0.14) to achieve behaviour, where componentDidMount transaction is invoked later, after I give a signal to root Component? Or will future refactoring allow this use case?",
        "human_words": "**Problem:** I have DOM Elements outside of main DOM Document, where I want to render my React components. When done, some of the original elements will be mounted into main DOM Document. I need to delay `componentDidMount` and schedule it after components are inside main DOM Document.  **Reason:** Mainly because I have some logic inside `componentDidMount` that works with offsets of Element (e.g. controls lazy loading of images). When invoked in seperate DOM, component have wrong idea about where it is on screen.  Is it possible with current version of React (or 0.14) to achieve behaviour, where componentDidMount transaction is invoked later, after I give a signal to root Component? Or will future refactoring allow this use case?",
        "human_words_regrex": "**Problem:** I have DOM Elements outside of main DOM Document, where I want to render my React components. When done, some of the original elements will be mounted into main DOM Document. I need to delay `componentDidMount` and schedule it after components are inside main DOM Document. **Reason:** Mainly because I have some logic inside `componentDidMount` that works with offsets of Element (e.g. controls lazy loading of images). When invoked in seperate DOM, component have wrong idea about where it is on screen. Is it possible with current version of React (or 0.14) to achieve behaviour, where componentDidMount transaction is invoked later, after I give a signal to root Component? Or will future refactoring allow this use case?",
        "human_words_stopwords_removal_lemmatization": "* * problem : * * dom element outside main dom document , want render react component . done , original element mounted main dom document . need delay ` componentdidmount ` schedule component inside main dom document . * * reason : * * mainly logic inside ` componentdidmount ` work offset element ( e.g . control lazy loading image ) . invoked seperate dom , component wrong idea screen . possible current version react ( 0.14 ) achieve behaviour , componentdidmount transaction invoked later , give signal root component ? future refactoring allow use case ?",
        "title_stopwords_removal_lemmatization": "deferred componentdidmount inside component tree"
    },
    {
        "issue_id": 93296053,
        "title": "Add hooks into the warning output for unit tests and other use cases",
        "label": [
            "Type: Feature Request",
            "Component: Core Utilities",
            "Resolution: Stale"
        ],
        "date": "2015-07-06T14:43:22Z",
        "status": "closed",
        "description": "I'd like to configure my testsuite to fail if there are any react warnings triggered.\n\nI'm currently using a variant on this SO answer http://stackoverflow.com/questions/29651950/karma-and-react-have-warnings-to-cause-errors\n\n``` js\nconsole.warn = (function(warn) {\n  return function(msg) {\n\n    // Detect react warnings & error\n    if (/^Warning: /.test(msg)) {\n      throw new Error(\"React \" + msg);\n    }\n\n    return warn.apply(this, arguments);\n  };\n})(console.warn);\n```\n\nThis basically works, but has a problem because there's some global-state memoisation in the code which triggers warning to try not to trigger too often:\nhttps://github.com/facebook/react/blob/500d4c3f8779bce7c7dde129eb2fec9e901cf5ae/src/isomorphic/classic/element/ReactElementValidator.js#L46\n\nCould we provide a way to clear this state, or even better a supported API for opt-in erroring on warnings?\n",
        "remove_template_description": "I'd like to configure my testsuite to fail if there are any react warnings triggered.  I'm currently using a variant on this SO answer http://stackoverflow.com/questions/29651950/karma-and-react-have-warnings-to-cause-errors  ``` js console.warn = (function(warn) {   return function(msg) {      // Detect react warnings & error     if (/^Warning: /.test(msg)) {       throw new Error(\"React \" + msg);     }      return warn.apply(this, arguments);   }; })(console.warn); ```  This basically works, but has a problem because there's some global-state memoisation in the code which triggers warning to try not to trigger too often: https://github.com/facebook/react/blob/500d4c3f8779bce7c7dde129eb2fec9e901cf5ae/src/isomorphic/classic/element/ReactElementValidator.js#L46  Could we provide a way to clear this state, or even better a supported API for opt-in erroring on warnings?",
        "human_words": "I'd like to configure my testsuite to fail if there are any react warnings triggered.  I'm currently using a variant on this SO answer http://stackoverflow.com/questions/29651950/karma-and-react-have-warnings-to-cause-errors    This basically works, but has a problem because there's some global-state memoisation in the code which triggers warning to try not to trigger too often: https://github.com/facebook/react/blob/500d4c3f8779bce7c7dde129eb2fec9e901cf5ae/src/isomorphic/classic/element/ReactElementValidator.js#L46  Could we provide a way to clear this state, or even better a supported API for opt-in erroring on warnings?",
        "human_words_regrex": "I'd like to configure my testsuite to fail if there are any react warnings triggered. I'm currently using a variant on this SO answer  This basically works, but has a problem because there's some global-state memoisation in the code which triggers warning to try not to trigger too often:  Could we provide a way to clear this state, or even better a supported API for opt-in erroring on warnings?",
        "human_words_stopwords_removal_lemmatization": "'d like configure testsuite fail react warning triggered . 'm currently using variant answer basically work , problem 's global-state memoisation code trigger warning try trigger often : could provide way clear state , even better supported api opt-in erroring warning ?",
        "title_stopwords_removal_lemmatization": "add hook warning output unit test use case"
    },
    {
        "issue_id": 93114294,
        "title": "Apps that mount over isomorphically rendered forms aren't aware of early input",
        "label": [
            "Type: Feature Request",
            "Component: DOM",
            "Component: Server Rendering",
            "Resolution: Stale"
        ],
        "date": "2015-07-05T14:09:44Z",
        "status": "closed",
        "description": "Consider the following scenario (or [run it](https://github.com/d4goxn/iso-form-issue-repro)), in a simple isomorphic app that consists of a single-input form.\n1. A form is rendered on the server with existing data and sent to the browser, along with dehydrated state\n2. The user edits the form\n3. The browser loads the app, slowly, which rehydrates its state and bootstraps over the form\n4. The user hits a save button\n\nAt this point, React has found no reason to rerender the form or throw a warning, even though the values of the form elements have been updated by the user before the app was listening to them. As a result, app state is out of sync with form input values. The user has just re-saved their old data (app state), but sees their new data (form values). If they leave, they lose their changes even though it appears that they just successfully saved.\n\nI have decided to solve the problem by putting a ref on every form input, and copying their values into app state on `componentDidMount`. I can probably make the solution a little more DRY than that sounds at first.\n\nI'm thinking that a better solution might be to have React include input values in the checksums. Is there a technical reason why this is not how isomorphic rendering already works?\n",
        "remove_template_description": "Consider the following scenario (or [run it](https://github.com/d4goxn/iso-form-issue-repro)), in a simple isomorphic app that consists of a single-input form. 1. A form is rendered on the server with existing data and sent to the browser, along with dehydrated state 2. The user edits the form 3. The browser loads the app, slowly, which rehydrates its state and bootstraps over the form 4. The user hits a save button  At this point, React has found no reason to rerender the form or throw a warning, even though the values of the form elements have been updated by the user before the app was listening to them. As a result, app state is out of sync with form input values. The user has just re-saved their old data (app state), but sees their new data (form values). If they leave, they lose their changes even though it appears that they just successfully saved.  I have decided to solve the problem by putting a ref on every form input, and copying their values into app state on `componentDidMount`. I can probably make the solution a little more DRY than that sounds at first.  I'm thinking that a better solution might be to have React include input values in the checksums. Is there a technical reason why this is not how isomorphic rendering already works?",
        "human_words": "Consider the following scenario (or [run it](https://github.com/d4goxn/iso-form-issue-repro)), in a simple isomorphic app that consists of a single-input form. 1. A form is rendered on the server with existing data and sent to the browser, along with dehydrated state 2. The user edits the form 3. The browser loads the app, slowly, which rehydrates its state and bootstraps over the form 4. The user hits a save button  At this point, React has found no reason to rerender the form or throw a warning, even though the values of the form elements have been updated by the user before the app was listening to them. As a result, app state is out of sync with form input values. The user has just re-saved their old data (app state), but sees their new data (form values). If they leave, they lose their changes even though it appears that they just successfully saved.  I have decided to solve the problem by putting a ref on every form input, and copying their values into app state on `componentDidMount`. I can probably make the solution a little more DRY than that sounds at first.  I'm thinking that a better solution might be to have React include input values in the checksums. Is there a technical reason why this is not how isomorphic rendering already works?",
        "human_words_regrex": "Consider the following scenario (or ), in a simple isomorphic app that consists of a single-input form. 1. A form is rendered on the server with existing data and sent to the browser, along with dehydrated state 2. The user edits the form 3. The browser loads the app, slowly, which rehydrates its state and bootstraps over the form 4. The user hits a save button At this point, React has found no reason to rerender the form or throw a warning, even though the values of the form elements have been updated by the user before the app was listening to them. As a result, app state is out of sync with form input values. The user has just re-saved their old data (app state), but sees their new data (form values). If they leave, they lose their changes even though it appears that they just successfully saved. I have decided to solve the problem by putting a ref on every form input, and copying their values into app state on `componentDidMount`. I can probably make the solution a little more DRY than that sounds at first. I'm thinking that a better solution might be to have React include input values in the checksums. Is there a technical reason why this is not how isomorphic rendering already works?",
        "human_words_stopwords_removal_lemmatization": "consider following scenario ( ) , simple isomorphic app consists single-input form . 1. form rendered server existing data sent browser , along dehydrated state 2. user edits form 3. browser load app , slowly , rehydrates state bootstrap form 4. user hit save button point , react found reason rerender form throw warning , even though value form element updated user app listening . result , app state sync form input value . user re-saved old data ( app state ) , see new data ( form value ) . leave , lose change even though appears successfully saved . decided solve problem putting ref every form input , copying value app state ` componentdidmount ` . probably make solution little dry sound first . 'm thinking better solution might react include input value checksum . technical reason isomorphic rendering already work ?",
        "title_stopwords_removal_lemmatization": "apps mount isomorphically rendered form n't aware early input"
    },
    {
        "issue_id": 90780317,
        "title": "Forward refs / Support getPublicInstance",
        "label": [
            "Type: Feature Request",
            "Type: Big Picture",
            "Component: Component API"
        ],
        "date": "2015-06-24T21:06:50Z",
        "status": "closed",
        "description": "For 0.14 we'd like a feature that allows us to forward refs or define what the public instance of a component should be. That way we can make higher order components that are completely transparent.\n",
        "remove_template_description": "For 0.14 we'd like a feature that allows us to forward refs or define what the public instance of a component should be. That way we can make higher order components that are completely transparent.",
        "human_words": "For 0.14 we'd like a feature that allows us to forward refs or define what the public instance of a component should be. That way we can make higher order components that are completely transparent.",
        "human_words_regrex": "For 0.14 we'd like a feature that allows us to forward refs or define what the public instance of a component should be. That way we can make higher order components that are completely transparent.",
        "human_words_stopwords_removal_lemmatization": "0.14 'd like feature allows u forward ref define public instance component . way make higher order component completely transparent .",
        "title_stopwords_removal_lemmatization": "forward ref / support getpublicinstance"
    },
    {
        "issue_id": 88274857,
        "title": "Add event that behaves similar to the native `change` event",
        "label": [
            "Type: Feature Request",
            "Component: DOM",
            "Resolution: Stale"
        ],
        "date": "2015-06-15T00:29:02Z",
        "status": "closed",
        "description": "Because React has repurposed `onChange` to behave like `onInput` there is no way to get actual `change` event behaviour without binding a non-delegated native event in lifecycle events.\n\n`change` event behaviour is sometimes important to have. `input`-like behaviour does make sense for what React uses `onChange` for (live updating of state associated with `value=\"\"` and anything derived from it). But other use cases, like triggering an ajax post once a user has finished with an input, require the standard behaviour of `change` for text inputs where it is only fired after a user is finished with the input.\n\nThese use cases are reasonable to support within React. If `onChange` is going to be changed to behave in a non-standard way. Then we should add another custom non-standard event name that lets React elements bind to behaviour that is closer to how `change` behaves (with React's event delegation handling).\n\nEvent name ideas:\n- onChangeCommit(ted)\n- onCommit(ted)Change\n- onValueCommit(ted)\n- onCommitValue\n- onCommit?\n\nThe idea of using \"commit\" in the name comes from the HTML spec.\n\n> The change event fires when the value is committed, _[...]_\n\n~ Section [4.10.5.5 Common event behaviours](https://html.spec.whatwg.org/multipage/forms.html#event-input-input)\n",
        "remove_template_description": "Because React has repurposed `onChange` to behave like `onInput` there is no way to get actual `change` event behaviour without binding a non-delegated native event in lifecycle events.  `change` event behaviour is sometimes important to have. `input`-like behaviour does make sense for what React uses `onChange` for (live updating of state associated with `value=\"\"` and anything derived from it). But other use cases, like triggering an ajax post once a user has finished with an input, require the standard behaviour of `change` for text inputs where it is only fired after a user is finished with the input.  These use cases are reasonable to support within React. If `onChange` is going to be changed to behave in a non-standard way. Then we should add another custom non-standard event name that lets React elements bind to behaviour that is closer to how `change` behaves (with React's event delegation handling).  Event name ideas: - onChangeCommit(ted) - onCommit(ted)Change - onValueCommit(ted) - onCommitValue - onCommit?  The idea of using \"commit\" in the name comes from the HTML spec.  > The change event fires when the value is committed, _[...]_  ~ Section [4.10.5.5 Common event behaviours](https://html.spec.whatwg.org/multipage/forms.html#event-input-input)",
        "human_words": "Because React has repurposed `onChange` to behave like `onInput` there is no way to get actual `change` event behaviour without binding a non-delegated native event in lifecycle events.  `change` event behaviour is sometimes important to have. `input`-like behaviour does make sense for what React uses `onChange` for (live updating of state associated with `value=\"\"` and anything derived from it). But other use cases, like triggering an ajax post once a user has finished with an input, require the standard behaviour of `change` for text inputs where it is only fired after a user is finished with the input.  These use cases are reasonable to support within React. If `onChange` is going to be changed to behave in a non-standard way. Then we should add another custom non-standard event name that lets React elements bind to behaviour that is closer to how `change` behaves (with React's event delegation handling).  Event name ideas: - onChangeCommit(ted) - onCommit(ted)Change - onValueCommit(ted) - onCommitValue - onCommit?  The idea of using \"commit\" in the name comes from the HTML spec.  > The change event fires when the value is committed, _[...]_  ~ Section [4.10.5.5 Common event behaviours](https://html.spec.whatwg.org/multipage/forms.html#event-input-input)",
        "human_words_regrex": "Because React has repurposed `onChange` to behave like `onInput` there is no way to get actual `change` event behaviour without binding a non-delegated native event in lifecycle events. `change` event behaviour is sometimes important to have. `input`-like behaviour does make sense for what React uses `onChange` for (live updating of state associated with `value=\"\"` and anything derived from it). But other use cases, like triggering an ajax post once a user has finished with an input, require the standard behaviour of `change` for text inputs where it is only fired after a user is finished with the input. These use cases are reasonable to support within React. If `onChange` is going to be changed to behave in a non-standard way. Then we should add another custom non-standard event name that lets React elements bind to behaviour that is closer to how `change` behaves (with React's event delegation handling). Event name ideas: - onChangeCommit(ted) - onCommit(ted)Change - onValueCommit(ted) - onCommitValue - onCommit? The idea of using \"commit\" in the name comes from the HTML spec. > The change event fires when the value is committed, _",
        "human_words_stopwords_removal_lemmatization": "react repurposed ` onchange ` behave like ` oninput ` way get actual ` change ` event behaviour without binding non-delegated native event lifecycle event . ` change ` event behaviour sometimes important . ` input ` -like behaviour make sense react us ` onchange ` ( live updating state associated ` value= '' '' ` anything derived ) . use case , like triggering ajax post user finished input , require standard behaviour ` change ` text input fired user finished input . use case reasonable support within react . ` onchange ` going changed behave non-standard way . add another custom non-standard event name let react element bind behaviour closer ` change ` behaves ( react 's event delegation handling ) . event name idea : - onchangecommit ( ted ) - oncommit ( ted ) change - onvaluecommit ( ted ) - oncommitvalue - oncommit ? idea using `` commit '' name come html spec . > change event fire value committed , _",
        "title_stopwords_removal_lemmatization": "add event behaves similar native ` change ` event"
    },
    {
        "issue_id": 81424043,
        "title": "Support for reparenting",
        "label": [
            "Type: Feature Request",
            "Component: Component API",
            "Resolution: Backlog"
        ],
        "date": "2015-05-27T12:14:07Z",
        "status": "open",
        "description": "When writing a component that contains a set of large subtrees that stay relatively the same, but are simply moved around such that React's virtual DOM diffing can't detect the movement, React will end up recreating huge trees it should simply be moving.\n\nFor example, pretend `blockA` and `blockB` are very large structures. They may be made of several levels of children and components. For example one could be the entire page contents and the other the sidebar, while this `render()` is the page root.\n\n``` jsx\nrender() {\n    var blockA = <div>AAA</div>,\n        blockB = <div>BBB</div>;\n\n    if ( this.props.layoutA ) {\n        return <div>\n            <div className=\"something\">{blockB}</div>\n            <div className=\"something\">{blockA}</div>\n        </div>;\n    } else {\n        return <div>\n            {blockA}\n            {blockB}\n        </div>;\n    }\n}\n```\n\nBecause the blocks aren't at the same level React cannot see the relation between these blocks and `key` cannot be used to give React any hints. As a result, when `layoutA` is changed, instead of the two blocks being moved to their new location the entire page is essentially completely unrendered and then re-rendered from scratch.\n\nI understand why this is the case. It would be far to expensive for React to be able to detect movement of nodes like this.\n\nBut I do believe we need a pattern to hint to React that this component has large blocks that may be moved around at different levels.\n\nNote that there may be a component in between the rendering component root and the block. So parent semantics scoped to the nearest component won't work. This'll need owner scoping.\n\nI understand that React is trying to eliminate the need for React.createElement to be used and owner scoping within special attributes interferes with that. So instead of a component scoped `key=\"\"` variant I think a method/object style interface kind of like `React.addons.createFragment` might work.\n",
        "remove_template_description": "When writing a component that contains a set of large subtrees that stay relatively the same, but are simply moved around such that React's virtual DOM diffing can't detect the movement, React will end up recreating huge trees it should simply be moving.  For example, pretend `blockA` and `blockB` are very large structures. They may be made of several levels of children and components. For example one could be the entire page contents and the other the sidebar, while this `render()` is the page root.  ``` jsx render() {     var blockA = <div>AAA</div>,         blockB = <div>BBB</div>;      if ( this.props.layoutA ) {         return <div>             <div className=\"something\">{blockB}</div>             <div className=\"something\">{blockA}</div>         </div>;     } else {         return <div>             {blockA}             {blockB}         </div>;     } } ```  Because the blocks aren't at the same level React cannot see the relation between these blocks and `key` cannot be used to give React any hints. As a result, when `layoutA` is changed, instead of the two blocks being moved to their new location the entire page is essentially completely unrendered and then re-rendered from scratch.  I understand why this is the case. It would be far to expensive for React to be able to detect movement of nodes like this.  But I do believe we need a pattern to hint to React that this component has large blocks that may be moved around at different levels.  Note that there may be a component in between the rendering component root and the block. So parent semantics scoped to the nearest component won't work. This'll need owner scoping.  I understand that React is trying to eliminate the need for React.createElement to be used and owner scoping within special attributes interferes with that. So instead of a component scoped `key=\"\"` variant I think a method/object style interface kind of like `React.addons.createFragment` might work.",
        "human_words": "When writing a component that contains a set of large subtrees that stay relatively the same, but are simply moved around such that React's virtual DOM diffing can't detect the movement, React will end up recreating huge trees it should simply be moving.  For example, pretend `blockA` and `blockB` are very large structures. They may be made of several levels of children and components. For example one could be the entire page contents and the other the sidebar, while this `render()` is the page root.    Because the blocks aren't at the same level React cannot see the relation between these blocks and `key` cannot be used to give React any hints. As a result, when `layoutA` is changed, instead of the two blocks being moved to their new location the entire page is essentially completely unrendered and then re-rendered from scratch.  I understand why this is the case. It would be far to expensive for React to be able to detect movement of nodes like this.  But I do believe we need a pattern to hint to React that this component has large blocks that may be moved around at different levels.  Note that there may be a component in between the rendering component root and the block. So parent semantics scoped to the nearest component won't work. This'll need owner scoping.  I understand that React is trying to eliminate the need for React.createElement to be used and owner scoping within special attributes interferes with that. So instead of a component scoped `key=\"\"` variant I think a method/object style interface kind of like `React.addons.createFragment` might work.",
        "human_words_regrex": "When writing a component that contains a set of large subtrees that stay relatively the same, but are simply moved around such that React's virtual DOM diffing can't detect the movement, React will end up recreating huge trees it should simply be moving. For example, pretend `blockA` and `blockB` are very large structures. They may be made of several levels of children and components. For example one could be the entire page contents and the other the sidebar, while this `render()` is the page root. Because the blocks aren't at the same level React cannot see the relation between these blocks and `key` cannot be used to give React any hints. As a result, when `layoutA` is changed, instead of the two blocks being moved to their new location the entire page is essentially completely unrendered and then re-rendered from scratch. I understand why this is the case. It would be far to expensive for React to be able to detect movement of nodes like this. But I do believe we need a pattern to hint to React that this component has large blocks that may be moved around at different levels. Note that there may be a component in between the rendering component root and the block. So parent semantics scoped to the nearest component won't work. This'll need owner scoping. I understand that React is trying to eliminate the need for React.createElement to be used and owner scoping within special attributes interferes with that. So instead of a component scoped `key=\"\"` variant I think a method/object style interface kind of like `React.addons.createFragment` might work.",
        "human_words_stopwords_removal_lemmatization": "writing component contains set large subtrees stay relatively , simply moved around react 's virtual dom diffing ca n't detect movement , react end recreating huge tree simply moving . example , pretend ` blocka ` ` blockb ` large structure . may made several level child component . example one could entire page content sidebar , ` render ( ) ` page root . block n't level react see relation block ` key ` used give react hint . result , ` layouta ` changed , instead two block moved new location entire page essentially completely unrendered re-rendered scratch . understand case . would far expensive react able detect movement node like . believe need pattern hint react component large block may moved around different level . note may component rendering component root block . parent semantics scoped nearest component wo n't work . 'll need owner scoping . understand react trying eliminate need react.createelement used owner scoping within special attribute interferes . instead component scoped ` key= '' '' ` variant think method/object style interface kind like ` react.addons.createfragment ` might work .",
        "title_stopwords_removal_lemmatization": "support reparenting"
    },
    {
        "issue_id": 76288505,
        "title": "Remove React DevTools Download console log on install",
        "label": [
            "Type: Feature Request",
            "Component: DOM"
        ],
        "date": "2015-05-14T08:49:49Z",
        "status": "closed",
        "description": "I have React DevTools downloaded and enabled as a Chrome extension, version 0.13.1. I am using the `react` npm package, version 0.12.2, in a Chrome extension that is browserified. \r\n\r\nEvery time I open my console, the console log: \"Download the React DevTools for a better development experience: http://fb.me/react-devtools\" is there. \r\n\r\nWhat can I do to remove this? \r\n\r\n### Update from maintainers: see solution in https://github.com/facebook/react/issues/3877#issuecomment-341857218.",
        "remove_template_description": "I have React DevTools downloaded and enabled as a Chrome extension, version 0.13.1. I am using the `react` npm package, version 0.12.2, in a Chrome extension that is browserified.     Every time I open my console, the console log: \"Download the React DevTools for a better development experience: http://fb.me/react-devtools\" is there.     What can I do to remove this?     ### Update from maintainers: see solution in https://github.com/facebook/react/issues/3877#issuecomment-341857218.",
        "human_words": "I have React DevTools downloaded and enabled as a Chrome extension, version 0.13.1. I am using the `react` npm package, version 0.12.2, in a Chrome extension that is browserified.     Every time I open my console, the console log: \"Download the React DevTools for a better development experience: http://fb.me/react-devtools\" is there.     What can I do to remove this?     ### Update from maintainers: see solution in https://github.com/facebook/react/issues/3877#issuecomment-341857218.",
        "human_words_regrex": "I have React DevTools downloaded and enabled as a Chrome extension, version 0.13.1. I am using the `react` npm package, version 0.12.2, in a Chrome extension that is browserified. Every time I open my console, the console log: \"Download the React DevTools for a better development experience:  is there. What can I do to remove this? ### Update from maintainers: see solution in ",
        "human_words_stopwords_removal_lemmatization": "react devtools downloaded enabled chrome extension , version 0.13.1. using ` react ` npm package , version 0.12.2 , chrome extension browserified . every time open console , console log : `` download react devtools better development experience : . remove ? # # # update maintainer : see solution",
        "title_stopwords_removal_lemmatization": "remove react devtools download console log install"
    },
    {
        "issue_id": 75076276,
        "title": "request: enable triggering warnings on every render",
        "label": [
            "Type: Feature Request",
            "Component: DOM"
        ],
        "date": "2015-05-11T04:05:17Z",
        "status": "closed",
        "description": "On the client, it's nice that development warnings are only triggered on the initial render. But, when rendering from the server with `renderToString` it's annoying to only have the warnings triggered the first render and then ignored on subsequent page loads. \n\nWhat if render methods accepted an additional options argument?\n\n``` js\nReact.render(<span>hi</span>, window.app, {alwaysWarn: false})\n\nReact.renderToString(React.createElement(El, data), {alwaysWarn: true})\n```\n\nCrazy ideas: This might be useful for other options too? Perhaps: `appendToBody` (auto-appends the second arg), or `ignoreDOMCalls` (automatically catches/ignores errors to for `window` and `document` APIs)?\n",
        "remove_template_description": "On the client, it's nice that development warnings are only triggered on the initial render. But, when rendering from the server with `renderToString` it's annoying to only have the warnings triggered the first render and then ignored on subsequent page loads.   What if render methods accepted an additional options argument?  ``` js React.render(<span>hi</span>, window.app, {alwaysWarn: false})  React.renderToString(React.createElement(El, data), {alwaysWarn: true}) ```  Crazy ideas: This might be useful for other options too? Perhaps: `appendToBody` (auto-appends the second arg), or `ignoreDOMCalls` (automatically catches/ignores errors to for `window` and `document` APIs)?",
        "human_words": "On the client, it's nice that development warnings are only triggered on the initial render. But, when rendering from the server with `renderToString` it's annoying to only have the warnings triggered the first render and then ignored on subsequent page loads.   What if render methods accepted an additional options argument?    Crazy ideas: This might be useful for other options too? Perhaps: `appendToBody` (auto-appends the second arg), or `ignoreDOMCalls` (automatically catches/ignores errors to for `window` and `document` APIs)?",
        "human_words_regrex": "On the client, it's nice that development warnings are only triggered on the initial render. But, when rendering from the server with `renderToString` it's annoying to only have the warnings triggered the first render and then ignored on subsequent page loads. What if render methods accepted an additional options argument? Crazy ideas: This might be useful for other options too? Perhaps: `appendToBody` (auto-appends the second arg), or `ignoreDOMCalls` (automatically catches/ignores errors to for `window` and `document` APIs)?",
        "human_words_stopwords_removal_lemmatization": "client , 's nice development warning triggered initial render . , rendering server ` rendertostring ` 's annoying warning triggered first render ignored subsequent page load . render method accepted additional option argument ? crazy idea : might useful option ? perhaps : ` appendtobody ` ( auto-appends second arg ) , ` ignoredomcalls ` ( automatically catches/ignores error ` window ` ` document ` apis ) ?",
        "title_stopwords_removal_lemmatization": "request : enable triggering warning every render"
    },
    {
        "issue_id": 75072123,
        "title": "How do I extend HTML element",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2015-05-11T03:37:49Z",
        "status": "closed",
        "description": "For 300ms click delay problem, I need attach four events to a element (onClick onTouchStart onTouchMove onTouchEnd) .It makes a bit tedious that there are so many elements to be clickable.\n\nI can create a element, maybe named `<Tap />`, and receive property ontap and attache four events to the element to implement tap event. But I think it is bad for semantic, tap is a action.\n\nSo, the question is how I can extend HTML tag like div, a, em to support tap event, do you have any other ideas for this problem?\n\nThanks.\n",
        "remove_template_description": "For 300ms click delay problem, I need attach four events to a element (onClick onTouchStart onTouchMove onTouchEnd) .It makes a bit tedious that there are so many elements to be clickable.  I can create a element, maybe named `<Tap />`, and receive property ontap and attache four events to the element to implement tap event. But I think it is bad for semantic, tap is a action.  So, the question is how I can extend HTML tag like div, a, em to support tap event, do you have any other ideas for this problem?  Thanks.",
        "human_words": "For 300ms click delay problem, I need attach four events to a element (onClick onTouchStart onTouchMove onTouchEnd) .It makes a bit tedious that there are so many elements to be clickable.  I can create a element, maybe named `<Tap />`, and receive property ontap and attache four events to the element to implement tap event. But I think it is bad for semantic, tap is a action.  So, the question is how I can extend HTML tag like div, a, em to support tap event, do you have any other ideas for this problem?  Thanks.",
        "human_words_regrex": "For 300ms click delay problem, I need attach four events to a element (onClick onTouchStart onTouchMove onTouchEnd) .It makes a bit tedious that there are so many elements to be clickable. I can create a element, maybe named ``, and receive property ontap and attache four events to the element to implement tap event. But I think it is bad for semantic, tap is a action. So, the question is how I can extend HTML tag like div, a, em to support tap event, do you have any other ideas for this problem? Thanks.",
        "human_words_stopwords_removal_lemmatization": "300ms click delay problem , need attach four event element ( onclick ontouchstart ontouchmove ontouchend ) .it make bit tedious many element clickable . create element , maybe named `` , receive property ontap attache four event element implement tap event . think bad semantic , tap action . , question extend html tag like div , , em support tap event , idea problem ? thanks .",
        "title_stopwords_removal_lemmatization": "extend html element"
    },
    {
        "issue_id": 72081827,
        "title": "TestUtils.renderIntoDocument doesn't function as expected in all browsers",
        "label": [
            "Type: Feature Request",
            "Component: Test Utils",
            "Resolution: Stale"
        ],
        "date": "2015-04-30T07:04:19Z",
        "status": "closed",
        "description": "Hi,\n\nHere is my program ([jsfiddle](http://jsfiddle.net/w9dphLfc/2/)):\n\n``` jsx\nvar Input = React.createClass({\n    render: function() {\n        return (\n            <input \n                {...this.props}\n            />\n        );\n    }\n});\n\nvar TestUtils = React.addons.TestUtils;\nvar inputInstance = \n        TestUtils.renderIntoDocument(\n            <Input\n                value='abc'\n            />\n        );\n\nvar inputDOMNode = React.findDOMNode(inputInstance);\n\ninputDOMNode.focus();\n\n// Place cursor at the end.\ninputDOMNode.setSelectionRange(3, 3);\n\n// Should log 3 twice.\nconsole.log(inputDOMNode.selectionStart);\nconsole.log(inputDOMNode.selectionEnd);\n```\n\n**Problem**: `0` is logged twice in Chrome and Firefox.\n**What I expected**: `3` is logged twice. We see this in Safari.\n\nThe interesting part is if we use `React.render(..., document.body)` instead of `TestUtils.renderIntoDocument` the program works as expected. \n\nI am using:\n- Chrome 42.0.2311.135\n- Firefox 37.0.2\n- Safari  8.0.5 (10600.5.17)\n",
        "remove_template_description": "Hi,  Here is my program ([jsfiddle](http://jsfiddle.net/w9dphLfc/2/)):  ``` jsx var Input = React.createClass({     render: function() {         return (             <input                  {...this.props}             />         );     } });  var TestUtils = React.addons.TestUtils; var inputInstance =          TestUtils.renderIntoDocument(             <Input                 value='abc'             />         );  var inputDOMNode = React.findDOMNode(inputInstance);  inputDOMNode.focus();  // Place cursor at the end. inputDOMNode.setSelectionRange(3, 3);  // Should log 3 twice. console.log(inputDOMNode.selectionStart); console.log(inputDOMNode.selectionEnd); ```  **Problem**: `0` is logged twice in Chrome and Firefox. **What I expected**: `3` is logged twice. We see this in Safari.  The interesting part is if we use `React.render(..., document.body)` instead of `TestUtils.renderIntoDocument` the program works as expected.   I am using: - Chrome 42.0.2311.135 - Firefox 37.0.2 - Safari  8.0.5 (10600.5.17)",
        "human_words": "Hi,  Here is my program ([jsfiddle](http://jsfiddle.net/w9dphLfc/2/)):    **Problem**: `0` is logged twice in Chrome and Firefox. **What I expected**: `3` is logged twice. We see this in Safari.  The interesting part is if we use `React.render(..., document.body)` instead of `TestUtils.renderIntoDocument` the program works as expected.   I am using: - Chrome 42.0.2311.135 - Firefox 37.0.2 - Safari  8.0.5 (10600.5.17)",
        "human_words_regrex": "Hi, Here is my program (): **Problem**: `0` is logged twice in Chrome and Firefox. **What I expected**: `3` is logged twice. We see this in Safari. The interesting part is if we use `React.render(..., document.body)` instead of `TestUtils.renderIntoDocument` the program works as expected. I am using: - Chrome 42.0.2311.135 - Firefox 37.0.2 - Safari 8.0.5 (10600.5.17)",
        "human_words_stopwords_removal_lemmatization": "hi , program ( ) : * * problem * * : ` 0 ` logged twice chrome firefox . * * expected * * : ` 3 ` logged twice . see safari . interesting part use ` react.render ( ... , document.body ) ` instead ` testutils.renderintodocument ` program work expected . using : - chrome 42.0.2311.135 - firefox 37.0.2 - safari 8.0.5 ( 10600.5.17 )",
        "title_stopwords_removal_lemmatization": "testutils.renderintodocument n't function expected browser"
    },
    {
        "issue_id": 71816167,
        "title": "Support for pre/post-event notification",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2015-04-29T08:41:13Z",
        "status": "closed",
        "description": "I find myself for needing a before and after notification of any synthetic event e.g. onClick/onChange to any react component.\n\nThis helps to implement a Flux-like framework with more strict constraints on how the store change events propagate through the system. Ideally I need access to all the entry points into the application, being all a-sync server events, timer events, and all browser events.  For the latter, I would like a hook into the React event system.\n\nIs such a thing possible and/or feasible to implement?\n",
        "remove_template_description": "I find myself for needing a before and after notification of any synthetic event e.g. onClick/onChange to any react component.  This helps to implement a Flux-like framework with more strict constraints on how the store change events propagate through the system. Ideally I need access to all the entry points into the application, being all a-sync server events, timer events, and all browser events.  For the latter, I would like a hook into the React event system.  Is such a thing possible and/or feasible to implement?",
        "human_words": "I find myself for needing a before and after notification of any synthetic event e.g. onClick/onChange to any react component.  This helps to implement a Flux-like framework with more strict constraints on how the store change events propagate through the system. Ideally I need access to all the entry points into the application, being all a-sync server events, timer events, and all browser events.  For the latter, I would like a hook into the React event system.  Is such a thing possible and/or feasible to implement?",
        "human_words_regrex": "I find myself for needing a before and after notification of any synthetic event e.g. onClick/onChange to any react component. This helps to implement a Flux-like framework with more strict constraints on how the store change events propagate through the system. Ideally I need access to all the entry points into the application, being all a-sync server events, timer events, and all browser events. For the latter, I would like a hook into the React event system. Is such a thing possible and/or feasible to implement?",
        "human_words_stopwords_removal_lemmatization": "find needing notification synthetic event e.g . onclick/onchange react component . help implement flux-like framework strict constraint store change event propagate system . ideally need access entry point application , a-sync server event , timer event , browser event . latter , would like hook react event system . thing possible and/or feasible implement ?",
        "title_stopwords_removal_lemmatization": "support pre/post-event notification"
    },
    {
        "issue_id": 71418687,
        "title": "Make ReactShallowRenderer.render act more similar to React",
        "label": [
            "Type: Feature Request",
            "Component: Shallow Renderer"
        ],
        "date": "2015-04-27T22:23:53Z",
        "status": "closed",
        "description": "In my opinion,\n- `render` should return a component instance\n- calling `render` second time should unmount the previously mounted component if type or key is different\n\nDoes this make sense?\n",
        "remove_template_description": "In my opinion, - `render` should return a component instance - calling `render` second time should unmount the previously mounted component if type or key is different  Does this make sense?",
        "human_words": "In my opinion, - `render` should return a component instance - calling `render` second time should unmount the previously mounted component if type or key is different  Does this make sense?",
        "human_words_regrex": "In my opinion, - `render` should return a component instance - calling `render` second time should unmount the previously mounted component if type or key is different Does this make sense?",
        "human_words_stopwords_removal_lemmatization": "opinion , - ` render ` return component instance - calling ` render ` second time unmount previously mounted component type key different make sense ?",
        "title_stopwords_removal_lemmatization": "make reactshallowrenderer.render act similar react"
    },
    {
        "issue_id": 65577752,
        "title": "Teardown TestUtils method",
        "label": [
            "Type: Feature Request",
            "Component: Test Utils"
        ],
        "date": "2015-04-01T00:55:22Z",
        "status": "closed",
        "description": "I'm doing some unit-testing on a module, to be used in an isomorphic app process. So, I write-up `server-side.js` and `client-side.js` for Mocha to consume.  Individually, they each run pretty good - so far.  However, after starting to use TestUtils in `client-side`, `server-side` starts failing on account of:\n\n```\nUncaught ReferenceError: document is not defined\n at getActiveElement (~p/node_modules/react/lib/getActiveElement.js:23:12)\n at ReactReconcileTransaction.ReactInputSelection.getSelectionInformation (~p/node_modules/react/lib/ReactInputSelection.js:40:23)\n at ReactReconcileTransaction.Mixin.initializeAll (~p/node_modules/react/lib/Transaction.js:168:30)\n at ReactReconcileTransaction.Mixin.perform (~p/node_modules/react/lib/Transaction.js:133:12)\n at ReactUpdatesFlushTransaction.Mixin.perform (~p/node_modules/react/lib/Transaction.js:134:20)\n at ReactUpdatesFlushTransaction.assign.perform (~p/node_modules/react/lib/ReactUpdates.js:95:38)\n at Object.flushBatchedUpdates (~p/node_modules/react/lib/ReactUpdates.js:175:19)\n at Object.wrapper [as flushBatchedUpdates] (~p/node_modules/react/lib/ReactPerf.js:70:21)\n at ReactDefaultBatchingStrategyTransaction.Mixin.closeAll (~p/node_modules/react/lib/Transaction.js:207:25)\n at ReactDefaultBatchingStrategyTransaction.Mixin.perform (~p/node_modules/react/lib/Transaction.js:148:16)\n at Object.ReactDefaultBatchingStrategy.batchedUpdates (~p/node_modules/react/lib/ReactDefaultBatchingStrategy.js:66:19)\n at Object.enqueueUpdate (~p/node_modules/react/lib/ReactUpdates.js:215:22)\n at enqueueUpdate (~p/node_modules/react/lib/ReactUpdateQueue.js:30:18)\n at Object.ReactUpdateQueue.enqueueSetState (~p/node_modules/react/lib/ReactUpdateQueue.js:208:5)\n at ReactComponent.setState (~p/node_modules/react/lib/ReactComponent.js:69:20)\n at cb (~p/node_modules/reflux/src/connect.js:17:85)\n at EventEmitter.eventHandler (~p/node_modules/reflux/src/PublisherMethods.js:40:22)\n at EventEmitter.emit (~p/node_modules/reflux/node_modules/eventemitter3/index.js:72:35)\n at Store.module.exports.trigger (~p/node_modules/reflux/src/PublisherMethods.js:110:26)\n at Store.Reflux.createStore.onLoadFailed (~p/test/fixtures/WikiApp.js:40:10)\n at Store.Reflux.createStore.onLoadCompleted (~p/test/fixtures/WikiApp.js:35:12)\n at EventEmitter.eventHandler (~p/node_modules/reflux/src/PublisherMethods.js:40:22)\n at EventEmitter.emit (~p/node_modules/reflux/node_modules/eventemitter3/index.js:72:35)\n at Function.module.exports.trigger (~p/node_modules/reflux/src/PublisherMethods.js:110:26)\n at null._onTimeout (~p/node_modules/reflux/src/PublisherMethods.js:120:24)\n at Timer.listOnTimeout (timers.js:110:15)\n```\n\nApparently, this line has kicked React into client-mode.\n\n``` js\nvar node = TestUtils.renderIntoDocument(element);\n```\n\nThat's not too bad, but I need way to kick React out of client-mode, so I can add it to my teardown method (aka `after`).\n",
        "remove_template_description": "I'm doing some unit-testing on a module, to be used in an isomorphic app process. So, I write-up `server-side.js` and `client-side.js` for Mocha to consume.  Individually, they each run pretty good - so far.  However, after starting to use TestUtils in `client-side`, `server-side` starts failing on account of:  ``` Uncaught ReferenceError: document is not defined  at getActiveElement (~p/node_modules/react/lib/getActiveElement.js:23:12)  at ReactReconcileTransaction.ReactInputSelection.getSelectionInformation (~p/node_modules/react/lib/ReactInputSelection.js:40:23)  at ReactReconcileTransaction.Mixin.initializeAll (~p/node_modules/react/lib/Transaction.js:168:30)  at ReactReconcileTransaction.Mixin.perform (~p/node_modules/react/lib/Transaction.js:133:12)  at ReactUpdatesFlushTransaction.Mixin.perform (~p/node_modules/react/lib/Transaction.js:134:20)  at ReactUpdatesFlushTransaction.assign.perform (~p/node_modules/react/lib/ReactUpdates.js:95:38)  at Object.flushBatchedUpdates (~p/node_modules/react/lib/ReactUpdates.js:175:19)  at Object.wrapper [as flushBatchedUpdates] (~p/node_modules/react/lib/ReactPerf.js:70:21)  at ReactDefaultBatchingStrategyTransaction.Mixin.closeAll (~p/node_modules/react/lib/Transaction.js:207:25)  at ReactDefaultBatchingStrategyTransaction.Mixin.perform (~p/node_modules/react/lib/Transaction.js:148:16)  at Object.ReactDefaultBatchingStrategy.batchedUpdates (~p/node_modules/react/lib/ReactDefaultBatchingStrategy.js:66:19)  at Object.enqueueUpdate (~p/node_modules/react/lib/ReactUpdates.js:215:22)  at enqueueUpdate (~p/node_modules/react/lib/ReactUpdateQueue.js:30:18)  at Object.ReactUpdateQueue.enqueueSetState (~p/node_modules/react/lib/ReactUpdateQueue.js:208:5)  at ReactComponent.setState (~p/node_modules/react/lib/ReactComponent.js:69:20)  at cb (~p/node_modules/reflux/src/connect.js:17:85)  at EventEmitter.eventHandler (~p/node_modules/reflux/src/PublisherMethods.js:40:22)  at EventEmitter.emit (~p/node_modules/reflux/node_modules/eventemitter3/index.js:72:35)  at Store.module.exports.trigger (~p/node_modules/reflux/src/PublisherMethods.js:110:26)  at Store.Reflux.createStore.onLoadFailed (~p/test/fixtures/WikiApp.js:40:10)  at Store.Reflux.createStore.onLoadCompleted (~p/test/fixtures/WikiApp.js:35:12)  at EventEmitter.eventHandler (~p/node_modules/reflux/src/PublisherMethods.js:40:22)  at EventEmitter.emit (~p/node_modules/reflux/node_modules/eventemitter3/index.js:72:35)  at Function.module.exports.trigger (~p/node_modules/reflux/src/PublisherMethods.js:110:26)  at null._onTimeout (~p/node_modules/reflux/src/PublisherMethods.js:120:24)  at Timer.listOnTimeout (timers.js:110:15) ```  Apparently, this line has kicked React into client-mode.  ``` js var node = TestUtils.renderIntoDocument(element); ```  That's not too bad, but I need way to kick React out of client-mode, so I can add it to my teardown method (aka `after`).",
        "human_words": "I'm doing some unit-testing on a module, to be used in an isomorphic app process. So, I write-up `server-side.js` and `client-side.js` for Mocha to consume.  Individually, they each run pretty good - so far.  However, after starting to use TestUtils in `client-side`, `server-side` starts failing on account of:    Apparently, this line has kicked React into client-mode.    That's not too bad, but I need way to kick React out of client-mode, so I can add it to my teardown method (aka `after`).",
        "human_words_regrex": "I'm doing some unit-testing on a module, to be used in an isomorphic app process. So, I write-up `server-side.js` and `client-side.js` for Mocha to consume. Individually, they each run pretty good - so far. However, after starting to use TestUtils in `client-side`, `server-side` starts failing on account of: Apparently, this line has kicked React into client-mode. That's not too bad, but I need way to kick React out of client-mode, so I can add it to my teardown method (aka `after`).",
        "human_words_stopwords_removal_lemmatization": "'m unit-testing module , used isomorphic app process . , write-up ` server-side.js ` ` client-side.js ` mocha consume . individually , run pretty good - far . however , starting use testutils ` client-side ` , ` server-side ` start failing account : apparently , line kicked react client-mode . 's bad , need way kick react client-mode , add teardown method ( aka ` ` ) .",
        "title_stopwords_removal_lemmatization": "teardown testutils method"
    },
    {
        "issue_id": 64935677,
        "title": "Allow marking an array as \"static\"",
        "label": [
            "Type: Feature Request",
            "Component: Core Utilities"
        ],
        "date": "2015-03-28T12:08:20Z",
        "status": "closed",
        "description": "I expected there to be an issue for this already, but couldn't find it. Apologies if this a dupe.\n\nOccasionally it is useful to put a few elements in an array within render, when conditionally building different bits of the view.\nReact will issue a warning whenever an array is used that doesn't have keys - even if the author knows that this array is literal, and therefore doesn't require keys.\n\n``` js\nvar label = \"Label\";\nif (this.props.important) {\n  label = [\"Label\", <Tag text=\"important\" />];\n}\nreturn <div>\n  <h3>{label}</h3>\n  <p>{this.props.body}</p>\n</div>\n```\n\nIn this example, React will warn about lack of keys, even though they're not needed.\n\nOne option would be to extend `React.addons.createFragment` to accept an array, and use the indexes as keys.\n\n``` jsx\nlabel = React.addons.createFragment([\"Label\", <Tag text=\"important\" />]);\n```\n",
        "remove_template_description": "I expected there to be an issue for this already, but couldn't find it. Apologies if this a dupe.  Occasionally it is useful to put a few elements in an array within render, when conditionally building different bits of the view. React will issue a warning whenever an array is used that doesn't have keys - even if the author knows that this array is literal, and therefore doesn't require keys.  ``` js var label = \"Label\"; if (this.props.important) {   label = [\"Label\", <Tag text=\"important\" />]; } return <div>   <h3>{label}</h3>   <p>{this.props.body}</p> </div> ```  In this example, React will warn about lack of keys, even though they're not needed.  One option would be to extend `React.addons.createFragment` to accept an array, and use the indexes as keys.  ``` jsx label = React.addons.createFragment([\"Label\", <Tag text=\"important\" />]); ```",
        "human_words": "I expected there to be an issue for this already, but couldn't find it. Apologies if this a dupe.  Occasionally it is useful to put a few elements in an array within render, when conditionally building different bits of the view. React will issue a warning whenever an array is used that doesn't have keys - even if the author knows that this array is literal, and therefore doesn't require keys.    In this example, React will warn about lack of keys, even though they're not needed.  One option would be to extend `React.addons.createFragment` to accept an array, and use the indexes as keys.  ",
        "human_words_regrex": "I expected there to be an issue for this already, but couldn't find it. Apologies if this a dupe. Occasionally it is useful to put a few elements in an array within render, when conditionally building different bits of the view. React will issue a warning whenever an array is used that doesn't have keys - even if the author knows that this array is literal, and therefore doesn't require keys. In this example, React will warn about lack of keys, even though they're not needed. One option would be to extend `React.addons.createFragment` to accept an array, and use the indexes as keys. ",
        "human_words_stopwords_removal_lemmatization": "expected issue already , could n't find . apology dupe . occasionally useful put element array within render , conditionally building different bit view . react issue warning whenever array used n't key - even author know array literal , therefore n't require key . example , react warn lack key , even though 're needed . one option would extend ` react.addons.createfragment ` accept array , use index key .",
        "title_stopwords_removal_lemmatization": "allow marking array `` static ''"
    },
    {
        "issue_id": 64611390,
        "title": "Add ability to find dom component by prop value in the ReactTestUtils?",
        "label": [
            "Type: Feature Request",
            "Component: Test Utils"
        ],
        "date": "2015-03-26T19:16:38Z",
        "status": "closed",
        "description": "In order to make selectors more durable within selenium tests, I will generally add in `data-qa` attributes to any element that needs to be selected.  Developers are free to change classes and IDs as needed but know not to touch or move when refactoring `data-qa` attributes.  It would be nice to allow my unit tests to use the same `data-qa` attribute to select elements as my integration/selenium tests use.  The issue is that currently there is no way to do that with the ReactTestUtils.\n\nI have a test helper object that contains a bunch of things to help with testing my react code.  Two of the methods are as follows:\n\n``` javascript\nscryRenderedDOMComponentsWithProp: function scryRenderedDOMComponentsWithProp(root, propName, propValue) {\n    return reactTestUtils.findAllInRenderedTree(root, function(inst) {\n        var instancePropValue = inst.props[propName];\n\n        return (\n            reactTestUtils.isDOMComponent(inst)\n            && instancePropValue\n            && (' ' + instancePropValue + ' ').indexOf(' ' + propValue + ' ') !== -1\n        );\n    });\n},\n\nfindRenderedDOMComponentWithProp: function findRenderedDOMComponentWithProp(root, propName, propValue) {\n    var all = this.scryRenderedDOMComponentsWithProp(root, propName, propValue);\n\n    if (all.length !== 1) {\n      throw new Error('Did not find exactly one match (found: ' + all.length + ') for prop  ' + propName + ' : ' + propValue);\n    }\n\n    return all[0];\n}\n```\n\nThis seems like a useful feature to me and was wondering if there is enough interest into this type of functionality to create a PR to add it directly into the ReactTestUtils?\n",
        "remove_template_description": "In order to make selectors more durable within selenium tests, I will generally add in `data-qa` attributes to any element that needs to be selected.  Developers are free to change classes and IDs as needed but know not to touch or move when refactoring `data-qa` attributes.  It would be nice to allow my unit tests to use the same `data-qa` attribute to select elements as my integration/selenium tests use.  The issue is that currently there is no way to do that with the ReactTestUtils.  I have a test helper object that contains a bunch of things to help with testing my react code.  Two of the methods are as follows:  ``` javascript scryRenderedDOMComponentsWithProp: function scryRenderedDOMComponentsWithProp(root, propName, propValue) {     return reactTestUtils.findAllInRenderedTree(root, function(inst) {         var instancePropValue = inst.props[propName];          return (             reactTestUtils.isDOMComponent(inst)             && instancePropValue             && (' ' + instancePropValue + ' ').indexOf(' ' + propValue + ' ') !== -1         );     }); },  findRenderedDOMComponentWithProp: function findRenderedDOMComponentWithProp(root, propName, propValue) {     var all = this.scryRenderedDOMComponentsWithProp(root, propName, propValue);      if (all.length !== 1) {       throw new Error('Did not find exactly one match (found: ' + all.length + ') for prop  ' + propName + ' : ' + propValue);     }      return all[0]; } ```  This seems like a useful feature to me and was wondering if there is enough interest into this type of functionality to create a PR to add it directly into the ReactTestUtils?",
        "human_words": "In order to make selectors more durable within selenium tests, I will generally add in `data-qa` attributes to any element that needs to be selected.  Developers are free to change classes and IDs as needed but know not to touch or move when refactoring `data-qa` attributes.  It would be nice to allow my unit tests to use the same `data-qa` attribute to select elements as my integration/selenium tests use.  The issue is that currently there is no way to do that with the ReactTestUtils.  I have a test helper object that contains a bunch of things to help with testing my react code.  Two of the methods are as follows:    This seems like a useful feature to me and was wondering if there is enough interest into this type of functionality to create a PR to add it directly into the ReactTestUtils?",
        "human_words_regrex": "In order to make selectors more durable within selenium tests, I will generally add in `data-qa` attributes to any element that needs to be selected. Developers are free to change classes and IDs as needed but know not to touch or move when refactoring `data-qa` attributes. It would be nice to allow my unit tests to use the same `data-qa` attribute to select elements as my integration/selenium tests use. The issue is that currently there is no way to do that with the ReactTestUtils. I have a test helper object that contains a bunch of things to help with testing my react code. Two of the methods are as follows: This seems like a useful feature to me and was wondering if there is enough interest into this type of functionality to create a PR to add it directly into the ReactTestUtils?",
        "human_words_stopwords_removal_lemmatization": "order make selector durable within selenium test , generally add ` data-qa ` attribute element need selected . developer free change class id needed know touch move refactoring ` data-qa ` attribute . would nice allow unit test use ` data-qa ` attribute select element integration/selenium test use . issue currently way reacttestutils . test helper object contains bunch thing help testing react code . two method follows : seems like useful feature wondering enough interest type functionality create pr add directly reacttestutils ?",
        "title_stopwords_removal_lemmatization": "add ability find dom component prop value reacttestutils ?"
    },
    {
        "issue_id": 59900063,
        "title": "Detect IE8 Compatibility Mode",
        "label": [
            "Difficulty: starter",
            "Type: Feature Request"
        ],
        "date": "2015-03-05T03:31:22Z",
        "status": "closed",
        "description": "If we claim to support IE8, and users are testing their code **locally** in IE8, they might get thrown into compatibility mode by default.  This will cause their webapp to blow up, and they will be confused because IE8 is a supported browser.  For background, check out this thread: https://github.com/facebook/react/issues/3301\n\nUsers can get out of compatibility mode by adding this tag:\n`<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />` \n\nSince the current failure is cryptic, and it's easy to detect when IE8 is in compatibility mode (http://stackoverflow.com/questions/1208837/how-can-i-detect-if-ie8-is-running-in-compatibility-view), we should probably add a warning to give a hint to the user that even though they're using IE8, they're actually in compatibility mode (effectively IE7) and should add the meta tag or use one of the other various workarounds.\n",
        "remove_template_description": "If we claim to support IE8, and users are testing their code **locally** in IE8, they might get thrown into compatibility mode by default.  This will cause their webapp to blow up, and they will be confused because IE8 is a supported browser.  For background, check out this thread: https://github.com/facebook/react/issues/3301  Users can get out of compatibility mode by adding this tag: `<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />`   Since the current failure is cryptic, and it's easy to detect when IE8 is in compatibility mode (http://stackoverflow.com/questions/1208837/how-can-i-detect-if-ie8-is-running-in-compatibility-view), we should probably add a warning to give a hint to the user that even though they're using IE8, they're actually in compatibility mode (effectively IE7) and should add the meta tag or use one of the other various workarounds.",
        "human_words": "If we claim to support IE8, and users are testing their code **locally** in IE8, they might get thrown into compatibility mode by default.  This will cause their webapp to blow up, and they will be confused because IE8 is a supported browser.  For background, check out this thread: https://github.com/facebook/react/issues/3301  Users can get out of compatibility mode by adding this tag: `<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />`   Since the current failure is cryptic, and it's easy to detect when IE8 is in compatibility mode (http://stackoverflow.com/questions/1208837/how-can-i-detect-if-ie8-is-running-in-compatibility-view), we should probably add a warning to give a hint to the user that even though they're using IE8, they're actually in compatibility mode (effectively IE7) and should add the meta tag or use one of the other various workarounds.",
        "human_words_regrex": "If we claim to support IE8, and users are testing their code **locally** in IE8, they might get thrown into compatibility mode by default. This will cause their webapp to blow up, and they will be confused because IE8 is a supported browser. For background, check out this thread:  Users can get out of compatibility mode by adding this tag: `` Since the current failure is cryptic, and it's easy to detect when IE8 is in compatibility mode ( we should probably add a warning to give a hint to the user that even though they're using IE8, they're actually in compatibility mode (effectively IE7) and should add the meta tag or use one of the other various workarounds.",
        "human_words_stopwords_removal_lemmatization": "claim support ie8 , user testing code * * locally * * ie8 , might get thrown compatibility mode default . cause webapp blow , confused ie8 supported browser . background , check thread : user get compatibility mode adding tag : `` since current failure cryptic , 's easy detect ie8 compatibility mode ( probably add warning give hint user even though 're using ie8 , 're actually compatibility mode ( effectively ie7 ) add meta tag use one various workarounds .",
        "title_stopwords_removal_lemmatization": "detect ie8 compatibility mode"
    },
    {
        "issue_id": 59603071,
        "title": "Add First Class Support for Immutable-js Records (or maybe Maps) in setState?",
        "label": [
            "Type: Feature Request",
            "Component: Component API"
        ],
        "date": "2015-03-03T06:56:58Z",
        "status": "closed",
        "description": "Seems like this is a common use case for `replaceState` which we would like to deprecate. #3236 \n\nNot quite sure how this would work with Records and mixins since they're fixed type.\n\ncc @leebyron \n",
        "remove_template_description": "Seems like this is a common use case for `replaceState` which we would like to deprecate. #3236   Not quite sure how this would work with Records and mixins since they're fixed type.  cc @leebyron",
        "human_words": "Seems like this is a common use case for `replaceState` which we would like to deprecate. #3236   Not quite sure how this would work with Records and mixins since they're fixed type.  cc @leebyron",
        "human_words_regrex": "Seems like this is a common use case for `replaceState` which we would like to deprecate. #3236 Not quite sure how this would work with Records and mixins since they're fixed type. cc @leebyron",
        "human_words_stopwords_removal_lemmatization": "seems like common use case ` replacestate ` would like deprecate . # 3236 quite sure would work record mixins since 're fixed type . cc @ leebyron",
        "title_stopwords_removal_lemmatization": "add first class support immutable-js record ( maybe map ) setstate ?"
    },
    {
        "issue_id": 59326378,
        "title": "Could we make it less painful to inline ReactElement objects?",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2015-02-28T05:18:40Z",
        "status": "closed",
        "description": "Hi!\n\n@spicyj said I should open an issue here. Disclaimer: I'm trying to do sort of sketchy things, and I know this isn't supported, but I think it would be nice.\n\nI'm writing a library that I want to support react output optionally. To do this, right now I'm trying to inline all my ReactElements, such as\n\n``` javascript\n    return {\n        type: 'hr',\n        key: state.key,\n        _isReactElement: true\n    };\n```\n\ninstead of\n\n``` javascript\n    React.createElement('hr', {\n        key: state.key\n    })\n```\n\nThis is almost completely functional, except for the `_store` validation in react dev mode. This is because right now these literals don't have a `_store` key with `.validated` or `.originalProps`, which are assumed by the validators in React **DEV**. I can work around this, but to do so without duplicating props will have to write a wrapper function to create the element, which is a little unideal and slower (and adds unnecessary keys in non-dev mode).\n\nWould it be reasonable to short circuit some of these checks so that they only happen if _store is actually present on the ReactElement? If so, I'd be happy to submit a pull request (no rush for react 0.13 though).\n\nCurious as to your thoughts. Thanks!\nAria\n",
        "remove_template_description": "Hi!  @spicyj said I should open an issue here. Disclaimer: I'm trying to do sort of sketchy things, and I know this isn't supported, but I think it would be nice.  I'm writing a library that I want to support react output optionally. To do this, right now I'm trying to inline all my ReactElements, such as  ``` javascript     return {         type: 'hr',         key: state.key,         _isReactElement: true     }; ```  instead of  ``` javascript     React.createElement('hr', {         key: state.key     }) ```  This is almost completely functional, except for the `_store` validation in react dev mode. This is because right now these literals don't have a `_store` key with `.validated` or `.originalProps`, which are assumed by the validators in React **DEV**. I can work around this, but to do so without duplicating props will have to write a wrapper function to create the element, which is a little unideal and slower (and adds unnecessary keys in non-dev mode).  Would it be reasonable to short circuit some of these checks so that they only happen if _store is actually present on the ReactElement? If so, I'd be happy to submit a pull request (no rush for react 0.13 though).  Curious as to your thoughts. Thanks! Aria",
        "human_words": "Hi!  @spicyj said I should open an issue here. Disclaimer: I'm trying to do sort of sketchy things, and I know this isn't supported, but I think it would be nice.  I'm writing a library that I want to support react output optionally. To do this, right now I'm trying to inline all my ReactElements, such as    instead of    This is almost completely functional, except for the `_store` validation in react dev mode. This is because right now these literals don't have a `_store` key with `.validated` or `.originalProps`, which are assumed by the validators in React **DEV**. I can work around this, but to do so without duplicating props will have to write a wrapper function to create the element, which is a little unideal and slower (and adds unnecessary keys in non-dev mode).  Would it be reasonable to short circuit some of these checks so that they only happen if _store is actually present on the ReactElement? If so, I'd be happy to submit a pull request (no rush for react 0.13 though).  Curious as to your thoughts. Thanks! Aria",
        "human_words_regrex": "Hi! @spicyj said I should open an issue here. Disclaimer: I'm trying to do sort of sketchy things, and I know this isn't supported, but I think it would be nice. I'm writing a library that I want to support react output optionally. To do this, right now I'm trying to inline all my ReactElements, such as instead of This is almost completely functional, except for the `_store` validation in react dev mode. This is because right now these literals don't have a `_store` key with `.validated` or `.originalProps`, which are assumed by the validators in React **DEV**. I can work around this, but to do so without duplicating props will have to write a wrapper function to create the element, which is a little unideal and slower (and adds unnecessary keys in non-dev mode). Would it be reasonable to short circuit some of these checks so that they only happen if _store is actually present on the ReactElement? If so, I'd be happy to submit a pull request (no rush for react 0.13 though). Curious as to your thoughts. Thanks! Aria",
        "human_words_stopwords_removal_lemmatization": "hi ! @ spicyj said open issue . disclaimer : 'm trying sort sketchy thing , know n't supported , think would nice . 'm writing library want support react output optionally . , right 'm trying inline reactelements , instead almost completely functional , except ` _store ` validation react dev mode . right literal n't ` _store ` key ` .validated ` ` .originalprops ` , assumed validators react * * dev * * . work around , without duplicating prop write wrapper function create element , little unideal slower ( add unnecessary key non-dev mode ) . would reasonable short circuit check happen _store actually present reactelement ? , 'd happy submit pull request ( rush react 0.13 though ) . curious thought . thanks ! aria",
        "title_stopwords_removal_lemmatization": "could make le painful inline reactelement object ?"
    },
    {
        "issue_id": 58332830,
        "title": "Avoid global window",
        "label": [
            "Type: Feature Request",
            "Component: DOM"
        ],
        "date": "2015-02-20T10:21:02Z",
        "status": "closed",
        "description": "Currently React relies on a global `window` (and `document` and `navigator`).\nThis works in a browser and it works in other environments if one sets a global `window`.\nHowever, relying on globals prevents multiple independent React engines from running together.\n\nTesting, for example, benefits strongly from isolated environments. It would be nice if one could run separate tests with `jsdom` without manually cleaning up the `window` every time.\nAnother use case is for programatic behaviour inspection. It's interesting to load multiple windows with `jsdom` and compare the behavior of one's library with different calls. If React is involved, however, this is impossible.\n\nAvoiding relying on globals can be added in a backwards-compatible fashion. If there is a global `window` and `document`, keep the existing behavior. If there isn't, instead of exposing an API, expose a factory taking a `window` and returning an API. For example, see how [jQuery did it](https://github.com/jquery/jquery/blob/master/src/intro.js#L25).\n\nA decision to avoid globals means refactoring existing code base to pass `window` explicitly everywhere, and maintaining that attitude in the future. What is your opinion on such a feature?\n",
        "remove_template_description": "Currently React relies on a global `window` (and `document` and `navigator`). This works in a browser and it works in other environments if one sets a global `window`. However, relying on globals prevents multiple independent React engines from running together.  Testing, for example, benefits strongly from isolated environments. It would be nice if one could run separate tests with `jsdom` without manually cleaning up the `window` every time. Another use case is for programatic behaviour inspection. It's interesting to load multiple windows with `jsdom` and compare the behavior of one's library with different calls. If React is involved, however, this is impossible.  Avoiding relying on globals can be added in a backwards-compatible fashion. If there is a global `window` and `document`, keep the existing behavior. If there isn't, instead of exposing an API, expose a factory taking a `window` and returning an API. For example, see how [jQuery did it](https://github.com/jquery/jquery/blob/master/src/intro.js#L25).  A decision to avoid globals means refactoring existing code base to pass `window` explicitly everywhere, and maintaining that attitude in the future. What is your opinion on such a feature?",
        "human_words": "Currently React relies on a global `window` (and `document` and `navigator`). This works in a browser and it works in other environments if one sets a global `window`. However, relying on globals prevents multiple independent React engines from running together.  Testing, for example, benefits strongly from isolated environments. It would be nice if one could run separate tests with `jsdom` without manually cleaning up the `window` every time. Another use case is for programatic behaviour inspection. It's interesting to load multiple windows with `jsdom` and compare the behavior of one's library with different calls. If React is involved, however, this is impossible.  Avoiding relying on globals can be added in a backwards-compatible fashion. If there is a global `window` and `document`, keep the existing behavior. If there isn't, instead of exposing an API, expose a factory taking a `window` and returning an API. For example, see how [jQuery did it](https://github.com/jquery/jquery/blob/master/src/intro.js#L25).  A decision to avoid globals means refactoring existing code base to pass `window` explicitly everywhere, and maintaining that attitude in the future. What is your opinion on such a feature?",
        "human_words_regrex": "Currently React relies on a global `window` (and `document` and `navigator`). This works in a browser and it works in other environments if one sets a global `window`. However, relying on globals prevents multiple independent React engines from running together. Testing, for example, benefits strongly from isolated environments. It would be nice if one could run separate tests with `jsdom` without manually cleaning up the `window` every time. Another use case is for programatic behaviour inspection. It's interesting to load multiple windows with `jsdom` and compare the behavior of one's library with different calls. If React is involved, however, this is impossible. Avoiding relying on globals can be added in a backwards-compatible fashion. If there is a global `window` and `document`, keep the existing behavior. If there isn't, instead of exposing an API, expose a factory taking a `window` and returning an API. For example, see how . A decision to avoid globals means refactoring existing code base to pass `window` explicitly everywhere, and maintaining that attitude in the future. What is your opinion on such a feature?",
        "human_words_stopwords_removal_lemmatization": "currently react relies global ` window ` ( ` document ` ` navigator ` ) . work browser work environment one set global ` window ` . however , relying globals prevents multiple independent react engine running together . testing , example , benefit strongly isolated environment . would nice one could run separate test ` jsdom ` without manually cleaning ` window ` every time . another use case programatic behaviour inspection . 's interesting load multiple window ` jsdom ` compare behavior one 's library different call . react involved , however , impossible . avoiding relying globals added backwards-compatible fashion . global ` window ` ` document ` , keep existing behavior . n't , instead exposing api , expose factory taking ` window ` returning api . example , see . decision avoid globals mean refactoring existing code base pas ` window ` explicitly everywhere , maintaining attitude future . opinion feature ?",
        "title_stopwords_removal_lemmatization": "avoid global window"
    },
    {
        "issue_id": 56869851,
        "title": "Automatically Object.assign when `styles` receives an Array",
        "label": [
            "Type: Feature Request",
            "Component: DOM"
        ],
        "date": "2015-02-06T21:22:45Z",
        "status": "closed",
        "description": "In React Native, these two styles are automatically composed:\n\n```\n<Text style={[styles.ratingValue, getStyleFromScore(criticsScore)]}>\n```\n\nCurrently, trying a similar technique in React DOM produces this:\n\n```\n<span style=\"0:[object Object];1:[object Object];\">\n```\n\nFollowing the principles of \"Learn Once, Write Everywhere\", the style prop should behave similarly across implementations.\n",
        "remove_template_description": "In React Native, these two styles are automatically composed:  ``` <Text style={[styles.ratingValue, getStyleFromScore(criticsScore)]}> ```  Currently, trying a similar technique in React DOM produces this:  ``` <span style=\"0:[object Object];1:[object Object];\"> ```  Following the principles of \"Learn Once, Write Everywhere\", the style prop should behave similarly across implementations.",
        "human_words": "In React Native, these two styles are automatically composed:    Currently, trying a similar technique in React DOM produces this:    Following the principles of \"Learn Once, Write Everywhere\", the style prop should behave similarly across implementations.",
        "human_words_regrex": "In React Native, these two styles are automatically composed: Currently, trying a similar technique in React DOM produces this: Following the principles of \"Learn Once, Write Everywhere\", the style prop should behave similarly across implementations.",
        "human_words_stopwords_removal_lemmatization": "react native , two style automatically composed : currently , trying similar technique react dom produce : following principle `` learn , write everywhere '' , style prop behave similarly across implementation .",
        "title_stopwords_removal_lemmatization": "automatically object.assign ` style ` receives array"
    },
    {
        "issue_id": 56711577,
        "title": "Make autofocus show up in rendered markup",
        "label": [
            "Type: Feature Request",
            "Component: DOM"
        ],
        "date": "2015-02-05T18:47:05Z",
        "status": "closed",
        "description": "We currently don't because we handle this specially during runtime, but for server-rendered content it would be good to make this actually work.\n\ncc @syranide \n",
        "remove_template_description": "We currently don't because we handle this specially during runtime, but for server-rendered content it would be good to make this actually work.  cc @syranide",
        "human_words": "We currently don't because we handle this specially during runtime, but for server-rendered content it would be good to make this actually work.  cc @syranide",
        "human_words_regrex": "We currently don't because we handle this specially during runtime, but for server-rendered content it would be good to make this actually work. cc @syranide",
        "human_words_stopwords_removal_lemmatization": "currently n't handle specially runtime , server-rendered content would good make actually work . cc @ syranide",
        "title_stopwords_removal_lemmatization": "make autofocus show rendered markup"
    },
    {
        "issue_id": 56681651,
        "title": "Support Map interface for props",
        "label": [
            "Type: Feature Request",
            "Component: Component API",
            "Resolution: Stale"
        ],
        "date": "2015-02-05T15:07:24Z",
        "status": "closed",
        "description": "High performance Map implementations are starting to appear in modern web browsers. By supporting the Map interface users can now instead supply props as an Immutable.js or ClojureScript Map instance. This change would not even require providing an equality hook for the first pass as users can memoize props themselves.\n\nFor users embracing immutable data this is a huge change, it means that styles can be defined in code, overridden and shared efficiently. React DOM elements with memoized immutable props can be skipped over, etc.\n",
        "remove_template_description": "High performance Map implementations are starting to appear in modern web browsers. By supporting the Map interface users can now instead supply props as an Immutable.js or ClojureScript Map instance. This change would not even require providing an equality hook for the first pass as users can memoize props themselves.  For users embracing immutable data this is a huge change, it means that styles can be defined in code, overridden and shared efficiently. React DOM elements with memoized immutable props can be skipped over, etc.",
        "human_words": "High performance Map implementations are starting to appear in modern web browsers. By supporting the Map interface users can now instead supply props as an Immutable.js or ClojureScript Map instance. This change would not even require providing an equality hook for the first pass as users can memoize props themselves.  For users embracing immutable data this is a huge change, it means that styles can be defined in code, overridden and shared efficiently. React DOM elements with memoized immutable props can be skipped over, etc.",
        "human_words_regrex": "High performance Map implementations are starting to appear in modern web browsers. By supporting the Map interface users can now instead supply props as an Immutable.js or ClojureScript Map instance. This change would not even require providing an equality hook for the first pass as users can memoize props themselves. For users embracing immutable data this is a huge change, it means that styles can be defined in code, overridden and shared efficiently. React DOM elements with memoized immutable props can be skipped over, etc.",
        "human_words_stopwords_removal_lemmatization": "high performance map implementation starting appear modern web browser . supporting map interface user instead supply prop immutable.js clojurescript map instance . change would even require providing equality hook first pas user memoize prop . user embracing immutable data huge change , mean style defined code , overridden shared efficiently . react dom element memoized immutable prop skipped , etc .",
        "title_stopwords_removal_lemmatization": "support map interface prop"
    },
    {
        "issue_id": 56174813,
        "title": "Make <audio /> and <video /> controllable",
        "label": [
            "Type: Feature Request",
            "Component: DOM"
        ],
        "date": "2015-02-01T19:35:38Z",
        "status": "closed",
        "description": "`audio.muted` and `video.muted` can be affected by user interaction when `controls` is enabled. So it makes sense that `muted` should be controlled and an uncontrolled `defaultMuted` should be introduced.\n\n`ReactDOMAudio` and `ReactDOMVideo` needs to be introduced for this.\n\n@zpao Sounds good? Could be a good first bug...\n",
        "remove_template_description": "`audio.muted` and `video.muted` can be affected by user interaction when `controls` is enabled. So it makes sense that `muted` should be controlled and an uncontrolled `defaultMuted` should be introduced.  `ReactDOMAudio` and `ReactDOMVideo` needs to be introduced for this.  @zpao Sounds good? Could be a good first bug...",
        "human_words": "`audio.muted` and `video.muted` can be affected by user interaction when `controls` is enabled. So it makes sense that `muted` should be controlled and an uncontrolled `defaultMuted` should be introduced.  `ReactDOMAudio` and `ReactDOMVideo` needs to be introduced for this.  @zpao Sounds good? Could be a good first bug...",
        "human_words_regrex": "`audio.muted` and `video.muted` can be affected by user interaction when `controls` is enabled. So it makes sense that `muted` should be controlled and an uncontrolled `defaultMuted` should be introduced. `ReactDOMAudio` and `ReactDOMVideo` needs to be introduced for this. @zpao Sounds good? Could be a good first bug...",
        "human_words_stopwords_removal_lemmatization": "` audio.muted ` ` video.muted ` affected user interaction ` control ` enabled . make sense ` muted ` controlled uncontrolled ` defaultmuted ` introduced . ` reactdomaudio ` ` reactdomvideo ` need introduced . @ zpao sound good ? could good first bug ...",
        "title_stopwords_removal_lemmatization": "make < audio / > < video / > controllable"
    },
    {
        "issue_id": 55642686,
        "title": "Can we have React.Children.filter?",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2015-01-27T16:48:49Z",
        "status": "closed",
        "description": "My use case: wrapping all **non-empty** children into divs.\n\n``` js\n  render() {\n    return (\n      <div style={rootStyle} onWheel={this.handleWheel}>\n        {Children.map(this.props.children, this.wrapChild)}\n      </div>\n    );\n  },\n\n  wrapChild(child, index) {\n    if (!child) { // I know this is probably wrong kind of comparison; don't care\n      return (\n        <div style={this.getChildStyle(index)}>\n          {child}\n        </div>\n      );\n    }\n  },\n```\n\nThis is all nice but I also need to know **how many valid children I have wrapped**.\n`Children.count` will return the number of children including the \u201cempty\u201d children. I want to strip them out.\n\nCan we have `Children.filter`?\n",
        "remove_template_description": "My use case: wrapping all **non-empty** children into divs.  ``` js   render() {     return (       <div style={rootStyle} onWheel={this.handleWheel}>         {Children.map(this.props.children, this.wrapChild)}       </div>     );   },    wrapChild(child, index) {     if (!child) { // I know this is probably wrong kind of comparison; don't care       return (         <div style={this.getChildStyle(index)}>           {child}         </div>       );     }   }, ```  This is all nice but I also need to know **how many valid children I have wrapped**. `Children.count` will return the number of children including the \u201cempty\u201d children. I want to strip them out.  Can we have `Children.filter`?",
        "human_words": "My use case: wrapping all **non-empty** children into divs.    This is all nice but I also need to know **how many valid children I have wrapped**. `Children.count` will return the number of children including the \u201cempty\u201d children. I want to strip them out.  Can we have `Children.filter`?",
        "human_words_regrex": "My use case: wrapping all **non-empty** children into divs. This is all nice but I also need to know **how many valid children I have wrapped**. `Children.count` will return the number of children including the \u201cempty\u201d children. I want to strip them out. Can we have `Children.filter`?",
        "human_words_stopwords_removal_lemmatization": "use case : wrapping * * non-empty * * child divs . nice also need know * * many valid child wrapped * * . ` children.count ` return number child including \u201c empty \u201d child . want strip . ` children.filter ` ?",
        "title_stopwords_removal_lemmatization": "react.children.filter ?"
    },
    {
        "issue_id": 51318750,
        "title": "Normalize event.dataTransfer for drag and drop events",
        "label": [
            "Type: Feature Request",
            "Component: DOM"
        ],
        "date": "2014-12-08T16:08:01Z",
        "status": "closed",
        "description": "I'm currently implementing drag-and-drop in a React application where different kinds of data is dragged and dropped. This means I want to check for certain types on the event.dataTransfer object to see if drop should be enabled or not. Basically it looks like this:\n\n``` javascript\nonDragOver: function (event) {\n    if (event.dataTransfer.types.indexOf('application/x-custom-type') > -1) {\n        event.preventDefault();\n    }\n}\n```\n\nThis works fine in Chrome, but less so in Firefox. It turns out that in Firefox the type of DataTransfer.types is DOMStringList, which does not have an `indexOf` method. According to the latest drafts of the HTML5 specification ([W3C](http://www.w3.org/html/wg/drafts/html/master/editing.html#the-datatransfer-interface), [WHATWG](https://html.spec.whatwg.org/multipage/interaction.html#dom-datatransfer-types)), returning an array like Webkit does is correct. Obviously, the fix is easy on my side (check which one of `indexOf` and `contains` is available and use that one), but I thought it might be useful to fix this in React instead, since it is at least related to the event system.\n\nI could probably take a stab at this, but I wanted to gauge the interest. Perhaps the DataTransfer object is deemed to be out of scope for the synthetic event handler.\n",
        "remove_template_description": "I'm currently implementing drag-and-drop in a React application where different kinds of data is dragged and dropped. This means I want to check for certain types on the event.dataTransfer object to see if drop should be enabled or not. Basically it looks like this:  ``` javascript onDragOver: function (event) {     if (event.dataTransfer.types.indexOf('application/x-custom-type') > -1) {         event.preventDefault();     } } ```  This works fine in Chrome, but less so in Firefox. It turns out that in Firefox the type of DataTransfer.types is DOMStringList, which does not have an `indexOf` method. According to the latest drafts of the HTML5 specification ([W3C](http://www.w3.org/html/wg/drafts/html/master/editing.html#the-datatransfer-interface), [WHATWG](https://html.spec.whatwg.org/multipage/interaction.html#dom-datatransfer-types)), returning an array like Webkit does is correct. Obviously, the fix is easy on my side (check which one of `indexOf` and `contains` is available and use that one), but I thought it might be useful to fix this in React instead, since it is at least related to the event system.  I could probably take a stab at this, but I wanted to gauge the interest. Perhaps the DataTransfer object is deemed to be out of scope for the synthetic event handler.",
        "human_words": "I'm currently implementing drag-and-drop in a React application where different kinds of data is dragged and dropped. This means I want to check for certain types on the event.dataTransfer object to see if drop should be enabled or not. Basically it looks like this:    This works fine in Chrome, but less so in Firefox. It turns out that in Firefox the type of DataTransfer.types is DOMStringList, which does not have an `indexOf` method. According to the latest drafts of the HTML5 specification ([W3C](http://www.w3.org/html/wg/drafts/html/master/editing.html#the-datatransfer-interface), [WHATWG](https://html.spec.whatwg.org/multipage/interaction.html#dom-datatransfer-types)), returning an array like Webkit does is correct. Obviously, the fix is easy on my side (check which one of `indexOf` and `contains` is available and use that one), but I thought it might be useful to fix this in React instead, since it is at least related to the event system.  I could probably take a stab at this, but I wanted to gauge the interest. Perhaps the DataTransfer object is deemed to be out of scope for the synthetic event handler.",
        "human_words_regrex": "I'm currently implementing drag-and-drop in a React application where different kinds of data is dragged and dropped. This means I want to check for certain types on the event.dataTransfer object to see if drop should be enabled or not. Basically it looks like this: This works fine in Chrome, but less so in Firefox. It turns out that in Firefox the type of DataTransfer.types is DOMStringList, which does not have an `indexOf` method. According to the latest drafts of the HTML5 specification (, ), returning an array like Webkit does is correct. Obviously, the fix is easy on my side (check which one of `indexOf` and `contains` is available and use that one), but I thought it might be useful to fix this in React instead, since it is at least related to the event system. I could probably take a stab at this, but I wanted to gauge the interest. Perhaps the DataTransfer object is deemed to be out of scope for the synthetic event handler.",
        "human_words_stopwords_removal_lemmatization": "'m currently implementing drag-and-drop react application different kind data dragged dropped . mean want check certain type event.datatransfer object see drop enabled . basically look like : work fine chrome , le firefox . turn firefox type datatransfer.types domstringlist , ` indexof ` method . according latest draft html5 specification ( , ) , returning array like webkit correct . obviously , fix easy side ( check one ` indexof ` ` contains ` available use one ) , thought might useful fix react instead , since least related event system . could probably take stab , wanted gauge interest . perhaps datatransfer object deemed scope synthetic event handler .",
        "title_stopwords_removal_lemmatization": "normalize event.datatransfer drag drop event"
    },
    {
        "issue_id": 51164732,
        "title": "Changing shouldComponentUpdate SpecPolicy",
        "label": [
            "Type: Feature Request",
            "Component: Core Utilities"
        ],
        "date": "2014-12-06T01:12:04Z",
        "status": "closed",
        "description": "I wanted to propose changing `shouldComponentUpdate` from a `DEFINE_ONCE` to a spec that might be termed `DEFINE_MANY_ALL`. \n\nThe rationale here is that sometimes you may know that it's more efficient to skip the `shouldComponentUpdate` for some reason in a component, or that a mixin may be able to define whether it should be able to skip updating based on it's own knowledge of props/state/context, but that might not hold true when combined with other components of an app.\n\nSo my thought is `shouldComponentUpdate` should be changed to a `DEFINE_MANY`, where `ALL` of the return values must return false for the update to skip. If any return true, it will have the same behavior as the default and update.\n",
        "remove_template_description": "I wanted to propose changing `shouldComponentUpdate` from a `DEFINE_ONCE` to a spec that might be termed `DEFINE_MANY_ALL`.   The rationale here is that sometimes you may know that it's more efficient to skip the `shouldComponentUpdate` for some reason in a component, or that a mixin may be able to define whether it should be able to skip updating based on it's own knowledge of props/state/context, but that might not hold true when combined with other components of an app.  So my thought is `shouldComponentUpdate` should be changed to a `DEFINE_MANY`, where `ALL` of the return values must return false for the update to skip. If any return true, it will have the same behavior as the default and update.",
        "human_words": "I wanted to propose changing `shouldComponentUpdate` from a `DEFINE_ONCE` to a spec that might be termed `DEFINE_MANY_ALL`.   The rationale here is that sometimes you may know that it's more efficient to skip the `shouldComponentUpdate` for some reason in a component, or that a mixin may be able to define whether it should be able to skip updating based on it's own knowledge of props/state/context, but that might not hold true when combined with other components of an app.  So my thought is `shouldComponentUpdate` should be changed to a `DEFINE_MANY`, where `ALL` of the return values must return false for the update to skip. If any return true, it will have the same behavior as the default and update.",
        "human_words_regrex": "I wanted to propose changing `shouldComponentUpdate` from a `DEFINE_ONCE` to a spec that might be termed `DEFINE_MANY_ALL`. The rationale here is that sometimes you may know that it's more efficient to skip the `shouldComponentUpdate` for some reason in a component, or that a mixin may be able to define whether it should be able to skip updating based on it's own knowledge of props/state/context, but that might not hold true when combined with other components of an app. So my thought is `shouldComponentUpdate` should be changed to a `DEFINE_MANY`, where `ALL` of the return values must return false for the update to skip. If any return true, it will have the same behavior as the default and update.",
        "human_words_stopwords_removal_lemmatization": "wanted propose changing ` shouldcomponentupdate ` ` define_once ` spec might termed ` define_many_all ` . rationale sometimes may know 's efficient skip ` shouldcomponentupdate ` reason component , mixin may able define whether able skip updating based 's knowledge props/state/context , might hold true combined component app . thought ` shouldcomponentupdate ` changed ` define_many ` , ` ` return value must return false update skip . return true , behavior default update .",
        "title_stopwords_removal_lemmatization": "changing shouldcomponentupdate specpolicy"
    },
    {
        "issue_id": 50654808,
        "title": "Make setState return a promise",
        "label": [
            "Type: Feature Request",
            "Component: Core Utilities"
        ],
        "date": "2014-12-02T14:12:11Z",
        "status": "closed",
        "description": "_setState()_ currently accepts an optional second argument for callback and returns _undefined_.\n\nThis results in a callback hell for a very stateful component. Having it return a promise would make it much more managable.\n\nIt is somewhat of a convention in JS world to have API symmetric - if a method accepts a callback, it returns a promise. if it returns a promise, it can accept a callback.\n\nIn my case, I have an editable table. If user presses enter, he is moved to the next row (call setState). If the user is on a last row, I'd like to create a new row (call setState) and focus on this new row (call setState). Currently the only way is to achieve this is to have a nested callback hell.\n",
        "remove_template_description": "_setState()_ currently accepts an optional second argument for callback and returns _undefined_.  This results in a callback hell for a very stateful component. Having it return a promise would make it much more managable.  It is somewhat of a convention in JS world to have API symmetric - if a method accepts a callback, it returns a promise. if it returns a promise, it can accept a callback.  In my case, I have an editable table. If user presses enter, he is moved to the next row (call setState). If the user is on a last row, I'd like to create a new row (call setState) and focus on this new row (call setState). Currently the only way is to achieve this is to have a nested callback hell.",
        "human_words": "_setState()_ currently accepts an optional second argument for callback and returns _undefined_.  This results in a callback hell for a very stateful component. Having it return a promise would make it much more managable.  It is somewhat of a convention in JS world to have API symmetric - if a method accepts a callback, it returns a promise. if it returns a promise, it can accept a callback.  In my case, I have an editable table. If user presses enter, he is moved to the next row (call setState). If the user is on a last row, I'd like to create a new row (call setState) and focus on this new row (call setState). Currently the only way is to achieve this is to have a nested callback hell.",
        "human_words_regrex": "_setState()_ currently accepts an optional second argument for callback and returns _undefined_. This results in a callback hell for a very stateful component. Having it return a promise would make it much more managable. It is somewhat of a convention in JS world to have API symmetric - if a method accepts a callback, it returns a promise. if it returns a promise, it can accept a callback. In my case, I have an editable table. If user presses enter, he is moved to the next row (call setState). If the user is on a last row, I'd like to create a new row (call setState) and focus on this new row (call setState). Currently the only way is to achieve this is to have a nested callback hell.",
        "human_words_stopwords_removal_lemmatization": "_setstate ( ) _ currently accepts optional second argument callback return _undefined_ . result callback hell stateful component . return promise would make much managable . somewhat convention j world api symmetric - method accepts callback , return promise . return promise , accept callback . case , editable table . user press enter , moved next row ( call setstate ) . user last row , 'd like create new row ( call setstate ) focus new row ( call setstate ) . currently way achieve nested callback hell .",
        "title_stopwords_removal_lemmatization": "make setstate return promise"
    },
    {
        "issue_id": 50065657,
        "title": "Idea/Request: Add global 3rd party extension point to the React object",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2014-11-25T18:25:58Z",
        "status": "closed",
        "description": "tl/dr: Add an empty bare object called 'x' as a new member of the React object so that 3rd party React tools have a global extension point.\n\nI have a couple of internal tools I use with React that I would like to open source.  Both tools use a singleton object that is referenced and/or modified by components.\n\nI know I could create the object in the root component and pass it down as a prop but the child components may modify the object and that violates the idea of props being read-only.  It also means that if another person open sources a component which uses either of my tools that the user of the component must create that root object in their app and then wire it up down the component tree.\n\nTo keep things clean I would love to have a 3rd party extension space hanging off the React object that I could attach my tool's \"globals\" to so that all the components would have access to it given that they all share the same React global.  My suggestion is just to name it \"x\" and make it a bare object.  The documentation would encourage users to then add their own namespace to the object.\n\nHere are is very simple example that adds a 3rd party global event bus to a blogging app using EventEmitter which could be used both on the server and on the client via Browserify.\n\nIn app.js (the root component):\n\n```\nrequire('react-x-event');\n\nReact.x.event.bus.on('createPost', ...)\n```\n\nIn react-x-event.js\n\n```\nvar events = require('events');\nReact.x.event = {\n  bus: new events.EventEmitter(),\n  handle: function (e, event, data) {\n    e.preventDefault();\n    React.x.event.bus.emit(event, data)\n  }\n}\n```\n\nIn new-post.js (a component view shown at some point by a sub-component of app.js)\n\n```\ncreatePost: function(e) {\n  React.x.event.handle(e, 'createPost', ...)\n}\n\nrender: function () {\n  return <form>\n    ...\n   <button onClick={this.createPost}>Create</button>\n  </form>;\n}\n```\n\nWithout getting lost in the weeds arguing if a global event bus is a good idea for React you can see in this example that I didn't need to wire up the component tree with the bus to allow the sub-component to send a message.  \n\nThere is nothing from stopping me or anyone else from just globally patching the React object to add the x member but I think it would be better to have it \"blessed\" and added to the React code so that there are no conflicts in the future over that member name.  I also think having a common name like 'x' will allow 3rd party module names to announce how they work, eg require('react-x-event').\n",
        "remove_template_description": "tl/dr: Add an empty bare object called 'x' as a new member of the React object so that 3rd party React tools have a global extension point.  I have a couple of internal tools I use with React that I would like to open source.  Both tools use a singleton object that is referenced and/or modified by components.  I know I could create the object in the root component and pass it down as a prop but the child components may modify the object and that violates the idea of props being read-only.  It also means that if another person open sources a component which uses either of my tools that the user of the component must create that root object in their app and then wire it up down the component tree.  To keep things clean I would love to have a 3rd party extension space hanging off the React object that I could attach my tool's \"globals\" to so that all the components would have access to it given that they all share the same React global.  My suggestion is just to name it \"x\" and make it a bare object.  The documentation would encourage users to then add their own namespace to the object.  Here are is very simple example that adds a 3rd party global event bus to a blogging app using EventEmitter which could be used both on the server and on the client via Browserify.  In app.js (the root component):  ``` require('react-x-event');  React.x.event.bus.on('createPost', ...) ```  In react-x-event.js  ``` var events = require('events'); React.x.event = {   bus: new events.EventEmitter(),   handle: function (e, event, data) {     e.preventDefault();     React.x.event.bus.emit(event, data)   } } ```  In new-post.js (a component view shown at some point by a sub-component of app.js)  ``` createPost: function(e) {   React.x.event.handle(e, 'createPost', ...) }  render: function () {   return <form>     ...    <button onClick={this.createPost}>Create</button>   </form>; } ```  Without getting lost in the weeds arguing if a global event bus is a good idea for React you can see in this example that I didn't need to wire up the component tree with the bus to allow the sub-component to send a message.    There is nothing from stopping me or anyone else from just globally patching the React object to add the x member but I think it would be better to have it \"blessed\" and added to the React code so that there are no conflicts in the future over that member name.  I also think having a common name like 'x' will allow 3rd party module names to announce how they work, eg require('react-x-event').",
        "human_words": "tl/dr: Add an empty bare object called 'x' as a new member of the React object so that 3rd party React tools have a global extension point.  I have a couple of internal tools I use with React that I would like to open source.  Both tools use a singleton object that is referenced and/or modified by components.  I know I could create the object in the root component and pass it down as a prop but the child components may modify the object and that violates the idea of props being read-only.  It also means that if another person open sources a component which uses either of my tools that the user of the component must create that root object in their app and then wire it up down the component tree.  To keep things clean I would love to have a 3rd party extension space hanging off the React object that I could attach my tool's \"globals\" to so that all the components would have access to it given that they all share the same React global.  My suggestion is just to name it \"x\" and make it a bare object.  The documentation would encourage users to then add their own namespace to the object.  Here are is very simple example that adds a 3rd party global event bus to a blogging app using EventEmitter which could be used both on the server and on the client via Browserify.  In app.js (the root component):    In react-x-event.js    In new-post.js (a component view shown at some point by a sub-component of app.js)    Without getting lost in the weeds arguing if a global event bus is a good idea for React you can see in this example that I didn't need to wire up the component tree with the bus to allow the sub-component to send a message.    There is nothing from stopping me or anyone else from just globally patching the React object to add the x member but I think it would be better to have it \"blessed\" and added to the React code so that there are no conflicts in the future over that member name.  I also think having a common name like 'x' will allow 3rd party module names to announce how they work, eg require('react-x-event').",
        "human_words_regrex": "tl/dr: Add an empty bare object called 'x' as a new member of the React object so that 3rd party React tools have a global extension point. I have a couple of internal tools I use with React that I would like to open source. Both tools use a singleton object that is referenced and/or modified by components. I know I could create the object in the root component and pass it down as a prop but the child components may modify the object and that violates the idea of props being read-only. It also means that if another person open sources a component which uses either of my tools that the user of the component must create that root object in their app and then wire it up down the component tree. To keep things clean I would love to have a 3rd party extension space hanging off the React object that I could attach my tool's \"globals\" to so that all the components would have access to it given that they all share the same React global. My suggestion is just to name it \"x\" and make it a bare object. The documentation would encourage users to then add their own namespace to the object. Here are is very simple example that adds a 3rd party global event bus to a blogging app using EventEmitter which could be used both on the server and on the client via Browserify. In app.js (the root component): In react-x-event.js In new-post.js (a component view shown at some point by a sub-component of app.js) Without getting lost in the weeds arguing if a global event bus is a good idea for React you can see in this example that I didn't need to wire up the component tree with the bus to allow the sub-component to send a message. There is nothing from stopping me or anyone else from just globally patching the React object to add the x member but I think it would be better to have it \"blessed\" and added to the React code so that there are no conflicts in the future over that member name. I also think having a common name like 'x' will allow 3rd party module names to announce how they work, eg require('react-x-event').",
        "human_words_stopwords_removal_lemmatization": "tl/dr : add empty bare object called ' x ' new member react object 3rd party react tool global extension point . couple internal tool use react would like open source . tool use singleton object referenced and/or modified component . know could create object root component pas prop child component may modify object violates idea prop read-only . also mean another person open source component us either tool user component must create root object app wire component tree . keep thing clean would love 3rd party extension space hanging react object could attach tool 's `` globals '' component would access given share react global . suggestion name `` x '' make bare object . documentation would encourage user add namespace object . simple example add 3rd party global event bus blogging app using eventemitter could used server client via browserify . app.js ( root component ) : react-x-event.js new-post.js ( component view shown point sub-component app.js ) without getting lost weed arguing global event bus good idea react see example n't need wire component tree bus allow sub-component send message . nothing stopping anyone else globally patching react object add x member think would better `` blessed '' added react code conflict future member name . also think common name like ' x ' allow 3rd party module name announce work , eg require ( 'react-x-event ' ) .",
        "title_stopwords_removal_lemmatization": "idea/request : add global 3rd party extension point react object"
    },
    {
        "issue_id": 49476435,
        "title": "replaceState(null) doesn't reset state",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2014-11-20T01:05:50Z",
        "status": "closed",
        "description": "Since components start with null state, it would make sense that you could reset back to a null state.  Right now the best you can do is reset back to an empty object.\n\nhttp://jsfiddle.net/wqpzmg7b/1/\n\nIt's a minor issue but I think it deserves documenting if not changed.\n",
        "remove_template_description": "Since components start with null state, it would make sense that you could reset back to a null state.  Right now the best you can do is reset back to an empty object.  http://jsfiddle.net/wqpzmg7b/1/  It's a minor issue but I think it deserves documenting if not changed.",
        "human_words": "Since components start with null state, it would make sense that you could reset back to a null state.  Right now the best you can do is reset back to an empty object.  http://jsfiddle.net/wqpzmg7b/1/  It's a minor issue but I think it deserves documenting if not changed.",
        "human_words_regrex": "Since components start with null state, it would make sense that you could reset back to a null state. Right now the best you can do is reset back to an empty object.  It's a minor issue but I think it deserves documenting if not changed.",
        "human_words_stopwords_removal_lemmatization": "since component start null state , would make sense could reset back null state . right best reset back empty object . 's minor issue think deserves documenting changed .",
        "title_stopwords_removal_lemmatization": "replacestate ( null ) n't reset state"
    },
    {
        "issue_id": 49449548,
        "title": "Extend nested default props instead of overwriting",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2014-11-19T20:33:50Z",
        "status": "closed",
        "description": "It's very convenient to have props in a nested structure. However...\n\nLet's assume I have some default props:\n\n```\ngetDefaultProps: function() {\n    return {\n        aaa: true,\n        bbb: true,\n        ccc: {\n            first: false,\n            second: false,\n            third: false\n        }\n    };\n}\n```\n\nNow, if I initialize the component giving it these props:\n\n```\n{\n    ccc: {\n        first: true\n    }\n}\n```\n\n...the component won't get ccc.second or ccc.third at all. The preferred result would of course be:\n\n```\n{\n    aaa: true,\n    bbb: true,\n    ccc: {\n        first: true,\n        second: false,\n        third: false\n    }\n}\n```\n\nOr perhaps make the behaviour selectable by adding a PropTypes option, like:\n\n```\n.isRequired.useDefault\n```\n",
        "remove_template_description": "It's very convenient to have props in a nested structure. However...  Let's assume I have some default props:  ``` getDefaultProps: function() {     return {         aaa: true,         bbb: true,         ccc: {             first: false,             second: false,             third: false         }     }; } ```  Now, if I initialize the component giving it these props:  ``` {     ccc: {         first: true     } } ```  ...the component won't get ccc.second or ccc.third at all. The preferred result would of course be:  ``` {     aaa: true,     bbb: true,     ccc: {         first: true,         second: false,         third: false     } } ```  Or perhaps make the behaviour selectable by adding a PropTypes option, like:  ``` .isRequired.useDefault ```",
        "human_words": "It's very convenient to have props in a nested structure. However...  Let's assume I have some default props:    Now, if I initialize the component giving it these props:    ...the component won't get ccc.second or ccc.third at all. The preferred result would of course be:    Or perhaps make the behaviour selectable by adding a PropTypes option, like:  ",
        "human_words_regrex": "It's very convenient to have props in a nested structure. However... Let's assume I have some default props: Now, if I initialize the component giving it these props: ...the component won't get ccc.second or ccc.third at all. The preferred result would of course be: Or perhaps make the behaviour selectable by adding a PropTypes option, like: ",
        "human_words_stopwords_removal_lemmatization": "'s convenient prop nested structure . however ... let 's assume default prop : , initialize component giving prop : ... component wo n't get ccc.second ccc.third . preferred result would course : perhaps make behaviour selectable adding proptypes option , like :",
        "title_stopwords_removal_lemmatization": "extend nested default prop instead overwriting"
    },
    {
        "issue_id": 49147612,
        "title": "Provide a way to specify what parts of react server markup can be reused on client",
        "label": [
            "Type: Feature Request",
            "Component: DOM",
            "Component: Server Rendering",
            "Resolution: Stale"
        ],
        "date": "2014-11-17T21:27:55Z",
        "status": "closed",
        "description": "It would be great to be able to have a custom checksum validator that can ignore certain branches of the DOM-tree when attempting to reuse markup.\n\nThe use case is for rendering static components. For static components that only need to be rendered once, we can just do the rendering on the server, and not have to render again on the client. Currently we have to pass down both the react markup AND the props used to generate the static markup. However, it is a waste to send those props down, if this component doesn't need to be rendered client-side.\n\nOne of the major performance concerns for using React is that apps not only have to send down markup but props as well, usually duplicating the data sent down to the client. \n\nBeing able to specify certain components as not needing a client side re-render, thus skipping check-sum, would save k-weight of the initial page load.\n",
        "remove_template_description": "It would be great to be able to have a custom checksum validator that can ignore certain branches of the DOM-tree when attempting to reuse markup.  The use case is for rendering static components. For static components that only need to be rendered once, we can just do the rendering on the server, and not have to render again on the client. Currently we have to pass down both the react markup AND the props used to generate the static markup. However, it is a waste to send those props down, if this component doesn't need to be rendered client-side.  One of the major performance concerns for using React is that apps not only have to send down markup but props as well, usually duplicating the data sent down to the client.   Being able to specify certain components as not needing a client side re-render, thus skipping check-sum, would save k-weight of the initial page load.",
        "human_words": "It would be great to be able to have a custom checksum validator that can ignore certain branches of the DOM-tree when attempting to reuse markup.  The use case is for rendering static components. For static components that only need to be rendered once, we can just do the rendering on the server, and not have to render again on the client. Currently we have to pass down both the react markup AND the props used to generate the static markup. However, it is a waste to send those props down, if this component doesn't need to be rendered client-side.  One of the major performance concerns for using React is that apps not only have to send down markup but props as well, usually duplicating the data sent down to the client.   Being able to specify certain components as not needing a client side re-render, thus skipping check-sum, would save k-weight of the initial page load.",
        "human_words_regrex": "It would be great to be able to have a custom checksum validator that can ignore certain branches of the DOM-tree when attempting to reuse markup. The use case is for rendering static components. For static components that only need to be rendered once, we can just do the rendering on the server, and not have to render again on the client. Currently we have to pass down both the react markup AND the props used to generate the static markup. However, it is a waste to send those props down, if this component doesn't need to be rendered client-side. One of the major performance concerns for using React is that apps not only have to send down markup but props as well, usually duplicating the data sent down to the client. Being able to specify certain components as not needing a client side re-render, thus skipping check-sum, would save k-weight of the initial page load.",
        "human_words_stopwords_removal_lemmatization": "would great able custom checksum validator ignore certain branch dom-tree attempting reuse markup . use case rendering static component . static component need rendered , rendering server , render client . currently pas react markup prop used generate static markup . however , waste send prop , component n't need rendered client-side . one major performance concern using react apps send markup prop well , usually duplicating data sent client . able specify certain component needing client side re-render , thus skipping check-sum , would save k-weight initial page load .",
        "title_stopwords_removal_lemmatization": "provide way specify part react server markup reused client"
    },
    {
        "issue_id": 49095975,
        "title": "Unable to unmount component using its instance only when it is rendered to null",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2014-11-17T14:31:20Z",
        "status": "closed",
        "description": "There was a common pattern to unmount a component by its instance:\n\n`React.unmountComponentAtNode(component.getDOMNode().parentNode);`\n\nNow components can return `null` from `render()`, and in that case getDOMNode() also returns `null`, and the code above doesn't always work. React internally always knows to which node the component is mounted, so please make this information accessible or add a component method like `unmount()`.\n\nMy project is in process of transition from Backbone views to React and we have a helper function `universalUnmount()` which gets Backbone.View instance of mounted component and removes it from DOM. So there is no way for now to make it work with any React component.\n",
        "remove_template_description": "There was a common pattern to unmount a component by its instance:  `React.unmountComponentAtNode(component.getDOMNode().parentNode);`  Now components can return `null` from `render()`, and in that case getDOMNode() also returns `null`, and the code above doesn't always work. React internally always knows to which node the component is mounted, so please make this information accessible or add a component method like `unmount()`.  My project is in process of transition from Backbone views to React and we have a helper function `universalUnmount()` which gets Backbone.View instance of mounted component and removes it from DOM. So there is no way for now to make it work with any React component.",
        "human_words": "There was a common pattern to unmount a component by its instance:  `React.unmountComponentAtNode(component.getDOMNode().parentNode);`  Now components can return `null` from `render()`, and in that case getDOMNode() also returns `null`, and the code above doesn't always work. React internally always knows to which node the component is mounted, so please make this information accessible or add a component method like `unmount()`.  My project is in process of transition from Backbone views to React and we have a helper function `universalUnmount()` which gets Backbone.View instance of mounted component and removes it from DOM. So there is no way for now to make it work with any React component.",
        "human_words_regrex": "There was a common pattern to unmount a component by its instance: `React.unmountComponentAtNode(component.getDOMNode().parentNode);` Now components can return `null` from `render()`, and in that case getDOMNode() also returns `null`, and the code above doesn't always work. React internally always knows to which node the component is mounted, so please make this information accessible or add a component method like `unmount()`. My project is in process of transition from Backbone views to React and we have a helper function `universalUnmount()` which gets Backbone.View instance of mounted component and removes it from DOM. So there is no way for now to make it work with any React component.",
        "human_words_stopwords_removal_lemmatization": "common pattern unmount component instance : ` react.unmountcomponentatnode ( component.getdomnode ( ) .parentnode ) ; ` component return ` null ` ` render ( ) ` , case getdomnode ( ) also return ` null ` , code n't always work . react internally always know node component mounted , please make information accessible add component method like ` unmount ( ) ` . project process transition backbone view react helper function ` universalunmount ( ) ` get backbone.view instance mounted component remove dom . way make work react component .",
        "title_stopwords_removal_lemmatization": "unable unmount component using instance rendered null"
    },
    {
        "issue_id": 45753555,
        "title": "Mixin to render in unordered mode (Like sets)",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2014-10-14T14:03:14Z",
        "status": "closed",
        "description": "Similar to #2296.\n\nI would love to tell a REACT component : \"I don't care in what order you render the elements, just minimize the DOM operations and maintain the elements by key\"\n\nIn effect: whenever a re-render happens React removes the elements that are no longer there. And new elements are appended to the end. The order is never accounted for.\n\nWhile ES6 Sets may not be available in many browsers, I would love a similar feature implemented with Objects now.\n\nExplanation:\n\nRight now, when passing an array of children with keys as property, their order is preserved. This is usually the correct behavior.\n\nHowever, I have projects where I'm using the trick from famo.us to render elements using `transform: translate` values instead. In this case, all elements have `position; absolute; top: 0; left: 0;` anyway and their actual order on the DOM does not matter.\n\nThe major benefit is that with this trick, it eliminates almost all DOM operations (except updating styles) and any page reflow or paints for great performance.\n\nThe problem is that with React maintaining the order of the children, React, reorders the DOM elements anyway.\n\nThere are ways where I have to keep track of every render and manually reorder the data to prevent re-renders, but there has got to be a better way.\n",
        "remove_template_description": "Similar to #2296.  I would love to tell a REACT component : \"I don't care in what order you render the elements, just minimize the DOM operations and maintain the elements by key\"  In effect: whenever a re-render happens React removes the elements that are no longer there. And new elements are appended to the end. The order is never accounted for.  While ES6 Sets may not be available in many browsers, I would love a similar feature implemented with Objects now.  Explanation:  Right now, when passing an array of children with keys as property, their order is preserved. This is usually the correct behavior.  However, I have projects where I'm using the trick from famo.us to render elements using `transform: translate` values instead. In this case, all elements have `position; absolute; top: 0; left: 0;` anyway and their actual order on the DOM does not matter.  The major benefit is that with this trick, it eliminates almost all DOM operations (except updating styles) and any page reflow or paints for great performance.  The problem is that with React maintaining the order of the children, React, reorders the DOM elements anyway.  There are ways where I have to keep track of every render and manually reorder the data to prevent re-renders, but there has got to be a better way.",
        "human_words": "Similar to #2296.  I would love to tell a REACT component : \"I don't care in what order you render the elements, just minimize the DOM operations and maintain the elements by key\"  In effect: whenever a re-render happens React removes the elements that are no longer there. And new elements are appended to the end. The order is never accounted for.  While ES6 Sets may not be available in many browsers, I would love a similar feature implemented with Objects now.  Explanation:  Right now, when passing an array of children with keys as property, their order is preserved. This is usually the correct behavior.  However, I have projects where I'm using the trick from famo.us to render elements using `transform: translate` values instead. In this case, all elements have `position; absolute; top: 0; left: 0;` anyway and their actual order on the DOM does not matter.  The major benefit is that with this trick, it eliminates almost all DOM operations (except updating styles) and any page reflow or paints for great performance.  The problem is that with React maintaining the order of the children, React, reorders the DOM elements anyway.  There are ways where I have to keep track of every render and manually reorder the data to prevent re-renders, but there has got to be a better way.",
        "human_words_regrex": "Similar to #2296. I would love to tell a REACT component : \"I don't care in what order you render the elements, just minimize the DOM operations and maintain the elements by key\" In effect: whenever a re-render happens React removes the elements that are no longer there. And new elements are appended to the end. The order is never accounted for. While ES6 Sets may not be available in many browsers, I would love a similar feature implemented with Objects now. Explanation: Right now, when passing an array of children with keys as property, their order is preserved. This is usually the correct behavior. However, I have projects where I'm using the trick from famo.us to render elements using `transform: translate` values instead. In this case, all elements have `position; absolute; top: 0; left: 0;` anyway and their actual order on the DOM does not matter. The major benefit is that with this trick, it eliminates almost all DOM operations (except updating styles) and any page reflow or paints for great performance. The problem is that with React maintaining the order of the children, React, reorders the DOM elements anyway. There are ways where I have to keep track of every render and manually reorder the data to prevent re-renders, but there has got to be a better way.",
        "human_words_stopwords_removal_lemmatization": "similar # 2296. would love tell react component : `` n't care order render element , minimize dom operation maintain element key '' effect : whenever re-render happens react remove element longer . new element appended end . order never accounted . es6 set may available many browser , would love similar feature implemented object . explanation : right , passing array child key property , order preserved . usually correct behavior . however , project 'm using trick famo.us render element using ` transform : translate ` value instead . case , element ` position ; absolute ; top : 0 ; left : 0 ; ` anyway actual order dom matter . major benefit trick , eliminates almost dom operation ( except updating style ) page reflow paint great performance . problem react maintaining order child , react , reorder dom element anyway . way keep track every render manually reorder data prevent re-renders , got better way .",
        "title_stopwords_removal_lemmatization": "mixin render unordered mode ( like set )"
    },
    {
        "issue_id": 44530788,
        "title": "provide deferUpdate method (feature request)",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2014-10-01T05:54:45Z",
        "status": "closed",
        "description": "Hi, \n\nThe Flux architecture seems to recommend having React elements bind to change event listeners to Stores, and call `forceUpdate()` when changes occur. I do this, and generally find that deferring forceUpdate calls is more useful, as it prevents multiple calls to forceUpdate on the same tick (I think). \n\nThe idea comes from [react-mixin-manager](https://github.com/jhudson8/react-mixin-manager#deferupdate), which provides one implementation. \n\nPersonally, I have seen a performance boost (I think) from using the following simple mixin: \n\n``` coffee\nmodule.exports =\n  deferUpdate: ->\n    setTimeout =>\n      @forceUpdate()\n    , 0\n```\n\nI'm not sure if this is a good idea generally, or if it should be incorporated into React core, but I thought I'd throw it out there. \n(meta: are issues like this encouraged or frowned upon here? I know it's a large project with a lot of \"real\" issues the core devs need to be paying attention to.)\n",
        "remove_template_description": "Hi,   The Flux architecture seems to recommend having React elements bind to change event listeners to Stores, and call `forceUpdate()` when changes occur. I do this, and generally find that deferring forceUpdate calls is more useful, as it prevents multiple calls to forceUpdate on the same tick (I think).   The idea comes from [react-mixin-manager](https://github.com/jhudson8/react-mixin-manager#deferupdate), which provides one implementation.   Personally, I have seen a performance boost (I think) from using the following simple mixin:   ``` coffee module.exports =   deferUpdate: ->     setTimeout =>       @forceUpdate()     , 0 ```  I'm not sure if this is a good idea generally, or if it should be incorporated into React core, but I thought I'd throw it out there.  (meta: are issues like this encouraged or frowned upon here? I know it's a large project with a lot of \"real\" issues the core devs need to be paying attention to.)",
        "human_words": "Hi,   The Flux architecture seems to recommend having React elements bind to change event listeners to Stores, and call `forceUpdate()` when changes occur. I do this, and generally find that deferring forceUpdate calls is more useful, as it prevents multiple calls to forceUpdate on the same tick (I think).   The idea comes from [react-mixin-manager](https://github.com/jhudson8/react-mixin-manager#deferupdate), which provides one implementation.   Personally, I have seen a performance boost (I think) from using the following simple mixin:     I'm not sure if this is a good idea generally, or if it should be incorporated into React core, but I thought I'd throw it out there.  (meta: are issues like this encouraged or frowned upon here? I know it's a large project with a lot of \"real\" issues the core devs need to be paying attention to.)",
        "human_words_regrex": "Hi, The Flux architecture seems to recommend having React elements bind to change event listeners to Stores, and call `forceUpdate()` when changes occur. I do this, and generally find that deferring forceUpdate calls is more useful, as it prevents multiple calls to forceUpdate on the same tick (I think). The idea comes from , which provides one implementation. Personally, I have seen a performance boost (I think) from using the following simple mixin: I'm not sure if this is a good idea generally, or if it should be incorporated into React core, but I thought I'd throw it out there. (meta: are issues like this encouraged or frowned upon here? I know it's a large project with a lot of \"real\" issues the core devs need to be paying attention to.)",
        "human_words_stopwords_removal_lemmatization": "hi , flux architecture seems recommend react element bind change event listener store , call ` forceupdate ( ) ` change occur . , generally find deferring forceupdate call useful , prevents multiple call forceupdate tick ( think ) . idea come , provides one implementation . personally , seen performance boost ( think ) using following simple mixin : 'm sure good idea generally , incorporated react core , thought 'd throw . ( meta : issue like encouraged frowned upon ? know 's large project lot `` real '' issue core devs need paying attention . )",
        "title_stopwords_removal_lemmatization": "provide deferupdate method ( feature request )"
    },
    {
        "issue_id": 44316918,
        "title": "Feature request: warn when this.state is touched directly rather than with setState",
        "label": [
            "Difficulty: starter",
            "Type: Feature Request"
        ],
        "date": "2014-09-29T16:53:59Z",
        "status": "closed",
        "description": "I've just stumbled across some code written which touches this.state directly and then forces an update.  The danger in this pattern is that _appears_ to work, it still leaves the code vulnerable to other callers of setState doing the right thing, being queued up, and then overwriting the hand-touched state, if I'm understanding the red box on http://facebook.github.io/react/docs/component-api.html correctly.\n\nAny chance if, in (at least) the dev version, this.state could be guarded with a JS setter that would print a warning?\n",
        "remove_template_description": "I've just stumbled across some code written which touches this.state directly and then forces an update.  The danger in this pattern is that _appears_ to work, it still leaves the code vulnerable to other callers of setState doing the right thing, being queued up, and then overwriting the hand-touched state, if I'm understanding the red box on http://facebook.github.io/react/docs/component-api.html correctly.  Any chance if, in (at least) the dev version, this.state could be guarded with a JS setter that would print a warning?",
        "human_words": "I've just stumbled across some code written which touches this.state directly and then forces an update.  The danger in this pattern is that _appears_ to work, it still leaves the code vulnerable to other callers of setState doing the right thing, being queued up, and then overwriting the hand-touched state, if I'm understanding the red box on http://facebook.github.io/react/docs/component-api.html correctly.  Any chance if, in (at least) the dev version, this.state could be guarded with a JS setter that would print a warning?",
        "human_words_regrex": "I've just stumbled across some code written which touches this.state directly and then forces an update. The danger in this pattern is that _appears_ to work, it still leaves the code vulnerable to other callers of setState doing the right thing, being queued up, and then overwriting the hand-touched state, if I'm understanding the red box on  correctly. Any chance if, in (at least) the dev version, this.state could be guarded with a JS setter that would print a warning?",
        "human_words_stopwords_removal_lemmatization": "'ve stumbled across code written touch this.state directly force update . danger pattern _appears_ work , still leaf code vulnerable caller setstate right thing , queued , overwriting hand-touched state , 'm understanding red box correctly . chance , ( least ) dev version , this.state could guarded j setter would print warning ?",
        "title_stopwords_removal_lemmatization": "feature request : warn this.state touched directly rather setstate"
    },
    {
        "issue_id": 44066235,
        "title": "Allow internal components to be used in the browser version",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2014-09-26T14:16:04Z",
        "status": "closed",
        "description": "I'm using flux and I need the 'react/lib/copyProperties'. This is easy with browserify `var copyProperties = require('react/lib/copyProperties');` but with require.js is not possible because it uses the bower version which doesn't contain the copyProperties fn (https://github.com/facebook/react/blob/aae31ae24c67216894ae42b8481a599206d18690/src/browser/ui/React.js). Would be nice to have them like this `React.lib.copyProperties()`\n\nMaybe include all the lib components.\n\nIs this possible?\nThanks\n",
        "remove_template_description": "I'm using flux and I need the 'react/lib/copyProperties'. This is easy with browserify `var copyProperties = require('react/lib/copyProperties');` but with require.js is not possible because it uses the bower version which doesn't contain the copyProperties fn (https://github.com/facebook/react/blob/aae31ae24c67216894ae42b8481a599206d18690/src/browser/ui/React.js). Would be nice to have them like this `React.lib.copyProperties()`  Maybe include all the lib components.  Is this possible? Thanks",
        "human_words": "I'm using flux and I need the 'react/lib/copyProperties'. This is easy with browserify `var copyProperties = require('react/lib/copyProperties');` but with require.js is not possible because it uses the bower version which doesn't contain the copyProperties fn (https://github.com/facebook/react/blob/aae31ae24c67216894ae42b8481a599206d18690/src/browser/ui/React.js). Would be nice to have them like this `React.lib.copyProperties()`  Maybe include all the lib components.  Is this possible? Thanks",
        "human_words_regrex": "I'm using flux and I need the 'react/lib/copyProperties'. This is easy with browserify `var copyProperties = require('react/lib/copyProperties');` but with require.js is not possible because it uses the bower version which doesn't contain the copyProperties fn ( Would be nice to have them like this `React.lib.copyProperties()` Maybe include all the lib components. Is this possible? Thanks",
        "human_words_stopwords_removal_lemmatization": "'m using flux need 'react/lib/copyproperties ' . easy browserify ` var copyproperties = require ( 'react/lib/copyproperties ' ) ; ` require.js possible us bower version n't contain copyproperties fn ( would nice like ` react.lib.copyproperties ( ) ` maybe include lib component . possible ? thanks",
        "title_stopwords_removal_lemmatization": "allow internal component used browser version"
    },
    {
        "issue_id": 43807887,
        "title": "Introduce createFactory in 0.11.3",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2014-09-24T19:57:33Z",
        "status": "closed",
        "description": "We have a fairly advanced class system that is integrated with react. With 0.10 we managed to make it work using stock build, with 0.11 and its refactoring of descriptors it is no longer possible. I know that in 0.12, React will have `createFactory()` as part of its public API, so is there a chance we can have it in 0.11.x? Perhaps hidden in `__internals`? It's important for us to have an unwrapped version of it, just a reference to `ReactDescriptor. createFactory()` method.\n",
        "remove_template_description": "We have a fairly advanced class system that is integrated with react. With 0.10 we managed to make it work using stock build, with 0.11 and its refactoring of descriptors it is no longer possible. I know that in 0.12, React will have `createFactory()` as part of its public API, so is there a chance we can have it in 0.11.x? Perhaps hidden in `__internals`? It's important for us to have an unwrapped version of it, just a reference to `ReactDescriptor. createFactory()` method.",
        "human_words": "We have a fairly advanced class system that is integrated with react. With 0.10 we managed to make it work using stock build, with 0.11 and its refactoring of descriptors it is no longer possible. I know that in 0.12, React will have `createFactory()` as part of its public API, so is there a chance we can have it in 0.11.x? Perhaps hidden in `__internals`? It's important for us to have an unwrapped version of it, just a reference to `ReactDescriptor. createFactory()` method.",
        "human_words_regrex": "We have a fairly advanced class system that is integrated with react. With 0.10 we managed to make it work using stock build, with 0.11 and its refactoring of descriptors it is no longer possible. I know that in 0.12, React will have `createFactory()` as part of its public API, so is there a chance we can have it in 0.11.x? Perhaps hidden in `__internals`? It's important for us to have an unwrapped version of it, just a reference to `ReactDescriptor. createFactory()` method.",
        "human_words_stopwords_removal_lemmatization": "fairly advanced class system integrated react . 0.10 managed make work using stock build , 0.11 refactoring descriptor longer possible . know 0.12 , react ` createfactory ( ) ` part public api , chance 0.11.x ? perhaps hidden ` __internals ` ? 's important u unwrapped version , reference ` reactdescriptor . createfactory ( ) ` method .",
        "title_stopwords_removal_lemmatization": "introduce createfactory 0.11.3"
    },
    {
        "issue_id": 43272361,
        "title": "Warn when a component is passed props that it doesn't need",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2014-09-19T19:14:45Z",
        "status": "closed",
        "description": "It would be cool to be able to get warnings for typoed or otherwise extraneous props passed to a component, similar to how `React.DOM` warns if you pass `class` when you meant `className`.\n\nWith `PropTypes.shape` you could probably even ensure deep validity of the passed data. This would not only be useful for finding bugs, but also for optimizing hot components by making sure the shapes are aligned.\n\nObviously this would need some sort of opt-in, like propTypes.\n",
        "remove_template_description": "It would be cool to be able to get warnings for typoed or otherwise extraneous props passed to a component, similar to how `React.DOM` warns if you pass `class` when you meant `className`.  With `PropTypes.shape` you could probably even ensure deep validity of the passed data. This would not only be useful for finding bugs, but also for optimizing hot components by making sure the shapes are aligned.  Obviously this would need some sort of opt-in, like propTypes.",
        "human_words": "It would be cool to be able to get warnings for typoed or otherwise extraneous props passed to a component, similar to how `React.DOM` warns if you pass `class` when you meant `className`.  With `PropTypes.shape` you could probably even ensure deep validity of the passed data. This would not only be useful for finding bugs, but also for optimizing hot components by making sure the shapes are aligned.  Obviously this would need some sort of opt-in, like propTypes.",
        "human_words_regrex": "It would be cool to be able to get warnings for typoed or otherwise extraneous props passed to a component, similar to how `React.DOM` warns if you pass `class` when you meant `className`. With `PropTypes.shape` you could probably even ensure deep validity of the passed data. This would not only be useful for finding bugs, but also for optimizing hot components by making sure the shapes are aligned. Obviously this would need some sort of opt-in, like propTypes.",
        "human_words_stopwords_removal_lemmatization": "would cool able get warning typoed otherwise extraneous prop passed component , similar ` react.dom ` warns pas ` class ` meant ` classname ` . ` proptypes.shape ` could probably even ensure deep validity passed data . would useful finding bug , also optimizing hot component making sure shape aligned . obviously would need sort opt-in , like proptypes .",
        "title_stopwords_removal_lemmatization": "warn component passed prop n't need"
    },
    {
        "issue_id": 42728346,
        "title": "Components with children without DOM representation",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2014-09-14T19:36:30Z",
        "status": "closed",
        "description": "If I need a component that doesn't have a DOM representation, I can use render function that returns `<noscript>`. However recently I had to have a component without DOM representation, but that also has children, that I want to be mounted (so that their lifecycle methods trigger correctly). Unfortunately `<noscript>` is not nestable, thus I had to return `<span>`, which is not an ideal solution.\n\nIs there a way to do such thing without using `<span>` or `<div>`? I know there are plans to replace `<noscript>` solution with some 'null component'. Are there plans for 'null component' that can mount its children?\n",
        "remove_template_description": "If I need a component that doesn't have a DOM representation, I can use render function that returns `<noscript>`. However recently I had to have a component without DOM representation, but that also has children, that I want to be mounted (so that their lifecycle methods trigger correctly). Unfortunately `<noscript>` is not nestable, thus I had to return `<span>`, which is not an ideal solution.  Is there a way to do such thing without using `<span>` or `<div>`? I know there are plans to replace `<noscript>` solution with some 'null component'. Are there plans for 'null component' that can mount its children?",
        "human_words": "If I need a component that doesn't have a DOM representation, I can use render function that returns `<noscript>`. However recently I had to have a component without DOM representation, but that also has children, that I want to be mounted (so that their lifecycle methods trigger correctly). Unfortunately `<noscript>` is not nestable, thus I had to return `<span>`, which is not an ideal solution.  Is there a way to do such thing without using `<span>` or `<div>`? I know there are plans to replace `<noscript>` solution with some 'null component'. Are there plans for 'null component' that can mount its children?",
        "human_words_regrex": "If I need a component that doesn't have a DOM representation, I can use render function that returns ``. However recently I had to have a component without DOM representation, but that also has children, that I want to be mounted (so that their lifecycle methods trigger correctly). Unfortunately `` is not nestable, thus I had to return ``, which is not an ideal solution. Is there a way to do such thing without using `` or ``? I know there are plans to replace `` solution with some 'null component'. Are there plans for 'null component' that can mount its children?",
        "human_words_stopwords_removal_lemmatization": "need component n't dom representation , use render function return `` . however recently component without dom representation , also child , want mounted ( lifecycle method trigger correctly ) . unfortunately `` nestable , thus return `` , ideal solution . way thing without using `` `` ? know plan replace `` solution 'null component ' . plan 'null component ' mount child ?",
        "title_stopwords_removal_lemmatization": "component child without dom representation"
    },
    {
        "issue_id": 42400125,
        "title": "Expose an API to preprocess the VDOM tree before diffing",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2014-09-10T10:48:31Z",
        "status": "closed",
        "description": "One really positive feature of React is the ability to do proper logic for layout, e.g. you can do grids that scale both ways, take into account screen size **and** content size and so on. However, the reusability of such solutions is not often quite optimal.\n\nThere are solutions such as [GSS](http://gridstylesheets.org/) that allow you to define things like this in a reusable manner, they're usually supported only in the most recent browsers (which would be easier to solve for React-based solutions, since virtual DOM doesn't depend on the browser) and also hooking them up to possible changes in the tree is tedious and hard to get right without sacrificing performance.\n\nAllowing user-code to pre-process the virtual DOM tree before the diffing would open the doors for a whole new world of styling engines to born into, where reading from the virtual DOM tree is fast, as well as making changes to it. The implications vary from styling languages being able to define custom values such as `aspect-ratio` to apply a CSS aspect ratio hack, or inject extra DOM elements to make things centered based on the `className` of the element, while keeping the user-code intent-oriented and clear, abstracting away the common pains of CSS.\n\nI realize that this is not a simple change of adding a hook somewhere, but instead means exposing a vast amount of API surface that's currently considered implementation details. This is also even more problematic in cases where `shouldComponentUpdate` is involved. However, I think this would have the potential to revolutionize how we deal with styling web pages, so I'd say it's worth thinking through at least.\n",
        "remove_template_description": "One really positive feature of React is the ability to do proper logic for layout, e.g. you can do grids that scale both ways, take into account screen size **and** content size and so on. However, the reusability of such solutions is not often quite optimal.  There are solutions such as [GSS](http://gridstylesheets.org/) that allow you to define things like this in a reusable manner, they're usually supported only in the most recent browsers (which would be easier to solve for React-based solutions, since virtual DOM doesn't depend on the browser) and also hooking them up to possible changes in the tree is tedious and hard to get right without sacrificing performance.  Allowing user-code to pre-process the virtual DOM tree before the diffing would open the doors for a whole new world of styling engines to born into, where reading from the virtual DOM tree is fast, as well as making changes to it. The implications vary from styling languages being able to define custom values such as `aspect-ratio` to apply a CSS aspect ratio hack, or inject extra DOM elements to make things centered based on the `className` of the element, while keeping the user-code intent-oriented and clear, abstracting away the common pains of CSS.  I realize that this is not a simple change of adding a hook somewhere, but instead means exposing a vast amount of API surface that's currently considered implementation details. This is also even more problematic in cases where `shouldComponentUpdate` is involved. However, I think this would have the potential to revolutionize how we deal with styling web pages, so I'd say it's worth thinking through at least.",
        "human_words": "One really positive feature of React is the ability to do proper logic for layout, e.g. you can do grids that scale both ways, take into account screen size **and** content size and so on. However, the reusability of such solutions is not often quite optimal.  There are solutions such as [GSS](http://gridstylesheets.org/) that allow you to define things like this in a reusable manner, they're usually supported only in the most recent browsers (which would be easier to solve for React-based solutions, since virtual DOM doesn't depend on the browser) and also hooking them up to possible changes in the tree is tedious and hard to get right without sacrificing performance.  Allowing user-code to pre-process the virtual DOM tree before the diffing would open the doors for a whole new world of styling engines to born into, where reading from the virtual DOM tree is fast, as well as making changes to it. The implications vary from styling languages being able to define custom values such as `aspect-ratio` to apply a CSS aspect ratio hack, or inject extra DOM elements to make things centered based on the `className` of the element, while keeping the user-code intent-oriented and clear, abstracting away the common pains of CSS.  I realize that this is not a simple change of adding a hook somewhere, but instead means exposing a vast amount of API surface that's currently considered implementation details. This is also even more problematic in cases where `shouldComponentUpdate` is involved. However, I think this would have the potential to revolutionize how we deal with styling web pages, so I'd say it's worth thinking through at least.",
        "human_words_regrex": "One really positive feature of React is the ability to do proper logic for layout, e.g. you can do grids that scale both ways, take into account screen size **and** content size and so on. However, the reusability of such solutions is not often quite optimal. There are solutions such as  that allow you to define things like this in a reusable manner, they're usually supported only in the most recent browsers (which would be easier to solve for React-based solutions, since virtual DOM doesn't depend on the browser) and also hooking them up to possible changes in the tree is tedious and hard to get right without sacrificing performance. Allowing user-code to pre-process the virtual DOM tree before the diffing would open the doors for a whole new world of styling engines to born into, where reading from the virtual DOM tree is fast, as well as making changes to it. The implications vary from styling languages being able to define custom values such as `aspect-ratio` to apply a CSS aspect ratio hack, or inject extra DOM elements to make things centered based on the `className` of the element, while keeping the user-code intent-oriented and clear, abstracting away the common pains of CSS. I realize that this is not a simple change of adding a hook somewhere, but instead means exposing a vast amount of API surface that's currently considered implementation details. This is also even more problematic in cases where `shouldComponentUpdate` is involved. However, I think this would have the potential to revolutionize how we deal with styling web pages, so I'd say it's worth thinking through at least.",
        "human_words_stopwords_removal_lemmatization": "one really positive feature react ability proper logic layout , e.g . grid scale way , take account screen size * * * * content size . however , reusability solution often quite optimal . solution allow define thing like reusable manner , 're usually supported recent browser ( would easier solve react-based solution , since virtual dom n't depend browser ) also hooking possible change tree tedious hard get right without sacrificing performance . allowing user-code pre-process virtual dom tree diffing would open door whole new world styling engine born , reading virtual dom tree fast , well making change . implication vary styling language able define custom value ` aspect-ratio ` apply cs aspect ratio hack , inject extra dom element make thing centered based ` classname ` element , keeping user-code intent-oriented clear , abstracting away common pain cs . realize simple change adding hook somewhere , instead mean exposing vast amount api surface 's currently considered implementation detail . also even problematic case ` shouldcomponentupdate ` involved . however , think would potential revolutionize deal styling web page , 'd say 's worth thinking least .",
        "title_stopwords_removal_lemmatization": "expose api preprocess vdom tree diffing"
    },
    {
        "issue_id": 40675157,
        "title": "Output JSX syntax errors to throw errors at load",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2014-08-20T08:46:54Z",
        "status": "closed",
        "description": "It would be awesome if JSX parser errors wouldn't just end up in the terminal, but if it would actually output (valid) code that would throw the error on load on the client instead, it would make it virtually transparent that JSX is being used.\n\nA simple solution would be to simply (only) output the error message as-is with file+line baked in. I imagine that with some source map trickery we could even make it look as if the browser threw the error, with correct source and location.\n",
        "remove_template_description": "It would be awesome if JSX parser errors wouldn't just end up in the terminal, but if it would actually output (valid) code that would throw the error on load on the client instead, it would make it virtually transparent that JSX is being used.  A simple solution would be to simply (only) output the error message as-is with file+line baked in. I imagine that with some source map trickery we could even make it look as if the browser threw the error, with correct source and location.",
        "human_words": "It would be awesome if JSX parser errors wouldn't just end up in the terminal, but if it would actually output (valid) code that would throw the error on load on the client instead, it would make it virtually transparent that JSX is being used.  A simple solution would be to simply (only) output the error message as-is with file+line baked in. I imagine that with some source map trickery we could even make it look as if the browser threw the error, with correct source and location.",
        "human_words_regrex": "It would be awesome if JSX parser errors wouldn't just end up in the terminal, but if it would actually output (valid) code that would throw the error on load on the client instead, it would make it virtually transparent that JSX is being used. A simple solution would be to simply (only) output the error message as-is with file+line baked in. I imagine that with some source map trickery we could even make it look as if the browser threw the error, with correct source and location.",
        "human_words_stopwords_removal_lemmatization": "would awesome jsx parser error would n't end terminal , would actually output ( valid ) code would throw error load client instead , would make virtually transparent jsx used . simple solution would simply ( ) output error message as-is file+line baked . imagine source map trickery could even make look browser threw error , correct source location .",
        "title_stopwords_removal_lemmatization": "output jsx syntax error throw error load"
    },
    {
        "issue_id": 39357527,
        "title": "Server-rendering should be distinct from client-rendering",
        "label": [
            "Type: Feature Request",
            "Component: Server Rendering"
        ],
        "date": "2014-08-02T21:20:15Z",
        "status": "closed",
        "description": "Kind of related to #1978 (concerns polyfills)\n\nIt seems to me that we should really treat server-rendering as distinct from client-rendering, they have different requirements and priorities.\n1. Server-rendering should be able to generate optimal markup for SEO, markup must also be fully cross-browser compatible and small markup is preferable.\n2. Client-rendering sees SEO as largely irrelevant, full cross-browser compatibility is also irrelevant and rendering performance is of greater importance.\n\nSo I propose that we treat server-rendering as uniquely distinct from client-rendering, e.g. as a separate flag`React.serverSide = true` (which would default to true if document is not available). It's even imaginable that we could extend this with e.g. `React.targetClient = 'SEO' / 'legacyClient' / 'everGreenClient'`, which would optionally allow the markup to be tailored for a specific purpose.\n\nSo when reusing server-rendered markup client-side:\n1. The client should do an initial server-rendering pass being passed the exact same props (and time) as during the server-side rendering, but instances are actually allocated on the client.\n2. Immediately afterwards a client-rendering pass is done with any props (and current time) you like, instances/markup is efficiently reused and should not add significant costs as little DOM manipulation should be involved.\n\nI'm not really affected by this, but for those that do use server-rendering; this seems like the _correct_ way of approaching it (as opposed to just rendering everything exactly the same). However, I'm working on `img`\\- and `picture`-element polyfills, but without this they cannot be made to generate sensible server-side markup.\n\n**PS. I realize this can be done today using a global + mixin**, but without a standardized solution, it's unlikely that third-party (and polyfill) components could ever participate in this. But that doesn't mean that it needs to be shipped with React even (none of this requires core support I believe), as long as it's standardized.\n",
        "remove_template_description": "Kind of related to #1978 (concerns polyfills)  It seems to me that we should really treat server-rendering as distinct from client-rendering, they have different requirements and priorities. 1. Server-rendering should be able to generate optimal markup for SEO, markup must also be fully cross-browser compatible and small markup is preferable. 2. Client-rendering sees SEO as largely irrelevant, full cross-browser compatibility is also irrelevant and rendering performance is of greater importance.  So I propose that we treat server-rendering as uniquely distinct from client-rendering, e.g. as a separate flag`React.serverSide = true` (which would default to true if document is not available). It's even imaginable that we could extend this with e.g. `React.targetClient = 'SEO' / 'legacyClient' / 'everGreenClient'`, which would optionally allow the markup to be tailored for a specific purpose.  So when reusing server-rendered markup client-side: 1. The client should do an initial server-rendering pass being passed the exact same props (and time) as during the server-side rendering, but instances are actually allocated on the client. 2. Immediately afterwards a client-rendering pass is done with any props (and current time) you like, instances/markup is efficiently reused and should not add significant costs as little DOM manipulation should be involved.  I'm not really affected by this, but for those that do use server-rendering; this seems like the _correct_ way of approaching it (as opposed to just rendering everything exactly the same). However, I'm working on `img`\\- and `picture`-element polyfills, but without this they cannot be made to generate sensible server-side markup.  **PS. I realize this can be done today using a global + mixin**, but without a standardized solution, it's unlikely that third-party (and polyfill) components could ever participate in this. But that doesn't mean that it needs to be shipped with React even (none of this requires core support I believe), as long as it's standardized.",
        "human_words": "Kind of related to #1978 (concerns polyfills)  It seems to me that we should really treat server-rendering as distinct from client-rendering, they have different requirements and priorities. 1. Server-rendering should be able to generate optimal markup for SEO, markup must also be fully cross-browser compatible and small markup is preferable. 2. Client-rendering sees SEO as largely irrelevant, full cross-browser compatibility is also irrelevant and rendering performance is of greater importance.  So I propose that we treat server-rendering as uniquely distinct from client-rendering, e.g. as a separate flag`React.serverSide = true` (which would default to true if document is not available). It's even imaginable that we could extend this with e.g. `React.targetClient = 'SEO' / 'legacyClient' / 'everGreenClient'`, which would optionally allow the markup to be tailored for a specific purpose.  So when reusing server-rendered markup client-side: 1. The client should do an initial server-rendering pass being passed the exact same props (and time) as during the server-side rendering, but instances are actually allocated on the client. 2. Immediately afterwards a client-rendering pass is done with any props (and current time) you like, instances/markup is efficiently reused and should not add significant costs as little DOM manipulation should be involved.  I'm not really affected by this, but for those that do use server-rendering; this seems like the _correct_ way of approaching it (as opposed to just rendering everything exactly the same). However, I'm working on `img`\\- and `picture`-element polyfills, but without this they cannot be made to generate sensible server-side markup.  **PS. I realize this can be done today using a global + mixin**, but without a standardized solution, it's unlikely that third-party (and polyfill) components could ever participate in this. But that doesn't mean that it needs to be shipped with React even (none of this requires core support I believe), as long as it's standardized.",
        "human_words_regrex": "Kind of related to #1978 (concerns polyfills) It seems to me that we should really treat server-rendering as distinct from client-rendering, they have different requirements and priorities. 1. Server-rendering should be able to generate optimal markup for SEO, markup must also be fully cross-browser compatible and small markup is preferable. 2. Client-rendering sees SEO as largely irrelevant, full cross-browser compatibility is also irrelevant and rendering performance is of greater importance. So I propose that we treat server-rendering as uniquely distinct from client-rendering, e.g. as a separate flag`React.serverSide = true` (which would default to true if document is not available). It's even imaginable that we could extend this with e.g. `React.targetClient = 'SEO' / 'legacyClient' / 'everGreenClient'`, which would optionally allow the markup to be tailored for a specific purpose. So when reusing server-rendered markup client-side: 1. The client should do an initial server-rendering pass being passed the exact same props (and time) as during the server-side rendering, but instances are actually allocated on the client. 2. Immediately afterwards a client-rendering pass is done with any props (and current time) you like, instances/markup is efficiently reused and should not add significant costs as little DOM manipulation should be involved. I'm not really affected by this, but for those that do use server-rendering; this seems like the _correct_ way of approaching it (as opposed to just rendering everything exactly the same). However, I'm working on `img`\\- and `picture`-element polyfills, but without this they cannot be made to generate sensible server-side markup. **PS. I realize this can be done today using a global + mixin**, but without a standardized solution, it's unlikely that third-party (and polyfill) components could ever participate in this. But that doesn't mean that it needs to be shipped with React even (none of this requires core support I believe), as long as it's standardized.",
        "human_words_stopwords_removal_lemmatization": "kind related # 1978 ( concern polyfills ) seems really treat server-rendering distinct client-rendering , different requirement priority . 1. server-rendering able generate optimal markup seo , markup must also fully cross-browser compatible small markup preferable . 2. client-rendering see seo largely irrelevant , full cross-browser compatibility also irrelevant rendering performance greater importance . propose treat server-rendering uniquely distinct client-rendering , e.g . separate flag ` react.serverside = true ` ( would default true document available ) . 's even imaginable could extend e.g . ` react.targetclient = 'seo ' / 'legacyclient ' / 'evergreenclient ' ` , would optionally allow markup tailored specific purpose . reusing server-rendered markup client-side : 1. client initial server-rendering pas passed exact prop ( time ) server-side rendering , instance actually allocated client . 2. immediately afterwards client-rendering pas done prop ( current time ) like , instances/markup efficiently reused add significant cost little dom manipulation involved . 'm really affected , use server-rendering ; seems like _correct_ way approaching ( opposed rendering everything exactly ) . however , 'm working ` img ` \\- ` picture ` -element polyfills , without made generate sensible server-side markup . * * p . realize done today using global + mixin * * , without standardized solution , 's unlikely third-party ( polyfill ) component could ever participate . n't mean need shipped react even ( none requires core support believe ) , long 's standardized .",
        "title_stopwords_removal_lemmatization": "server-rendering distinct client-rendering"
    },
    {
        "issue_id": 38233034,
        "title": "Support !important for styles?",
        "label": [
            "Resolution: Wontfix",
            "Type: Feature Request",
            "Component: DOM"
        ],
        "date": "2014-07-19T13:05:50Z",
        "status": "closed",
        "description": "We currently don't support `!important` as it has to be set using `style.setProperty(name, value, priority)`. This should be trivially easy to implement if it's something want to support, although I'm not sure about the performance implications (**EDIT:** #1886), although I can't imagine it would be measurable as we would be doing the string test ourselves and those are cheap.\n\nhttp://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration\n\n~~OK... apparently IE8 doesn't support this _at all_, it might still be worth implementing, for the future and for those who don't care about IE8.~~ ~~After further experimentation, apparently it is! `style.setAttribute(name, value)` (priority is part of the value).~~ But apparently that was wrong as well, the only way to set it seems to be with `cssText`, an acceptable work-around may be to just use `cssText` when we detect an `!important` style, which should be seldom enough that performance is a non-issue.\n\nAn important consideration is that we _already_ support this for the initial render, but subsequent updates will _fail_ as `!important` isn't recognized for properties.\n",
        "remove_template_description": "We currently don't support `!important` as it has to be set using `style.setProperty(name, value, priority)`. This should be trivially easy to implement if it's something want to support, although I'm not sure about the performance implications (**EDIT:** #1886), although I can't imagine it would be measurable as we would be doing the string test ourselves and those are cheap.  http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration  ~~OK... apparently IE8 doesn't support this _at all_, it might still be worth implementing, for the future and for those who don't care about IE8.~~ ~~After further experimentation, apparently it is! `style.setAttribute(name, value)` (priority is part of the value).~~ But apparently that was wrong as well, the only way to set it seems to be with `cssText`, an acceptable work-around may be to just use `cssText` when we detect an `!important` style, which should be seldom enough that performance is a non-issue.  An important consideration is that we _already_ support this for the initial render, but subsequent updates will _fail_ as `!important` isn't recognized for properties.",
        "human_words": "We currently don't support `!important` as it has to be set using `style.setProperty(name, value, priority)`. This should be trivially easy to implement if it's something want to support, although I'm not sure about the performance implications (**EDIT:** #1886), although I can't imagine it would be measurable as we would be doing the string test ourselves and those are cheap.  http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration  ~~OK... apparently IE8 doesn't support this _at all_, it might still be worth implementing, for the future and for those who don't care about IE8.~~ ~~After further experimentation, apparently it is! `style.setAttribute(name, value)` (priority is part of the value).~~ But apparently that was wrong as well, the only way to set it seems to be with `cssText`, an acceptable work-around may be to just use `cssText` when we detect an `!important` style, which should be seldom enough that performance is a non-issue.  An important consideration is that we _already_ support this for the initial render, but subsequent updates will _fail_ as `!important` isn't recognized for properties.",
        "human_words_regrex": "We currently don't support `!important` as it has to be set using `style.setProperty(name, value, priority)`. This should be trivially easy to implement if it's something want to support, although I'm not sure about the performance implications (**EDIT:** #1886), although I can't imagine it would be measurable as we would be doing the string test ourselves and those are cheap.  ~~OK... apparently IE8 doesn't support this _at all_, it might still be worth implementing, for the future and for those who don't care about IE8.~~ ~~After further experimentation, apparently it is! `style.setAttribute(name, value)` (priority is part of the value).~~ But apparently that was wrong as well, the only way to set it seems to be with `cssText`, an acceptable work-around may be to just use `cssText` when we detect an `!important` style, which should be seldom enough that performance is a non-issue. An important consideration is that we _already_ support this for the initial render, but subsequent updates will _fail_ as `!important` isn't recognized for properties.",
        "human_words_stopwords_removal_lemmatization": "currently n't support ` ! important ` set using ` style.setproperty ( name , value , priority ) ` . trivially easy implement 's something want support , although 'm sure performance implication ( * * edit : * * # 1886 ) , although ca n't imagine would measurable would string test cheap . ~~ok ... apparently ie8 n't support _at all_ , might still worth implementing , future n't care ie8.~~ ~~after experimentation , apparently ! ` style.setattribute ( name , value ) ` ( priority part value ) .~~ apparently wrong well , way set seems ` csstext ` , acceptable work-around may use ` csstext ` detect ` ! important ` style , seldom enough performance non-issue . important consideration _already_ support initial render , subsequent update _fail_ ` ! important ` n't recognized property .",
        "title_stopwords_removal_lemmatization": "support ! important style ?"
    },
    {
        "issue_id": 37418194,
        "title": "Add some way to specify indeterminate checkboxes",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2014-07-08T22:34:29Z",
        "status": "closed",
        "description": "There should be a way do do `<input type=\"checkbox\" indeterminate={true} />` or similar \u2013 right now the attribute is ignored. Need to figure out how this interacts with `checked` though.\n",
        "remove_template_description": "There should be a way do do `<input type=\"checkbox\" indeterminate={true} />` or similar \u2013 right now the attribute is ignored. Need to figure out how this interacts with `checked` though.",
        "human_words": "There should be a way do do `<input type=\"checkbox\" indeterminate={true} />` or similar \u2013 right now the attribute is ignored. Need to figure out how this interacts with `checked` though.",
        "human_words_regrex": "There should be a way do do `` or similar \u2013 right now the attribute is ignored. Need to figure out how this interacts with `checked` though.",
        "human_words_stopwords_removal_lemmatization": "way `` similar \u2013 right attribute ignored . need figure interacts ` checked ` though .",
        "title_stopwords_removal_lemmatization": "add way specify indeterminate checkboxes"
    },
    {
        "issue_id": 37201374,
        "title": "Add api for focus management",
        "label": [
            "Type: Feature Request",
            "Component: DOM",
            "Resolution: Backlog"
        ],
        "date": "2014-07-05T16:05:32Z",
        "status": "open",
        "description": "There are currently a couple of problems with focus management in React.\n## current problems\n- `this.getDOMElement().focus()`\n\ndoes not guarantee the node is on a document/visible. visibility can be hard to detect due to other components firing render().\n- `this.refs.x.getDOMElement().focus()`\n\ndoes not guarantee that x has finished any pending renders. if `x` renders, focus is lost.\n- `componentDidUpdate`\n\nthis fires on the child nodes before parents so in the case of:\n\n```\n<ul style=\"display:none\">\n  <li><button>can't focus</button></li>\n</ul>\n```\n\nif we want to show the `<ul/>` and focus the button.\n\nthe component of the `<button/>` focusing during componentDidUpdate has no affect because the `<ul/>` is still hidden.\n## discussion\n\nif looks like some of the PRs to react are using raf or timeouts to achieve fixes to the problems listed. This can cause race conditions, and can be fixed with a lifeCycle addition, or just a hidden lifeCycle purely for focus management.\n\nThe issue comes down to not having a lifecycle able to fire a function after _all_ rendering is done, not just an individual component.\n\nI would suggest we add a simple API of component.blur()/component.focus() that queues the requests and fires them after all rendering is done. The fix is fairly simple, but I wonder how people feel about this.\n",
        "remove_template_description": "There are currently a couple of problems with focus management in React. ## current problems - `this.getDOMElement().focus()`  does not guarantee the node is on a document/visible. visibility can be hard to detect due to other components firing render(). - `this.refs.x.getDOMElement().focus()`  does not guarantee that x has finished any pending renders. if `x` renders, focus is lost. - `componentDidUpdate`  this fires on the child nodes before parents so in the case of:  ``` <ul style=\"display:none\">   <li><button>can't focus</button></li> </ul> ```  if we want to show the `<ul/>` and focus the button.  the component of the `<button/>` focusing during componentDidUpdate has no affect because the `<ul/>` is still hidden. ## discussion  if looks like some of the PRs to react are using raf or timeouts to achieve fixes to the problems listed. This can cause race conditions, and can be fixed with a lifeCycle addition, or just a hidden lifeCycle purely for focus management.  The issue comes down to not having a lifecycle able to fire a function after _all_ rendering is done, not just an individual component.  I would suggest we add a simple API of component.blur()/component.focus() that queues the requests and fires them after all rendering is done. The fix is fairly simple, but I wonder how people feel about this.",
        "human_words": "There are currently a couple of problems with focus management in React. ## current problems - `this.getDOMElement().focus()`  does not guarantee the node is on a document/visible. visibility can be hard to detect due to other components firing render(). - `this.refs.x.getDOMElement().focus()`  does not guarantee that x has finished any pending renders. if `x` renders, focus is lost. - `componentDidUpdate`  this fires on the child nodes before parents so in the case of:    if we want to show the `<ul/>` and focus the button.  the component of the `<button/>` focusing during componentDidUpdate has no affect because the `<ul/>` is still hidden. ## discussion  if looks like some of the PRs to react are using raf or timeouts to achieve fixes to the problems listed. This can cause race conditions, and can be fixed with a lifeCycle addition, or just a hidden lifeCycle purely for focus management.  The issue comes down to not having a lifecycle able to fire a function after _all_ rendering is done, not just an individual component.  I would suggest we add a simple API of component.blur()/component.focus() that queues the requests and fires them after all rendering is done. The fix is fairly simple, but I wonder how people feel about this.",
        "human_words_regrex": "There are currently a couple of problems with focus management in React. ## current problems - `this.getDOMElement().focus()` does not guarantee the node is on a document/visible. visibility can be hard to detect due to other components firing render(). - `this.refs.x.getDOMElement().focus()` does not guarantee that x has finished any pending renders. if `x` renders, focus is lost. - `componentDidUpdate` this fires on the child nodes before parents so in the case of: if we want to show the `` and focus the button. the component of the `` focusing during componentDidUpdate has no affect because the `` is still hidden. ## discussion if looks like some of the PRs to react are using raf or timeouts to achieve fixes to the problems listed. This can cause race conditions, and can be fixed with a lifeCycle addition, or just a hidden lifeCycle purely for focus management. The issue comes down to not having a lifecycle able to fire a function after _all_ rendering is done, not just an individual component. I would suggest we add a simple API of component.blur()/component.focus() that queues the requests and fires them after all rendering is done. The fix is fairly simple, but I wonder how people feel about this.",
        "human_words_stopwords_removal_lemmatization": "currently couple problem focus management react . # # current problem - ` this.getdomelement ( ) .focus ( ) ` guarantee node document/visible . visibility hard detect due component firing render ( ) . - ` this.refs.x.getdomelement ( ) .focus ( ) ` guarantee x finished pending render . ` x ` render , focus lost . - ` componentdidupdate ` fire child node parent case : want show `` focus button . component `` focusing componentdidupdate affect `` still hidden . # # discussion look like pr react using raf timeouts achieve fix problem listed . cause race condition , fixed lifecycle addition , hidden lifecycle purely focus management . issue come lifecycle able fire function _all_ rendering done , individual component . would suggest add simple api component.blur ( ) /component.focus ( ) queue request fire rendering done . fix fairly simple , wonder people feel .",
        "title_stopwords_removal_lemmatization": "add api focus management"
    },
    {
        "issue_id": 36799396,
        "title": "Wouldn't it be cool if className could inject an object into classSet?",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2014-06-30T13:56:30Z",
        "status": "closed",
        "description": "Sort of a stray thought, but what if className could pass an object to the `classSet` addon?\n\n``` javascript\nrender() {\n    return (\n        <div className={{ message: true, 'is-active': this.state.isActive }}>\n            { this.props.message }\n        </div>\n    )\n}\n```\n",
        "remove_template_description": "Sort of a stray thought, but what if className could pass an object to the `classSet` addon?  ``` javascript render() {     return (         <div className={{ message: true, 'is-active': this.state.isActive }}>             { this.props.message }         </div>     ) } ```",
        "human_words": "Sort of a stray thought, but what if className could pass an object to the `classSet` addon?  ",
        "human_words_regrex": "Sort of a stray thought, but what if className could pass an object to the `classSet` addon? ",
        "human_words_stopwords_removal_lemmatization": "sort stray thought , classname could pas object ` classset ` addon ?",
        "title_stopwords_removal_lemmatization": "would n't cool classname could inject object classset ?"
    },
    {
        "issue_id": 36686067,
        "title": "Add fail-fast mode to React",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2014-06-27T17:12:15Z",
        "status": "closed",
        "description": "When using components with missing/invalid prop, then a warning is logged.\nSame when a child key was not provided.\n\nI would like an error to be thrown instead.\n\nThis has already been discussed on some issues like: https://github.com/facebook/react/issues/1587\n\nBy the way, I totally support this related issue, to ensure proper Proptype documentation of all components, but would require an error instead of a warning :)\n\nThe more we fail in dev, the better. It would be nice to be able to use React in a very strict way, by using some configuration attribute or something...\n\nOne other thing I would probably add is to enforce all components have a name.\nSee https://github.com/facebook/react/issues/1751\n",
        "remove_template_description": "When using components with missing/invalid prop, then a warning is logged. Same when a child key was not provided.  I would like an error to be thrown instead.  This has already been discussed on some issues like: https://github.com/facebook/react/issues/1587  By the way, I totally support this related issue, to ensure proper Proptype documentation of all components, but would require an error instead of a warning :)  The more we fail in dev, the better. It would be nice to be able to use React in a very strict way, by using some configuration attribute or something...  One other thing I would probably add is to enforce all components have a name. See https://github.com/facebook/react/issues/1751",
        "human_words": "When using components with missing/invalid prop, then a warning is logged. Same when a child key was not provided.  I would like an error to be thrown instead.  This has already been discussed on some issues like: https://github.com/facebook/react/issues/1587  By the way, I totally support this related issue, to ensure proper Proptype documentation of all components, but would require an error instead of a warning :)  The more we fail in dev, the better. It would be nice to be able to use React in a very strict way, by using some configuration attribute or something...  One other thing I would probably add is to enforce all components have a name. See https://github.com/facebook/react/issues/1751",
        "human_words_regrex": "When using components with missing/invalid prop, then a warning is logged. Same when a child key was not provided. I would like an error to be thrown instead. This has already been discussed on some issues like:  By the way, I totally support this related issue, to ensure proper Proptype documentation of all components, but would require an error instead of a warning :) The more we fail in dev, the better. It would be nice to be able to use React in a very strict way, by using some configuration attribute or something... One other thing I would probably add is to enforce all components have a name. See ",
        "human_words_stopwords_removal_lemmatization": "using component missing/invalid prop , warning logged . child key provided . would like error thrown instead . already discussed issue like : way , totally support related issue , ensure proper proptype documentation component , would require error instead warning : ) fail dev , better . would nice able use react strict way , using configuration attribute something ... one thing would probably add enforce component name . see",
        "title_stopwords_removal_lemmatization": "add fail-fast mode react"
    },
    {
        "issue_id": 36379404,
        "title": "Support asynchronous server rendering (waiting for data before rendering)",
        "label": [
            "Type: Feature Request",
            "Component: Server Rendering",
            "Component: Component API",
            "Resolution: Backlog"
        ],
        "date": "2014-06-24T12:36:38Z",
        "status": "open",
        "description": "It would seriously ease the process of building something isomorphic if componentWillMount could return a promise and that react would delay rendering until that promise is resolved. I have seen attempt of doing something like that in react-router and rrouter, however giving this responsibility to each component instead of a router module would make more sense for me.\n",
        "remove_template_description": "It would seriously ease the process of building something isomorphic if componentWillMount could return a promise and that react would delay rendering until that promise is resolved. I have seen attempt of doing something like that in react-router and rrouter, however giving this responsibility to each component instead of a router module would make more sense for me.",
        "human_words": "It would seriously ease the process of building something isomorphic if componentWillMount could return a promise and that react would delay rendering until that promise is resolved. I have seen attempt of doing something like that in react-router and rrouter, however giving this responsibility to each component instead of a router module would make more sense for me.",
        "human_words_regrex": "It would seriously ease the process of building something isomorphic if componentWillMount could return a promise and that react would delay rendering until that promise is resolved. I have seen attempt of doing something like that in react-router and rrouter, however giving this responsibility to each component instead of a router module would make more sense for me.",
        "human_words_stopwords_removal_lemmatization": "would seriously ease process building something isomorphic componentwillmount could return promise react would delay rendering promise resolved . seen attempt something like react-router rrouter , however giving responsibility component instead router module would make sense .",
        "title_stopwords_removal_lemmatization": "support asynchronous server rendering ( waiting data rendering )"
    },
    {
        "issue_id": 36230748,
        "title": "Supported API for making new event types (i.e., event plugin injection)",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2014-06-21T19:52:24Z",
        "status": "closed",
        "description": "I'm trying to implement a scrollable list of items that are tappable on mobile devices. It looks like there are two plugins that address the 'how to tap' problem - https://github.com/facebook/react/blob/master/src/browser/eventPlugins/MobileSafariClickEventPlugin.js & https://github.com/facebook/react/blob/master/src/browser/eventPlugins/TapEventPlugin.js .\n\nI'm confused about Plugins: they [aren't mentioned in the docs](http://facebook.github.io/react/docs/getting-started.html), and it's unclear if they're things that you can build in runtime, with `require('react')` or which [require recompilation with Grunt](https://github.com/facebook/react/issues/436). Is the plugin system itself in flux? I'd love to help out on [getting these merged](https://github.com/facebook/react/pull/1170) so that developing mobile apps is more straightforward.\n",
        "remove_template_description": "I'm trying to implement a scrollable list of items that are tappable on mobile devices. It looks like there are two plugins that address the 'how to tap' problem - https://github.com/facebook/react/blob/master/src/browser/eventPlugins/MobileSafariClickEventPlugin.js & https://github.com/facebook/react/blob/master/src/browser/eventPlugins/TapEventPlugin.js .  I'm confused about Plugins: they [aren't mentioned in the docs](http://facebook.github.io/react/docs/getting-started.html), and it's unclear if they're things that you can build in runtime, with `require('react')` or which [require recompilation with Grunt](https://github.com/facebook/react/issues/436). Is the plugin system itself in flux? I'd love to help out on [getting these merged](https://github.com/facebook/react/pull/1170) so that developing mobile apps is more straightforward.",
        "human_words": "I'm trying to implement a scrollable list of items that are tappable on mobile devices. It looks like there are two plugins that address the 'how to tap' problem - https://github.com/facebook/react/blob/master/src/browser/eventPlugins/MobileSafariClickEventPlugin.js & https://github.com/facebook/react/blob/master/src/browser/eventPlugins/TapEventPlugin.js .  I'm confused about Plugins: they [aren't mentioned in the docs](http://facebook.github.io/react/docs/getting-started.html), and it's unclear if they're things that you can build in runtime, with `require('react')` or which [require recompilation with Grunt](https://github.com/facebook/react/issues/436). Is the plugin system itself in flux? I'd love to help out on [getting these merged](https://github.com/facebook/react/pull/1170) so that developing mobile apps is more straightforward.",
        "human_words_regrex": "I'm trying to implement a scrollable list of items that are tappable on mobile devices. It looks like there are two plugins that address the 'how to tap' problem -  &  . I'm confused about Plugins: they , and it's unclear if they're things that you can build in runtime, with `require('react')` or which . Is the plugin system itself in flux? I'd love to help out on  so that developing mobile apps is more straightforward.",
        "human_words_stopwords_removal_lemmatization": "'m trying implement scrollable list item tappable mobile device . look like two plugins address 'how tap ' problem - & . 'm confused plugins : , 's unclear 're thing build runtime , ` require ( 'react ' ) ` . plugin system flux ? 'd love help developing mobile apps straightforward .",
        "title_stopwords_removal_lemmatization": "supported api making new event type ( i.e. , event plugin injection )"
    },
    {
        "issue_id": 31181355,
        "title": "`render` as a function of props and state",
        "label": [
            "Type: Feature Request",
            "Component: Component API"
        ],
        "date": "2014-04-09T18:15:50Z",
        "status": "closed",
        "description": "This comes from my discussion with several people around animation, but I feel like it's important enough to warrant its own issue.\n\nWe already insist that `render` should be a pure function of `this.props` and `this.state`. How about taking this further and pass those in CompositeComponent? This way we can write:\n\n``` html\nrender: function(props, state) {\n  return <div>{props.something}</div>;\n}\n```\n\nWhile most of the time we'll still call `render(this.props, this.state)` internally, with this we will be able to do `render(somePrevProps, someTestState)` from React or even from the user. Being able to \"test the water\" would be very valuable in the future. For example:\n\n``` js\ncomponentWillReceiveProps: function(nextProps) {\n  var result1 = this.render(this.props, this.state);\n  var result2 = this.render(nextProps, this.state);\n  // Collection of changed stuff. Good for preparing mounting/unmounting animations or such logic.\n  React.reconciler.getDiff(result1, result2);\n  this.setState({...});\n}\n```\n\nI've heard this can also solve some problems with pendingState? Not too familiar with the issue.\n@jordwalke @sebmarkbage @petehunt \n",
        "remove_template_description": "This comes from my discussion with several people around animation, but I feel like it's important enough to warrant its own issue.  We already insist that `render` should be a pure function of `this.props` and `this.state`. How about taking this further and pass those in CompositeComponent? This way we can write:  ``` html render: function(props, state) {   return <div>{props.something}</div>; } ```  While most of the time we'll still call `render(this.props, this.state)` internally, with this we will be able to do `render(somePrevProps, someTestState)` from React or even from the user. Being able to \"test the water\" would be very valuable in the future. For example:  ``` js componentWillReceiveProps: function(nextProps) {   var result1 = this.render(this.props, this.state);   var result2 = this.render(nextProps, this.state);   // Collection of changed stuff. Good for preparing mounting/unmounting animations or such logic.   React.reconciler.getDiff(result1, result2);   this.setState({...}); } ```  I've heard this can also solve some problems with pendingState? Not too familiar with the issue. @jordwalke @sebmarkbage @petehunt",
        "human_words": "This comes from my discussion with several people around animation, but I feel like it's important enough to warrant its own issue.  We already insist that `render` should be a pure function of `this.props` and `this.state`. How about taking this further and pass those in CompositeComponent? This way we can write:    While most of the time we'll still call `render(this.props, this.state)` internally, with this we will be able to do `render(somePrevProps, someTestState)` from React or even from the user. Being able to \"test the water\" would be very valuable in the future. For example:    I've heard this can also solve some problems with pendingState? Not too familiar with the issue. @jordwalke @sebmarkbage @petehunt",
        "human_words_regrex": "This comes from my discussion with several people around animation, but I feel like it's important enough to warrant its own issue. We already insist that `render` should be a pure function of `this.props` and `this.state`. How about taking this further and pass those in CompositeComponent? This way we can write: While most of the time we'll still call `render(this.props, this.state)` internally, with this we will be able to do `render(somePrevProps, someTestState)` from React or even from the user. Being able to \"test the water\" would be very valuable in the future. For example: I've heard this can also solve some problems with pendingState? Not too familiar with the issue. @jordwalke @sebmarkbage @petehunt",
        "human_words_stopwords_removal_lemmatization": "come discussion several people around animation , feel like 's important enough warrant issue . already insist ` render ` pure function ` this.props ` ` this.state ` . taking pas compositecomponent ? way write : time 'll still call ` render ( this.props , this.state ) ` internally , able ` render ( someprevprops , someteststate ) ` react even user . able `` test water '' would valuable future . example : 've heard also solve problem pendingstate ? familiar issue . @ jordwalke @ sebmarkbage @ petehunt",
        "title_stopwords_removal_lemmatization": "` render ` function prop state"
    },
    {
        "issue_id": 30813443,
        "title": "Allow components to opt-out of ReactInputSelection handling?",
        "label": [
            "Type: Feature Request",
            "Component: DOM",
            "Resolution: Stale"
        ],
        "date": "2014-04-03T21:01:36Z",
        "status": "closed",
        "description": "I'm experimenting with building a new text editor component for Atom, and I've noticed that about ~1.4 ms per keystroke are being spent in restore selection functionality. What if I could add a property to my input like `.unsafeSkipSelectionRestoration` or something along those lines to prevent the DOM access this code requires?\n\nBelow is a flame graph showing where the access happens. It's a bit confusing due to the stack depth limit in Chromium's profiler, but I've highlighted the operations in question.\n\n![screenshot_2014-04-03_14_55_17](https://cloud.githubusercontent.com/assets/1789/2609142/b8cd10e2-bb72-11e3-8330-a69fefc1795c.png)\n",
        "remove_template_description": "I'm experimenting with building a new text editor component for Atom, and I've noticed that about ~1.4 ms per keystroke are being spent in restore selection functionality. What if I could add a property to my input like `.unsafeSkipSelectionRestoration` or something along those lines to prevent the DOM access this code requires?  Below is a flame graph showing where the access happens. It's a bit confusing due to the stack depth limit in Chromium's profiler, but I've highlighted the operations in question.  ![screenshot_2014-04-03_14_55_17](https://cloud.githubusercontent.com/assets/1789/2609142/b8cd10e2-bb72-11e3-8330-a69fefc1795c.png)",
        "human_words": "I'm experimenting with building a new text editor component for Atom, and I've noticed that about ~1.4 ms per keystroke are being spent in restore selection functionality. What if I could add a property to my input like `.unsafeSkipSelectionRestoration` or something along those lines to prevent the DOM access this code requires?  Below is a flame graph showing where the access happens. It's a bit confusing due to the stack depth limit in Chromium's profiler, but I've highlighted the operations in question.  ![screenshot_2014-04-03_14_55_17](https://cloud.githubusercontent.com/assets/1789/2609142/b8cd10e2-bb72-11e3-8330-a69fefc1795c.png)",
        "human_words_regrex": "I'm experimenting with building a new text editor component for Atom, and I've noticed that about ~1.4 ms per keystroke are being spent in restore selection functionality. What if I could add a property to my input like `.unsafeSkipSelectionRestoration` or something along those lines to prevent the DOM access this code requires? Below is a flame graph showing where the access happens. It's a bit confusing due to the stack depth limit in Chromium's profiler, but I've highlighted the operations in question. !",
        "human_words_stopwords_removal_lemmatization": "'m experimenting building new text editor component atom , 've noticed ~1.4 m per keystroke spent restore selection functionality . could add property input like ` .unsafeskipselectionrestoration ` something along line prevent dom access code requires ? flame graph showing access happens . 's bit confusing due stack depth limit chromium 's profiler , 've highlighted operation question . !",
        "title_stopwords_removal_lemmatization": "allow component opt-out reactinputselection handling ?"
    },
    {
        "issue_id": 30458520,
        "title": "Don't give key warning when rendering to static markup",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2014-03-30T03:51:57Z",
        "status": "closed",
        "description": "Not a huge deal, but a bit silly since this markup won't be mounted.\n",
        "remove_template_description": "Not a huge deal, but a bit silly since this markup won't be mounted.",
        "human_words": "Not a huge deal, but a bit silly since this markup won't be mounted.",
        "human_words_regrex": "Not a huge deal, but a bit silly since this markup won't be mounted.",
        "human_words_stopwords_removal_lemmatization": "huge deal , bit silly since markup wo n't mounted .",
        "title_stopwords_removal_lemmatization": "n't give key warning rendering static markup"
    },
    {
        "issue_id": 29467710,
        "title": "Stop doing data-*, aria-*, start using dataSet",
        "label": [
            "Type: Feature Request",
            "Component: DOM",
            "Resolution: Backlog",
            "Partner"
        ],
        "date": "2014-03-14T20:30:18Z",
        "status": "open",
        "description": "The DOM already exposes `data-*` as `dataset` but it's doing transformation from hyphenated to camelCase. [From MDN](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement.dataset):\n\n```\n<div id=\"user\" data-id=\"1234567890\" data-user=\"johndoe\" data-date-of-birth>John Doe\n</div>\n\nvar el = document.querySelector('#user');\n\n// el.id == 'user'\n// el.dataset.id === '1234567890'\n// el.dataset.user === 'johndoe'\n// el.dataset.dateOfBirth === ''\n\nel.dataset.dateOfBirth = '1960-10-03'; // set the DOB.\n\n// 'someDataAttr' in el.dataset === false\n\nel.dataset.someDataAttr = 'mydata';\n// 'someDataAttr' in el.dataset === true\n```\n\nWe should just start supporting `dataSet` (because camelCase). This will allow a couple things:\n- easier reasoning about data attributes (`Object.keys(this.props.dataSet)`)\n- easier merging (`<div dataSet={merge(this.props.dataSet, {extra: 'value', override: 'value'})} />`)\n- easier (potentially faster?) updates (just modify `node.dataset`)\n\nWe'll want to do the reverse of what the DOM is doing. eg `<div dataSet={{dateOfBirth: 'val', foo: 'bar'}} />` becomes `<div data-date-of-birth=\"val\" data-foo=\"bar\"></div>`.\n\nTo the best of my knowledge, `aria-*` doesn't have a corresponding API, but we should make it work the same way. I think `ariaSet` makes sense.\n",
        "remove_template_description": "The DOM already exposes `data-*` as `dataset` but it's doing transformation from hyphenated to camelCase. [From MDN](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement.dataset):  ``` <div id=\"user\" data-id=\"1234567890\" data-user=\"johndoe\" data-date-of-birth>John Doe </div>  var el = document.querySelector('#user');  // el.id == 'user' // el.dataset.id === '1234567890' // el.dataset.user === 'johndoe' // el.dataset.dateOfBirth === ''  el.dataset.dateOfBirth = '1960-10-03'; // set the DOB.  // 'someDataAttr' in el.dataset === false  el.dataset.someDataAttr = 'mydata'; // 'someDataAttr' in el.dataset === true ```  We should just start supporting `dataSet` (because camelCase). This will allow a couple things: - easier reasoning about data attributes (`Object.keys(this.props.dataSet)`) - easier merging (`<div dataSet={merge(this.props.dataSet, {extra: 'value', override: 'value'})} />`) - easier (potentially faster?) updates (just modify `node.dataset`)  We'll want to do the reverse of what the DOM is doing. eg `<div dataSet={{dateOfBirth: 'val', foo: 'bar'}} />` becomes `<div data-date-of-birth=\"val\" data-foo=\"bar\"></div>`.  To the best of my knowledge, `aria-*` doesn't have a corresponding API, but we should make it work the same way. I think `ariaSet` makes sense.",
        "human_words": "The DOM already exposes `data-*` as `dataset` but it's doing transformation from hyphenated to camelCase. [From MDN](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement.dataset):    We should just start supporting `dataSet` (because camelCase). This will allow a couple things: - easier reasoning about data attributes (`Object.keys(this.props.dataSet)`) - easier merging (`<div dataSet={merge(this.props.dataSet, {extra: 'value', override: 'value'})} />`) - easier (potentially faster?) updates (just modify `node.dataset`)  We'll want to do the reverse of what the DOM is doing. eg `<div dataSet={{dateOfBirth: 'val', foo: 'bar'}} />` becomes `<div data-date-of-birth=\"val\" data-foo=\"bar\"></div>`.  To the best of my knowledge, `aria-*` doesn't have a corresponding API, but we should make it work the same way. I think `ariaSet` makes sense.",
        "human_words_regrex": "The DOM already exposes `data-*` as `dataset` but it's doing transformation from hyphenated to camelCase. : We should just start supporting `dataSet` (because camelCase). This will allow a couple things: - easier reasoning about data attributes (`Object.keys(this.props.dataSet)`) - easier merging (``) - easier (potentially faster?) updates (just modify `node.dataset`) We'll want to do the reverse of what the DOM is doing. eg `` becomes ``. To the best of my knowledge, `aria-*` doesn't have a corresponding API, but we should make it work the same way. I think `ariaSet` makes sense.",
        "human_words_stopwords_removal_lemmatization": "dom already expose ` data- * ` ` dataset ` 's transformation hyphenated camelcase . : start supporting ` dataset ` ( camelcase ) . allow couple thing : - easier reasoning data attribute ( ` object.keys ( this.props.dataset ) ` ) - easier merging ( `` ) - easier ( potentially faster ? ) update ( modify ` node.dataset ` ) 'll want reverse dom . eg `` becomes `` . best knowledge , ` aria- * ` n't corresponding api , make work way . think ` ariaset ` make sense .",
        "title_stopwords_removal_lemmatization": "stop data- * , aria- * , start using dataset"
    },
    {
        "issue_id": 28725144,
        "title": "Add support in the future for custom elements",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2014-03-04T17:40:56Z",
        "status": "closed",
        "description": "It would be really cool to allow view to be custom elements. http://coding.smashingmagazine.com/2014/03/04/introduction-to-custom-elements\n",
        "remove_template_description": "It would be really cool to allow view to be custom elements. http://coding.smashingmagazine.com/2014/03/04/introduction-to-custom-elements",
        "human_words": "It would be really cool to allow view to be custom elements. http://coding.smashingmagazine.com/2014/03/04/introduction-to-custom-elements",
        "human_words_regrex": "It would be really cool to allow view to be custom elements. ",
        "human_words_stopwords_removal_lemmatization": "would really cool allow view custom element .",
        "title_stopwords_removal_lemmatization": "add support future custom element"
    },
    {
        "issue_id": 27946093,
        "title": "\"Mixed in\" callback for mixins",
        "label": [
            "Type: Feature Request",
            "Component: Core Utilities"
        ],
        "date": "2014-02-20T09:07:13Z",
        "status": "closed",
        "description": "What do you think of a \"mixed in\" callback for mixins which is called at the moment of applying a mixin to a component with component's spec as an argument?\n\n```\nvar SomeTrickeryMixin = {\n  mixin: function(spec) {\n    // redefine .render() or do some other dangerous things\n  },\n\n  ...\n};\n```\n\nBesides overriding `.render()` such callbacks can be used when you want to implement a \"custom policy\" for some methods (wrap method, call-before, call-after, ...).\n\nAs a downside that would make things a little less straightforward from a (mixin) user perspective.\n",
        "remove_template_description": "What do you think of a \"mixed in\" callback for mixins which is called at the moment of applying a mixin to a component with component's spec as an argument?  ``` var SomeTrickeryMixin = {   mixin: function(spec) {     // redefine .render() or do some other dangerous things   },    ... }; ```  Besides overriding `.render()` such callbacks can be used when you want to implement a \"custom policy\" for some methods (wrap method, call-before, call-after, ...).  As a downside that would make things a little less straightforward from a (mixin) user perspective.",
        "human_words": "What do you think of a \"mixed in\" callback for mixins which is called at the moment of applying a mixin to a component with component's spec as an argument?    Besides overriding `.render()` such callbacks can be used when you want to implement a \"custom policy\" for some methods (wrap method, call-before, call-after, ...).  As a downside that would make things a little less straightforward from a (mixin) user perspective.",
        "human_words_regrex": "What do you think of a \"mixed in\" callback for mixins which is called at the moment of applying a mixin to a component with component's spec as an argument? Besides overriding `.render()` such callbacks can be used when you want to implement a \"custom policy\" for some methods (wrap method, call-before, call-after, ...). As a downside that would make things a little less straightforward from a (mixin) user perspective.",
        "human_words_stopwords_removal_lemmatization": "think `` mixed '' callback mixins called moment applying mixin component component 's spec argument ? besides overriding ` .render ( ) ` callback used want implement `` custom policy '' method ( wrap method , call-before , call-after , ... ) . downside would make thing little le straightforward ( mixin ) user perspective .",
        "title_stopwords_removal_lemmatization": "`` mixed '' callback mixins"
    },
    {
        "issue_id": 25223795,
        "title": "Allow rendering into a document fragment",
        "label": [
            "Type: Feature Request"
        ],
        "date": "2014-01-08T07:44:02Z",
        "status": "closed",
        "description": "Shadow roots have nodeType == DOCUMENT_FRAGMENT_NODE. When trying to render into one, react throws an error:\n\n```\nException caught during observer callback:\n  Error: Invariant Violation: _registerComponent(...):\n    Target container is not a DOM element.\n```\n\nThere is an explicit check to only allow rendering into ELEMENT_NODE_TYPE and DOC_NODE_TYPE. Is there any particular reason why document fragments are excluded there?\n",
        "remove_template_description": "Shadow roots have nodeType == DOCUMENT_FRAGMENT_NODE. When trying to render into one, react throws an error:  ``` Exception caught during observer callback:   Error: Invariant Violation: _registerComponent(...):     Target container is not a DOM element. ```  There is an explicit check to only allow rendering into ELEMENT_NODE_TYPE and DOC_NODE_TYPE. Is there any particular reason why document fragments are excluded there?",
        "human_words": "Shadow roots have nodeType == DOCUMENT_FRAGMENT_NODE. When trying to render into one, react throws an error:    There is an explicit check to only allow rendering into ELEMENT_NODE_TYPE and DOC_NODE_TYPE. Is there any particular reason why document fragments are excluded there?",
        "human_words_regrex": "Shadow roots have nodeType == DOCUMENT_FRAGMENT_NODE. When trying to render into one, react throws an error: There is an explicit check to only allow rendering into ELEMENT_NODE_TYPE and DOC_NODE_TYPE. Is there any particular reason why document fragments are excluded there?",
        "human_words_stopwords_removal_lemmatization": "shadow root nodetype == document_fragment_node . trying render one , react throw error : explicit check allow rendering element_node_type doc_node_type . particular reason document fragment excluded ?",
        "title_stopwords_removal_lemmatization": "allow rendering document fragment"
    },
    {
        "issue_id": 22385205,
        "title": "Support Pointer events specification",
        "label": [
            "Type: Feature Request",
            "Component: DOM",
            "HTML",
            "Difficulty: medium"
        ],
        "date": "2013-11-09T11:57:17Z",
        "status": "closed",
        "description": "What is your approach to IE10 touch events?\n\nHammer.js checks `window.navigator.pointerEnabled || window.navigator.msPointerEnabled` and then switches `touchstart`, `touchmove`, `touchend touchcancel` to `pointerdown MSPointerDown`, `pointermove MSPointerMove`, `pointerup pointercancel MSPointerUp MSPointerCancel`.\n",
        "remove_template_description": "What is your approach to IE10 touch events?  Hammer.js checks `window.navigator.pointerEnabled || window.navigator.msPointerEnabled` and then switches `touchstart`, `touchmove`, `touchend touchcancel` to `pointerdown MSPointerDown`, `pointermove MSPointerMove`, `pointerup pointercancel MSPointerUp MSPointerCancel`.",
        "human_words": "What is your approach to IE10 touch events?  Hammer.js checks `window.navigator.pointerEnabled || window.navigator.msPointerEnabled` and then switches `touchstart`, `touchmove`, `touchend touchcancel` to `pointerdown MSPointerDown`, `pointermove MSPointerMove`, `pointerup pointercancel MSPointerUp MSPointerCancel`.",
        "human_words_regrex": "What is your approach to IE10 touch events? Hammer.js checks `window.navigator.pointerEnabled || window.navigator.msPointerEnabled` and then switches `touchstart`, `touchmove`, `touchend touchcancel` to `pointerdown MSPointerDown`, `pointermove MSPointerMove`, `pointerup pointercancel MSPointerUp MSPointerCancel`.",
        "human_words_stopwords_removal_lemmatization": "approach ie10 touch event ? hammer.js check ` window.navigator.pointerenabled || window.navigator.mspointerenabled ` switch ` touchstart ` , ` touchmove ` , ` touchend touchcancel ` ` pointerdown mspointerdown ` , ` pointermove mspointermove ` , ` pointerup pointercancel mspointerup mspointercancel ` .",
        "title_stopwords_removal_lemmatization": "support pointer event specification"
    },
    {
        "issue_id": 18382292,
        "title": "Declarative API for installing global DOM event handlers",
        "label": [
            "Type: Feature Request",
            "Component: DOM",
            "Resolution: Backlog",
            "Partner"
        ],
        "date": "2013-08-21T21:41:26Z",
        "status": "open",
        "description": "#284 reminded me that one thing I've sometimes wanted is to install a handler on window for `keypress` (for keyboard shortcuts) or `scroll`. Right now I can just do `window.addEventListener` in `componentDidMount` but since React is listening already, it would be nice if there were some way for me to intercept those events. (In addition, receiving normalized synthetic events is generally more useful.)\n",
        "remove_template_description": "#284 reminded me that one thing I've sometimes wanted is to install a handler on window for `keypress` (for keyboard shortcuts) or `scroll`. Right now I can just do `window.addEventListener` in `componentDidMount` but since React is listening already, it would be nice if there were some way for me to intercept those events. (In addition, receiving normalized synthetic events is generally more useful.)",
        "human_words": "#284 reminded me that one thing I've sometimes wanted is to install a handler on window for `keypress` (for keyboard shortcuts) or `scroll`. Right now I can just do `window.addEventListener` in `componentDidMount` but since React is listening already, it would be nice if there were some way for me to intercept those events. (In addition, receiving normalized synthetic events is generally more useful.)",
        "human_words_regrex": "#284 reminded me that one thing I've sometimes wanted is to install a handler on window for `keypress` (for keyboard shortcuts) or `scroll`. Right now I can just do `window.addEventListener` in `componentDidMount` but since React is listening already, it would be nice if there were some way for me to intercept those events. (In addition, receiving normalized synthetic events is generally more useful.)",
        "human_words_stopwords_removal_lemmatization": "# 284 reminded one thing 've sometimes wanted install handler window ` keypress ` ( keyboard shortcut ) ` scroll ` . right ` window.addeventlistener ` ` componentdidmount ` since react listening already , would nice way intercept event . ( addition , receiving normalized synthetic event generally useful . )",
        "title_stopwords_removal_lemmatization": "declarative api installing global dom event handler"
    }
]