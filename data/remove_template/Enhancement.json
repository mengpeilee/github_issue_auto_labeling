[
    {
        "issue_id": 1420114897,
        "title": "Bug: react-dom/server renderToString don't support array style(react-native ssr)",
        "label": [
            "Type: Enhancement",
            "Component: DOM",
            "Status: Unconfirmed"
        ],
        "date": "2022-10-24T02:43:29Z",
        "status": "open",
        "description": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 17.0.2\r\n\r\n## Steps To Reproduce\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nCode example: `<View style={[{fontSize: '12px'}, {lineHeight: '20px'}]}/>`\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n`style=\"0:[object Object];1:[object Object]\"`\r\n\r\n## The expected behavior\r\n`style=\"font-size:12px;line-height:20px\"`",
        "remove_template_description": "<!--    Please provide a clear and concise description of what the bug is. Include    screenshots if needed. Please test using the latest version of the relevant    React packages to make sure your issue has not already been fixed.  -->    React version: 17.0.2        <!--    Your bug will get fixed much faster if we can run your code and it doesn't    have dependencies other than React. Issues without reproduction steps or    code examples may be immediately closed as not actionable.  -->    Code example: `<View style={[{fontSize: '12px'}, {lineHeight: '20px'}]}/>`    <!--    Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a    repository on GitHub, or provide a minimal code example that reproduces the    problem. You may provide a screenshot of the application if you think it is    relevant to your bug report. Here are some tips for providing a minimal    example: https://stackoverflow.com/help/mcve.  -->      `style=\"0:[object Object];1:[object Object]\"`      `style=\"font-size:12px;line-height:20px\"`"
    },
    {
        "issue_id": 1419342732,
        "title": "Compile JSX directly to VDom for improve draw of view performance and allow progressive view rendering",
        "label": [
            "Type: Enhancement",
            "Status: Unconfirmed"
        ],
        "date": "2022-10-22T14:57:06Z",
        "status": "open",
        "description": "Right now JSX compiles to array of React.createElement or _jsx function. Each function calls for make VDom elements in runtime. I suggest compiling JSX directly to VDom. Because each function call in javascript has its own cost. On my PC its 2 nanoseonds. On 1000 JSX elements its 2 milliseconds. \r\n\r\nThis (call function) operation can be done not at runtime, but at the time of compilation. This optimization will improve the speed of JSX calculation by 25-50%.\r\n\r\n<details>\r\n  <summary>Performance test</summary>\r\n  \r\nThe simplest speed test. Can be copied to a file and run in nodejs.\r\nOn my PC have next result:\r\ntime-jsx: 0.22ms\r\ntime-vdom: 0.15ms\r\n\r\nOn a real application, the gap can be much larger.\r\n\r\n  ```javascript\r\n\r\nconst ce = (elem, props, childrens) => {\r\n    return {\r\n        type: elem,\r\n        props,\r\n        childrens\r\n    }\r\n}\r\n\r\nconst compJsx = () => {\r\n    return (\r\n        ce(\r\n            \"div\",\r\n            null,\r\n            [\r\n                ce(\r\n                    \"div\",\r\n                    null,\r\n                    [\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        )\r\n                    ]\r\n                ),\r\n                ce(\r\n                    \"div\",\r\n                    null,\r\n                    [\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        )\r\n                    ]\r\n                ),\r\n                ce(\r\n                    \"div\",\r\n                    null,\r\n                    [\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        )\r\n                    ]\r\n                ),\r\n                ce(\r\n                    \"div\",\r\n                    null,\r\n                    [\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        )\r\n                    ]\r\n                ),\r\n                ce(\r\n                    \"div\",\r\n                    null,\r\n                    [\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        )\r\n                    ]\r\n                ),\r\n                ce(\r\n                    \"div\",\r\n                    null,\r\n                    [\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        )\r\n                    ]\r\n                ),\r\n                ce(\r\n                    \"div\",\r\n                    null,\r\n                    [\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        )\r\n                    ]\r\n                ),\r\n                ce(\r\n                    \"div\",\r\n                    null,\r\n                    [\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        )\r\n                    ]\r\n                ),\r\n                ce(\r\n                    \"div\",\r\n                    null,\r\n                    [\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        )\r\n                    ]\r\n                ),\r\n                ce(\r\n                    \"div\",\r\n                    null,\r\n                    [\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        ),\r\n                        ce(\r\n                            \"div\",\r\n                            null,\r\n                            \"\u0422\u0435\u043a\u0441\u0442\"\r\n                        )\r\n                    ]\r\n                )\r\n            ]\r\n        )\r\n    );\r\n}\r\n\r\nconsole.time(\"time-jsx\");\r\n\r\nconst resultJsx = compJsx();\r\n\r\nconsole.timeEnd(\"time-jsx\");\r\n\r\nconst compVDom = () => {\r\n    return {\r\n        \"type\": \"div\",\r\n        \"props\": null,\r\n        \"childrens\": [{\r\n                \"type\": \"div\",\r\n                \"props\": null,\r\n                \"childrens\": [{\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\":\r\n                        \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\"\r\n                        : null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }\r\n                ]\r\n            }, {\r\n                \"type\": \"div\",\r\n                \"props\": null,\r\n                \"childrens\": [{\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\":\r\n                        \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }\r\n                ]\r\n            }, {\r\n                \"type\": \"div\",\r\n                \"props\": null,\r\n                \"childrens\": [{\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\":\r\n                        \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }\r\n                ]\r\n            }, {\r\n                \"type\": \"div\",\r\n                \"props\": null,\r\n                \"childrens\": [{\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }\r\n                ]\r\n            }, {\r\n                \"type\": \"div\",\r\n                \"props\": null,\r\n                \"childrens\": [{\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }\r\n                ]\r\n            }, {\r\n                \"type\"\r\n                : \"div\",\r\n                \"props\": null,\r\n                \"childrens\": [{\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }\r\n                ]\r\n            }, {\r\n                \"type\": \"div\",\r\n                \"props\": null,\r\n                \"childrens\": [{\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }\r\n                ]\r\n            }, {\r\n                \"type\": \"div\",\r\n                \"props\": null,\r\n                \"childrens\": [{\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }\r\n                ]\r\n            }, {\r\n                \"type\": \"div\",\r\n                \"props\": null,\r\n                \"childrens\": [{\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }\r\n                ]\r\n            }, {\r\n                \"type\": \"div\",\r\n                \"props\": null,\r\n                \"childrens\": [{\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }, {\r\n                        \"type\": \"div\",\r\n                        \"props\": null,\r\n                        \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"\r\n                    }\r\n                ]\r\n            }\r\n        ]\r\n    };\r\n}\r\n\r\nconsole.time(\"time-vdom\");\r\n\r\nconst resultVDom = compVDom();\r\n\r\nconsole.timeEnd(\"time-vdom\");\r\n\r\nconsole.log(\"Result JSX length:\", JSON.stringify(resultJsx).length);\r\n\r\nconsole.log(\"Result VDom length:\", JSON.stringify(resultVDom).length);\r\n  ```\r\n  \r\n</details>\r\n\r\n\r\n### also...\r\n\r\nThis optimization will allow progressive view calculation and rendering.\r\n\r\nThe current implementation has the following problem. Calculation is made from depth to upwards. These calculations cannot be interrupted. Heavy calculations will block animations in the browser.\r\n```javascript\r\n_jsx(\r\n    \"div\",\r\n    {},\r\n    [\r\n        _jsx(\r\n            \"div\",\r\n            {},\r\n            [\r\n                _jsx(        // <-- must call first\r\n                    \"div\",\r\n                    {},\r\n                    \"\u0422\u0435\u043a\u0441\u0442\"\r\n                )\r\n            ]\r\n        )\r\n    ]\r\n)\r\n```\r\n\r\nIn VDom version you can make calculation of dom from top to bottom and make separation of calculations by 16 ms for unblocked browser animations.\r\n```javascript\r\n{\r\n    type: \"div\", // <-- must call first\r\n    props: {},\r\n    childrens: [\r\n        {\r\n            type: \"div\",\r\n            props: {},\r\n            childrens: [\r\n                {\r\n                    type: \"div\",\r\n                    props: {},\r\n                    childrens: \"\u0422\u0435\u043a\u0441\u0442\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}\r\n```",
        "remove_template_description": "Right now JSX compiles to array of React.createElement or _jsx function. Each function calls for make VDom elements in runtime. I suggest compiling JSX directly to VDom. Because each function call in javascript has its own cost. On my PC its 2 nanoseonds. On 1000 JSX elements its 2 milliseconds.     This (call function) operation can be done not at runtime, but at the time of compilation. This optimization will improve the speed of JSX calculation by 25-50%.    <details>    <summary>Performance test</summary>      The simplest speed test. Can be copied to a file and run in nodejs.  On my PC have next result:  time-jsx: 0.22ms  time-vdom: 0.15ms    On a real application, the gap can be much larger.      ```javascript    const ce = (elem, props, childrens) => {      return {          type: elem,          props,          childrens      }  }    const compJsx = () => {      return (          ce(              \"div\",              null,              [                  ce(                      \"div\",                      null,                      [                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          )                      ]                  ),                  ce(                      \"div\",                      null,                      [                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          )                      ]                  ),                  ce(                      \"div\",                      null,                      [                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          )                      ]                  ),                  ce(                      \"div\",                      null,                      [                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          )                      ]                  ),                  ce(                      \"div\",                      null,                      [                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          )                      ]                  ),                  ce(                      \"div\",                      null,                      [                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          )                      ]                  ),                  ce(                      \"div\",                      null,                      [                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          )                      ]                  ),                  ce(                      \"div\",                      null,                      [                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          )                      ]                  ),                  ce(                      \"div\",                      null,                      [                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          )                      ]                  ),                  ce(                      \"div\",                      null,                      [                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          ),                          ce(                              \"div\",                              null,                              \"\u0422\u0435\u043a\u0441\u0442\"                          )                      ]                  )              ]          )      );  }    console.time(\"time-jsx\");    const resultJsx = compJsx();    console.timeEnd(\"time-jsx\");    const compVDom = () => {      return {          \"type\": \"div\",          \"props\": null,          \"childrens\": [{                  \"type\": \"div\",                  \"props\": null,                  \"childrens\": [{                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\":                          \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\"                          : null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }                  ]              }, {                  \"type\": \"div\",                  \"props\": null,                  \"childrens\": [{                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\":                          \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }                  ]              }, {                  \"type\": \"div\",                  \"props\": null,                  \"childrens\": [{                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\":                          \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }                  ]              }, {                  \"type\": \"div\",                  \"props\": null,                  \"childrens\": [{                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }                  ]              }, {                  \"type\": \"div\",                  \"props\": null,                  \"childrens\": [{                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }                  ]              }, {                  \"type\"                  : \"div\",                  \"props\": null,                  \"childrens\": [{                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }                  ]              }, {                  \"type\": \"div\",                  \"props\": null,                  \"childrens\": [{                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }                  ]              }, {                  \"type\": \"div\",                  \"props\": null,                  \"childrens\": [{                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }                  ]              }, {                  \"type\": \"div\",                  \"props\": null,                  \"childrens\": [{                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }                  ]              }, {                  \"type\": \"div\",                  \"props\": null,                  \"childrens\": [{                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }, {                          \"type\": \"div\",                          \"props\": null,                          \"childrens\": \"\u0422\u0435\u043a\u0441\u0442\"                      }                  ]              }          ]      };  }    console.time(\"time-vdom\");    const resultVDom = compVDom();    console.timeEnd(\"time-vdom\");    console.log(\"Result JSX length:\", JSON.stringify(resultJsx).length);    console.log(\"Result VDom length:\", JSON.stringify(resultVDom).length);    ```      </details>      ### also...    This optimization will allow progressive view calculation and rendering.    The current implementation has the following problem. Calculation is made from depth to upwards. These calculations cannot be interrupted. Heavy calculations will block animations in the browser.  ```javascript  _jsx(      \"div\",      {},      [          _jsx(              \"div\",              {},              [                  _jsx(        // <-- must call first                      \"div\",                      {},                      \"\u0422\u0435\u043a\u0441\u0442\"                  )              ]          )      ]  )  ```    In VDom version you can make calculation of dom from top to bottom and make separation of calculations by 16 ms for unblocked browser animations.  ```javascript  {      type: \"div\", // <-- must call first      props: {},      childrens: [          {              type: \"div\",              props: {},              childrens: [                  {                      type: \"div\",                      props: {},                      childrens: \"\u0422\u0435\u043a\u0441\u0442\"                  }              ]          }      ]  }  ```"
    },
    {
        "issue_id": 1235966167,
        "title": "[Recomendation/Discussion]: Hook-based Context API",
        "label": [
            "Type: Enhancement",
            "Status: Unconfirmed"
        ],
        "date": "2022-05-14T12:48:56Z",
        "status": "open",
        "description": "I would like to say that I'm impressed with how React hooks have revolutionized the React ecosystem, and the Context API. However, I see some major inconsistencies between how the context is read from, and how it is provided. Maybe we we could use a `useProvider(Context, ()=>expr, [deps, ...])` kind of hook (similar to the Vue `provide()` function)?\n```js\nconst IsGuest = createContext(true)\n\nconst Status = () => {\n  const isGuest = useContext(IsGuest)\n  return <span class=\"status\"> {isGuest} </span>\n}\n\nconst App = () => {\n  const [isLoggedIn, setIsLoggedIn] = useState(false)\n  useProvider(isGuest, ()=>!isLoggedIn, [isLoggedIn])\n  return <Status/>\n}\n```\n\nOr maybe a more object-oriented approach?\n```js\nconst IsGuest = createContext(true)\n\nconst Status = () => {\n  const isGuest = IsGuest.useContext() // \ud83d\udc48\n  return <span class=\"status\"> {isGuest} </span>\n}\n\nconst App = () => {\n  const [isLoggedIn, setIsLoggedIn] = useState(false)\n  IsGuest.useProvider(()=>!isLoggedIn, [isLoggedIn]) // \ud83d\udc48\n  return <Status/>\n}\n```\n\nI would like to hear what you all think about this. If you all think the former syntax was preferred, then the `createContext()` function could be removed entirely and replaced with the native `Symbol` constructor.",
        "remove_template_description": "I would like to say that I'm impressed with how React hooks have revolutionized the React ecosystem, and the Context API. However, I see some major inconsistencies between how the context is read from, and how it is provided. Maybe we we could use a `useProvider(Context, ()=>expr, [deps, ...])` kind of hook (similar to the Vue `provide()` function)? ```js const IsGuest = createContext(true)  const Status = () => {   const isGuest = useContext(IsGuest)   return <span class=\"status\"> {isGuest} </span> }  const App = () => {   const [isLoggedIn, setIsLoggedIn] = useState(false)   useProvider(isGuest, ()=>!isLoggedIn, [isLoggedIn])   return <Status/> } ```  Or maybe a more object-oriented approach? ```js const IsGuest = createContext(true)  const Status = () => {   const isGuest = IsGuest.useContext() // \ud83d\udc48   return <span class=\"status\"> {isGuest} </span> }  const App = () => {   const [isLoggedIn, setIsLoggedIn] = useState(false)   IsGuest.useProvider(()=>!isLoggedIn, [isLoggedIn]) // \ud83d\udc48   return <Status/> } ```  I would like to hear what you all think about this. If you all think the former syntax was preferred, then the `createContext()` function could be removed entirely and replaced with the native `Symbol` constructor."
    },
    {
        "issue_id": 1228872273,
        "title": "Default bolean prop named \"show or visible\"",
        "label": [
            "Type: Enhancement",
            "Status: Unconfirmed"
        ],
        "date": "2022-05-08T12:12:37Z",
        "status": "closed",
        "description": "Hi reactjs Team, I suggest that, team should add a new prop for every component that purly used to show or hide component conditionally.\r\ni.e\r\nInstead of writing code like this in JSX.\r\n{show && <Component/>}\r\nwe simply use like this <Component show={true}/> and that's it.",
        "remove_template_description": "Hi reactjs Team, I suggest that, team should add a new prop for every component that purly used to show or hide component conditionally.  i.e  Instead of writing code like this in JSX.  {show && <Component/>}  we simply use like this <Component show={true}/> and that's it."
    },
    {
        "issue_id": 1228585378,
        "title": "classes prop instead of className",
        "label": [
            "Type: Enhancement",
            "Component: DOM",
            "Status: Unconfirmed"
        ],
        "date": "2022-05-07T09:53:02Z",
        "status": "closed",
        "description": "It is often the case that multiple CSS classes are used for an element, and sometimes they are dynamically generated. In such situations the client code needs to concatenate them into a string\r\n```\r\nconst classes = getCSSClasses();\r\nreturn (\r\n    <div className={classes.class1 + \" \" + classes.class2}> foo </div>\r\n);\r\n```\r\n\r\nI always felt the need to be able to pass the classes as an array:\r\n```\r\nconst classes = getCSSClasses();\r\nreturn (\r\n    <div classes={[classes.class1, classes.class2]}> foo </div>\r\n);\r\n```\r\n\r\nIn addition to the convenience of such a property, maybe it could help with performance, in the sense that equality could be checked before string concatenation, and only do the concatenation if the element needs to be rendered.\r\n\r\nThe drawback here is of course the mutable nature of an array. I imagine performance would be better if the array would be immutable. So maybe this new property could work only with some immutable array implementation. Or frozen arrays.\r\n\r\nIn short, I want such a property for convenience, but maybe it also has potential for some performance improvements.",
        "remove_template_description": "It is often the case that multiple CSS classes are used for an element, and sometimes they are dynamically generated. In such situations the client code needs to concatenate them into a string  ```  const classes = getCSSClasses();  return (      <div className={classes.class1 + \" \" + classes.class2}> foo </div>  );  ```    I always felt the need to be able to pass the classes as an array:  ```  const classes = getCSSClasses();  return (      <div classes={[classes.class1, classes.class2]}> foo </div>  );  ```    In addition to the convenience of such a property, maybe it could help with performance, in the sense that equality could be checked before string concatenation, and only do the concatenation if the element needs to be rendered.    The drawback here is of course the mutable nature of an array. I imagine performance would be better if the array would be immutable. So maybe this new property could work only with some immutable array implementation. Or frozen arrays.    In short, I want such a property for convenience, but maybe it also has potential for some performance improvements."
    },
    {
        "issue_id": 1172284213,
        "title": "Suggestion: [eslint-plugin-react-hooks] - exhaustive-deps allow configure `isStableKnownHookValue` for own hooks",
        "label": [
            "Resolution: Duplicate",
            "Type: Enhancement",
            "Status: Unconfirmed",
            "Component: ESLint Rules"
        ],
        "date": "2022-03-17T11:55:37Z",
        "status": "closed",
        "description": "Hi, i have example of own defined hook which returns always memorized callback `setValue`:\r\n\r\n**Problem**\r\n```\r\n   const [value, setValue] = useAppState( ... );\r\n\r\n```\r\nThen `setValue` used in hook which required deps, for example useEffect:\r\n\r\n```\r\n    useEffect(() => {\r\n        if (value != 'a') {\r\n            setValue('a');\r\n        }\r\n    }, [value]);\r\n```\r\n\r\nBut unlike 'useState' this generates an error:\r\n\r\n![image](https://user-images.githubusercontent.com/5655858/158798838-82fb7ffe-9907-4db2-8276-3230a68610a8.png)\r\n\r\nI am found source which contain function to check this here:\r\n\r\nhttps://github.com/facebook/react/blob/9198a5cec0936a21a5ba194a22fcbac03eba5d1d/packages/eslint-plugin-react-hooks/src/ExhaustiveDeps.js\r\n\r\n**Suggestion**\r\nAdd configuration options to set own hooks to be handled as out of the box\r\n\r\n",
        "remove_template_description": "Hi, i have example of own defined hook which returns always memorized callback `setValue`:    **Problem**  ```     const [value, setValue] = useAppState( ... );    ```  Then `setValue` used in hook which required deps, for example useEffect:    ```      useEffect(() => {          if (value != 'a') {              setValue('a');          }      }, [value]);  ```    But unlike 'useState' this generates an error:    ![image](https://user-images.githubusercontent.com/5655858/158798838-82fb7ffe-9907-4db2-8276-3230a68610a8.png)    I am found source which contain function to check this here:    https://github.com/facebook/react/blob/9198a5cec0936a21a5ba194a22fcbac03eba5d1d/packages/eslint-plugin-react-hooks/src/ExhaustiveDeps.js    **Suggestion**  Add configuration options to set own hooks to be handled as out of the box"
    },
    {
        "issue_id": 1084080514,
        "title": "React 18 : Add commitEffects begin and complete hook exposing to customized renderer to improve render performance",
        "label": [
            "Type: Enhancement",
            "Status: Unconfirmed",
            "Component: Reconciler"
        ],
        "date": "2021-12-19T11:56:35Z",
        "status": "open",
        "description": "If developed a customized renderer for kind of RN framework\uff0cit cannot access the exact begin and finish time of commitEffects (commitMutationEffects) , which is a good timing to send batch of node operations to native. We have to collect all placements such as appendChild, insertBefore, removeChild, commitUpdates in an extra task(promise or setTimeout) to implement real batch update for native side, resulting in low render performance. #22946 is the PR\r\n",
        "remove_template_description": "If developed a customized renderer for kind of RN framework\uff0cit cannot access the exact begin and finish time of commitEffects (commitMutationEffects) , which is a good timing to send batch of node operations to native. We have to collect all placements such as appendChild, insertBefore, removeChild, commitUpdates in an extra task(promise or setTimeout) to implement real batch update for native side, resulting in low render performance. #22946 is the PR"
    },
    {
        "issue_id": 1080890681,
        "title": "React 18 - How to detect concurrent feature suspending compatibility",
        "label": [
            "Type: Enhancement",
            "Status: Unconfirmed",
            "Component: Suspense"
        ],
        "date": "2021-12-15T10:55:24Z",
        "status": "closed",
        "description": "Hi,\r\n\r\nHow to detect that the current used React (stable/release) version in an application supports concurrent mode ? Let's say you are authoring a library that should target several react versions, and only add concurrent features if they are relevant.\r\n\r\nI'm doing a [`return typeof React.useSyncExternalStore === \"function\"`](https://github.com/incepter/react-async-states/blob/main/packages/react-async-states/src/helpers/is-concurrent-mode.js#L4) but I am hesitant about it.\r\n\r\nI did create a stackoverflow question about it [here](https://stackoverflow.com/questions/70354232/how-to-detect-react-concurrent-mode)\r\n\r\nThanks in advance\r\n",
        "remove_template_description": "Hi,    How to detect that the current used React (stable/release) version in an application supports concurrent mode ? Let's say you are authoring a library that should target several react versions, and only add concurrent features if they are relevant.    I'm doing a [`return typeof React.useSyncExternalStore === \"function\"`](https://github.com/incepter/react-async-states/blob/main/packages/react-async-states/src/helpers/is-concurrent-mode.js#L4) but I am hesitant about it.    I did create a stackoverflow question about it [here](https://stackoverflow.com/questions/70354232/how-to-detect-react-concurrent-mode)    Thanks in advance"
    },
    {
        "issue_id": 978427841,
        "title": "[Feature Request][eslint-plugin-react-hooks] no-ref-checks, display error when using useRef's return value as condition",
        "label": [
            "Type: Enhancement",
            "Status: Unconfirmed",
            "Component: ESLint Rules"
        ],
        "date": "2021-08-24T19:46:09Z",
        "status": "open",
        "description": "https://github.com/reactjs/rfcs/issues/198\r\nhttps://github.com/yannickcr/eslint-plugin-react/issues/3042\r\n\r\nNot sure whether this belongs in `eslint-plugin-react-hooks` or `eslint-plugin-react`, but a contributor at the latter suggested this to be a more appropriate place. I've opened an issue instead of an RFC to discuss whether this is the appropriate place. https://github.com/yannickcr/eslint-plugin-react/issues/3042#issuecomment-899689312\r\n\r\nI started migrating a codebase from class-based to function-based and came across some silliness. I had completely missed converting some of the ref checks:\r\n\r\n```diff\r\n- const thing = this.thing;\r\n+ const thing = useRef(props.thing);\r\n\r\n// I missed this\r\n- if (!thing) {\r\n+ if (!thing.current) {\r\n```\r\n\r\nTypeScript considers `!useRef(props.thing)` to be perfectly valid since it may be testing for non-existence of the value even if it is not boolean. However, due to the rules of hooks, this value will never be undefined -- any checks for it are unnecessary and could either be an innocuous useless check or indicate a serious bug / typo. Thus, I'm thinking it might make sense to make sure a useRef's return value is never used as a boolean or condition at the react linter level. Not sure if it's possible with ESLint, but if so it could be a very useful rule which would catch a lot of bugs. ",
        "remove_template_description": "https://github.com/reactjs/rfcs/issues/198  https://github.com/yannickcr/eslint-plugin-react/issues/3042    Not sure whether this belongs in `eslint-plugin-react-hooks` or `eslint-plugin-react`, but a contributor at the latter suggested this to be a more appropriate place. I've opened an issue instead of an RFC to discuss whether this is the appropriate place. https://github.com/yannickcr/eslint-plugin-react/issues/3042#issuecomment-899689312    I started migrating a codebase from class-based to function-based and came across some silliness. I had completely missed converting some of the ref checks:    ```diff  - const thing = this.thing;  + const thing = useRef(props.thing);    // I missed this  - if (!thing) {  + if (!thing.current) {  ```    TypeScript considers `!useRef(props.thing)` to be perfectly valid since it may be testing for non-existence of the value even if it is not boolean. However, due to the rules of hooks, this value will never be undefined -- any checks for it are unnecessary and could either be an innocuous useless check or indicate a serious bug / typo. Thus, I'm thinking it might make sense to make sure a useRef's return value is never used as a boolean or condition at the react linter level. Not sure if it's possible with ESLint, but if so it could be a very useful rule which would catch a lot of bugs."
    },
    {
        "issue_id": 939480451,
        "title": "[Devtools] Indicate or print which element causes suspense fallback",
        "label": [
            "Type: Enhancement",
            "Status: Unconfirmed",
            "Component: Developer Tools"
        ],
        "date": "2021-07-08T05:19:31Z",
        "status": "open",
        "description": "In a deep component tree, we sometimes modify a deeply nested component to use suspense but failed to wrap `Suspense` at a suitable place, this causes the root `Suspense` into fallback and is hard to location where this fallback is introduced.\r\n\r\n\"Whether a component is throwing Promise\" is an implicit convention of component, this is not detectable by any static analyzer, so in a complex app this missing `Suspense` issue can happen frequently.\r\n\r\nI've tested error boundaries but they cannot catch Promise, maybe devtools can provide functionality to report where Promises are thrown.",
        "remove_template_description": "In a deep component tree, we sometimes modify a deeply nested component to use suspense but failed to wrap `Suspense` at a suitable place, this causes the root `Suspense` into fallback and is hard to location where this fallback is introduced.    \"Whether a component is throwing Promise\" is an implicit convention of component, this is not detectable by any static analyzer, so in a complex app this missing `Suspense` issue can happen frequently.    I've tested error boundaries but they cannot catch Promise, maybe devtools can provide functionality to report where Promises are thrown."
    },
    {
        "issue_id": 877148396,
        "title": "Bug: Unable to use `unmountComponentAtNode` with `unstable_createRoot`",
        "label": [
            "Type: Enhancement",
            "Component: DOM",
            "Status: Unconfirmed"
        ],
        "date": "2021-05-06T06:57:18Z",
        "status": "closed",
        "description": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\nWhen calling `unmountComponentAtNode(document.getElementById('react-root'))`, it returns `false`.\r\n\r\nThis would normally happen because I'm trying to unmount something that's not a React node, but that's not the case.\r\n\r\nI'm using `unstable_createRoot`. If I use `render` instead, it works fine.\r\n\r\nReact version: `0.0.0-experimental-79740da4c`\r\n\r\n## Steps To Reproduce\r\n\r\n1. Render component with `unstable_createRoot`.\r\n2. Try to unmount the app with `unmountComponentAtNode`.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://codesandbox.io/s/epic-leftpad-ih6ts?file=/src/index.js\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nDoesn't unmount the root React component.\r\n\r\n## The expected behavior\r\nShould unmount the root React component.",
        "remove_template_description": "<!--    Please provide a clear and concise description of what the bug is. Include    screenshots if needed. Please test using the latest version of the relevant    React packages to make sure your issue has not already been fixed.  -->  When calling `unmountComponentAtNode(document.getElementById('react-root'))`, it returns `false`.    This would normally happen because I'm trying to unmount something that's not a React node, but that's not the case.    I'm using `unstable_createRoot`. If I use `render` instead, it works fine.    React version: `0.0.0-experimental-79740da4c`        1. Render component with `unstable_createRoot`.  2. Try to unmount the app with `unmountComponentAtNode`.    <!--    Your bug will get fixed much faster if we can run your code and it doesn't    have dependencies other than React. Issues without reproduction steps or    code examples may be immediately closed as not actionable.  -->    Link to code example: https://codesandbox.io/s/epic-leftpad-ih6ts?file=/src/index.js    <!--    Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a    repository on GitHub, or provide a minimal code example that reproduces the    problem. You may provide a screenshot of the application if you think it is    relevant to your bug report. Here are some tips for providing a minimal    example: https://stackoverflow.com/help/mcve.  -->      Doesn't unmount the root React component.      Should unmount the root React component."
    },
    {
        "issue_id": 858310757,
        "title": "Bug: ESLint react-hooks/exhaustive-deps rule false positive on constants made with constant expressions",
        "label": [
            "Type: Enhancement",
            "Status: Unconfirmed",
            "Component: ESLint Rules"
        ],
        "date": "2021-04-14T22:26:03Z",
        "status": "open",
        "description": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 16.14.0 & 17.0.2\r\n\r\n## Steps To Reproduce\r\n\r\n1. Create a constant variable with an expression made of only constants.\r\n2. Run ESLint\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nCode example:\r\n\r\n```jsx\r\nconst a = 1\r\nconst b = 2 / 3\r\nconst c = -1\r\nconst d = +1\r\n\r\nuseEffect(() => {\r\n  void a\r\n  void b\r\n  void c\r\n  void d\r\n}, [])\r\n```\r\n\r\nCodeSandbox: https://codesandbox.io/s/funny-wilson-33zxb\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nI see the following ESlint warning:\r\n> React Hook useEffect has missing dependencies: 'b', 'c', and 'd'. Either include them or remove the dependency array. (react-hooks/exhaustive-deps)\r\n\r\n## The expected behavior\r\nI see no warning.\r\n\r\nIn my example the `a` variable is skipped in the ESlint warning, but not the other three variables even those they are all constant expressions.",
        "remove_template_description": "<!--    Please provide a clear and concise description of what the bug is. Include    screenshots if needed. Please test using the latest version of the relevant    React packages to make sure your issue has not already been fixed.  -->    React version: 16.14.0 & 17.0.2        1. Create a constant variable with an expression made of only constants.  2. Run ESLint    <!--    Your bug will get fixed much faster if we can run your code and it doesn't    have dependencies other than React. Issues without reproduction steps or    code examples may be immediately closed as not actionable.  -->    Code example:    ```jsx  const a = 1  const b = 2 / 3  const c = -1  const d = +1    useEffect(() => {    void a    void b    void c    void d  }, [])  ```    CodeSandbox: https://codesandbox.io/s/funny-wilson-33zxb    <!--    Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a    repository on GitHub, or provide a minimal code example that reproduces the    problem. You may provide a screenshot of the application if you think it is    relevant to your bug report. Here are some tips for providing a minimal    example: https://stackoverflow.com/help/mcve.  -->      I see the following ESlint warning:  > React Hook useEffect has missing dependencies: 'b', 'c', and 'd'. Either include them or remove the dependency array. (react-hooks/exhaustive-deps)      I see no warning.    In my example the `a` variable is skipped in the ESlint warning, but not the other three variables even those they are all constant expressions."
    },
    {
        "issue_id": 814718266,
        "title": "react-is lacks SuspenseList",
        "label": [
            "Type: Enhancement",
            "Status: Unconfirmed",
            "Component: ReactIs"
        ],
        "date": "2021-02-23T18:21:15Z",
        "status": "closed",
        "description": "I'd like to be able to detect `SuspenseList` using `react-is`. Is there any reason why I shouldn't?",
        "remove_template_description": "I'd like to be able to detect `SuspenseList` using `react-is`. Is there any reason why I shouldn't?"
    },
    {
        "issue_id": 807960484,
        "title": "Feat: Some type of way to merge key prop and useOpaqueIdentifier result ",
        "label": [
            "Type: Enhancement",
            "Status: Unconfirmed"
        ],
        "date": "2021-02-14T13:24:40Z",
        "status": "closed",
        "description": "Currently, the expected way to handle an unknown at compile time number of labels is to put them each in their own component. However, when creating tables, this causes a mess of callbacks, as the only way to do it (that I can think of anyway) is to pass a callback into the table header components, have them create their own unique identifier, and then use a useEffect to give the parent those identifiers, have the parent pass those identifiers to the rows, and then have each row generate its opaque own unique identifiers and pass both to the cells. Note that this doesn't work currently because of these two bugs:\r\nhttps://github.com/facebook/react/issues/18594\r\nhttps://github.com/facebook/react/issues/20127\r\n\r\nHowever, react already has a way to differentiate items in loops: the key prop. To me, it would make sense to provide a function which merges a key prop with a unique identifier. This would allow the parent to generate the unique identifiers and pass them to the children, rather than having callbacks which cause a rerender. It would even make https://github.com/facebook/react/issues/20127 less relevant because there would be fewer motivating reasons to do so.\r\n\r\nmergeOpaqueIdentifierAndKey is very wordy, but describes exactly what's going on. I don't have any particular preference about the name.",
        "remove_template_description": "Currently, the expected way to handle an unknown at compile time number of labels is to put them each in their own component. However, when creating tables, this causes a mess of callbacks, as the only way to do it (that I can think of anyway) is to pass a callback into the table header components, have them create their own unique identifier, and then use a useEffect to give the parent those identifiers, have the parent pass those identifiers to the rows, and then have each row generate its opaque own unique identifiers and pass both to the cells. Note that this doesn't work currently because of these two bugs:  https://github.com/facebook/react/issues/18594  https://github.com/facebook/react/issues/20127    However, react already has a way to differentiate items in loops: the key prop. To me, it would make sense to provide a function which merges a key prop with a unique identifier. This would allow the parent to generate the unique identifiers and pass them to the children, rather than having callbacks which cause a rerender. It would even make https://github.com/facebook/react/issues/20127 less relevant because there would be fewer motivating reasons to do so.    mergeOpaqueIdentifierAndKey is very wordy, but describes exactly what's going on. I don't have any particular preference about the name."
    },
    {
        "issue_id": 802937707,
        "title": "Feature Suggestion: Add `ignoreMemberCallExpression` option for `exhaustive-deps` lint rule",
        "label": [
            "Type: Enhancement",
            "Component: ESLint Rules"
        ],
        "date": "2021-02-07T12:09:14Z",
        "status": "closed",
        "description": "## As-is\r\n\r\nWhen only referring to object's member properties, `exhaustive-deps` lint rule does not show a warning.\r\n\r\nHowever, **when calling object's member property, this rule shows a warning.**\r\n\r\n```tsx\r\nfunction Password() {\r\n  const verifyPassword = useMutation(apis.verifyPassword);\r\n\r\n  useEffect(() => {\r\n    verifyPassword.mutate;\r\n  }, [verifyPassword.mutate]); // PASS\r\n\r\n  useEffect(() => {\r\n    verifyPassword.mutate();\r\n  } ,[verifyPassword.mutate]); // React Hook useEffect has a missing dependency: 'verifyPassword'. Either include it or remove the dependency array.\r\n} \r\n```\r\n\r\nI saw [Dan's comment](https://github.com/facebook/react/issues/14920#issuecomment-467494468) on this behavior.\r\n\r\n> This is because technically props.foo() passes props itself as this to foo call. So foo might implicitly depend on props. We'll need a better message for this case though. The best practice is always destructuring.\r\n\r\nIt is fully understood.\r\n\r\nHowever, **when the entire object is included as a dependency, the following problem can occur.**\r\nTake a look at the following code.\r\n\r\n```tsx\r\nconst verifyPassword = useMutation(apis.verifyPassword); // `verifyPassword` equals to `{ isLoading: boolean; mutate: Function }`\r\n\r\n// `verifyPassword(password)` sets `isLoading` to `true` and causes `useEffect` hook that depends on `verifyPassword` objects to be re-excuted. This eventually leads to an infinite loop.\r\nuseEffect(() => {\r\n  if (password === PASSWORD_LENGTH) {\r\n    verifyPassword.mutate(password);\r\n  } \r\n  \r\n}, [password, verifyPassword]);\r\n```\r\n\r\n**There are two ways to avoid this problem.**\r\n\r\n```tsx\r\n// 1. Use destructuring\r\nconst { mutate } = useMutation(apis.verifyPassword);\r\n\r\nuseEffect(() => {\r\n  if (password === PASSWORD_LENGTH) {\r\n    mutate(password);\r\n  }\r\n}, [password, mutate]);\r\n\r\n// 2. Assign member property to other variable\r\nuseEffect(() => {\r\n  const mutate = verifyPassword.mutate;\r\n\r\n  mutate();\r\n}, [verifyPassword.mutate]);\r\n```\r\n\r\n## To-be\r\n\r\nIn many cases, it is not common to refer to other members through `this`.\r\n\r\nAnd as in the example above, it is a good idea to use namespace to avoid name conflicts. (https://github.com/facebook/react/issues/16265#issuecomment-587977285)\r\n\r\nSo, I would like to suggest an **option to set not to warn about _member call expresion_ when using the `exhaustive-deps` rule.**\r\n\r\n```tsx\r\n// 'react-hooks/exhaustive-deps': ['warn', { ignoreMemberCallExpression: true }]\r\nuseEffect(() => {\r\n  verifyPassword.mutate();\r\n}, [verifyPassword.mutate]); // PASS\r\n```",
        "remove_template_description": "## As-is    When only referring to object's member properties, `exhaustive-deps` lint rule does not show a warning.    However, **when calling object's member property, this rule shows a warning.**    ```tsx  function Password() {    const verifyPassword = useMutation(apis.verifyPassword);      useEffect(() => {      verifyPassword.mutate;    }, [verifyPassword.mutate]); // PASS      useEffect(() => {      verifyPassword.mutate();    } ,[verifyPassword.mutate]); // React Hook useEffect has a missing dependency: 'verifyPassword'. Either include it or remove the dependency array.  }   ```    I saw [Dan's comment](https://github.com/facebook/react/issues/14920#issuecomment-467494468) on this behavior.    > This is because technically props.foo() passes props itself as this to foo call. So foo might implicitly depend on props. We'll need a better message for this case though. The best practice is always destructuring.    It is fully understood.    However, **when the entire object is included as a dependency, the following problem can occur.**  Take a look at the following code.    ```tsx  const verifyPassword = useMutation(apis.verifyPassword); // `verifyPassword` equals to `{ isLoading: boolean; mutate: Function }`    // `verifyPassword(password)` sets `isLoading` to `true` and causes `useEffect` hook that depends on `verifyPassword` objects to be re-excuted. This eventually leads to an infinite loop.  useEffect(() => {    if (password === PASSWORD_LENGTH) {      verifyPassword.mutate(password);    }       }, [password, verifyPassword]);  ```    **There are two ways to avoid this problem.**    ```tsx  // 1. Use destructuring  const { mutate } = useMutation(apis.verifyPassword);    useEffect(() => {    if (password === PASSWORD_LENGTH) {      mutate(password);    }  }, [password, mutate]);    // 2. Assign member property to other variable  useEffect(() => {    const mutate = verifyPassword.mutate;      mutate();  }, [verifyPassword.mutate]);  ```    ## To-be    In many cases, it is not common to refer to other members through `this`.    And as in the example above, it is a good idea to use namespace to avoid name conflicts. (https://github.com/facebook/react/issues/16265#issuecomment-587977285)    So, I would like to suggest an **option to set not to warn about _member call expresion_ when using the `exhaustive-deps` rule.**    ```tsx  // 'react-hooks/exhaustive-deps': ['warn', { ignoreMemberCallExpression: true }]  useEffect(() => {    verifyPassword.mutate();  }, [verifyPassword.mutate]); // PASS  ```"
    },
    {
        "issue_id": 742650362,
        "title": "Bug: [eslint-plugin-react-hooks] Constructions should be caught in default props/args",
        "label": [
            "Type: Enhancement",
            "Component: ESLint Rules"
        ],
        "date": "2020-11-13T17:46:29Z",
        "status": "open",
        "description": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 17.0.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. ```js\r\n   function useMyHook1(arr = []) {\r\n     useEffect(() => {\r\n       console.log(arr);\r\n     }, [arr]);\r\n   }\r\n\r\n    function useMyHook2({ arr = [] }) {\r\n     useEffect(() => {\r\n       console.log(arr);\r\n     }, [arr]);\r\n   }\r\n\r\n   function MyComponent({ arr = [] }) {\r\n     useEffect(() => {\r\n       console.log(arr);\r\n     }, [arr]);\r\n\r\n     return null;\r\n   }\r\n   ```\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: --\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nNo warning appears for `arr` being potentially constructed on every render.\r\n\r\n## The expected behavior\r\nShould warn that `arr` can be constructed on each render.\r\nThe lint rules already warn for the following, so this is just an extension of the existing behavior:\r\n```js\r\nconst arr = props.arr ?? []; // The 'arr' logical expression could make the dependencies of useEffect Hook (at line 54) change on every render. Move it inside the useEffect callback. Alternatively, wrap the initialization of 'arr' in its own useMemo() Hook.\r\n```\r\nReference: https://github.com/facebook/react/pull/19590",
        "remove_template_description": "<!--    Please provide a clear and concise description of what the bug is. Include    screenshots if needed. Please test using the latest version of the relevant    React packages to make sure your issue has not already been fixed.  -->    React version: 17.0.1        1. ```js     function useMyHook1(arr = []) {       useEffect(() => {         console.log(arr);       }, [arr]);     }        function useMyHook2({ arr = [] }) {       useEffect(() => {         console.log(arr);       }, [arr]);     }       function MyComponent({ arr = [] }) {       useEffect(() => {         console.log(arr);       }, [arr]);         return null;     }     ```    <!--    Your bug will get fixed much faster if we can run your code and it doesn't    have dependencies other than React. Issues without reproduction steps or    code examples may be immediately closed as not actionable.  -->    Link to code example: --    <!--    Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a    repository on GitHub, or provide a minimal code example that reproduces the    problem. You may provide a screenshot of the application if you think it is    relevant to your bug report. Here are some tips for providing a minimal    example: https://stackoverflow.com/help/mcve.  -->      No warning appears for `arr` being potentially constructed on every render.      Should warn that `arr` can be constructed on each render.  The lint rules already warn for the following, so this is just an extension of the existing behavior:  ```js  const arr = props.arr ?? []; // The 'arr' logical expression could make the dependencies of useEffect Hook (at line 54) change on every render. Move it inside the useEffect callback. Alternatively, wrap the initialization of 'arr' in its own useMemo() Hook.  ```  Reference: https://github.com/facebook/react/pull/19590"
    },
    {
        "issue_id": 683094002,
        "title": "Add an option to DevTools to enable double-logging",
        "label": [
            "Type: Enhancement",
            "Component: Developer Tools",
            "good first issue (taken)"
        ],
        "date": "2020-08-20T21:01:45Z",
        "status": "closed",
        "description": "We currently plan to suppress double-logging in development by overriding console in 17: https://github.com/facebook/react/pull/18547\r\n\r\nHowever this can be confusing for some scenarios and double logging may be preferable in them.\r\n\r\nIdeally we'd add a toggle to DevTools that would allow to re-enable it on this screen:\r\n\r\n![Ef3bFlWWoAARjz9](https://user-images.githubusercontent.com/810438/90825360-b7372000-e330-11ea-9128-803d35d27e07.png)\r\n\r\n",
        "remove_template_description": "We currently plan to suppress double-logging in development by overriding console in 17: https://github.com/facebook/react/pull/18547    However this can be confusing for some scenarios and double logging may be preferable in them.    Ideally we'd add a toggle to DevTools that would allow to re-enable it on this screen:    ![Ef3bFlWWoAARjz9](https://user-images.githubusercontent.com/810438/90825360-b7372000-e330-11ea-9128-803d35d27e07.png)"
    },
    {
        "issue_id": 682908321,
        "title": "Add a toggle for Boolean props in DevTools",
        "label": [
            "Type: Enhancement",
            "Component: Developer Tools",
            "good first issue (taken)"
        ],
        "date": "2020-08-20T16:54:00Z",
        "status": "closed",
        "description": "We previously had a feature where Boolean props would show a checkbox to the left of them in the DevTools pane. It was removed when the JSON editor was added, but I think we should add it back. It should work like this:\r\n\r\n1. If the value is a boolean, the checkbox should show up to the left of `true` / `false` value\r\n2. If it's no longer a boolean (e.g. gets edited manually), the checkbox disappears",
        "remove_template_description": "We previously had a feature where Boolean props would show a checkbox to the left of them in the DevTools pane. It was removed when the JSON editor was added, but I think we should add it back. It should work like this:    1. If the value is a boolean, the checkbox should show up to the left of `true` / `false` value  2. If it's no longer a boolean (e.g. gets edited manually), the checkbox disappears"
    },
    {
        "issue_id": 625928747,
        "title": "Feature request: have Context.Provider throw error if missing `value` prop",
        "label": [
            "Type: Enhancement",
            "good first issue (taken)"
        ],
        "date": "2020-05-27T18:27:06Z",
        "status": "closed",
        "description": "Just about every time I set up a new `Context.Provider`, I end up accidentally specifying a `values` prop rather than `value`.  While it's a minor error, generally I build the container in which the provider resides and commit it to the code base before I ever use it.  It's only later when I go to use it that I realize I did it again.  Since the `Context.Provider` seems pretty much useless without a `value` prop specified, I'd love it if there was a prop error if it is missing... especially if another prop is defined on the `Context.Provider` instead.",
        "remove_template_description": "Just about every time I set up a new `Context.Provider`, I end up accidentally specifying a `values` prop rather than `value`.  While it's a minor error, generally I build the container in which the provider resides and commit it to the code base before I ever use it.  It's only later when I go to use it that I realize I did it again.  Since the `Context.Provider` seems pretty much useless without a `value` prop specified, I'd love it if there was a prop error if it is missing... especially if another prop is defined on the `Context.Provider` instead."
    },
    {
        "issue_id": 615439457,
        "title": "Feature proposal(eslint-react-hooks): Recursive dependencies scanning for exhaustive-deps",
        "label": [
            "Type: Enhancement",
            "Status: Unconfirmed",
            "Component: ESLint Rules"
        ],
        "date": "2020-05-10T17:37:06Z",
        "status": "closed",
        "description": "## Context\r\n\r\nAfter reading https://github.com/facebook/react/issues/14920 (not 100% of it, I admit), I decided to refactor my codebase in order to be more resilient against potential mistakes.  \r\nDuring this conversion, I converted a ton of callbacks to `useCallback` and made extensive use of the array dependencies for `useCallback` and `useEffect` everywhere.  \r\nHowever, I often stumbled upon the following pattern:\r\n\r\n```js\r\nconst myCallback = useCallback(() => {\r\n  // Do something with value.\r\n}, [value]);\r\n\r\nconst myOtherCallback = useCallback(() => {\r\n  const result = myCallback();\r\n\r\n  // Do something with BOTH value and result.\r\n}, [value, myCallback ]);\r\n\r\nuseEffect(() => {\r\n  // Do something with myCallback, myOtherCallback and value, independently.\r\n}, [value, myCallback, myOtherCallback ])\r\n```\r\n\r\n[Basic CodeSandBox with this example](https://codesandbox.io/s/goofy-thunder-2y4s9)\r\n\r\nFor the sake of argument, let's say that this code can't \"move\" callbacks around: I can't declare `myCallback` and/or `myOtherCallback` because they are used below in the main scope.\r\n\r\n## Problem\r\n\r\nWith the above example, we can conclude the following statements:\r\n- `myCallback` will change if `value` changes\r\n- `myOtherCallback` will change if `value` or `myCallback` changes\r\n- The `useEffect` will rerun if `myCallback`, `value` or `myOtherCallback` changes\r\n\r\nWe can instantly notice there is a lot of redundancy right there:\r\n\r\nIf `value` changes, `myCallback` will change so I only need to specify `myCallback` as a dependency for `myOtherCallback` even though I also use `value` directly.  \r\nThe same reasoning can be applied to the dependencies of `useEffect`.\r\n\r\nAs a human, I could omit `value` from the dependencies of `myOtherCallback` and be 100% absolutely guaranteed that the behavior would be strictly identical as per the hooks very own specifications.  \r\nBut if I do so, the `react-hooks/exhaustive-deps` eslint rule will complain that I'm missing some dependencies from the array.\r\n\r\n## Proposal\r\n\r\nIf I understood properly, the rule does some kind of dependency traversal in order to attempt to recognize infinite loops.  \r\nI think it would be nice for it to also be able to detect this kind of dependency redundancies.  \r\nEven better, it should be able to take it into account when suggesting changes/reporting errors.  \r\n\r\n## Benefits\r\n\r\nFrom reading the [issue](https://github.com/facebook/react/issues/14920) I mentionned at the top of this post, there is a fair amout of people who are not happy with the clutter the rule forces us to have in the codebase.  \r\nMyself, I'm fairly hesitant and sometimes find myself thinking \"I shouldn't need to specify this dep\".  \r\nImplementing the proposal mentionned above would be extremely beneficial regarding the readability of the code by totally preventing redundancy of dependencies.\r\n\r\n## Drawbacks\r\n\r\nI can see two potential issues with this proposal:\r\n\r\n#### Performance impact\r\n\r\nRequiring the rule to recursively assess dependencies may have a performance impact on the linting.  \r\n\r\nI'm not sure if this is the case since the rule does a similar check to try to avoid infinite loop. (Maybe I'm wrong and it's not the same thing).  \r\nIf this is too much of an impact, I think it could be opt-in behind a config flag.  \r\nThis would allow people to decide for themselves if the impact is worth it.\r\n\r\n#### Less obvious dependencies\r\n\r\nNot explicitely specifying every used dependency may make it harder to assess the real update impact.  \r\nFrom the above example, I know that my `useEffect` depends on `value`. If it weren't there, I would have to mentally climb up the dependencies myself.  \r\n\r\nI think this is a fake drawback since I always need to climb up the dependencies tree to REALLY know what could cause my effect (or other) to be triggered.  \r\nI would even argue that this proposal makes this mental parsing easier because I don't have any redundancy when reading the dependencies: every variable I see in a dependency array is specified exactly once. (Well, there may be exceptions when it comes to diverging dependencies but it's even more of an improvement in such a situation.)\r\n\r\n## Conclusion\r\n\r\nThis proposal seems to be entirely positive from my point of view. The drawbacks are quite small and an opt-in design may make them even more manageable.",
        "remove_template_description": "## Context    After reading https://github.com/facebook/react/issues/14920 (not 100% of it, I admit), I decided to refactor my codebase in order to be more resilient against potential mistakes.    During this conversion, I converted a ton of callbacks to `useCallback` and made extensive use of the array dependencies for `useCallback` and `useEffect` everywhere.    However, I often stumbled upon the following pattern:    ```js  const myCallback = useCallback(() => {    // Do something with value.  }, [value]);    const myOtherCallback = useCallback(() => {    const result = myCallback();      // Do something with BOTH value and result.  }, [value, myCallback ]);    useEffect(() => {    // Do something with myCallback, myOtherCallback and value, independently.  }, [value, myCallback, myOtherCallback ])  ```    [Basic CodeSandBox with this example](https://codesandbox.io/s/goofy-thunder-2y4s9)    For the sake of argument, let's say that this code can't \"move\" callbacks around: I can't declare `myCallback` and/or `myOtherCallback` because they are used below in the main scope.    ## Problem    With the above example, we can conclude the following statements:  - `myCallback` will change if `value` changes  - `myOtherCallback` will change if `value` or `myCallback` changes  - The `useEffect` will rerun if `myCallback`, `value` or `myOtherCallback` changes    We can instantly notice there is a lot of redundancy right there:    If `value` changes, `myCallback` will change so I only need to specify `myCallback` as a dependency for `myOtherCallback` even though I also use `value` directly.    The same reasoning can be applied to the dependencies of `useEffect`.    As a human, I could omit `value` from the dependencies of `myOtherCallback` and be 100% absolutely guaranteed that the behavior would be strictly identical as per the hooks very own specifications.    But if I do so, the `react-hooks/exhaustive-deps` eslint rule will complain that I'm missing some dependencies from the array.    ## Proposal    If I understood properly, the rule does some kind of dependency traversal in order to attempt to recognize infinite loops.    I think it would be nice for it to also be able to detect this kind of dependency redundancies.    Even better, it should be able to take it into account when suggesting changes/reporting errors.      ## Benefits    From reading the [issue](https://github.com/facebook/react/issues/14920) I mentionned at the top of this post, there is a fair amout of people who are not happy with the clutter the rule forces us to have in the codebase.    Myself, I'm fairly hesitant and sometimes find myself thinking \"I shouldn't need to specify this dep\".    Implementing the proposal mentionned above would be extremely beneficial regarding the readability of the code by totally preventing redundancy of dependencies.    ## Drawbacks    I can see two potential issues with this proposal:    #### Performance impact    Requiring the rule to recursively assess dependencies may have a performance impact on the linting.      I'm not sure if this is the case since the rule does a similar check to try to avoid infinite loop. (Maybe I'm wrong and it's not the same thing).    If this is too much of an impact, I think it could be opt-in behind a config flag.    This would allow people to decide for themselves if the impact is worth it.    #### Less obvious dependencies    Not explicitely specifying every used dependency may make it harder to assess the real update impact.    From the above example, I know that my `useEffect` depends on `value`. If it weren't there, I would have to mentally climb up the dependencies myself.      I think this is a fake drawback since I always need to climb up the dependencies tree to REALLY know what could cause my effect (or other) to be triggered.    I would even argue that this proposal makes this mental parsing easier because I don't have any redundancy when reading the dependencies: every variable I see in a dependency array is specified exactly once. (Well, there may be exceptions when it comes to diverging dependencies but it's even more of an improvement in such a situation.)    ## Conclusion    This proposal seems to be entirely positive from my point of view. The drawbacks are quite small and an opt-in design may make them even more manageable."
    },
    {
        "issue_id": 612606483,
        "title": "Bug [ESLint Hooks Plugin]: When using a `typeof` type guard it requires the value as a dependency",
        "label": [
            "Type: Enhancement",
            "Component: ESLint Rules"
        ],
        "date": "2020-05-05T13:33:32Z",
        "status": "closed",
        "description": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\n**Version:** eslint-plugin-react-hooks@1.7.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Create a component with local state\r\n2. Create a useEffect with a variable inside, that points to the `typeof` of the state variable\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n\r\nhttps://codesandbox.io/s/nervous-williamson-2i99l?file=/src/App.tsx:210-261\r\n\r\n## The current behavior\r\n`react-exhaustive-deps` complains that the state variable should be included in the dependency list\r\n\r\n## The expected behavior\r\n`react-exhaustive-deps` shouldn't complain that the state variable should be included in the dependency list because it's value is never used.",
        "remove_template_description": "<!--    Please provide a clear and concise description of what the bug is. Include    screenshots if needed. Please test using the latest version of the relevant    React packages to make sure your issue has not already been fixed.  -->    **Version:** eslint-plugin-react-hooks@1.7.0        1. Create a component with local state  2. Create a useEffect with a variable inside, that points to the `typeof` of the state variable    <!--    Your bug will get fixed much faster if we can run your code and it doesn't    have dependencies other than React. Issues without reproduction steps or    code examples may be immediately closed as not actionable.  -->    Link to code example:    https://codesandbox.io/s/nervous-williamson-2i99l?file=/src/App.tsx:210-261      `react-exhaustive-deps` complains that the state variable should be included in the dependency list      `react-exhaustive-deps` shouldn't complain that the state variable should be included in the dependency list because it's value is never used."
    },
    {
        "issue_id": 600173290,
        "title": "Bug: DevTools should grab native setTimeout",
        "label": [
            "Type: Enhancement",
            "Component: Developer Tools",
            "Resolution: Stale"
        ],
        "date": "2020-04-15T09:57:15Z",
        "status": "closed",
        "description": "Just noticed this.\r\n\r\n<img width=\"645\" alt=\"Screenshot 2020-04-15 at 10 56 39\" src=\"https://user-images.githubusercontent.com/810438/79324642-cda71800-7f07-11ea-816f-af7a69496c52.png\">\r\n\r\nI think we should read setTimeout early in DevTools because we don't want the overridden one that goes through indirections.",
        "remove_template_description": "Just noticed this.    <img width=\"645\" alt=\"Screenshot 2020-04-15 at 10 56 39\" src=\"https://user-images.githubusercontent.com/810438/79324642-cda71800-7f07-11ea-816f-af7a69496c52.png\">    I think we should read setTimeout early in DevTools because we don't want the overridden one that goes through indirections."
    },
    {
        "issue_id": 599218576,
        "title": "Delay setting useTransition isPending to true until JND",
        "label": [
            "Type: Enhancement",
            "Type: Needs Investigation",
            "Component: Concurrent Features"
        ],
        "date": "2020-04-14T00:41:05Z",
        "status": "closed",
        "description": "**Do you want to request a feature or report a bug?**\r\nMaybe a feature?\r\n\r\nWhen using Suspense and useTransition, the isPending of useTransition is immediately set to true.\r\nI want to show a spinner when a transition is still pending, but showing it immediately results in a flashing spinner when the underlying promise resolves very fast. This is not a nice experience. \r\n\r\nIs there a useTransition suspense option to delay the isPending indicator? I want to prevent the spinner from showing if the transition completes in for example 100ms.",
        "remove_template_description": "**Do you want to request a feature or report a bug?**  Maybe a feature?    When using Suspense and useTransition, the isPending of useTransition is immediately set to true.  I want to show a spinner when a transition is still pending, but showing it immediately results in a flashing spinner when the underlying promise resolves very fast. This is not a nice experience.     Is there a useTransition suspense option to delay the isPending indicator? I want to prevent the spinner from showing if the transition completes in for example 100ms."
    },
    {
        "issue_id": 597992460,
        "title": "DevTools: Memo(ForwardRef()) and \"Rendered By\" List",
        "label": [
            "Type: Enhancement",
            "Component: Developer Tools"
        ],
        "date": "2020-04-10T17:05:56Z",
        "status": "closed",
        "description": "If you have `memo(forwardRef(X))`, then the inner component won't have a \"rendered by\" list. This is because it technically doesn't have an owner. It is artificial.\r\n\r\nI think we should ideally set up `_debugOwner` for these Fibers in DEV just so existing tooling can find them. Or special case them in DevTools.",
        "remove_template_description": "If you have `memo(forwardRef(X))`, then the inner component won't have a \"rendered by\" list. This is because it technically doesn't have an owner. It is artificial.    I think we should ideally set up `_debugOwner` for these Fibers in DEV just so existing tooling can find them. Or special case them in DevTools."
    },
    {
        "issue_id": 589749122,
        "title": "Call all functions twice in StrictMode",
        "label": [
            "Type: Enhancement"
        ],
        "date": "2020-03-29T08:59:55Z",
        "status": "closed",
        "description": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 16.3-16.13\r\n\r\n## Steps To Reproduce\r\n\r\n1. Render function component with side-effects and without hooks in StrictMode\r\n2. Component only renders once\r\n\r\n\r\nLink to code example: https://codesandbox.io/s/strictmode-w-and-wo-hooks-vgxvh\r\n\r\n\r\n## The current behavior\r\n\r\nStrictMode only renders function components with hooks twice following https://github.com/facebook/react/issues/15074#issuecomment-471197572\r\n\r\n\r\n## The expected behavior\r\n\r\nI think making [the distinction between components with and without hooks causes more confusion than it helps](https://github.com/mui-org/material-ui/issues/20313). Especially since the docs do not mention this. I amended [past efforts to improve the StrictMode docs](https://github.com/reactjs/reactjs.org/pull/2515) but since this has been ignored I'm not sure this helps. I would also work on making the behavior consistent across all function component types if this is possible.\r\n",
        "remove_template_description": "<!--    Please provide a clear and concise description of what the bug is. Include    screenshots if needed. Please test using the latest version of the relevant    React packages to make sure your issue has not already been fixed.  -->    React version: 16.3-16.13        1. Render function component with side-effects and without hooks in StrictMode  2. Component only renders once      Link to code example: https://codesandbox.io/s/strictmode-w-and-wo-hooks-vgxvh          StrictMode only renders function components with hooks twice following https://github.com/facebook/react/issues/15074#issuecomment-471197572          I think making [the distinction between components with and without hooks causes more confusion than it helps](https://github.com/mui-org/material-ui/issues/20313). Especially since the docs do not mention this. I amended [past efforts to improve the StrictMode docs](https://github.com/reactjs/reactjs.org/pull/2515) but since this has been ignored I'm not sure this helps. I would also work on making the behavior consistent across all function component types if this is possible."
    },
    {
        "issue_id": 576484375,
        "title": "[Feature Request] Allow dependency length to change in hooks",
        "label": [
            "Type: Enhancement",
            "Status: Unconfirmed"
        ],
        "date": "2020-03-05T19:36:28Z",
        "status": "open",
        "description": "Not allowing dependency lists to change size limits the usefulness of `useMemo` in this particular use case but I imagine there are other similar use cases.\r\n\r\nTo be clear I am talking about the error triggered here:\r\n\r\nhttps://github.com/facebook/react/blob/024a764310e64ef38963df16970364b9942a60cd/packages/react-reconciler/src/ReactFiberHooks.js#L322\r\n\r\nFor instance, in my app I have a bunch of items and the user can select an unlimited amount of them, in another component I want to compute an expensive derived value based on this selection that is relevant only to this component, a good use case for `useMemo`.\r\n\r\nHowever it is not currently possible to use `useMemo` and I am forced to compute this derived data outside of this component even though I am only interested in doing so whilst this component is mounted.\r\n\r\nI don't understand why a change in dependency list length cannot be assumed to be a change in the dependencies itself?\r\n\r\nI believe this can be implemented by changing the above to:\r\n\r\n```js\r\nif (prevDeps.length !== nextDeps.length) {\r\n    return false;\r\n}\r\n```",
        "remove_template_description": "Not allowing dependency lists to change size limits the usefulness of `useMemo` in this particular use case but I imagine there are other similar use cases.    To be clear I am talking about the error triggered here:    https://github.com/facebook/react/blob/024a764310e64ef38963df16970364b9942a60cd/packages/react-reconciler/src/ReactFiberHooks.js#L322    For instance, in my app I have a bunch of items and the user can select an unlimited amount of them, in another component I want to compute an expensive derived value based on this selection that is relevant only to this component, a good use case for `useMemo`.    However it is not currently possible to use `useMemo` and I am forced to compute this derived data outside of this component even though I am only interested in doing so whilst this component is mounted.    I don't understand why a change in dependency list length cannot be assumed to be a change in the dependencies itself?    I believe this can be implemented by changing the above to:    ```js  if (prevDeps.length !== nextDeps.length) {      return false;  }  ```"
    },
    {
        "issue_id": 562612384,
        "title": "Bug: useTransition's pending boolean is triggered immediately, even if there's no suspension",
        "label": [
            "Type: Enhancement",
            "Component: Concurrent Features",
            "Resolution: Backlog"
        ],
        "date": "2020-02-10T14:50:42Z",
        "status": "closed",
        "description": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version:  241c4467e\r\n\r\n## Steps To Reproduce\r\n\r\n1.  https://codesandbox.io/s/cranky-wing-lc7wr\r\n2. Swap between the two screens by clicking the two buttons\r\n3. Inline loading shows the first time you load screen A. But it also usually shows on subsequent loads, even though there's nothing Suspending\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\nInline loading indicator usually shows on subsequent loads.\r\n\r\n## The expected behavior\r\n\r\nIt should only show on the first load of A",
        "remove_template_description": "<!--    Please provide a clear and concise description of what the bug is. Include    screenshots if needed. Please test using the latest version of the relevant    React packages to make sure your issue has not already been fixed.  -->    React version:  241c4467e        1.  https://codesandbox.io/s/cranky-wing-lc7wr  2. Swap between the two screens by clicking the two buttons  3. Inline loading shows the first time you load screen A. But it also usually shows on subsequent loads, even though there's nothing Suspending    <!--    Your bug will get fixed much faster if we can run your code and it doesn't    have dependencies other than React. Issues without reproduction steps or    code examples may be immediately closed as not actionable.  -->    Link to code example:    <!--    Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a    repository on GitHub, or provide a minimal code example that reproduces the    problem. You may provide a screenshot of the application if you think it is    relevant to your bug report. Here are some tips for providing a minimal    example: https://stackoverflow.com/help/mcve.  -->        Inline loading indicator usually shows on subsequent loads.        It should only show on the first load of A"
    },
    {
        "issue_id": 538611784,
        "title": "react-refresh + ReactDOM: hot reloading only works when bundling React",
        "label": [
            "Type: Enhancement",
            "Component: Fast Refresh"
        ],
        "date": "2019-12-16T19:39:27Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nbug?\r\n\r\n**What is the current behavior?**\r\n\r\n_note: I am encountering this issue when using https://github.com/pmmmwh/react-refresh-webpack-plugin, but I believe it's an issue with react-refresh itself._\r\n\r\nThe react-refresh runtime [overrides](https://github.com/facebook/react/blob/7c21bf72ace77094fd1910cc350a548287ef8350/packages/react-refresh/src/ReactFreshRuntime.js#L459) `__REACT_DEVTOOLS_GLOBAL_HOOK__.inject` to get a reference to the React renderer. In my app, the `inject` method is never called however, because I load react/react-dom from a third-party CDN before my application code. This means that changed components are never actually refreshed in the DOM.\r\n\r\nI believe the issue is that scripts are loaded in this order:\r\n\r\n1. react-devtools sets up the global hook\r\n2. react/react-dom are loaded on the page, and `inject()` is called\r\n3. user code (which is instrumented with the react-refresh babel plugin) is loaded on the page, and `inject()` is monkey-patched\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nFollow the usage steps in the https://github.com/pmmmwh/react-refresh-webpack-plugin repo, but also add `react` and `react-dom` as externals in your Webpack build:\r\n```\r\nmodule.exports = {\r\n  //...\r\n  externals: {\r\n    react: 'React',\r\n    'react-dom': 'ReactDOM'\r\n  }\r\n};\r\n```\r\nthen load those scripts onto the page from a CDN (e.g. unpkg or cdnjs) before the Webpack bundle.\r\n\r\n**What is the expected behavior?**\r\n\r\n`react-refresh` works the same whether React/ReactDOM are bundled with application code, or loaded via an external script.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.8.6 / Chrome / osx\r\n",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**    bug?    **What is the current behavior?**    _note: I am encountering this issue when using https://github.com/pmmmwh/react-refresh-webpack-plugin, but I believe it's an issue with react-refresh itself._    The react-refresh runtime [overrides](https://github.com/facebook/react/blob/7c21bf72ace77094fd1910cc350a548287ef8350/packages/react-refresh/src/ReactFreshRuntime.js#L459) `__REACT_DEVTOOLS_GLOBAL_HOOK__.inject` to get a reference to the React renderer. In my app, the `inject` method is never called however, because I load react/react-dom from a third-party CDN before my application code. This means that changed components are never actually refreshed in the DOM.    I believe the issue is that scripts are loaded in this order:    1. react-devtools sets up the global hook  2. react/react-dom are loaded on the page, and `inject()` is called  3. user code (which is instrumented with the react-refresh babel plugin) is loaded on the page, and `inject()` is monkey-patched    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**    Follow the usage steps in the https://github.com/pmmmwh/react-refresh-webpack-plugin repo, but also add `react` and `react-dom` as externals in your Webpack build:  ```  module.exports = {    //...    externals: {      react: 'React',      'react-dom': 'ReactDOM'    }  };  ```  then load those scripts onto the page from a CDN (e.g. unpkg or cdnjs) before the Webpack bundle.    **What is the expected behavior?**    `react-refresh` works the same whether React/ReactDOM are bundled with application code, or loaded via an external script.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    16.8.6 / Chrome / osx"
    },
    {
        "issue_id": 538436898,
        "title": "Suspense: add messaging when suspense promise neither resolves nor rejects",
        "label": [
            "Type: Enhancement",
            "Component: Suspense",
            "Resolution: Stale"
        ],
        "date": "2019-12-16T14:12:20Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\nRequest a feature\r\n\r\n**What is the current behavior?**\r\nIf you throw a promise that neither resolves nor rejects, you hit the suspense fallback UI indefinitely and receive no console messaging that helps you debug this.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nAll versions that allow for suspense\r\n\r\n**Proposed feature**\r\nLog a warning to the console if a suspense promise takes longer than a certain amount of time to settle. Here is some code demonstrating what that could look like inside of the react codebase:\r\n\r\n```js\r\ntry {\r\n  renderComponent(...);\r\n} catch (err) {\r\n  if (err && err.then) {\r\n    const timeoutId = setTimeout(() => {\r\n      console.warn(`A suspense promise triggered in component <Foo /> did not resolve nor reject after 3 seconds. If the promise never settles, the suspense fallback UI will be shown forever.`)\r\n    }, 3000)\r\n\r\n    err.finally(() => {\r\n      clearTimeout(timeoutId);\r\n    })\r\n\r\n    // Now actually do all the suspense magicks...\r\n  }\r\n}\r\n```",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**  Request a feature    **What is the current behavior?**  If you throw a promise that neither resolves nor rejects, you hit the suspense fallback UI indefinitely and receive no console messaging that helps you debug this.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  All versions that allow for suspense    **Proposed feature**  Log a warning to the console if a suspense promise takes longer than a certain amount of time to settle. Here is some code demonstrating what that could look like inside of the react codebase:    ```js  try {    renderComponent(...);  } catch (err) {    if (err && err.then) {      const timeoutId = setTimeout(() => {        console.warn(`A suspense promise triggered in component <Foo /> did not resolve nor reject after 3 seconds. If the promise never settles, the suspense fallback UI will be shown forever.`)      }, 3000)        err.finally(() => {        clearTimeout(timeoutId);      })        // Now actually do all the suspense magicks...    }  }  ```"
    },
    {
        "issue_id": 534749697,
        "title": "react-refresh load from CDN?",
        "label": [
            "Type: Enhancement",
            "Component: Fast Refresh"
        ],
        "date": "2019-12-09T07:42:10Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nfeature\r\n\r\n**What is the current behavior?**\r\n\r\nWhen `react-dom` is loaded from CDN like `<script src=\"https://cdn.jsdelivr.net/npm/react-dom@16.12.0/umd/react-dom.development.js\"></script>`, `react-refresh` failed to inject hook into devtools.\r\n\r\nI've created a related issue here: https://github.com/pmmmwh/react-refresh-webpack-plugin/issues/13\r\n\r\nWe should find a way to invoke `injectIntoGlobalHook` function from `react-refresh/runtime`, however this file is in cjs format so we cannot currently do this in a simple way.\r\n\r\n**What is the expected behavior?**\r\n\r\nI'd like `react-refresh` to publish runtime as a umd bundle so we can reference it from CDN and put it before `react-dom`'s `<script>` element, then invoke `injectIntoGlobalHook` in the right place.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n- `react-dom`: 16.12.0\r\n- `react-refresh`: 0.7.0",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**    feature    **What is the current behavior?**    When `react-dom` is loaded from CDN like `<script src=\"https://cdn.jsdelivr.net/npm/react-dom@16.12.0/umd/react-dom.development.js\"></script>`, `react-refresh` failed to inject hook into devtools.    I've created a related issue here: https://github.com/pmmmwh/react-refresh-webpack-plugin/issues/13    We should find a way to invoke `injectIntoGlobalHook` function from `react-refresh/runtime`, however this file is in cjs format so we cannot currently do this in a simple way.    **What is the expected behavior?**    I'd like `react-refresh` to publish runtime as a umd bundle so we can reference it from CDN and put it before `react-dom`'s `<script>` element, then invoke `injectIntoGlobalHook` in the right place.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    - `react-dom`: 16.12.0  - `react-refresh`: 0.7.0"
    },
    {
        "issue_id": 523935061,
        "title": "Devtools resize Component State/Props pane",
        "label": [
            "Type: Enhancement",
            "Component: Developer Tools",
            "good first issue (taken)"
        ],
        "date": "2019-11-17T04:46:47Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nI would like to request a feature\r\n\r\n**What is the current behavior?**\r\nResizing the state/props pane in Component Tab\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n**What is the expected behavior?**\r\nAllow resizing pane\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nDevtools 4.2.0 and Chrome Version 78.0.3904.97 \r\n\r\n![image](https://user-images.githubusercontent.com/20182536/69003149-de088780-08c2-11ea-9f32-391faee6a557.png)\r\n",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**  I would like to request a feature    **What is the current behavior?**  Resizing the state/props pane in Component Tab    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**    **What is the expected behavior?**  Allow resizing pane    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  Devtools 4.2.0 and Chrome Version 78.0.3904.97     ![image](https://user-images.githubusercontent.com/20182536/69003149-de088780-08c2-11ea-9f32-391faee6a557.png)"
    },
    {
        "issue_id": 520572172,
        "title": "useTransition: After startTransition, it does not react to passed props changes",
        "label": [
            "Type: Enhancement",
            "Component: Concurrent Features"
        ],
        "date": "2019-11-10T08:47:41Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nProbably a bug\r\n**What is the current behavior?**\r\nAfter firing startTransition, \"current\" component stops reacting to passed props changes while reacting to local state changes.\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nIn the following CodeSandBox, `count` is counting up in the parent component using `setInterval` but if we click \"CLICK ME\", it suddenly stops updating.\r\nhttps://codesandbox.io/s/usetransition-stop-reacting-passed-props-updates-p9k1b\r\n\r\n**What is the expected behavior?**\r\nWhen passed props change, it should show the latest value of it where possible\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nExperimental build (0.0.0-experimental-5faf377df)",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**  Probably a bug  **What is the current behavior?**  After firing startTransition, \"current\" component stops reacting to passed props changes while reacting to local state changes.  **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**    In the following CodeSandBox, `count` is counting up in the parent component using `setInterval` but if we click \"CLICK ME\", it suddenly stops updating.  https://codesandbox.io/s/usetransition-stop-reacting-passed-props-updates-p9k1b    **What is the expected behavior?**  When passed props change, it should show the latest value of it where possible    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  Experimental build (0.0.0-experimental-5faf377df)"
    },
    {
        "issue_id": 517530511,
        "title": "Is it possible to share contexts between renderers?",
        "label": [
            "Type: Enhancement",
            "Component: Reconciler"
        ],
        "date": "2019-11-05T03:39:28Z",
        "status": "open",
        "description": "**What is the current behavior?**\r\n\r\nHey \ud83d\udc4b I maintain [react-pdf](https://github.com/diegomura/react-pdf). Thanks for your awesome work and making `react-reconciler` for us to use! \r\n\r\n I've got many issues  lately regarding context not working on my library and when doing tests I found out that context values aren't shared between renderers. This makes it impossible to share state such as themes, i18n, redux and more. As a bit of context, React-pdf is not a primary renderer, and as such, when used in the browser it runs on top of react-dom.\r\n\r\nI found the `isPrimaryRenderer` reconciler option that's supposed to be used for \"multiple renderers concurrently render using the same context objects\" but still any access of the context inside react-pdf components get's just the initial value (even if the context was updated with other value). The same happens for `react-art` that also set `isPrimaryRenderer=false`.\r\n\r\n**Minimal demo**\r\n\r\nI prepared a quick demo using react-art so you can see how it currently works:\r\n\r\nhttps://codesandbox.io/s/pedantic-hill-54kid?fontsize=14\r\n\r\n**What is the expected behavior?**\r\n\r\nShare contexts between renderers when using `isPrimaryRenderer` config. Is there a way of achieving this? Am I missing something?\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact: 16.11.0\r\nReact-dom: 16.11.0\r\n",
        "remove_template_description": "**What is the current behavior?**    Hey \ud83d\udc4b I maintain [react-pdf](https://github.com/diegomura/react-pdf). Thanks for your awesome work and making `react-reconciler` for us to use!      I've got many issues  lately regarding context not working on my library and when doing tests I found out that context values aren't shared between renderers. This makes it impossible to share state such as themes, i18n, redux and more. As a bit of context, React-pdf is not a primary renderer, and as such, when used in the browser it runs on top of react-dom.    I found the `isPrimaryRenderer` reconciler option that's supposed to be used for \"multiple renderers concurrently render using the same context objects\" but still any access of the context inside react-pdf components get's just the initial value (even if the context was updated with other value). The same happens for `react-art` that also set `isPrimaryRenderer=false`.    **Minimal demo**    I prepared a quick demo using react-art so you can see how it currently works:    https://codesandbox.io/s/pedantic-hill-54kid?fontsize=14    **What is the expected behavior?**    Share contexts between renderers when using `isPrimaryRenderer` config. Is there a way of achieving this? Am I missing something?    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    React: 16.11.0  React-dom: 16.11.0"
    },
    {
        "issue_id": 514609519,
        "title": "[eslint-plugin-react-hooks] Apply the rules of hooks to a forwardRef-wrapped component",
        "label": [
            "Type: Enhancement",
            "Component: Hooks",
            "Component: ESLint Rules"
        ],
        "date": "2019-10-30T11:56:28Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nFeature (to catch potential bugs)\r\n\r\n**What is the current behavior?**\r\nThe react-hooks/rules-of-hooks ESLint rule catches uses of hooks in conditionals in components, but does not recognise an anonymous function wrapped in forwardRef as a component. \r\n\r\nThe following example breaks the rules of hooks, but isn't caught by the rule:\r\n```jsx\r\n// This should fail\r\nconst FancyButton = React.forwardRef((props, ref) => {\r\n  if (props.fancy) {\r\n    useCustomHook();\r\n  }\r\n  return <button ref={ref}>{props.children}</button>;\r\n});\r\n```\r\n\r\n**What is the expected behavior?**\r\nThe above example should be caught by react-hooks/rules-of-hooks, and raise the \"React Hook \"useCustomHook\" is called conditionally\" error.\r\n",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**  Feature (to catch potential bugs)    **What is the current behavior?**  The react-hooks/rules-of-hooks ESLint rule catches uses of hooks in conditionals in components, but does not recognise an anonymous function wrapped in forwardRef as a component.     The following example breaks the rules of hooks, but isn't caught by the rule:  ```jsx  // This should fail  const FancyButton = React.forwardRef((props, ref) => {    if (props.fancy) {      useCustomHook();    }    return <button ref={ref}>{props.children}</button>;  });  ```    **What is the expected behavior?**  The above example should be caught by react-hooks/rules-of-hooks, and raise the \"React Hook \"useCustomHook\" is called conditionally\" error."
    },
    {
        "issue_id": 512765354,
        "title": "[eslint-plugin-react-hooks] useCallback does not add dependencies when callback is not function expression",
        "label": [
            "Type: Enhancement",
            "Component: Hooks",
            "Component: ESLint Rules",
            "Resolution: Stale"
        ],
        "date": "2019-10-26T00:12:59Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nWhen the argument of `useCallback` is not a function expression eslint-plugin-react-hooks will not autofix  dependencies.\r\n\r\nExample:\r\n```js\r\nuseCallback(debounce(() => console.log(props.value), 100), []);\r\n```\r\n\r\nWorkaround:\r\n```js\r\nuseMemo(() => debounce(() => console.log(props.value), 100), [props.value]);\r\n```\r\n\r\n**What is the expected behavior?**\r\n```js\r\nuseCallback(debounce(() => console.log(props.value), 100), [props.value]);\r\n```\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\neslint-plugin-react-hooks@^1.6.0, react@16.9.0-alpha.0\r\n",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**  Bug    **What is the current behavior?**  When the argument of `useCallback` is not a function expression eslint-plugin-react-hooks will not autofix  dependencies.    Example:  ```js  useCallback(debounce(() => console.log(props.value), 100), []);  ```    Workaround:  ```js  useMemo(() => debounce(() => console.log(props.value), 100), [props.value]);  ```    **What is the expected behavior?**  ```js  useCallback(debounce(() => console.log(props.value), 100), [props.value]);  ```    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    eslint-plugin-react-hooks@^1.6.0, react@16.9.0-alpha.0"
    },
    {
        "issue_id": 497635505,
        "title": "[eslint-plugin-react-hooks] allow configuring custom hooks as \"static\"",
        "label": [
            "Type: Enhancement",
            "Component: ESLint Rules"
        ],
        "date": "2019-09-24T11:45:13Z",
        "status": "open",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature/enhancement\r\n\r\n**What is the current behavior?**\r\n\r\nCurrently the eslint plugin is unable to understand when the **return value** of a custom hook is static.\r\n\r\nExample:\r\n\r\n```jsx\r\nimport React from 'react'\r\n\r\nfunction useToggle(init = false) {\r\n  const [state, setState] = React.useState(init)\r\n  const toggleState = React.useCallback(() => { setState(v => !v) }, [])\r\n  return [state, toggleState]\r\n}\r\n\r\nfunction MyComponent({someProp}) {\r\n  const [enabled, toggleEnabled] = useToggle()\r\n\r\n  const handler = React.useCallback(() => {\r\n    toggleEnabled()\r\n    doSomethingWithTheProp(someProp)\r\n  }, [someProp]) // exhaustive-deps warning for toggleEnabled\r\n\r\n  return <button onClick={handler}>Do something</button>\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nI would like to configure `eslint-plugin-react-hooks` to tell it that `toggleEnabled` is static and doesn't need to be included in a dependency array. This isn't a huge deal but more of an ergonomic papercut that discourages writing/using custom hooks.\r\n\r\nAs for how/where to configure it, I would be happy to add something like this to my .eslintrc:\r\n\r\n```js\r\n{\r\n  \"staticHooks\": {\r\n    \"useToggle\": [false, true],  // first return value is not stable, second is\r\n    \"useForm\": true,             // entire return value is stable \r\n  }\r\n}\r\n```\r\n\r\nThen the plugin could have an additional check [after these 2 checks](https://github.com/facebook/react/blob/8b580a89d6dbbde8a3ed69475899addef1751116/packages/eslint-plugin-react-hooks/src/ExhaustiveDeps.js#L228-L231) that tests for custom names.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nAll versions of eslint-plugin-react-hooks have the same deficiency.\r\n\r\n## Please read my first comment below and try my fork if you are interested in this feature!",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**    Feature/enhancement    **What is the current behavior?**    Currently the eslint plugin is unable to understand when the **return value** of a custom hook is static.    Example:    ```jsx  import React from 'react'    function useToggle(init = false) {    const [state, setState] = React.useState(init)    const toggleState = React.useCallback(() => { setState(v => !v) }, [])    return [state, toggleState]  }    function MyComponent({someProp}) {    const [enabled, toggleEnabled] = useToggle()      const handler = React.useCallback(() => {      toggleEnabled()      doSomethingWithTheProp(someProp)    }, [someProp]) // exhaustive-deps warning for toggleEnabled      return <button onClick={handler}>Do something</button>  }  ```    **What is the expected behavior?**    I would like to configure `eslint-plugin-react-hooks` to tell it that `toggleEnabled` is static and doesn't need to be included in a dependency array. This isn't a huge deal but more of an ergonomic papercut that discourages writing/using custom hooks.    As for how/where to configure it, I would be happy to add something like this to my .eslintrc:    ```js  {    \"staticHooks\": {      \"useToggle\": [false, true],  // first return value is not stable, second is      \"useForm\": true,             // entire return value is stable     }  }  ```    Then the plugin could have an additional check [after these 2 checks](https://github.com/facebook/react/blob/8b580a89d6dbbde8a3ed69475899addef1751116/packages/eslint-plugin-react-hooks/src/ExhaustiveDeps.js#L228-L231) that tests for custom names.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    All versions of eslint-plugin-react-hooks have the same deficiency.    ## Please read my first comment below and try my fork if you are interested in this feature!"
    },
    {
        "issue_id": 495017510,
        "title": "Wrong warning message is shown",
        "label": [
            "Type: Enhancement",
            "Resolution: Stale"
        ],
        "date": "2019-09-18T06:33:36Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBUG\r\n**What is the current behavior?**\r\nWrong warning message is shown\r\n![image](https://user-images.githubusercontent.com/19818679/65120957-13e8d700-da0c-11e9-8289-e5ed7e5fe422.png)\r\n![image](https://user-images.githubusercontent.com/19818679/65120992-206d2f80-da0c-11e9-948d-c7ab494879cf.png)\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\ngithub file: [github file](https://github.com/kambleaa007/AshITech-ReactJS-Redux-ReactRouter-Heroku-OAuth-CircleCI/blob/ba131c0608e3b3f0027fd771db789ae0685133bf/src/components/DishDetailComponent.js)\r\n\r\nsandbox: [sandbox](https://codesandbox.io/s/xenodochial-fast-34ftl?fontsize=14&hidenavigation=1&theme=dark)\r\n\r\nwrite simple functional componenet, put return method NOT render,\r\nwarning tells its render,\r\nactually its not render, its return method \r\n\r\n**What is the expected behavior?**\r\nShould tell, its return method of something.....\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n  \"name\": \"confusion\",\r\n  \"version\": \"0.1.0\",\r\n  \"private\": true,\r\n  \"dependencies\": {\r\n    \"bootstrap\": \"4.0.0\",\r\n    \"bootstrap-social\": \"5.1.1\",\r\n    \"cross-fetch\": \"2.1.0\",\r\n    \"font-awesome\": \"4.7.0\",\r\n    \"gh-pages\": \"^2.0.1\",\r\n    \"mdbreact\": \"^4.18.0\",\r\n    \"prop-types\": \"15.6.0\",\r\n    \"react\": \"^16.4.0\",\r\n    \"react-animation-components\": \"3.0.0\",\r\n    \"react-dom\": \"^16.4.0\",\r\n    \"react-popper\": \"0.9.2\",\r\n    \"react-redux\": \"5.0.7\",\r\n    \"react-redux-form\": \"1.16.8\",\r\n    \"react-router-dom\": \"4.2.2\",\r\n    \"react-scripts\": \"1.1.4\",\r\n    \"react-transition-group\": \"2.3.0\",\r\n    \"reactstrap\": \"5.0.0\",\r\n    \"redux\": \"3.7.2\",\r\n    \"redux-logger\": \"3.0.6\",\r\n    \"redux-thunk\": \"2.2.0\"",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**  BUG  **What is the current behavior?**  Wrong warning message is shown  ![image](https://user-images.githubusercontent.com/19818679/65120957-13e8d700-da0c-11e9-8289-e5ed7e5fe422.png)  ![image](https://user-images.githubusercontent.com/19818679/65120992-206d2f80-da0c-11e9-948d-c7ab494879cf.png)    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**    github file: [github file](https://github.com/kambleaa007/AshITech-ReactJS-Redux-ReactRouter-Heroku-OAuth-CircleCI/blob/ba131c0608e3b3f0027fd771db789ae0685133bf/src/components/DishDetailComponent.js)    sandbox: [sandbox](https://codesandbox.io/s/xenodochial-fast-34ftl?fontsize=14&hidenavigation=1&theme=dark)    write simple functional componenet, put return method NOT render,  warning tells its render,  actually its not render, its return method     **What is the expected behavior?**  Should tell, its return method of something.....    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**      \"name\": \"confusion\",    \"version\": \"0.1.0\",    \"private\": true,    \"dependencies\": {      \"bootstrap\": \"4.0.0\",      \"bootstrap-social\": \"5.1.1\",      \"cross-fetch\": \"2.1.0\",      \"font-awesome\": \"4.7.0\",      \"gh-pages\": \"^2.0.1\",      \"mdbreact\": \"^4.18.0\",      \"prop-types\": \"15.6.0\",      \"react\": \"^16.4.0\",      \"react-animation-components\": \"3.0.0\",      \"react-dom\": \"^16.4.0\",      \"react-popper\": \"0.9.2\",      \"react-redux\": \"5.0.7\",      \"react-redux-form\": \"1.16.8\",      \"react-router-dom\": \"4.2.2\",      \"react-scripts\": \"1.1.4\",      \"react-transition-group\": \"2.3.0\",      \"reactstrap\": \"5.0.0\",      \"redux\": \"3.7.2\",      \"redux-logger\": \"3.0.6\",      \"redux-thunk\": \"2.2.0\""
    },
    {
        "issue_id": 490220921,
        "title": "DevTools: Uninitialized context is displayed as an empty object",
        "label": [
            "Type: Enhancement",
            "Component: Developer Tools"
        ],
        "date": "2019-09-06T09:18:19Z",
        "status": "closed",
        "description": "When inspecting a component that is missing `context` it is displayed as an empty object, meanwhile if the `state` is not initialized it is not displayed at all, for no `props` it is displayed the string `None`. In my humble opinion it is misleading that no context is displayed as an empty object.",
        "remove_template_description": "When inspecting a component that is missing `context` it is displayed as an empty object, meanwhile if the `state` is not initialized it is not displayed at all, for no `props` it is displayed the string `None`. In my humble opinion it is misleading that no context is displayed as an empty object."
    },
    {
        "issue_id": 483499048,
        "title": "Custom hook and strange warnings ",
        "label": [
            "Type: Enhancement"
        ],
        "date": "2019-08-21T15:39:25Z",
        "status": "closed",
        "description": "I've a question about a behaviour that appears strange to me.\r\n\r\nI am writing a custom hook.\r\n\r\n```js\r\nconst useToggle =\r\n  (initialState) => {\r\n    const [isTrue, setState] = useState(initialState || false);\r\n\r\n    const False =\r\n      () => {\r\n        setState(false);\r\n      };\r\n\r\n    const True =\r\n      () => {\r\n        setState(true);\r\n      };\r\n\r\n    return [isTrue, True, False];\r\n  };\r\n```\r\n\r\nIt works fine.\r\n\r\nBut if I try to rewrite `False`, and `True` using `setState.bind` I get the following warning in console.\r\n\r\n```js\r\nconst False = setState.bind(null, false);\r\n\r\nconst True = setState.bind(null, true);\r\n```\r\n\r\nThe warning:\r\n\r\n```\r\nWarning: State updates from the useState() and useReducer() Hooks don't support the second callback argument.\r\nTo execute a side effect after rendering, declare it in the component body with useEffect().\r\n```\r\n\r\nIs this the expected behaviour?\r\n\r\nWhy is that? The two snippet appear equivalent to me.\r\n",
        "remove_template_description": "I've a question about a behaviour that appears strange to me.    I am writing a custom hook.    ```js  const useToggle =    (initialState) => {      const [isTrue, setState] = useState(initialState || false);        const False =        () => {          setState(false);        };        const True =        () => {          setState(true);        };        return [isTrue, True, False];    };  ```    It works fine.    But if I try to rewrite `False`, and `True` using `setState.bind` I get the following warning in console.    ```js  const False = setState.bind(null, false);    const True = setState.bind(null, true);  ```    The warning:    ```  Warning: State updates from the useState() and useReducer() Hooks don't support the second callback argument.  To execute a side effect after rendering, declare it in the component body with useEffect().  ```    Is this the expected behaviour?    Why is that? The two snippet appear equivalent to me."
    },
    {
        "issue_id": 482567929,
        "title": "DevTools: Show component file path",
        "label": [
            "Type: Enhancement",
            "Component: Developer Tools"
        ],
        "date": "2019-08-19T23:05:12Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature.\r\n\r\n**What is the current behavior?**\r\n\r\nThe new DevTools doesn't show the component file path as did the v3 version.\r\n\r\n**What is the expected behavior?**\r\n\r\nIt would be great to show the component file path, it's a really important feature when working in a large codebase.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact DevTools v4 is affected, v3 had it.\r\n",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**    Feature.    **What is the current behavior?**    The new DevTools doesn't show the component file path as did the v3 version.    **What is the expected behavior?**    It would be great to show the component file path, it's a really important feature when working in a large codebase.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    React DevTools v4 is affected, v3 had it."
    },
    {
        "issue_id": 482557184,
        "title": "DevTools: Fix or silence \"cannot find fiber with ID\" warnings when hovering ",
        "label": [
            "Type: Enhancement",
            "Component: Developer Tools",
            "React Core Team"
        ],
        "date": "2019-08-19T22:26:25Z",
        "status": "closed",
        "description": "Sometimes I see \"cannot find fiber with ID\" when hovering over the tree. They are sporadic. I'll need to dig into why they happen. But we also need to look at our usage of warnings to make sure they're either actionable or gated by DEV/DEBUG.\r\n\r\n---\r\nOriginally reported by @gaearon via https://github.com/bvaughn/react-devtools-experimental/issues/166",
        "remove_template_description": "Sometimes I see \"cannot find fiber with ID\" when hovering over the tree. They are sporadic. I'll need to dig into why they happen. But we also need to look at our usage of warnings to make sure they're either actionable or gated by DEV/DEBUG.    ---  Originally reported by @gaearon via https://github.com/bvaughn/react-devtools-experimental/issues/166"
    },
    {
        "issue_id": 482557107,
        "title": "DevTools:  Commit picker should register leaving the picker at a side as setting a terminal value",
        "label": [
            "Type: Enhancement",
            "Component: Developer Tools",
            "React Core Team"
        ],
        "date": "2019-08-19T22:26:10Z",
        "status": "closed",
        "description": "Seems non-ideal. Typically range controls handle this case.\r\n\r\n![Screen Recording 2019-04-12 at 07 54 PM](https://user-images.githubusercontent.com/810438/56059844-0e041100-5d5d-11e9-892c-f3872414ffaa.gif)\r\n\r\n\r\n---\r\nOriginally reported by @gaearon via https://github.com/bvaughn/react-devtools-experimental/issues/141",
        "remove_template_description": "Seems non-ideal. Typically range controls handle this case.    ![Screen Recording 2019-04-12 at 07 54 PM](https://user-images.githubusercontent.com/810438/56059844-0e041100-5d5d-11e9-892c-f3872414ffaa.gif)      ---  Originally reported by @gaearon via https://github.com/bvaughn/react-devtools-experimental/issues/141"
    },
    {
        "issue_id": 482557034,
        "title": "DevTools: Too deep trees can cause a stack overflow",
        "label": [
            "Resolution: Duplicate",
            "Type: Enhancement",
            "Component: Developer Tools"
        ],
        "date": "2019-08-19T22:25:53Z",
        "status": "closed",
        "description": "With 10,000 item nesting in `DeeplyNestedComponents` case:\r\n\r\n<img width=\"432\" alt=\"Screen Shot 2019-04-06 at 15 16 02\" src=\"https://user-images.githubusercontent.com/810438/55670638-f3bec480-587e-11e9-850d-8a247aa42f7c.png\">\r\n\r\nNot super realistic but we could fix this by avoiding recursion in the traversal.\r\n\r\n---\r\nOriginally reported by @gaearon via https://github.com/bvaughn/react-devtools-experimental/issues/76",
        "remove_template_description": "With 10,000 item nesting in `DeeplyNestedComponents` case:    <img width=\"432\" alt=\"Screen Shot 2019-04-06 at 15 16 02\" src=\"https://user-images.githubusercontent.com/810438/55670638-f3bec480-587e-11e9-850d-8a247aa42f7c.png\">    Not super realistic but we could fix this by avoiding recursion in the traversal.    ---  Originally reported by @gaearon via https://github.com/bvaughn/react-devtools-experimental/issues/76"
    },
    {
        "issue_id": 482556895,
        "title": "DevTools: Suspense Debugger",
        "label": [
            "Type: Enhancement",
            "Component: Developer Tools",
            "React Core Team"
        ],
        "date": "2019-08-19T22:25:26Z",
        "status": "closed",
        "description": "### MVP\r\n- [x] Initial prototype with a tree and toggling.\r\n- [x] Tree should reflect real suspense state.\r\n- [ ] Make it less fragile.\r\n  - [x] Does findDOMNode issue affect this?\r\n- [ ] Ensure expensive tree construction doesn't run unless you're on the tab.\r\n- [ ] Improve navigation so the user doesn't get lost.\r\n  - [ ] Maybe flash nodes.\r\n  - [ ] Maybe offer a \"finder\" tool.\r\n- [ ] Sync selection with the Components tab.\r\n- [ ] Make it look nice. @bvaughn \r\n\r\n### Future\r\n- [ ] Consider a fuzzer.\r\n- [ ] Considering filtering by viewport.\r\n- [ ] Optimize the tree updates.\r\n  - [ ] Consider listening to operations. Don't forget to handle ancestor reorder.\r\n\r\n---\r\nOriginally reported by @gaearon via https://github.com/bvaughn/react-devtools-experimental/issues/43",
        "remove_template_description": "### MVP  - [x] Initial prototype with a tree and toggling.  - [x] Tree should reflect real suspense state.  - [ ] Make it less fragile.    - [x] Does findDOMNode issue affect this?  - [ ] Ensure expensive tree construction doesn't run unless you're on the tab.  - [ ] Improve navigation so the user doesn't get lost.    - [ ] Maybe flash nodes.    - [ ] Maybe offer a \"finder\" tool.  - [ ] Sync selection with the Components tab.  - [ ] Make it look nice. @bvaughn     ### Future  - [ ] Consider a fuzzer.  - [ ] Considering filtering by viewport.  - [ ] Optimize the tree updates.    - [ ] Consider listening to operations. Don't forget to handle ancestor reorder.    ---  Originally reported by @gaearon via https://github.com/bvaughn/react-devtools-experimental/issues/43"
    },
    {
        "issue_id": 482555047,
        "title": "DevTools: Should be able to add a prop that is not yet set",
        "label": [
            "Type: Enhancement",
            "Component: Developer Tools"
        ],
        "date": "2019-08-19T22:19:11Z",
        "status": "closed",
        "description": "Right now I can inspect a component and edit its props but I could not find a way to add a _new_ prop that wasn't already set.\r\n\r\n---\r\nOriginally reported by @steveluscher via https://github.com/bvaughn/react-devtools-experimental/issues/300",
        "remove_template_description": "Right now I can inspect a component and edit its props but I could not find a way to add a _new_ prop that wasn't already set.    ---  Originally reported by @steveluscher via https://github.com/bvaughn/react-devtools-experimental/issues/300"
    },
    {
        "issue_id": 482551102,
        "title": "DevTools: Better linking between browser Performance tab and DevTools Profiler",
        "label": [
            "Type: Enhancement",
            "Component: Developer Tools",
            "React Core Team"
        ],
        "date": "2019-08-19T22:07:31Z",
        "status": "open",
        "description": "Notes from a chat with Benoit:\r\n\r\nIt would be nice if starting profiling (or reload and profiling) in the browser auto-started profiling in DevTools.\r\n\r\nIt would also be nice if viewing a range of time in the Performance tab narrowed down the commits within the Profiler. At least starting the profilers at the same time would enable a manual match-up.\r\n\r\nTo my knowledge, none of the currently available APIs (including experimental) would enable us to support this level of integration.\r\n\r\n---\r\nIf we were to make use of the DevTools protocol, we could [`Profiler.start`](https://vanilla.aslushnikov.com/?Profiler.start) and [`Profiler.stop`](https://vanilla.aslushnikov.com/?Profiler.stop) the built-in profiler in sync with React's own profiler. Chrome's profiler also dispatches [`Profiler.consoleProfileStarted`](https://vanilla.aslushnikov.com/?Profiler.consoleProfileStarted) and [`Profiler.consoleProfileFinished`](https://vanilla.aslushnikov.com/?Profiler.consoleProfileFinished) events which we _could_ use to follow the browser's profiler if we wanted to.\r\n\r\nThere do not appear to be any APIs/events for syncing the zoomed-in range.\r\n\r\n---\r\nOriginally reported via https://github.com/bvaughn/react-devtools-experimental/issues/37",
        "remove_template_description": "Notes from a chat with Benoit:    It would be nice if starting profiling (or reload and profiling) in the browser auto-started profiling in DevTools.    It would also be nice if viewing a range of time in the Performance tab narrowed down the commits within the Profiler. At least starting the profilers at the same time would enable a manual match-up.    To my knowledge, none of the currently available APIs (including experimental) would enable us to support this level of integration.    ---  If we were to make use of the DevTools protocol, we could [`Profiler.start`](https://vanilla.aslushnikov.com/?Profiler.start) and [`Profiler.stop`](https://vanilla.aslushnikov.com/?Profiler.stop) the built-in profiler in sync with React's own profiler. Chrome's profiler also dispatches [`Profiler.consoleProfileStarted`](https://vanilla.aslushnikov.com/?Profiler.consoleProfileStarted) and [`Profiler.consoleProfileFinished`](https://vanilla.aslushnikov.com/?Profiler.consoleProfileFinished) events which we _could_ use to follow the browser's profiler if we wanted to.    There do not appear to be any APIs/events for syncing the zoomed-in range.    ---  Originally reported via https://github.com/bvaughn/react-devtools-experimental/issues/37"
    },
    {
        "issue_id": 482550920,
        "title": "DevTools: Should Profiler surface the base duration?",
        "label": [
            "Type: Enhancement",
            "Component: Developer Tools",
            "React Core Team"
        ],
        "date": "2019-08-19T22:07:02Z",
        "status": "open",
        "description": "Benoit shared feedback that it would be helpful to show the base duration for the tree (and/or selected element) to get a sense of the total cost over time. (Not sure yet what we'd call this.)\r\n\r\n---\r\nOriginally reported via https://github.com/bvaughn/react-devtools-experimental/issues/55",
        "remove_template_description": "Benoit shared feedback that it would be helpful to show the base duration for the tree (and/or selected element) to get a sense of the total cost over time. (Not sure yet what we'd call this.)    ---  Originally reported via https://github.com/bvaughn/react-devtools-experimental/issues/55"
    },
    {
        "issue_id": 482550722,
        "title": "DevTools: Collect more info when profiling",
        "label": [
            "Type: Enhancement",
            "Component: Developer Tools",
            "React Core Team"
        ],
        "date": "2019-08-19T22:06:29Z",
        "status": "open",
        "description": "Some feedback I've heard from a DevTools user (roughly transcribed by me):\r\n\r\n> I'm trying to pinpoint those renders...with hooks, it's sometimes more unclear to me why something is rendering...I generally don't use devtools much anywhere. I use console.log. But Redux devtools worked really well for me because I could see when things were changing and what exactly changed.\r\n\r\nMaybe we could add an opt-in mode (in Settings > Profiler) to collect more data when profiling about _why_ a component rendered. For example, if `props` or `state` changed, we could show which keys changed (just their name, not their values). Maybe we could do something similar for context and for hooks?\r\n\r\nThen we could add this information to the right side panel for the selected fiber in the Profiler UI.\r\n\r\n---\r\nOriginally reported via https://github.com/bvaughn/react-devtools-experimental/issues/98",
        "remove_template_description": "Some feedback I've heard from a DevTools user (roughly transcribed by me):    > I'm trying to pinpoint those renders...with hooks, it's sometimes more unclear to me why something is rendering...I generally don't use devtools much anywhere. I use console.log. But Redux devtools worked really well for me because I could see when things were changing and what exactly changed.    Maybe we could add an opt-in mode (in Settings > Profiler) to collect more data when profiling about _why_ a component rendered. For example, if `props` or `state` changed, we could show which keys changed (just their name, not their values). Maybe we could do something similar for context and for hooks?    Then we could add this information to the right side panel for the selected fiber in the Profiler UI.    ---  Originally reported via https://github.com/bvaughn/react-devtools-experimental/issues/98"
    },
    {
        "issue_id": 482547444,
        "title": "DevTools: Component bookmarks",
        "label": [
            "Type: Enhancement",
            "Type: Discussion",
            "Component: Developer Tools",
            "React Core Team"
        ],
        "date": "2019-08-19T21:57:12Z",
        "status": "open",
        "description": "Product developers sometimes find it useful to jump back and forth between a few components in a tree. Currently this requires scrolling or using the selection tool. Maybe we could allow you to temporarily bookmark one or more components somehow? Then the existing Search interface could maybe be repurposed to let you step between bookmarked components (when there's no search text).\r\n\r\nThese bookmarks would probably not need to be persisted between reloads, so they could be associated with the specific in-memory element<sup>1</sup>.\r\n\r\n<sup>1</sup> Although this association would be lost with a filter change.\r\n\r\n---\r\nOriginally reported via https://github.com/bvaughn/react-devtools-experimental/issues/305",
        "remove_template_description": "Product developers sometimes find it useful to jump back and forth between a few components in a tree. Currently this requires scrolling or using the selection tool. Maybe we could allow you to temporarily bookmark one or more components somehow? Then the existing Search interface could maybe be repurposed to let you step between bookmarked components (when there's no search text).    These bookmarks would probably not need to be persisted between reloads, so they could be associated with the specific in-memory element<sup>1</sup>.    <sup>1</sup> Although this association would be lost with a filter change.    ---  Originally reported via https://github.com/bvaughn/react-devtools-experimental/issues/305"
    },
    {
        "issue_id": 482547222,
        "title": "DevTools: Profiler: Show which hooks changed",
        "label": [
            "Type: Enhancement",
            "Component: Developer Tools",
            "React Core Team"
        ],
        "date": "2019-08-19T21:56:36Z",
        "status": "open",
        "description": "# \"Can you show which hooks changed?\"\r\n\r\n...is a question I've heard a couple of times with regard to the new Profiler change-tracking feature. This request is certainly understandable, but it presents a couple of challenges:\r\n\r\n1. Identifying which hooks values change would requires shallowly re-rendering each function component.\r\n2. Identifying a hook in a non-ambiguous way requires displaying the full hooks tree structure, since hooks aren't named. (Alternately we could support named hooks, #16474)\r\n\r\nLet's take each of a look at each of these below.\r\n\r\n## 1 - Identifying which hooks values change\r\n\r\nOne of the challenge for DevTools when it comes to hooks is identifying custom hooks. Sebastian's [proposed solution](https://github.com/bvaughn/react-devtools-experimental/blob/master/src/backend/ReactDebugHooks.js) is that DevTools temporarily overrides React's hooks dispatcher while it shallowly re-renders the component. During the re-render, each time one of the built-in hooks is used, our override implementation parses the stack to identify \"custom hooks\" (functions higher up in the callstack that begin with \"use\"). After render is completed, we reassemble this information into a tree structure which DevTools can display.\r\n\r\nCurrently we only do this  shallow render when a component is [inspected](https://github.com/bvaughn/react-devtools-experimental/blob/master/OVERVIEW.md#inspecting-an-element), but in order for us to track which hooks have changed while profiling, we would need to shallowly render _every_ component using hooks during the profiling session. Mostly likely we would have to do this during the performance sensitive \"commit\" phase since that's when DevTools is notified of an update.\r\n\r\nI think we could do better than re-running the above hooks override for every component on every commit if we:\r\n* Created a map of Fiber to cached hooks tree structure.\r\n* Lazily populate the above map (by shallow re-rendering) only when a component was updated for the first time.\r\n* Compared Fiber `memoizedState`s to identify changes on future commits and map them back to the tree structure based on their position in the list structure. <sup>1</sup>\r\n\r\nHowever, even with the above optimizations this would still add significant overhead to a performance sensitive phase.\r\n\r\n<sup>1</sup> I think this should work but might also end up being complicated to implement.\r\n\r\n## 2 - Identifying a hook\r\n\r\nAlthough the variables that hooks values are assigned to are meaningfully named, the hooks themselves are unnamed. Because of this, DevTools has no feasible way of identifying a hook short of displaying the entire hooks tree structure. Consider the following example code:\r\n\r\n```js\r\nfunction useCustomHook(...) {\r\n  const [foo, setFoo] = useState(...);\r\n  // ...\r\n}\r\n\r\nfunction ExampleComponent(props) {\r\n  const [bar, setBar] = useState(...);\r\n  const [baz, setBaz] = useState(...);\r\n  const custom = useCustomHook(...);\r\n  // ...\r\n}\r\n```\r\n\r\nThe example above shows 4 hooks: three `useState` and one custom. Let's say that \"foo\" and \"baz\" changed in a particular render. How would DevTools identify this? It could just show \"two state hooks\" but that's not very helpful. I think the only way we could identify it would be to show the entire tree, and visually highlight which hooks in it have changed:\r\n\r\n```\r\nState\r\nState *\r\nCustomHook\r\n  State *\r\n```\r\n\r\nThis is _okay_ but it's not great unless the developer is cross-referencing the component (and probably the custom hooks definition as well). To help with this, we could also _show the values_ but now we're adding more overhead in terms of trackin and bridge traffic.\r\n\r\n## In summary\r\n\r\nClearly both of these challenges can be overcome but they are non-trivial to implement and they will certainly add more runtime overhead to the profiler. Because of this, it may be a while before we add this feature to the DevTools.\r\n\r\n---\r\nOriginally reported via https://github.com/bvaughn/react-devtools-experimental/issues/312",
        "remove_template_description": "# \"Can you show which hooks changed?\"    ...is a question I've heard a couple of times with regard to the new Profiler change-tracking feature. This request is certainly understandable, but it presents a couple of challenges:    1. Identifying which hooks values change would requires shallowly re-rendering each function component.  2. Identifying a hook in a non-ambiguous way requires displaying the full hooks tree structure, since hooks aren't named. (Alternately we could support named hooks, #16474)    Let's take each of a look at each of these below.    ## 1 - Identifying which hooks values change    One of the challenge for DevTools when it comes to hooks is identifying custom hooks. Sebastian's [proposed solution](https://github.com/bvaughn/react-devtools-experimental/blob/master/src/backend/ReactDebugHooks.js) is that DevTools temporarily overrides React's hooks dispatcher while it shallowly re-renders the component. During the re-render, each time one of the built-in hooks is used, our override implementation parses the stack to identify \"custom hooks\" (functions higher up in the callstack that begin with \"use\"). After render is completed, we reassemble this information into a tree structure which DevTools can display.    Currently we only do this  shallow render when a component is [inspected](https://github.com/bvaughn/react-devtools-experimental/blob/master/OVERVIEW.md#inspecting-an-element), but in order for us to track which hooks have changed while profiling, we would need to shallowly render _every_ component using hooks during the profiling session. Mostly likely we would have to do this during the performance sensitive \"commit\" phase since that's when DevTools is notified of an update.    I think we could do better than re-running the above hooks override for every component on every commit if we:  * Created a map of Fiber to cached hooks tree structure.  * Lazily populate the above map (by shallow re-rendering) only when a component was updated for the first time.  * Compared Fiber `memoizedState`s to identify changes on future commits and map them back to the tree structure based on their position in the list structure. <sup>1</sup>    However, even with the above optimizations this would still add significant overhead to a performance sensitive phase.    <sup>1</sup> I think this should work but might also end up being complicated to implement.    ## 2 - Identifying a hook    Although the variables that hooks values are assigned to are meaningfully named, the hooks themselves are unnamed. Because of this, DevTools has no feasible way of identifying a hook short of displaying the entire hooks tree structure. Consider the following example code:    ```js  function useCustomHook(...) {    const [foo, setFoo] = useState(...);    // ...  }    function ExampleComponent(props) {    const [bar, setBar] = useState(...);    const [baz, setBaz] = useState(...);    const custom = useCustomHook(...);    // ...  }  ```    The example above shows 4 hooks: three `useState` and one custom. Let's say that \"foo\" and \"baz\" changed in a particular render. How would DevTools identify this? It could just show \"two state hooks\" but that's not very helpful. I think the only way we could identify it would be to show the entire tree, and visually highlight which hooks in it have changed:    ```  State  State *  CustomHook    State *  ```    This is _okay_ but it's not great unless the developer is cross-referencing the component (and probably the custom hooks definition as well). To help with this, we could also _show the values_ but now we're adding more overhead in terms of trackin and bridge traffic.    ## In summary    Clearly both of these challenges can be overcome but they are non-trivial to implement and they will certainly add more runtime overhead to the profiler. Because of this, it may be a while before we add this feature to the DevTools.    ---  Originally reported via https://github.com/bvaughn/react-devtools-experimental/issues/312"
    },
    {
        "issue_id": 482547030,
        "title": "DevTools: Improve props/state value editing interface",
        "label": [
            "Type: Enhancement",
            "Component: Developer Tools"
        ],
        "date": "2019-08-19T21:55:59Z",
        "status": "closed",
        "description": "Follow up to a discussion thread on #294 and a Messenger chat with @gaearon.\r\n\r\nThe current UI for editing props/state/hooks values has a couple of shortcomings:\r\n* strings/numeric values are sometimes of an unclear type. (DevTools uses the correct `<input type>` but this is subtle. Showing e.g. quotation marks around strings could be more helpful.\r\n* `null` initial values can only become strings at the moment. (DevTools does not attempt to parse numeric or boolean values\u00a0and change the input type. If it did, we would probably also need to enable a way for you to opt back out of that input type somehow in case it was incorrect.)\r\n* fields that maybe support multiple types (e.g. string | number) are locked into a single type (whichever type they happen to be initially).\r\n\r\nAdditional quirks that might be worth ironing out:\r\n* Non-editable strings are currently wrapped in quotation marks but editable ones aren't.\r\n\r\n---\r\nOriginally reported via https://github.com/bvaughn/react-devtools-experimental/issues/321",
        "remove_template_description": "Follow up to a discussion thread on #294 and a Messenger chat with @gaearon.    The current UI for editing props/state/hooks values has a couple of shortcomings:  * strings/numeric values are sometimes of an unclear type. (DevTools uses the correct `<input type>` but this is subtle. Showing e.g. quotation marks around strings could be more helpful.  * `null` initial values can only become strings at the moment. (DevTools does not attempt to parse numeric or boolean values\u00a0and change the input type. If it did, we would probably also need to enable a way for you to opt back out of that input type somehow in case it was incorrect.)  * fields that maybe support multiple types (e.g. string | number) are locked into a single type (whichever type they happen to be initially).    Additional quirks that might be worth ironing out:  * Non-editable strings are currently wrapped in quotation marks but editable ones aren't.    ---  Originally reported via https://github.com/bvaughn/react-devtools-experimental/issues/321"
    },
    {
        "issue_id": 482545095,
        "title": "Named hooks: MVP support",
        "label": [
            "Type: Enhancement",
            "Type: Discussion",
            "Component: Developer Tools",
            "React Core Team"
        ],
        "date": "2019-08-19T21:50:31Z",
        "status": "closed",
        "description": "**Note** this issue is outdated. The current thinking is that the alternative, \"*load source code (with source maps) and parse for name*\", is probably the best course of action.\r\n\r\n---\r\n\r\n## The problem\r\n\r\nOne common piece of feedback about DevTools hooks integration is that hooks have no name and can be confusing. Consider the following example:\r\n```js\r\nfunction useSomeCustomHook() {\r\n  const [foo, setFoo] = useState(true);\r\n  const [bar, setBar] = useState(false);\r\n\r\n  // ...\r\n}\r\n\r\nfunction Example() {\r\n  const baz = useSomeCustomHook();\r\n\r\n  // ...\r\n}\r\n```\r\n\r\nCurrently in DevTools the above component would be displayed as follows:\r\n```\r\nSomeCustomHook:\r\n  State: true\r\n  State: false\r\n```\r\n\r\nThis information isn't as rich as we would prefer. \u2639\ufe0f\r\n\r\nThe next question is often: \"can you use the name of the variable the hook return value is assigned to?\" but this is tricky because DevTools doesn't actually have any way to access that variable. (Even if DevTools has a handle on the `Example` function above, how would it access the `useSomeCustomHook` function?)\r\n\r\n## The proposal\r\n\r\nThe solution to this would be some form of user-defined metadata (preferably generated by a code transform). Building on the precedent of the `useDebugValue` hook (https://github.com/facebook/react/pull/14559), we might introduce a new no-op hook e.g. `useDebugName`.\r\n\r\nThe above example could make use of this hook like so:\r\n```js\r\nfunction useSomeCustomHook() {\r\n  const [foo, setFoo] = useState(true);\r\n  useDebugName(\"foo\"); // injected by Babel transform\r\n  const [bar, setBar] = useState(false);\r\n  useDebugName(\"bar\"); // injected by Babel transform\r\n\r\n  // ...\r\n}\r\n\r\nfunction Example() {\r\n  const baz = useSomeCustomHook();\r\n\r\n  // ...\r\n}\r\n```\r\n\r\nDevTools could then display something like:\r\n```\r\nSomeCustomHook:\r\n  State (foo): true\r\n  State (bar): true\r\n```\r\n\r\n## Implementation details\r\n\r\nThe new `useDebugName` hook might be a noop hook provided by React (similar to `useDebugValue`) _or_ it could even be an export from the (soon to be released [`react-debug-hooks` package](https://github.com/facebook/react/blob/master/packages/react-debug-tools/)). The key concerns would be that:\r\n1. It has no effect (and adds no overhead) when DevTools is not present.\r\n2. Not calling it at all (or only calling it for _some_ hooks) should not break or corrupt anything.\r\n\r\nDevTools could override the no-op `useDebugName` implementation before inspecting a component and automatically associate the provided name with the most recently called native hook.\r\n\r\nFor example, the following code should only result in one named hook (the second `useState` call).\r\n```js\r\nconst [foo, setFoo] = useState(true);\r\nconst [bar, setBar] = useState(false);\r\nuseDebugName(\"bar\"); // injected by Babel transform\r\nconst [baz, setBaz] = useState(true);\r\n```\r\n\r\nBeing able to support sparse name metadata would be important for third party code (that might not be transformed to supply the metadata).\r\n\r\nA code transform would be ideal for this scenario because manual annotation would probably be cumbersome. This could also be marketed as a **DEV-only transform** so as not to bloat production bundles with display names. We might even try to detect the env and throw if it isn't DEV (like https://github.com/facebook/react/pull/15939).\r\n\r\n## Further considerations\r\n\r\n### Custom hooks?\r\n\r\nIn some cases, custom hooks might also be ambiguous. Consider the `useSubscription` hook (https://github.com/facebook/react/pull/15022):\r\n```js\r\nfunction Example() {\r\n  const foo = useSubscription(...);\r\n  const bar = useSubscription(...);\r\n\r\n  // ...\r\n}\r\n```\r\n\r\nCurrently in DevTools the above component would be displayed as follows:\r\n```\r\nSubscription: \"some value\"\r\n  State: Object\r\nSubscription: \"some other  value\"\r\n  State: Object\r\n```\r\n\r\nMaybe the value alone (provided by `useDebugValue`) could be enough to uniquely identify the hook, but I suspect in many cases it might not be sufficient. Should we then use `useDebugName` for custom hooks as well?\r\n\r\nI think it would be more fragile given the way our custom hooks detection logic is implemented. Custom hooks are not identified until after a component has finished rendering. In order for us to associate names with custom hooks, we would need to maintain a stack of names. This could lead to potential mismatches though in the event that `useDebugName` was called more (or fewer) times than there are custom hooks.\r\n\r\nFor example, consider the following code:\r\n```js\r\nfunction useSomeCustomHook() {\r\n  const [foo, setFoo] = useState(true);\r\n  useDebugName(\"foo\");\r\n  useDebugName(\"effectively ignored\");\r\n  const [bar, setBar] = useState(false);\r\n  const [baz, setBaz] = useState(false);\r\n  useDebugName(\"baz\");\r\n\r\n  // ...\r\n}\r\n````\r\n\r\nThe proposed implementation of `useDebugName` would be robust enough to handle naming \"foo\" and \"baz\" states and leaving \"bar\" as anonymous state hook. If we were maintaining a stack of names however, this discrepency would be more difficult to manage.\r\n\r\nPerhaps there is a clever solution to this problem. I would probably suggest leaving it out of the initial implementation though and only revisiting if we determine it's a necessary feature.\r\n\r\n## Alternatives considered\r\n\r\n### Pass debug name as an additional (unused) parameter\r\n\r\nAn alternative approach to calling a separate hook for naming purposes would be to pass the display name as an additional parameter to the native hook, e.g.:\r\n```js\r\nfunction useSomeCustomHook() {\r\n  const [foo, setFoo] = useState(true, \"foo\");\r\n  const [bar, setBar] = useState(false, \"bar\");\r\n\r\n  // ...\r\n}\r\n\r\nfunction Example() {\r\n  const baz = useSomeCustomHook();\r\n\r\n  // ...\r\n}\r\n```\r\n\r\n**Pros**:\r\n* Less code.\r\n* Does not introduce a new hook.\r\n\r\n**Cons**:\r\n* It requires knowledge about the arity of native hooks. Ror example `useReducer` has optional parameters that the transform (or manual code) would need to be aware of to avoid a runtime error.\r\n* It would not be possible to support naming custom hooks (if that's something we decided to do).\r\n\r\n### Load source code (with source maps) and parse for name\r\nWe could use an extension API like [`Resource.getContent`](https://developer.chrome.com/extensions/devtools_inspectedWindow#method-Resource-getContent) to load the source code (including custom hooks) and parse it determine the hook/variable names. Essentially this would work like the proposed transform above, but at runtime.\r\n\r\n**Pros**:\r\n* Does not require a Babel transform step. (\"Just works\")\r\n* Does not potentially bloat production builds (if transform is used incorrectly).\r\n\r\n**Cons**:\r\n* Adds additional async loading (complexity) to suspense cache used for hooks inspection.\r\n* May have difficulty parsing certain code patterns (e.g. Babel's destructuring transform) unless we embed a full parser.\r\n\r\n### Call `toString` on the function component and parse for name\r\nA possible 80/20 variant of the above proposal would be to simply call` toString` on the function component and parse any top-level hooks.\r\n\r\n**Pros**:\r\n* Does not require a Babel transform step. (\"Just works\")\r\n* Does not potentially bloat production builds (if transform is used incorrectly).\r\n* Does not require any additional asynchronous code.\r\n\r\n**Cons**:\r\n* Only supports top-level hooks (used directly within the function).\r\n* May have difficulty parsing certain code patterns (e.g. Babel's destructuring transform) unless we embed a fullp parser.\r\n\r\n### Use a Babel transform to leave an inline comment (and call `toString` to search for it)\r\nRather than inserting a call to a new custom hook, our code transform could just insert an inline comment with the name. We could then parse the code to find the inline comment, e.g.:\r\n```js\r\nfunction Example() {\r\n  /* hook:foo:Example.react.js:3 */\r\n  const foo = useSubscription(...);\r\n  /* hook:bar:Example.react.js:5 */\r\n  const bar = useSubscription(...);\r\n\r\n  // ...\r\n}\r\n```\r\n\r\n**Pros**:\r\n* Does not potentially bloat production builds (if transform is used incorrectly).\r\n* Potentially sidesteps difficulty of parsing certain code patterns (e.g. Babel's destructuring transform).\r\n\r\n**Cons**:\r\n* Only supports top-level hooks (used directly within the function).\r\n* Still requires an explicit transform step.\r\n\r\n---\r\nOriginally reported via https://github.com/bvaughn/react-devtools-experimental/issues/323",
        "remove_template_description": "**Note** this issue is outdated. The current thinking is that the alternative, \"*load source code (with source maps) and parse for name*\", is probably the best course of action.    ---    ## The problem    One common piece of feedback about DevTools hooks integration is that hooks have no name and can be confusing. Consider the following example:  ```js  function useSomeCustomHook() {    const [foo, setFoo] = useState(true);    const [bar, setBar] = useState(false);      // ...  }    function Example() {    const baz = useSomeCustomHook();      // ...  }  ```    Currently in DevTools the above component would be displayed as follows:  ```  SomeCustomHook:    State: true    State: false  ```    This information isn't as rich as we would prefer. \u2639\ufe0f    The next question is often: \"can you use the name of the variable the hook return value is assigned to?\" but this is tricky because DevTools doesn't actually have any way to access that variable. (Even if DevTools has a handle on the `Example` function above, how would it access the `useSomeCustomHook` function?)    ## The proposal    The solution to this would be some form of user-defined metadata (preferably generated by a code transform). Building on the precedent of the `useDebugValue` hook (https://github.com/facebook/react/pull/14559), we might introduce a new no-op hook e.g. `useDebugName`.    The above example could make use of this hook like so:  ```js  function useSomeCustomHook() {    const [foo, setFoo] = useState(true);    useDebugName(\"foo\"); // injected by Babel transform    const [bar, setBar] = useState(false);    useDebugName(\"bar\"); // injected by Babel transform      // ...  }    function Example() {    const baz = useSomeCustomHook();      // ...  }  ```    DevTools could then display something like:  ```  SomeCustomHook:    State (foo): true    State (bar): true  ```    ## Implementation details    The new `useDebugName` hook might be a noop hook provided by React (similar to `useDebugValue`) _or_ it could even be an export from the (soon to be released [`react-debug-hooks` package](https://github.com/facebook/react/blob/master/packages/react-debug-tools/)). The key concerns would be that:  1. It has no effect (and adds no overhead) when DevTools is not present.  2. Not calling it at all (or only calling it for _some_ hooks) should not break or corrupt anything.    DevTools could override the no-op `useDebugName` implementation before inspecting a component and automatically associate the provided name with the most recently called native hook.    For example, the following code should only result in one named hook (the second `useState` call).  ```js  const [foo, setFoo] = useState(true);  const [bar, setBar] = useState(false);  useDebugName(\"bar\"); // injected by Babel transform  const [baz, setBaz] = useState(true);  ```    Being able to support sparse name metadata would be important for third party code (that might not be transformed to supply the metadata).    A code transform would be ideal for this scenario because manual annotation would probably be cumbersome. This could also be marketed as a **DEV-only transform** so as not to bloat production bundles with display names. We might even try to detect the env and throw if it isn't DEV (like https://github.com/facebook/react/pull/15939).    ## Further considerations    ### Custom hooks?    In some cases, custom hooks might also be ambiguous. Consider the `useSubscription` hook (https://github.com/facebook/react/pull/15022):  ```js  function Example() {    const foo = useSubscription(...);    const bar = useSubscription(...);      // ...  }  ```    Currently in DevTools the above component would be displayed as follows:  ```  Subscription: \"some value\"    State: Object  Subscription: \"some other  value\"    State: Object  ```    Maybe the value alone (provided by `useDebugValue`) could be enough to uniquely identify the hook, but I suspect in many cases it might not be sufficient. Should we then use `useDebugName` for custom hooks as well?    I think it would be more fragile given the way our custom hooks detection logic is implemented. Custom hooks are not identified until after a component has finished rendering. In order for us to associate names with custom hooks, we would need to maintain a stack of names. This could lead to potential mismatches though in the event that `useDebugName` was called more (or fewer) times than there are custom hooks.    For example, consider the following code:  ```js  function useSomeCustomHook() {    const [foo, setFoo] = useState(true);    useDebugName(\"foo\");    useDebugName(\"effectively ignored\");    const [bar, setBar] = useState(false);    const [baz, setBaz] = useState(false);    useDebugName(\"baz\");      // ...  }  ````    The proposed implementation of `useDebugName` would be robust enough to handle naming \"foo\" and \"baz\" states and leaving \"bar\" as anonymous state hook. If we were maintaining a stack of names however, this discrepency would be more difficult to manage.    Perhaps there is a clever solution to this problem. I would probably suggest leaving it out of the initial implementation though and only revisiting if we determine it's a necessary feature.    ## Alternatives considered    ### Pass debug name as an additional (unused) parameter    An alternative approach to calling a separate hook for naming purposes would be to pass the display name as an additional parameter to the native hook, e.g.:  ```js  function useSomeCustomHook() {    const [foo, setFoo] = useState(true, \"foo\");    const [bar, setBar] = useState(false, \"bar\");      // ...  }    function Example() {    const baz = useSomeCustomHook();      // ...  }  ```    **Pros**:  * Less code.  * Does not introduce a new hook.    **Cons**:  * It requires knowledge about the arity of native hooks. Ror example `useReducer` has optional parameters that the transform (or manual code) would need to be aware of to avoid a runtime error.  * It would not be possible to support naming custom hooks (if that's something we decided to do).    ### Load source code (with source maps) and parse for name  We could use an extension API like [`Resource.getContent`](https://developer.chrome.com/extensions/devtools_inspectedWindow#method-Resource-getContent) to load the source code (including custom hooks) and parse it determine the hook/variable names. Essentially this would work like the proposed transform above, but at runtime.    **Pros**:  * Does not require a Babel transform step. (\"Just works\")  * Does not potentially bloat production builds (if transform is used incorrectly).    **Cons**:  * Adds additional async loading (complexity) to suspense cache used for hooks inspection.  * May have difficulty parsing certain code patterns (e.g. Babel's destructuring transform) unless we embed a full parser.    ### Call `toString` on the function component and parse for name  A possible 80/20 variant of the above proposal would be to simply call` toString` on the function component and parse any top-level hooks.    **Pros**:  * Does not require a Babel transform step. (\"Just works\")  * Does not potentially bloat production builds (if transform is used incorrectly).  * Does not require any additional asynchronous code.    **Cons**:  * Only supports top-level hooks (used directly within the function).  * May have difficulty parsing certain code patterns (e.g. Babel's destructuring transform) unless we embed a fullp parser.    ### Use a Babel transform to leave an inline comment (and call `toString` to search for it)  Rather than inserting a call to a new custom hook, our code transform could just insert an inline comment with the name. We could then parse the code to find the inline comment, e.g.:  ```js  function Example() {    /* hook:foo:Example.react.js:3 */    const foo = useSubscription(...);    /* hook:bar:Example.react.js:5 */    const bar = useSubscription(...);      // ...  }  ```    **Pros**:  * Does not potentially bloat production builds (if transform is used incorrectly).  * Potentially sidesteps difficulty of parsing certain code patterns (e.g. Babel's destructuring transform).    **Cons**:  * Only supports top-level hooks (used directly within the function).  * Still requires an explicit transform step.    ---  Originally reported via https://github.com/bvaughn/react-devtools-experimental/issues/323"
    },
    {
        "issue_id": 482544795,
        "title": "DevTools: Switch between \"Rendered At\" renders using keyboard arrow keys",
        "label": [
            "Type: Enhancement",
            "Type: Discussion",
            "Component: Developer Tools",
            "React Core Team"
        ],
        "date": "2019-08-19T21:49:37Z",
        "status": "closed",
        "description": "My favorite devtools feature, \"Why did this render?\", has a remaining problem: it's too hard to flip through a long list of renders in the Rendered At list to find an interesting render. I know I can use the mouse (or Tab and then Space) to move to the next render, but that's painful if there are 50+ renders to work through.\r\n\r\nSuggestion: when an item in the Rendered At list has focus, then up/down arrows should change the selected render (and scroll the pane up/down if the selected render isn't visible). \r\n\r\nThis would be helpful for accessibility too.\r\n\r\nI'll file a separate issue for keyboard support for the flamegraph view. Keyboard access to that view will be much harder to implement so it makes sense to do it separately.\r\n\r\n---\r\nOriginally reported by @justingrant via https://github.com/bvaughn/react-devtools-experimental/issues/332",
        "remove_template_description": "My favorite devtools feature, \"Why did this render?\", has a remaining problem: it's too hard to flip through a long list of renders in the Rendered At list to find an interesting render. I know I can use the mouse (or Tab and then Space) to move to the next render, but that's painful if there are 50+ renders to work through.    Suggestion: when an item in the Rendered At list has focus, then up/down arrows should change the selected render (and scroll the pane up/down if the selected render isn't visible).     This would be helpful for accessibility too.    I'll file a separate issue for keyboard support for the flamegraph view. Keyboard access to that view will be much harder to implement so it makes sense to do it separately.    ---  Originally reported by @justingrant via https://github.com/bvaughn/react-devtools-experimental/issues/332"
    },
    {
        "issue_id": 482544667,
        "title": "DevTools: Keyboard arrow-key navigation for the flamegraph view",
        "label": [
            "Type: Enhancement",
            "Component: Developer Tools",
            "React Core Team"
        ],
        "date": "2019-08-19T21:49:15Z",
        "status": "closed",
        "description": "It would be good to have keyboard navigation on the flamegraph view to make it easier and faster to scoot around to different components in the same render. \r\n\r\nGiven that flamegraph is implemented in SVG and given the complexity of navigating through an uneven grid, I suspect keyboard access is probably beyond the scope of near-future DevTools releases, but wanted to file this issue while it's top-of-mind. \r\n\r\nExpected behavior: \r\n* There should be a selected/focused UI of some sort around the active component. This could be a black or colored outline around the currently selected component, or perhaps a background pattern like diagonal hatching.  IMHO, this would be valuable even without keyboard support! \r\n* Up arrow should change selection to the parent component\r\n* Left/Right arrows should move selection to the prev/next sibling components. Should wrap when at the beginning or end of the line.\r\n* Tab should move focus to the right pane (this matches behavior of other DevTools tabs like Elements)\r\n* Shift+Tab should move focus to the rightmost control in the toolbar (currently this is the \"next commit\" button)\r\n\r\nThis is a companion issue to #332 which asks for keyboard access for the \"Rendered At\" list. Compared to this suggestion, #332 should be much easier to implement so I split them.\r\n\r\n---\r\nOriginally reported by @justingrant via https://github.com/bvaughn/react-devtools-experimental/issues/333",
        "remove_template_description": "It would be good to have keyboard navigation on the flamegraph view to make it easier and faster to scoot around to different components in the same render.     Given that flamegraph is implemented in SVG and given the complexity of navigating through an uneven grid, I suspect keyboard access is probably beyond the scope of near-future DevTools releases, but wanted to file this issue while it's top-of-mind.     Expected behavior:   * There should be a selected/focused UI of some sort around the active component. This could be a black or colored outline around the currently selected component, or perhaps a background pattern like diagonal hatching.  IMHO, this would be valuable even without keyboard support!   * Up arrow should change selection to the parent component  * Left/Right arrows should move selection to the prev/next sibling components. Should wrap when at the beginning or end of the line.  * Tab should move focus to the right pane (this matches behavior of other DevTools tabs like Elements)  * Shift+Tab should move focus to the rightmost control in the toolbar (currently this is the \"next commit\" button)    This is a companion issue to #332 which asks for keyboard access for the \"Rendered At\" list. Compared to this suggestion, #332 should be much easier to implement so I split them.    ---  Originally reported by @justingrant via https://github.com/bvaughn/react-devtools-experimental/issues/333"
    },
    {
        "issue_id": 482544193,
        "title": "DevTools: React Native: Support reload-and-profile",
        "label": [
            "Type: Enhancement",
            "Component: Developer Tools",
            "React Core Team"
        ],
        "date": "2019-08-19T21:47:53Z",
        "status": "open",
        "description": "React DevTools v4 adds a new reload and profile feature to measure perf for application \"mount\" ([although it required a bit of hacking](https://github.com/bvaughn/react-devtools-experimental/pull/35)). I don't feel knowledgeable enough about React Native to tackle it, so my current plan is to just **not** support this feature for RN.\r\n\r\nIf we did decide to support it,I think we would need to solve the following:\r\n\r\n1. A reload hook on the backend that worked for all bundle types (not just DEV).\r\n2. Some assurance that the backend will be injected/initialized _before_ the first mount/commit (or a mechanism to delay the first commit, like we do in the browser).\r\n3. Some way for third party code to request a production+profiling build ([similar to how DOM does it](https://fb.me/react-profiling)).\r\n4. A sync storage mechanism (or some other way for DevTools could leave a flag for itself so it knows to begin profiling immediately after reload+connection).\r\n\r\n---\r\nOriginally reported via https://github.com/bvaughn/react-devtools-experimental/issues/336",
        "remove_template_description": "React DevTools v4 adds a new reload and profile feature to measure perf for application \"mount\" ([although it required a bit of hacking](https://github.com/bvaughn/react-devtools-experimental/pull/35)). I don't feel knowledgeable enough about React Native to tackle it, so my current plan is to just **not** support this feature for RN.    If we did decide to support it,I think we would need to solve the following:    1. A reload hook on the backend that worked for all bundle types (not just DEV).  2. Some assurance that the backend will be injected/initialized _before_ the first mount/commit (or a mechanism to delay the first commit, like we do in the browser).  3. Some way for third party code to request a production+profiling build ([similar to how DOM does it](https://fb.me/react-profiling)).  4. A sync storage mechanism (or some other way for DevTools could leave a flag for itself so it knows to begin profiling immediately after reload+connection).    ---  Originally reported via https://github.com/bvaughn/react-devtools-experimental/issues/336"
    },
    {
        "issue_id": 482543940,
        "title": "DevTools: React Native: Remember saved component filters between reloads",
        "label": [
            "Type: Enhancement",
            "Component: Developer Tools",
            "React Core Team"
        ],
        "date": "2019-08-19T21:47:06Z",
        "status": "open",
        "description": "DevTools v4 added a pretty powerful new component filtering feature that enables devs to filter out components by type, name, or file system location. Because these filters can be a bit elaborate to create, they are saved between sessions to improve dev experience.\r\n\r\n**Unfortunately, I don't think I am going to be able to support the persistence functionality for React Native.** (In other words, filters will be forgotten each time you reload the app.)\r\n\r\nThe reason for this is a mix of timing and context. The biggest limiting factor is the lack of a synchronous storage option. React Native has a couple of faux sync storage options, but they just in-memory wrappers around an async storage layer and they require async initialization. That _could_ work if the React Native backend waited to initialize DevTools until it also initialized the async storage layer, _but_ this has implications on reload-and-profile support (#336).\r\n\r\n---\r\nOriginally reported via https://github.com/bvaughn/react-devtools-experimental/issues/337",
        "remove_template_description": "DevTools v4 added a pretty powerful new component filtering feature that enables devs to filter out components by type, name, or file system location. Because these filters can be a bit elaborate to create, they are saved between sessions to improve dev experience.    **Unfortunately, I don't think I am going to be able to support the persistence functionality for React Native.** (In other words, filters will be forgotten each time you reload the app.)    The reason for this is a mix of timing and context. The biggest limiting factor is the lack of a synchronous storage option. React Native has a couple of faux sync storage options, but they just in-memory wrappers around an async storage layer and they require async initialization. That _could_ work if the React Native backend waited to initialize DevTools until it also initialized the async storage layer, _but_ this has implications on reload-and-profile support (#336).    ---  Originally reported via https://github.com/bvaughn/react-devtools-experimental/issues/337"
    },
    {
        "issue_id": 482543159,
        "title": "DevTools: Triggering Error Boundaries from DevTools",
        "label": [
            "Type: Enhancement",
            "Component: Developer Tools",
            "good first issue (taken)",
            "React Core Team"
        ],
        "date": "2019-08-19T21:44:50Z",
        "status": "closed",
        "description": "It would be useful to force components into an error state, in order to test error boundaries (similar to how the suspense toggle works).\r\n\r\n---\r\nOriginally reported via https://github.com/bvaughn/react-devtools-experimental/issues/340",
        "remove_template_description": "It would be useful to force components into an error state, in order to test error boundaries (similar to how the suspense toggle works).    ---  Originally reported via https://github.com/bvaughn/react-devtools-experimental/issues/340"
    },
    {
        "issue_id": 482541565,
        "title": "DevTools: Improve HOC search UX",
        "label": [
            "Type: Enhancement",
            "Component: Developer Tools",
            "React Core Team"
        ],
        "date": "2019-08-19T21:40:16Z",
        "status": "closed",
        "description": "Building on top of #360\r\n\r\nWe could probably improve the search UX in a couple of ways:\r\n\r\n* Visually indicate when the \"match\" is because of a HOC name, e.g.\r\n<img width=\"161\" alt=\"Screen Shot 2019-08-03 at 1 54 21 PM\" src=\"https://user-images.githubusercontent.com/29597/62416804-36f32f00-b5f6-11e9-9150-e32f652c7f98.png\">\r\n\r\n* Match built-in HOC types (e.g. searching \"me\" should match `React.memo` HOCs, searching \"f\" should match `React.forwardRef`, etc.)\r\n\r\n---\r\nOriginally reported via https://github.com/bvaughn/react-devtools-experimental/issues/365",
        "remove_template_description": "Building on top of #360    We could probably improve the search UX in a couple of ways:    * Visually indicate when the \"match\" is because of a HOC name, e.g.  <img width=\"161\" alt=\"Screen Shot 2019-08-03 at 1 54 21 PM\" src=\"https://user-images.githubusercontent.com/29597/62416804-36f32f00-b5f6-11e9-9150-e32f652c7f98.png\">    * Match built-in HOC types (e.g. searching \"me\" should match `React.memo` HOCs, searching \"f\" should match `React.forwardRef`, etc.)    ---  Originally reported via https://github.com/bvaughn/react-devtools-experimental/issues/365"
    },
    {
        "issue_id": 482541147,
        "title": "DevTools: Don't show \"context\" for classes without either contextType or contextTypes",
        "label": [
            "Type: Enhancement",
            "Component: Developer Tools",
            "good first issue (taken)"
        ],
        "date": "2019-08-19T21:39:10Z",
        "status": "closed",
        "description": "* Don't show \"context\" for classes without either contextType or contextTypes\r\n* For classes with contextTypes, change the label to \"legacy context\" instead\r\n\r\n---\r\nOriginally reported by @gaearon via https://github.com/bvaughn/react-devtools-experimental/issues/368",
        "remove_template_description": "* Don't show \"context\" for classes without either contextType or contextTypes  * For classes with contextTypes, change the label to \"legacy context\" instead    ---  Originally reported by @gaearon via https://github.com/bvaughn/react-devtools-experimental/issues/368"
    },
    {
        "issue_id": 482539346,
        "title": "DevTools: An easier way to see all siblings",
        "label": [
            "Type: Enhancement",
            "Component: Developer Tools",
            "React Core Team"
        ],
        "date": "2019-08-19T21:34:16Z",
        "status": "open",
        "description": "I have a particular pattern that I struggle with when navigating deep trees in devtools: I want to see all siblings of a node together.\r\n\r\nSay I'm in the middle of something and I wonder what are all nodes on the same level. It's super hard to actually get to that state. I wonder if we could tweak \"left\" button to do that as an intermediate state.\r\n\r\n* first press: collapse the current node\r\n* second press: collapse all siblings (new)\r\n* third press: move to the parent\r\n\r\nMaybe this is too crazy :-) Or maybe there's another mechanic that can achieve the same effect. The goal here is to be able to make sense of the tree structure by going _upwards_. Currently implementation details of children prevent me from seeing it. (At least, with the \"expand\" mode on \u2014 which is now on by default.)\r\n\r\n---\r\nOriginally reported by @gaearon via https://github.com/bvaughn/react-devtools-experimental/issues/384",
        "remove_template_description": "I have a particular pattern that I struggle with when navigating deep trees in devtools: I want to see all siblings of a node together.    Say I'm in the middle of something and I wonder what are all nodes on the same level. It's super hard to actually get to that state. I wonder if we could tweak \"left\" button to do that as an intermediate state.    * first press: collapse the current node  * second press: collapse all siblings (new)  * third press: move to the parent    Maybe this is too crazy :-) Or maybe there's another mechanic that can achieve the same effect. The goal here is to be able to make sense of the tree structure by going _upwards_. Currently implementation details of children prevent me from seeing it. (At least, with the \"expand\" mode on \u2014 which is now on by default.)    ---  Originally reported by @gaearon via https://github.com/bvaughn/react-devtools-experimental/issues/384"
    },
    {
        "issue_id": 482539067,
        "title": "DevTools: Fully disable 0.14 support",
        "label": [
            "Type: Enhancement",
            "Component: Developer Tools"
        ],
        "date": "2019-08-19T21:33:32Z",
        "status": "closed",
        "description": "It\u2019s confusing that 0.14 or earlier is in half-working state where it displays a tree (but incorrectly). We should detect it and fully disable if it doesn\u2019t work. Or fix it.\r\n\r\nIf we go the route of disabling support:\r\n1. DevTools should show a warning message that clearly indicates the version of React isn't supported. (This is probably a good idea for v13 and older anyway.)\r\n2. DevTools should not throw any errors.\r\n\r\n---\r\nOriginally reported by @gaearon via https://github.com/bvaughn/react-devtools-experimental/issues/384",
        "remove_template_description": "It\u2019s confusing that 0.14 or earlier is in half-working state where it displays a tree (but incorrectly). We should detect it and fully disable if it doesn\u2019t work. Or fix it.    If we go the route of disabling support:  1. DevTools should show a warning message that clearly indicates the version of React isn't supported. (This is probably a good idea for v13 and older anyway.)  2. DevTools should not throw any errors.    ---  Originally reported by @gaearon via https://github.com/bvaughn/react-devtools-experimental/issues/384"
    },
    {
        "issue_id": 482007607,
        "title": "Refactor ProfilerContext to use reducer instead of multi-state",
        "label": [
            "Type: Enhancement",
            "Component: Developer Tools",
            "React Core Team"
        ],
        "date": "2019-08-18T15:40:40Z",
        "status": "open",
        "description": "The `ProfilerContext` is currently comprised of several pieces of related state, each managed with `useState`. This necessitates awkward checks like [this](https://github.com/bvaughn/react-devtools-experimental/blob/4697f5b37967b85b2c844044aeebb5b1a740875d/src/devtools/views/Profiler/ProfilerContext.js#L126-L131) or even worse like [this](https://github.com/bvaughn/react-devtools-experimental/blob/4697f5b37967b85b2c844044aeebb5b1a740875d/src/devtools/views/Profiler/SnapshotSelector.js#L62-L73) or [this](https://github.com/bvaughn/react-devtools-experimental/blob/source/src/devtools/views/Profiler/Profiler.js#L71-L83).\r\n\r\nThis context should be refactored to use a single reducer (`useReducer`) like `TreeContext`. This is a bit more involved at the moment because of suspense and the `ProfilerContext` being higher level than the suspense cache. Although maybe we could work around this by using some sort of [subscription](https://github.com/bvaughn/react-devtools-experimental/blob/4697f5b37967b85b2c844044aeebb5b1a740875d/src/devtools/views/Profiler/ProfilerContext.js#L118-L124)?\r\n\r\nSee related issues like #16441 and commit [4697f5b](https://github.com/bvaughn/react-devtools-experimental/commit/4697f5b37967b85b2c844044aeebb5b1a740875d).",
        "remove_template_description": "The `ProfilerContext` is currently comprised of several pieces of related state, each managed with `useState`. This necessitates awkward checks like [this](https://github.com/bvaughn/react-devtools-experimental/blob/4697f5b37967b85b2c844044aeebb5b1a740875d/src/devtools/views/Profiler/ProfilerContext.js#L126-L131) or even worse like [this](https://github.com/bvaughn/react-devtools-experimental/blob/4697f5b37967b85b2c844044aeebb5b1a740875d/src/devtools/views/Profiler/SnapshotSelector.js#L62-L73) or [this](https://github.com/bvaughn/react-devtools-experimental/blob/source/src/devtools/views/Profiler/Profiler.js#L71-L83).    This context should be refactored to use a single reducer (`useReducer`) like `TreeContext`. This is a bit more involved at the moment because of suspense and the `ProfilerContext` being higher level than the suspense cache. Although maybe we could work around this by using some sort of [subscription](https://github.com/bvaughn/react-devtools-experimental/blob/4697f5b37967b85b2c844044aeebb5b1a740875d/src/devtools/views/Profiler/ProfilerContext.js#L118-L124)?    See related issues like #16441 and commit [4697f5b](https://github.com/bvaughn/react-devtools-experimental/commit/4697f5b37967b85b2c844044aeebb5b1a740875d)."
    },
    {
        "issue_id": 437649002,
        "title": "[ESLint] Assignment like foo.bar.baz = X should warn about foo.bar instead",
        "label": [
            "Type: Enhancement",
            "Component: ESLint Rules",
            "React Core Team"
        ],
        "date": "2019-04-26T12:27:09Z",
        "status": "closed",
        "description": "```js\r\n  let foo = {}\r\n  useEffect(() => {\r\n    foo.bar.baz = 43;\r\n  }, []);\r\n```\r\n\r\nThis asks you to include `foo.bar.baz` into deps. But this doesn't make sense, as you write to it. Instead it should ask to include `foo.bar` into array.\r\n\r\nIf `foo` is a newly created object in render scope then we might additionally nudge you to `useRef` for it instead. Because otherwise it won't be shared between renders.",
        "remove_template_description": "```js    let foo = {}    useEffect(() => {      foo.bar.baz = 43;    }, []);  ```    This asks you to include `foo.bar.baz` into deps. But this doesn't make sense, as you write to it. Instead it should ask to include `foo.bar` into array.    If `foo` is a newly created object in render scope then we might additionally nudge you to `useRef` for it instead. Because otherwise it won't be shared between renders."
    },
    {
        "issue_id": 436828895,
        "title": "eslint-plugin-react-hooks suggests adding a dependency on a function that always changes",
        "label": [
            "Type: Enhancement",
            "Component: ESLint Rules",
            "Partner"
        ],
        "date": "2019-04-24T17:50:17Z",
        "status": "open",
        "description": "If you write:\r\n\r\n```js\r\nimport React, {useEffect} from 'react';\r\nconst Foo = ({ orgId }) => {\r\n  const fetchOrg = () => {\r\n    alert(orgId);\r\n  };\r\n  useEffect(() => {\r\n    fetchOrg();\r\n  }, [orgId]);\r\n  return <div />;\r\n};\r\n```\r\n\r\nthen you get the error:\r\n\r\n> React Hook useEffect has a missing dependency: 'fetchOrg'. Either include it or remove the dependency array\r\n\r\nBut if you follow that advice and add `fetchOrg` to the dep array, you get:\r\n\r\n> The 'fetchOrg' function makes the dependencies of useEffect Hook (at line 6) change on every render. Move it inside the useEffect callback. Alternatively, wrap the 'fetchOrg' definition into its own useCallback() Hook\r\n\r\nIdeally it could suggest the second solution immediately, instead of suggesting a remediation that it will immediately warn about.",
        "remove_template_description": "If you write:    ```js  import React, {useEffect} from 'react';  const Foo = ({ orgId }) => {    const fetchOrg = () => {      alert(orgId);    };    useEffect(() => {      fetchOrg();    }, [orgId]);    return <div />;  };  ```    then you get the error:    > React Hook useEffect has a missing dependency: 'fetchOrg'. Either include it or remove the dependency array    But if you follow that advice and add `fetchOrg` to the dep array, you get:    > The 'fetchOrg' function makes the dependencies of useEffect Hook (at line 6) change on every render. Move it inside the useEffect callback. Alternatively, wrap the 'fetchOrg' definition into its own useCallback() Hook    Ideally it could suggest the second solution immediately, instead of suggesting a remediation that it will immediately warn about."
    },
    {
        "issue_id": 433041172,
        "title": "useMemo in StrictMode",
        "label": [
            "Type: Enhancement",
            "Component: Hooks"
        ],
        "date": "2019-04-14T22:27:51Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\n*feature*\r\n\r\n**What is the current behavior?**\r\n> Write your code so that it still works without useMemo\r\n\r\n-- https://reactjs.org/docs/hooks-reference.html#usememo\r\n\r\nI can try writing my code with this in mind but it would be very helpful if React could try to help spot issues.\r\n\r\n**What is the expected behavior?**\r\n\r\nStrictMode can already help us detect side-effects in render by calling it twice. It also helps detecting side-effects in `useMemo` by calling it twice if the dependencies change. However, there's no way to simulate a purge of the cache.\r\n\r\nIt might help calling the factory in StrictMode regardless of the dependencies (or only on the second render). Other approaches like `<StrictMode areMemoDependenciesEqual={...} />` would give more control to the user.\r\n\r\nThere's already a working solution by using some feature flag at build time e.g. `React.useMemo(factory, __STRICT__ ? undefined : [dependency])` but the linter can't work with that. Using `React.useMemo(factory, [dependency, PURGE_MEMO_CACHE.current])` would make it more controllable if we write e.g. test instructions but the linter complains about those too. I don't think we have a way to detect if React is between two render calls so that we can purge the cache by flipping `PURGE_MEMO_CACHE.current`\r\n\r\nThis is also somewhat opposite to #15278 because we want an API to opt-in to cache purging.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nFuture versions of React that might forget the dependencies.\r\n",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**  *feature*    **What is the current behavior?**  > Write your code so that it still works without useMemo    -- https://reactjs.org/docs/hooks-reference.html#usememo    I can try writing my code with this in mind but it would be very helpful if React could try to help spot issues.    **What is the expected behavior?**    StrictMode can already help us detect side-effects in render by calling it twice. It also helps detecting side-effects in `useMemo` by calling it twice if the dependencies change. However, there's no way to simulate a purge of the cache.    It might help calling the factory in StrictMode regardless of the dependencies (or only on the second render). Other approaches like `<StrictMode areMemoDependenciesEqual={...} />` would give more control to the user.    There's already a working solution by using some feature flag at build time e.g. `React.useMemo(factory, __STRICT__ ? undefined : [dependency])` but the linter can't work with that. Using `React.useMemo(factory, [dependency, PURGE_MEMO_CACHE.current])` would make it more controllable if we write e.g. test instructions but the linter complains about those too. I don't think we have a way to detect if React is between two render calls so that we can purge the cache by flipping `PURGE_MEMO_CACHE.current`    This is also somewhat opposite to #15278 because we want an API to opt-in to cache purging.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    Future versions of React that might forget the dependencies."
    },
    {
        "issue_id": 429282207,
        "title": "Using TestRenderer.act() should not silence the ReactDOM warning",
        "label": [
            "Type: Enhancement",
            "Component: Test Utils",
            "Component: Test Renderer"
        ],
        "date": "2019-04-04T13:33:32Z",
        "status": "closed",
        "description": "`ReactTestRenderer.act()` only works for `react-test-renderer`.\r\n`ReactTestUtils.act()` only works for `react-dom`.\r\n\r\nUnfortunately due to poor naming, people confuse those two things.\r\n\r\nWe need to:\r\n\r\n* Make sure `ReactTestRenderer.act()` around `react-dom` updates doesn't silence the warning, and vice versa. (Currently, it does \u2014 but you can fix it by using an empty object that's unique per renderer instead of a `true` value.)\r\n\r\n* Add a special warning message when a different renderer is \"acting\" updates. That warning message should suggest that you're supposed to use `act()` corresponding to the renderer you're using, e.g. `react-dom/test-utils` for `react-dom`.\r\n\r\nThis should fix most cases where people wrap updates in the wrong `act`.",
        "remove_template_description": "`ReactTestRenderer.act()` only works for `react-test-renderer`.  `ReactTestUtils.act()` only works for `react-dom`.    Unfortunately due to poor naming, people confuse those two things.    We need to:    * Make sure `ReactTestRenderer.act()` around `react-dom` updates doesn't silence the warning, and vice versa. (Currently, it does \u2014 but you can fix it by using an empty object that's unique per renderer instead of a `true` value.)    * Add a special warning message when a different renderer is \"acting\" updates. That warning message should suggest that you're supposed to use `act()` corresponding to the renderer you're using, e.g. `react-dom/test-utils` for `react-dom`.    This should fix most cases where people wrap updates in the wrong `act`."
    },
    {
        "issue_id": 427156570,
        "title": "Customize display name of custom hooks",
        "label": [
            "Type: Enhancement",
            "Resolution: Stale"
        ],
        "date": "2019-03-29T20:01:53Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\n- *Feature*\r\n\r\n**What is the current behavior?**\r\n\r\nFor toolchains/languages that munge the names of functions, the display of custom hooks in React DevTools is unreadable.\r\n\r\nFor instance, in ClojureScript we might have a custom hook named `<-window` that would be compiled into the name `my_app$hooks$_LT__window`.\r\n\r\n**What is the ~expected~ desired behavior?**\r\n\r\nTo have the ability to set a `displayName`-like value on a custom hook to customize it's name in React DevTools.\r\n\r\nA potential solution:\r\n\r\n```javascript\r\nfunction useSomeReallyLongNameThatIDontWantToShow() {\r\n  // Implement my custom hook\r\n}\r\n\r\nuseSomeReallyLongNameThatIDontWantToShow.debugName = \"useShortName\";\r\n```\r\n\r\n`useShortName` would show up in React DevTools instead of `useSomeReallyLongNameThatIDontWantToShow`.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.8 / Chrome / macOS 10.13.6",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**    - *Feature*    **What is the current behavior?**    For toolchains/languages that munge the names of functions, the display of custom hooks in React DevTools is unreadable.    For instance, in ClojureScript we might have a custom hook named `<-window` that would be compiled into the name `my_app$hooks$_LT__window`.    **What is the ~expected~ desired behavior?**    To have the ability to set a `displayName`-like value on a custom hook to customize it's name in React DevTools.    A potential solution:    ```javascript  function useSomeReallyLongNameThatIDontWantToShow() {    // Implement my custom hook  }    useSomeReallyLongNameThatIDontWantToShow.debugName = \"useShortName\";  ```    `useShortName` would show up in React DevTools instead of `useSomeReallyLongNameThatIDontWantToShow`.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    React 16.8 / Chrome / macOS 10.13.6"
    },
    {
        "issue_id": 427099499,
        "title": "Profiler marks",
        "label": [
            "Type: Enhancement",
            "Component: Developer Tools",
            "React Core Team"
        ],
        "date": "2019-03-29T17:33:27Z",
        "status": "open",
        "description": "Can we expose a lighter weight set of Performance \"marks\" for people consuming browser Performance tracing? e.g. when a particular `Profiler` commits. This should be a lot less heavyweight than the full mark-and-measure stuff.",
        "remove_template_description": "Can we expose a lighter weight set of Performance \"marks\" for people consuming browser Performance tracing? e.g. when a particular `Profiler` commits. This should be a lot less heavyweight than the full mark-and-measure stuff."
    },
    {
        "issue_id": 424982212,
        "title": "Memoized components should forward displayName",
        "label": [
            "Type: Enhancement",
            "Component: Shallow Renderer"
        ],
        "date": "2019-03-25T15:57:20Z",
        "status": "open",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nI'd like to report a bug.\r\n\r\n**What is the current behavior?**\r\n\r\nFirst of all, thanks for the great work on fixing https://github.com/facebook/react/issues/14807. However there is still an issue with the current implementation.\r\n\r\n`React.memo` does not forward displayName for tests. In snapshots, components display as `<Component />` and string assertions such as `.find('MyMemoizedComponent')` won't work.\r\n\r\n**What is the expected behavior?**\r\n\r\n`React.memo` should forward displayName for the test renderer.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n* React 16.8.5\r\n* Jest 24.5.0\r\n* enzyme 3.9.0\r\n* enzyme-adapter-react-16 1.11.2\r\n\r\n---\r\n\r\nN.B. - Potentially related to https://github.com/facebook/react/issues/14319, but this is related to the more recent changes to support `memo` in the test renderer. Please close if needed, I'm quite new here!\r\n\r\nI'd be happy to submit a PR if the issue is not too complex to look into :smile: ",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**    I'd like to report a bug.    **What is the current behavior?**    First of all, thanks for the great work on fixing https://github.com/facebook/react/issues/14807. However there is still an issue with the current implementation.    `React.memo` does not forward displayName for tests. In snapshots, components display as `<Component />` and string assertions such as `.find('MyMemoizedComponent')` won't work.    **What is the expected behavior?**    `React.memo` should forward displayName for the test renderer.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    * React 16.8.5  * Jest 24.5.0  * enzyme 3.9.0  * enzyme-adapter-react-16 1.11.2    ---    N.B. - Potentially related to https://github.com/facebook/react/issues/14319, but this is related to the more recent changes to support `memo` in the test renderer. Please close if needed, I'm quite new here!    I'd be happy to submit a PR if the issue is not too complex to look into :smile:"
    },
    {
        "issue_id": 424262965,
        "title": "Better error message when useEffect is called with no parameters",
        "label": [
            "Type: Enhancement",
            "Resolution: Stale"
        ],
        "date": "2019-03-22T15:21:19Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature\r\n\r\n**What is the current behavior?**\r\n\r\nSuppose you give an `undefined` object or forget to provide parameters to `useEffect`:\r\n\r\n```js\r\nconst App = () => {\r\n    React.useEffect();\r\n    return \"\";\r\n};\r\n\r\nReactDOM.render(<App />, document.getElementById('container'));\r\n```\r\n\r\nOn JSFiddle (https://jsfiddle.net/g39javzq), this error stack is logged:\r\n\r\n```\r\nUncaught TypeError: create is not a function\r\n    at commitHookEffectList (react-dom.development.js:17372)\r\n    at commitPassiveHookEffects (react-dom.development.js:17396)\r\n    at HTMLUnknownElement.callCallback (react-dom.development.js:143)\r\n    at Object.invokeGuardedCallbackDev (react-dom.development.js:193)\r\n    at invokeGuardedCallback (react-dom.development.js:250)\r\n    at commitPassiveEffects (react-dom.development.js:18863)\r\n    at wrapped (react.development.js:1353)\r\n    at flushFirstCallback (react.development.js:587)\r\n    at flushWork (react.development.js:699)\r\n    at MessagePort.channel.port1.onmessage (react.development.js:1093)\r\n```\r\n\r\n...though on a local project in React 16.8.4, this stack is logged:\r\n\r\n```\r\nUncaught TypeError: undefined is not iterable (cannot read property Symbol(Symbol.iterator))\r\n    at _iterableToArrayLimit (my-project.chunk.js:123)\r\n    at _slicedToArray (my-project.chunk.js:456)\r\n    at MyComponent (myFile.js:7)\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nNeither of these were useful during the 5 minutes it took to find the culprit `useEffect` that should have been a `useState`.\r\n\r\nIn development, we check for an `undefined` `deps` argument in `useEffect` and give a better warning?\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.8.4, Chrome on Mac.\r\n",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**    Feature    **What is the current behavior?**    Suppose you give an `undefined` object or forget to provide parameters to `useEffect`:    ```js  const App = () => {      React.useEffect();      return \"\";  };    ReactDOM.render(<App />, document.getElementById('container'));  ```    On JSFiddle (https://jsfiddle.net/g39javzq), this error stack is logged:    ```  Uncaught TypeError: create is not a function      at commitHookEffectList (react-dom.development.js:17372)      at commitPassiveHookEffects (react-dom.development.js:17396)      at HTMLUnknownElement.callCallback (react-dom.development.js:143)      at Object.invokeGuardedCallbackDev (react-dom.development.js:193)      at invokeGuardedCallback (react-dom.development.js:250)      at commitPassiveEffects (react-dom.development.js:18863)      at wrapped (react.development.js:1353)      at flushFirstCallback (react.development.js:587)      at flushWork (react.development.js:699)      at MessagePort.channel.port1.onmessage (react.development.js:1093)  ```    ...though on a local project in React 16.8.4, this stack is logged:    ```  Uncaught TypeError: undefined is not iterable (cannot read property Symbol(Symbol.iterator))      at _iterableToArrayLimit (my-project.chunk.js:123)      at _slicedToArray (my-project.chunk.js:456)      at MyComponent (myFile.js:7)  ```    **What is the expected behavior?**    Neither of these were useful during the 5 minutes it took to find the culprit `useEffect` that should have been a `useState`.    In development, we check for an `undefined` `deps` argument in `useEffect` and give a better warning?    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    React 16.8.4, Chrome on Mac."
    },
    {
        "issue_id": 413643718,
        "title": "Warnings when assigning to ref in render phase?",
        "label": [
            "Type: Enhancement",
            "Resolution: Stale"
        ],
        "date": "2019-02-23T02:17:44Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature\r\n\r\n**What is the current behavior?**\r\n\r\nThere are no warnings when assigning to `ref.current` in render phase.\r\n\r\n**What is the expected behavior?**\r\n\r\nGiven that this mostly works now, but may cause issues on release of concurrent mode, it would be helpful to have a warning when assigning to a prop outside of `useEffect()`.\r\n\r\nE.g. I recently wrote this code, which works fine at the moment, and didn't realize the possible issue until @gaearon pointed out the missing `useEffect()`:\r\n\r\n```js\r\nexport function useDidChange(value) {\r\n  let ref = useRef()\r\n  let didChange = ref.current !== value\r\n  ref.current = value\r\n  return didChange\r\n}\r\n```\r\n\r\nIf a warning is not possible due to the lazy initialization pattern, perhaps an eslint rule may be a solution?\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nAll versions",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**    Feature    **What is the current behavior?**    There are no warnings when assigning to `ref.current` in render phase.    **What is the expected behavior?**    Given that this mostly works now, but may cause issues on release of concurrent mode, it would be helpful to have a warning when assigning to a prop outside of `useEffect()`.    E.g. I recently wrote this code, which works fine at the moment, and didn't realize the possible issue until @gaearon pointed out the missing `useEffect()`:    ```js  export function useDidChange(value) {    let ref = useRef()    let didChange = ref.current !== value    ref.current = value    return didChange  }  ```    If a warning is not possible due to the lazy initialization pattern, perhaps an eslint rule may be a solution?    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    All versions"
    },
    {
        "issue_id": 400758551,
        "title": "useImperativeHandle should warn when second arg isn't a function",
        "label": [
            "Type: Enhancement",
            "Difficulty: starter",
            "good first issue (taken)"
        ],
        "date": "2019-01-18T14:56:20Z",
        "status": "closed",
        "description": "I've noticed a strange bug with the react redux `forwardRef` opt-in.\r\nIf i use it with a connected class component, everything is ok:\r\n```javascript\r\nconst MyComponent = class Test extends React.Component {\r\n  foo = () => console.log(\"Print foo from Test component\");\r\n  render() {\r\n    return null;\r\n  }\r\n};\r\n\r\nconst ConnectedComponent = connect(\r\n  null,\r\n  null,\r\n  null,\r\n  { forwardRef: true }\r\n)(MyComponent);\r\n\r\nconst store = createStore(() => {});\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <ConnectedComponent\r\n        ref={ref => {\r\n          if (ref) ref.foo();\r\n        }}\r\n      />\r\n    </Provider>\r\n  );\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\n```\r\nIf i use it with a connected functional component that use `forwardRef` with `useImperativeHandle`, i obtain a strange error: `create is not a function` in `commitHookEffectList` `react-dom` method.\r\n\r\n```javascript\r\nconst MyComponent = React.forwardRef((props, ref) => {\r\n  useImperativeHandle(ref, {\r\n    foo: () => console.log(\"Print foo from Test component\")\r\n  });\r\n\r\n  return null;\r\n});\r\n\r\nconst ConnectedComponent = connect(\r\n  null,\r\n  null,\r\n  null,\r\n  { forwardRef: true }\r\n)(MyComponent);\r\n\r\nconst store = createStore(() => {});\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <ConnectedComponent\r\n        ref={ref => {\r\n          if (ref) ref.foo();\r\n        }}\r\n      />\r\n    </Provider>\r\n  );\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\n```\r\n\r\nI create a codepen to reproduce the issue: https://codesandbox.io/s/r7rpml460o\r\n\r\nPS: Sorry for the cors error, but i don't find the way to add `react@next`as cdn",
        "remove_template_description": "I've noticed a strange bug with the react redux `forwardRef` opt-in.  If i use it with a connected class component, everything is ok:  ```javascript  const MyComponent = class Test extends React.Component {    foo = () => console.log(\"Print foo from Test component\");    render() {      return null;    }  };    const ConnectedComponent = connect(    null,    null,    null,    { forwardRef: true }  )(MyComponent);    const store = createStore(() => {});    function App() {    return (      <Provider store={store}>        <ConnectedComponent          ref={ref => {            if (ref) ref.foo();          }}        />      </Provider>    );  }    const rootElement = document.getElementById(\"root\");  ReactDOM.render(<App />, rootElement);  ```  If i use it with a connected functional component that use `forwardRef` with `useImperativeHandle`, i obtain a strange error: `create is not a function` in `commitHookEffectList` `react-dom` method.    ```javascript  const MyComponent = React.forwardRef((props, ref) => {    useImperativeHandle(ref, {      foo: () => console.log(\"Print foo from Test component\")    });      return null;  });    const ConnectedComponent = connect(    null,    null,    null,    { forwardRef: true }  )(MyComponent);    const store = createStore(() => {});    function App() {    return (      <Provider store={store}>        <ConnectedComponent          ref={ref => {            if (ref) ref.foo();          }}        />      </Provider>    );  }    const rootElement = document.getElementById(\"root\");  ReactDOM.render(<App />, rootElement);  ```    I create a codepen to reproduce the issue: https://codesandbox.io/s/r7rpml460o    PS: Sorry for the cors error, but i don't find the way to add `react@next`as cdn"
    },
    {
        "issue_id": 377127825,
        "title": "eslint-plugin-react-hooks does not work with wrapped components",
        "label": [
            "Type: Enhancement",
            "Resolution: Stale"
        ],
        "date": "2018-11-04T07:11:11Z",
        "status": "closed",
        "description": "``` js\r\nexport const Counter = () => {\r\n    let count, setCount;\r\n    if (0 === 1) {\r\n        [count, setCount] = useState(0);\r\n    }\r\n    return count;\r\n};\r\nconst wrapper = Component => Component;\r\nexport const WrappedCounter = wrapper(() => {\r\n    let count, setCount;\r\n    if (0 === 1) {\r\n        [count, setCount] = useState(0);\r\n    }\r\n    return count;\r\n});\r\n```\r\nLinter shows an error in the first component, but ignore the second one.",
        "remove_template_description": "``` js  export const Counter = () => {      let count, setCount;      if (0 === 1) {          [count, setCount] = useState(0);      }      return count;  };  const wrapper = Component => Component;  export const WrappedCounter = wrapper(() => {      let count, setCount;      if (0 === 1) {          [count, setCount] = useState(0);      }      return count;  });  ```  Linter shows an error in the first component, but ignore the second one."
    },
    {
        "issue_id": 375879383,
        "title": "Display a warning if Component is called without props",
        "label": [
            "Type: Enhancement"
        ],
        "date": "2018-10-31T09:51:27Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nThis is a feature (enhancement).\r\n\r\n**What is the current behavior?**\r\n\r\n`props` parameter isn't validated in `Component` and `PureComponent`. Omitted `props` is a common mistake that results in undefined `this.props` in constructor. This may result in a problem:\r\n\r\n```js\r\nclass MyComponent extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = { a: 1, b: this.props.b }; // cannot read b property of undefined\r\n  }\r\n}\r\n```\r\n\r\nA problem may be harder to determine if previously working code stops working when refactored:\r\n\r\n```js\r\nclass MyComponent extends Component {\r\n  constructor() {\r\n    super(); // no error\r\n  }\r\n\r\n  componentWillMount() {\r\n    // rewriting this to constructor code will result in situation above\r\n    this.setState({ a: 1, b: this.props.b });\r\n  }\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\n`Component` and `PureComponent` validate `props` parameter to be an object, or `arguments > 0` at least and display a warning in development mode in case `props` isn't passed from child constructor.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.7.0-alpha.0",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**    This is a feature (enhancement).    **What is the current behavior?**    `props` parameter isn't validated in `Component` and `PureComponent`. Omitted `props` is a common mistake that results in undefined `this.props` in constructor. This may result in a problem:    ```js  class MyComponent extends Component {    constructor() {      super();      this.state = { a: 1, b: this.props.b }; // cannot read b property of undefined    }  }  ```    A problem may be harder to determine if previously working code stops working when refactored:    ```js  class MyComponent extends Component {    constructor() {      super(); // no error    }      componentWillMount() {      // rewriting this to constructor code will result in situation above      this.setState({ a: 1, b: this.props.b });    }  }  ```    **What is the expected behavior?**    `Component` and `PureComponent` validate `props` parameter to be an object, or `arguments > 0` at least and display a warning in development mode in case `props` isn't passed from child constructor.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    React 16.7.0-alpha.0"
    },
    {
        "issue_id": 375731590,
        "title": "Improve message \"dispatcher.useState is not a function\" when mixing react@next with react-dom@16.5.2",
        "label": [
            "Type: Enhancement",
            "Resolution: Stale"
        ],
        "date": "2018-10-30T23:08:04Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nReport a bug\r\n\r\n**What is the current behavior?**\r\nGetting `TypeError: dispatcher.useState is not a function` when trying to call `useState`; this is happening in a create-react-app, as well as in the CodeSandbox example below.\r\n\r\n**Example:**\r\nhttps://codesandbox.io/s/7kp55lwwpj\r\n\r\n**What is the expected behavior?**\r\n`useState` hook function should execute without error as defined in the [API documentation](https://reactjs.org/docs/hooks-reference.html#usestate)\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n**React**: v16.7.0-alpha.0\r\n**React-DOM**: 16.5.2 (CSB), 16.7.0-alpha.0 (local)\r\n**React-Scripts**: 2.0.3 (CSB), 2.1.0 (local)\r\n",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**  Report a bug    **What is the current behavior?**  Getting `TypeError: dispatcher.useState is not a function` when trying to call `useState`; this is happening in a create-react-app, as well as in the CodeSandbox example below.    **Example:**  https://codesandbox.io/s/7kp55lwwpj    **What is the expected behavior?**  `useState` hook function should execute without error as defined in the [API documentation](https://reactjs.org/docs/hooks-reference.html#usestate)    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    **React**: v16.7.0-alpha.0  **React-DOM**: 16.5.2 (CSB), 16.7.0-alpha.0 (local)  **React-Scripts**: 2.0.3 (CSB), 2.1.0 (local)"
    },
    {
        "issue_id": 374376946,
        "title": "Warn if ReactDOM.createPortal is inside a noscript or other text content tag",
        "label": [
            "Type: Enhancement",
            "Resolution: Stale"
        ],
        "date": "2018-10-26T13:10:22Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n**What is the current behavior?**\r\n\r\nWhen calling `ReactDOM.createPortal` from within a `<noscript />`, nothing happens, no error is logged.\r\n\r\n```javascript\r\nReactDOM.render(\r\n  <noscript>\r\n    {ReactDOM.createPortal(\"yo\", modalNode)}\r\n  </noscript>,\r\n  appNode\r\n);\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nWhether:\r\n- warn that it doesn't work (it worked in the previous version)\r\n- render the portal\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n- React 16.5.0 & more recent\r\n- Reproducible in every browser\r\n\r\n**Repro**\r\nhttps://jsfiddle.net/bloodyowl/n5u2wwjg/223296/",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**  bug    **What is the current behavior?**    When calling `ReactDOM.createPortal` from within a `<noscript />`, nothing happens, no error is logged.    ```javascript  ReactDOM.render(    <noscript>      {ReactDOM.createPortal(\"yo\", modalNode)}    </noscript>,    appNode  );  ```    **What is the expected behavior?**    Whether:  - warn that it doesn't work (it worked in the previous version)  - render the portal    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    - React 16.5.0 & more recent  - Reproducible in every browser    **Repro**  https://jsfiddle.net/bloodyowl/n5u2wwjg/223296/"
    },
    {
        "issue_id": 374032228,
        "title": "16.6 Context API not working in class component",
        "label": [
            "Type: Enhancement"
        ],
        "date": "2018-10-25T16:31:17Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\nQuite possibly a bug (or maybe confusion about the current API)\r\n\r\nI am using the new Context API as well as the new `static contextType` in React 16.6. I am passing context down a couple components deep but when I attempt to access the context within the component, the object is empty (~only the default value passed into `createContext` is being displayed~). This is happening in a current feature I am working on at my job, so I cannot display that code, but I did create a Codesandbox with the gist of the problem.\r\n\r\nHere is a demonstration of the behavior: https://codesandbox.io/s/r4myz959ro\r\n\r\nI would expect to be able to access the current values of the context. This way, if those values change, I would always have the most recent values. Now, maybe this is expected behavior, however, it would be confusing if it is.\r\n\r\nReact 16.6\r\nReactDOM 16.6\r\n",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**  Quite possibly a bug (or maybe confusion about the current API)    I am using the new Context API as well as the new `static contextType` in React 16.6. I am passing context down a couple components deep but when I attempt to access the context within the component, the object is empty (~only the default value passed into `createContext` is being displayed~). This is happening in a current feature I am working on at my job, so I cannot display that code, but I did create a Codesandbox with the gist of the problem.    Here is a demonstration of the behavior: https://codesandbox.io/s/r4myz959ro    I would expect to be able to access the current values of the context. This way, if those values change, I would always have the most recent values. Now, maybe this is expected behavior, however, it would be confusing if it is.    React 16.6  ReactDOM 16.6"
    },
    {
        "issue_id": 370771877,
        "title": "Suspense component should only capture if fallback prop is defined",
        "label": [
            "Type: Enhancement"
        ],
        "date": "2018-10-16T19:50:09Z",
        "status": "closed",
        "description": "*[Edit by @acdlite: Decided in comments below that we will change the semantics so that a missing `fallback` prop means the exception should propagate to the next parent (like a rethrow). That way a Suspense component can specify other props like `maxDuration` without needing to provide a fallback, too.]*\r\n\r\n---\r\n\r\n<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n**What is the current behavior?**\r\n`<React.Suspense>` does not warn you if you omit a `fallback`). While redundant for TS/Flow usage,  I misspelled the `fallback` prop by accident in a playground and was tearing my hair out trying to figure out why things were not working as expected. \r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nOmit a `fallback`. \r\n\r\n**What is the expected behavior?**\r\nReact should warn during development if `fallback` is `undefined`.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nMaster \r\n",
        "remove_template_description": "*[Edit by @acdlite: Decided in comments below that we will change the semantics so that a missing `fallback` prop means the exception should propagate to the next parent (like a rethrow). That way a Suspense component can specify other props like `maxDuration` without needing to provide a fallback, too.]*    ---    <!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**  Bug  **What is the current behavior?**  `<React.Suspense>` does not warn you if you omit a `fallback`). While redundant for TS/Flow usage,  I misspelled the `fallback` prop by accident in a playground and was tearing my hair out trying to figure out why things were not working as expected.     **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**    Omit a `fallback`.     **What is the expected behavior?**  React should warn during development if `fallback` is `undefined`.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    Master"
    },
    {
        "issue_id": 359400104,
        "title": "Warning if React.forwardRef render function doesn't take exactly two arguments is confusing when more than 2 arguments",
        "label": [
            "Type: Enhancement"
        ],
        "date": "2018-09-12T09:49:04Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nA feature (an improvement)\r\n\r\n**What is the current behavior?**\r\n\r\nWhen defining more than two parameters for a React.forwardRef render function a warning message stating \"forwardRef render functions accept two parameters: props and ref. Did you forget to use the ref parameter?\" gets logged.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://codesandbox.io/s/5v704qxvnx\r\n\r\n**What is the expected behavior?**\r\n\r\n**Option 1**\r\n\r\nOverall the message could be more explicit on accepting **exactly** two parameters. Also, when the arity is greater than 2 the second part of the message may be omitted. For instance:\r\n\r\n\"\"forwardRef render functions accept **exactly** two parameters: props and ref\"\r\n\r\n**Option 2**\r\n\r\nIf defining more than 2 arguments to the function is ok, which may be the case since the real goal for this warning is just to make sure people use the ref parameter, I think the message could not be shown for arity > 2, therefore chaging the condition of `=== 2` to `> 1`.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.5.0 which is the one that includes this new warning",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**    A feature (an improvement)    **What is the current behavior?**    When defining more than two parameters for a React.forwardRef render function a warning message stating \"forwardRef render functions accept two parameters: props and ref. Did you forget to use the ref parameter?\" gets logged.    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**    https://codesandbox.io/s/5v704qxvnx    **What is the expected behavior?**    **Option 1**    Overall the message could be more explicit on accepting **exactly** two parameters. Also, when the arity is greater than 2 the second part of the message may be omitted. For instance:    \"\"forwardRef render functions accept **exactly** two parameters: props and ref\"    **Option 2**    If defining more than 2 arguments to the function is ok, which may be the case since the real goal for this warning is just to make sure people use the ref parameter, I think the message could not be shown for arity > 2, therefore chaging the condition of `=== 2` to `> 1`.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    16.5.0 which is the one that includes this new warning"
    },
    {
        "issue_id": 359274835,
        "title": "passing React.createContext() mistakenly as if it were an element causes confusing error",
        "label": [
            "Type: Enhancement",
            "Resolution: Stale"
        ],
        "date": "2018-09-12T00:48:19Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nbug\r\n\r\n**What is the current behavior?**\r\n\r\nIf you're really tired and forget to use a `Context.Provider`, and instead use the `Context` as if it were a provider, React (understandably) freaks out, but the error message is confusing. i.e.:\r\n\r\n```js\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nconst Context = React.createContext();\r\n\r\nimport \"./styles.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Hello CodeSandbox</h1>\r\n      <Context value={\"oops\"}>\r\n        <div>duh</div>\r\n      </Context>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\n```\r\n\r\nThis results in the console looking something like (pasted from codesandbox):\r\n\r\n```\r\nWarning: A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.\r\nWarning: A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.\r\nThe above error occurred in one of your React components:\r\nError in sandbox: \r\nTypeError: render is not a function\r\nCould not consume error: \r\nError {}\r\n```\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n[![Edit 1wv0ly494l](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/1wv0ly494l)\r\n\r\n**What is the expected behavior?**\r\n\r\nAn error that (roughly paraphrased) says something along the lines of:\r\n\r\n```\r\nhey idiot, you're trying to use a context directly. You want to use context.Provider. Go take a shower and try again.\r\n```\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.3+\r\n",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**    bug    **What is the current behavior?**    If you're really tired and forget to use a `Context.Provider`, and instead use the `Context` as if it were a provider, React (understandably) freaks out, but the error message is confusing. i.e.:    ```js  import React from \"react\";  import ReactDOM from \"react-dom\";    const Context = React.createContext();    import \"./styles.css\";    function App() {    return (      <div className=\"App\">        <h1>Hello CodeSandbox</h1>        <Context value={\"oops\"}>          <div>duh</div>        </Context>      </div>    );  }    const rootElement = document.getElementById(\"root\");  ReactDOM.render(<App />, rootElement);  ```    This results in the console looking something like (pasted from codesandbox):    ```  Warning: A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.  Warning: A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.  The above error occurred in one of your React components:  Error in sandbox:   TypeError: render is not a function  Could not consume error:   Error {}  ```    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**    [![Edit 1wv0ly494l](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/1wv0ly494l)    **What is the expected behavior?**    An error that (roughly paraphrased) says something along the lines of:    ```  hey idiot, you're trying to use a context directly. You want to use context.Provider. Go take a shower and try again.  ```    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    16.3+"
    },
    {
        "issue_id": 355198151,
        "title": "Relax ToString consistency guarantees",
        "label": [
            "Type: Enhancement",
            "Component: DOM",
            "React Core Team"
        ],
        "date": "2018-08-29T14:50:15Z",
        "status": "open",
        "description": "We recently chatted about https://github.com/facebook/react/pull/13367 and related work (e.g. https://github.com/facebook/react/pull/13394) with @sebmarkbage, and he raised a good point.\r\n\r\nIt seems like overall treating them consistently is adding significant overhead in the implementation readability. And there\u2019s undoubtedly runtime overhead to it too. There are two separate issues here:\r\n\r\n* **warning** for invalid values\r\n* ensuring that the output for invalid values is **consistent** (e.g. functions are always skipped)\r\n\r\nThe conclusion we came to is that we should keep **warning** for bad values, but **as long as we warn, consistency is not necessary**. It's fine if we sometimes stringify a function, and sometimes skip it, as long as we always warn for those cases\r\n\r\n**Our guiding principle for invalid inputs should be that we handle them with the least amount of overhead** (both at runtime, and in terms of code size), not that they\u2019re always handled the same way.\r\n\r\nOne exception to this is probably Symbols because they throw when stringified. So it seems like skipping them is actually desirable \u2014 unless we're okay with errors.",
        "remove_template_description": "We recently chatted about https://github.com/facebook/react/pull/13367 and related work (e.g. https://github.com/facebook/react/pull/13394) with @sebmarkbage, and he raised a good point.    It seems like overall treating them consistently is adding significant overhead in the implementation readability. And there\u2019s undoubtedly runtime overhead to it too. There are two separate issues here:    * **warning** for invalid values  * ensuring that the output for invalid values is **consistent** (e.g. functions are always skipped)    The conclusion we came to is that we should keep **warning** for bad values, but **as long as we warn, consistency is not necessary**. It's fine if we sometimes stringify a function, and sometimes skip it, as long as we always warn for those cases    **Our guiding principle for invalid inputs should be that we handle them with the least amount of overhead** (both at runtime, and in terms of code size), not that they\u2019re always handled the same way.    One exception to this is probably Symbols because they throw when stringified. So it seems like skipping them is actually desirable \u2014 unless we're okay with errors."
    },
    {
        "issue_id": 352771749,
        "title": "forwardRef precludes use of composite component test utils methods",
        "label": [
            "Type: Enhancement",
            "Component: Test Utils"
        ],
        "date": "2018-08-22T01:54:16Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug, I believe\u2014requested to file a new issue per https://github.com/facebook/react/issues/12453#issuecomment-414868619\r\n\r\n**What is the current behavior?**\r\nWhen using ReactTestUtils that navigate the trees for composite components, I am unable to find instances of components wrapped in `React.forwardRef`:\r\n\r\n```jsx\r\nfindRenderedComponentWithType(tree, myHOCForwardedComponent)\r\n// error, finds 0 instances\r\n```\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem:**\r\n\r\nJSFiddle link [here](https://jsfiddle.net/Luktwrdm/974/)\r\n\r\nI have a HOC that returns a forwardRef pretty much exactly like the one written up in the [docs](https://reactjs.org/docs/forwarding-refs.html#forwarding-refs-in-higher-order-components), except while using React Context:\r\n\r\n```jsx\r\nconst MyContext = React.createContext(someDefault);\r\n\r\nconst withMyContext = (Component) => {\r\n  class MyContextConsumer extends React.Component {\r\n    render() {\r\n      const {forwardedRef, ...rest} = this.props;\r\n\r\n      return (\r\n        <MyContext.Consumer>\r\n          {(value) => (\r\n            <Component\r\n              {...rest}\r\n              ref={forwardedRef}\r\n              myValue={value}\r\n            />\r\n          )}\r\n        </MyContext.Consumer>\r\n      );\r\n    }\r\n  }\r\n\r\n  return React.forwardRef((props, ref) => (\r\n    <MyContextConsumer {...props} forwardedRef={ref} />\r\n  ));\r\n};\r\n\r\n@withMyContext\r\nclass MyHOCForwardedComponent extends React.Component {\r\n  render() {\r\n     return <div>HELLO</div>;\r\n  }\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\nI would hope that we could still navigate the tree, such that\r\n```jsx\r\nfindRenderedComponentWithType(tree, myHOCForwardedComponent)\r\n```\r\n\r\nis able to find the rendered instance.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact 16.4\u2014affected everywhere, I believe.\r\n\r\nThank you for the time!!\r\n",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**  Bug, I believe\u2014requested to file a new issue per https://github.com/facebook/react/issues/12453#issuecomment-414868619    **What is the current behavior?**  When using ReactTestUtils that navigate the trees for composite components, I am unable to find instances of components wrapped in `React.forwardRef`:    ```jsx  findRenderedComponentWithType(tree, myHOCForwardedComponent)  // error, finds 0 instances  ```    **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem:**    JSFiddle link [here](https://jsfiddle.net/Luktwrdm/974/)    I have a HOC that returns a forwardRef pretty much exactly like the one written up in the [docs](https://reactjs.org/docs/forwarding-refs.html#forwarding-refs-in-higher-order-components), except while using React Context:    ```jsx  const MyContext = React.createContext(someDefault);    const withMyContext = (Component) => {    class MyContextConsumer extends React.Component {      render() {        const {forwardedRef, ...rest} = this.props;          return (          <MyContext.Consumer>            {(value) => (              <Component                {...rest}                ref={forwardedRef}                myValue={value}              />            )}          </MyContext.Consumer>        );      }    }      return React.forwardRef((props, ref) => (      <MyContextConsumer {...props} forwardedRef={ref} />    ));  };    @withMyContext  class MyHOCForwardedComponent extends React.Component {    render() {       return <div>HELLO</div>;    }  }  ```    **What is the expected behavior?**  I would hope that we could still navigate the tree, such that  ```jsx  findRenderedComponentWithType(tree, myHOCForwardedComponent)  ```    is able to find the rendered instance.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  React 16.4\u2014affected everywhere, I believe.    Thank you for the time!!"
    },
    {
        "issue_id": 337169332,
        "title": "Add a more helpful message when passing an element to createElement() as a type",
        "label": [
            "Type: Enhancement",
            "Difficulty: starter",
            "good first issue (taken)"
        ],
        "date": "2018-06-30T00:13:22Z",
        "status": "closed",
        "description": "This:\r\n\r\n```js\r\ncreateElement(<div />)\r\n```\r\n\r\ndoesn't currently give a distinguishable message.\r\n\r\nhttps://stackoverflow.com/questions/51110436/wrapping-provider-in-same-component-throws-element-type-is-invalid-expected-a-s\r\n\r\nBut we can easily detect it by checking for `$$typeof` and in that case suggest something more concrete (e.g. \"Did you accidentally export JSX instead of a component?\").",
        "remove_template_description": "This:    ```js  createElement(<div />)  ```    doesn't currently give a distinguishable message.    https://stackoverflow.com/questions/51110436/wrapping-provider-in-same-component-throws-element-type-is-invalid-expected-a-s    But we can easily detect it by checking for `$$typeof` and in that case suggest something more concrete (e.g. \"Did you accidentally export JSX instead of a component?\")."
    },
    {
        "issue_id": 335938959,
        "title": "Warn when setState is a function that doesn't return",
        "label": [
            "Type: Enhancement",
            "Resolution: Stale"
        ],
        "date": "2018-06-26T18:24:00Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nI am proposing adding a warning in development.\r\n\r\n**What is the current behavior?**\r\n\r\nwhen I do `this.setState(({ bool }) => { bool: !bool });` this is valid javascript but is meaningless in React. ESLint:no-label helps to catch this but we can probably do one better by building a warning into dev-mode React itself.\r\n\r\nsandbox demo: https://codesandbox.io/s/xopj5nx07o\r\n\r\n**What is the expected behavior?**\r\n\r\nwarn when a function is applied to setState that returns undefined. if the user wants to indicate nothing changed they should return null.",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**    I am proposing adding a warning in development.    **What is the current behavior?**    when I do `this.setState(({ bool }) => { bool: !bool });` this is valid javascript but is meaningless in React. ESLint:no-label helps to catch this but we can probably do one better by building a warning into dev-mode React itself.    sandbox demo: https://codesandbox.io/s/xopj5nx07o    **What is the expected behavior?**    warn when a function is applied to setState that returns undefined. if the user wants to indicate nothing changed they should return null."
    },
    {
        "issue_id": 331188646,
        "title": "Popping SSR providers is O(N) where N = number of providers on the stack",
        "label": [
            "Type: Enhancement",
            "Component: Server Rendering"
        ],
        "date": "2018-06-11T13:27:14Z",
        "status": "closed",
        "description": "See https://github.com/facebook/react/pull/12985 for details. Not sure if it matters in practice. Do people often have many (dozens and more?) providers deep inside the tree?\r\n\r\nIf we can remove the loop there it would be nice.",
        "remove_template_description": "See https://github.com/facebook/react/pull/12985 for details. Not sure if it matters in practice. Do people often have many (dozens and more?) providers deep inside the tree?    If we can remove the loop there it would be nice."
    },
    {
        "issue_id": 328219455,
        "title": "Fire change events for changes made to inputs before hydration",
        "label": [
            "Type: Enhancement",
            "Component: DOM",
            "Type: Needs Investigation",
            "Resolution: Stale"
        ],
        "date": "2018-05-31T16:56:20Z",
        "status": "closed",
        "description": "Currently when hydrating server-rendered markup we ignore changes the user makes before hydration. We also don't reset their changes once hydration finishes. The motivation there was likely to avoid losing user input. See this test:\r\n\r\nhttps://github.com/facebook/react/blob/master/packages/react-dom/src/__tests__/ReactDOMServerIntegrationForms-test.js#L543-L552\r\n\r\nThe problem with that is that it assumes the value will continue to be changed after hydration completes (e.g., a user keeps typing). If they _don't_, then the DOM and React will be out of sync.\r\n\r\nWe should try to detect if there have been any changes made to an input when hydrating, and if so dispatch a change event so that the component is notified of the new value.\r\n\r\nSee https://github.com/facebook/react/pull/12939 for some more discussion.\r\n",
        "remove_template_description": "Currently when hydrating server-rendered markup we ignore changes the user makes before hydration. We also don't reset their changes once hydration finishes. The motivation there was likely to avoid losing user input. See this test:    https://github.com/facebook/react/blob/master/packages/react-dom/src/__tests__/ReactDOMServerIntegrationForms-test.js#L543-L552    The problem with that is that it assumes the value will continue to be changed after hydration completes (e.g., a user keeps typing). If they _don't_, then the DOM and React will be out of sync.    We should try to detect if there have been any changes made to an input when hydrating, and if so dispatch a change event so that the component is notified of the new value.    See https://github.com/facebook/react/pull/12939 for some more discussion."
    },
    {
        "issue_id": 316864395,
        "title": "Improve warning message for failure to initialize `state` when using `getDerivedStateFromProps`",
        "label": [
            "Type: Enhancement",
            "good first issue"
        ],
        "date": "2018-04-23T15:29:28Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nbug\r\n\r\n**What is the current behavior?**\r\n\r\nThe warning for a failure to initialize state when using `getDerivedStateFromProps` is not as clear as it could be.\r\n\r\nThis component produces the warning:\r\n> MyComponent: Did not properly initialize state during construction. Expected state to be an object, but it was undefined.`\r\n\r\n```js\r\nclass MyComponent extends React.Component {\r\n  static getDerivedStateFromProps(nextProps, prevState) {\r\n    return null;\r\n  }\r\n  render() {\r\n    return <span>Foo</span>\r\n  }\r\n}\r\n```\r\n\r\nThe warning can be resolved by adding `state = {}` either in the class definition or the constructor, or by not using `getDerivedStateFromProps`.\r\n\r\nSee https://github.com/reactjs/reactjs.org/issues/796 for more detail on why this warning message can be counter-intuitive.\r\n\r\nSince the [warning is specific](https://github.com/facebook/react/blob/b548b3cd640dbd515f5d67dafc0216bb7ee0d796/packages/react-reconciler/src/ReactFiberClassComponent.js#L509-L510) to the use of `getDerivedStateFromProps` and not triggered by any other state or lifecycle methods, and state initialization isn't required for other state methods like `this.setState`, it would make sense to me to mention `getDerivedStateFromProps` explicitly in the warning.\r\n\r\nHere's a proposal for a new warning message:\r\n> MyComponent: Component state must be initialized when using getDerivedStateFromProps. Expected state to be an object, but it was undefined.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact >= 16.3.0\r\n",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**    bug    **What is the current behavior?**    The warning for a failure to initialize state when using `getDerivedStateFromProps` is not as clear as it could be.    This component produces the warning:  > MyComponent: Did not properly initialize state during construction. Expected state to be an object, but it was undefined.`    ```js  class MyComponent extends React.Component {    static getDerivedStateFromProps(nextProps, prevState) {      return null;    }    render() {      return <span>Foo</span>    }  }  ```    The warning can be resolved by adding `state = {}` either in the class definition or the constructor, or by not using `getDerivedStateFromProps`.    See https://github.com/reactjs/reactjs.org/issues/796 for more detail on why this warning message can be counter-intuitive.    Since the [warning is specific](https://github.com/facebook/react/blob/b548b3cd640dbd515f5d67dafc0216bb7ee0d796/packages/react-reconciler/src/ReactFiberClassComponent.js#L509-L510) to the use of `getDerivedStateFromProps` and not triggered by any other state or lifecycle methods, and state initialization isn't required for other state methods like `this.setState`, it would make sense to me to mention `getDerivedStateFromProps` explicitly in the warning.    Here's a proposal for a new warning message:  > MyComponent: Component state must be initialized when using getDerivedStateFromProps. Expected state to be an object, but it was undefined.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    React >= 16.3.0"
    },
    {
        "issue_id": 312786441,
        "title": "Multiple Renderers Should Allow Context",
        "label": [
            "Type: Enhancement",
            "Component: Reconciler"
        ],
        "date": "2018-04-10T06:17:43Z",
        "status": "closed",
        "description": "https://github.com/facebook/react/blob/ba245f6f9b0bf31c2ebff5c087c21bcae111e6c3/packages/react-reconciler/src/ReactFiberNewContext.js#L51\r\n\r\nWe currently don't allow multiple renderers share the same context.\r\n\r\nHowever, we should relax that constraint. They should be allowed, as long as rendering isn't interleaved. So when we pop the provider, we should also pop the sigil.\r\n\r\nWe need this to run Fabric and RN at the same time.",
        "remove_template_description": "https://github.com/facebook/react/blob/ba245f6f9b0bf31c2ebff5c087c21bcae111e6c3/packages/react-reconciler/src/ReactFiberNewContext.js#L51    We currently don't allow multiple renderers share the same context.    However, we should relax that constraint. They should be allowed, as long as rendering isn't interleaved. So when we pop the provider, we should also pop the sigil.    We need this to run Fabric and RN at the same time."
    },
    {
        "issue_id": 310947142,
        "title": "Improve ReactDOM's uppercase HTML warning",
        "label": [
            "Type: Enhancement"
        ],
        "date": "2018-04-03T18:28:32Z",
        "status": "closed",
        "description": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nImprovement request/discussion\r\n\r\n**What is the current behavior?**\r\nRendering `<fooBar/>` in ReactDOM:\r\n> fooBar is using uppercase HTML. Always use lowercase HTML tags in React.\r\n\r\n**What is the expected behavior?**\r\nThe warning message can be improved to make it more obvious how to fix the issue for different use cases. For example, it's not obvious from this message that custom components should add dashes or that the first letter should be capitalized if it's actually a React component. Here's my idea, but I'm open to suggestions:\r\n\r\n> Warning: \\<foorBar /\\> looks like an HTML or web component element because it starts with a lowercase letter, but it has uppercase letters instead of dashes. Use PascalCase for React components, or lowercase letters and dashes for HTML.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nmaster: eb6e752cabafed0b72e1d0a38819ff156557d537",
        "remove_template_description": "<!--    Note: if the issue is about documentation or the website, please file it at:    https://github.com/reactjs/reactjs.org/issues/new  -->    **Do you want to request a *feature* or report a *bug*?**  Improvement request/discussion    **What is the current behavior?**  Rendering `<fooBar/>` in ReactDOM:  > fooBar is using uppercase HTML. Always use lowercase HTML tags in React.    **What is the expected behavior?**  The warning message can be improved to make it more obvious how to fix the issue for different use cases. For example, it's not obvious from this message that custom components should add dashes or that the first letter should be capitalized if it's actually a React component. Here's my idea, but I'm open to suggestions:    > Warning: \\<foorBar /\\> looks like an HTML or web component element because it starts with a lowercase letter, but it has uppercase letters instead of dashes. Use PascalCase for React components, or lowercase letters and dashes for HTML.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  master: eb6e752cabafed0b72e1d0a38819ff156557d537"
    },
    {
        "issue_id": 298020625,
        "title": "Children of Consumer without new line gives \"TypeError: render is not a function\"",
        "label": [
            "Type: Enhancement",
            "Difficulty: starter",
            "good first issue (taken)"
        ],
        "date": "2018-02-17T17:20:41Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nI get a confusing error when not using a new line in the children of a Consumer un the new Context API:\r\nhttps://codesandbox.io/s/13n733xp5j\r\n\r\nError:\r\n![selection_108](https://user-images.githubusercontent.com/10557463/36343595-1e28ece8-13dc-11e8-99ae-2c4a2e707000.png)\r\n\r\nFix:\r\n![selection_109](https://user-images.githubusercontent.com/10557463/36343599-245ae51c-13dc-11e8-95b2-be8491ccd39f.png)\r\n\r\n\r\n**What is the expected behavior?**\r\n\r\nComponent just getting redered\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.3.0-alpha.1 and 16.3.0-alpha.0, Chromium 63, Archilinux. React 16.2 didn't support the new Context Api.\r\n",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**    Bug    **What is the current behavior?**    I get a confusing error when not using a new line in the children of a Consumer un the new Context API:  https://codesandbox.io/s/13n733xp5j    Error:  ![selection_108](https://user-images.githubusercontent.com/10557463/36343595-1e28ece8-13dc-11e8-99ae-2c4a2e707000.png)    Fix:  ![selection_109](https://user-images.githubusercontent.com/10557463/36343599-245ae51c-13dc-11e8-95b2-be8491ccd39f.png)      **What is the expected behavior?**    Component just getting redered    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    16.3.0-alpha.1 and 16.3.0-alpha.0, Chromium 63, Archilinux. React 16.2 didn't support the new Context Api."
    },
    {
        "issue_id": 289858687,
        "title": "Event Handlers on Fragments",
        "label": [
            "Type: Enhancement",
            "Component: DOM",
            "Component: Reconciler"
        ],
        "date": "2018-01-19T04:20:57Z",
        "status": "closed",
        "description": "The use case is when an abstraction wants to listen to some event bubbling up and intercept the event somehow.\r\n\r\n```js\r\nfunction Abstraction(props) {\r\n  return <div onClick={() => props.onAction()}>{props.children}</div>;\r\n}\r\n```\r\n\r\nPerhaps there is some state and context involved too.\r\n\r\nThis works fine today as long as you can wrap it in a `<div />`. However, you can't necessarily always do that. I hear that some of this will be relaxed but conceptually I think the constraints will remain in many environment that you don't want a wrapper element around these.\r\n\r\n```js\r\n<ul>\r\n  <Abstraction onAction={...}>\r\n    <li>A</li>\r\n    <li>B</li>\r\n  </Abstraction>\r\n</ul>\r\n```\r\n\r\n```js\r\n<table>\r\n  <tbody>\r\n    <Abstraction onAction={...}>\r\n      <tr><td>A</td></tr>\r\n      <tr><td>B</td></tr>\r\n    </Abstraction>\r\n    <Abstraction onAction={...}>\r\n      <tr><td>A</td></tr>\r\n      <tr><td>B</td></tr>\r\n    </Abstraction>\r\n  </tbody>\r\n</table>\r\n```\r\n\r\nIt would be nice to be able to use fragments for this.\r\n\r\n```js\r\nfunction Abstraction(props) {\r\n  return <Fragment onClick={() => props.onAction()}>{props.children}</Fragment>;\r\n}\r\n```\r\n\r\nIt is easy to implement with the synthetic event system but I suspect it is doable with other approaches too (including just inserting an element called `<fragment />` in the DOM).\r\n\r\nTo implement this we'd need somewhere to store the \"current\" props. We can use the `stateNode` on fragment fibers to hold that. We also need to schedule commit phase effects whenever the set of event handlers on a fragment changes. In the commit phase we update the stateNode on both Fibers to hold the \"current props\".\r\n\r\nThat way when we bubble up the fiber return pointers, we know that stateNode holds the current set of props and those will be the ones we extract event handlers from.",
        "remove_template_description": "The use case is when an abstraction wants to listen to some event bubbling up and intercept the event somehow.    ```js  function Abstraction(props) {    return <div onClick={() => props.onAction()}>{props.children}</div>;  }  ```    Perhaps there is some state and context involved too.    This works fine today as long as you can wrap it in a `<div />`. However, you can't necessarily always do that. I hear that some of this will be relaxed but conceptually I think the constraints will remain in many environment that you don't want a wrapper element around these.    ```js  <ul>    <Abstraction onAction={...}>      <li>A</li>      <li>B</li>    </Abstraction>  </ul>  ```    ```js  <table>    <tbody>      <Abstraction onAction={...}>        <tr><td>A</td></tr>        <tr><td>B</td></tr>      </Abstraction>      <Abstraction onAction={...}>        <tr><td>A</td></tr>        <tr><td>B</td></tr>      </Abstraction>    </tbody>  </table>  ```    It would be nice to be able to use fragments for this.    ```js  function Abstraction(props) {    return <Fragment onClick={() => props.onAction()}>{props.children}</Fragment>;  }  ```    It is easy to implement with the synthetic event system but I suspect it is doable with other approaches too (including just inserting an element called `<fragment />` in the DOM).    To implement this we'd need somewhere to store the \"current\" props. We can use the `stateNode` on fragment fibers to hold that. We also need to schedule commit phase effects whenever the set of event handlers on a fragment changes. In the commit phase we update the stateNode on both Fibers to hold the \"current props\".    That way when we bubble up the fiber return pointers, we know that stateNode holds the current set of props and those will be the ones we extract event handlers from."
    },
    {
        "issue_id": 286781752,
        "title": "Warn in server renderer if class doesn't extend React.Component but has a render() method",
        "label": [
            "Type: Enhancement",
            "Difficulty: starter",
            "good first issue (taken)"
        ],
        "date": "2018-01-08T15:29:56Z",
        "status": "closed",
        "description": "Same as https://github.com/facebook/react/issues/10103, but for the server renderer. You can look at implementation in https://github.com/facebook/react/pull/11168 and do something very similar in `ReactPartialRenderer.js`.",
        "remove_template_description": "Same as https://github.com/facebook/react/issues/10103, but for the server renderer. You can look at implementation in https://github.com/facebook/react/pull/11168 and do something very similar in `ReactPartialRenderer.js`."
    },
    {
        "issue_id": 285212510,
        "title": "Consider a more specific warning for key={undefined}",
        "label": [
            "Type: Enhancement",
            "Component: Core Utilities",
            "React Core Team"
        ],
        "date": "2017-12-30T17:00:45Z",
        "status": "open",
        "description": "Proposed in [this comment](https://dev.to/k1sul1/comment/1o68):\r\n\r\n>I had changed the casing of \"ID\" in the response, but forgot to commit it aaaaaand I ended up with it happening.\r\n\r\n>Basically I was doing key={undefined}. Could React warn user when this happens, something like \"Looks like you tried to supply a key, but the value supplied is undefined. Check the render...\" and so on?\r\n\r\nI think it might make sense to give a more specific warning in this case. Open to suggestions about specific wording and in which case it would be used.",
        "remove_template_description": "Proposed in [this comment](https://dev.to/k1sul1/comment/1o68):    >I had changed the casing of \"ID\" in the response, but forgot to commit it aaaaaand I ended up with it happening.    >Basically I was doing key={undefined}. Could React warn user when this happens, something like \"Looks like you tried to supply a key, but the value supplied is undefined. Check the render...\" and so on?    I think it might make sense to give a more specific warning in this case. Open to suggestions about specific wording and in which case it would be used."
    },
    {
        "issue_id": 279063760,
        "title": "Figure out a better fix for memory leak",
        "label": [
            "Type: Enhancement",
            "Component: Reconciler"
        ],
        "date": "2017-12-04T16:41:55Z",
        "status": "closed",
        "description": "See https://github.com/facebook/react/pull/11644. Filing this as a follow up.",
        "remove_template_description": "See https://github.com/facebook/react/pull/11644. Filing this as a follow up."
    },
    {
        "issue_id": 278325058,
        "title": "Do we still need to stringify attributes before assigning them?",
        "label": [
            "Type: Enhancement",
            "Component: DOM",
            "Resolution: Stale"
        ],
        "date": "2017-12-01T01:09:22Z",
        "status": "closed",
        "description": "React manually stringifies all attributes before assigning them:\r\n\r\nhttps://github.com/facebook/react/blob/master/packages/react-dom/src/client/DOMPropertyOperations.js#L169-L179\r\n\r\nThis appears to be for IE8/9. However it's possible that this is an IE8 only behavior. See IE9:\r\n\r\n<img width=\"1104\" alt=\"screen shot 2017-11-30 at 8 02 51 pm\" src=\"https://user-images.githubusercontent.com/590904/33463221-2eeb4770-d60a-11e7-9915-2a2918ca22b9.png\">\r\n\r\n<img width=\"752\" alt=\"screen shot 2017-11-30 at 8 03 38 pm\" src=\"https://user-images.githubusercontent.com/590904/33463224-3595328e-d60a-11e7-9786-e2ac050ffb53.png\">\r\n\r\nCan we get rid of `'' + value` in DOMPropertyOperations?\r\n",
        "remove_template_description": "React manually stringifies all attributes before assigning them:    https://github.com/facebook/react/blob/master/packages/react-dom/src/client/DOMPropertyOperations.js#L169-L179    This appears to be for IE8/9. However it's possible that this is an IE8 only behavior. See IE9:    <img width=\"1104\" alt=\"screen shot 2017-11-30 at 8 02 51 pm\" src=\"https://user-images.githubusercontent.com/590904/33463221-2eeb4770-d60a-11e7-9915-2a2918ca22b9.png\">    <img width=\"752\" alt=\"screen shot 2017-11-30 at 8 03 38 pm\" src=\"https://user-images.githubusercontent.com/590904/33463224-3595328e-d60a-11e7-9786-e2ac050ffb53.png\">    Can we get rid of `'' + value` in DOMPropertyOperations?"
    },
    {
        "issue_id": 276864227,
        "title": "RFC: Drop isAttributeNameSafe() check",
        "label": [
            "Type: Enhancement",
            "Type: Breaking Change",
            "React Core Team"
        ],
        "date": "2017-11-26T22:50:11Z",
        "status": "open",
        "description": "We currently validate DOM attributes on the client and ignore the ones with invalid names:\r\n\r\nhttps://github.com/facebook/react/blob/0c164bb4851e78e5f789dd8619f17ffcfee0221f/packages/react-dom/src/client/DOMPropertyOperations.js#L202-L204\r\n\r\nThis check used to be important for safety when we did `innerHTML` rendering on the client side, but it's not anymore. If we just let it call `setAttribute`, the browser would throw on a bad attribute name.\r\n\r\nThis check used to run very infrequently (only for data attributes and custom elements), but now more attributes follow this code path (since any \"simple\" attributes with the same names are effectively treated as unknown attributes). So even though we cache the result, it seems unfortunate to do the work that the browser is already doing for us.\r\n\r\nWhile this would be a breaking change (so it has to go in 17), I think we should just remove this check, and let the browser throw. This does make spreading props blindly a bit more dangerous, but we have a warning so it should be visible.",
        "remove_template_description": "We currently validate DOM attributes on the client and ignore the ones with invalid names:    https://github.com/facebook/react/blob/0c164bb4851e78e5f789dd8619f17ffcfee0221f/packages/react-dom/src/client/DOMPropertyOperations.js#L202-L204    This check used to be important for safety when we did `innerHTML` rendering on the client side, but it's not anymore. If we just let it call `setAttribute`, the browser would throw on a bad attribute name.    This check used to run very infrequently (only for data attributes and custom elements), but now more attributes follow this code path (since any \"simple\" attributes with the same names are effectively treated as unknown attributes). So even though we cache the result, it seems unfortunate to do the work that the browser is already doing for us.    While this would be a breaking change (so it has to go in 17), I think we should just remove this check, and let the browser throw. This does make spreading props blindly a bit more dangerous, but we have a warning so it should be visible."
    },
    {
        "issue_id": 275927244,
        "title": "Include component stack in invariants",
        "label": [
            "Type: Enhancement",
            "good first issue (taken)",
            "React Core Team"
        ],
        "date": "2017-11-22T02:46:07Z",
        "status": "closed",
        "description": "IIRC we didn't include it because it was DEV-only. But it's not anymore.\r\nMaybe let's start including it?\r\n\r\nErrors are often more prominent than warnings, and it would be great to have this info in both.",
        "remove_template_description": "IIRC we didn't include it because it was DEV-only. But it's not anymore.  Maybe let's start including it?    Errors are often more prominent than warnings, and it would be great to have this info in both."
    },
    {
        "issue_id": 275348741,
        "title": "Investigate need to feature check cancel and close events.",
        "label": [
            "Type: Enhancement",
            "Component: DOM",
            "Resolution: Stale"
        ],
        "date": "2017-11-20T13:04:30Z",
        "status": "closed",
        "description": "The [ReactBrowserEventEmitter checks for browser support of the `cancel` and `close` events.](https://github.com/facebook/react/blob/master/packages/react-dom/src/events/ReactBrowserEventEmitter.js#L136-L138) before attaching those listeners.\r\n\r\nI'm curious why this is necessary. Did we need it for IE8? \r\n\r\nI'd like to:\r\n\r\n- [ ] Determine if there are ramifications to removing these checks\r\n- [ ] Add comments above those lines if these checks are necessary.\r\n- [x] ~Maybe eliminate [`isEventSupported.js`](https://github.com/facebook/react/blob/master/packages/react-dom/src/events/isEventSupported.js)~ this is needed to check for `input` in ChangeEventPlugin",
        "remove_template_description": "The [ReactBrowserEventEmitter checks for browser support of the `cancel` and `close` events.](https://github.com/facebook/react/blob/master/packages/react-dom/src/events/ReactBrowserEventEmitter.js#L136-L138) before attaching those listeners.    I'm curious why this is necessary. Did we need it for IE8?     I'd like to:    - [ ] Determine if there are ramifications to removing these checks  - [ ] Add comments above those lines if these checks are necessary.  - [x] ~Maybe eliminate [`isEventSupported.js`](https://github.com/facebook/react/blob/master/packages/react-dom/src/events/isEventSupported.js)~ this is needed to check for `input` in ChangeEventPlugin"
    },
    {
        "issue_id": 275287008,
        "title": "Add warning when hydrating output from renderToStaticMarkup",
        "label": [
            "Type: Enhancement",
            "Component: Server Rendering",
            "Resolution: Stale"
        ],
        "date": "2017-11-20T09:27:26Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\n**What is the current behavior?**\r\nI accidently generated my SSR output using `renderToStaticMarkup` instead of `renderToString`, which I then hydrated using `hydrate`. This  led to a warning, caused by collapsed text nodes. `renderToString` would have added HTML comments between them.\r\n\r\nThe warning I got was: \r\nWarning: Text content did not match. Server: \"a (b)\" Client: \"a\"\r\n\r\nWhen rendering:\r\n```jsx\r\n    const a = 'a';\r\n    const b = 'b';\r\n    const component = <select><option>{a} ({b})</option></select>;\r\n```\r\n\r\nIt would be nice if `hydrate`  could detect that it is executed on output from `renderToStaticMarkup` instead of `renderToString`. It seems to me a simple check on the `data-reactroot` attribute on the root element would suffice.\r\n\r\n**What is the expected behavior?**\r\n\r\nI would like some kind of warning along the following lines:\r\n\r\n`Warning: You are hydrating output that was not created by ReactDOMServer.renderToString(). Perhaps you are using ReactDOMServer.renderToStaticMarkup() or modifying the output after rendering. Please see ... for more information.`\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.1.1.\r\n\r\nDue to the changes in 16, this worked before.",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**  Feature    **What is the current behavior?**  I accidently generated my SSR output using `renderToStaticMarkup` instead of `renderToString`, which I then hydrated using `hydrate`. This  led to a warning, caused by collapsed text nodes. `renderToString` would have added HTML comments between them.    The warning I got was:   Warning: Text content did not match. Server: \"a (b)\" Client: \"a\"    When rendering:  ```jsx      const a = 'a';      const b = 'b';      const component = <select><option>{a} ({b})</option></select>;  ```    It would be nice if `hydrate`  could detect that it is executed on output from `renderToStaticMarkup` instead of `renderToString`. It seems to me a simple check on the `data-reactroot` attribute on the root element would suffice.    **What is the expected behavior?**    I would like some kind of warning along the following lines:    `Warning: You are hydrating output that was not created by ReactDOMServer.renderToString(). Perhaps you are using ReactDOMServer.renderToStaticMarkup() or modifying the output after rendering. Please see ... for more information.`    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**    16.1.1.    Due to the changes in 16, this worked before."
    },
    {
        "issue_id": 275103140,
        "title": "Warn if this.state is set to this.props referentially",
        "label": [
            "Type: Enhancement",
            "Difficulty: starter",
            "good first issue (taken)",
            "Component: Reconciler"
        ],
        "date": "2017-11-18T19:24:43Z",
        "status": "closed",
        "description": "See this example: https://github.com/facebook/react/issues/11508#issuecomment-345464797.\r\n\r\nI think it probably reflects a misunderstanding of how props and state work, and we should detect and warn if we see this.",
        "remove_template_description": "See this example: https://github.com/facebook/react/issues/11508#issuecomment-345464797.    I think it probably reflects a misunderstanding of how props and state work, and we should detect and warn if we see this."
    },
    {
        "issue_id": 274919423,
        "title": "Move MouseWheel event type detection to BrowserEventConstants",
        "label": [
            "Type: Enhancement",
            "Component: DOM",
            "good first issue (taken)"
        ],
        "date": "2017-11-17T16:23:27Z",
        "status": "closed",
        "description": "I think we can move the [`wheel` event support check in BrowserEventEmitter](https://github.com/facebook/react/blob/master/packages/react-dom/src/events/ReactBrowserEventEmitter.js#L126-L135) into [BrowserEventConstants](https://github.com/facebook/react/blob/master/packages/react-dom/src/events/BrowserEventConstants.js)\r\n\r\nThat runs the check once, which is nice for wheel and scroll events, which eventually need to be attached locally.\r\n\r\nFiling this for myself as a part of https://github.com/facebook/react/pull/11550. But this could happen on master right now.\r\n\r\nMore or less, I'm interested in cutting the overhead of event listening as much as possible, and this is really low hanging \ud83e\udd5d. ",
        "remove_template_description": "I think we can move the [`wheel` event support check in BrowserEventEmitter](https://github.com/facebook/react/blob/master/packages/react-dom/src/events/ReactBrowserEventEmitter.js#L126-L135) into [BrowserEventConstants](https://github.com/facebook/react/blob/master/packages/react-dom/src/events/BrowserEventConstants.js)    That runs the check once, which is nice for wheel and scroll events, which eventually need to be attached locally.    Filing this for myself as a part of https://github.com/facebook/react/pull/11550. But this could happen on master right now.    More or less, I'm interested in cutting the overhead of event listening as much as possible, and this is really low hanging \ud83e\udd5d."
    },
    {
        "issue_id": 274519273,
        "title": "Reword \"unknown property\" warning to be less obnoxious",
        "label": [
            "Type: Enhancement",
            "Component: DOM",
            "React Core Team"
        ],
        "date": "2017-11-16T13:40:45Z",
        "status": "open",
        "description": "I thought before it might cause knee jerk reactions, and it does in practice: https://twitter.com/freeformflo/status/928454078903894016\r\n\r\nI think we should change the phrasing to a more neutral one. Potentially explaining *why* we prefer camel case. ",
        "remove_template_description": "I thought before it might cause knee jerk reactions, and it does in practice: https://twitter.com/freeformflo/status/928454078903894016    I think we should change the phrasing to a more neutral one. Potentially explaining *why* we prefer camel case."
    },
    {
        "issue_id": 273639263,
        "title": "Add validation to the React.Children helpers",
        "label": [
            "Type: Enhancement",
            "Component: Core Utilities",
            "Resolution: Stale"
        ],
        "date": "2017-11-14T01:42:19Z",
        "status": "closed",
        "description": "Currently helpers like `React.Children.toArray` will not validate the passed elements, so things like missing keys go unnoticed.\r\n\r\nSee the discussion in https://twitter.com/sebmarkbage/status/930239051092803585 (I deleted the original tweet) for more context",
        "remove_template_description": "Currently helpers like `React.Children.toArray` will not validate the passed elements, so things like missing keys go unnoticed.    See the discussion in https://twitter.com/sebmarkbage/status/930239051092803585 (I deleted the original tweet) for more context"
    },
    {
        "issue_id": 272851505,
        "title": "Warn when component has PropTypes rather than propTypes",
        "label": [
            "Type: Enhancement",
            "Difficulty: starter",
            "good first issue (taken)"
        ],
        "date": "2017-11-10T08:08:22Z",
        "status": "closed",
        "description": "See https://github.com/reactjs/reactjs.org/issues/268#issuecomment-343402728.\r\n\r\nFeels like an easy mistake to make, and easy for us to detect. ",
        "remove_template_description": "See https://github.com/reactjs/reactjs.org/issues/268#issuecomment-343402728.    Feels like an easy mistake to make, and easy for us to detect."
    },
    {
        "issue_id": 268946687,
        "title": "Show a better warning when accidentally returning from constructor",
        "label": [
            "Type: Enhancement",
            "Difficulty: starter",
            "good first issue (taken)"
        ],
        "date": "2017-10-26T23:51:20Z",
        "status": "closed",
        "description": "Based on a conversation with @vjeux:\r\n\r\n>I wrote\r\n>\r\n>```js\r\n>constructor(props) {\r\n>  return {\r\n>    something: false\r\n>  }\r\n>}\r\n>```\r\n>instead of\r\n>\r\n>```js\r\n>constructor(props) {\r\n>  super(props);\r\n>  this.state = {\r\n>    something: false\r\n>  }\r\n>}\r\n>```\r\n>\r\n>and the error was super confusing, it told me that render is not defined on the component, which didn't make sense since I returned it!\r\n\r\nWe can fix this to show a different message if `type` has `.prototype.isReactComponent` but `constructor()` gave us something without a `render` method.\r\n\r\n",
        "remove_template_description": "Based on a conversation with @vjeux:    >I wrote  >  >```js  >constructor(props) {  >  return {  >    something: false  >  }  >}  >```  >instead of  >  >```js  >constructor(props) {  >  super(props);  >  this.state = {  >    something: false  >  }  >}  >```  >  >and the error was super confusing, it told me that render is not defined on the component, which didn't make sense since I returned it!    We can fix this to show a different message if `type` has `.prototype.isReactComponent` but `constructor()` gave us something without a `render` method."
    },
    {
        "issue_id": 266972664,
        "title": "Branch on tag before doing type checking",
        "label": [
            "Type: Enhancement",
            "Component: Reconciler"
        ],
        "date": "2017-10-19T20:10:16Z",
        "status": "closed",
        "description": "Follow up for https://github.com/facebook/react/pull/10783/files/ab1a58ec0675b34d6eb15854c4b573f2abebe489#r145577198\r\n\r\n>  This is neat but it also means that we're sometimes comparing strings to numbers/symbols. That could potentially deopt the type hints in this function. It might actually be better to check the child.tag to ensure that it is a HostComponent or Fragment and compare the type in separate branches.\r\n>\r\n> In fact, that might already be a bug incase we ever add strings to fiber.type on other fibers than HostComponent.\r\n\r\nBy checking for tags before we do type comparison branches, we can ensure we don't have possible bugs from this, as well as optimize type hints by having monomorphic functions.",
        "remove_template_description": "Follow up for https://github.com/facebook/react/pull/10783/files/ab1a58ec0675b34d6eb15854c4b573f2abebe489#r145577198    >  This is neat but it also means that we're sometimes comparing strings to numbers/symbols. That could potentially deopt the type hints in this function. It might actually be better to check the child.tag to ensure that it is a HostComponent or Fragment and compare the type in separate branches.  >  > In fact, that might already be a bug incase we ever add strings to fiber.type on other fibers than HostComponent.    By checking for tags before we do type comparison branches, we can ensure we don't have possible bugs from this, as well as optimize type hints by having monomorphic functions."
    },
    {
        "issue_id": 264275174,
        "title": "Flow-ify ReactPartialRenderer.js",
        "label": [
            "Type: Enhancement",
            "Component: Build Infrastructure"
        ],
        "date": "2017-10-10T15:33:56Z",
        "status": "closed",
        "description": "It doesn\u2019t have a `@flow` annotation. We should start Flow-ifying it to avoid bugs like https://github.com/facebook/react/pull/11173.\r\n\r\n@iamdustan Wanna take it?",
        "remove_template_description": "It doesn\u2019t have a `@flow` annotation. We should start Flow-ifying it to avoid bugs like https://github.com/facebook/react/pull/11173.    @iamdustan Wanna take it?"
    },
    {
        "issue_id": 263584048,
        "title": "Deduplicate the \"Can only update a mounted or mounting component\" warning",
        "label": [
            "Type: Enhancement",
            "Component: Core Utilities"
        ],
        "date": "2017-10-06T22:06:38Z",
        "status": "closed",
        "description": "## Note: @anushreesubramani is working on this, please don\u2019t send PRs if you aren\u2019t her :-)\r\n\r\n----\r\n\r\nSimilar to https://github.com/facebook/react/issues/11081.\r\n\r\n@anushreesubramani Wanna take this one as well? It would need to deduplicate based on owner/stack info, similar to how https://github.com/facebook/react/pull/11120 works.",
        "remove_template_description": "## Note: @anushreesubramani is working on this, please don\u2019t send PRs if you aren\u2019t her :-)    ----    Similar to https://github.com/facebook/react/issues/11081.    @anushreesubramani Wanna take this one as well? It would need to deduplicate based on owner/stack info, similar to how https://github.com/facebook/react/pull/11120 works."
    },
    {
        "issue_id": 263410713,
        "title": "DOM Test Fixtures: Add caveats for IE9 range inputs (and other unsupported things)",
        "label": [
            "Type: Enhancement",
            "Component: Build Infrastructure",
            "Resolution: Stale"
        ],
        "date": "2017-10-06T11:07:02Z",
        "status": "closed",
        "description": "It can be confusing to recall that the range input type is not supported in IE9, invalidating a few of our test cases. For example:\r\n\r\n<img width=\"924\" alt=\"screen shot 2017-10-06 at 7 03 18 am\" src=\"https://user-images.githubusercontent.com/590904/31275269-97e687ac-aa64-11e7-97fb-e430e7dfc369.png\">\r\n\r\nThis test case verifies that changing a range slider with arrow keys works as expected, however it looks like a standard input in IE9. If we plan to make these test fixtures more public, I wonder if it would be worth adding some caveat language or marking a test as invalid for a certain browser.\r\n\r\nMaybe this would be annoying, but I thought it might be nice to collect the opinion of others.",
        "remove_template_description": "It can be confusing to recall that the range input type is not supported in IE9, invalidating a few of our test cases. For example:    <img width=\"924\" alt=\"screen shot 2017-10-06 at 7 03 18 am\" src=\"https://user-images.githubusercontent.com/590904/31275269-97e687ac-aa64-11e7-97fb-e430e7dfc369.png\">    This test case verifies that changing a range slider with arrow keys works as expected, however it looks like a standard input in IE9. If we plan to make these test fixtures more public, I wonder if it would be worth adding some caveat language or marking a test as invalid for a certain browser.    Maybe this would be annoying, but I thought it might be nice to collect the opinion of others."
    },
    {
        "issue_id": 263151961,
        "title": "Check for rAF polyfill lazily",
        "label": [
            "Type: Enhancement",
            "Component: DOM"
        ],
        "date": "2017-10-05T14:43:33Z",
        "status": "closed",
        "description": "Cases like https://github.com/facebookincubator/create-react-app/issues/3199#issuecomment-334475000 can be pretty confusing. We should probably move the warning to happen during first `ReactDOM.render` rather than immediately.",
        "remove_template_description": "Cases like https://github.com/facebookincubator/create-react-app/issues/3199#issuecomment-334475000 can be pretty confusing. We should probably move the warning to happen during first `ReactDOM.render` rather than immediately."
    },
    {
        "issue_id": 262970397,
        "title": "Make undefined ref message better",
        "label": [
            "Type: Enhancement",
            "Component: Core Utilities",
            "good first issue (taken)"
        ],
        "date": "2017-10-05T00:21:13Z",
        "status": "closed",
        "description": "As reported in https://blog.discordapp.com/lessons-from-migrating-a-large-codebase-to-react-16-e60e49102aa6, it could've been clearer. ",
        "remove_template_description": "As reported in https://blog.discordapp.com/lessons-from-migrating-a-large-codebase-to-react-16-e60e49102aa6, it could've been clearer."
    },
    {
        "issue_id": 262961656,
        "title": "Type Fiber by tag as disjoint union",
        "label": [
            "Type: Enhancement",
            "Component: Reconciler",
            "React Core Team"
        ],
        "date": "2017-10-04T23:26:51Z",
        "status": "open",
        "description": "@sebmarkbage tried this in https://github.com/facebook/react/pull/8545 but Flow couldn't handle it well.\r\nMight be worth trying again someday.",
        "remove_template_description": "@sebmarkbage tried this in https://github.com/facebook/react/pull/8545 but Flow couldn't handle it well.  Might be worth trying again someday."
    },
    {
        "issue_id": 262949027,
        "title": "Allow suppressing error boundary logs from intentionally thrown/caught errors",
        "label": [
            "Type: Enhancement",
            "Component: DOM",
            "Difficulty: medium",
            "good first issue (taken)"
        ],
        "date": "2017-10-04T22:20:27Z",
        "status": "closed",
        "description": "-----\r\n\r\n**(This is a repost of https://github.com/facebook/jest/issues/4597 by @erikras.)**\r\n\r\n----\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nSomewhere in between?\r\n\r\n**What is the current behavior?**\r\n\r\nWhen I'm running tests on [my library](https://github.com/erikras/redux-form), there are some behaviors that I want to test _do_ throw an error. These currently result in:\r\n\r\n```\r\nConsider adding an error boundary to your tree to customize error handling behavior.\r\nYou can learn more about error boundaries at https://fb.me/react-error-boundaries.\r\n```\r\n\r\n...being output to the console. This error is great in an application, but not so great for a library test.\r\n\r\n**What is the expected behavior?**\r\n\r\nIt would be great if I could do something like:\r\n```jsx\r\nexpect(() => {\r\n  TestUtils.renderIntoDocument(<DoSomething naughty/>)\r\n})\r\n.toThrow(/Bad developer!/)\r\n.andCatch() // <---- prevents React 16 error boundary warning\r\n```\r\n\r\n**Please provide your exact Jest configuration and mention your Jest, node, yarn/npm version and operating system.**\r\n\r\n```\r\njest@21.2.1\r\nreact@16.0.0\r\nreact-dom@16.0.0\r\n```\r\n\r\n**See also**\r\n\r\n- https://github.com/facebook/react/issues/11083\r\n- https://github.com/facebook/react/issues/10474#issuecomment-334164834\r\n",
        "remove_template_description": "-----    **(This is a repost of https://github.com/facebook/jest/issues/4597 by @erikras.)**    ----    **Do you want to request a *feature* or report a *bug*?**    Somewhere in between?    **What is the current behavior?**    When I'm running tests on [my library](https://github.com/erikras/redux-form), there are some behaviors that I want to test _do_ throw an error. These currently result in:    ```  Consider adding an error boundary to your tree to customize error handling behavior.  You can learn more about error boundaries at https://fb.me/react-error-boundaries.  ```    ...being output to the console. This error is great in an application, but not so great for a library test.    **What is the expected behavior?**    It would be great if I could do something like:  ```jsx  expect(() => {    TestUtils.renderIntoDocument(<DoSomething naughty/>)  })  .toThrow(/Bad developer!/)  .andCatch() // <---- prevents React 16 error boundary warning  ```    **Please provide your exact Jest configuration and mention your Jest, node, yarn/npm version and operating system.**    ```  jest@21.2.1  react@16.0.0  react-dom@16.0.0  ```    **See also**    - https://github.com/facebook/react/issues/11083  - https://github.com/facebook/react/issues/10474#issuecomment-334164834"
    },
    {
        "issue_id": 262833626,
        "title": "Deduplicate the warning about functions not being valid children",
        "label": [
            "Type: Enhancement",
            "Component: Core Utilities"
        ],
        "date": "2017-10-04T15:36:13Z",
        "status": "closed",
        "description": "Same as https://github.com/facebook/react/issues/11081, but for this one:\r\n\r\n<img width=\"476\" alt=\"screen shot 2017-10-04 at 16 35 07\" src=\"https://user-images.githubusercontent.com/810438/31184704-0d705000-a922-11e7-852e-5890962ff1e5.png\">\r\n",
        "remove_template_description": "Same as https://github.com/facebook/react/issues/11081, but for this one:    <img width=\"476\" alt=\"screen shot 2017-10-04 at 16 35 07\" src=\"https://user-images.githubusercontent.com/810438/31184704-0d705000-a922-11e7-852e-5890962ff1e5.png\">"
    },
    {
        "issue_id": 262744674,
        "title": "Deduplicate \"Render methods should be pure\" warning",
        "label": [
            "Type: Enhancement",
            "Component: Core Utilities"
        ],
        "date": "2017-10-04T10:53:17Z",
        "status": "closed",
        "description": "## Note: the task is already claimed.\r\n\r\nJust saw this in a fiddle that has a nested update bug:\r\n\r\n<img width=\"414\" alt=\"screen shot 2017-10-04 at 11 52 52\" src=\"https://user-images.githubusercontent.com/810438/31172209-923c2278-a8fa-11e7-8ffe-4dbfaa472663.png\">\r\n\r\nIt would be nice to just dedupe them in the first place instead of calling `console.error` a thousand times.\r\n\r\n---\r\n\r\n## Note: the task is already claimed.\r\n",
        "remove_template_description": "## Note: the task is already claimed.    Just saw this in a fiddle that has a nested update bug:    <img width=\"414\" alt=\"screen shot 2017-10-04 at 11 52 52\" src=\"https://user-images.githubusercontent.com/810438/31172209-923c2278-a8fa-11e7-8ffe-4dbfaa472663.png\">    It would be nice to just dedupe them in the first place instead of calling `console.error` a thousand times.    ---    ## Note: the task is already claimed."
    },
    {
        "issue_id": 261957590,
        "title": "Deprecate and remove TestUtils.mockComponent",
        "label": [
            "Type: Enhancement",
            "Component: Test Utils"
        ],
        "date": "2017-10-02T00:06:18Z",
        "status": "closed",
        "description": "It is a Jest-ism that shouldn't be in our open source package.\r\nPeople using Jest can implement a similar pattern directly.",
        "remove_template_description": "It is a Jest-ism that shouldn't be in our open source package.  People using Jest can implement a similar pattern directly."
    },
    {
        "issue_id": 248504337,
        "title": "Add tests for <select multiple> => <select> transition",
        "label": [
            "Type: Enhancement",
            "Component: DOM"
        ],
        "date": "2017-08-07T19:13:54Z",
        "status": "closed",
        "description": "I deleted it in https://github.com/facebook/react/pull/10281 because it wasn\u2019t testing the public API, and it was hard to say if it tested the path the code actually took.\r\n\r\nWe should either add a similar test against public API or an equivalent test to manual fixtures.\r\nSee https://github.com/facebook/react/pull/10281#issuecomment-320471544 for details.",
        "remove_template_description": "I deleted it in https://github.com/facebook/react/pull/10281 because it wasn\u2019t testing the public API, and it was hard to say if it tested the path the code actually took.    We should either add a similar test against public API or an equivalent test to manual fixtures.  See https://github.com/facebook/react/pull/10281#issuecomment-320471544 for details."
    },
    {
        "issue_id": 243145870,
        "title": "Make Uses of ReactDebugCurrentFrame.getCurrentStack Reentrant",
        "label": [
            "Type: Enhancement",
            "Component: Core Utilities"
        ],
        "date": "2017-07-15T01:52:38Z",
        "status": "closed",
        "description": "I realized that the refactor to use ReactDebugCurrentFrame as a decoupled stack frame for error messages is not reentrant: https://github.com/facebook/react/pull/10105/files#r127573520\r\n\r\nFiber is not reentrant but other renderers might be. The synchronous server renderer is atm.\r\n\r\nWe should add tests for warnings between renderers, such as calling a server-render from within a client render, and update the set/reset callsites to use push/pop instead to account for that.\r\n",
        "remove_template_description": "I realized that the refactor to use ReactDebugCurrentFrame as a decoupled stack frame for error messages is not reentrant: https://github.com/facebook/react/pull/10105/files#r127573520    Fiber is not reentrant but other renderers might be. The synchronous server renderer is atm.    We should add tests for warnings between renderers, such as calling a server-render from within a client render, and update the set/reset callsites to use push/pop instead to account for that."
    },
    {
        "issue_id": 240317142,
        "title": "Improve error when you've forgotten to extend React.Component",
        "label": [
            "Type: Enhancement",
            "Difficulty: starter",
            "Component: Core Utilities"
        ],
        "date": "2017-07-04T05:44:46Z",
        "status": "closed",
        "description": "When you forget to extend `React.Component` you get the following error:\r\n\r\n```\r\nTypeError: Cannot call a class as a function\r\n    at _classCallCheck (null.js:7:99)\r\n    at Hello (null.js:11:5)\r\n    ...react internals...\r\n```\r\n\r\n[[Example](http://react.jsbin.com/?html,js,console)]\r\n\r\nIt would be nice if in dev you could do a check for `Component.prototype.render` and if it exists, provide a better warning along the lines of:\r\n\r\n```\r\nWarning: Using a class with a render method as a function, did you forget to extend React.Component?\r\n``` \r\n\r\nI believe it would happen in [ReactCompositeComponent.js](https://github.com/facebook/react/blob/b840229286ac2a82fa49553ce793cf7b953d1845/src/renderers/shared/stack/reconciler/ReactCompositeComponent.js#L248).",
        "remove_template_description": "When you forget to extend `React.Component` you get the following error:    ```  TypeError: Cannot call a class as a function      at _classCallCheck (null.js:7:99)      at Hello (null.js:11:5)      ...react internals...  ```    [[Example](http://react.jsbin.com/?html,js,console)]    It would be nice if in dev you could do a check for `Component.prototype.render` and if it exists, provide a better warning along the lines of:    ```  Warning: Using a class with a render method as a function, did you forget to extend React.Component?  ```     I believe it would happen in [ReactCompositeComponent.js](https://github.com/facebook/react/blob/b840229286ac2a82fa49553ce793cf7b953d1845/src/renderers/shared/stack/reconciler/ReactCompositeComponent.js#L248)."
    },
    {
        "issue_id": 233005707,
        "title": "Error when `__source` is provided to production build",
        "label": [
            "Type: Enhancement",
            "Component: Developer Tools",
            "React Core Team"
        ],
        "date": "2017-06-01T20:48:02Z",
        "status": "open",
        "description": "Currently if the `__source` transform is enabled together with the production build there are no indicators of a poorly performant configuration. https://facebook.github.io/react/ even has it.\r\n\r\nWe already check for the [existence of a `__source` field](https://github.com/facebook/react/blob/master/src/isomorphic/classic/element/ReactElement.js#L203). So we can just reuse the same check to issue something in prod mode if it exists.\r\n\r\nThe problem is that we don't have any warning module in prod and it is unclear if it would get attention or even considered to spammy in prod.\r\n\r\nWe could throw but that might be too extreme since a misconfiguration would kill the site.\r\n\r\nWe could also use this to set a flag on the `__REACT_DEVTOOLS_GLOBAL_HOOK__` object. The icon in the devtools extension could use this to indicate a misconfigured build.",
        "remove_template_description": "Currently if the `__source` transform is enabled together with the production build there are no indicators of a poorly performant configuration. https://facebook.github.io/react/ even has it.    We already check for the [existence of a `__source` field](https://github.com/facebook/react/blob/master/src/isomorphic/classic/element/ReactElement.js#L203). So we can just reuse the same check to issue something in prod mode if it exists.    The problem is that we don't have any warning module in prod and it is unclear if it would get attention or even considered to spammy in prod.    We could throw but that might be too extreme since a misconfiguration would kill the site.    We could also use this to set a flag on the `__REACT_DEVTOOLS_GLOBAL_HOOK__` object. The icon in the devtools extension could use this to indicate a misconfigured build."
    },
    {
        "issue_id": 224147111,
        "title": "(Wrong repo)",
        "label": [
            "Type: Enhancement"
        ],
        "date": "2017-04-25T13:56:48Z",
        "status": "closed",
        "description": "(wrong repo)",
        "remove_template_description": "(wrong repo)"
    },
    {
        "issue_id": 223596050,
        "title": "yarn prettier runs a too long command for OS windows",
        "label": [
            "Type: Enhancement",
            "Component: Build Infrastructure",
            "Difficulty: medium",
            "good first issue"
        ],
        "date": "2017-04-22T22:03:35Z",
        "status": "closed",
        "description": "CLI `yarn prettier` return error too long command.\r\n\r\nThe problem is only on windows OS. Checked on windows 10 x64 CLI cmd\r\n",
        "remove_template_description": "CLI `yarn prettier` return error too long command.    The problem is only on windows OS. Checked on windows 10 x64 CLI cmd"
    },
    {
        "issue_id": 223350635,
        "title": "Implement Setting Unknown Attributes",
        "label": [
            "Type: Enhancement",
            "Difficulty: medium"
        ],
        "date": "2017-04-21T10:59:30Z",
        "status": "closed",
        "description": "We are currently warning about \u201cunknown properties\u201d in the DOM.\r\nFor example if you render:\r\n\r\n```js\r\n<div foo=\"bar\" />\r\n```\r\n\r\nyou\u2019re going to see a warning from React, and `foo` won\u2019t actually turn up in the DOM.\r\n\r\nPeople have wanted support for custom attributes since forever: https://github.com/facebook/react/issues/140. Now that we've actually been warning for a whole release, I think it's a good time to flip this behavior, and to set any unknown attributes on the DOM instead of skipping them.\r\n\r\nSo the goal is that you would actually see `<div foo=\"bar\" />` in your DOM.\r\n\r\nThere is just one caveat: we still haven't updated all FB callsites to fix this warning. Ideally we want to stay synced with open source version of React, but I don't want React 16 to be delayed because of this, nor do I want delaying this change until React 17. So I think we should bite the bullet, introduce an [internal feature flag](https://github.com/facebook/react/blob/master/src/renderers/dom/shared/ReactDOMFeatureFlags.js) that will differ for our FB builds, and enable the new behavior in the open source version. Some time during React 16 we\u2019ll finish updating our code, and remove the conditional code path.\r\n\r\nI don\u2019t think anybody on the team has time to work on this right now, so I\u2019d love this to be a community contribution. Requirements as I see them:\r\n\r\n* Introduce a new feature flag to `ReactDOMFeatureFlags`. Something like `shouldSetCustomAttributes`. Set it to `true`.\r\n* Keep the warning about unknown DOM props but only enable it if `shouldSetCustomAttributes` is `false`. Make sure tests still cover this case (you can override feature flag in tests\u2014see existing tests concerning feature flags for how to do it).\r\n* Add new behavior of falling back to `setAttribute` for any unknown properties (rather than skipping them like we do now). Add tests for it. Those tests shouldn\u2019t need to touch the feature flag (since it\u2019s the new default behavior). Make sure this works both for SVG and HTML.\r\n* Make sure Fiber tests pass (when you create a PR, there are instructions on running them).\r\n* This might affect server rendering test suite previously added by @aickin. You might need to change those tests to verify the new behavior. It\u2019s fine to only verify the *new* behavior there (with flag set to `true`) since we don\u2019t use server rendering ourselves.\r\n* Good point from @syranide: https://github.com/facebook/react/issues/9477#issuecomment-296170676. We should still warn for known attributes that are miscapitalized. (It\u2019s fine if that\u2019s a different warning message than the one behind the flag.)\r\n* Send the PR!\r\n\r\nPlease let me know if you\u2019d like to take this. It could turn out a little complicated (there won\u2019t be a *lot* of guidance from us on this so we probably can\u2019t coach a completely new contributor for this task). But if you sent a PR or two to React, you should be able to do it.\r\n\r\n--\r\n\r\n## Update: @nhunzaker already started a PR on this a while back (https://github.com/facebook/react/pull/7311) and might be able to rebase it. Let\u2019s discuss the plan more in more specifics below (https://github.com/facebook/react/issues/9477#issuecomment-296179889).",
        "remove_template_description": "We are currently warning about \u201cunknown properties\u201d in the DOM.  For example if you render:    ```js  <div foo=\"bar\" />  ```    you\u2019re going to see a warning from React, and `foo` won\u2019t actually turn up in the DOM.    People have wanted support for custom attributes since forever: https://github.com/facebook/react/issues/140. Now that we've actually been warning for a whole release, I think it's a good time to flip this behavior, and to set any unknown attributes on the DOM instead of skipping them.    So the goal is that you would actually see `<div foo=\"bar\" />` in your DOM.    There is just one caveat: we still haven't updated all FB callsites to fix this warning. Ideally we want to stay synced with open source version of React, but I don't want React 16 to be delayed because of this, nor do I want delaying this change until React 17. So I think we should bite the bullet, introduce an [internal feature flag](https://github.com/facebook/react/blob/master/src/renderers/dom/shared/ReactDOMFeatureFlags.js) that will differ for our FB builds, and enable the new behavior in the open source version. Some time during React 16 we\u2019ll finish updating our code, and remove the conditional code path.    I don\u2019t think anybody on the team has time to work on this right now, so I\u2019d love this to be a community contribution. Requirements as I see them:    * Introduce a new feature flag to `ReactDOMFeatureFlags`. Something like `shouldSetCustomAttributes`. Set it to `true`.  * Keep the warning about unknown DOM props but only enable it if `shouldSetCustomAttributes` is `false`. Make sure tests still cover this case (you can override feature flag in tests\u2014see existing tests concerning feature flags for how to do it).  * Add new behavior of falling back to `setAttribute` for any unknown properties (rather than skipping them like we do now). Add tests for it. Those tests shouldn\u2019t need to touch the feature flag (since it\u2019s the new default behavior). Make sure this works both for SVG and HTML.  * Make sure Fiber tests pass (when you create a PR, there are instructions on running them).  * This might affect server rendering test suite previously added by @aickin. You might need to change those tests to verify the new behavior. It\u2019s fine to only verify the *new* behavior there (with flag set to `true`) since we don\u2019t use server rendering ourselves.  * Good point from @syranide: https://github.com/facebook/react/issues/9477#issuecomment-296170676. We should still warn for known attributes that are miscapitalized. (It\u2019s fine if that\u2019s a different warning message than the one behind the flag.)  * Send the PR!    Please let me know if you\u2019d like to take this. It could turn out a little complicated (there won\u2019t be a *lot* of guidance from us on this so we probably can\u2019t coach a completely new contributor for this task). But if you sent a PR or two to React, you should be able to do it.    --    ## Update: @nhunzaker already started a PR on this a while back (https://github.com/facebook/react/pull/7311) and might be able to rebase it. Let\u2019s discuss the plan more in more specifics below (https://github.com/facebook/react/issues/9477#issuecomment-296179889)."
    },
    {
        "issue_id": 222136519,
        "title": "Show a warning when value is provided to a checkbox input",
        "label": [
            "Type: Enhancement",
            "Component: DOM",
            "Resolution: Stale"
        ],
        "date": "2017-04-17T13:52:16Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature\r\n\r\n**What is the current behavior?**\r\n\r\nA checkbox input can have a `value` prop which is most likely ignored (it should be `checked`).\r\n\r\n**What is the expected behavior?**\r\n\r\nI think we should throw a warning if a user provides a `value` instead of `checked` to a `<input type=\"checkbox\" />`.",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**    Feature    **What is the current behavior?**    A checkbox input can have a `value` prop which is most likely ignored (it should be `checked`).    **What is the expected behavior?**    I think we should throw a warning if a user provides a `value` instead of `checked` to a `<input type=\"checkbox\" />`."
    },
    {
        "issue_id": 217300573,
        "title": "Stop masking context",
        "label": [
            "Type: Enhancement"
        ],
        "date": "2017-03-27T16:22:58Z",
        "status": "closed",
        "description": "\r\n*Feature*\r\n\r\nReturn all contextProps available via a wildcard prop, this would be helpful for those who want to do `shouldComponentUpdate` comparisons with props, state, **and** context.\r\n\r\nPossible solutions\r\n```\r\nstatic contextTypes = true;\r\n// or\r\nstatic contextTypes = /.*/;\r\n// or\r\nstatic contextTypes = {\r\n  __all: true\r\n}\r\n```",
        "remove_template_description": "*Feature*    Return all contextProps available via a wildcard prop, this would be helpful for those who want to do `shouldComponentUpdate` comparisons with props, state, **and** context.    Possible solutions  ```  static contextTypes = true;  // or  static contextTypes = /.*/;  // or  static contextTypes = {    __all: true  }  ```"
    },
    {
        "issue_id": 213784260,
        "title": "Warn about overwriting React component's instance property `updater`",
        "label": [
            "Type: Enhancement",
            "Difficulty: starter"
        ],
        "date": "2017-03-13T14:30:50Z",
        "status": "closed",
        "description": "**Do you want to request a *feature* or report a *bug*?**\r\n*feature*\r\n\r\n**What is the current behavior?**\r\nReact component silently overwrites instance property `updater`.\r\n\r\n```js\r\n/**\r\n * Base class helpers for the updating state of a component.\r\n */\r\nfunction ReactComponent(props, context, updater) {\r\n  this.props = props;\r\n  this.context = context;\r\n  this.refs = emptyObject;\r\n  // We initialize the default updater but the real one gets injected by the\r\n  // renderer.\r\n  this.updater = updater || ReactNoopUpdateQueue;\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\nIt would be very useful to raise a warning in DEV mode for such a case.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact v15.4.2\r\n\r\n**Did this work in previous versions of React?** Yes\r\n",
        "remove_template_description": "**Do you want to request a *feature* or report a *bug*?**  *feature*    **What is the current behavior?**  React component silently overwrites instance property `updater`.    ```js  /**   * Base class helpers for the updating state of a component.   */  function ReactComponent(props, context, updater) {    this.props = props;    this.context = context;    this.refs = emptyObject;    // We initialize the default updater but the real one gets injected by the    // renderer.    this.updater = updater || ReactNoopUpdateQueue;  }  ```    **What is the expected behavior?**  It would be very useful to raise a warning in DEV mode for such a case.    **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**  React v15.4.2    **Did this work in previous versions of React?** Yes"
    },
    {
        "issue_id": 204208640,
        "title": "Bump fbjs to 0.9.x",
        "label": [
            "Type: Enhancement",
            "Component: Build Infrastructure"
        ],
        "date": "2017-01-31T05:30:53Z",
        "status": "closed",
        "description": "Probably lots of React apps depend on babel-runtime, perhaps directly or maybe indirectly. This can problematic, though, because it can cause such apps to depend on two versions of core-js:\r\n\r\n1. Your babel using React app -> babel-runtime ^6.22.0 -> [core-js ^2.4.0](https://github.com/babel/babel/blob/2104ab6c44e807e50a799f010ba3e896f0c2e54d/packages/babel-runtime/package.json#L9)\r\n2. React -> [fbjs ^0.8.4](https://github.com/facebook/react/blob/59aac010dd049719394c9cc4b70417302ce73c14/packages/react/package.json#L26) -> [core-js ^1.0.0](https://github.com/facebook/fbjs/blob/e13bb5721844bee2afa065321f260355d080bc3f/package.json#L63)\r\n\r\nThese two versions aren't semver compatible, so it means a project that depends on babel-runtime and also React will have two copies of core-js in use. A concrete example of this is a React app that [also depends on Relay](https://github.com/facebook/relay/blob/7d5e9165ede146c91b3f0b6583f28f6687289eeb/package.json#L32). There are probably many other such examples, though. It'd be nice to collapse this dependency into a single version of core-js.\r\n\r\nReact could bump its dependency to the latest fbjs which is [fbjs 0.9.0-alpha.1](https://github.com/facebook/fbjs/blob/master/packages/fbjs/package.json#L61). That's alpha right now, but it's been alpha for 7 months and probably you guys can arrange a stable release if you want to.\r\n\r\nSee also:\r\n\r\n* https://github.com/facebook/fbjs/issues/217\r\n* https://github.com/facebook/relay/issues/1421\r\n",
        "remove_template_description": "Probably lots of React apps depend on babel-runtime, perhaps directly or maybe indirectly. This can problematic, though, because it can cause such apps to depend on two versions of core-js:    1. Your babel using React app -> babel-runtime ^6.22.0 -> [core-js ^2.4.0](https://github.com/babel/babel/blob/2104ab6c44e807e50a799f010ba3e896f0c2e54d/packages/babel-runtime/package.json#L9)  2. React -> [fbjs ^0.8.4](https://github.com/facebook/react/blob/59aac010dd049719394c9cc4b70417302ce73c14/packages/react/package.json#L26) -> [core-js ^1.0.0](https://github.com/facebook/fbjs/blob/e13bb5721844bee2afa065321f260355d080bc3f/package.json#L63)    These two versions aren't semver compatible, so it means a project that depends on babel-runtime and also React will have two copies of core-js in use. A concrete example of this is a React app that [also depends on Relay](https://github.com/facebook/relay/blob/7d5e9165ede146c91b3f0b6583f28f6687289eeb/package.json#L32). There are probably many other such examples, though. It'd be nice to collapse this dependency into a single version of core-js.    React could bump its dependency to the latest fbjs which is [fbjs 0.9.0-alpha.1](https://github.com/facebook/fbjs/blob/master/packages/fbjs/package.json#L61). That's alpha right now, but it's been alpha for 7 months and probably you guys can arrange a stable release if you want to.    See also:    * https://github.com/facebook/fbjs/issues/217  * https://github.com/facebook/relay/issues/1421"
    },
    {
        "issue_id": 199579632,
        "title": "Delimit dynamic part of the warning messages with newlines",
        "label": [
            "Type: Enhancement"
        ],
        "date": "2017-01-09T15:28:37Z",
        "status": "closed",
        "description": "As proposed in https://github.com/facebook/react/pull/8495#issuecomment-271311978, I think we should find the warnings where we add a dynamic part to the end (like `\"Check the render method of <...>\"`) and delimit it with two newlines. This way it\u2019s much easier to recognize in the middle of a bunch of errors:\r\n\r\n![](https://cloud.githubusercontent.com/assets/810438/21771524/9b3aeccc-d67f-11e6-8f5d-dfe0dd195d2f.png)\r\n\r\nThis is a good first issue to contribute. You would need to find `warning()` calls that include additional info like `Check the render method of` and add a couple of newlines. You'd also need to change the tests in case they fail.",
        "remove_template_description": "As proposed in https://github.com/facebook/react/pull/8495#issuecomment-271311978, I think we should find the warnings where we add a dynamic part to the end (like `\"Check the render method of <...>\"`) and delimit it with two newlines. This way it\u2019s much easier to recognize in the middle of a bunch of errors:    ![](https://cloud.githubusercontent.com/assets/810438/21771524/9b3aeccc-d67f-11e6-8f5d-dfe0dd195d2f.png)    This is a good first issue to contribute. You would need to find `warning()` calls that include additional info like `Check the render method of` and add a couple of newlines. You'd also need to change the tests in case they fail."
    },
    {
        "issue_id": 198901641,
        "title": "Native event.stopPropagation outside of React root cuts out React events",
        "label": [
            "Type: Enhancement"
        ],
        "date": "2017-01-05T08:34:37Z",
        "status": "closed",
        "description": "We need to host a standalone React component (DraftJS editor) inside a HTML5 application which will run on other JS framework, or even plain JS or jQuery.\r\nThe code of the application is beyond our control, we are just a vendor of a component which adds some content, part of which is this React-based editor.\r\n\r\nAnyway, the most important part is that we need to add the component with the following code to an existing DIV.\r\n\r\n```\r\nconst editor = ReactDOM.render(\r\n    React.createElement(\r\n      EditorComponent,\r\n      props\r\n    ),\r\n    divElem\r\n  );\r\n```\r\n\r\nEditorComponent is a regular React component with some onClick events attached to its content (primarily toolbar buttons for the editor).\r\n\r\nI learned that React event model and its bubbling executes independently after the event bubbles all the way up to the document, and that if ev.stopPropagation() is called on native event, React events won't execute at all.\r\nThat is understandable for situations where document contains only the React app / component at its root and no other content, meaning you have control over all events on the page from React code.\r\n\r\nHowever, when React component is just a small fraction of the entire page, it may be severely influenced by the rest of the page.\r\nThe problem is that any event handling code above the component which calls ev.stopPropagation() cuts of the events of that smaller fraction, even that the event originated from the React component scope.\r\nThat influencing code could very well be just some jQuery plugin, so even author of the page may not be able to rewrite their code for some special event handling.\r\n\r\nHere is a fiddle to demonstrate that: [https://jsfiddle.net/martinh_kentico/kept9anh/3/](https://jsfiddle.net/martinh_kentico/kept9anh/3/)\r\n\r\nI believe that the point where the event chain breaks, allowing React to execute its events, should be the root element of React component, rather than the whole document.\r\nThis way, React root element could be considered an isolation edge of the React application / component.\r\n\r\n![reactevents](https://cloud.githubusercontent.com/assets/11004903/21673497/7d6a11b8-d329-11e6-9642-9d7427331fb1.png)\r\n\r\nI tracked the React event registration down to function ReactDOMComponent.ensureListeningTo(...) where I found the following code:\r\n\r\n```\r\n  var doc = isDocumentFragment ? containerInfo._node : containerInfo._ownerDocument;\r\n  listenTo(registrationName, doc);\r\n```\r\n  \r\nI tried to change `containerInfo._ownerDocument` to `containerInfo._node` to register the React event chain to the root of the React container, and tried it for several basic events (onClick, onMouseDown/Up) and it seems working for us as expected.\r\nReact events are not influenced by stopping propagation at the native events outside of React component root, so the two differently implemented parts of the application can coexist in peace.\r\n\r\nI am not sure why _ownerDocument was chosen over _node in the implementation and if changing it to _node could break something important.\r\n\r\nPlease advise if the proposed solution seems viable (in that case consider a change to that), or for what reasons you wouldn't recommend it.",
        "remove_template_description": "We need to host a standalone React component (DraftJS editor) inside a HTML5 application which will run on other JS framework, or even plain JS or jQuery.  The code of the application is beyond our control, we are just a vendor of a component which adds some content, part of which is this React-based editor.    Anyway, the most important part is that we need to add the component with the following code to an existing DIV.    ```  const editor = ReactDOM.render(      React.createElement(        EditorComponent,        props      ),      divElem    );  ```    EditorComponent is a regular React component with some onClick events attached to its content (primarily toolbar buttons for the editor).    I learned that React event model and its bubbling executes independently after the event bubbles all the way up to the document, and that if ev.stopPropagation() is called on native event, React events won't execute at all.  That is understandable for situations where document contains only the React app / component at its root and no other content, meaning you have control over all events on the page from React code.    However, when React component is just a small fraction of the entire page, it may be severely influenced by the rest of the page.  The problem is that any event handling code above the component which calls ev.stopPropagation() cuts of the events of that smaller fraction, even that the event originated from the React component scope.  That influencing code could very well be just some jQuery plugin, so even author of the page may not be able to rewrite their code for some special event handling.    Here is a fiddle to demonstrate that: [https://jsfiddle.net/martinh_kentico/kept9anh/3/](https://jsfiddle.net/martinh_kentico/kept9anh/3/)    I believe that the point where the event chain breaks, allowing React to execute its events, should be the root element of React component, rather than the whole document.  This way, React root element could be considered an isolation edge of the React application / component.    ![reactevents](https://cloud.githubusercontent.com/assets/11004903/21673497/7d6a11b8-d329-11e6-9642-9d7427331fb1.png)    I tracked the React event registration down to function ReactDOMComponent.ensureListeningTo(...) where I found the following code:    ```    var doc = isDocumentFragment ? containerInfo._node : containerInfo._ownerDocument;    listenTo(registrationName, doc);  ```      I tried to change `containerInfo._ownerDocument` to `containerInfo._node` to register the React event chain to the root of the React container, and tried it for several basic events (onClick, onMouseDown/Up) and it seems working for us as expected.  React events are not influenced by stopping propagation at the native events outside of React component root, so the two differently implemented parts of the application can coexist in peace.    I am not sure why _ownerDocument was chosen over _node in the implementation and if changing it to _node could break something important.    Please advise if the proposed solution seems viable (in that case consider a change to that), or for what reasons you wouldn't recommend it."
    },
    {
        "issue_id": 193402062,
        "title": "Add component stack to the contentEditable warning",
        "label": [
            "Type: Enhancement",
            "Component: DOM"
        ],
        "date": "2016-12-05T03:10:57Z",
        "status": "closed",
        "description": "*feature*\r\n\r\n>Warning: A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.\r\n\r\nIt would help heaps if I would know _which_ component is causing this.",
        "remove_template_description": "*feature*    >Warning: A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.    It would help heaps if I would know _which_ component is causing this."
    },
    {
        "issue_id": 183867278,
        "title": "[Fiber] Formalize States",
        "label": [
            "Type: Enhancement",
            "Component: Reconciler",
            "React Core Team"
        ],
        "date": "2016-10-19T05:13:46Z",
        "status": "open",
        "description": "In Fiber there are a number of states that a component can be in. However, it is not formalized in the code right now. Instead, the state is inferred. This leads to hard to follow code. Instead we can organize the code in terms of explicit states - which is what the original prototype did.\n\nBefore componentDidMount (i.e. `current === null`):\n- Never begun.\n- Have been begun before but never completed.\n- Have been completed before, not committed, but hasn't begun this time around.\n- Begun but not yet completed.\n- Completed but not yet committed.\n\nAfter componentDidMount (i.e. `current !== null`):\n- Haven't begun an update yet\n- Have been begun before but never completed.\n- An update have been completed before, not committed, but hasn't begun this update.\n- Begun update but not yet completed.\n- Completed update but not yet committed.\n\nThe \"children\" set of a component also have some states:\n- Never reconciled.\n- The current set last committed.\n- A previously reconciled set that hasn't committed yet.\n",
        "remove_template_description": "In Fiber there are a number of states that a component can be in. However, it is not formalized in the code right now. Instead, the state is inferred. This leads to hard to follow code. Instead we can organize the code in terms of explicit states - which is what the original prototype did.  Before componentDidMount (i.e. `current === null`): - Never begun. - Have been begun before but never completed. - Have been completed before, not committed, but hasn't begun this time around. - Begun but not yet completed. - Completed but not yet committed.  After componentDidMount (i.e. `current !== null`): - Haven't begun an update yet - Have been begun before but never completed. - An update have been completed before, not committed, but hasn't begun this update. - Begun update but not yet completed. - Completed update but not yet committed.  The \"children\" set of a component also have some states: - Never reconciled. - The current set last committed. - A previously reconciled set that hasn't committed yet."
    },
    {
        "issue_id": 181569088,
        "title": "[Fiber] Spill-over from child reconciliation",
        "label": [
            "Type: Enhancement",
            "Component: Reconciler"
        ],
        "date": "2016-10-07T01:53:54Z",
        "status": "closed",
        "description": "This is spill-over from #7707 that I don't plan on doing in the initial batch.\r\n- [ ] Fix text node merging edge case... Search forward to find the next sibling, swap out the end of the text node to the sum of the previous value of the siblings. This trick lets us avoid back-references.\r\n- [ ] Have tag include children updated so that you can recalculate all children if needed. E.g. coroutines. Alternatively, pass the nearest host or coroutine down the tree so that it can be quickly flagged as child changed and insert/moves can be avoided to be added to the side-effect list for coroutines. The second option is probably better.\r\n- [ ] Possibly use two side-effect lists so that two passes are not needed and forward order is possible.\r\n- [x] Remove the notion of `output`? Unnecessary extra traversal and requires duck typing to know which is terminal.\r\n- [ ] Reconsider if we need backpointers. There are several optimizations that are possible with them but uses more memory.\r\n",
        "remove_template_description": "This is spill-over from #7707 that I don't plan on doing in the initial batch.  - [ ] Fix text node merging edge case... Search forward to find the next sibling, swap out the end of the text node to the sum of the previous value of the siblings. This trick lets us avoid back-references.  - [ ] Have tag include children updated so that you can recalculate all children if needed. E.g. coroutines. Alternatively, pass the nearest host or coroutine down the tree so that it can be quickly flagged as child changed and insert/moves can be avoided to be added to the side-effect list for coroutines. The second option is probably better.  - [ ] Possibly use two side-effect lists so that two passes are not needed and forward order is possible.  - [x] Remove the notion of `output`? Unnecessary extra traversal and requires duck typing to know which is terminal.  - [ ] Reconsider if we need backpointers. There are several optimizations that are possible with them but uses more memory."
    },
    {
        "issue_id": 169199362,
        "title": "Freeze classes and defaultProps in DEV mode",
        "label": [
            "Type: Enhancement",
            "Component: Core Utilities",
            "React Core Team"
        ],
        "date": "2016-08-03T18:23:45Z",
        "status": "closed",
        "description": "To make compiler optimizations around classes and inlining defaultProps we need to know that they don't get mutated. This escape analysis can be difficult to do in a JS compiler so we should start enforce it so we don't have to rely on escape analysis.\n\n``` js\nconst type = element.type;\nif (typeof type === 'function' && !type.wasTaggedReactComponent) {\n  Object.defineProperty(type, 'wasTaggedReactComponent', { value: true });\n  Object.defineProperty(type, 'defaultProps', { writable: false, configurable: false });\n  Object.defineProperty(type.prototype, 'render', { writable: false, configurable: false });\n  Object.defineProperty(type.prototype, 'componentDidUpdate', { writable: false, configurable: false });\n  ...\n  Object.freeze(type);\n  Object.freeze(type.defaultProps);\n  Object.freeze(type.prototype);\n}\n```\n\nWe can also make them getters/setters so that we can make nice warning messages for sets. Although we should weigh this against slowing down DEV mode.\n\nIf a property exists it should preserve its enumerability. If a property doesn't exist it is still ok to attach a getter/setter as long as it is non-enumerable.\n",
        "remove_template_description": "To make compiler optimizations around classes and inlining defaultProps we need to know that they don't get mutated. This escape analysis can be difficult to do in a JS compiler so we should start enforce it so we don't have to rely on escape analysis.  ``` js const type = element.type; if (typeof type === 'function' && !type.wasTaggedReactComponent) {   Object.defineProperty(type, 'wasTaggedReactComponent', { value: true });   Object.defineProperty(type, 'defaultProps', { writable: false, configurable: false });   Object.defineProperty(type.prototype, 'render', { writable: false, configurable: false });   Object.defineProperty(type.prototype, 'componentDidUpdate', { writable: false, configurable: false });   ...   Object.freeze(type);   Object.freeze(type.defaultProps);   Object.freeze(type.prototype); } ```  We can also make them getters/setters so that we can make nice warning messages for sets. Although we should weigh this against slowing down DEV mode.  If a property exists it should preserve its enumerability. If a property doesn't exist it is still ok to attach a getter/setter as long as it is non-enumerable."
    },
    {
        "issue_id": 168534903,
        "title": "Attach Stack at setState Calls in DEV Mode",
        "label": [
            "Type: Enhancement",
            "Component: Core Utilities",
            "React Core Team"
        ],
        "date": "2016-07-31T19:52:24Z",
        "status": "open",
        "description": "We have a queue for state transitions. There is a natural place for a `new Error()` stack frame to be stored there.\n\nWe could use this information to work our way back from errors to show information about which `setState` call was the source of the error.\n\nBecause of batching, it is not always possible to make the correct attribution. It could be one of several possible sources.\n\n(Specifically I'd like to use this in Fiber when the starvation protection kicks in. We can show which state transition was kept getting deferred due to higher priority work.)\n",
        "remove_template_description": "We have a queue for state transitions. There is a natural place for a `new Error()` stack frame to be stored there.  We could use this information to work our way back from errors to show information about which `setState` call was the source of the error.  Because of batching, it is not always possible to make the correct attribution. It could be one of several possible sources.  (Specifically I'd like to use this in Fiber when the starvation protection kicks in. We can show which state transition was kept getting deferred due to higher priority work.)"
    },
    {
        "issue_id": 166425356,
        "title": "Make createElement(undefined) warning more descriptive",
        "label": [
            "Type: Enhancement",
            "Difficulty: starter"
        ],
        "date": "2016-07-19T20:16:55Z",
        "status": "closed",
        "description": "**Update: claimed by @jin**\n\nThis is what I see when I mistype an import:\n\n<img width=\"768\" alt=\"screen shot 2016-07-19 at 21 12 01\" src=\"https://cloud.githubusercontent.com/assets/810438/16964870/7392ba8c-4df5-11e6-8af6-7d00181e5089.png\">\n\nThis is not very useful.\n\nWhen `type` is `undefined`, we should provide a better message. In 95% of cases it is caused by an invalid import. We should create a page explaining common cases how this could happen (e.g. mismatching default/named export, forgetting to export the component, or importing a non-existing named export), and link to that page from the warning.\n",
        "remove_template_description": "**Update: claimed by @jin**  This is what I see when I mistype an import:  <img width=\"768\" alt=\"screen shot 2016-07-19 at 21 12 01\" src=\"https://cloud.githubusercontent.com/assets/810438/16964870/7392ba8c-4df5-11e6-8af6-7d00181e5089.png\">  This is not very useful.  When `type` is `undefined`, we should provide a better message. In 95% of cases it is caused by an invalid import. We should create a page explaining common cases how this could happen (e.g. mismatching default/named export, forgetting to export the component, or importing a non-existing named export), and link to that page from the warning."
    },
    {
        "issue_id": 163060189,
        "title": "Group warnings for unknown DOM properties",
        "label": [
            "Type: Enhancement",
            "Difficulty: starter"
        ],
        "date": "2016-06-30T01:03:13Z",
        "status": "closed",
        "description": "I just ran [React Bootstrap doc page](http://react-bootstrap.github.io/components.html) on master and saw a ton of warnings from #6800:\n\n![jun 30 2016 01 55](https://cloud.githubusercontent.com/assets/810438/16473598/90585b8e-3e66-11e6-8e9e-7187935937dd.gif)\n\nThat page is really long so maybe it\u2019s an edge case, but at the very least I think we should group props from the same element into a single warning. For example, these warnings could become one:\n\n<img width=\"993\" alt=\"screen shot 2016-06-30 at 01 53 11\" src=\"https://cloud.githubusercontent.com/assets/810438/16473610/a5f6df06-3e66-11e6-964c-be482fdfeb27.png\">\n",
        "remove_template_description": "I just ran [React Bootstrap doc page](http://react-bootstrap.github.io/components.html) on master and saw a ton of warnings from #6800:  ![jun 30 2016 01 55](https://cloud.githubusercontent.com/assets/810438/16473598/90585b8e-3e66-11e6-8e9e-7187935937dd.gif)  That page is really long so maybe it\u2019s an edge case, but at the very least I think we should group props from the same element into a single warning. For example, these warnings could become one:  <img width=\"993\" alt=\"screen shot 2016-06-30 at 01 53 11\" src=\"https://cloud.githubusercontent.com/assets/810438/16473610/a5f6df06-3e66-11e6-964c-be482fdfeb27.png\">"
    },
    {
        "issue_id": 162505660,
        "title": "Deprecate calling PropTypes validators in production",
        "label": [
            "Type: Enhancement",
            "Difficulty: starter"
        ],
        "date": "2016-06-27T17:31:49Z",
        "status": "closed",
        "description": "We want to strip the code _that implements PropTypes validation functions_ in production. This doesn\u2019t mean `React.PropTypes` won\u2019t exist\u2014just that the functions will throw in production every time.\n\nI did an initial attempt at this in #6401 but it\u2019s too much of a change because people might be calling `PropTypes` in production right now for introspection, and we\u2019d need to **deprecate calling them in production** before actually turning them into shims that throw errors.\n\n@spicyj [suggested](https://github.com/facebook/react/pull/6401#issuecomment-224386567) a good first step: we should pass an extra argument to propType checkers. We would warn if that argument is not passed (or, if passed, does not match our \u201csecret\u201d value). This way we can detect if somebody manually calls `PropTypes` validators, and warn with `console.error` in production.\n\nIf you\u2019d like to work on this, please comment here so we don\u2019t have many people implementing this at the same time. You would need to:\n1. Pass an extra argument to prop type checkers.\n2. In production, warn inside the prop type checkers if they don\u2019t receive the expected extra argument.\n3. The warning should say something like `You are manually calling React.PropTypes validation functions in a production build. This is deprecated and will not work in the next major version.`\n4. Don\u2019t forget to write tests. You can peek at #6401 to see how to write tests that simulate production environment.\n5. Send a PR and we\u2019ll discuss further!\n",
        "remove_template_description": "We want to strip the code _that implements PropTypes validation functions_ in production. This doesn\u2019t mean `React.PropTypes` won\u2019t exist\u2014just that the functions will throw in production every time.  I did an initial attempt at this in #6401 but it\u2019s too much of a change because people might be calling `PropTypes` in production right now for introspection, and we\u2019d need to **deprecate calling them in production** before actually turning them into shims that throw errors.  @spicyj [suggested](https://github.com/facebook/react/pull/6401#issuecomment-224386567) a good first step: we should pass an extra argument to propType checkers. We would warn if that argument is not passed (or, if passed, does not match our \u201csecret\u201d value). This way we can detect if somebody manually calls `PropTypes` validators, and warn with `console.error` in production.  If you\u2019d like to work on this, please comment here so we don\u2019t have many people implementing this at the same time. You would need to: 1. Pass an extra argument to prop type checkers. 2. In production, warn inside the prop type checkers if they don\u2019t receive the expected extra argument. 3. The warning should say something like `You are manually calling React.PropTypes validation functions in a production build. This is deprecated and will not work in the next major version.` 4. Don\u2019t forget to write tests. You can peek at #6401 to see how to write tests that simulate production environment. 5. Send a PR and we\u2019ll discuss further!"
    },
    {
        "issue_id": 158449680,
        "title": "Should React warn when controlled <select> components have duplicate values?",
        "label": [
            "Type: Enhancement",
            "Component: DOM",
            "Resolution: Stale"
        ],
        "date": "2016-06-03T20:36:36Z",
        "status": "closed",
        "description": "Consider the following example (live at http://www.webpackbin.com/Vk0Q_FqmZ with React 15.0.1):\n\n``` js\nconst MySelect = (props) => (\n  <select value={this.props.value} onChange={this.props.onChange}>\n    <option value=\"fruit\">banana</option>\n    <option value=\"vegetable\">broccoli</option>\n    <option value=\"fruit\">orange</option>\n    <option value=\"vegetable\">tomato</option>\n  </select>\n);\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {}\n    this.onSelectChange = this.onSelectChange.bind(this)\n  }\n\n  onSelectChange(e) {\n    this.setState({ selectedValue: e.target.value })\n  }\n\n  render() {\n    return <MySelect \n      value={this.state.selectedValue} \n      onChange={this.onSelectChange}\n    />\n  }\n}\n```\n\nHTML itself doesn't seem to have any problems with duplicate values in the `<select>` tag. As you can see in the example above, there are semantically valid reasons you might want to do this.\n\nBut this controlled component example makes it impossible to select e.g. \"orange\" or \"tomato\": the selection will be forced to the first matching value.  \n\nI thought about a solution that stores both the `selectedValue` and the `selectedIndex`, but react-dom's `<select>` does not take any sort of index prop, so I'd have to manipulate the internal DOM node, which I'm sure is bad form.  \n\nReact _could_ be enhanced to take a `selectedIndex`, but I foresee problems with single source of truth.\n\nThe fruit/vegetable example is a bit contrived, and there may not be many real-world scenarios you would want to do this in. My gut feeling is this should be a warning so developers (like me) don't paint themselves into a corner trying to support this case.  \n",
        "remove_template_description": "Consider the following example (live at http://www.webpackbin.com/Vk0Q_FqmZ with React 15.0.1):  ``` js const MySelect = (props) => (   <select value={this.props.value} onChange={this.props.onChange}>     <option value=\"fruit\">banana</option>     <option value=\"vegetable\">broccoli</option>     <option value=\"fruit\">orange</option>     <option value=\"vegetable\">tomato</option>   </select> );  class App extends React.Component {   constructor() {     super()     this.state = {}     this.onSelectChange = this.onSelectChange.bind(this)   }    onSelectChange(e) {     this.setState({ selectedValue: e.target.value })   }    render() {     return <MySelect        value={this.state.selectedValue}        onChange={this.onSelectChange}     />   } } ```  HTML itself doesn't seem to have any problems with duplicate values in the `<select>` tag. As you can see in the example above, there are semantically valid reasons you might want to do this.  But this controlled component example makes it impossible to select e.g. \"orange\" or \"tomato\": the selection will be forced to the first matching value.    I thought about a solution that stores both the `selectedValue` and the `selectedIndex`, but react-dom's `<select>` does not take any sort of index prop, so I'd have to manipulate the internal DOM node, which I'm sure is bad form.    React _could_ be enhanced to take a `selectedIndex`, but I foresee problems with single source of truth.  The fruit/vegetable example is a bit contrived, and there may not be many real-world scenarios you would want to do this in. My gut feeling is this should be a warning so developers (like me) don't paint themselves into a corner trying to support this case."
    },
    {
        "issue_id": 152667138,
        "title": "RFC: Configure Warning Levels Using ENV Variable",
        "label": [
            "Type: Enhancement",
            "React Core Team"
        ],
        "date": "2016-05-02T23:17:24Z",
        "status": "open",
        "description": "Would it be feasible to specify the version of warnings you want through a static environment variable?\n\nThat would silence new warnings so that you can safely update minor versions without worrying about warning spew.\n\nDynamic configuration creates stateful shared module dependencies which we're very close to getting rid of for the isomorphic package (ReactCurrentOwner being the last one).\n",
        "remove_template_description": "Would it be feasible to specify the version of warnings you want through a static environment variable?  That would silence new warnings so that you can safely update minor versions without worrying about warning spew.  Dynamic configuration creates stateful shared module dependencies which we're very close to getting rid of for the isomorphic package (ReactCurrentOwner being the last one)."
    },
    {
        "issue_id": 151451295,
        "title": "Change how ReactPerf.printWasted() and ReactPerf.printOperations() work",
        "label": [
            "Type: Enhancement"
        ],
        "date": "2016-04-27T18:03:05Z",
        "status": "closed",
        "description": "#6046 is a rewrite of ReactPerf that aims to provide the existing features of ReactPerf in a more testable and future-proof way. However there are a few things that are out of scope of #6046 but are important to fix later after it is shipped.\n\nToday, `printOperations()` prints informations about the DOM \u201cnative\u201d events that supposedly happened. Later, this information is used by `printWasted()` in the following way: if a component was rendered but no DOM events on its children were emitted during a batch, the render is considered wasted.\n\nThere are a few problems with this:\n- As discussed in https://github.com/facebook/react/pull/6612, we overemphasize the overhead of DOM operations which are actually often negligible. \n- With incremental reconciliation (#6170), the assumption that DOM operations happen in the same batch as rendering might become incorrect.\n- We might want to get rid of relying on batches at all: https://github.com/facebook/react/pull/6046#discussion_r61482538.\n\nI don\u2019t know what would be a good solution considering these constraints. People widely consider `printWasted()` the most useful `ReactPerf` method because it helps finding `shouldComponentUpdate()` sweet spots. If we remove its reliance on DOM, we should offer an equivalent (e.g. deeply comparing React elements?) that is just as useful but more friendly to incremental reconciliation.\n",
        "remove_template_description": "#6046 is a rewrite of ReactPerf that aims to provide the existing features of ReactPerf in a more testable and future-proof way. However there are a few things that are out of scope of #6046 but are important to fix later after it is shipped.  Today, `printOperations()` prints informations about the DOM \u201cnative\u201d events that supposedly happened. Later, this information is used by `printWasted()` in the following way: if a component was rendered but no DOM events on its children were emitted during a batch, the render is considered wasted.  There are a few problems with this: - As discussed in https://github.com/facebook/react/pull/6612, we overemphasize the overhead of DOM operations which are actually often negligible.  - With incremental reconciliation (#6170), the assumption that DOM operations happen in the same batch as rendering might become incorrect. - We might want to get rid of relying on batches at all: https://github.com/facebook/react/pull/6046#discussion_r61482538.  I don\u2019t know what would be a good solution considering these constraints. People widely consider `printWasted()` the most useful `ReactPerf` method because it helps finding `shouldComponentUpdate()` sweet spots. If we remove its reliance on DOM, we should offer an equivalent (e.g. deeply comparing React elements?) that is just as useful but more friendly to incremental reconciliation."
    },
    {
        "issue_id": 145291874,
        "title": "Deprecate return value of `ReactDOM.render()`",
        "label": [
            "Type: Enhancement",
            "Component: DOM",
            "Resolution: Stale"
        ],
        "date": "2016-04-01T21:43:34Z",
        "status": "closed",
        "description": "This is a tracking issue, because we're not ready to deprecate the return value of `ReactDOM.render()` yet.  This will likely be a longer-term objective (not immediate), but we should have an issue to reference as we start to get the ball rolling.\n\nReasoning: We are working towards a new incremental reconciler, which means that a render may not be complete prior to `ReactDOM.render()` returning.  For anyone relying on the return value of `ReactDOM.render()`, there would be a race condition where the returned instance is potentially not fully mounted.  Safe-looking code might work 99% of the time, but fail 1% of the time, at the sole discretion of the scheduler.  To be clear: this is not an issue today, but will become an issue once we start utilizing an incremental renderer, iff people rely on the return value.\n\nAs we prepare for the new reconciliation algorithm, we should start encouraging people should start avoiding the return value of `ReactDOM.render`.  People should, instead, attach a callback ref to their root component when rendering the component, thus allowing them to get a reference to the instance after mounting is complete.\n\nFirst step in this process is to update the documentation to state that the return value of `ReactDOM.render` is legacy, and that people should attach a ref instead (similar to what we did for string refs).\n",
        "remove_template_description": "This is a tracking issue, because we're not ready to deprecate the return value of `ReactDOM.render()` yet.  This will likely be a longer-term objective (not immediate), but we should have an issue to reference as we start to get the ball rolling.  Reasoning: We are working towards a new incremental reconciler, which means that a render may not be complete prior to `ReactDOM.render()` returning.  For anyone relying on the return value of `ReactDOM.render()`, there would be a race condition where the returned instance is potentially not fully mounted.  Safe-looking code might work 99% of the time, but fail 1% of the time, at the sole discretion of the scheduler.  To be clear: this is not an issue today, but will become an issue once we start utilizing an incremental renderer, iff people rely on the return value.  As we prepare for the new reconciliation algorithm, we should start encouraging people should start avoiding the return value of `ReactDOM.render`.  People should, instead, attach a callback ref to their root component when rendering the component, thus allowing them to get a reference to the instance after mounting is complete.  First step in this process is to update the documentation to state that the return value of `ReactDOM.render` is legacy, and that people should attach a ref instead (similar to what we did for string refs)."
    },
    {
        "issue_id": 143754689,
        "title": "Make ResponderEventPlugin cross-platform",
        "label": [
            "Type: Enhancement",
            "Component: DOM"
        ],
        "date": "2016-03-26T22:20:18Z",
        "status": "closed",
        "description": "@dieppe worked on making `ResponderEventPlugin` work with DOM in #4303 but this was put on hold.\nAfter #6338 brings all the relevant files into React repo, we can start thinking about it again.\n\nI\u2019m creating this issue to keep track of whether we want this to happen or not, and what is our plan regarding this. If there is a consensus, we can look into rebasing #4303.\n\ncc @sebmarkbage @jordwalke \n",
        "remove_template_description": "@dieppe worked on making `ResponderEventPlugin` work with DOM in #4303 but this was put on hold. After #6338 brings all the relevant files into React repo, we can start thinking about it again.  I\u2019m creating this issue to keep track of whether we want this to happen or not, and what is our plan regarding this. If there is a consensus, we can look into rebasing #4303.  cc @sebmarkbage @jordwalke"
    },
    {
        "issue_id": 132780467,
        "title": "Porting ReactPerf to the new DevTools API",
        "label": [
            "Type: Enhancement"
        ],
        "date": "2016-02-10T18:28:41Z",
        "status": "closed",
        "description": "There are a few concerns that I heard about `ReactPerf`, in the order of importance:\n- (1) It is gated by `__DEV__` but React Native wants to have a way to enable it in production builds and pass the accumulated info into systrace\n- (2) It is often broken by refactoring\n- (3) It appears generic but depends on specific module and method names\n- (4) It has some obscure bugs that are hard to fix because of the coupling\n- (5) The `console.table()` visualization is poor\n- (6) We are working on a new DevTools API so they should align\n\nIf I\u2019m mistaken here, please let me know!\n\nIn #5306, we started introducing a new set of APIs for first-class instrumentation. It makes sense that we transition `ReactPerf` to the new API, and fix some of these issues while we\u2019re at it.\n\nI talked to some\u00a0people on the React Native about this. What I understand so far is:\n### ASAP\n- We want to remove `ReactPerf` function wrapping completely (addresses 2, somewhat mitigates overhead from fixing 1)\n- We want to create a devtool like `ReactDOMDebugTool`, e.g. `ReactPerfTool` (addresses 6)\n- Unlike `ReactDOMDebugTool`, `ReactPerfTool` will _not_ be gated by `__DEV__` (addresses 1)\n- `ReactPerfTool` will have `startMeasurement()` and `endMeasurement()` methods for profiling functions (addresses 1)\n- It can have more granular methods for specific parts of React lifecycle if needed (addresses 2, 3, 5)\n- Calls to `ReactPerfTool` will be gated by a runtime flag, e.g. `ReactPerfTool.isActive` (addresses 1)\n### In the Future\n- Rather than reach out into the profiled functions, `startMeasurement()` will accept arbitrary arguments (addresses 3)\n- We would separate generating user-meaningful data from its accumulation so it would be easy to test (addresses 4)\n- (Bonus) We can use a noop decorator + Babel plugin to insert `if (ReactPerfTool.isActive) ReactPerfTool.startMeasurement()` and `.endMeasurement()` calls (mitigates pain and potential breakage from addressing 1)\n- (Bonus) Rather than `console.table()` API we can provide a component that interprets that data and displays it in an overlay, both on web and native (addresses 5)\n\nThe decorator + Babel plugin part is the one I\u2019m not sure about because it would involve complicating tooling. On the other hand, it will allow adding performance measurement to any functions in the codebase without risking having early `return`s, missing `endMeasurement()` calls, and similar breakage during refactorings.\n\nThe first actionable step, in my opinion, would be to remove the function wrapping and the `__DEV__` gate from the existing `ReactPerf`, and replace `measure()` with explicit `startMeasurement()` and `endMeasurement()` calls gated by `ReactPerf.isActive` wherever it is used.\n\nWe would still pass the function as an argument so we don\u2019t have to rewrite everything at once, but this would give the RN team more freedom, and unlock future refactorings. We can also combine this with introducing decorator + Babel transform if this is the way we want to go, to avoid adding manual `startMeasurement()` and `endMeasurement()` calls all over the place.\n\nDoes this make sense? What have I missed?\n",
        "remove_template_description": "There are a few concerns that I heard about `ReactPerf`, in the order of importance: - (1) It is gated by `__DEV__` but React Native wants to have a way to enable it in production builds and pass the accumulated info into systrace - (2) It is often broken by refactoring - (3) It appears generic but depends on specific module and method names - (4) It has some obscure bugs that are hard to fix because of the coupling - (5) The `console.table()` visualization is poor - (6) We are working on a new DevTools API so they should align  If I\u2019m mistaken here, please let me know!  In #5306, we started introducing a new set of APIs for first-class instrumentation. It makes sense that we transition `ReactPerf` to the new API, and fix some of these issues while we\u2019re at it.  I talked to some\u00a0people on the React Native about this. What I understand so far is: ### ASAP - We want to remove `ReactPerf` function wrapping completely (addresses 2, somewhat mitigates overhead from fixing 1) - We want to create a devtool like `ReactDOMDebugTool`, e.g. `ReactPerfTool` (addresses 6) - Unlike `ReactDOMDebugTool`, `ReactPerfTool` will _not_ be gated by `__DEV__` (addresses 1) - `ReactPerfTool` will have `startMeasurement()` and `endMeasurement()` methods for profiling functions (addresses 1) - It can have more granular methods for specific parts of React lifecycle if needed (addresses 2, 3, 5) - Calls to `ReactPerfTool` will be gated by a runtime flag, e.g. `ReactPerfTool.isActive` (addresses 1) ### In the Future - Rather than reach out into the profiled functions, `startMeasurement()` will accept arbitrary arguments (addresses 3) - We would separate generating user-meaningful data from its accumulation so it would be easy to test (addresses 4) - (Bonus) We can use a noop decorator + Babel plugin to insert `if (ReactPerfTool.isActive) ReactPerfTool.startMeasurement()` and `.endMeasurement()` calls (mitigates pain and potential breakage from addressing 1) - (Bonus) Rather than `console.table()` API we can provide a component that interprets that data and displays it in an overlay, both on web and native (addresses 5)  The decorator + Babel plugin part is the one I\u2019m not sure about because it would involve complicating tooling. On the other hand, it will allow adding performance measurement to any functions in the codebase without risking having early `return`s, missing `endMeasurement()` calls, and similar breakage during refactorings.  The first actionable step, in my opinion, would be to remove the function wrapping and the `__DEV__` gate from the existing `ReactPerf`, and replace `measure()` with explicit `startMeasurement()` and `endMeasurement()` calls gated by `ReactPerf.isActive` wherever it is used.  We would still pass the function as an argument so we don\u2019t have to rewrite everything at once, but this would give the RN team more freedom, and unlock future refactorings. We can also combine this with introducing decorator + Babel transform if this is the way we want to go, to avoid adding manual `startMeasurement()` and `endMeasurement()` calls all over the place.  Does this make sense? What have I missed?"
    },
    {
        "issue_id": 121541132,
        "title": "Way to disable the getInitialState warning in ES6?",
        "label": [
            "Type: Enhancement"
        ],
        "date": "2015-12-10T17:45:29Z",
        "status": "closed",
        "description": "I really like the convenience of the `getInitialState()` API in ES5 react, so I decided to reimplement it in a simple wrapper around `React.Component`, but I get an annoying warning. Is there a way to disable this warning, since I'm doing it intentionally and providing my own functionality?\n",
        "remove_template_description": "I really like the convenience of the `getInitialState()` API in ES5 react, so I decided to reimplement it in a simple wrapper around `React.Component`, but I get an annoying warning. Is there a way to disable this warning, since I'm doing it intentionally and providing my own functionality?"
    },
    {
        "issue_id": 113848829,
        "title": "Prevent a function to be called from within render",
        "label": [
            "Type: Enhancement",
            "Type: Feature Request"
        ],
        "date": "2015-10-28T15:32:12Z",
        "status": "closed",
        "description": "You have a warning in React if you call setState() from within a render method, with the check `ReactCurrentOwner.current == null`. I would like to add this check to other methods of my project because they also trigger rerender or are too expensive.\nThe issue I have is that ReactCurrentOwner is not exposed by React, so how can I achieve that? The current solution I have in mind is to check from the stack trace but that's a lot more expensive than your check so I would prefer if there was something equivalent to your code but from outside React.\n",
        "remove_template_description": "You have a warning in React if you call setState() from within a render method, with the check `ReactCurrentOwner.current == null`. I would like to add this check to other methods of my project because they also trigger rerender or are too expensive. The issue I have is that ReactCurrentOwner is not exposed by React, so how can I achieve that? The current solution I have in mind is to check from the stack trace but that's a lot more expensive than your check so I would prefer if there was something equivalent to your code but from outside React."
    },
    {
        "issue_id": 97950324,
        "title": "Be defensive when calling methods of a SyntheticEvent inside the pool",
        "label": [
            "Type: Enhancement",
            "Difficulty: starter"
        ],
        "date": "2015-07-29T14:35:09Z",
        "status": "closed",
        "description": "As it is known (but [not documented](https://github.com/facebook/react/issues/3657)), React's SyntheticEvent is pooled.\n\nThis is confusing for many users as they don't understand why the event starts to behave strangely when used in an async callback, like inside a `setTimeout`, a `setState` or a `render` callback.\n\nThere has already been an attempt to solve this problem here: https://github.com/facebook/react/pull/1664\n\nThe code of SyntheticEvent's default methods is:\n\n``` javascript\n  preventDefault: function() {\n    this.defaultPrevented = true;\n    var event = this.nativeEvent;\n    if (event.preventDefault) {\n      event.preventDefault();\n    } else {\n      event.returnValue = false;\n    }\n    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;\n  },\n\n  stopPropagation: function() {\n    var event = this.nativeEvent;\n    if (event.stopPropagation) {\n      event.stopPropagation();\n    } else {\n      event.cancelBubble = true;\n    }\n    this.isPropagationStopped = emptyFunction.thatReturnsTrue;\n  },\n```\n\nIt may make sense to be more defensive because calling `event.preventDefault()` on a pooled event will raise `can't call preventDefault on null`.\n\nIt would be more useful to add a check like:\n\n```\nif ( this.nativeEvent ) throw new Error(\"Baaad you are using a pooled event!!!\");\n```\n",
        "remove_template_description": "As it is known (but [not documented](https://github.com/facebook/react/issues/3657)), React's SyntheticEvent is pooled.  This is confusing for many users as they don't understand why the event starts to behave strangely when used in an async callback, like inside a `setTimeout`, a `setState` or a `render` callback.  There has already been an attempt to solve this problem here: https://github.com/facebook/react/pull/1664  The code of SyntheticEvent's default methods is:  ``` javascript   preventDefault: function() {     this.defaultPrevented = true;     var event = this.nativeEvent;     if (event.preventDefault) {       event.preventDefault();     } else {       event.returnValue = false;     }     this.isDefaultPrevented = emptyFunction.thatReturnsTrue;   },    stopPropagation: function() {     var event = this.nativeEvent;     if (event.stopPropagation) {       event.stopPropagation();     } else {       event.cancelBubble = true;     }     this.isPropagationStopped = emptyFunction.thatReturnsTrue;   }, ```  It may make sense to be more defensive because calling `event.preventDefault()` on a pooled event will raise `can't call preventDefault on null`.  It would be more useful to add a check like:  ``` if ( this.nativeEvent ) throw new Error(\"Baaad you are using a pooled event!!!\"); ```"
    },
    {
        "issue_id": 93666932,
        "title": "Keyboard selection doesn't fire onChange for <select> in Firefox",
        "label": [
            "Type: Enhancement",
            "Component: DOM"
        ],
        "date": "2015-07-08T01:17:13Z",
        "status": "closed",
        "description": "Related bug in Bugzilla: https://bugzilla.mozilla.org/show_bug.cgi?id=126379\n\nMy [workaround for this is to use onKeyDown](https://gist.github.com/insin/c2a00a7e85ccfab0e7c7), allowing the selection to change then calling an `onChange` handler manually, but this won't bubble..\n\nIs this something `ChangeEventPlugin` could support?\n",
        "remove_template_description": "Related bug in Bugzilla: https://bugzilla.mozilla.org/show_bug.cgi?id=126379  My [workaround for this is to use onKeyDown](https://gist.github.com/insin/c2a00a7e85ccfab0e7c7), allowing the selection to change then calling an `onChange` handler manually, but this won't bubble..  Is this something `ChangeEventPlugin` could support?"
    },
    {
        "issue_id": 89199826,
        "title": "Use Inline Event Handlers for trapBubbledEventsLocal and the iOS Safari Click Hack",
        "label": [
            "Type: Enhancement",
            "Component: DOM",
            "React Core Team"
        ],
        "date": "2015-06-18T05:00:09Z",
        "status": "open",
        "description": "We currently do a lot of work at the end of mount to find all the nodes and attach listeners after the fact. This is severely impacting initial rendering performance of `<form />`, `<img />` and click handlers.\n\nInstead we can just use inline event handlers in the innerHTML string. For the iOS Safari hack it should be trivial. The handler doesn't even have to do anything.\n\nThe inline event handler would need to either redispatch the event, or call into some other event handler system. Probably a global listeners.\n\n``` js\nwindow._handleReactEvent = ...;\n```\n\n``` html\n<img onload=\"_handleReactEvent(event)\">\n```\n\nSince there could potentially be multiple Reacts, they should probably chain the handler if there already is one registered. (Although multiple Reacts in the same document is already pretty broken in this regard.)\n\nIt doesn't have to be a global. Since inline event handlers gets the element added as a `with(element)` scope around itself. It is equivalent to add it to the prototype:\n\n``` js\nElement.prototype._handleReactEvent = ...;\n```\n\nor\n\n``` js\nHTMLImgElement.prototype._handleReactEvent = ...;\n```\n\nThis makes them a bit more hidden, unobtrusive.\n\nWe still need to render this string for server-side rendering to avoid needing to change the HTML or wire up handlers after-the-fact on the client.\n\nSince these events can fire before React has loaded, we need to check for the existence of the handler before it is used.\n\n``` js\n<img onload=\"this._handleReactEvent&&_handleReactEvent(event)\">\n```\n\nIt is critical that this string is short - for innerHTML string concat performance and network performance. Yet it needs to be unlikely to collide with anything else.\n\nIs there a unicode character we could use?\n",
        "remove_template_description": "We currently do a lot of work at the end of mount to find all the nodes and attach listeners after the fact. This is severely impacting initial rendering performance of `<form />`, `<img />` and click handlers.  Instead we can just use inline event handlers in the innerHTML string. For the iOS Safari hack it should be trivial. The handler doesn't even have to do anything.  The inline event handler would need to either redispatch the event, or call into some other event handler system. Probably a global listeners.  ``` js window._handleReactEvent = ...; ```  ``` html <img onload=\"_handleReactEvent(event)\"> ```  Since there could potentially be multiple Reacts, they should probably chain the handler if there already is one registered. (Although multiple Reacts in the same document is already pretty broken in this regard.)  It doesn't have to be a global. Since inline event handlers gets the element added as a `with(element)` scope around itself. It is equivalent to add it to the prototype:  ``` js Element.prototype._handleReactEvent = ...; ```  or  ``` js HTMLImgElement.prototype._handleReactEvent = ...; ```  This makes them a bit more hidden, unobtrusive.  We still need to render this string for server-side rendering to avoid needing to change the HTML or wire up handlers after-the-fact on the client.  Since these events can fire before React has loaded, we need to check for the existence of the handler before it is used.  ``` js <img onload=\"this._handleReactEvent&&_handleReactEvent(event)\"> ```  It is critical that this string is short - for innerHTML string concat performance and network performance. Yet it needs to be unlikely to collide with anything else.  Is there a unicode character we could use?"
    },
    {
        "issue_id": 80383680,
        "title": "ReactTestUtils: rename find*/scry* pairs to findOne*/findAll* or similar?",
        "label": [
            "Type: Enhancement",
            "Component: Test Utils",
            "Resolution: Stale"
        ],
        "date": "2015-05-25T04:30:56Z",
        "status": "closed",
        "description": "Outside of the [relatively unknown word \"scry\"](https://twitter.com/angustweets/status/590659867926462465) being used, it's difficult for someone to tell just by name how these differ.  \n\nThe current names seem to be based on the original JX.DOM.scry api usage based on #3278 so likely made more sense internally, but as with the person that filed #2301 it would be much more discoverable and easier to use with names that were more obvious for what they do.\n\nFor back compat reasons, renaming them and then adding the existing names as pointers with comments/jsdoc saying they're deprecated probably makes more sense, IMHO.\n\nThanks!\n",
        "remove_template_description": "Outside of the [relatively unknown word \"scry\"](https://twitter.com/angustweets/status/590659867926462465) being used, it's difficult for someone to tell just by name how these differ.    The current names seem to be based on the original JX.DOM.scry api usage based on #3278 so likely made more sense internally, but as with the person that filed #2301 it would be much more discoverable and easier to use with names that were more obvious for what they do.  For back compat reasons, renaming them and then adding the existing names as pointers with comments/jsdoc saying they're deprecated probably makes more sense, IMHO.  Thanks!"
    },
    {
        "issue_id": 76405731,
        "title": "Unnecessary encoding of element text content",
        "label": [
            "Type: Enhancement",
            "Component: DOM",
            "HTML"
        ],
        "date": "2015-05-14T16:03:19Z",
        "status": "closed",
        "description": "Given the following piece of code:\n\n``` javascript\nlet some_text = 'Hello\"<>&\\'World';\nReact.render(<div>{some_text}</div>, somewhere);\n```\n\nReact replaces the angle brackets, quotation mark, apostrophe and ampersands with their HTML entities, ie &amp;lt; &amp;gt; &amp;quot; &amp;amp; etc. I don't believe it is necessary to replace the quotation mark or the apostrophe. They don't need escaping. They would only need escaping when used in an attribute, not when used as the text content of an element.\n\nThe reason I noticed this is because I'm trying to encode some JSON into a HTML element on the server side which can then be read back by the client side javascript. JSON contains a lot of double quotation marks and they're all being needlessly replaced by &amp;quot;'s\n",
        "remove_template_description": "Given the following piece of code:  ``` javascript let some_text = 'Hello\"<>&\\'World'; React.render(<div>{some_text}</div>, somewhere); ```  React replaces the angle brackets, quotation mark, apostrophe and ampersands with their HTML entities, ie &amp;lt; &amp;gt; &amp;quot; &amp;amp; etc. I don't believe it is necessary to replace the quotation mark or the apostrophe. They don't need escaping. They would only need escaping when used in an attribute, not when used as the text content of an element.  The reason I noticed this is because I'm trying to encode some JSON into a HTML element on the server side which can then be read back by the client side javascript. JSON contains a lot of double quotation marks and they're all being needlessly replaced by &amp;quot;'s"
    },
    {
        "issue_id": 59905296,
        "title": "Calling setState without getInitialState throws when using PureRenderMixin",
        "label": [
            "Type: Enhancement"
        ],
        "date": "2015-03-05T04:55:53Z",
        "status": "closed",
        "description": "Without `getInitialState`, `this.state` is `null`, which causes this line in `shallowEqual` to throw.\n\n``` js\nif (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {\n```\n\nFix is to make shallowEqual bail if either argument is falsey (or not an object if we want to be very safe).\n",
        "remove_template_description": "Without `getInitialState`, `this.state` is `null`, which causes this line in `shallowEqual` to throw.  ``` js if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) { ```  Fix is to make shallowEqual bail if either argument is falsey (or not an object if we want to be very safe)."
    },
    {
        "issue_id": 58401806,
        "title": "Warn when React DOM modified by not-React",
        "label": [
            "Type: Enhancement",
            "Component: DOM",
            "Resolution: Stale"
        ],
        "date": "2015-02-20T19:52:05Z",
        "status": "closed",
        "description": "As discussed in https://github.com/facebook/react/issues/3207#issuecomment-75181038, a complementary improvement is to turn on a mutation observer in dev, and warn of someone other than React modifies the DOM and/or if dom nodes appear without a data-reactid, thus indicating an extension or some other script is doing fancy magic.\n",
        "remove_template_description": "As discussed in https://github.com/facebook/react/issues/3207#issuecomment-75181038, a complementary improvement is to turn on a mutation observer in dev, and warn of someone other than React modifies the DOM and/or if dom nodes appear without a data-reactid, thus indicating an extension or some other script is doing fancy magic."
    },
    {
        "issue_id": 49703089,
        "title": "Handle browser autofill gracefully when server-side rendering",
        "label": [
            "Type: Enhancement",
            "Component: DOM",
            "Component: Server Rendering"
        ],
        "date": "2014-11-21T14:38:49Z",
        "status": "closed",
        "description": "I'm rendering my React app at the document root, with server-side rendering.\nI've got an email and password login form. It renders on the server without any state (both fields empty).\nWhen the browser loads the page, the email and password are autofilled by the browser.\n\nThis happens before React bootstraps, and when it loads, it wipes out that state. So the user sees the inputs being autofilled then being emptied. Not ideal.\n\nI tried using `componentWillMount` to grab the raw DOM node value and `setState` before render, but react complains that the checksum is invalid.\n\nI realise this is a case where the DOM is being modified before react bootstraps on the client, but it would be good to be able to do this kinda stuff...\n\n**Update:** A workaround I used was to pull the values out of the `<input>`s inside `componentWillMount`, then `setState` to those values inside `componentDidMount`. Would still be nice to handle this cleanly though...\n",
        "remove_template_description": "I'm rendering my React app at the document root, with server-side rendering. I've got an email and password login form. It renders on the server without any state (both fields empty). When the browser loads the page, the email and password are autofilled by the browser.  This happens before React bootstraps, and when it loads, it wipes out that state. So the user sees the inputs being autofilled then being emptied. Not ideal.  I tried using `componentWillMount` to grab the raw DOM node value and `setState` before render, but react complains that the checksum is invalid.  I realise this is a case where the DOM is being modified before react bootstraps on the client, but it would be good to be able to do this kinda stuff...  **Update:** A workaround I used was to pull the values out of the `<input>`s inside `componentWillMount`, then `setState` to those values inside `componentDidMount`. Would still be nice to handle this cleanly though..."
    },
    {
        "issue_id": 49619915,
        "title": "propTypes property (current) vs. getPropTypes function (proposed)",
        "label": [
            "Type: Enhancement",
            "Component: Core Utilities"
        ],
        "date": "2014-11-20T21:23:43Z",
        "status": "closed",
        "description": "As `propTypes` are only used in development mode, it seems like it would be preferable to only evaluate them as the result of a method call returning the object instead of the current object literal declared on the class. I imagine this isn't a particularly expensive operation, but if you're using shapes, this results in a lot of type declaration evaluations that are never used outside of development.\n\nCurrent\n\n``` javascript\nReact.createClass({\n    propTypes: {\n        prop: React.PropTypes.shape({...}),\n        ...\n    },\n    ...\n});      \n```\n\nProposed\n\n``` javascript\nReact.createClass({\n    getPropTypes: function () {\n        return {\n            prop: React.PropTypes.shape({...}),\n            ...\n        };\n    },\n    ...\n});      \n```\n\nIs there a reason it's this way instead of the same functional convention as `getDefaultProps`, `getInitialState`, etc.?\n",
        "remove_template_description": "As `propTypes` are only used in development mode, it seems like it would be preferable to only evaluate them as the result of a method call returning the object instead of the current object literal declared on the class. I imagine this isn't a particularly expensive operation, but if you're using shapes, this results in a lot of type declaration evaluations that are never used outside of development.  Current  ``` javascript React.createClass({     propTypes: {         prop: React.PropTypes.shape({...}),         ...     },     ... });       ```  Proposed  ``` javascript React.createClass({     getPropTypes: function () {         return {             prop: React.PropTypes.shape({...}),             ...         };     },     ... });       ```  Is there a reason it's this way instead of the same functional convention as `getDefaultProps`, `getInitialState`, etc.?"
    },
    {
        "issue_id": 46188530,
        "title": "New method for implicit keys, traverseAllChildren",
        "label": [
            "Type: Enhancement"
        ],
        "date": "2014-10-18T21:45:15Z",
        "status": "closed",
        "description": "The current state of implicit keys in React, psuedo-JSX:\n\n```\n1. <div .0><span .0.0 /></div>\n2. <div .0>[<span .0.0 />]</div> -- GOOD reconciles .0.0\n\n1. <div .0><span .0.0 /></div>\n2. <div .0>[<span .0.0 /><span .0.1 />]</div> -- GOOD reconciles .0.0\n\n1. <div .0><span .0.0 /><span .0.1 /></div>\n2. <div .0>[<span .0.0:0 />]<span .0.1 /></div> -- BAD destroys .0.0\n\n1. <div .0>[<span .0.0 />]</div>\n2. <div .0>[[<span .0.0:0 />]]</div> -- BAD destroys .0.0\n```\n\nI propose Array/Set should ignore tailing sub-array indices with value 0 and if the root is an only child then it has index 0 (this is currently the case, except it's broken for objects):\n\n```\n.0.0 => .0.0\n.0.0:0:1:0:0 => .0.0:0:1\n.0.0:0:1:0:0:1:0:0 => .0.0:0:1:0:0:1\n```\n\nThe first ReactNode in every Array now reconciles from and to any depth. If we want to improve Maps to reconcile in the same way then all previous indices should be discarded when a Map is encountered (possibly discarding the entire \"computed name so far\" even).\n\nPseudo-JSX showing how the new indices would be computed (`[...]` is discarded), all the examples at the top now reconcile correctly.\n\n```\n<div .0>\n  [\n    [\n      <span .0.0[:0:0] />\n        [\n          <span .0.0:0:1[:0] />\n            [\n              [\n                <span .0.0:0:1:1[:0:0] />\n                <span .0.0:0:1:1:0:1 />\n              ]\n            ]\n          <span .0.0:0:2 />\n        ]\n      <span .0.0:1 />\n    ]\n  <span .0.1 />\n</div>\n```\n\ncc @sebmarkbage \n",
        "remove_template_description": "The current state of implicit keys in React, psuedo-JSX:  ``` 1. <div .0><span .0.0 /></div> 2. <div .0>[<span .0.0 />]</div> -- GOOD reconciles .0.0  1. <div .0><span .0.0 /></div> 2. <div .0>[<span .0.0 /><span .0.1 />]</div> -- GOOD reconciles .0.0  1. <div .0><span .0.0 /><span .0.1 /></div> 2. <div .0>[<span .0.0:0 />]<span .0.1 /></div> -- BAD destroys .0.0  1. <div .0>[<span .0.0 />]</div> 2. <div .0>[[<span .0.0:0 />]]</div> -- BAD destroys .0.0 ```  I propose Array/Set should ignore tailing sub-array indices with value 0 and if the root is an only child then it has index 0 (this is currently the case, except it's broken for objects):  ``` .0.0 => .0.0 .0.0:0:1:0:0 => .0.0:0:1 .0.0:0:1:0:0:1:0:0 => .0.0:0:1:0:0:1 ```  The first ReactNode in every Array now reconciles from and to any depth. If we want to improve Maps to reconcile in the same way then all previous indices should be discarded when a Map is encountered (possibly discarding the entire \"computed name so far\" even).  Pseudo-JSX showing how the new indices would be computed (`[...]` is discarded), all the examples at the top now reconcile correctly.  ``` <div .0>   [     [       <span .0.0[:0:0] />         [           <span .0.0:0:1[:0] />             [               [                 <span .0.0:0:1:1[:0:0] />                 <span .0.0:0:1:1:0:1 />               ]             ]           <span .0.0:0:2 />         ]       <span .0.0:1 />     ]   <span .0.1 /> </div> ```  cc @sebmarkbage"
    },
    {
        "issue_id": 46033023,
        "title": "Rendered markup roots should be added to ReactMount node cache",
        "label": [
            "Type: Enhancement"
        ],
        "date": "2014-10-16T20:41:03Z",
        "status": "closed",
        "description": "ReactMount caches all children for each parent it visits, this avoids worst-case exponential cost. However, use of ReactDOMIDOperations for updates forces ReactMount to populate the cache with the previous children.\n\nIf a newly rendered node needs to be found, then \"the children of the parent\" of \"the newly rendered root\" has to be re-traversed as it does not exist in the node cache. Since it's guaranteed that all the siblings of newly rendered roots are cached and that we have a reference to the node, it's trivial to manually add it to the node cache which should avoid \"double-traversals\" entirely.\n",
        "remove_template_description": "ReactMount caches all children for each parent it visits, this avoids worst-case exponential cost. However, use of ReactDOMIDOperations for updates forces ReactMount to populate the cache with the previous children.  If a newly rendered node needs to be found, then \"the children of the parent\" of \"the newly rendered root\" has to be re-traversed as it does not exist in the node cache. Since it's guaranteed that all the siblings of newly rendered roots are cached and that we have a reference to the node, it's trivial to manually add it to the node cache which should avoid \"double-traversals\" entirely."
    },
    {
        "issue_id": 45560324,
        "title": "ReactDOMInput unnecessarily traverses to its node on mount",
        "label": [
            "Type: Enhancement"
        ],
        "date": "2014-10-11T19:43:27Z",
        "status": "closed",
        "description": "https://github.com/facebook/react/blob/master/src/browser/ui/dom/components/ReactDOMInput.js#L86\n\nIt should be preferable to just access `this._rootNodeID` directly.\n",
        "remove_template_description": "https://github.com/facebook/react/blob/master/src/browser/ui/dom/components/ReactDOMInput.js#L86  It should be preferable to just access `this._rootNodeID` directly."
    },
    {
        "issue_id": 45464355,
        "title": "Unhelpful error when two react components are responsible for updating the same div",
        "label": [
            "Type: Enhancement"
        ],
        "date": "2014-10-10T09:51:50Z",
        "status": "closed",
        "description": "I was a moron and had two separate React components both responsible for the same div:\n\n```\nvar Component1 = React.createClass({\n    render: function() {\n        React.renderComponent(<Component2/>, document.getElementById('my_div'));\n        return (<div id=\"my_div\"><span>Some stuff goes here</span></div>);\n    }    \n});\n```\n\nIt wasn't quite as obvious as that in real life, but ultimately that's what it boiled down to. It caused the whole page to freeze until the browser killed it. But the warning / error that React gave me was no help at all in trying to diagnose the issue:\n\n> \"React attempted to use reuse markup in a container but the checksum was invalid. This generally means that you are using server rendering and the markup generated on the server was not what the client was expecting. React injectednew markup to compensate which works but you have lost many of  the benefits of server rendering. Instead, figure out why the markup being generated is different on the client or server.\"\n",
        "remove_template_description": "I was a moron and had two separate React components both responsible for the same div:  ``` var Component1 = React.createClass({     render: function() {         React.renderComponent(<Component2/>, document.getElementById('my_div'));         return (<div id=\"my_div\"><span>Some stuff goes here</span></div>);     }     }); ```  It wasn't quite as obvious as that in real life, but ultimately that's what it boiled down to. It caused the whole page to freeze until the browser killed it. But the warning / error that React gave me was no help at all in trying to diagnose the issue:  > \"React attempted to use reuse markup in a container but the checksum was invalid. This generally means that you are using server rendering and the markup generated on the server was not what the client was expecting. React injectednew markup to compensate which works but you have lost many of  the benefits of server rendering. Instead, figure out why the markup being generated is different on the client or server.\""
    },
    {
        "issue_id": 45031135,
        "title": "Accept iterables and collections as children.",
        "label": [
            "Type: Enhancement"
        ],
        "date": "2014-10-06T20:18:39Z",
        "status": "closed",
        "description": "React currently accepts Arrays as children:\n\n```\nvar array = [<span />, <span />, <span />];\n<div>{spans}</div>\n```\n\nIt would be excellent if we can generalize this concept to accept both collections and iterables.\n\nCollections (such as Set, Map, or Immutable-js's variants) can be identified if they implement `values()` and the result of calling `values()` is an Iterator (`typeof maybeIterator.next === 'function'`).\n\nIterables (Array, arguments object, other array-ish things, third-party data structures) can be identified if they have `Symbol.iterator` or `@@iterator` returning an Iterator.\n\nIn both cases, you're left with an Iterator, at which point extracting the children becomes straight-forward.\n\nThis unlocks a few really useful things:\n\nUse Immutable-js with React efficiently:\n\n```\nvar data = Immutable.Vector('a', 'b', 'c');\n<div>{data.map(str => <span>{str.toUpperCase}</span>)}</div>\n```\n\nUse generators:\n\n```\nvar data = function*() {\n  yield <span />;\n  yield <span />;\n  yield <span />;\n}\n<div>{data}</div>\n```\n",
        "remove_template_description": "React currently accepts Arrays as children:  ``` var array = [<span />, <span />, <span />]; <div>{spans}</div> ```  It would be excellent if we can generalize this concept to accept both collections and iterables.  Collections (such as Set, Map, or Immutable-js's variants) can be identified if they implement `values()` and the result of calling `values()` is an Iterator (`typeof maybeIterator.next === 'function'`).  Iterables (Array, arguments object, other array-ish things, third-party data structures) can be identified if they have `Symbol.iterator` or `@@iterator` returning an Iterator.  In both cases, you're left with an Iterator, at which point extracting the children becomes straight-forward.  This unlocks a few really useful things:  Use Immutable-js with React efficiently:  ``` var data = Immutable.Vector('a', 'b', 'c'); <div>{data.map(str => <span>{str.toUpperCase}</span>)}</div> ```  Use generators:  ``` var data = function*() {   yield <span />;   yield <span />;   yield <span />; } <div>{data}</div> ```"
    },
    {
        "issue_id": 44781724,
        "title": "Drop upper-casing of ReactDOMComponent.tagName",
        "label": [
            "Type: Enhancement"
        ],
        "date": "2014-10-03T08:30:43Z",
        "status": "closed",
        "description": "https://github.com/facebook/react/blob/master/src/browser/ui/ReactDOMComponent.js#L113\n\nIt works well for visually highlighting HTML tags in print, but it's somewhat weird for SVG and web components. Also because it's a public property that could be used for other purposes. This would also mean that we can drop the internal `_tagName` and just use `tag` unless there are other considerations.\n",
        "remove_template_description": "https://github.com/facebook/react/blob/master/src/browser/ui/ReactDOMComponent.js#L113  It works well for visually highlighting HTML tags in print, but it's somewhat weird for SVG and web components. Also because it's a public property that could be used for other purposes. This would also mean that we can drop the internal `_tagName` and just use `tag` unless there are other considerations."
    },
    {
        "issue_id": 44504194,
        "title": "Generate XML compatible markup",
        "label": [
            "Type: Enhancement"
        ],
        "date": "2014-09-30T21:49:10Z",
        "status": "closed",
        "description": "Take the alternative approach discussed in #2161. I think we can take advantage of the self-closing information we already have in ReactDOM (and make use of in ReactDOMComponent).\n\ncc @audreyt in case you're interested in taking a stab at this.\n",
        "remove_template_description": "Take the alternative approach discussed in #2161. I think we can take advantage of the self-closing information we already have in ReactDOM (and make use of in ReactDOMComponent).  cc @audreyt in case you're interested in taking a stab at this."
    },
    {
        "issue_id": 44450128,
        "title": "Add better guard for nested renderings.",
        "label": [
            "Type: Enhancement"
        ],
        "date": "2014-09-30T14:11:30Z",
        "status": "closed",
        "description": "This issue demonstrate the problem I had:\nhttp://jsfiddle.net/kb3gN/6069/\n\nAs you can see, both cases are not handled the same way.\n\n```\nWarning: unmountComponentAtNode(): Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate. 10333102_793476900703299_1710860803_n.js:20226\nWarning: _renderNewRootComponent(): Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate. 10333102_793476900703299_1710860803_n.js:20226\nUncaught Error: Invariant Violation: unmountComponent(): Can only unmount a mounted component. \n```\n\nVS \n\n```\nUncaught Error: Invariant Violation: replaceState(...): Cannot update during an existing state transition (such as within `render`). This could potentially cause an infinite loop so it is forbidden. 10333102_793476900703299_1710860803_n.js:18689invariant 10333102_793476900703299_1710860803_n.js:18689validateLifeCycleOnReplaceState 10333102_793476900703299_1710860803_n.js:6226ReactCompositeComponentMixin.replaceState 10333102_793476900703299_1710860803_n.js:6645ReactCompositeComponentMixin.setState 10333102_793476900703299_1710860803_n.js:6626React.createClass.render Inline JSX script:23(anonymous function) 10333102_793476900703299_1710860803_n.js:7017ReactPerf.measure 10333102_793476900703299_1710860803_n.js:12710(anonymous function) 10333102_793476900703299_1710860803_n.js:6947ReactPerf.measure 10333102_793476900703299_1710860803_n.js:12710ReactCompositeComponentMixin._performComponentUpdate 10333102_793476900703299_1710860803_n.js:6891ReactCompositeComponentMixin.performUpdateIfNecessary 10333102_793476900703299_1710860803_n.js:6831runBatchedUpdates 10333102_793476900703299_1710860803_n.js:15012Mixin.perform 10333102_793476900703299_1710860803_n.js:16875Mixin.perform 10333102_793476900703299_1710860803_n.js:16875mixInto.perform 10333102_793476900703299_1710860803_n.js:14958(anonymous function) 10333102_793476900703299_1710860803_n.js:15036ReactPerf.measure 10333102_793476900703299_1710860803_n.js:12710Mixin.closeAll 10333102_793476900703299_1710860803_n.js:16948Mixin.perform 10333102_793476900703299_1710860803_n.js:16889ReactDefaultBatchingStrategy.batchedUpdates 10333102_793476900703299_1710860803_n.js:9162batchedUpdates 10333102_793476900703299_1710860803_n.js:14973ReactEventListener.dispatchEvent 10333102_793476900703299_1710860803_n.js:10663\n```\n\nActually I encountered the 1st case, and it was quite difficult to see where the problem was in my real life application because there was only a warning, and the message were not very helpful. Is it possible to handle this consistantly or at least include the component name if available?\n",
        "remove_template_description": "This issue demonstrate the problem I had: http://jsfiddle.net/kb3gN/6069/  As you can see, both cases are not handled the same way.  ``` Warning: unmountComponentAtNode(): Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate. 10333102_793476900703299_1710860803_n.js:20226 Warning: _renderNewRootComponent(): Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate. 10333102_793476900703299_1710860803_n.js:20226 Uncaught Error: Invariant Violation: unmountComponent(): Can only unmount a mounted component.  ```  VS   ``` Uncaught Error: Invariant Violation: replaceState(...): Cannot update during an existing state transition (such as within `render`). This could potentially cause an infinite loop so it is forbidden. 10333102_793476900703299_1710860803_n.js:18689invariant 10333102_793476900703299_1710860803_n.js:18689validateLifeCycleOnReplaceState 10333102_793476900703299_1710860803_n.js:6226ReactCompositeComponentMixin.replaceState 10333102_793476900703299_1710860803_n.js:6645ReactCompositeComponentMixin.setState 10333102_793476900703299_1710860803_n.js:6626React.createClass.render Inline JSX script:23(anonymous function) 10333102_793476900703299_1710860803_n.js:7017ReactPerf.measure 10333102_793476900703299_1710860803_n.js:12710(anonymous function) 10333102_793476900703299_1710860803_n.js:6947ReactPerf.measure 10333102_793476900703299_1710860803_n.js:12710ReactCompositeComponentMixin._performComponentUpdate 10333102_793476900703299_1710860803_n.js:6891ReactCompositeComponentMixin.performUpdateIfNecessary 10333102_793476900703299_1710860803_n.js:6831runBatchedUpdates 10333102_793476900703299_1710860803_n.js:15012Mixin.perform 10333102_793476900703299_1710860803_n.js:16875Mixin.perform 10333102_793476900703299_1710860803_n.js:16875mixInto.perform 10333102_793476900703299_1710860803_n.js:14958(anonymous function) 10333102_793476900703299_1710860803_n.js:15036ReactPerf.measure 10333102_793476900703299_1710860803_n.js:12710Mixin.closeAll 10333102_793476900703299_1710860803_n.js:16948Mixin.perform 10333102_793476900703299_1710860803_n.js:16889ReactDefaultBatchingStrategy.batchedUpdates 10333102_793476900703299_1710860803_n.js:9162batchedUpdates 10333102_793476900703299_1710860803_n.js:14973ReactEventListener.dispatchEvent 10333102_793476900703299_1710860803_n.js:10663 ```  Actually I encountered the 1st case, and it was quite difficult to see where the problem was in my real life application because there was only a warning, and the message were not very helpful. Is it possible to handle this consistantly or at least include the component name if available?"
    },
    {
        "issue_id": 44359326,
        "title": "Replace setInnerHTML with createNodesFromMarkup/getMarkupWrap",
        "label": [
            "Type: Enhancement"
        ],
        "date": "2014-09-29T21:30:15Z",
        "status": "closed",
        "description": "From #2249, I found that `setInnerHTML` and `createNodesFromMarkup` (which calls `getMarkupWrap`) both solve largely the same problem and includes the same fixes for IE8.\n\nSubmitting this issue as a reminder to myself and for your information.\n",
        "remove_template_description": "From #2249, I found that `setInnerHTML` and `createNodesFromMarkup` (which calls `getMarkupWrap`) both solve largely the same problem and includes the same fixes for IE8.  Submitting this issue as a reminder to myself and for your information."
    },
    {
        "issue_id": 43147239,
        "title": "Inifinite recursion can be caused when lifecycle methods trigger a re-render",
        "label": [
            "Type: Enhancement"
        ],
        "date": "2014-09-18T15:40:32Z",
        "status": "closed",
        "description": "If lifecycle methods cause re-renders we can potentially end up in infinite recursion. I've seen this happen somewhere in a bigger application and it was difficult to find. I'm not sure there's anything React could do to prevent these cases though.\n\nTwo reduced examples: https://gist.github.com/kassens/7e223c2b299f4a46ada1\n",
        "remove_template_description": "If lifecycle methods cause re-renders we can potentially end up in infinite recursion. I've seen this happen somewhere in a bigger application and it was difficult to find. I'm not sure there's anything React could do to prevent these cases though.  Two reduced examples: https://gist.github.com/kassens/7e223c2b299f4a46ada1"
    },
    {
        "issue_id": 42290982,
        "title": "Inner required fields in shaped props not reported properly",
        "label": [
            "Type: Enhancement"
        ],
        "date": "2014-09-09T10:18:07Z",
        "status": "closed",
        "description": "See this example:\nhttp://jsfiddle.net/jeanlauliac/2x3dk23m/1/\n\nThe console only report: `Warning: Required prop `bar` was not specified in `Hello`.`. It should probably report the whole path to the inner field, such as `test.bar`.\n",
        "remove_template_description": "See this example: http://jsfiddle.net/jeanlauliac/2x3dk23m/1/  The console only report: `Warning: Required prop `bar` was not specified in `Hello`.`. It should probably report the whole path to the inner field, such as `test.bar`."
    },
    {
        "issue_id": 41143542,
        "title": "Support for media events",
        "label": [
            "Type: Enhancement",
            "Component: DOM"
        ],
        "date": "2014-08-26T07:14:04Z",
        "status": "closed",
        "description": "Currently no media events are supported, which makes working with audio or video tags in react a pain in the ass\n\n``` js\ncomponentDidMount: function () {\n    var audioElement = this.refs.audioObject.getDOMNode();\n    audioElement.addEventListener('progress', this.updateProgress);\n    audioElement.addEventListener('timeupdate', this.updateProgress);\n    audioElement.addEventListener('ended', this.handleMediaEnd);\n},\ncomponentWillUnmount: function () {\n    var audioElement = this.refs.audioObject.getDOMNode();\n    audioElement.removeEventListener('progress', this.updateProgress);\n    audioElement.removeEventListener('timeupdate', this.updateProgress);\n    audioElement.removeEventListener('ended', this.handleMediaEnd);\n}\n```\n\nThere are also still many missing attributes for audio and video tags. I find it strange that these tags are completely unsupported - they should probably be removed from the list in the documentation to reduce confusion until they are properly supported.\n",
        "remove_template_description": "Currently no media events are supported, which makes working with audio or video tags in react a pain in the ass  ``` js componentDidMount: function () {     var audioElement = this.refs.audioObject.getDOMNode();     audioElement.addEventListener('progress', this.updateProgress);     audioElement.addEventListener('timeupdate', this.updateProgress);     audioElement.addEventListener('ended', this.handleMediaEnd); }, componentWillUnmount: function () {     var audioElement = this.refs.audioObject.getDOMNode();     audioElement.removeEventListener('progress', this.updateProgress);     audioElement.removeEventListener('timeupdate', this.updateProgress);     audioElement.removeEventListener('ended', this.handleMediaEnd); } ```  There are also still many missing attributes for audio and video tags. I find it strange that these tags are completely unsupported - they should probably be removed from the list in the documentation to reduce confusion until they are properly supported."
    },
    {
        "issue_id": 40292965,
        "title": "Attach event per react container root, rather than on the document",
        "label": [
            "Type: Enhancement",
            "Component: DOM",
            "Resolution: Backlog",
            "Partner"
        ],
        "date": "2014-08-14T20:00:09Z",
        "status": "closed",
        "description": "@nathansobo will that help your event perf issues a bit? I'm not familiar with atom's plugin infrastructure, But this'll help if you have `<Editor/><Plugin1/>` (two `renderComponent`s). Doesn't help if you have `<Editor><Plugin1/></Editor>` though, but I have some ideas to optimize events a bit more.\n\nThis is nonetheless an ok idea, I think.\n@spicyj \n",
        "remove_template_description": "@nathansobo will that help your event perf issues a bit? I'm not familiar with atom's plugin infrastructure, But this'll help if you have `<Editor/><Plugin1/>` (two `renderComponent`s). Doesn't help if you have `<Editor><Plugin1/></Editor>` though, but I have some ideas to optimize events a bit more.  This is nonetheless an ok idea, I think. @spicyj"
    },
    {
        "issue_id": 39132053,
        "title": "Don't add top-level events for uncontrolled inputs",
        "label": [
            "Type: Enhancement",
            "Component: DOM",
            "Resolution: Stale"
        ],
        "date": "2014-07-30T20:13:02Z",
        "status": "closed",
        "description": "The document-wide handlers for native events that perform synthetic event dispatch execute in 0.2-0.7 milliseconds on my machine. I realize this doesn't seem like much time, but we're really trying to shave off any non-essential source of latency for typing and cursor movement in Atom, and every little bit helps. Disabling synthetic events on `keydown` and `textinput` is saving about 1ms of latency for a keystroke.\n\nIn our fork, I've added the ability to add a `reactSkipEventDispatch` property to the native event to opt out of synthetic dispatch, but I'd be interested in a more official mechanism for opting out of this feature for certain event types. Even better, perhaps React could maintain a cache of what event types are actually being listened for and bail out as soon as possible if handling an event.\n",
        "remove_template_description": "The document-wide handlers for native events that perform synthetic event dispatch execute in 0.2-0.7 milliseconds on my machine. I realize this doesn't seem like much time, but we're really trying to shave off any non-essential source of latency for typing and cursor movement in Atom, and every little bit helps. Disabling synthetic events on `keydown` and `textinput` is saving about 1ms of latency for a keystroke.  In our fork, I've added the ability to add a `reactSkipEventDispatch` property to the native event to opt out of synthetic dispatch, but I'd be interested in a more official mechanism for opting out of this feature for certain event types. Even better, perhaps React could maintain a cache of what event types are actually being listened for and bail out as soon as possible if handling an event."
    },
    {
        "issue_id": 38827558,
        "title": "Unnecessary reflow due to setState in componentWillReceiveProps",
        "label": [
            "Type: Enhancement",
            "Component: DOM"
        ],
        "date": "2014-07-26T22:24:07Z",
        "status": "closed",
        "description": "See [mailing list post](https://groups.google.com/d/msg/reactjs/pKxD3JY_Y84/zc59P2T5IP4J), reproduced below for convenience:\n\nThe following reduced test case ([jsfiddle](http://jsfiddle.net/Tn83a/)) has an unnecessary reflow:\n\n``` javascript\nvar Input = React.createClass({\n    getInitialState: function () {\n        return {\n            text: this.props.text + \"...\"\n        };\n    },\n    componentWillReceiveProps: function (nextProps) {\n        this.setState({\n            text: nextProps.text + \"...\"\n        });\n    },\n    render: function () {\n        return React.DOM.div(null, this.state.text);\n    }\n});\n\nvar App = React.createClass({\n    getInitialState: function () {\n        return {\n            value: \"foo\"\n        };\n    },\n    render: function () {\n        var that = this;\n        return React.DOM.div(null,\n            React.DOM.input({\n                value: this.state.value,\n                onChange: function (e) {\n                    that.setState({\n                        value: e.target.value\n                    });\n                }\n            }),\n            Input({\n                text: this.state.value\n            }));\n    }\n});\n\nReact.renderComponent(App(null), document.body);\n```\n\nAnd a screenshot from the Timeline tab in Chrome Dev Tools showing the reflow:\n\n![reflow](https://cloud.githubusercontent.com/assets/1037172/3712415/33574b9e-1513-11e4-9dca-cecc3233353a.png)\n\nAn equivalent implementation ([jsfiddle](http://jsfiddle.net/EG7hL/)) not using `setState` in `componentWillReceiveProps` does not have the same reflow:\n\n``` javascript\nvar Input = React.createClass({\n    render: function () {\n        return React.DOM.div(null, this.props.text + \"...\");\n    }\n});\n\nvar App = React.createClass({\n    getInitialState: function () {\n        return {\n            value: \"foo\"\n        };\n    },\n    render: function () {\n        var that = this;\n        return React.DOM.div(null,\n            React.DOM.input({\n                value: this.state.value,\n                onChange: function (e) {\n                    that.setState({\n                        value: e.target.value\n                    });\n                }\n            }),\n            Input({\n                text: this.state.value\n            }));\n    }\n});\n\nReact.renderComponent(App(null), document.body);\n```\n",
        "remove_template_description": "See [mailing list post](https://groups.google.com/d/msg/reactjs/pKxD3JY_Y84/zc59P2T5IP4J), reproduced below for convenience:  The following reduced test case ([jsfiddle](http://jsfiddle.net/Tn83a/)) has an unnecessary reflow:  ``` javascript var Input = React.createClass({     getInitialState: function () {         return {             text: this.props.text + \"...\"         };     },     componentWillReceiveProps: function (nextProps) {         this.setState({             text: nextProps.text + \"...\"         });     },     render: function () {         return React.DOM.div(null, this.state.text);     } });  var App = React.createClass({     getInitialState: function () {         return {             value: \"foo\"         };     },     render: function () {         var that = this;         return React.DOM.div(null,             React.DOM.input({                 value: this.state.value,                 onChange: function (e) {                     that.setState({                         value: e.target.value                     });                 }             }),             Input({                 text: this.state.value             }));     } });  React.renderComponent(App(null), document.body); ```  And a screenshot from the Timeline tab in Chrome Dev Tools showing the reflow:  ![reflow](https://cloud.githubusercontent.com/assets/1037172/3712415/33574b9e-1513-11e4-9dca-cecc3233353a.png)  An equivalent implementation ([jsfiddle](http://jsfiddle.net/EG7hL/)) not using `setState` in `componentWillReceiveProps` does not have the same reflow:  ``` javascript var Input = React.createClass({     render: function () {         return React.DOM.div(null, this.props.text + \"...\");     } });  var App = React.createClass({     getInitialState: function () {         return {             value: \"foo\"         };     },     render: function () {         var that = this;         return React.DOM.div(null,             React.DOM.input({                 value: this.state.value,                 onChange: function (e) {                     that.setState({                         value: e.target.value                     });                 }             }),             Input({                 text: this.state.value             }));     } });  React.renderComponent(App(null), document.body); ```"
    },
    {
        "issue_id": 37888265,
        "title": "RFC: Introduce more DOM property definitions",
        "label": [
            "Type: Enhancement"
        ],
        "date": "2014-07-15T14:26:54Z",
        "status": "closed",
        "description": "`tabIndex` is an integer, positive or negative, add `HAS_NUMERIC_VALUE`?\n\n`rowSpan` and `colSpan` are integers, but only non-negative, which I assume would necessitate `HAS_NONNEGATIVE_VALUE`?\n\n`spellCheck` is boolean with a third indeterminate state, so `HAS_TRISTATE_VALUE` would need to be added (`undefined` and `null` should both map to indeterminate). It expects `\"true\"` or `\"false\"`.\n\n`autoComplete` is a regular boolean attribute except that it defaults to `on`, so you have to explicitly set it to `off` to disable it. Expects `off` (or `on`, but that is default and is redundant). Add something like `IS_DEFAULT_ENABLED`?\n\nThoughts? Have I missed something? Also yes, lots of new properties sadly, but worth the discussion at least.\n",
        "remove_template_description": "`tabIndex` is an integer, positive or negative, add `HAS_NUMERIC_VALUE`?  `rowSpan` and `colSpan` are integers, but only non-negative, which I assume would necessitate `HAS_NONNEGATIVE_VALUE`?  `spellCheck` is boolean with a third indeterminate state, so `HAS_TRISTATE_VALUE` would need to be added (`undefined` and `null` should both map to indeterminate). It expects `\"true\"` or `\"false\"`.  `autoComplete` is a regular boolean attribute except that it defaults to `on`, so you have to explicitly set it to `off` to disable it. Expects `off` (or `on`, but that is default and is redundant). Add something like `IS_DEFAULT_ENABLED`?  Thoughts? Have I missed something? Also yes, lots of new properties sadly, but worth the discussion at least."
    },
    {
        "issue_id": 37768972,
        "title": "Avoid unnecessary object allocation in ClassSet",
        "label": [
            "Type: Enhancement"
        ],
        "date": "2014-07-14T08:53:33Z",
        "status": "closed",
        "description": "https://github.com/facebook/react/blob/8a47813baabcb200f5e0a496dd959cb0ef3adcf3/src/vendor/stubs/cx.js#L36\n\nIf we get rid of `Object.keys` we save one allocation for a potentially commonly used function (except for you guys running your internal transform). Yes no?\n",
        "remove_template_description": "https://github.com/facebook/react/blob/8a47813baabcb200f5e0a496dd959cb0ef3adcf3/src/vendor/stubs/cx.js#L36  If we get rid of `Object.keys` we save one allocation for a potentially commonly used function (except for you guys running your internal transform). Yes no?"
    },
    {
        "issue_id": 33446482,
        "title": "add support for head prefix attribute",
        "label": [
            "Type: Enhancement",
            "Component: DOM"
        ],
        "date": "2014-05-13T22:46:45Z",
        "status": "closed",
        "description": "Hi guys, since Facebook is using the `prefix` attribute on the `head` element to declare open graph namespace. Could we add it to the list of supported attributes?\n\nthis would be useful when generating templates  with https://github.com/reactjs/express-react-views\n\nsee this link too for more details\nhttp://stackoverflow.com/questions/8235687/open-graph-namespace-declaration-html-with-xmlns-or-head-prefix\n",
        "remove_template_description": "Hi guys, since Facebook is using the `prefix` attribute on the `head` element to declare open graph namespace. Could we add it to the list of supported attributes?  this would be useful when generating templates  with https://github.com/reactjs/express-react-views  see this link too for more details http://stackoverflow.com/questions/8235687/open-graph-namespace-declaration-html-with-xmlns-or-head-prefix"
    },
    {
        "issue_id": 33216893,
        "title": "Provide a build with required polyfills, or a separate react-polyfills.js",
        "label": [
            "Type: Enhancement",
            "Component: Build Infrastructure"
        ],
        "date": "2014-05-09T23:00:58Z",
        "status": "closed",
        "description": "Right now, somewhere buried on the React site, there's a list of polyfills that React requires, with links to a project that has them, intermingled with a bunch of others.\n\nIt would be nice if React (optionally) shipped with all the polyfills, and only the polyfills, it needs to function.\n\nThis would make it easier for people to fall into the pit of success and build browser-compatible React sites. Also it would save me a bunch of work every time I start a new project.\n",
        "remove_template_description": "Right now, somewhere buried on the React site, there's a list of polyfills that React requires, with links to a project that has them, intermingled with a bunch of others.  It would be nice if React (optionally) shipped with all the polyfills, and only the polyfills, it needs to function.  This would make it easier for people to fall into the pit of success and build browser-compatible React sites. Also it would save me a bunch of work every time I start a new project."
    },
    {
        "issue_id": 30900007,
        "title": "touchmove doesn't fire on removed element",
        "label": [
            "Type: Enhancement",
            "Component: DOM",
            "Partner"
        ],
        "date": "2014-04-04T22:32:30Z",
        "status": "open",
        "description": "If you have\n\n```\n{this.state.show &&\n  <div onTouchStart={this.hideTheDiv} onTouchMove={...} />}\n```\n\nsuch that the onTouchStart handler removes the div (and maybe replaces it with another one in the same place, useful in certain draggable interactions), the onTouchMove handler doesn't fire because the events of a detached element no longer bubble to document. We should probably bind the touchmove handler when the element receives touchstart instead of delegating to document.\n\nSort of related to #1254.\n\ncc @merbs @eater\n",
        "remove_template_description": "If you have  ``` {this.state.show &&   <div onTouchStart={this.hideTheDiv} onTouchMove={...} />} ```  such that the onTouchStart handler removes the div (and maybe replaces it with another one in the same place, useful in certain draggable interactions), the onTouchMove handler doesn't fire because the events of a detached element no longer bubble to document. We should probably bind the touchmove handler when the element receives touchstart instead of delegating to document.  Sort of related to #1254.  cc @merbs @eater"
    },
    {
        "issue_id": 30191217,
        "title": "Make React.createClass warn/throw if mixins contains undefined value",
        "label": [
            "Type: Enhancement"
        ],
        "date": "2014-03-26T07:46:39Z",
        "status": "closed",
        "description": "Code below could be a result of a typo in a mixin name or an attempt to use a mixin from a module which has no `module.exports` (by a mistakte).\n\n```\nvar Component = React.createClass({\n  mixins: [undefined],\n  ...\n});\n```\n\nIt would be nice if React can warn/throw on such condition.\n",
        "remove_template_description": "Code below could be a result of a typo in a mixin name or an attempt to use a mixin from a module which has no `module.exports` (by a mistakte).  ``` var Component = React.createClass({   mixins: [undefined],   ... }); ```  It would be nice if React can warn/throw on such condition."
    },
    {
        "issue_id": 30080937,
        "title": "React tracks scroll position internally and forces synchronous layout",
        "label": [
            "Type: Enhancement"
        ],
        "date": "2014-03-24T22:20:13Z",
        "status": "closed",
        "description": "React adds a scroll listener that tracks and caches the scroll position (I assume for some undocumented internal purpose). Additionally, the scroll listener forces a synchronous layout (see screenshot). This seems wasteful, especially considering that the values tracked are never exposed in the API.\n\nWhat is the scroll listener used for? Can it be removed?\n\n![screen shot 2014-03-24 at 3 11 09 pm](https://f.cloud.github.com/assets/6031/2506088/446c708a-b3a2-11e3-9aa3-4b6af531a4a0.png)\n",
        "remove_template_description": "React adds a scroll listener that tracks and caches the scroll position (I assume for some undocumented internal purpose). Additionally, the scroll listener forces a synchronous layout (see screenshot). This seems wasteful, especially considering that the values tracked are never exposed in the API.  What is the scroll listener used for? Can it be removed?  ![screen shot 2014-03-24 at 3 11 09 pm](https://f.cloud.github.com/assets/6031/2506088/446c708a-b3a2-11e3-9aa3-4b6af531a4a0.png)"
    },
    {
        "issue_id": 29310891,
        "title": "React shouldn't bind wheel or touch events to the document. ",
        "label": [
            "Type: Enhancement",
            "Component: DOM",
            "Resolution: Backlog"
        ],
        "date": "2014-03-12T22:41:13Z",
        "status": "closed",
        "description": "React binds touchmove, touchstart, touchend, touchcancel and wheel handlers to the document. When the user tries to scroll the browser needs to execute these event handlers to ensure event.preventDefault() was not called. This means scrolling will stall while JavaScript is executing.\n\nChrome has a fast-path that checks whether the coordinate where the touch event happens has touch listeners (https://plus.google.com/+RickByers/posts/cmzrtyBYPQc). If there are no listeners Chrome can allow the scroll to happen even if the main thread is blocked on JavaScript. \n\nWe should bind our listeners for these events directly to the node which requires it. That event handler can then dispatch the event to the standard React top level event system. Then it will bubble/capture just like everything else and be visible to all event plugins.\n",
        "remove_template_description": "React binds touchmove, touchstart, touchend, touchcancel and wheel handlers to the document. When the user tries to scroll the browser needs to execute these event handlers to ensure event.preventDefault() was not called. This means scrolling will stall while JavaScript is executing.  Chrome has a fast-path that checks whether the coordinate where the touch event happens has touch listeners (https://plus.google.com/+RickByers/posts/cmzrtyBYPQc). If there are no listeners Chrome can allow the scroll to happen even if the main thread is blocked on JavaScript.   We should bind our listeners for these events directly to the node which requires it. That event handler can then dispatch the event to the standard React top level event system. Then it will bubble/capture just like everything else and be visible to all event plugins."
    },
    {
        "issue_id": 25566487,
        "title": "Feature test during start-up instead?",
        "label": [
            "Type: Enhancement"
        ],
        "date": "2014-01-14T11:00:17Z",
        "status": "closed",
        "description": "https://github.com/facebook/react/blob/master/src/dom/getTextContentAccessor.js\n\nCould for instance be simplified to the below code, and even if many of these tests were to be done during start-up the effect should be immeasureable (by comparison, even IE8 can manage to create ~250.000 elements a second) and it seems like we could simplify the code slightly by doing it like this.\n\nSince we still use `ExecutionEnvironment.canUseDOM` it should be safe to use in all environments, right?\n\n```\n\"use strict\";\n\nvar ExecutionEnvironment = require('ExecutionEnvironment');\n\n/**\n * Gets the key used to access text content on a DOM node.\n */\nif (ExecutionEnvironment.canUseDOM) {\n  module.exports = 'innerText' in document.createElement('div') ?\n    'innerText' :\n    'textContent';\n}\n```\n",
        "remove_template_description": "https://github.com/facebook/react/blob/master/src/dom/getTextContentAccessor.js  Could for instance be simplified to the below code, and even if many of these tests were to be done during start-up the effect should be immeasureable (by comparison, even IE8 can manage to create ~250.000 elements a second) and it seems like we could simplify the code slightly by doing it like this.  Since we still use `ExecutionEnvironment.canUseDOM` it should be safe to use in all environments, right?  ``` \"use strict\";  var ExecutionEnvironment = require('ExecutionEnvironment');  /**  * Gets the key used to access text content on a DOM node.  */ if (ExecutionEnvironment.canUseDOM) {   module.exports = 'innerText' in document.createElement('div') ?     'innerText' :     'textContent'; } ```"
    },
    {
        "issue_id": 25349220,
        "title": "Only run tests built from files that exist in src/",
        "label": [
            "Type: Bug",
            "Type: Enhancement",
            "Component: Build Infrastructure"
        ],
        "date": "2014-01-09T19:59:23Z",
        "status": "closed",
        "description": "Right now we run any tests we find in `build/modules/`, which includes tests still sitting around from previous builds that don't currently exist in `src/`.\n\ncc @subtleGradient @spicyj\n",
        "remove_template_description": "Right now we run any tests we find in `build/modules/`, which includes tests still sitting around from previous builds that don't currently exist in `src/`.  cc @subtleGradient @spicyj"
    },
    {
        "issue_id": 25065745,
        "title": "wishlist: integrated, stateful routing",
        "label": [
            "Type: Enhancement"
        ],
        "date": "2014-01-05T04:42:49Z",
        "status": "closed",
        "description": "Here's my idea. Please let me know if it's any good.\n\nRoutes in a single-page app basically just represent state (or props, depending on your perspective), and no-one does state better than React. Which makes me think that React will be awesome at route management.\n\nI've taken a stab at [making a single-page app in react](https://github.com/jaredly/github-issues-viewer), using Backbone.Router for routing, and it wasn't terrible. But it wasn't amazing, either. I had a [router with event handlers](https://github.com/jaredly/github-issues-viewer/blob/v0.1.2/lib/view.js#L36) that then called setState. But translating between route+params and state was very ad-hoc.\n\nIdeally, you could have a one-to-one mapping:\n\n```\n/people/joan/2-jan-13\n\n=>\n\n{\n   page: \"personArchive\",\n   params: {\n      person: \"joan\",\n      date: new Date(...)\n   }\n}\n```\n\n_And back again._\n\nSo you could call\n\n```\nsetRoute(\"personArchive\", {person: \"joan\", date: new Date(...)})\n```\n\nand it would do the right thing. Abstract the urls away so developers never have to care. They just read the props, state and route and render appropriately.\n\nAm I super off-base? Is there a better way to do state-conscious routing?\n\nI would love to put together a proof of concept if the idea sounds appealing.\n",
        "remove_template_description": "Here's my idea. Please let me know if it's any good.  Routes in a single-page app basically just represent state (or props, depending on your perspective), and no-one does state better than React. Which makes me think that React will be awesome at route management.  I've taken a stab at [making a single-page app in react](https://github.com/jaredly/github-issues-viewer), using Backbone.Router for routing, and it wasn't terrible. But it wasn't amazing, either. I had a [router with event handlers](https://github.com/jaredly/github-issues-viewer/blob/v0.1.2/lib/view.js#L36) that then called setState. But translating between route+params and state was very ad-hoc.  Ideally, you could have a one-to-one mapping:  ``` /people/joan/2-jan-13  =>  {    page: \"personArchive\",    params: {       person: \"joan\",       date: new Date(...)    } } ```  _And back again._  So you could call  ``` setRoute(\"personArchive\", {person: \"joan\", date: new Date(...)}) ```  and it would do the right thing. Abstract the urls away so developers never have to care. They just read the props, state and route and render appropriately.  Am I super off-base? Is there a better way to do state-conscious routing?  I would love to put together a proof of concept if the idea sounds appealing."
    },
    {
        "issue_id": 25030035,
        "title": "Make ReactMarkupChecksum.canReuseMarkup() injectable to save bytes",
        "label": [
            "Type: Enhancement"
        ],
        "date": "2014-01-03T19:08:06Z",
        "status": "closed",
        "description": "Original description by @petehunt:\nRight now even if you aren't using server rendering you're paying the price of adler32 bytes down the wire. We should instead make this injectable.\n",
        "remove_template_description": "Original description by @petehunt: Right now even if you aren't using server rendering you're paying the price of adler32 bytes down the wire. We should instead make this injectable."
    },
    {
        "issue_id": 24930290,
        "title": "Source map support for jsx binary",
        "label": [
            "Type: Enhancement",
            "Component: Build Infrastructure"
        ],
        "date": "2013-12-31T20:03:33Z",
        "status": "closed",
        "description": "Would be nice.\n",
        "remove_template_description": "Would be nice."
    },
    {
        "issue_id": 23807592,
        "title": "Handle PhantomJS crashes better",
        "label": [
            "Type: Enhancement",
            "Component: Build Infrastructure"
        ],
        "date": "2013-12-05T18:39:41Z",
        "status": "closed",
        "description": "",
        "remove_template_description": ""
    },
    {
        "issue_id": 22859666,
        "title": "JSX \u2014 Enable lazy subtree execution",
        "label": [
            "Type: Enhancement"
        ],
        "date": "2013-11-18T19:08:16Z",
        "status": "closed",
        "description": "In HTML, certain tags stop the HTML5 parser from parsing children, e.g. `<textarea>`, `<style>`, `<script>`, etc\u2026\n\nIt should be possible to do something similar in JSX. e.g.,\u2026\n\nThis JSX code\u2026\n\n``` HTML\n<foo><bar /></foo><baz />\n<reactishTextareaOrSomethingLikeThat isHip={true}>\n    <foo><bar /></foo><baz />\n</reactishTextareaOrSomethingLikeThat>\n```\n\nwould be compiled to this JavaScript\u2026\n\n``` JavaScript\nfoo(null, bar(null )); baz(null);\nreactishTextareaOrSomethingLikeThat({ isHip:true }, function(wrapper){\n    wrapper(null, foo(null, bar(null )), baz(null));\n});\n```\n\ninstead of immediately executing the children like this\u2026\n\n``` JavaScript\nfoo(null, bar(null ));\nreactishTextareaOrSomethingLikeThat({ isHip:true },\n    foo(null, bar(null )), baz(null)\n);\n```\n",
        "remove_template_description": "In HTML, certain tags stop the HTML5 parser from parsing children, e.g. `<textarea>`, `<style>`, `<script>`, etc\u2026  It should be possible to do something similar in JSX. e.g.,\u2026  This JSX code\u2026  ``` HTML <foo><bar /></foo><baz /> <reactishTextareaOrSomethingLikeThat isHip={true}>     <foo><bar /></foo><baz /> </reactishTextareaOrSomethingLikeThat> ```  would be compiled to this JavaScript\u2026  ``` JavaScript foo(null, bar(null )); baz(null); reactishTextareaOrSomethingLikeThat({ isHip:true }, function(wrapper){     wrapper(null, foo(null, bar(null )), baz(null)); }); ```  instead of immediately executing the children like this\u2026  ``` JavaScript foo(null, bar(null )); reactishTextareaOrSomethingLikeThat({ isHip:true },     foo(null, bar(null )), baz(null) ); ```"
    },
    {
        "issue_id": 22681353,
        "title": "Make `grunt test` output less noisy",
        "label": [
            "Type: Enhancement"
        ],
        "date": "2013-11-14T18:18:05Z",
        "status": "closed",
        "description": "The JSON format is great for Sauce but not so great for running tests manually in the console.\n",
        "remove_template_description": "The JSON format is great for Sauce but not so great for running tests manually in the console."
    },
    {
        "issue_id": 20189331,
        "title": "Listen for events at mount point, not top level?",
        "label": [
            "Type: Enhancement"
        ],
        "date": "2013-09-27T19:14:23Z",
        "status": "closed",
        "description": "Any event that occurs on the page (regardless of if it's on a DOM subtree managed by React) goes through React's event subsystem. It would be great if we instead listened at the mount point (and any child documents in e.g. iframes) instead of at the top of the page.\n",
        "remove_template_description": "Any event that occurs on the page (regardless of if it's on a DOM subtree managed by React) goes through React's event subsystem. It would be great if we instead listened at the mount point (and any child documents in e.g. iframes) instead of at the top of the page."
    },
    {
        "issue_id": 19283811,
        "title": "Create sourcemaps for the build",
        "label": [
            "Type: Enhancement"
        ],
        "date": "2013-09-10T20:45:21Z",
        "status": "closed",
        "description": "Browserify sort of allows you to do this, but it puts them inline in the same file, which is _far_ from ideal. We should consider working with the browserify team and make it possible to build the map outside of the bundle or do something else (might be able to extract sourcemap out, might have to stop using browserify)\n",
        "remove_template_description": "Browserify sort of allows you to do this, but it puts them inline in the same file, which is _far_ from ideal. We should consider working with the browserify team and make it possible to build the map outside of the bundle or do something else (might be able to extract sourcemap out, might have to stop using browserify)"
    },
    {
        "issue_id": 19001084,
        "title": "Send npm package to builds site as well",
        "label": [
            "Type: Enhancement",
            "Component: Build Infrastructure"
        ],
        "date": "2013-09-04T20:50:33Z",
        "status": "closed",
        "description": "http://react.zpao.com/builds/master/latest/ has the browser packages, but we've had requests for the npm package as well.\n",
        "remove_template_description": "http://react.zpao.com/builds/master/latest/ has the browser packages, but we've had requests for the npm package as well."
    },
    {
        "issue_id": 18263415,
        "title": "Make onChange work for contenteditable",
        "label": [
            "Type: Enhancement"
        ],
        "date": "2013-08-19T21:00:49Z",
        "status": "closed",
        "description": "Apparently it doesn't, but it would be pretty awesome if it did. We already listen for `DOMCharacterDataModified` so I don't think it should be too terrible. Tangentially it would be great to stop using mutation events and switch over to observers (let's not do that here though unless it dovetails really nicely).\n\nInterested @spicyj?\n",
        "remove_template_description": "Apparently it doesn't, but it would be pretty awesome if it did. We already listen for `DOMCharacterDataModified` so I don't think it should be too terrible. Tangentially it would be great to stop using mutation events and switch over to observers (let's not do that here though unless it dovetails really nicely).  Interested @spicyj?"
    },
    {
        "issue_id": 18182776,
        "title": "React should support Content Security Policy",
        "label": [
            "Type: Enhancement"
        ],
        "date": "2013-08-16T22:48:45Z",
        "status": "closed",
        "description": "React is currently incompatible with sites that enable a Content Security Policy:\n\n> Uncaught EvalError: Refused to evaluate a string as JavaScript because 'unsafe-eval' is not an allowed source of script in the following Content Security Policy directive: \"default-src 'self'\". [1]\n\nFrom some quick testing, there appears to be only one place in React currently preforming evaluation from a string: https://github.com/facebook/react/blob/master/src/environment/ExecutionEnvironment.js#L39\n\n```\n- global: new Function('return this;')()\n+ global: function() { return this; }()\n```\n\nThis one-off is easy enough to fix in a single pull request that I'll gladly submit. However, I'm uneasy deploying React on a CSP-enabled site without a bit of integration testing and an understanding of whether CSP incompatibility issues even qualify as bugs. What's the official stance on React+Content-Security-Policy?\n\n[1] https://dvcs.w3.org/hg/content-security-policy/raw-file/tip/csp-specification.dev.html#usage\n",
        "remove_template_description": "React is currently incompatible with sites that enable a Content Security Policy:  > Uncaught EvalError: Refused to evaluate a string as JavaScript because 'unsafe-eval' is not an allowed source of script in the following Content Security Policy directive: \"default-src 'self'\". [1]  From some quick testing, there appears to be only one place in React currently preforming evaluation from a string: https://github.com/facebook/react/blob/master/src/environment/ExecutionEnvironment.js#L39  ``` - global: new Function('return this;')() + global: function() { return this; }() ```  This one-off is easy enough to fix in a single pull request that I'll gladly submit. However, I'm uneasy deploying React on a CSP-enabled site without a bit of integration testing and an understanding of whether CSP incompatibility issues even qualify as bugs. What's the official stance on React+Content-Security-Policy?  [1] https://dvcs.w3.org/hg/content-security-policy/raw-file/tip/csp-specification.dev.html#usage"
    },
    {
        "issue_id": 17708144,
        "title": "Consider warning when using the wrong case for an HTML attribute",
        "label": [
            "Type: Enhancement"
        ],
        "date": "2013-08-06T19:00:40Z",
        "status": "closed",
        "description": "Like if you do `<textarea maxlength={...} />`. The current behavior is opaque and sort of confusing for people.\n",
        "remove_template_description": "Like if you do `<textarea maxlength={...} />`. The current behavior is opaque and sort of confusing for people."
    },
    {
        "issue_id": 17326085,
        "title": "Computed properties",
        "label": [
            "Type: Enhancement",
            "Resolution: Wontfix"
        ],
        "date": "2013-07-29T07:08:23Z",
        "status": "closed",
        "description": "One thing I've wanted a couple of times in React is having computed properties, something vaguely like [Ember's computed properties](http://emberjs.com/guides/object-model/computed-properties/):\n\n```\nfullName: function() {\n    var firstName = this.get('firstName');\n    var lastName = this.get('lastName');\n\n    return firstName + ' ' + lastName;\n}.property('firstName', 'lastName')\n```\n\nIn my app one case where this would be useful is where one prop is a string that gets parsed into a more elaborate object before being displayed. Currently I'm doing the parsing in componentWillMount and componentWillReceiveProps and then setting state, which works pretty well, but perhaps there's a nicer way we can provide.\n",
        "remove_template_description": "One thing I've wanted a couple of times in React is having computed properties, something vaguely like [Ember's computed properties](http://emberjs.com/guides/object-model/computed-properties/):  ``` fullName: function() {     var firstName = this.get('firstName');     var lastName = this.get('lastName');      return firstName + ' ' + lastName; }.property('firstName', 'lastName') ```  In my app one case where this would be useful is where one prop is a string that gets parsed into a more elaborate object before being displayed. Currently I'm doing the parsing in componentWillMount and componentWillReceiveProps and then setting state, which works pretty well, but perhaps there's a nicer way we can provide."
    },
    {
        "issue_id": 16739405,
        "title": "onContextMenu event?",
        "label": [
            "Type: Enhancement"
        ],
        "date": "2013-07-15T04:48:10Z",
        "status": "closed",
        "description": "This event doesn't exist yet.\n",
        "remove_template_description": "This event doesn't exist yet."
    },
    {
        "issue_id": 16439404,
        "title": "setState (and others) parameters format",
        "label": [
            "Type: Enhancement",
            "Resolution: Wontfix"
        ],
        "date": "2013-07-07T05:47:25Z",
        "status": "closed",
        "description": "Currently accidentally using `this.setState('title', 'Car')` throws an unhelpful `MERGE_CORE_FAILURE` error. Would be nice to either throw a better error or accept this format.\nSame goes for `setProps`, etc.\n",
        "remove_template_description": "Currently accidentally using `this.setState('title', 'Car')` throws an unhelpful `MERGE_CORE_FAILURE` error. Would be nice to either throw a better error or accept this format. Same goes for `setProps`, etc."
    },
    {
        "issue_id": 16438172,
        "title": "Pass rootNode for componentWillUnmount",
        "label": [
            "Type: Enhancement",
            "Resolution: Wontfix"
        ],
        "date": "2013-07-07T02:28:43Z",
        "status": "closed",
        "description": "Just like for `componentDidMount` and others.\n",
        "remove_template_description": "Just like for `componentDidMount` and others."
    },
    {
        "issue_id": 16322021,
        "title": "Enable mocking of required modules during tests",
        "label": [
            "Type: Enhancement"
        ],
        "date": "2013-07-03T14:58:29Z",
        "status": "closed",
        "description": "The most recurrent source of disagreement between test results within Facebook and those given by `grunt test` is that Facebook has a more consistent strategy for mocking modules that are not currently under test.\n\nWhen I implemented the PhantomJS test harness for this open-source repository, for the sake of experiment and because the \"right way\" would have been \"hard,\" I decided to play with fire: I discarded the assumption of auto-mocking entirely, in preference to simply fixing any tests that failed because of the lack of mocking.\n\nFortunately, there have not been too many test failures of that sort, partly due to another mitigating factor: we run each test suite in its own `<iframe>`, so information is somewhat isolated between each test unit.\n\nNevertheless, I think we can do a much better job of emulating the mocking behavior of the FB codebase. Discussion of plans here: https://github.com/facebook/react/issues/154#issuecomment-20419661\n\ncc @zpao @jeffmo @jordwalke @petehunt\n",
        "remove_template_description": "The most recurrent source of disagreement between test results within Facebook and those given by `grunt test` is that Facebook has a more consistent strategy for mocking modules that are not currently under test.  When I implemented the PhantomJS test harness for this open-source repository, for the sake of experiment and because the \"right way\" would have been \"hard,\" I decided to play with fire: I discarded the assumption of auto-mocking entirely, in preference to simply fixing any tests that failed because of the lack of mocking.  Fortunately, there have not been too many test failures of that sort, partly due to another mitigating factor: we run each test suite in its own `<iframe>`, so information is somewhat isolated between each test unit.  Nevertheless, I think we can do a much better job of emulating the mocking behavior of the FB codebase. Discussion of plans here: https://github.com/facebook/react/issues/154#issuecomment-20419661  cc @zpao @jeffmo @jordwalke @petehunt"
    },
    {
        "issue_id": 15649455,
        "title": "Come up with a convention for forcing bin/jsx rebuilds without manually clearing .module-cache",
        "label": [
            "Type: Enhancement"
        ],
        "date": "2013-06-17T18:57:35Z",
        "status": "closed",
        "description": "cc @petehunt @zpao\n",
        "remove_template_description": "cc @petehunt @zpao"
    },
    {
        "issue_id": 15426623,
        "title": "Add a demo using .coffee files to implement a React component",
        "label": [
            "Type: Enhancement"
        ],
        "date": "2013-06-11T22:45:50Z",
        "status": "closed",
        "description": "cc @petehunt\n",
        "remove_template_description": "cc @petehunt"
    },
    {
        "issue_id": 15407453,
        "title": "bin/jsx should not relativize required module IDs unless --relativize is passed",
        "label": [
            "Type: Enhancement"
        ],
        "date": "2013-06-11T16:17:39Z",
        "status": "closed",
        "description": "Inspired by https://github.com/facebook/react/issues/71#issuecomment-19143496\n\nThis will reduce the number of assumptions imposed by `bin/jsx` considerably.\n\nWe should still use `--relativize` for our grunt tasks, but that's our poison to pick.\n\ncc @petehunt @zpao\n",
        "remove_template_description": "Inspired by https://github.com/facebook/react/issues/71#issuecomment-19143496  This will reduce the number of assumptions imposed by `bin/jsx` considerably.  We should still use `--relativize` for our grunt tasks, but that's our poison to pick.  cc @petehunt @zpao"
    },
    {
        "issue_id": 15295804,
        "title": "Allow namespacing in component names in JSX",
        "label": [
            "Type: Enhancement"
        ],
        "date": "2013-06-07T23:09:22Z",
        "status": "closed",
        "description": "```\n23:07 < balpert> can we add <Namespaced.Things /> to JSX?\n23:07 < jwalke> I like that you chose the dot!\n23:07 < jwalke> Keep it javascript-first.\n23:07 < balpert> yes\n23:08 < balpert> translating colon to dot would be absurd\n23:08 < balpert> (in my opinion)\n23:08 < jwalke> So you could have var MyComponentsPackage = {Typeahead:\n                R.createClass.. }\n23:08 < jwalke> <MyComponentsPackage.Typeahead />\n23:08 < jwalke> I like it.\n23:08 < jwalke> Make an issue!\n```\n",
        "remove_template_description": "``` 23:07 < balpert> can we add <Namespaced.Things /> to JSX? 23:07 < jwalke> I like that you chose the dot! 23:07 < jwalke> Keep it javascript-first. 23:07 < balpert> yes 23:08 < balpert> translating colon to dot would be absurd 23:08 < balpert> (in my opinion) 23:08 < jwalke> So you could have var MyComponentsPackage = {Typeahead:                 R.createClass.. } 23:08 < jwalke> <MyComponentsPackage.Typeahead /> 23:08 < jwalke> I like it. 23:08 < jwalke> Make an issue! ```"
    },
    {
        "issue_id": 15078331,
        "title": "Work with compile-to-JS languages (like CoffeeScript)",
        "label": [
            "Type: Enhancement"
        ],
        "date": "2013-06-03T17:27:33Z",
        "status": "closed",
        "description": "JSX is nice, but those using compile-to-JS language have to change the transpiler to connect to the JSX compiler. Is there any chance of adding alternative DOM syntax to JSX so it does not break every compile-to-JS language? Something `gettext`-style would be nice. So in addition to:\n\n```\nvar HelloMessage = React.createClass({\n  render: function() {\n    return <div>{'Hello ' + this.props.name}</div>;\n  }\n});\n```\n\nit would be nice to support\n\n```\nvar HelloMessage = React.createClass({\n  render: function() {\n    return _dom_(\"<div>{'Hello ' + this.props.name}</div>\");\n  }\n});\n```\n",
        "remove_template_description": "JSX is nice, but those using compile-to-JS language have to change the transpiler to connect to the JSX compiler. Is there any chance of adding alternative DOM syntax to JSX so it does not break every compile-to-JS language? Something `gettext`-style would be nice. So in addition to:  ``` var HelloMessage = React.createClass({   render: function() {     return <div>{'Hello ' + this.props.name}</div>;   } }); ```  it would be nice to support  ``` var HelloMessage = React.createClass({   render: function() {     return _dom_(\"<div>{'Hello ' + this.props.name}</div>\");   } }); ```"
    }
]